import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class DataPropertiesValue : Tea.TeaModel {
    public var displayName: String?

    public var description_: String?

    public var name: String?

    public var dataType: String?

    public var pattern: String?

    public var patternErrorMessage: String?

    public var minLength: Int32?

    public var maxLength: Int32?

    public var minimum: Double?

    public var maximum: Double?

    public var required_: Bool?

    public var system: Bool?

    public var disabled: Bool?

    public var array: Bool?

    public var readOnly: Bool?

    public var editorType: String?

    public var attributes: String?

    public var displayOrder: Int32?

    public var createdTime: Int64?

    public var updatedTime: Int64?

    public var creator: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.pattern != nil {
            map["Pattern"] = self.pattern!
        }
        if self.patternErrorMessage != nil {
            map["PatternErrorMessage"] = self.patternErrorMessage!
        }
        if self.minLength != nil {
            map["MinLength"] = self.minLength!
        }
        if self.maxLength != nil {
            map["MaxLength"] = self.maxLength!
        }
        if self.minimum != nil {
            map["Minimum"] = self.minimum!
        }
        if self.maximum != nil {
            map["Maximum"] = self.maximum!
        }
        if self.required_ != nil {
            map["Required"] = self.required_!
        }
        if self.system != nil {
            map["System"] = self.system!
        }
        if self.disabled != nil {
            map["Disabled"] = self.disabled!
        }
        if self.array != nil {
            map["Array"] = self.array!
        }
        if self.readOnly != nil {
            map["ReadOnly"] = self.readOnly!
        }
        if self.editorType != nil {
            map["EditorType"] = self.editorType!
        }
        if self.attributes != nil {
            map["Attributes"] = self.attributes!
        }
        if self.displayOrder != nil {
            map["DisplayOrder"] = self.displayOrder!
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.updatedTime != nil {
            map["UpdatedTime"] = self.updatedTime!
        }
        if self.creator != nil {
            map["Creator"] = self.creator!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DisplayName"] as? String {
            self.displayName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["Pattern"] as? String {
            self.pattern = value
        }
        if let value = dict["PatternErrorMessage"] as? String {
            self.patternErrorMessage = value
        }
        if let value = dict["MinLength"] as? Int32 {
            self.minLength = value
        }
        if let value = dict["MaxLength"] as? Int32 {
            self.maxLength = value
        }
        if let value = dict["Minimum"] as? Double {
            self.minimum = value
        }
        if let value = dict["Maximum"] as? Double {
            self.maximum = value
        }
        if let value = dict["Required"] as? Bool {
            self.required_ = value
        }
        if let value = dict["System"] as? Bool {
            self.system = value
        }
        if let value = dict["Disabled"] as? Bool {
            self.disabled = value
        }
        if let value = dict["Array"] as? Bool {
            self.array = value
        }
        if let value = dict["ReadOnly"] as? Bool {
            self.readOnly = value
        }
        if let value = dict["EditorType"] as? String {
            self.editorType = value
        }
        if let value = dict["Attributes"] as? String {
            self.attributes = value
        }
        if let value = dict["DisplayOrder"] as? Int32 {
            self.displayOrder = value
        }
        if let value = dict["CreatedTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["UpdatedTime"] as? Int64 {
            self.updatedTime = value
        }
        if let value = dict["Creator"] as? String {
            self.creator = value
        }
    }
}

public class DataSchemaPropertiesValue : Tea.TeaModel {
    public var displayName: String?

    public var description_: String?

    public var name: String?

    public var dataType: String?

    public var pattern: String?

    public var patternErrorMessage: String?

    public var minLength: Int32?

    public var maxLength: Int32?

    public var minimum: Double?

    public var maximum: Double?

    public var required_: Bool?

    public var system: Bool?

    public var disabled: Bool?

    public var array: Bool?

    public var readOnly: Bool?

    public var editorType: String?

    public var attributes: String?

    public var displayOrder: Int32?

    public var createdTime: Int64?

    public var updatedTime: Int64?

    public var creator: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.pattern != nil {
            map["Pattern"] = self.pattern!
        }
        if self.patternErrorMessage != nil {
            map["PatternErrorMessage"] = self.patternErrorMessage!
        }
        if self.minLength != nil {
            map["MinLength"] = self.minLength!
        }
        if self.maxLength != nil {
            map["MaxLength"] = self.maxLength!
        }
        if self.minimum != nil {
            map["Minimum"] = self.minimum!
        }
        if self.maximum != nil {
            map["Maximum"] = self.maximum!
        }
        if self.required_ != nil {
            map["Required"] = self.required_!
        }
        if self.system != nil {
            map["System"] = self.system!
        }
        if self.disabled != nil {
            map["Disabled"] = self.disabled!
        }
        if self.array != nil {
            map["Array"] = self.array!
        }
        if self.readOnly != nil {
            map["ReadOnly"] = self.readOnly!
        }
        if self.editorType != nil {
            map["EditorType"] = self.editorType!
        }
        if self.attributes != nil {
            map["Attributes"] = self.attributes!
        }
        if self.displayOrder != nil {
            map["DisplayOrder"] = self.displayOrder!
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.updatedTime != nil {
            map["UpdatedTime"] = self.updatedTime!
        }
        if self.creator != nil {
            map["Creator"] = self.creator!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DisplayName"] as? String {
            self.displayName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["Pattern"] as? String {
            self.pattern = value
        }
        if let value = dict["PatternErrorMessage"] as? String {
            self.patternErrorMessage = value
        }
        if let value = dict["MinLength"] as? Int32 {
            self.minLength = value
        }
        if let value = dict["MaxLength"] as? Int32 {
            self.maxLength = value
        }
        if let value = dict["Minimum"] as? Double {
            self.minimum = value
        }
        if let value = dict["Maximum"] as? Double {
            self.maximum = value
        }
        if let value = dict["Required"] as? Bool {
            self.required_ = value
        }
        if let value = dict["System"] as? Bool {
            self.system = value
        }
        if let value = dict["Disabled"] as? Bool {
            self.disabled = value
        }
        if let value = dict["Array"] as? Bool {
            self.array = value
        }
        if let value = dict["ReadOnly"] as? Bool {
            self.readOnly = value
        }
        if let value = dict["EditorType"] as? String {
            self.editorType = value
        }
        if let value = dict["Attributes"] as? String {
            self.attributes = value
        }
        if let value = dict["DisplayOrder"] as? Int32 {
            self.displayOrder = value
        }
        if let value = dict["CreatedTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["UpdatedTime"] as? Int64 {
            self.updatedTime = value
        }
        if let value = dict["Creator"] as? String {
            self.creator = value
        }
    }
}

public class AbortCampaignRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class AbortCampaignResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AbortCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AbortCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AbortCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AcceptChatRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
    }
}

public class AcceptChatResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AcceptChatResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AcceptChatResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AcceptChatResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddBlacklistCallTaggingRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public var number: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
    }
}

public class AddBlacklistCallTaggingResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddBlacklistCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddBlacklistCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddBlacklistCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddCasesRequest : Tea.TeaModel {
    public class CaseList : Tea.TeaModel {
        public var caller: String?

        public var customVariables: String?

        public var maskedCallee: String?

        public var phoneNumber: String?

        public var referenceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.caller != nil {
                map["Caller"] = self.caller!
            }
            if self.customVariables != nil {
                map["CustomVariables"] = self.customVariables!
            }
            if self.maskedCallee != nil {
                map["MaskedCallee"] = self.maskedCallee!
            }
            if self.phoneNumber != nil {
                map["PhoneNumber"] = self.phoneNumber!
            }
            if self.referenceId != nil {
                map["ReferenceId"] = self.referenceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Caller"] as? String {
                self.caller = value
            }
            if let value = dict["CustomVariables"] as? String {
                self.customVariables = value
            }
            if let value = dict["MaskedCallee"] as? String {
                self.maskedCallee = value
            }
            if let value = dict["PhoneNumber"] as? String {
                self.phoneNumber = value
            }
            if let value = dict["ReferenceId"] as? String {
                self.referenceId = value
            }
        }
    }
    public var campaignId: String?

    public var caseList: [AddCasesRequest.CaseList]?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.caseList != nil {
            var tmp : [Any] = []
            for k in self.caseList! {
                tmp.append(k.toMap())
            }
            map["CaseList"] = tmp
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["CaseList"] as? [Any?] {
            var tmp : [AddCasesRequest.CaseList] = []
            for v in value {
                if v != nil {
                    var model = AddCasesRequest.CaseList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.caseList = tmp
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class AddCasesShrinkRequest : Tea.TeaModel {
    public var campaignId: String?

    public var caseListShrink: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.caseListShrink != nil {
            map["CaseList"] = self.caseListShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["CaseList"] as? String {
            self.caseListShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class AddCasesResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddCasesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddCasesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddCasesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddFeedbackRequest : Tea.TeaModel {
    public var feedback: String?

    public var instanceId: String?

    public var rating: Int32?

    public var taskId: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.feedback != nil {
            map["Feedback"] = self.feedback!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.rating != nil {
            map["Rating"] = self.rating!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Feedback"] as? String {
            self.feedback = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Rating"] as? Int32 {
            self.rating = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class AddFeedbackResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddFeedbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddFeedbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddFeedbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddNumbersToSkillGroupRequest : Tea.TeaModel {
    public var instNumberGroupIdList: String?

    public var instanceId: String?

    public var numberList: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instNumberGroupIdList != nil {
            map["InstNumberGroupIdList"] = self.instNumberGroupIdList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstNumberGroupIdList"] as? String {
            self.instNumberGroupIdList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class AddNumbersToSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddNumbersToSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddNumbersToSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddNumbersToSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPersonalNumbersToUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var numberList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class AddPersonalNumbersToUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddPersonalNumbersToUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPersonalNumbersToUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPersonalNumbersToUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPhoneNumberToSkillGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var number: String?

    public var skillGroupIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
    }
}

public class AddPhoneNumberToSkillGroupsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddPhoneNumberToSkillGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPhoneNumberToSkillGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPhoneNumberToSkillGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPhoneNumbersRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public var numberGroupId: String?

    public var numberList: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberGroupId != nil {
            map["NumberGroupId"] = self.numberGroupId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberGroupId"] as? String {
            self.numberGroupId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class AddPhoneNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddPhoneNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPhoneNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPhoneNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddSchemaPropertyRequest : Tea.TeaModel {
    public class Property : Tea.TeaModel {
        public var array: Bool?

        public var attributes: String?

        public var dataType: String?

        public var description_: String?

        public var disabled: Bool?

        public var displayName: String?

        public var displayOrder: Int32?

        public var editorType: String?

        public var maxLength: Int32?

        public var maximum: Double?

        public var minLength: Int32?

        public var minimum: Double?

        public var name: String?

        public var pattern: String?

        public var patternErrorMessage: String?

        public var readOnly: Bool?

        public var required_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.array != nil {
                map["Array"] = self.array!
            }
            if self.attributes != nil {
                map["Attributes"] = self.attributes!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.disabled != nil {
                map["Disabled"] = self.disabled!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayOrder != nil {
                map["DisplayOrder"] = self.displayOrder!
            }
            if self.editorType != nil {
                map["EditorType"] = self.editorType!
            }
            if self.maxLength != nil {
                map["MaxLength"] = self.maxLength!
            }
            if self.maximum != nil {
                map["Maximum"] = self.maximum!
            }
            if self.minLength != nil {
                map["MinLength"] = self.minLength!
            }
            if self.minimum != nil {
                map["Minimum"] = self.minimum!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.pattern != nil {
                map["Pattern"] = self.pattern!
            }
            if self.patternErrorMessage != nil {
                map["PatternErrorMessage"] = self.patternErrorMessage!
            }
            if self.readOnly != nil {
                map["ReadOnly"] = self.readOnly!
            }
            if self.required_ != nil {
                map["Required"] = self.required_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Array"] as? Bool {
                self.array = value
            }
            if let value = dict["Attributes"] as? String {
                self.attributes = value
            }
            if let value = dict["DataType"] as? String {
                self.dataType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Disabled"] as? Bool {
                self.disabled = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayOrder"] as? Int32 {
                self.displayOrder = value
            }
            if let value = dict["EditorType"] as? String {
                self.editorType = value
            }
            if let value = dict["MaxLength"] as? Int32 {
                self.maxLength = value
            }
            if let value = dict["Maximum"] as? Double {
                self.maximum = value
            }
            if let value = dict["MinLength"] as? Int32 {
                self.minLength = value
            }
            if let value = dict["Minimum"] as? Double {
                self.minimum = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Pattern"] as? String {
                self.pattern = value
            }
            if let value = dict["PatternErrorMessage"] as? String {
                self.patternErrorMessage = value
            }
            if let value = dict["ReadOnly"] as? Bool {
                self.readOnly = value
            }
            if let value = dict["Required"] as? Bool {
                self.required_ = value
            }
        }
    }
    public var instanceId: String?

    public var property: AddSchemaPropertyRequest.Property?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.property?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.property != nil {
            map["Property"] = self.property?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Property"] as? [String: Any?] {
            var model = AddSchemaPropertyRequest.Property()
            model.fromMap(value)
            self.property = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class AddSchemaPropertyShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var propertyShrink: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.propertyShrink != nil {
            map["Property"] = self.propertyShrink!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Property"] as? String {
            self.propertyShrink = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class AddSchemaPropertyResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddSchemaPropertyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddSchemaPropertyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddSchemaPropertyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddSkillGroupsToUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillLevelList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillLevelList != nil {
            map["SkillLevelList"] = self.skillLevelList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillLevelList"] as? String {
            self.skillLevelList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class AddSkillGroupsToUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddSkillGroupsToUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddSkillGroupsToUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddSkillGroupsToUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTicketTaskRequest : Tea.TeaModel {
    public var assignee: String?

    public var comment: String?

    public var instanceId: String?

    public var position: String?

    public var taskId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assignee != nil {
            map["Assignee"] = self.assignee!
        }
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.position != nil {
            map["Position"] = self.position!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Assignee"] as? String {
            self.assignee = value
        }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Position"] as? String {
            self.position = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class AddTicketTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddTicketTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTicketTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTicketTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddUsersToSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public var userSkillLevelList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.userSkillLevelList != nil {
            map["UserSkillLevelList"] = self.userSkillLevelList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["UserSkillLevelList"] as? String {
            self.userSkillLevelList = value
        }
    }
}

public class AddUsersToSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddUsersToSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddUsersToSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddUsersToSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AnalyzeConversationRequest : Tea.TeaModel {
    public var contactId: String?

    public var fieldListJson: String?

    public var instanceId: String?

    public var taskListJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.fieldListJson != nil {
            map["FieldListJson"] = self.fieldListJson!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.taskListJson != nil {
            map["TaskListJson"] = self.taskListJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["FieldListJson"] as? String {
            self.fieldListJson = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TaskListJson"] as? String {
            self.taskListJson = value
        }
    }
}

public class AnalyzeConversationResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AnalyzeConversationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AnalyzeConversationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AnalyzeConversationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AnswerCallRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class AnswerCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelId: String?

                public var channelState: String?

                public var channelVariables: String?

                public var destination: String?

                public var index: Int64?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.channelVariables != nil {
                        map["ChannelVariables"] = self.channelVariables!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["ChannelVariables"] as? String {
                        self.channelVariables = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int64 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [AnswerCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [AnswerCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = AnswerCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: AnswerCallResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: AnswerCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = AnswerCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = AnswerCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: AnswerCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AnswerCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AnswerCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AnswerCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AnswerCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AppendCasesRequest : Tea.TeaModel {
    public class Body : Tea.TeaModel {
        public var agentId: String?

        public var caller: String?

        public var customVariables: String?

        public var maskedCallee: String?

        public var phoneNumber: String?

        public var referenceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentId != nil {
                map["AgentId"] = self.agentId!
            }
            if self.caller != nil {
                map["Caller"] = self.caller!
            }
            if self.customVariables != nil {
                map["CustomVariables"] = self.customVariables!
            }
            if self.maskedCallee != nil {
                map["MaskedCallee"] = self.maskedCallee!
            }
            if self.phoneNumber != nil {
                map["PhoneNumber"] = self.phoneNumber!
            }
            if self.referenceId != nil {
                map["ReferenceId"] = self.referenceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentId"] as? String {
                self.agentId = value
            }
            if let value = dict["Caller"] as? String {
                self.caller = value
            }
            if let value = dict["CustomVariables"] as? String {
                self.customVariables = value
            }
            if let value = dict["MaskedCallee"] as? String {
                self.maskedCallee = value
            }
            if let value = dict["PhoneNumber"] as? String {
                self.phoneNumber = value
            }
            if let value = dict["ReferenceId"] as? String {
                self.referenceId = value
            }
        }
    }
    public var campaignId: String?

    public var instanceId: String?

    public var body: [AppendCasesRequest.Body]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.body != nil {
            var tmp : [Any] = []
            for k in self.body! {
                tmp.append(k.toMap())
            }
            map["body"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["body"] as? [Any?] {
            var tmp : [AppendCasesRequest.Body] = []
            for v in value {
                if v != nil {
                    var model = AppendCasesRequest.Body()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.body = tmp
        }
    }
}

public class AppendCasesShrinkRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public var bodyShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.bodyShrink != nil {
            map["body"] = self.bodyShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["body"] as? String {
            self.bodyShrink = value
        }
    }
}

public class AppendCasesResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AppendCasesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AppendCasesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AppendCasesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssignUsersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ramIdList: String?

    public var roleId: String?

    public var skillLevelList: String?

    public var workMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ramIdList != nil {
            map["RamIdList"] = self.ramIdList!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.skillLevelList != nil {
            map["SkillLevelList"] = self.skillLevelList!
        }
        if self.workMode != nil {
            map["WorkMode"] = self.workMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RamIdList"] as? String {
            self.ramIdList = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["SkillLevelList"] as? String {
            self.skillLevelList = value
        }
        if let value = dict["WorkMode"] as? String {
            self.workMode = value
        }
    }
}

public class AssignUsersResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var workflowId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.workflowId != nil {
            map["WorkflowId"] = self.workflowId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WorkflowId"] as? String {
            self.workflowId = value
        }
    }
}

public class AssignUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssignUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssignUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BargeInCallRequest : Tea.TeaModel {
    public var bargedUserId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bargedUserId != nil {
            map["BargedUserId"] = self.bargedUserId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BargedUserId"] as? String {
            self.bargedUserId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class BargeInCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [BargeInCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [BargeInCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = BargeInCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: BargeInCallResponseBody.Data.CallContext?

        public var userContext: BargeInCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = BargeInCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = BargeInCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: BargeInCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = BargeInCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BargeInCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BargeInCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BargeInCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BlindTransferRequest : Tea.TeaModel {
    public var callPriority: Int32?

    public var contactFlowVariables: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var queuingOverflowThreshold: Int64?

    public var queuingTimeoutSeconds: Int64?

    public var routingType: String?

    public var skillGroupId: String?

    public var strategyName: String?

    public var strategyParams: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public var transferee: String?

    public var transfereeType: String?

    public var transferor: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callPriority != nil {
            map["CallPriority"] = self.callPriority!
        }
        if self.contactFlowVariables != nil {
            map["ContactFlowVariables"] = self.contactFlowVariables!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.queuingOverflowThreshold != nil {
            map["QueuingOverflowThreshold"] = self.queuingOverflowThreshold!
        }
        if self.queuingTimeoutSeconds != nil {
            map["QueuingTimeoutSeconds"] = self.queuingTimeoutSeconds!
        }
        if self.routingType != nil {
            map["RoutingType"] = self.routingType!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.strategyName != nil {
            map["StrategyName"] = self.strategyName!
        }
        if self.strategyParams != nil {
            map["StrategyParams"] = self.strategyParams!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.transferee != nil {
            map["Transferee"] = self.transferee!
        }
        if self.transfereeType != nil {
            map["TransfereeType"] = self.transfereeType!
        }
        if self.transferor != nil {
            map["Transferor"] = self.transferor!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallPriority"] as? Int32 {
            self.callPriority = value
        }
        if let value = dict["ContactFlowVariables"] as? String {
            self.contactFlowVariables = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["QueuingOverflowThreshold"] as? Int64 {
            self.queuingOverflowThreshold = value
        }
        if let value = dict["QueuingTimeoutSeconds"] as? Int64 {
            self.queuingTimeoutSeconds = value
        }
        if let value = dict["RoutingType"] as? String {
            self.routingType = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["StrategyName"] as? String {
            self.strategyName = value
        }
        if let value = dict["StrategyParams"] as? String {
            self.strategyParams = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["Transferee"] as? String {
            self.transferee = value
        }
        if let value = dict["TransfereeType"] as? String {
            self.transfereeType = value
        }
        if let value = dict["Transferor"] as? String {
            self.transferor = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class BlindTransferResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [BlindTransferResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [BlindTransferResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = BlindTransferResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: BlindTransferResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: BlindTransferResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = BlindTransferResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = BlindTransferResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: BlindTransferResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = BlindTransferResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BlindTransferResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BlindTransferResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BlindTransferResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BridgeRtcCallRequest : Tea.TeaModel {
    public var callee: String?

    public var caller: String?

    public var deviceId: String?

    public var instanceId: String?

    public var serviceProvider: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public var videoEnabled: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.serviceProvider != nil {
            map["ServiceProvider"] = self.serviceProvider!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.videoEnabled != nil {
            map["VideoEnabled"] = self.videoEnabled!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ServiceProvider"] as? String {
            self.serviceProvider = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["VideoEnabled"] as? Bool {
            self.videoEnabled = value
        }
    }
}

public class BridgeRtcCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var jobId: String?

        public var tokenInfo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.tokenInfo != nil {
                map["TokenInfo"] = self.tokenInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["TokenInfo"] as? String {
                self.tokenInfo = value
            }
        }
    }
    public var code: String?

    public var data: BridgeRtcCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = BridgeRtcCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BridgeRtcCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BridgeRtcCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BridgeRtcCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelAttendedTransferRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class CancelAttendedTransferResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [CancelAttendedTransferResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [CancelAttendedTransferResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = CancelAttendedTransferResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: CancelAttendedTransferResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: CancelAttendedTransferResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = CancelAttendedTransferResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = CancelAttendedTransferResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: CancelAttendedTransferResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CancelAttendedTransferResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CancelAttendedTransferResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelAttendedTransferResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelAttendedTransferResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ChangeVisibilityRequest : Tea.TeaModel {
    public var instanceId: String?

    public var invisible: Bool?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.invisible != nil {
            map["Invisible"] = self.invisible!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Invisible"] as? Bool {
            self.invisible = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ChangeVisibilityResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var deviceId: String?

        public var extension_: String?

        public var instanceId: String?

        public var jobId: String?

        public var outboundScenario: Bool?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: ChangeVisibilityResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ChangeVisibilityResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ChangeVisibilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeVisibilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeVisibilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ChangeWorkModeRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var mobile: String?

    public var signedSkillGroupIdList: String?

    public var userId: String?

    public var workMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mobile != nil {
            map["Mobile"] = self.mobile!
        }
        if self.signedSkillGroupIdList != nil {
            map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.workMode != nil {
            map["WorkMode"] = self.workMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mobile"] as? String {
            self.mobile = value
        }
        if let value = dict["SignedSkillGroupIdList"] as? String {
            self.signedSkillGroupIdList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["WorkMode"] as? String {
            self.workMode = value
        }
    }
}

public class ChangeWorkModeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var deviceId: String?

        public var extension_: String?

        public var instanceId: String?

        public var jobId: String?

        public var outboundScenario: Bool?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: ChangeWorkModeResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ChangeWorkModeResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ChangeWorkModeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeWorkModeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeWorkModeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClaimChatRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class ClaimChatResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ChatContexts : Tea.TeaModel {
            public var accessChannelId: String?

            public var accessChannelName: String?

            public var accessChannelType: String?

            public var beingAssigned: Bool?

            public var callVariables: String?

            public var chatType: String?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessChannelId != nil {
                    map["AccessChannelId"] = self.accessChannelId!
                }
                if self.accessChannelName != nil {
                    map["AccessChannelName"] = self.accessChannelName!
                }
                if self.accessChannelType != nil {
                    map["AccessChannelType"] = self.accessChannelType!
                }
                if self.beingAssigned != nil {
                    map["BeingAssigned"] = self.beingAssigned!
                }
                if self.callVariables != nil {
                    map["CallVariables"] = self.callVariables!
                }
                if self.chatType != nil {
                    map["ChatType"] = self.chatType!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessChannelId"] as? String {
                    self.accessChannelId = value
                }
                if let value = dict["AccessChannelName"] as? String {
                    self.accessChannelName = value
                }
                if let value = dict["AccessChannelType"] as? String {
                    self.accessChannelType = value
                }
                if let value = dict["BeingAssigned"] as? Bool {
                    self.beingAssigned = value
                }
                if let value = dict["CallVariables"] as? String {
                    self.callVariables = value
                }
                if let value = dict["ChatType"] as? String {
                    self.chatType = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var chatContexts: [ClaimChatResponseBody.Data.ChatContexts]?

        public var contextId: Int64?

        public var userContext: ClaimChatResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chatContexts != nil {
                var tmp : [Any] = []
                for k in self.chatContexts! {
                    tmp.append(k.toMap())
                }
                map["ChatContexts"] = tmp
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChatContexts"] as? [Any?] {
                var tmp : [ClaimChatResponseBody.Data.ChatContexts] = []
                for v in value {
                    if v != nil {
                        var model = ClaimChatResponseBody.Data.ChatContexts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.chatContexts = tmp
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = ClaimChatResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: ClaimChatResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ClaimChatResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ClaimChatResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClaimChatResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClaimChatResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CoachCallRequest : Tea.TeaModel {
    public var coachedUserId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coachedUserId != nil {
            map["CoachedUserId"] = self.coachedUserId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoachedUserId"] as? String {
            self.coachedUserId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class CoachCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [CoachCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [CoachCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = CoachCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: CoachCallResponseBody.Data.CallContext?

        public var userContext: CoachCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = CoachCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = CoachCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: CoachCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CoachCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CoachCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CoachCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CoachCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CommitContactFlowRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var definition: String?

    public var description_: String?

    public var draftId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.definition != nil {
            map["Definition"] = self.definition!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.draftId != nil {
            map["DraftId"] = self.draftId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["Definition"] as? String {
            self.definition = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DraftId"] as? String {
            self.draftId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class CommitContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CommitContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommitContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CommitContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CompleteAttendedTransferRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class CompleteAttendedTransferResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [CompleteAttendedTransferResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [CompleteAttendedTransferResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = CompleteAttendedTransferResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: CompleteAttendedTransferResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: CompleteAttendedTransferResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = CompleteAttendedTransferResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = CompleteAttendedTransferResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: CompleteAttendedTransferResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CompleteAttendedTransferResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CompleteAttendedTransferResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CompleteAttendedTransferResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CompleteAttendedTransferResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAudioFileRequest : Tea.TeaModel {
    public var audioFileName: String?

    public var instanceId: String?

    public var name: String?

    public var ossFileKey: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioFileName != nil {
            map["AudioFileName"] = self.audioFileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.ossFileKey != nil {
            map["OssFileKey"] = self.ossFileKey!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AudioFileName"] as? String {
            self.audioFileName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OssFileKey"] as? String {
            self.ossFileKey = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class CreateAudioFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAudioFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAudioFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAudioFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCallSummaryRequest : Tea.TeaModel {
    public var contactId: String?

    public var context: String?

    public var customerId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.context != nil {
            map["Context"] = self.context!
        }
        if self.customerId != nil {
            map["CustomerId"] = self.customerId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["Context"] as? String {
            self.context = value
        }
        if let value = dict["CustomerId"] as? String {
            self.customerId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class CreateCallSummaryResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCallSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCallSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCallSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCallTagsRequest : Tea.TeaModel {
    public var callTagNameList: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callTagNameList != nil {
            map["CallTagNameList"] = self.callTagNameList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallTagNameList"] as? String {
            self.callTagNameList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class CreateCallTagsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var item: String?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.item != nil {
                map["Item"] = self.item!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Item"] as? String {
                self.item = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var code: String?

    public var data: [CreateCallTagsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [CreateCallTagsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = CreateCallTagsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCallTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCallTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCallTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCampaignRequest : Tea.TeaModel {
    public class CaseList : Tea.TeaModel {
        public var customVariables: String?

        public var phoneNumber: String?

        public var referenceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customVariables != nil {
                map["CustomVariables"] = self.customVariables!
            }
            if self.phoneNumber != nil {
                map["PhoneNumber"] = self.phoneNumber!
            }
            if self.referenceId != nil {
                map["ReferenceId"] = self.referenceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomVariables"] as? String {
                self.customVariables = value
            }
            if let value = dict["PhoneNumber"] as? String {
                self.phoneNumber = value
            }
            if let value = dict["ReferenceId"] as? String {
                self.referenceId = value
            }
        }
    }
    public var callableTime: String?

    public var caseFileKey: String?

    public var caseList: [CreateCampaignRequest.CaseList]?

    public var contactFlowId: String?

    public var endTime: String?

    public var executingUntilTimeout: Bool?

    public var instanceId: String?

    public var maxAttemptCount: Int64?

    public var minAttemptInterval: Int64?

    public var name: String?

    public var queueId: String?

    public var simulation: Bool?

    public var simulationParameters: String?

    public var startTime: String?

    public var strategyParameters: String?

    public var strategyType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callableTime != nil {
            map["CallableTime"] = self.callableTime!
        }
        if self.caseFileKey != nil {
            map["CaseFileKey"] = self.caseFileKey!
        }
        if self.caseList != nil {
            var tmp : [Any] = []
            for k in self.caseList! {
                tmp.append(k.toMap())
            }
            map["CaseList"] = tmp
        }
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.executingUntilTimeout != nil {
            map["ExecutingUntilTimeout"] = self.executingUntilTimeout!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maxAttemptCount != nil {
            map["MaxAttemptCount"] = self.maxAttemptCount!
        }
        if self.minAttemptInterval != nil {
            map["MinAttemptInterval"] = self.minAttemptInterval!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.queueId != nil {
            map["QueueId"] = self.queueId!
        }
        if self.simulation != nil {
            map["Simulation"] = self.simulation!
        }
        if self.simulationParameters != nil {
            map["SimulationParameters"] = self.simulationParameters!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.strategyParameters != nil {
            map["StrategyParameters"] = self.strategyParameters!
        }
        if self.strategyType != nil {
            map["StrategyType"] = self.strategyType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallableTime"] as? String {
            self.callableTime = value
        }
        if let value = dict["CaseFileKey"] as? String {
            self.caseFileKey = value
        }
        if let value = dict["CaseList"] as? [Any?] {
            var tmp : [CreateCampaignRequest.CaseList] = []
            for v in value {
                if v != nil {
                    var model = CreateCampaignRequest.CaseList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.caseList = tmp
        }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["ExecutingUntilTimeout"] as? Bool {
            self.executingUntilTimeout = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MaxAttemptCount"] as? Int64 {
            self.maxAttemptCount = value
        }
        if let value = dict["MinAttemptInterval"] as? Int64 {
            self.minAttemptInterval = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["QueueId"] as? String {
            self.queueId = value
        }
        if let value = dict["Simulation"] as? Bool {
            self.simulation = value
        }
        if let value = dict["SimulationParameters"] as? String {
            self.simulationParameters = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StrategyParameters"] as? String {
            self.strategyParameters = value
        }
        if let value = dict["StrategyType"] as? String {
            self.strategyType = value
        }
    }
}

public class CreateCampaignShrinkRequest : Tea.TeaModel {
    public var callableTime: String?

    public var caseFileKey: String?

    public var caseListShrink: String?

    public var contactFlowId: String?

    public var endTime: String?

    public var executingUntilTimeout: Bool?

    public var instanceId: String?

    public var maxAttemptCount: Int64?

    public var minAttemptInterval: Int64?

    public var name: String?

    public var queueId: String?

    public var simulation: Bool?

    public var simulationParameters: String?

    public var startTime: String?

    public var strategyParameters: String?

    public var strategyType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callableTime != nil {
            map["CallableTime"] = self.callableTime!
        }
        if self.caseFileKey != nil {
            map["CaseFileKey"] = self.caseFileKey!
        }
        if self.caseListShrink != nil {
            map["CaseList"] = self.caseListShrink!
        }
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.executingUntilTimeout != nil {
            map["ExecutingUntilTimeout"] = self.executingUntilTimeout!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maxAttemptCount != nil {
            map["MaxAttemptCount"] = self.maxAttemptCount!
        }
        if self.minAttemptInterval != nil {
            map["MinAttemptInterval"] = self.minAttemptInterval!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.queueId != nil {
            map["QueueId"] = self.queueId!
        }
        if self.simulation != nil {
            map["Simulation"] = self.simulation!
        }
        if self.simulationParameters != nil {
            map["SimulationParameters"] = self.simulationParameters!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.strategyParameters != nil {
            map["StrategyParameters"] = self.strategyParameters!
        }
        if self.strategyType != nil {
            map["StrategyType"] = self.strategyType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallableTime"] as? String {
            self.callableTime = value
        }
        if let value = dict["CaseFileKey"] as? String {
            self.caseFileKey = value
        }
        if let value = dict["CaseList"] as? String {
            self.caseListShrink = value
        }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["ExecutingUntilTimeout"] as? Bool {
            self.executingUntilTimeout = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MaxAttemptCount"] as? Int64 {
            self.maxAttemptCount = value
        }
        if let value = dict["MinAttemptInterval"] as? Int64 {
            self.minAttemptInterval = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["QueueId"] as? String {
            self.queueId = value
        }
        if let value = dict["Simulation"] as? Bool {
            self.simulation = value
        }
        if let value = dict["SimulationParameters"] as? String {
            self.simulationParameters = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StrategyParameters"] as? String {
            self.strategyParameters = value
        }
        if let value = dict["StrategyType"] as? String {
            self.strategyType = value
        }
    }
}

public class CreateCampaignResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateChatMediaUrlRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mimeType: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mimeType != nil {
            map["MimeType"] = self.mimeType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MimeType"] as? String {
            self.mimeType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateChatMediaUrlResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var mediaId: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: CreateChatMediaUrlResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateChatMediaUrlResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateChatMediaUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateChatMediaUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateChatMediaUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateContactFlowRequest : Tea.TeaModel {
    public var definition: String?

    public var description_: String?

    public var instanceId: String?

    public var name: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.definition != nil {
            map["Definition"] = self.definition!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Definition"] as? String {
            self.definition = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCustomCallTaggingRequest : Tea.TeaModel {
    public var customNumberList: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customNumberList != nil {
            map["CustomNumberList"] = self.customNumberList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomNumberList"] as? String {
            self.customNumberList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class CreateCustomCallTaggingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var item: String?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.item != nil {
                map["Item"] = self.item!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Item"] as? String {
                self.item = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var code: String?

    public var data: [CreateCustomCallTaggingResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [CreateCustomCallTaggingResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = CreateCustomCallTaggingResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCustomCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCustomCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCustomCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateInstanceRequest : Tea.TeaModel {
    public var adminRamIdList: String?

    public var description_: String?

    public var domainName: String?

    public var name: String?

    public var numberList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminRamIdList != nil {
            map["AdminRamIdList"] = self.adminRamIdList!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdminRamIdList"] as? String {
            self.adminRamIdList = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
    }
}

public class CreateInstanceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSchemaRequest : Tea.TeaModel {
    public class Properties : Tea.TeaModel {
        public var array: Bool?

        public var attributes: String?

        public var dataType: String?

        public var description_: String?

        public var disabled: Bool?

        public var displayName: String?

        public var displayOrder: Int32?

        public var editorType: String?

        public var maxLength: Int32?

        public var maximum: Double?

        public var minLength: Int32?

        public var minimum: Double?

        public var name: String?

        public var pattern: String?

        public var patternErrorMessage: String?

        public var readOnly: Bool?

        public var required_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.array != nil {
                map["Array"] = self.array!
            }
            if self.attributes != nil {
                map["Attributes"] = self.attributes!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.disabled != nil {
                map["Disabled"] = self.disabled!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayOrder != nil {
                map["DisplayOrder"] = self.displayOrder!
            }
            if self.editorType != nil {
                map["EditorType"] = self.editorType!
            }
            if self.maxLength != nil {
                map["MaxLength"] = self.maxLength!
            }
            if self.maximum != nil {
                map["Maximum"] = self.maximum!
            }
            if self.minLength != nil {
                map["MinLength"] = self.minLength!
            }
            if self.minimum != nil {
                map["Minimum"] = self.minimum!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.pattern != nil {
                map["Pattern"] = self.pattern!
            }
            if self.patternErrorMessage != nil {
                map["PatternErrorMessage"] = self.patternErrorMessage!
            }
            if self.readOnly != nil {
                map["ReadOnly"] = self.readOnly!
            }
            if self.required_ != nil {
                map["Required"] = self.required_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Array"] as? Bool {
                self.array = value
            }
            if let value = dict["Attributes"] as? String {
                self.attributes = value
            }
            if let value = dict["DataType"] as? String {
                self.dataType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Disabled"] as? Bool {
                self.disabled = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayOrder"] as? Int32 {
                self.displayOrder = value
            }
            if let value = dict["EditorType"] as? String {
                self.editorType = value
            }
            if let value = dict["MaxLength"] as? Int32 {
                self.maxLength = value
            }
            if let value = dict["Maximum"] as? Double {
                self.maximum = value
            }
            if let value = dict["MinLength"] as? Int32 {
                self.minLength = value
            }
            if let value = dict["Minimum"] as? Double {
                self.minimum = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Pattern"] as? String {
                self.pattern = value
            }
            if let value = dict["PatternErrorMessage"] as? String {
                self.patternErrorMessage = value
            }
            if let value = dict["ReadOnly"] as? Bool {
                self.readOnly = value
            }
            if let value = dict["Required"] as? Bool {
                self.required_ = value
            }
        }
    }
    public var description_: String?

    public var id: String?

    public var instanceId: String?

    public var properties: [CreateSchemaRequest.Properties]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.properties != nil {
            var tmp : [Any] = []
            for k in self.properties! {
                tmp.append(k.toMap())
            }
            map["Properties"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Properties"] as? [Any?] {
            var tmp : [CreateSchemaRequest.Properties] = []
            for v in value {
                if v != nil {
                    var model = CreateSchemaRequest.Properties()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.properties = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSchemaShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var id: String?

    public var instanceId: String?

    public var propertiesShrink: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.propertiesShrink != nil {
            map["Properties"] = self.propertiesShrink!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Properties"] as? String {
            self.propertiesShrink = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSchemaResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSchemaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSchemaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSchemaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSkillGroupRequest : Tea.TeaModel {
    public var description_: String?

    public var displayName: String?

    public var instanceId: String?

    public var mediaType: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisplayName"] as? String {
            self.displayName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreateSkillGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var description_: String?

        public var instanceId: String?

        public var mediaType: String?

        public var name: String?

        public var skillGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.mediaType != nil {
                map["MediaType"] = self.mediaType!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["MediaType"] as? String {
                self.mediaType = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["SkillGroupId"] as? String {
                self.skillGroupId = value
            }
        }
    }
    public var code: String?

    public var data: CreateSkillGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateSkillGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTicketRequest : Tea.TeaModel {
    public var contactId: String?

    public var context: String?

    public var customerId: String?

    public var instanceId: String?

    public var source: String?

    public var templateId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.context != nil {
            map["Context"] = self.context!
        }
        if self.customerId != nil {
            map["CustomerId"] = self.customerId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["Context"] as? String {
            self.context = value
        }
        if let value = dict["CustomerId"] as? String {
            self.customerId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUserRequest : Tea.TeaModel {
    public var avatarUrl: String?

    public var displayId: String?

    public var displayName: String?

    public var email: String?

    public var instanceId: String?

    public var loginName: String?

    public var mobile: String?

    public var nickname: String?

    public var resetPassword: Bool?

    public var roleId: String?

    public var skillLevelList: String?

    public var workMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.avatarUrl != nil {
            map["AvatarUrl"] = self.avatarUrl!
        }
        if self.displayId != nil {
            map["DisplayId"] = self.displayId!
        }
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.loginName != nil {
            map["LoginName"] = self.loginName!
        }
        if self.mobile != nil {
            map["Mobile"] = self.mobile!
        }
        if self.nickname != nil {
            map["Nickname"] = self.nickname!
        }
        if self.resetPassword != nil {
            map["ResetPassword"] = self.resetPassword!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.skillLevelList != nil {
            map["SkillLevelList"] = self.skillLevelList!
        }
        if self.workMode != nil {
            map["WorkMode"] = self.workMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvatarUrl"] as? String {
            self.avatarUrl = value
        }
        if let value = dict["DisplayId"] as? String {
            self.displayId = value
        }
        if let value = dict["DisplayName"] as? String {
            self.displayName = value
        }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["LoginName"] as? String {
            self.loginName = value
        }
        if let value = dict["Mobile"] as? String {
            self.mobile = value
        }
        if let value = dict["Nickname"] as? String {
            self.nickname = value
        }
        if let value = dict["ResetPassword"] as? Bool {
            self.resetPassword = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["SkillLevelList"] as? String {
            self.skillLevelList = value
        }
        if let value = dict["WorkMode"] as? String {
            self.workMode = value
        }
    }
}

public class CreateUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var avatarUrl: String?

        public var displayName: String?

        public var email: String?

        public var extension_: String?

        public var loginName: String?

        public var mobile: String?

        public var nickname: String?

        public var userId: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.avatarUrl != nil {
                map["AvatarUrl"] = self.avatarUrl!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.loginName != nil {
                map["LoginName"] = self.loginName!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.nickname != nil {
                map["Nickname"] = self.nickname!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AvatarUrl"] as? String {
                self.avatarUrl = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["LoginName"] as? String {
                self.loginName = value
            }
            if let value = dict["Mobile"] as? String {
                self.mobile = value
            }
            if let value = dict["Nickname"] as? String {
                self.nickname = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: CreateUserResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAudioFileRequest : Tea.TeaModel {
    public var audioResourceId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioResourceId != nil {
            map["AudioResourceId"] = self.audioResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AudioResourceId"] as? String {
            self.audioResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class DeleteAudioFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAudioFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAudioFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAudioFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCallTagRequest : Tea.TeaModel {
    public var instanceId: String?

    public var tagName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.tagName != nil {
            map["TagName"] = self.tagName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TagName"] as? String {
            self.tagName = value
        }
    }
}

public class DeleteCallTagResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCallTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCallTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCallTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactFlowRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class DeleteContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomCallTaggingRequest : Tea.TeaModel {
    public var instanceId: String?

    public var number: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
    }
}

public class DeleteCustomCallTaggingResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCustomCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDocumentRequest : Tea.TeaModel {
    public var documentId: String?

    public var instanceId: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.documentId != nil {
            map["DocumentId"] = self.documentId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocumentId"] as? String {
            self.documentId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class DeleteDocumentResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDocumentsRequest : Tea.TeaModel {
    public var documentIds: [String]?

    public var instanceId: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.documentIds != nil {
            map["DocumentIds"] = self.documentIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocumentIds"] as? [String] {
            self.documentIds = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class DeleteDocumentsShrinkRequest : Tea.TeaModel {
    public var documentIdsShrink: String?

    public var instanceId: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.documentIdsShrink != nil {
            map["DocumentIds"] = self.documentIdsShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocumentIds"] as? String {
            self.documentIdsShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class DeleteDocumentsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDocumentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDocumentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDocumentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteInstanceRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class DeleteInstanceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSchemaRequest : Tea.TeaModel {
    public var instanceId: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class DeleteSchemaResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSchemaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSchemaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSchemaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSchemaPropertyRequest : Tea.TeaModel {
    public var instanceId: String?

    public var propertyName: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.propertyName != nil {
            map["PropertyName"] = self.propertyName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PropertyName"] as? String {
            self.propertyName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class DeleteSchemaPropertyResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSchemaPropertyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSchemaPropertyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSchemaPropertyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSkillGroupRequest : Tea.TeaModel {
    public var force: Bool?

    public var instanceId: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class DeleteSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTicketRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class DeleteTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTicketTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class DeleteTicketTemplateResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteTicketTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTicketTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTicketTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableSchemaPropertyRequest : Tea.TeaModel {
    public var instanceId: String?

    public var propertyName: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.propertyName != nil {
            map["PropertyName"] = self.propertyName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PropertyName"] as? String {
            self.propertyName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class DisableSchemaPropertyResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisableSchemaPropertyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableSchemaPropertyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableSchemaPropertyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableTicketTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class DisableTicketTemplateResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisableTicketTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableTicketTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableTicketTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DiscardEditingContactFlowRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var draftId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.draftId != nil {
            map["DraftId"] = self.draftId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["DraftId"] as? String {
            self.draftId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class DiscardEditingContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DiscardEditingContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DiscardEditingContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DiscardEditingContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableSchemaPropertyRequest : Tea.TeaModel {
    public var instanceId: String?

    public var propertyName: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.propertyName != nil {
            map["PropertyName"] = self.propertyName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PropertyName"] as? String {
            self.propertyName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class EnableSchemaPropertyResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EnableSchemaPropertyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableSchemaPropertyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableSchemaPropertyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableTicketTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class EnableTicketTemplateResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EnableTicketTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableTicketTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableTicketTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EndConferenceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class EndConferenceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var channelContexts: [EndConferenceResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [EndConferenceResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = EndConferenceResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var instanceId: String?

            public var jobId: String?

            public var outboundScenario: Bool?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: EndConferenceResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: EndConferenceResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = EndConferenceResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = EndConferenceResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: EndConferenceResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = EndConferenceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EndConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EndConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EndConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportContactFlowRequest : Tea.TeaModel {
    public var flowId: String?

    public var instanceId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flowId != nil {
            map["FlowId"] = self.flowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlowId"] as? String {
            self.flowId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ExportContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var flowPackageData: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.flowPackageData != nil {
            map["FlowPackageData"] = self.flowPackageData!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FlowPackageData"] as? String {
            self.flowPackageData = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ExportContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportCustomCallTaggingRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ExportCustomCallTaggingResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ExportCustomCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportCustomCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportCustomCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportDoNotCallNumbersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var scope: String?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ExportDoNotCallNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ExportDoNotCallNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportDoNotCallNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportDoNotCallNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FinishTicketTaskRequest : Tea.TeaModel {
    public var comment: String?

    public var instanceId: String?

    public var taskId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class FinishTicketTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class FinishTicketTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FinishTicketTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FinishTicketTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAccessChannelOfStagingRequest : Tea.TeaModel {
    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class GetAccessChannelOfStagingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.token != nil {
                map["Token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Token"] as? String {
                self.token = value
            }
        }
    }
    public var code: String?

    public var data: GetAccessChannelOfStagingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAccessChannelOfStagingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAccessChannelOfStagingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAccessChannelOfStagingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAccessChannelOfStagingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAudioFileRequest : Tea.TeaModel {
    public var audioResourceId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioResourceId != nil {
            map["AudioResourceId"] = self.audioResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AudioResourceId"] as? String {
            self.audioResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetAudioFileResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var audioFileName: String?

        public var audioResourceId: String?

        public var createdTime: String?

        public var instanceId: String?

        public var name: String?

        public var ossFileKey: String?

        public var updatedTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.audioFileName != nil {
                map["AudioFileName"] = self.audioFileName!
            }
            if self.audioResourceId != nil {
                map["AudioResourceId"] = self.audioResourceId!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ossFileKey != nil {
                map["OssFileKey"] = self.ossFileKey!
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AudioFileName"] as? String {
                self.audioFileName = value
            }
            if let value = dict["AudioResourceId"] as? String {
                self.audioResourceId = value
            }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OssFileKey"] as? String {
                self.ossFileKey = value
            }
            if let value = dict["UpdatedTime"] as? String {
                self.updatedTime = value
            }
        }
    }
    public var code: String?

    public var data: GetAudioFileResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAudioFileResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAudioFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAudioFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAudioFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAudioFileDownloadUrlRequest : Tea.TeaModel {
    public var audioResourceId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioResourceId != nil {
            map["AudioResourceId"] = self.audioResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AudioResourceId"] as? String {
            self.audioResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetAudioFileDownloadUrlResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAudioFileDownloadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAudioFileDownloadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAudioFileDownloadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAudioFileUploadParametersRequest : Tea.TeaModel {
    public var audioFileName: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioFileName != nil {
            map["AudioFileName"] = self.audioFileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AudioFileName"] as? String {
            self.audioFileName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetAudioFileUploadParametersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var accessKeyId: String?

        public var expireTime: Int32?

        public var filePath: String?

        public var host: String?

        public var policy: String?

        public var signature: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKeyId != nil {
                map["AccessKeyId"] = self.accessKeyId!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.filePath != nil {
                map["FilePath"] = self.filePath!
            }
            if self.host != nil {
                map["Host"] = self.host!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKeyId"] as? String {
                self.accessKeyId = value
            }
            if let value = dict["ExpireTime"] as? Int32 {
                self.expireTime = value
            }
            if let value = dict["FilePath"] as? String {
                self.filePath = value
            }
            if let value = dict["Host"] as? String {
                self.host = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["Signature"] as? String {
                self.signature = value
            }
        }
    }
    public var code: String?

    public var data: GetAudioFileUploadParametersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAudioFileUploadParametersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAudioFileUploadParametersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAudioFileUploadParametersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAudioFileUploadParametersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCallDetailRecordRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetCallDetailRecordResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AgentEvents : Tea.TeaModel {
            public class EventSequence : Tea.TeaModel {
                public var duration: Int64?

                public var event: String?

                public var eventTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.event != nil {
                        map["Event"] = self.event!
                    }
                    if self.eventTime != nil {
                        map["EventTime"] = self.eventTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Duration"] as? Int64 {
                        self.duration = value
                    }
                    if let value = dict["Event"] as? String {
                        self.event = value
                    }
                    if let value = dict["EventTime"] as? Int64 {
                        self.eventTime = value
                    }
                }
            }
            public var agentId: String?

            public var agentName: String?

            public var eventSequence: [GetCallDetailRecordResponseBody.Data.AgentEvents.EventSequence]?

            public var skillGroupId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.eventSequence != nil {
                    var tmp : [Any] = []
                    for k in self.eventSequence! {
                        tmp.append(k.toMap())
                    }
                    map["EventSequence"] = tmp
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentName"] as? String {
                    self.agentName = value
                }
                if let value = dict["EventSequence"] as? [Any?] {
                    var tmp : [GetCallDetailRecordResponseBody.Data.AgentEvents.EventSequence] = []
                    for v in value {
                        if v != nil {
                            var model = GetCallDetailRecordResponseBody.Data.AgentEvents.EventSequence()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.eventSequence = tmp
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
            }
        }
        public class AnalyticsReport : Tea.TeaModel {
            public class Emotion : Tea.TeaModel {
                public var confidence: Int32?

                public var remark: String?

                public var success: Bool?

                public var taskId: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.confidence != nil {
                        map["Confidence"] = self.confidence!
                    }
                    if self.remark != nil {
                        map["Remark"] = self.remark!
                    }
                    if self.success != nil {
                        map["Success"] = self.success!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Confidence"] as? Int32 {
                        self.confidence = value
                    }
                    if let value = dict["Remark"] as? String {
                        self.remark = value
                    }
                    if let value = dict["Success"] as? Bool {
                        self.success = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class ProblemSolving : Tea.TeaModel {
                public var problem: String?

                public var solution: String?

                public var solved: Bool?

                public var success: Bool?

                public var taskId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.problem != nil {
                        map["Problem"] = self.problem!
                    }
                    if self.solution != nil {
                        map["Solution"] = self.solution!
                    }
                    if self.solved != nil {
                        map["Solved"] = self.solved!
                    }
                    if self.success != nil {
                        map["Success"] = self.success!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Problem"] as? String {
                        self.problem = value
                    }
                    if let value = dict["Solution"] as? String {
                        self.solution = value
                    }
                    if let value = dict["Solved"] as? Bool {
                        self.solved = value
                    }
                    if let value = dict["Success"] as? Bool {
                        self.success = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                }
            }
            public class Satisfaction : Tea.TeaModel {
                public var remark: String?

                public var satisfactionDescription: String?

                public var success: Bool?

                public var taskId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.remark != nil {
                        map["Remark"] = self.remark!
                    }
                    if self.satisfactionDescription != nil {
                        map["SatisfactionDescription"] = self.satisfactionDescription!
                    }
                    if self.success != nil {
                        map["Success"] = self.success!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Remark"] as? String {
                        self.remark = value
                    }
                    if let value = dict["SatisfactionDescription"] as? String {
                        self.satisfactionDescription = value
                    }
                    if let value = dict["Success"] as? Bool {
                        self.success = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                }
            }
            public class TodoList : Tea.TeaModel {
                public var success: Bool?

                public var taskId: String?

                public var tasks: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.success != nil {
                        map["Success"] = self.success!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    if self.tasks != nil {
                        map["Tasks"] = self.tasks!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Success"] as? Bool {
                        self.success = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                    if let value = dict["Tasks"] as? [String] {
                        self.tasks = value
                    }
                }
            }
            public var emotion: GetCallDetailRecordResponseBody.Data.AnalyticsReport.Emotion?

            public var problemSolving: GetCallDetailRecordResponseBody.Data.AnalyticsReport.ProblemSolving?

            public var satisfaction: GetCallDetailRecordResponseBody.Data.AnalyticsReport.Satisfaction?

            public var todoList: GetCallDetailRecordResponseBody.Data.AnalyticsReport.TodoList?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.emotion?.validate()
                try self.problemSolving?.validate()
                try self.satisfaction?.validate()
                try self.todoList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.emotion != nil {
                    map["Emotion"] = self.emotion?.toMap()
                }
                if self.problemSolving != nil {
                    map["ProblemSolving"] = self.problemSolving?.toMap()
                }
                if self.satisfaction != nil {
                    map["Satisfaction"] = self.satisfaction?.toMap()
                }
                if self.todoList != nil {
                    map["TodoList"] = self.todoList?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Emotion"] as? [String: Any?] {
                    var model = GetCallDetailRecordResponseBody.Data.AnalyticsReport.Emotion()
                    model.fromMap(value)
                    self.emotion = model
                }
                if let value = dict["ProblemSolving"] as? [String: Any?] {
                    var model = GetCallDetailRecordResponseBody.Data.AnalyticsReport.ProblemSolving()
                    model.fromMap(value)
                    self.problemSolving = model
                }
                if let value = dict["Satisfaction"] as? [String: Any?] {
                    var model = GetCallDetailRecordResponseBody.Data.AnalyticsReport.Satisfaction()
                    model.fromMap(value)
                    self.satisfaction = model
                }
                if let value = dict["TodoList"] as? [String: Any?] {
                    var model = GetCallDetailRecordResponseBody.Data.AnalyticsReport.TodoList()
                    model.fromMap(value)
                    self.todoList = model
                }
            }
        }
        public class CustomerEvents : Tea.TeaModel {
            public class EventSequence : Tea.TeaModel {
                public var event: String?

                public var eventTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.event != nil {
                        map["Event"] = self.event!
                    }
                    if self.eventTime != nil {
                        map["EventTime"] = self.eventTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Event"] as? String {
                        self.event = value
                    }
                    if let value = dict["EventTime"] as? Int64 {
                        self.eventTime = value
                    }
                }
            }
            public var customerId: String?

            public var eventSequence: [GetCallDetailRecordResponseBody.Data.CustomerEvents.EventSequence]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customerId != nil {
                    map["CustomerId"] = self.customerId!
                }
                if self.eventSequence != nil {
                    var tmp : [Any] = []
                    for k in self.eventSequence! {
                        tmp.append(k.toMap())
                    }
                    map["EventSequence"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomerId"] as? String {
                    self.customerId = value
                }
                if let value = dict["EventSequence"] as? [Any?] {
                    var tmp : [GetCallDetailRecordResponseBody.Data.CustomerEvents.EventSequence] = []
                    for v in value {
                        if v != nil {
                            var model = GetCallDetailRecordResponseBody.Data.CustomerEvents.EventSequence()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.eventSequence = tmp
                }
            }
        }
        public class IvrEvents : Tea.TeaModel {
            public class EventSequence : Tea.TeaModel {
                public var event: String?

                public var eventTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.event != nil {
                        map["Event"] = self.event!
                    }
                    if self.eventTime != nil {
                        map["EventTime"] = self.eventTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Event"] as? String {
                        self.event = value
                    }
                    if let value = dict["EventTime"] as? Int64 {
                        self.eventTime = value
                    }
                }
            }
            public var eventSequence: [GetCallDetailRecordResponseBody.Data.IvrEvents.EventSequence]?

            public var flowId: String?

            public var flowType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventSequence != nil {
                    var tmp : [Any] = []
                    for k in self.eventSequence! {
                        tmp.append(k.toMap())
                    }
                    map["EventSequence"] = tmp
                }
                if self.flowId != nil {
                    map["FlowId"] = self.flowId!
                }
                if self.flowType != nil {
                    map["FlowType"] = self.flowType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventSequence"] as? [Any?] {
                    var tmp : [GetCallDetailRecordResponseBody.Data.IvrEvents.EventSequence] = []
                    for v in value {
                        if v != nil {
                            var model = GetCallDetailRecordResponseBody.Data.IvrEvents.EventSequence()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.eventSequence = tmp
                }
                if let value = dict["FlowId"] as? String {
                    self.flowId = value
                }
                if let value = dict["FlowType"] as? String {
                    self.flowType = value
                }
            }
        }
        public class QueueEvents : Tea.TeaModel {
            public class EventSequence : Tea.TeaModel {
                public var event: String?

                public var eventTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.event != nil {
                        map["Event"] = self.event!
                    }
                    if self.eventTime != nil {
                        map["EventTime"] = self.eventTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Event"] as? String {
                        self.event = value
                    }
                    if let value = dict["EventTime"] as? Int64 {
                        self.eventTime = value
                    }
                }
            }
            public var eventSequence: [GetCallDetailRecordResponseBody.Data.QueueEvents.EventSequence]?

            public var flowId: String?

            public var queueId: String?

            public var queueName: String?

            public var queueType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventSequence != nil {
                    var tmp : [Any] = []
                    for k in self.eventSequence! {
                        tmp.append(k.toMap())
                    }
                    map["EventSequence"] = tmp
                }
                if self.flowId != nil {
                    map["FlowId"] = self.flowId!
                }
                if self.queueId != nil {
                    map["QueueId"] = self.queueId!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.queueType != nil {
                    map["QueueType"] = self.queueType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventSequence"] as? [Any?] {
                    var tmp : [GetCallDetailRecordResponseBody.Data.QueueEvents.EventSequence] = []
                    for v in value {
                        if v != nil {
                            var model = GetCallDetailRecordResponseBody.Data.QueueEvents.EventSequence()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.eventSequence = tmp
                }
                if let value = dict["FlowId"] as? String {
                    self.flowId = value
                }
                if let value = dict["QueueId"] as? String {
                    self.queueId = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["QueueType"] as? Int32 {
                    self.queueType = value
                }
            }
        }
        public var agentEvents: [GetCallDetailRecordResponseBody.Data.AgentEvents]?

        public var agentIds: String?

        public var agentNames: String?

        public var analyticsReport: GetCallDetailRecordResponseBody.Data.AnalyticsReport?

        public var analyticsReportReady: Bool?

        public var callDuration: Int64?

        public var calledNumber: String?

        public var calleeLocation: String?

        public var callerLocation: String?

        public var callingNumber: String?

        public var contactDisposition: String?

        public var contactId: String?

        public var contactType: String?

        public var customerEvents: [GetCallDetailRecordResponseBody.Data.CustomerEvents]?

        public var earlyMediaState: String?

        public var establishedTime: Int64?

        public var instanceId: String?

        public var ivrEvents: [GetCallDetailRecordResponseBody.Data.IvrEvents]?

        public var outsideNumberReleaseReason: String?

        public var queueEvents: [GetCallDetailRecordResponseBody.Data.QueueEvents]?

        public var recordingReady: Bool?

        public var releaseInitiator: String?

        public var releaseReason: String?

        public var releaseTime: Int64?

        public var satisfaction: Int32?

        public var satisfactionSurveyChannel: String?

        public var satisfactionSurveyOffered: Bool?

        public var skillGroupIds: String?

        public var skillGroupNames: String?

        public var startTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.analyticsReport?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentEvents != nil {
                var tmp : [Any] = []
                for k in self.agentEvents! {
                    tmp.append(k.toMap())
                }
                map["AgentEvents"] = tmp
            }
            if self.agentIds != nil {
                map["AgentIds"] = self.agentIds!
            }
            if self.agentNames != nil {
                map["AgentNames"] = self.agentNames!
            }
            if self.analyticsReport != nil {
                map["AnalyticsReport"] = self.analyticsReport?.toMap()
            }
            if self.analyticsReportReady != nil {
                map["AnalyticsReportReady"] = self.analyticsReportReady!
            }
            if self.callDuration != nil {
                map["CallDuration"] = self.callDuration!
            }
            if self.calledNumber != nil {
                map["CalledNumber"] = self.calledNumber!
            }
            if self.calleeLocation != nil {
                map["CalleeLocation"] = self.calleeLocation!
            }
            if self.callerLocation != nil {
                map["CallerLocation"] = self.callerLocation!
            }
            if self.callingNumber != nil {
                map["CallingNumber"] = self.callingNumber!
            }
            if self.contactDisposition != nil {
                map["ContactDisposition"] = self.contactDisposition!
            }
            if self.contactId != nil {
                map["ContactId"] = self.contactId!
            }
            if self.contactType != nil {
                map["ContactType"] = self.contactType!
            }
            if self.customerEvents != nil {
                var tmp : [Any] = []
                for k in self.customerEvents! {
                    tmp.append(k.toMap())
                }
                map["CustomerEvents"] = tmp
            }
            if self.earlyMediaState != nil {
                map["EarlyMediaState"] = self.earlyMediaState!
            }
            if self.establishedTime != nil {
                map["EstablishedTime"] = self.establishedTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.ivrEvents != nil {
                var tmp : [Any] = []
                for k in self.ivrEvents! {
                    tmp.append(k.toMap())
                }
                map["IvrEvents"] = tmp
            }
            if self.outsideNumberReleaseReason != nil {
                map["OutsideNumberReleaseReason"] = self.outsideNumberReleaseReason!
            }
            if self.queueEvents != nil {
                var tmp : [Any] = []
                for k in self.queueEvents! {
                    tmp.append(k.toMap())
                }
                map["QueueEvents"] = tmp
            }
            if self.recordingReady != nil {
                map["RecordingReady"] = self.recordingReady!
            }
            if self.releaseInitiator != nil {
                map["ReleaseInitiator"] = self.releaseInitiator!
            }
            if self.releaseReason != nil {
                map["ReleaseReason"] = self.releaseReason!
            }
            if self.releaseTime != nil {
                map["ReleaseTime"] = self.releaseTime!
            }
            if self.satisfaction != nil {
                map["Satisfaction"] = self.satisfaction!
            }
            if self.satisfactionSurveyChannel != nil {
                map["SatisfactionSurveyChannel"] = self.satisfactionSurveyChannel!
            }
            if self.satisfactionSurveyOffered != nil {
                map["SatisfactionSurveyOffered"] = self.satisfactionSurveyOffered!
            }
            if self.skillGroupIds != nil {
                map["SkillGroupIds"] = self.skillGroupIds!
            }
            if self.skillGroupNames != nil {
                map["SkillGroupNames"] = self.skillGroupNames!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentEvents"] as? [Any?] {
                var tmp : [GetCallDetailRecordResponseBody.Data.AgentEvents] = []
                for v in value {
                    if v != nil {
                        var model = GetCallDetailRecordResponseBody.Data.AgentEvents()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.agentEvents = tmp
            }
            if let value = dict["AgentIds"] as? String {
                self.agentIds = value
            }
            if let value = dict["AgentNames"] as? String {
                self.agentNames = value
            }
            if let value = dict["AnalyticsReport"] as? [String: Any?] {
                var model = GetCallDetailRecordResponseBody.Data.AnalyticsReport()
                model.fromMap(value)
                self.analyticsReport = model
            }
            if let value = dict["AnalyticsReportReady"] as? Bool {
                self.analyticsReportReady = value
            }
            if let value = dict["CallDuration"] as? Int64 {
                self.callDuration = value
            }
            if let value = dict["CalledNumber"] as? String {
                self.calledNumber = value
            }
            if let value = dict["CalleeLocation"] as? String {
                self.calleeLocation = value
            }
            if let value = dict["CallerLocation"] as? String {
                self.callerLocation = value
            }
            if let value = dict["CallingNumber"] as? String {
                self.callingNumber = value
            }
            if let value = dict["ContactDisposition"] as? String {
                self.contactDisposition = value
            }
            if let value = dict["ContactId"] as? String {
                self.contactId = value
            }
            if let value = dict["ContactType"] as? String {
                self.contactType = value
            }
            if let value = dict["CustomerEvents"] as? [Any?] {
                var tmp : [GetCallDetailRecordResponseBody.Data.CustomerEvents] = []
                for v in value {
                    if v != nil {
                        var model = GetCallDetailRecordResponseBody.Data.CustomerEvents()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customerEvents = tmp
            }
            if let value = dict["EarlyMediaState"] as? String {
                self.earlyMediaState = value
            }
            if let value = dict["EstablishedTime"] as? Int64 {
                self.establishedTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["IvrEvents"] as? [Any?] {
                var tmp : [GetCallDetailRecordResponseBody.Data.IvrEvents] = []
                for v in value {
                    if v != nil {
                        var model = GetCallDetailRecordResponseBody.Data.IvrEvents()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ivrEvents = tmp
            }
            if let value = dict["OutsideNumberReleaseReason"] as? String {
                self.outsideNumberReleaseReason = value
            }
            if let value = dict["QueueEvents"] as? [Any?] {
                var tmp : [GetCallDetailRecordResponseBody.Data.QueueEvents] = []
                for v in value {
                    if v != nil {
                        var model = GetCallDetailRecordResponseBody.Data.QueueEvents()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.queueEvents = tmp
            }
            if let value = dict["RecordingReady"] as? Bool {
                self.recordingReady = value
            }
            if let value = dict["ReleaseInitiator"] as? String {
                self.releaseInitiator = value
            }
            if let value = dict["ReleaseReason"] as? String {
                self.releaseReason = value
            }
            if let value = dict["ReleaseTime"] as? Int64 {
                self.releaseTime = value
            }
            if let value = dict["Satisfaction"] as? Int32 {
                self.satisfaction = value
            }
            if let value = dict["SatisfactionSurveyChannel"] as? String {
                self.satisfactionSurveyChannel = value
            }
            if let value = dict["SatisfactionSurveyOffered"] as? Bool {
                self.satisfactionSurveyOffered = value
            }
            if let value = dict["SkillGroupIds"] as? String {
                self.skillGroupIds = value
            }
            if let value = dict["SkillGroupNames"] as? String {
                self.skillGroupNames = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
        }
    }
    public var code: String?

    public var data: GetCallDetailRecordResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCallDetailRecordResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetCallDetailRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCallDetailRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCallDetailRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCampaignRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetCampaignResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var actualEndTime: Int64?

        public var actualStartTime: Int64?

        public var campaignId: String?

        public var casesAborted: Int64?

        public var casesConnected: Int64?

        public var casesUncompleted: Int64?

        public var casesUncompletedAfterAttempt: String?

        public var casesUncompletedAfterAttempted: Int64?

        public var completionRate: Double?

        public var contactFlowId: String?

        public var maxAttemptCount: Int64?

        public var minAttemptInterval: Int64?

        public var name: String?

        public var planedEndTime: Int64?

        public var planedStartTime: Int64?

        public var queueId: String?

        public var queueName: String?

        public var simulation: Bool?

        public var simulationParameters: String?

        public var state: String?

        public var strategyParameters: String?

        public var strategyType: String?

        public var totalCases: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actualEndTime != nil {
                map["ActualEndTime"] = self.actualEndTime!
            }
            if self.actualStartTime != nil {
                map["ActualStartTime"] = self.actualStartTime!
            }
            if self.campaignId != nil {
                map["CampaignId"] = self.campaignId!
            }
            if self.casesAborted != nil {
                map["CasesAborted"] = self.casesAborted!
            }
            if self.casesConnected != nil {
                map["CasesConnected"] = self.casesConnected!
            }
            if self.casesUncompleted != nil {
                map["CasesUncompleted"] = self.casesUncompleted!
            }
            if self.casesUncompletedAfterAttempt != nil {
                map["CasesUncompletedAfterAttempt"] = self.casesUncompletedAfterAttempt!
            }
            if self.casesUncompletedAfterAttempted != nil {
                map["CasesUncompletedAfterAttempted"] = self.casesUncompletedAfterAttempted!
            }
            if self.completionRate != nil {
                map["CompletionRate"] = self.completionRate!
            }
            if self.contactFlowId != nil {
                map["ContactFlowId"] = self.contactFlowId!
            }
            if self.maxAttemptCount != nil {
                map["MaxAttemptCount"] = self.maxAttemptCount!
            }
            if self.minAttemptInterval != nil {
                map["MinAttemptInterval"] = self.minAttemptInterval!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.planedEndTime != nil {
                map["PlanedEndTime"] = self.planedEndTime!
            }
            if self.planedStartTime != nil {
                map["PlanedStartTime"] = self.planedStartTime!
            }
            if self.queueId != nil {
                map["QueueId"] = self.queueId!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.simulation != nil {
                map["Simulation"] = self.simulation!
            }
            if self.simulationParameters != nil {
                map["SimulationParameters"] = self.simulationParameters!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            if self.strategyParameters != nil {
                map["StrategyParameters"] = self.strategyParameters!
            }
            if self.strategyType != nil {
                map["StrategyType"] = self.strategyType!
            }
            if self.totalCases != nil {
                map["TotalCases"] = self.totalCases!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActualEndTime"] as? Int64 {
                self.actualEndTime = value
            }
            if let value = dict["ActualStartTime"] as? Int64 {
                self.actualStartTime = value
            }
            if let value = dict["CampaignId"] as? String {
                self.campaignId = value
            }
            if let value = dict["CasesAborted"] as? Int64 {
                self.casesAborted = value
            }
            if let value = dict["CasesConnected"] as? Int64 {
                self.casesConnected = value
            }
            if let value = dict["CasesUncompleted"] as? Int64 {
                self.casesUncompleted = value
            }
            if let value = dict["CasesUncompletedAfterAttempt"] as? String {
                self.casesUncompletedAfterAttempt = value
            }
            if let value = dict["CasesUncompletedAfterAttempted"] as? Int64 {
                self.casesUncompletedAfterAttempted = value
            }
            if let value = dict["CompletionRate"] as? Double {
                self.completionRate = value
            }
            if let value = dict["ContactFlowId"] as? String {
                self.contactFlowId = value
            }
            if let value = dict["MaxAttemptCount"] as? Int64 {
                self.maxAttemptCount = value
            }
            if let value = dict["MinAttemptInterval"] as? Int64 {
                self.minAttemptInterval = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PlanedEndTime"] as? Int64 {
                self.planedEndTime = value
            }
            if let value = dict["PlanedStartTime"] as? Int64 {
                self.planedStartTime = value
            }
            if let value = dict["QueueId"] as? String {
                self.queueId = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["Simulation"] as? Bool {
                self.simulation = value
            }
            if let value = dict["SimulationParameters"] as? String {
                self.simulationParameters = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
            if let value = dict["StrategyParameters"] as? String {
                self.strategyParameters = value
            }
            if let value = dict["StrategyType"] as? String {
                self.strategyType = value
            }
            if let value = dict["TotalCases"] as? Int64 {
                self.totalCases = value
            }
        }
    }
    public var code: String?

    public var data: GetCampaignResponseBody.Data?

    public var httpStatusCode: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCampaignResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCaseFileUploadUrlRequest : Tea.TeaModel {
    public var fileName: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetCaseFileUploadUrlResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var caseFileKey: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.caseFileKey != nil {
                map["CaseFileKey"] = self.caseFileKey!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CaseFileKey"] as? String {
                self.caseFileKey = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: GetCaseFileUploadUrlResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCaseFileUploadUrlResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetCaseFileUploadUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCaseFileUploadUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCaseFileUploadUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetChatMediaUrlRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mediaId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetChatMediaUrlResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetChatMediaUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetChatMediaUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetChatMediaUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetChatRoutingProfileRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetChatRoutingProfileResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var agentConcurrencySettings: String?

        public var chatSettings: String?

        public var distributionSettings: String?

        public var routingType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentConcurrencySettings != nil {
                map["AgentConcurrencySettings"] = self.agentConcurrencySettings!
            }
            if self.chatSettings != nil {
                map["ChatSettings"] = self.chatSettings!
            }
            if self.distributionSettings != nil {
                map["DistributionSettings"] = self.distributionSettings!
            }
            if self.routingType != nil {
                map["RoutingType"] = self.routingType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentConcurrencySettings"] as? String {
                self.agentConcurrencySettings = value
            }
            if let value = dict["ChatSettings"] as? String {
                self.chatSettings = value
            }
            if let value = dict["DistributionSettings"] as? String {
                self.distributionSettings = value
            }
            if let value = dict["RoutingType"] as? String {
                self.routingType = value
            }
        }
    }
    public var code: String?

    public var data: GetChatRoutingProfileResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetChatRoutingProfileResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetChatRoutingProfileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetChatRoutingProfileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetChatRoutingProfileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetContactFlowRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var draftId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.draftId != nil {
            map["DraftId"] = self.draftId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["DraftId"] as? String {
            self.draftId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetContactFlowResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var contactFlowId: String?

        public var createdTime: String?

        public var definition: String?

        public var description_: String?

        public var draftId: String?

        public var editor: String?

        public var instanceId: String?

        public var name: String?

        public var published: Bool?

        public var type: String?

        public var updatedTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactFlowId != nil {
                map["ContactFlowId"] = self.contactFlowId!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.definition != nil {
                map["Definition"] = self.definition!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.draftId != nil {
                map["DraftId"] = self.draftId!
            }
            if self.editor != nil {
                map["Editor"] = self.editor!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.published != nil {
                map["Published"] = self.published!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactFlowId"] as? String {
                self.contactFlowId = value
            }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["Definition"] as? String {
                self.definition = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DraftId"] as? String {
                self.draftId = value
            }
            if let value = dict["Editor"] as? String {
                self.editor = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Published"] as? Bool {
                self.published = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdatedTime"] as? String {
                self.updatedTime = value
            }
        }
    }
    public var code: String?

    public var data: GetContactFlowResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetContactFlowResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetConversationDetailRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetConversationDetailResponseBody : Tea.TeaModel {
    public class Phrases : Tea.TeaModel {
        public var begin: Int32?

        public var end: Int32?

        public var finished: Bool?

        public var identity: String?

        public var role: String?

        public var words: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.begin != nil {
                map["Begin"] = self.begin!
            }
            if self.end != nil {
                map["End"] = self.end!
            }
            if self.finished != nil {
                map["Finished"] = self.finished!
            }
            if self.identity != nil {
                map["Identity"] = self.identity!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            if self.words != nil {
                map["Words"] = self.words!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Begin"] as? Int32 {
                self.begin = value
            }
            if let value = dict["End"] as? Int32 {
                self.end = value
            }
            if let value = dict["Finished"] as? Bool {
                self.finished = value
            }
            if let value = dict["Identity"] as? String {
                self.identity = value
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
            if let value = dict["Words"] as? String {
                self.words = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var phrases: [GetConversationDetailResponseBody.Phrases]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phrases != nil {
            var tmp : [Any] = []
            for k in self.phrases! {
                tmp.append(k.toMap())
            }
            map["Phrases"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Phrases"] as? [Any?] {
            var tmp : [GetConversationDetailResponseBody.Phrases] = []
            for v in value {
                if v != nil {
                    var model = GetConversationDetailResponseBody.Phrases()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.phrases = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetConversationDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetConversationDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetConversationDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataChannelCredentialsRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetDataChannelCredentialsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var clientId: String?

        public var deviceId: String?

        public var endpoint: String?

        public var expiredTime: Int64?

        public var password: String?

        public var topic: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientId != nil {
                map["ClientId"] = self.clientId!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.password != nil {
                map["Password"] = self.password!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientId"] as? String {
                self.clientId = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["ExpiredTime"] as? Int64 {
                self.expiredTime = value
            }
            if let value = dict["Password"] as? String {
                self.password = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public var code: String?

    public var data: GetDataChannelCredentialsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDataChannelCredentialsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDataChannelCredentialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataChannelCredentialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataChannelCredentialsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDoNotCallFileUploadParametersRequest : Tea.TeaModel {
    public var fileName: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetDoNotCallFileUploadParametersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var accessKeyId: String?

        public var expireTime: Int32?

        public var filePath: String?

        public var host: String?

        public var policy: String?

        public var signature: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKeyId != nil {
                map["AccessKeyId"] = self.accessKeyId!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.filePath != nil {
                map["FilePath"] = self.filePath!
            }
            if self.host != nil {
                map["Host"] = self.host!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKeyId"] as? String {
                self.accessKeyId = value
            }
            if let value = dict["ExpireTime"] as? Int32 {
                self.expireTime = value
            }
            if let value = dict["FilePath"] as? String {
                self.filePath = value
            }
            if let value = dict["Host"] as? String {
                self.host = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["Signature"] as? String {
                self.signature = value
            }
        }
    }
    public var code: String?

    public var data: GetDoNotCallFileUploadParametersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDoNotCallFileUploadParametersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDoNotCallFileUploadParametersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDoNotCallFileUploadParametersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDoNotCallFileUploadParametersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDocumentUploadParametersRequest : Tea.TeaModel {
    public var fileName: String?

    public var instanceId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDocumentUploadParametersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var accessKeyId: String?

        public var expireTime: Int32?

        public var filePath: String?

        public var host: String?

        public var policy: String?

        public var signature: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKeyId != nil {
                map["AccessKeyId"] = self.accessKeyId!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.filePath != nil {
                map["FilePath"] = self.filePath!
            }
            if self.host != nil {
                map["Host"] = self.host!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKeyId"] as? String {
                self.accessKeyId = value
            }
            if let value = dict["ExpireTime"] as? Int32 {
                self.expireTime = value
            }
            if let value = dict["FilePath"] as? String {
                self.filePath = value
            }
            if let value = dict["Host"] as? String {
                self.host = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["Signature"] as? String {
                self.signature = value
            }
        }
    }
    public var code: String?

    public var data: GetDocumentUploadParametersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDocumentUploadParametersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDocumentUploadParametersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDocumentUploadParametersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDocumentUploadParametersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEarlyMediaRecordingRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetEarlyMediaRecordingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: GetEarlyMediaRecordingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetEarlyMediaRecordingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEarlyMediaRecordingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEarlyMediaRecordingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEarlyMediaRecordingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHistoricalCallerReportRequest : Tea.TeaModel {
    public var callingNumber: String?

    public var instanceId: String?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callingNumber != nil {
            map["CallingNumber"] = self.callingNumber!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallingNumber"] as? String {
            self.callingNumber = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["StopTime"] as? Int64 {
            self.stopTime = value
        }
    }
}

public class GetHistoricalCallerReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var lastCallingTime: Int64?

        public var totalCalls: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.lastCallingTime != nil {
                map["LastCallingTime"] = self.lastCallingTime!
            }
            if self.totalCalls != nil {
                map["TotalCalls"] = self.totalCalls!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LastCallingTime"] as? Int64 {
                self.lastCallingTime = value
            }
            if let value = dict["TotalCalls"] as? Int64 {
                self.totalCalls = value
            }
        }
    }
    public var code: String?

    public var data: GetHistoricalCallerReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetHistoricalCallerReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetHistoricalCallerReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHistoricalCallerReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHistoricalCallerReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHistoricalCampaignReportRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetHistoricalCampaignReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var abandonRate: Double?

        public var abandonedRate: Double?

        public var answerRate: Double?

        public var callsAbandoned: Int64?

        public var callsConnected: Int64?

        public var callsDialed: Int64?

        public var connectedRate: Double?

        public var occupancyRate: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abandonRate != nil {
                map["AbandonRate"] = self.abandonRate!
            }
            if self.abandonedRate != nil {
                map["AbandonedRate"] = self.abandonedRate!
            }
            if self.answerRate != nil {
                map["AnswerRate"] = self.answerRate!
            }
            if self.callsAbandoned != nil {
                map["CallsAbandoned"] = self.callsAbandoned!
            }
            if self.callsConnected != nil {
                map["CallsConnected"] = self.callsConnected!
            }
            if self.callsDialed != nil {
                map["CallsDialed"] = self.callsDialed!
            }
            if self.connectedRate != nil {
                map["ConnectedRate"] = self.connectedRate!
            }
            if self.occupancyRate != nil {
                map["OccupancyRate"] = self.occupancyRate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbandonRate"] as? Double {
                self.abandonRate = value
            }
            if let value = dict["AbandonedRate"] as? Double {
                self.abandonedRate = value
            }
            if let value = dict["AnswerRate"] as? Double {
                self.answerRate = value
            }
            if let value = dict["CallsAbandoned"] as? Int64 {
                self.callsAbandoned = value
            }
            if let value = dict["CallsConnected"] as? Int64 {
                self.callsConnected = value
            }
            if let value = dict["CallsDialed"] as? Int64 {
                self.callsDialed = value
            }
            if let value = dict["ConnectedRate"] as? Double {
                self.connectedRate = value
            }
            if let value = dict["OccupancyRate"] as? Double {
                self.occupancyRate = value
            }
        }
    }
    public var code: String?

    public var data: GetHistoricalCampaignReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetHistoricalCampaignReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetHistoricalCampaignReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHistoricalCampaignReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHistoricalCampaignReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHistoricalInstanceReportRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var mediaType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class GetHistoricalInstanceReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Inbound : Tea.TeaModel {
            public class AccessChannelTypeDetailList : Tea.TeaModel {
                public var accessChannelType: String?

                public var callsOffered: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accessChannelType != nil {
                        map["AccessChannelType"] = self.accessChannelType!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccessChannelType"] as? String {
                        self.accessChannelType = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                }
            }
            public var abandonRate: Double?

            public var accessChannelTypeDetailList: [GetHistoricalInstanceReportResponseBody.Data.Inbound.AccessChannelTypeDetailList]?

            public var averageAbandonTime: Double?

            public var averageAbandonedInIVRTime: Double?

            public var averageAbandonedInQueueTime: Double?

            public var averageAbandonedInRingTime: Double?

            public var averageFirstResponseTime: Double?

            public var averageHoldTime: Double?

            public var averageResponseTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWaitTime: Double?

            public var averageWorkTime: Double?

            public var callsAbandoned: Int64?

            public var callsAbandonedInIVR: Int64?

            public var callsAbandonedInQueue: Int64?

            public var callsAbandonedInRing: Int64?

            public var callsAbandonedInVoiceNavigator: Int64?

            public var callsAttendedTransferred: Int64?

            public var callsBlindTransferred: Int64?

            public var callsCausedIVRException: Int64?

            public var callsForwardToOutsideNumber: Int64?

            public var callsHandled: Int64?

            public var callsHold: Int64?

            public var callsIVRException: Int64?

            public var callsOffered: Int64?

            public var callsQueued: Int64?

            public var callsQueuingFailed: Int64?

            public var callsQueuingOverflow: Int64?

            public var callsQueuingTimeout: Int64?

            public var callsRinged: Int64?

            public var callsToVoicemail: Int64?

            public var callsVoicemail: Int64?

            public var handleRate: Double?

            public var maxAbandonTime: Int64?

            public var maxAbandonedInIVRTime: Int64?

            public var maxAbandonedInQueueTime: Int64?

            public var maxAbandonedInRingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWaitTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var serviceLevel15: Double?

            public var serviceLevel20: Double?

            public var serviceLevel30: Double?

            public var totalAbandonTime: Int64?

            public var totalAbandonedInIVRTime: Int64?

            public var totalAbandonedInQueueTime: Int64?

            public var totalAbandonedInRingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalMessagesSent: Int64?

            public var totalMessagesSentByAgent: Int64?

            public var totalMessagesSentByCustomer: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWaitTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abandonRate != nil {
                    map["AbandonRate"] = self.abandonRate!
                }
                if self.accessChannelTypeDetailList != nil {
                    var tmp : [Any] = []
                    for k in self.accessChannelTypeDetailList! {
                        tmp.append(k.toMap())
                    }
                    map["AccessChannelTypeDetailList"] = tmp
                }
                if self.averageAbandonTime != nil {
                    map["AverageAbandonTime"] = self.averageAbandonTime!
                }
                if self.averageAbandonedInIVRTime != nil {
                    map["AverageAbandonedInIVRTime"] = self.averageAbandonedInIVRTime!
                }
                if self.averageAbandonedInQueueTime != nil {
                    map["AverageAbandonedInQueueTime"] = self.averageAbandonedInQueueTime!
                }
                if self.averageAbandonedInRingTime != nil {
                    map["AverageAbandonedInRingTime"] = self.averageAbandonedInRingTime!
                }
                if self.averageFirstResponseTime != nil {
                    map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageResponseTime != nil {
                    map["AverageResponseTime"] = self.averageResponseTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWaitTime != nil {
                    map["AverageWaitTime"] = self.averageWaitTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAbandoned != nil {
                    map["CallsAbandoned"] = self.callsAbandoned!
                }
                if self.callsAbandonedInIVR != nil {
                    map["CallsAbandonedInIVR"] = self.callsAbandonedInIVR!
                }
                if self.callsAbandonedInQueue != nil {
                    map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                }
                if self.callsAbandonedInRing != nil {
                    map["CallsAbandonedInRing"] = self.callsAbandonedInRing!
                }
                if self.callsAbandonedInVoiceNavigator != nil {
                    map["CallsAbandonedInVoiceNavigator"] = self.callsAbandonedInVoiceNavigator!
                }
                if self.callsAttendedTransferred != nil {
                    map["CallsAttendedTransferred"] = self.callsAttendedTransferred!
                }
                if self.callsBlindTransferred != nil {
                    map["CallsBlindTransferred"] = self.callsBlindTransferred!
                }
                if self.callsCausedIVRException != nil {
                    map["CallsCausedIVRException"] = self.callsCausedIVRException!
                }
                if self.callsForwardToOutsideNumber != nil {
                    map["CallsForwardToOutsideNumber"] = self.callsForwardToOutsideNumber!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsIVRException != nil {
                    map["CallsIVRException"] = self.callsIVRException!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsQueued != nil {
                    map["CallsQueued"] = self.callsQueued!
                }
                if self.callsQueuingFailed != nil {
                    map["CallsQueuingFailed"] = self.callsQueuingFailed!
                }
                if self.callsQueuingOverflow != nil {
                    map["CallsQueuingOverflow"] = self.callsQueuingOverflow!
                }
                if self.callsQueuingTimeout != nil {
                    map["CallsQueuingTimeout"] = self.callsQueuingTimeout!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.callsToVoicemail != nil {
                    map["CallsToVoicemail"] = self.callsToVoicemail!
                }
                if self.callsVoicemail != nil {
                    map["CallsVoicemail"] = self.callsVoicemail!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxAbandonTime != nil {
                    map["MaxAbandonTime"] = self.maxAbandonTime!
                }
                if self.maxAbandonedInIVRTime != nil {
                    map["MaxAbandonedInIVRTime"] = self.maxAbandonedInIVRTime!
                }
                if self.maxAbandonedInQueueTime != nil {
                    map["MaxAbandonedInQueueTime"] = self.maxAbandonedInQueueTime!
                }
                if self.maxAbandonedInRingTime != nil {
                    map["MaxAbandonedInRingTime"] = self.maxAbandonedInRingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWaitTime != nil {
                    map["MaxWaitTime"] = self.maxWaitTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.serviceLevel15 != nil {
                    map["ServiceLevel15"] = self.serviceLevel15!
                }
                if self.serviceLevel20 != nil {
                    map["ServiceLevel20"] = self.serviceLevel20!
                }
                if self.serviceLevel30 != nil {
                    map["ServiceLevel30"] = self.serviceLevel30!
                }
                if self.totalAbandonTime != nil {
                    map["TotalAbandonTime"] = self.totalAbandonTime!
                }
                if self.totalAbandonedInIVRTime != nil {
                    map["TotalAbandonedInIVRTime"] = self.totalAbandonedInIVRTime!
                }
                if self.totalAbandonedInQueueTime != nil {
                    map["TotalAbandonedInQueueTime"] = self.totalAbandonedInQueueTime!
                }
                if self.totalAbandonedInRingTime != nil {
                    map["TotalAbandonedInRingTime"] = self.totalAbandonedInRingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalMessagesSent != nil {
                    map["TotalMessagesSent"] = self.totalMessagesSent!
                }
                if self.totalMessagesSentByAgent != nil {
                    map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                }
                if self.totalMessagesSentByCustomer != nil {
                    map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWaitTime != nil {
                    map["TotalWaitTime"] = self.totalWaitTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbandonRate"] as? Double {
                    self.abandonRate = value
                }
                if let value = dict["AccessChannelTypeDetailList"] as? [Any?] {
                    var tmp : [GetHistoricalInstanceReportResponseBody.Data.Inbound.AccessChannelTypeDetailList] = []
                    for v in value {
                        if v != nil {
                            var model = GetHistoricalInstanceReportResponseBody.Data.Inbound.AccessChannelTypeDetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.accessChannelTypeDetailList = tmp
                }
                if let value = dict["AverageAbandonTime"] as? Double {
                    self.averageAbandonTime = value
                }
                if let value = dict["AverageAbandonedInIVRTime"] as? Double {
                    self.averageAbandonedInIVRTime = value
                }
                if let value = dict["AverageAbandonedInQueueTime"] as? Double {
                    self.averageAbandonedInQueueTime = value
                }
                if let value = dict["AverageAbandonedInRingTime"] as? Double {
                    self.averageAbandonedInRingTime = value
                }
                if let value = dict["AverageFirstResponseTime"] as? Double {
                    self.averageFirstResponseTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageResponseTime"] as? Double {
                    self.averageResponseTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWaitTime"] as? Double {
                    self.averageWaitTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAbandoned"] as? Int64 {
                    self.callsAbandoned = value
                }
                if let value = dict["CallsAbandonedInIVR"] as? Int64 {
                    self.callsAbandonedInIVR = value
                }
                if let value = dict["CallsAbandonedInQueue"] as? Int64 {
                    self.callsAbandonedInQueue = value
                }
                if let value = dict["CallsAbandonedInRing"] as? Int64 {
                    self.callsAbandonedInRing = value
                }
                if let value = dict["CallsAbandonedInVoiceNavigator"] as? Int64 {
                    self.callsAbandonedInVoiceNavigator = value
                }
                if let value = dict["CallsAttendedTransferred"] as? Int64 {
                    self.callsAttendedTransferred = value
                }
                if let value = dict["CallsBlindTransferred"] as? Int64 {
                    self.callsBlindTransferred = value
                }
                if let value = dict["CallsCausedIVRException"] as? Int64 {
                    self.callsCausedIVRException = value
                }
                if let value = dict["CallsForwardToOutsideNumber"] as? Int64 {
                    self.callsForwardToOutsideNumber = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsIVRException"] as? Int64 {
                    self.callsIVRException = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsQueued"] as? Int64 {
                    self.callsQueued = value
                }
                if let value = dict["CallsQueuingFailed"] as? Int64 {
                    self.callsQueuingFailed = value
                }
                if let value = dict["CallsQueuingOverflow"] as? Int64 {
                    self.callsQueuingOverflow = value
                }
                if let value = dict["CallsQueuingTimeout"] as? Int64 {
                    self.callsQueuingTimeout = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["CallsToVoicemail"] as? Int64 {
                    self.callsToVoicemail = value
                }
                if let value = dict["CallsVoicemail"] as? Int64 {
                    self.callsVoicemail = value
                }
                if let value = dict["HandleRate"] as? Double {
                    self.handleRate = value
                }
                if let value = dict["MaxAbandonTime"] as? Int64 {
                    self.maxAbandonTime = value
                }
                if let value = dict["MaxAbandonedInIVRTime"] as? Int64 {
                    self.maxAbandonedInIVRTime = value
                }
                if let value = dict["MaxAbandonedInQueueTime"] as? Int64 {
                    self.maxAbandonedInQueueTime = value
                }
                if let value = dict["MaxAbandonedInRingTime"] as? Int64 {
                    self.maxAbandonedInRingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWaitTime"] as? Int64 {
                    self.maxWaitTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["ServiceLevel15"] as? Double {
                    self.serviceLevel15 = value
                }
                if let value = dict["ServiceLevel20"] as? Double {
                    self.serviceLevel20 = value
                }
                if let value = dict["ServiceLevel30"] as? Double {
                    self.serviceLevel30 = value
                }
                if let value = dict["TotalAbandonTime"] as? Int64 {
                    self.totalAbandonTime = value
                }
                if let value = dict["TotalAbandonedInIVRTime"] as? Int64 {
                    self.totalAbandonedInIVRTime = value
                }
                if let value = dict["TotalAbandonedInQueueTime"] as? Int64 {
                    self.totalAbandonedInQueueTime = value
                }
                if let value = dict["TotalAbandonedInRingTime"] as? Int64 {
                    self.totalAbandonedInRingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalMessagesSent"] as? Int64 {
                    self.totalMessagesSent = value
                }
                if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                    self.totalMessagesSentByAgent = value
                }
                if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                    self.totalMessagesSentByCustomer = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWaitTime"] as? Int64 {
                    self.totalWaitTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Internal_ : Tea.TeaModel {
            public var callsAnswered: Int64?

            public var callsDialed: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Double?

            public var averageHoldTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAnswered: Int64?

            public var callsAttendedTransferred: Int64?

            public var callsBlindTransferred: Int64?

            public var callsDialed: Int64?

            public var callsHold: Int32?

            public var callsRinged: Int64?

            public var maxDialingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsAttendedTransferred != nil {
                    map["CallsAttendedTransferred"] = self.callsAttendedTransferred!
                }
                if self.callsBlindTransferred != nil {
                    map["CallsBlindTransferred"] = self.callsBlindTransferred!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageDialingTime"] as? Double {
                    self.averageDialingTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsAttendedTransferred"] as? Int64 {
                    self.callsAttendedTransferred = value
                }
                if let value = dict["CallsBlindTransferred"] as? Int64 {
                    self.callsBlindTransferred = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHold"] as? Int32 {
                    self.callsHold = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["MaxDialingTime"] as? Int64 {
                    self.maxDialingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalDialingTime"] as? Int64 {
                    self.totalDialingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public var averageBreakTime: Double?

            public var averageHoldTime: Double?

            public var averageReadyTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var maxBreakTime: Int64?

            public var maxHoldTime: Int64?

            public var maxLoggedInAgents: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalHoldTime: Int64?

            public var totalLoggedInTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageBreakTime != nil {
                    map["AverageBreakTime"] = self.averageBreakTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.maxBreakTime != nil {
                    map["MaxBreakTime"] = self.maxBreakTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxLoggedInAgents != nil {
                    map["MaxLoggedInAgents"] = self.maxLoggedInAgents!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageBreakTime"] as? Double {
                    self.averageBreakTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageReadyTime"] as? Double {
                    self.averageReadyTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["MaxBreakTime"] as? Int64 {
                    self.maxBreakTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxLoggedInAgents"] as? Int64 {
                    self.maxLoggedInAgents = value
                }
                if let value = dict["MaxReadyTime"] as? Int64 {
                    self.maxReadyTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["OccupancyRate"] as? Double {
                    self.occupancyRate = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalBreakTime"] as? Int64 {
                    self.totalBreakTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalLoggedInTime"] as? Int64 {
                    self.totalLoggedInTime = value
                }
                if let value = dict["TotalReadyTime"] as? Int64 {
                    self.totalReadyTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public var inbound: GetHistoricalInstanceReportResponseBody.Data.Inbound?

        public var internal_: GetHistoricalInstanceReportResponseBody.Data.Internal_?

        public var outbound: GetHistoricalInstanceReportResponseBody.Data.Outbound?

        public var overall: GetHistoricalInstanceReportResponseBody.Data.Overall?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.inbound?.validate()
            try self.internal_?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.internal_ != nil {
                map["Internal"] = self.internal_?.toMap()
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Inbound"] as? [String: Any?] {
                var model = GetHistoricalInstanceReportResponseBody.Data.Inbound()
                model.fromMap(value)
                self.inbound = model
            }
            if let value = dict["Internal"] as? [String: Any?] {
                var model = GetHistoricalInstanceReportResponseBody.Data.Internal_()
                model.fromMap(value)
                self.internal_ = model
            }
            if let value = dict["Outbound"] as? [String: Any?] {
                var model = GetHistoricalInstanceReportResponseBody.Data.Outbound()
                model.fromMap(value)
                self.outbound = model
            }
            if let value = dict["Overall"] as? [String: Any?] {
                var model = GetHistoricalInstanceReportResponseBody.Data.Overall()
                model.fromMap(value)
                self.overall = model
            }
        }
    }
    public var code: String?

    public var data: GetHistoricalInstanceReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetHistoricalInstanceReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetHistoricalInstanceReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHistoricalInstanceReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHistoricalInstanceReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstanceRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AdminList : Tea.TeaModel {
            public var displayName: String?

            public var email: String?

            public var extension_: String?

            public var instanceId: String?

            public var loginName: String?

            public var mobile: String?

            public var roleId: String?

            public var roleName: String?

            public var userId: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.roleId != nil {
                    map["RoleId"] = self.roleId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LoginName"] as? String {
                    self.loginName = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["RoleId"] as? String {
                    self.roleId = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public class NumberList : Tea.TeaModel {
            public class SkillGroups : Tea.TeaModel {
                public var description_: String?

                public var displayName: String?

                public var instanceId: String?

                public var name: String?

                public var phoneNumberCount: Int32?

                public var skillGroupId: String?

                public var userCount: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.phoneNumberCount != nil {
                        map["PhoneNumberCount"] = self.phoneNumberCount!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.userCount != nil {
                        map["UserCount"] = self.userCount!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["PhoneNumberCount"] as? Int32 {
                        self.phoneNumberCount = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["UserCount"] as? Int32 {
                        self.userCount = value
                    }
                }
            }
            public var active: Bool?

            public var city: String?

            public var contactFlowId: String?

            public var instanceId: String?

            public var number: String?

            public var province: String?

            public var skillGroups: [GetInstanceResponseBody.Data.NumberList.SkillGroups]?

            public var usage: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.active != nil {
                    map["Active"] = self.active!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                if self.skillGroups != nil {
                    var tmp : [Any] = []
                    for k in self.skillGroups! {
                        tmp.append(k.toMap())
                    }
                    map["SkillGroups"] = tmp
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Active"] as? Bool {
                    self.active = value
                }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["ContactFlowId"] as? String {
                    self.contactFlowId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
                if let value = dict["SkillGroups"] as? [Any?] {
                    var tmp : [GetInstanceResponseBody.Data.NumberList.SkillGroups] = []
                    for v in value {
                        if v != nil {
                            var model = GetInstanceResponseBody.Data.NumberList.SkillGroups()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.skillGroups = tmp
                }
                if let value = dict["Usage"] as? String {
                    self.usage = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var adminList: [GetInstanceResponseBody.Data.AdminList]?

        public var aliyunUid: String?

        public var consoleUrl: String?

        public var description_: String?

        public var domainName: String?

        public var id: String?

        public var name: String?

        public var numberList: [GetInstanceResponseBody.Data.NumberList]?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adminList != nil {
                var tmp : [Any] = []
                for k in self.adminList! {
                    tmp.append(k.toMap())
                }
                map["AdminList"] = tmp
            }
            if self.aliyunUid != nil {
                map["AliyunUid"] = self.aliyunUid!
            }
            if self.consoleUrl != nil {
                map["ConsoleUrl"] = self.consoleUrl!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.numberList != nil {
                var tmp : [Any] = []
                for k in self.numberList! {
                    tmp.append(k.toMap())
                }
                map["NumberList"] = tmp
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdminList"] as? [Any?] {
                var tmp : [GetInstanceResponseBody.Data.AdminList] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceResponseBody.Data.AdminList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.adminList = tmp
            }
            if let value = dict["AliyunUid"] as? String {
                self.aliyunUid = value
            }
            if let value = dict["ConsoleUrl"] as? String {
                self.consoleUrl = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DomainName"] as? String {
                self.domainName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NumberList"] as? [Any?] {
                var tmp : [GetInstanceResponseBody.Data.NumberList] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceResponseBody.Data.NumberList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.numberList = tmp
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: GetInstanceResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstanceTrendingReportRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var mediaType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class GetInstanceTrendingReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Inbound : Tea.TeaModel {
            public var callsAbandonedInIVR: Int64?

            public var callsAbandonedInQueue: Int64?

            public var callsAbandonedInRing: Int64?

            public var callsHandled: Int64?

            public var callsQueued: Int64?

            public var statsTime: Int64?

            public var totalCalls: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callsAbandonedInIVR != nil {
                    map["CallsAbandonedInIVR"] = self.callsAbandonedInIVR!
                }
                if self.callsAbandonedInQueue != nil {
                    map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                }
                if self.callsAbandonedInRing != nil {
                    map["CallsAbandonedInRing"] = self.callsAbandonedInRing!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsQueued != nil {
                    map["CallsQueued"] = self.callsQueued!
                }
                if self.statsTime != nil {
                    map["StatsTime"] = self.statsTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallsAbandonedInIVR"] as? Int64 {
                    self.callsAbandonedInIVR = value
                }
                if let value = dict["CallsAbandonedInQueue"] as? Int64 {
                    self.callsAbandonedInQueue = value
                }
                if let value = dict["CallsAbandonedInRing"] as? Int64 {
                    self.callsAbandonedInRing = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsQueued"] as? Int64 {
                    self.callsQueued = value
                }
                if let value = dict["StatsTime"] as? Int64 {
                    self.statsTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var callsAnswered: Int64?

            public var statsTime: Int64?

            public var totalCalls: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.statsTime != nil {
                    map["StatsTime"] = self.statsTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["StatsTime"] as? Int64 {
                    self.statsTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public var maxLoggedInAgents: Int64?

            public var statsTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.maxLoggedInAgents != nil {
                    map["MaxLoggedInAgents"] = self.maxLoggedInAgents!
                }
                if self.statsTime != nil {
                    map["StatsTime"] = self.statsTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MaxLoggedInAgents"] as? Int64 {
                    self.maxLoggedInAgents = value
                }
                if let value = dict["StatsTime"] as? Int64 {
                    self.statsTime = value
                }
            }
        }
        public var inbound: [GetInstanceTrendingReportResponseBody.Data.Inbound]?

        public var outbound: [GetInstanceTrendingReportResponseBody.Data.Outbound]?

        public var overall: [GetInstanceTrendingReportResponseBody.Data.Overall]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inbound != nil {
                var tmp : [Any] = []
                for k in self.inbound! {
                    tmp.append(k.toMap())
                }
                map["Inbound"] = tmp
            }
            if self.outbound != nil {
                var tmp : [Any] = []
                for k in self.outbound! {
                    tmp.append(k.toMap())
                }
                map["Outbound"] = tmp
            }
            if self.overall != nil {
                var tmp : [Any] = []
                for k in self.overall! {
                    tmp.append(k.toMap())
                }
                map["Overall"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Inbound"] as? [Any?] {
                var tmp : [GetInstanceTrendingReportResponseBody.Data.Inbound] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceTrendingReportResponseBody.Data.Inbound()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.inbound = tmp
            }
            if let value = dict["Outbound"] as? [Any?] {
                var tmp : [GetInstanceTrendingReportResponseBody.Data.Outbound] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceTrendingReportResponseBody.Data.Outbound()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.outbound = tmp
            }
            if let value = dict["Overall"] as? [Any?] {
                var tmp : [GetInstanceTrendingReportResponseBody.Data.Overall] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceTrendingReportResponseBody.Data.Overall()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.overall = tmp
            }
        }
    }
    public var code: String?

    public var data: GetInstanceTrendingReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetInstanceTrendingReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetInstanceTrendingReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceTrendingReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstanceTrendingReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetIvrTrackingSummaryRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetIvrTrackingSummaryResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetIvrTrackingSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetIvrTrackingSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetIvrTrackingSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetLoginDetailsRequest : Tea.TeaModel {
    public var chatDeviceId: String?

    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chatDeviceId != nil {
            map["ChatDeviceId"] = self.chatDeviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChatDeviceId"] as? String {
            self.chatDeviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class GetLoginDetailsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var agentServerUrl: String?

        public var avatarUrl: String?

        public var chatAppId: String?

        public var chatAppKey: String?

        public var chatDeviceId: String?

        public var chatLoginToken: String?

        public var chatServerUrl: String?

        public var chatUserId: String?

        public var deviceExt: String?

        public var deviceId: String?

        public var deviceState: String?

        public var displayName: String?

        public var extension_: String?

        public var nickname: String?

        public var signature: String?

        public var signature2: String?

        public var sipServerUrl: String?

        public var userId: String?

        public var userKey: String?

        public var userKey2: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentServerUrl != nil {
                map["AgentServerUrl"] = self.agentServerUrl!
            }
            if self.avatarUrl != nil {
                map["AvatarUrl"] = self.avatarUrl!
            }
            if self.chatAppId != nil {
                map["ChatAppId"] = self.chatAppId!
            }
            if self.chatAppKey != nil {
                map["ChatAppKey"] = self.chatAppKey!
            }
            if self.chatDeviceId != nil {
                map["ChatDeviceId"] = self.chatDeviceId!
            }
            if self.chatLoginToken != nil {
                map["ChatLoginToken"] = self.chatLoginToken!
            }
            if self.chatServerUrl != nil {
                map["ChatServerUrl"] = self.chatServerUrl!
            }
            if self.chatUserId != nil {
                map["ChatUserId"] = self.chatUserId!
            }
            if self.deviceExt != nil {
                map["DeviceExt"] = self.deviceExt!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.deviceState != nil {
                map["DeviceState"] = self.deviceState!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.nickname != nil {
                map["Nickname"] = self.nickname!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            if self.signature2 != nil {
                map["Signature2"] = self.signature2!
            }
            if self.sipServerUrl != nil {
                map["SipServerUrl"] = self.sipServerUrl!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userKey != nil {
                map["UserKey"] = self.userKey!
            }
            if self.userKey2 != nil {
                map["UserKey2"] = self.userKey2!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentServerUrl"] as? String {
                self.agentServerUrl = value
            }
            if let value = dict["AvatarUrl"] as? String {
                self.avatarUrl = value
            }
            if let value = dict["ChatAppId"] as? String {
                self.chatAppId = value
            }
            if let value = dict["ChatAppKey"] as? String {
                self.chatAppKey = value
            }
            if let value = dict["ChatDeviceId"] as? String {
                self.chatDeviceId = value
            }
            if let value = dict["ChatLoginToken"] as? String {
                self.chatLoginToken = value
            }
            if let value = dict["ChatServerUrl"] as? String {
                self.chatServerUrl = value
            }
            if let value = dict["ChatUserId"] as? String {
                self.chatUserId = value
            }
            if let value = dict["DeviceExt"] as? String {
                self.deviceExt = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["DeviceState"] as? String {
                self.deviceState = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Nickname"] as? String {
                self.nickname = value
            }
            if let value = dict["Signature"] as? String {
                self.signature = value
            }
            if let value = dict["Signature2"] as? String {
                self.signature2 = value
            }
            if let value = dict["SipServerUrl"] as? String {
                self.sipServerUrl = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserKey"] as? String {
                self.userKey = value
            }
            if let value = dict["UserKey2"] as? String {
                self.userKey2 = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: GetLoginDetailsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetLoginDetailsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetLoginDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetLoginDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetLoginDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMonoRecordingRequest : Tea.TeaModel {
    public var contactId: String?

    public var expireSeconds: Int64?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.expireSeconds != nil {
            map["ExpireSeconds"] = self.expireSeconds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["ExpireSeconds"] as? Int64 {
            self.expireSeconds = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetMonoRecordingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var duration: Int64?

        public var fileName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: GetMonoRecordingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetMonoRecordingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMonoRecordingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMonoRecordingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMonoRecordingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultiChannelRecordingRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetMultiChannelRecordingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: GetMultiChannelRecordingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetMultiChannelRecordingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMultiChannelRecordingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultiChannelRecordingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultiChannelRecordingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNumberLocationRequest : Tea.TeaModel {
    public var instanceId: String?

    public var number: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
    }
}

public class GetNumberLocationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var city: String?

        public var number: String?

        public var province: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.city != nil {
                map["City"] = self.city!
            }
            if self.number != nil {
                map["Number"] = self.number!
            }
            if self.province != nil {
                map["Province"] = self.province!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["City"] as? String {
                self.city = value
            }
            if let value = dict["Number"] as? String {
                self.number = value
            }
            if let value = dict["Province"] as? String {
                self.province = value
            }
        }
    }
    public var code: String?

    public var data: GetNumberLocationResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetNumberLocationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetNumberLocationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNumberLocationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNumberLocationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRealtimeCampaignStatsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var queueId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.queueId != nil {
            map["QueueId"] = self.queueId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["QueueId"] as? String {
            self.queueId = value
        }
    }
}

public class GetRealtimeCampaignStatsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakingAgents: Int64?

        public var caps: Int64?

        public var loggedInAgents: Int64?

        public var outboundScenarioBreakingAgents: Int64?

        public var outboundScenarioReadyAgents: Int64?

        public var outboundScenarioTalkingAgents: Int64?

        public var outboundScenarioWorkingAgents: Int64?

        public var readyAgents: Int64?

        public var talkingAgents: Int64?

        public var totalAgents: Int64?

        public var workingAgents: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakingAgents != nil {
                map["BreakingAgents"] = self.breakingAgents!
            }
            if self.caps != nil {
                map["Caps"] = self.caps!
            }
            if self.loggedInAgents != nil {
                map["LoggedInAgents"] = self.loggedInAgents!
            }
            if self.outboundScenarioBreakingAgents != nil {
                map["OutboundScenarioBreakingAgents"] = self.outboundScenarioBreakingAgents!
            }
            if self.outboundScenarioReadyAgents != nil {
                map["OutboundScenarioReadyAgents"] = self.outboundScenarioReadyAgents!
            }
            if self.outboundScenarioTalkingAgents != nil {
                map["OutboundScenarioTalkingAgents"] = self.outboundScenarioTalkingAgents!
            }
            if self.outboundScenarioWorkingAgents != nil {
                map["OutboundScenarioWorkingAgents"] = self.outboundScenarioWorkingAgents!
            }
            if self.readyAgents != nil {
                map["ReadyAgents"] = self.readyAgents!
            }
            if self.talkingAgents != nil {
                map["TalkingAgents"] = self.talkingAgents!
            }
            if self.totalAgents != nil {
                map["TotalAgents"] = self.totalAgents!
            }
            if self.workingAgents != nil {
                map["WorkingAgents"] = self.workingAgents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakingAgents"] as? Int64 {
                self.breakingAgents = value
            }
            if let value = dict["Caps"] as? Int64 {
                self.caps = value
            }
            if let value = dict["LoggedInAgents"] as? Int64 {
                self.loggedInAgents = value
            }
            if let value = dict["OutboundScenarioBreakingAgents"] as? Int64 {
                self.outboundScenarioBreakingAgents = value
            }
            if let value = dict["OutboundScenarioReadyAgents"] as? Int64 {
                self.outboundScenarioReadyAgents = value
            }
            if let value = dict["OutboundScenarioTalkingAgents"] as? Int64 {
                self.outboundScenarioTalkingAgents = value
            }
            if let value = dict["OutboundScenarioWorkingAgents"] as? Int64 {
                self.outboundScenarioWorkingAgents = value
            }
            if let value = dict["ReadyAgents"] as? Int64 {
                self.readyAgents = value
            }
            if let value = dict["TalkingAgents"] as? Int64 {
                self.talkingAgents = value
            }
            if let value = dict["TotalAgents"] as? Int64 {
                self.totalAgents = value
            }
            if let value = dict["WorkingAgents"] as? Int64 {
                self.workingAgents = value
            }
        }
    }
    public var code: String?

    public var data: GetRealtimeCampaignStatsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRealtimeCampaignStatsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRealtimeCampaignStatsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRealtimeCampaignStatsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRealtimeCampaignStatsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRealtimeInstanceStatesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mediaType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
    }
}

public class GetRealtimeInstanceStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class BreakCodeDetailList : Tea.TeaModel {
            public var breakCode: String?

            public var count: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.count != nil {
                    map["Count"] = self.count!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["Count"] as? Int64 {
                    self.count = value
                }
            }
        }
        public var breakCodeDetailList: [GetRealtimeInstanceStatesResponseBody.Data.BreakCodeDetailList]?

        public var breakingAgents: Int64?

        public var instanceId: String?

        public var interactiveCalls: Int64?

        public var loggedInAgents: Int64?

        public var longestWaitingTime: Int64?

        public var readyAgents: Int64?

        public var talkingAgents: Int64?

        public var totalAgents: Int64?

        public var waitingCalls: Int64?

        public var workingAgents: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCodeDetailList != nil {
                var tmp : [Any] = []
                for k in self.breakCodeDetailList! {
                    tmp.append(k.toMap())
                }
                map["BreakCodeDetailList"] = tmp
            }
            if self.breakingAgents != nil {
                map["BreakingAgents"] = self.breakingAgents!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.interactiveCalls != nil {
                map["InteractiveCalls"] = self.interactiveCalls!
            }
            if self.loggedInAgents != nil {
                map["LoggedInAgents"] = self.loggedInAgents!
            }
            if self.longestWaitingTime != nil {
                map["LongestWaitingTime"] = self.longestWaitingTime!
            }
            if self.readyAgents != nil {
                map["ReadyAgents"] = self.readyAgents!
            }
            if self.talkingAgents != nil {
                map["TalkingAgents"] = self.talkingAgents!
            }
            if self.totalAgents != nil {
                map["TotalAgents"] = self.totalAgents!
            }
            if self.waitingCalls != nil {
                map["WaitingCalls"] = self.waitingCalls!
            }
            if self.workingAgents != nil {
                map["WorkingAgents"] = self.workingAgents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCodeDetailList"] as? [Any?] {
                var tmp : [GetRealtimeInstanceStatesResponseBody.Data.BreakCodeDetailList] = []
                for v in value {
                    if v != nil {
                        var model = GetRealtimeInstanceStatesResponseBody.Data.BreakCodeDetailList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.breakCodeDetailList = tmp
            }
            if let value = dict["BreakingAgents"] as? Int64 {
                self.breakingAgents = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InteractiveCalls"] as? Int64 {
                self.interactiveCalls = value
            }
            if let value = dict["LoggedInAgents"] as? Int64 {
                self.loggedInAgents = value
            }
            if let value = dict["LongestWaitingTime"] as? Int64 {
                self.longestWaitingTime = value
            }
            if let value = dict["ReadyAgents"] as? Int64 {
                self.readyAgents = value
            }
            if let value = dict["TalkingAgents"] as? Int64 {
                self.talkingAgents = value
            }
            if let value = dict["TotalAgents"] as? Int64 {
                self.totalAgents = value
            }
            if let value = dict["WaitingCalls"] as? Int64 {
                self.waitingCalls = value
            }
            if let value = dict["WorkingAgents"] as? Int64 {
                self.workingAgents = value
            }
        }
    }
    public var code: String?

    public var data: GetRealtimeInstanceStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRealtimeInstanceStatesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRealtimeInstanceStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRealtimeInstanceStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRealtimeInstanceStatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSchemaRequest : Tea.TeaModel {
    public var instanceId: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class GetSchemaResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createdTime: String?

        public var deleted: Bool?

        public var description_: String?

        public var id: String?

        public var instanceId: String?

        public var properties: [String: DataPropertiesValue]?

        public var updatedTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.deleted != nil {
                map["Deleted"] = self.deleted!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.properties != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.properties! {
                    tmp[k] = v.toMap()
                }
                map["Properties"] = tmp
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["Deleted"] as? Bool {
                self.deleted = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Properties"] as? [String: Any?] {
                var tmp : [String: DataPropertiesValue] = [:]
                for (k, v) in value {
                    if v != nil {
                        var model = DataPropertiesValue()
                        model.fromMap(v as? [String: Any?])
                        tmp[k] = model
                    }
                }
                self.properties = tmp
            }
            if let value = dict["UpdatedTime"] as? String {
                self.updatedTime = value
            }
        }
    }
    public var code: String?

    public var data: GetSchemaResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSchemaResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSchemaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSchemaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSchemaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class GetSkillGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var description_: String?

        public var displayName: String?

        public var instanceId: String?

        public var mediaType: String?

        public var name: String?

        public var skillGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.mediaType != nil {
                map["MediaType"] = self.mediaType!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["MediaType"] as? String {
                self.mediaType = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["SkillGroupId"] as? String {
                self.skillGroupId = value
            }
        }
    }
    public var code: String?

    public var data: GetSkillGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSkillGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSummaryTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class GetSummaryTemplateResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PropertyList : Tea.TeaModel {
            public var array: Bool?

            public var attributes: String?

            public var createdTime: Int64?

            public var creator: String?

            public var dataType: String?

            public var description_: String?

            public var disabled: Bool?

            public var displayName: String?

            public var displayOrder: Int32?

            public var editorType: String?

            public var maxLength: Int32?

            public var maximum: Double?

            public var minLength: Int32?

            public var minimum: Double?

            public var name: String?

            public var pattern: String?

            public var patternErrorMessage: String?

            public var readOnly: Bool?

            public var required_: Bool?

            public var system: Bool?

            public var updatedTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.array != nil {
                    map["Array"] = self.array!
                }
                if self.attributes != nil {
                    map["Attributes"] = self.attributes!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.dataType != nil {
                    map["DataType"] = self.dataType!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.disabled != nil {
                    map["Disabled"] = self.disabled!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.displayOrder != nil {
                    map["DisplayOrder"] = self.displayOrder!
                }
                if self.editorType != nil {
                    map["EditorType"] = self.editorType!
                }
                if self.maxLength != nil {
                    map["MaxLength"] = self.maxLength!
                }
                if self.maximum != nil {
                    map["Maximum"] = self.maximum!
                }
                if self.minLength != nil {
                    map["MinLength"] = self.minLength!
                }
                if self.minimum != nil {
                    map["Minimum"] = self.minimum!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pattern != nil {
                    map["Pattern"] = self.pattern!
                }
                if self.patternErrorMessage != nil {
                    map["PatternErrorMessage"] = self.patternErrorMessage!
                }
                if self.readOnly != nil {
                    map["ReadOnly"] = self.readOnly!
                }
                if self.required_ != nil {
                    map["Required"] = self.required_!
                }
                if self.system != nil {
                    map["System"] = self.system!
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Array"] as? Bool {
                    self.array = value
                }
                if let value = dict["Attributes"] as? String {
                    self.attributes = value
                }
                if let value = dict["CreatedTime"] as? Int64 {
                    self.createdTime = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["DataType"] as? String {
                    self.dataType = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Disabled"] as? Bool {
                    self.disabled = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["DisplayOrder"] as? Int32 {
                    self.displayOrder = value
                }
                if let value = dict["EditorType"] as? String {
                    self.editorType = value
                }
                if let value = dict["MaxLength"] as? Int32 {
                    self.maxLength = value
                }
                if let value = dict["Maximum"] as? Double {
                    self.maximum = value
                }
                if let value = dict["MinLength"] as? Int32 {
                    self.minLength = value
                }
                if let value = dict["Minimum"] as? Double {
                    self.minimum = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Pattern"] as? String {
                    self.pattern = value
                }
                if let value = dict["PatternErrorMessage"] as? String {
                    self.patternErrorMessage = value
                }
                if let value = dict["ReadOnly"] as? Bool {
                    self.readOnly = value
                }
                if let value = dict["Required"] as? Bool {
                    self.required_ = value
                }
                if let value = dict["System"] as? Bool {
                    self.system = value
                }
                if let value = dict["UpdatedTime"] as? Int64 {
                    self.updatedTime = value
                }
            }
        }
        public var categoryId: String?

        public var editor: String?

        public var instanceId: String?

        public var name: String?

        public var propertyList: [GetSummaryTemplateResponseBody.Data.PropertyList]?

        public var state: String?

        public var templateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.categoryId != nil {
                map["CategoryId"] = self.categoryId!
            }
            if self.editor != nil {
                map["Editor"] = self.editor!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.propertyList != nil {
                var tmp : [Any] = []
                for k in self.propertyList! {
                    tmp.append(k.toMap())
                }
                map["PropertyList"] = tmp
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CategoryId"] as? String {
                self.categoryId = value
            }
            if let value = dict["Editor"] as? String {
                self.editor = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PropertyList"] as? [Any?] {
                var tmp : [GetSummaryTemplateResponseBody.Data.PropertyList] = []
                for v in value {
                    if v != nil {
                        var model = GetSummaryTemplateResponseBody.Data.PropertyList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.propertyList = tmp
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
        }
    }
    public var code: String?

    public var data: GetSummaryTemplateResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSummaryTemplateResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSummaryTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSummaryTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSummaryTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTicketRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class GetTicketResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var assignee: String?

        public var assigneeName: String?

        public var categoryId: String?

        public var categoryName: String?

        public var closeCode: String?

        public var comment: String?

        public var context: String?

        public var createdTime: Int64?

        public var creator: String?

        public var creatorName: String?

        public var currentTaskId: String?

        public var currentTaskName: String?

        public var currentTaskStartTime: Int64?

        public var customerId: String?

        public var endTime: Int64?

        public var instanceId: String?

        public var jobId: String?

        public var source: String?

        public var startTime: Int64?

        public var state: String?

        public var templateId: String?

        public var templateVersion: String?

        public var ticketId: String?

        public var title: String?

        public var updatedTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assignee != nil {
                map["Assignee"] = self.assignee!
            }
            if self.assigneeName != nil {
                map["AssigneeName"] = self.assigneeName!
            }
            if self.categoryId != nil {
                map["CategoryId"] = self.categoryId!
            }
            if self.categoryName != nil {
                map["CategoryName"] = self.categoryName!
            }
            if self.closeCode != nil {
                map["CloseCode"] = self.closeCode!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.context != nil {
                map["Context"] = self.context!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.creatorName != nil {
                map["CreatorName"] = self.creatorName!
            }
            if self.currentTaskId != nil {
                map["CurrentTaskId"] = self.currentTaskId!
            }
            if self.currentTaskName != nil {
                map["CurrentTaskName"] = self.currentTaskName!
            }
            if self.currentTaskStartTime != nil {
                map["CurrentTaskStartTime"] = self.currentTaskStartTime!
            }
            if self.customerId != nil {
                map["CustomerId"] = self.customerId!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateVersion != nil {
                map["TemplateVersion"] = self.templateVersion!
            }
            if self.ticketId != nil {
                map["TicketId"] = self.ticketId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Assignee"] as? String {
                self.assignee = value
            }
            if let value = dict["AssigneeName"] as? String {
                self.assigneeName = value
            }
            if let value = dict["CategoryId"] as? String {
                self.categoryId = value
            }
            if let value = dict["CategoryName"] as? String {
                self.categoryName = value
            }
            if let value = dict["CloseCode"] as? String {
                self.closeCode = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["Context"] as? String {
                self.context = value
            }
            if let value = dict["CreatedTime"] as? Int64 {
                self.createdTime = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["CreatorName"] as? String {
                self.creatorName = value
            }
            if let value = dict["CurrentTaskId"] as? String {
                self.currentTaskId = value
            }
            if let value = dict["CurrentTaskName"] as? String {
                self.currentTaskName = value
            }
            if let value = dict["CurrentTaskStartTime"] as? Int64 {
                self.currentTaskStartTime = value
            }
            if let value = dict["CustomerId"] as? String {
                self.customerId = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TemplateVersion"] as? String {
                self.templateVersion = value
            }
            if let value = dict["TicketId"] as? String {
                self.ticketId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdatedTime"] as? Int64 {
                self.updatedTime = value
            }
        }
    }
    public var code: String?

    public var data: GetTicketResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTicketResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTicketSummaryReportRequest : Tea.TeaModel {
    public var assignee: String?

    public var assigneeType: String?

    public var categoryId: String?

    public var creator: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var participant: String?

    public var startTime: Int64?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assignee != nil {
            map["Assignee"] = self.assignee!
        }
        if self.assigneeType != nil {
            map["AssigneeType"] = self.assigneeType!
        }
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.creator != nil {
            map["Creator"] = self.creator!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.participant != nil {
            map["Participant"] = self.participant!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Assignee"] as? String {
            self.assignee = value
        }
        if let value = dict["AssigneeType"] as? String {
            self.assigneeType = value
        }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["Creator"] as? String {
            self.creator = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Participant"] as? String {
            self.participant = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class GetTicketSummaryReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var ticketsAssigned: String?

        public var ticketsCreated: String?

        public var ticketsParticipated: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ticketsAssigned != nil {
                map["TicketsAssigned"] = self.ticketsAssigned!
            }
            if self.ticketsCreated != nil {
                map["TicketsCreated"] = self.ticketsCreated!
            }
            if self.ticketsParticipated != nil {
                map["TicketsParticipated"] = self.ticketsParticipated!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TicketsAssigned"] as? String {
                self.ticketsAssigned = value
            }
            if let value = dict["TicketsCreated"] as? String {
                self.ticketsCreated = value
            }
            if let value = dict["TicketsParticipated"] as? String {
                self.ticketsParticipated = value
            }
        }
    }
    public var code: String?

    public var data: GetTicketSummaryReportResponseBody.Data?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTicketSummaryReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTicketSummaryReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTicketSummaryReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTicketSummaryReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTicketTemplateRequest : Tea.TeaModel {
    public var instanceId: String?

    public var templateId: String?

    public var templateVersion: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateVersion != nil {
            map["TemplateVersion"] = self.templateVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TemplateVersion"] as? String {
            self.templateVersion = value
        }
    }
}

public class GetTicketTemplateResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class TicketFields : Tea.TeaModel {
            public var array: Bool?

            public var attributes: String?

            public var createdTime: Int64?

            public var creator: String?

            public var dataType: String?

            public var description_: String?

            public var disabled: Bool?

            public var displayName: String?

            public var displayOrder: Int32?

            public var editorType: String?

            public var maxLength: Int32?

            public var maximum: Double?

            public var minLength: Int32?

            public var minimum: Double?

            public var name: String?

            public var pattern: String?

            public var patternErrorMessage: String?

            public var readOnly: Bool?

            public var required_: Bool?

            public var system: Bool?

            public var updatedTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.array != nil {
                    map["Array"] = self.array!
                }
                if self.attributes != nil {
                    map["Attributes"] = self.attributes!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.dataType != nil {
                    map["DataType"] = self.dataType!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.disabled != nil {
                    map["Disabled"] = self.disabled!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.displayOrder != nil {
                    map["DisplayOrder"] = self.displayOrder!
                }
                if self.editorType != nil {
                    map["EditorType"] = self.editorType!
                }
                if self.maxLength != nil {
                    map["MaxLength"] = self.maxLength!
                }
                if self.maximum != nil {
                    map["Maximum"] = self.maximum!
                }
                if self.minLength != nil {
                    map["MinLength"] = self.minLength!
                }
                if self.minimum != nil {
                    map["Minimum"] = self.minimum!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pattern != nil {
                    map["Pattern"] = self.pattern!
                }
                if self.patternErrorMessage != nil {
                    map["PatternErrorMessage"] = self.patternErrorMessage!
                }
                if self.readOnly != nil {
                    map["ReadOnly"] = self.readOnly!
                }
                if self.required_ != nil {
                    map["Required"] = self.required_!
                }
                if self.system != nil {
                    map["System"] = self.system!
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Array"] as? Bool {
                    self.array = value
                }
                if let value = dict["Attributes"] as? String {
                    self.attributes = value
                }
                if let value = dict["CreatedTime"] as? Int64 {
                    self.createdTime = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["DataType"] as? String {
                    self.dataType = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Disabled"] as? Bool {
                    self.disabled = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["DisplayOrder"] as? Int32 {
                    self.displayOrder = value
                }
                if let value = dict["EditorType"] as? String {
                    self.editorType = value
                }
                if let value = dict["MaxLength"] as? Int32 {
                    self.maxLength = value
                }
                if let value = dict["Maximum"] as? Double {
                    self.maximum = value
                }
                if let value = dict["MinLength"] as? Int32 {
                    self.minLength = value
                }
                if let value = dict["Minimum"] as? Double {
                    self.minimum = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Pattern"] as? String {
                    self.pattern = value
                }
                if let value = dict["PatternErrorMessage"] as? String {
                    self.patternErrorMessage = value
                }
                if let value = dict["ReadOnly"] as? Bool {
                    self.readOnly = value
                }
                if let value = dict["Required"] as? Bool {
                    self.required_ = value
                }
                if let value = dict["System"] as? Bool {
                    self.system = value
                }
                if let value = dict["UpdatedTime"] as? Int64 {
                    self.updatedTime = value
                }
            }
        }
        public var categoryId: String?

        public var editor: String?

        public var instanceId: String?

        public var name: String?

        public var processDefinition: String?

        public var state: String?

        public var templateId: String?

        public var ticketFields: [GetTicketTemplateResponseBody.Data.TicketFields]?

        public var updatedTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.categoryId != nil {
                map["CategoryId"] = self.categoryId!
            }
            if self.editor != nil {
                map["Editor"] = self.editor!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.processDefinition != nil {
                map["ProcessDefinition"] = self.processDefinition!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.ticketFields != nil {
                var tmp : [Any] = []
                for k in self.ticketFields! {
                    tmp.append(k.toMap())
                }
                map["TicketFields"] = tmp
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CategoryId"] as? String {
                self.categoryId = value
            }
            if let value = dict["Editor"] as? String {
                self.editor = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProcessDefinition"] as? String {
                self.processDefinition = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TicketFields"] as? [Any?] {
                var tmp : [GetTicketTemplateResponseBody.Data.TicketFields] = []
                for v in value {
                    if v != nil {
                        var model = GetTicketTemplateResponseBody.Data.TicketFields()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ticketFields = tmp
            }
            if let value = dict["UpdatedTime"] as? Int64 {
                self.updatedTime = value
            }
        }
    }
    public var code: String?

    public var data: GetTicketTemplateResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTicketTemplateResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTicketTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTicketTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTicketTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTurnCredentialsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class GetTurnCredentialsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var password: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.password != nil {
                map["Password"] = self.password!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Password"] as? String {
                self.password = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public var code: String?

    public var data: GetTurnCredentialsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTurnCredentialsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTurnCredentialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTurnCredentialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTurnCredentialsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTurnServerListRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetTurnServerListResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTurnServerListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTurnServerListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTurnServerListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUploadAudioDataParamsRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetUploadAudioDataParamsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var paramsStr: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.paramsStr != nil {
                map["ParamsStr"] = self.paramsStr!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ParamsStr"] as? String {
                self.paramsStr = value
            }
        }
    }
    public var code: String?

    public var data: GetUploadAudioDataParamsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetUploadAudioDataParamsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetUploadAudioDataParamsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUploadAudioDataParamsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUploadAudioDataParamsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserRequest : Tea.TeaModel {
    public var extension_: String?

    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extension_ != nil {
            map["Extension"] = self.extension_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Extension"] as? String {
            self.extension_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class GetUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var avatarUrl: String?

        public var deviceExt: String?

        public var deviceId: String?

        public var deviceState: String?

        public var displayId: String?

        public var displayName: String?

        public var email: String?

        public var extension_: String?

        public var instanceId: String?

        public var loginName: String?

        public var mobile: String?

        public var nickname: String?

        public var roleId: String?

        public var roleName: String?

        public var userId: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.avatarUrl != nil {
                map["AvatarUrl"] = self.avatarUrl!
            }
            if self.deviceExt != nil {
                map["DeviceExt"] = self.deviceExt!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.deviceState != nil {
                map["DeviceState"] = self.deviceState!
            }
            if self.displayId != nil {
                map["DisplayId"] = self.displayId!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.loginName != nil {
                map["LoginName"] = self.loginName!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.nickname != nil {
                map["Nickname"] = self.nickname!
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            if self.roleName != nil {
                map["RoleName"] = self.roleName!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AvatarUrl"] as? String {
                self.avatarUrl = value
            }
            if let value = dict["DeviceExt"] as? String {
                self.deviceExt = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["DeviceState"] as? String {
                self.deviceState = value
            }
            if let value = dict["DisplayId"] as? String {
                self.displayId = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["LoginName"] as? String {
                self.loginName = value
            }
            if let value = dict["Mobile"] as? String {
                self.mobile = value
            }
            if let value = dict["Nickname"] as? String {
                self.nickname = value
            }
            if let value = dict["RoleId"] as? String {
                self.roleId = value
            }
            if let value = dict["RoleName"] as? String {
                self.roleName = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: GetUserResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVideoRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetVideoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: GetVideoResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetVideoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVisitorLoginDetailsRequest : Tea.TeaModel {
    public var chatDeviceId: String?

    public var instanceId: String?

    public var token: String?

    public var visitorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chatDeviceId != nil {
            map["ChatDeviceId"] = self.chatDeviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.visitorId != nil {
            map["VisitorId"] = self.visitorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChatDeviceId"] as? String {
            self.chatDeviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["VisitorId"] as? String {
            self.visitorId = value
        }
    }
}

public class GetVisitorLoginDetailsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var chatAppId: String?

        public var chatAppKey: String?

        public var chatDeviceId: String?

        public var chatLoginToken: String?

        public var chatServerUrl: String?

        public var chatUserId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chatAppId != nil {
                map["ChatAppId"] = self.chatAppId!
            }
            if self.chatAppKey != nil {
                map["ChatAppKey"] = self.chatAppKey!
            }
            if self.chatDeviceId != nil {
                map["ChatDeviceId"] = self.chatDeviceId!
            }
            if self.chatLoginToken != nil {
                map["ChatLoginToken"] = self.chatLoginToken!
            }
            if self.chatServerUrl != nil {
                map["ChatServerUrl"] = self.chatServerUrl!
            }
            if self.chatUserId != nil {
                map["ChatUserId"] = self.chatUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChatAppId"] as? String {
                self.chatAppId = value
            }
            if let value = dict["ChatAppKey"] as? String {
                self.chatAppKey = value
            }
            if let value = dict["ChatDeviceId"] as? String {
                self.chatDeviceId = value
            }
            if let value = dict["ChatLoginToken"] as? String {
                self.chatLoginToken = value
            }
            if let value = dict["ChatServerUrl"] as? String {
                self.chatServerUrl = value
            }
            if let value = dict["ChatUserId"] as? String {
                self.chatUserId = value
            }
        }
    }
    public var code: String?

    public var data: GetVisitorLoginDetailsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetVisitorLoginDetailsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetVisitorLoginDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVisitorLoginDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVisitorLoginDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVoicemailRecordingRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class GetVoicemailRecordingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: GetVoicemailRecordingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetVoicemailRecordingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetVoicemailRecordingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVoicemailRecordingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVoicemailRecordingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class HoldCallRequest : Tea.TeaModel {
    public var channelId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var music: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.music != nil {
            map["Music"] = self.music!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? String {
            self.channelId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["Music"] as? String {
            self.music = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class HoldCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [HoldCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [HoldCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = HoldCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: HoldCallResponseBody.Data.CallContext?

        public var userContext: HoldCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = HoldCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = HoldCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: HoldCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = HoldCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class HoldCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HoldCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = HoldCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportAdminsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ramIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ramIdList != nil {
            map["RamIdList"] = self.ramIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RamIdList"] as? String {
            self.ramIdList = value
        }
    }
}

public class ImportAdminsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var extension_: String?

        public var instanceId: String?

        public var ramId: String?

        public var roleId: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.ramId != nil {
                map["RamId"] = self.ramId!
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["RamId"] as? String {
                self.ramId = value
            }
            if let value = dict["RoleId"] as? String {
                self.roleId = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var code: String?

    public var data: [ImportAdminsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ImportAdminsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ImportAdminsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportAdminsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportAdminsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportAdminsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportContactFlowRequest : Tea.TeaModel {
    public var flowPackageData: String?

    public var instanceId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flowPackageData != nil {
            map["FlowPackageData"] = self.flowPackageData!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlowPackageData"] as? String {
            self.flowPackageData = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportCorpNumbersRequest : Tea.TeaModel {
    public var city: String?

    public var corpName: String?

    public var numberList: String?

    public var provider: String?

    public var province: String?

    public var tagList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.city != nil {
            map["City"] = self.city!
        }
        if self.corpName != nil {
            map["CorpName"] = self.corpName!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.provider != nil {
            map["Provider"] = self.provider!
        }
        if self.province != nil {
            map["Province"] = self.province!
        }
        if self.tagList != nil {
            map["TagList"] = self.tagList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["City"] as? String {
            self.city = value
        }
        if let value = dict["CorpName"] as? String {
            self.corpName = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["Provider"] as? String {
            self.provider = value
        }
        if let value = dict["Province"] as? String {
            self.province = value
        }
        if let value = dict["TagList"] as? String {
            self.tagList = value
        }
    }
}

public class ImportCorpNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportCorpNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportCorpNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportCorpNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportCustomCallTaggingRequest : Tea.TeaModel {
    public var filePath: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filePath != nil {
            map["FilePath"] = self.filePath!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FilePath"] as? String {
            self.filePath = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ImportCustomCallTaggingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var item: String?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.item != nil {
                map["Item"] = self.item!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Item"] as? String {
                self.item = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var code: String?

    public var data: [ImportCustomCallTaggingResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ImportCustomCallTaggingResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ImportCustomCallTaggingResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportCustomCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportCustomCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportCustomCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportDoNotCallNumbersRequest : Tea.TeaModel {
    public var filePath: String?

    public var instanceId: String?

    public var numberList: String?

    public var remark: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filePath != nil {
            map["FilePath"] = self.filePath!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FilePath"] as? String {
            self.filePath = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
    }
}

public class ImportDoNotCallNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportDoNotCallNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportDoNotCallNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportDoNotCallNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportDocumentsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ossFileKey: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ossFileKey != nil {
            map["OssFileKey"] = self.ossFileKey!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OssFileKey"] as? String {
            self.ossFileKey = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class ImportDocumentsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ImportDocumentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportDocumentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportDocumentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InitiateAttendedTransferRequest : Tea.TeaModel {
    public var callPriority: Int32?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var queuingOverflowThreshold: Int64?

    public var queuingTimeoutSeconds: Int64?

    public var routingType: String?

    public var strategyName: String?

    public var strategyParams: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public var transferee: String?

    public var transfereeType: String?

    public var transferor: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callPriority != nil {
            map["CallPriority"] = self.callPriority!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.queuingOverflowThreshold != nil {
            map["QueuingOverflowThreshold"] = self.queuingOverflowThreshold!
        }
        if self.queuingTimeoutSeconds != nil {
            map["QueuingTimeoutSeconds"] = self.queuingTimeoutSeconds!
        }
        if self.routingType != nil {
            map["RoutingType"] = self.routingType!
        }
        if self.strategyName != nil {
            map["StrategyName"] = self.strategyName!
        }
        if self.strategyParams != nil {
            map["StrategyParams"] = self.strategyParams!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.transferee != nil {
            map["Transferee"] = self.transferee!
        }
        if self.transfereeType != nil {
            map["TransfereeType"] = self.transfereeType!
        }
        if self.transferor != nil {
            map["Transferor"] = self.transferor!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallPriority"] as? Int32 {
            self.callPriority = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["QueuingOverflowThreshold"] as? Int64 {
            self.queuingOverflowThreshold = value
        }
        if let value = dict["QueuingTimeoutSeconds"] as? Int64 {
            self.queuingTimeoutSeconds = value
        }
        if let value = dict["RoutingType"] as? String {
            self.routingType = value
        }
        if let value = dict["StrategyName"] as? String {
            self.strategyName = value
        }
        if let value = dict["StrategyParams"] as? String {
            self.strategyParams = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["Transferee"] as? String {
            self.transferee = value
        }
        if let value = dict["TransfereeType"] as? String {
            self.transfereeType = value
        }
        if let value = dict["Transferor"] as? String {
            self.transferor = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class InitiateAttendedTransferResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [InitiateAttendedTransferResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [InitiateAttendedTransferResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = InitiateAttendedTransferResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: InitiateAttendedTransferResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: InitiateAttendedTransferResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = InitiateAttendedTransferResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = InitiateAttendedTransferResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: InitiateAttendedTransferResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = InitiateAttendedTransferResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class InitiateAttendedTransferResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InitiateAttendedTransferResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InitiateAttendedTransferResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InterceptCallRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var interceptedUserId: String?

    public var jobId: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interceptedUserId != nil {
            map["InterceptedUserId"] = self.interceptedUserId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InterceptedUserId"] as? String {
            self.interceptedUserId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class InterceptCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [InterceptCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [InterceptCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = InterceptCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: InterceptCallResponseBody.Data.CallContext?

        public var userContext: InterceptCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = InterceptCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = InterceptCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: InterceptCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = InterceptCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class InterceptCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InterceptCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InterceptCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class LaunchAuthenticationRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var contactFlowVariables: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.contactFlowVariables != nil {
            map["ContactFlowVariables"] = self.contactFlowVariables!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["ContactFlowVariables"] as? String {
            self.contactFlowVariables = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class LaunchAuthenticationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [LaunchAuthenticationResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [LaunchAuthenticationResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = LaunchAuthenticationResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: LaunchAuthenticationResponseBody.Data.CallContext?

        public var userContext: LaunchAuthenticationResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = LaunchAuthenticationResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = LaunchAuthenticationResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: LaunchAuthenticationResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = LaunchAuthenticationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class LaunchAuthenticationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: LaunchAuthenticationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = LaunchAuthenticationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class LaunchSurveyRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var contactFlowVariables: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var smsMetadataId: String?

    public var surveyChannel: String?

    public var surveyTemplateId: String?

    public var surveyTemplateVariables: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.contactFlowVariables != nil {
            map["ContactFlowVariables"] = self.contactFlowVariables!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.smsMetadataId != nil {
            map["SmsMetadataId"] = self.smsMetadataId!
        }
        if self.surveyChannel != nil {
            map["SurveyChannel"] = self.surveyChannel!
        }
        if self.surveyTemplateId != nil {
            map["SurveyTemplateId"] = self.surveyTemplateId!
        }
        if self.surveyTemplateVariables != nil {
            map["SurveyTemplateVariables"] = self.surveyTemplateVariables!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["ContactFlowVariables"] as? String {
            self.contactFlowVariables = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["SmsMetadataId"] as? String {
            self.smsMetadataId = value
        }
        if let value = dict["SurveyChannel"] as? String {
            self.surveyChannel = value
        }
        if let value = dict["SurveyTemplateId"] as? String {
            self.surveyTemplateId = value
        }
        if let value = dict["SurveyTemplateVariables"] as? String {
            self.surveyTemplateVariables = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class LaunchSurveyResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [LaunchSurveyResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [LaunchSurveyResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = LaunchSurveyResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: LaunchSurveyResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: LaunchSurveyResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = LaunchSurveyResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = LaunchSurveyResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: LaunchSurveyResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = LaunchSurveyResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class LaunchSurveyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: LaunchSurveyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = LaunchSurveyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAgentStateLogsRequest : Tea.TeaModel {
    public var agentId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListAgentStateLogsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var duration: Int64?

        public var outboundScenario: Bool?

        public var startTime: Int64?

        public var state: String?

        public var stateCode: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            if self.stateCode != nil {
                map["StateCode"] = self.stateCode!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
            if let value = dict["StateCode"] as? String {
                self.stateCode = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: [ListAgentStateLogsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListAgentStateLogsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListAgentStateLogsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAgentStateLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentStateLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAgentStateLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAgentStatesRequest : Tea.TeaModel {
    public var agentIds: String?

    public var excludeOfflineUsers: Bool?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIds != nil {
            map["AgentIds"] = self.agentIds!
        }
        if self.excludeOfflineUsers != nil {
            map["ExcludeOfflineUsers"] = self.excludeOfflineUsers!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentIds"] as? String {
            self.agentIds = value
        }
        if let value = dict["ExcludeOfflineUsers"] as? Bool {
            self.excludeOfflineUsers = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class ListAgentStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var agentId: String?

            public var agentName: String?

            public var breakCode: String?

            public var dn: String?

            public var instanceId: String?

            public var loginName: String?

            public var outboundScenario: Bool?

            public var state: String?

            public var stateDuration: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.dn != nil {
                    map["Dn"] = self.dn!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.stateDuration != nil {
                    map["StateDuration"] = self.stateDuration!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentName"] as? String {
                    self.agentName = value
                }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["Dn"] as? String {
                    self.dn = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LoginName"] as? String {
                    self.loginName = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["StateDuration"] as? String {
                    self.stateDuration = value
                }
            }
        }
        public var list: [ListAgentStatesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListAgentStatesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListAgentStatesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListAgentStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListAgentStatesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAgentStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAgentStatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAgentSummaryReportsSinceMidnightRequest : Tea.TeaModel {
    public var agentIds: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIds != nil {
            map["AgentIds"] = self.agentIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentIds"] as? String {
            self.agentIds = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class ListAgentSummaryReportsSinceMidnightResponseBody : Tea.TeaModel {
    public class PagedAgentSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Inbound : Tea.TeaModel {
                public var averageRingTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var callsHandled: Int64?

                public var callsOffered: Int64?

                public var handleRate: Double?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var serviceLevel20: Double?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.handleRate != nil {
                        map["HandleRate"] = self.handleRate!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.serviceLevel20 != nil {
                        map["ServiceLevel20"] = self.serviceLevel20!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageRingTime"] as? Int64 {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Int64 {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["HandleRate"] as? Double {
                        self.handleRate = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["ServiceLevel20"] as? Double {
                        self.serviceLevel20 = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Outbound : Tea.TeaModel {
                public var answerRate: Double?

                public var averageDialingTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var callsAnswered: Int64?

                public var callsDialed: Int64?

                public var maxDialingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: String?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalDialingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageDialingTime != nil {
                        map["AverageDialingTime"] = self.averageDialingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.maxDialingTime != nil {
                        map["MaxDialingTime"] = self.maxDialingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalDialingTime != nil {
                        map["TotalDialingTime"] = self.totalDialingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageDialingTime"] as? Int64 {
                        self.averageDialingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Int64 {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["MaxDialingTime"] as? Int64 {
                        self.maxDialingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? String {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalDialingTime"] as? Int64 {
                        self.totalDialingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Overall : Tea.TeaModel {
                public var averageReadyTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var maxReadyTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var occupancyRate: Double?

                public var oneTransferCalls: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalBreakTime: Int64?

                public var totalCalls: Int64?

                public var totalLoggedInTime: Int64?

                public var totalReadyTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageReadyTime != nil {
                        map["AverageReadyTime"] = self.averageReadyTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.maxReadyTime != nil {
                        map["MaxReadyTime"] = self.maxReadyTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.occupancyRate != nil {
                        map["OccupancyRate"] = self.occupancyRate!
                    }
                    if self.oneTransferCalls != nil {
                        map["OneTransferCalls"] = self.oneTransferCalls!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalBreakTime != nil {
                        map["TotalBreakTime"] = self.totalBreakTime!
                    }
                    if self.totalCalls != nil {
                        map["TotalCalls"] = self.totalCalls!
                    }
                    if self.totalLoggedInTime != nil {
                        map["TotalLoggedInTime"] = self.totalLoggedInTime!
                    }
                    if self.totalReadyTime != nil {
                        map["TotalReadyTime"] = self.totalReadyTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageReadyTime"] as? Int64 {
                        self.averageReadyTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Int64 {
                        self.averageWorkTime = value
                    }
                    if let value = dict["MaxReadyTime"] as? Int64 {
                        self.maxReadyTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["OccupancyRate"] as? Double {
                        self.occupancyRate = value
                    }
                    if let value = dict["OneTransferCalls"] as? Int64 {
                        self.oneTransferCalls = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalBreakTime"] as? Int64 {
                        self.totalBreakTime = value
                    }
                    if let value = dict["TotalCalls"] as? Int64 {
                        self.totalCalls = value
                    }
                    if let value = dict["TotalLoggedInTime"] as? Int64 {
                        self.totalLoggedInTime = value
                    }
                    if let value = dict["TotalReadyTime"] as? Int64 {
                        self.totalReadyTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public var agentId: String?

            public var agentName: String?

            public var inbound: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.Inbound?

            public var instanceId: String?

            public var loginName: String?

            public var outbound: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.Outbound?

            public var overall: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.Overall?

            public var skillGroupIds: String?

            public var skillGroupNames: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.inbound?.validate()
                try self.outbound?.validate()
                try self.overall?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.inbound != nil {
                    map["Inbound"] = self.inbound?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.outbound != nil {
                    map["Outbound"] = self.outbound?.toMap()
                }
                if self.overall != nil {
                    map["Overall"] = self.overall?.toMap()
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.skillGroupNames != nil {
                    map["SkillGroupNames"] = self.skillGroupNames!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentName"] as? String {
                    self.agentName = value
                }
                if let value = dict["Inbound"] as? [String: Any?] {
                    var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.Inbound()
                    model.fromMap(value)
                    self.inbound = model
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LoginName"] as? String {
                    self.loginName = value
                }
                if let value = dict["Outbound"] as? [String: Any?] {
                    var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.Outbound()
                    model.fromMap(value)
                    self.outbound = model
                }
                if let value = dict["Overall"] as? [String: Any?] {
                    var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.Overall()
                    model.fromMap(value)
                    self.overall = model
                }
                if let value = dict["SkillGroupIds"] as? String {
                    self.skillGroupIds = value
                }
                if let value = dict["SkillGroupNames"] as? String {
                    self.skillGroupNames = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public var list: [ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List] = []
                for v in value {
                    if v != nil {
                        var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedAgentSummaryReport: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedAgentSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedAgentSummaryReport != nil {
            map["PagedAgentSummaryReport"] = self.pagedAgentSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PagedAgentSummaryReport"] as? [String: Any?] {
            var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport()
            model.fromMap(value)
            self.pagedAgentSummaryReport = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAgentSummaryReportsSinceMidnightResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentSummaryReportsSinceMidnightResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAgentSummaryReportsSinceMidnightResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAttemptsRequest : Tea.TeaModel {
    public var agentId: String?

    public var attemptId: String?

    public var callee: String?

    public var caller: String?

    public var campaignId: String?

    public var caseId: String?

    public var contactId: String?

    public var criteria: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var queueId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.attemptId != nil {
            map["AttemptId"] = self.attemptId!
        }
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.caseId != nil {
            map["CaseId"] = self.caseId!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queueId != nil {
            map["QueueId"] = self.queueId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["AttemptId"] as? String {
            self.attemptId = value
        }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["CaseId"] as? String {
            self.caseId = value
        }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["Criteria"] as? String {
            self.criteria = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueueId"] as? String {
            self.queueId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListAttemptsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var agentEstablishedTime: Int64?

            public var agentId: String?

            public var agentRingDuration: Int64?

            public var assignAgentTime: Int64?

            public var attemptId: String?

            public var callee: String?

            public var caller: String?

            public var campaignId: String?

            public var caseId: String?

            public var contactId: String?

            public var customerEstablishedTime: Int64?

            public var customerReleasedTime: Int64?

            public var dialDuration: Int64?

            public var dialTime: Int64?

            public var enqueueTime: Int64?

            public var enterIvrTime: Int64?

            public var instanceId: String?

            public var ivrDuration: Int64?

            public var queueDuration: Int64?

            public var queueId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentEstablishedTime != nil {
                    map["AgentEstablishedTime"] = self.agentEstablishedTime!
                }
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentRingDuration != nil {
                    map["AgentRingDuration"] = self.agentRingDuration!
                }
                if self.assignAgentTime != nil {
                    map["AssignAgentTime"] = self.assignAgentTime!
                }
                if self.attemptId != nil {
                    map["AttemptId"] = self.attemptId!
                }
                if self.callee != nil {
                    map["Callee"] = self.callee!
                }
                if self.caller != nil {
                    map["Caller"] = self.caller!
                }
                if self.campaignId != nil {
                    map["CampaignId"] = self.campaignId!
                }
                if self.caseId != nil {
                    map["CaseId"] = self.caseId!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.customerEstablishedTime != nil {
                    map["CustomerEstablishedTime"] = self.customerEstablishedTime!
                }
                if self.customerReleasedTime != nil {
                    map["CustomerReleasedTime"] = self.customerReleasedTime!
                }
                if self.dialDuration != nil {
                    map["DialDuration"] = self.dialDuration!
                }
                if self.dialTime != nil {
                    map["DialTime"] = self.dialTime!
                }
                if self.enqueueTime != nil {
                    map["EnqueueTime"] = self.enqueueTime!
                }
                if self.enterIvrTime != nil {
                    map["EnterIvrTime"] = self.enterIvrTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.ivrDuration != nil {
                    map["IvrDuration"] = self.ivrDuration!
                }
                if self.queueDuration != nil {
                    map["QueueDuration"] = self.queueDuration!
                }
                if self.queueId != nil {
                    map["QueueId"] = self.queueId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentEstablishedTime"] as? Int64 {
                    self.agentEstablishedTime = value
                }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentRingDuration"] as? Int64 {
                    self.agentRingDuration = value
                }
                if let value = dict["AssignAgentTime"] as? Int64 {
                    self.assignAgentTime = value
                }
                if let value = dict["AttemptId"] as? String {
                    self.attemptId = value
                }
                if let value = dict["Callee"] as? String {
                    self.callee = value
                }
                if let value = dict["Caller"] as? String {
                    self.caller = value
                }
                if let value = dict["CampaignId"] as? String {
                    self.campaignId = value
                }
                if let value = dict["CaseId"] as? String {
                    self.caseId = value
                }
                if let value = dict["ContactId"] as? String {
                    self.contactId = value
                }
                if let value = dict["CustomerEstablishedTime"] as? Int64 {
                    self.customerEstablishedTime = value
                }
                if let value = dict["CustomerReleasedTime"] as? Int64 {
                    self.customerReleasedTime = value
                }
                if let value = dict["DialDuration"] as? Int64 {
                    self.dialDuration = value
                }
                if let value = dict["DialTime"] as? Int64 {
                    self.dialTime = value
                }
                if let value = dict["EnqueueTime"] as? Int64 {
                    self.enqueueTime = value
                }
                if let value = dict["EnterIvrTime"] as? Int64 {
                    self.enterIvrTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["IvrDuration"] as? Int64 {
                    self.ivrDuration = value
                }
                if let value = dict["QueueDuration"] as? Int64 {
                    self.queueDuration = value
                }
                if let value = dict["QueueId"] as? String {
                    self.queueId = value
                }
            }
        }
        public var list: [ListAttemptsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListAttemptsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListAttemptsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListAttemptsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListAttemptsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAttemptsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAttemptsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAttemptsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAudioFilesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var status: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class ListAudioFilesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var audioFileName: String?

            public var audioResourceId: String?

            public var auditResult: String?

            public var createdTime: String?

            public var instanceId: String?

            public var name: String?

            public var ossFileKey: String?

            public var status: String?

            public var updatedTime: String?

            public var usage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.audioFileName != nil {
                    map["AudioFileName"] = self.audioFileName!
                }
                if self.audioResourceId != nil {
                    map["AudioResourceId"] = self.audioResourceId!
                }
                if self.auditResult != nil {
                    map["AuditResult"] = self.auditResult!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ossFileKey != nil {
                    map["OssFileKey"] = self.ossFileKey!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AudioFileName"] as? String {
                    self.audioFileName = value
                }
                if let value = dict["AudioResourceId"] as? String {
                    self.audioResourceId = value
                }
                if let value = dict["AuditResult"] as? String {
                    self.auditResult = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OssFileKey"] as? String {
                    self.ossFileKey = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["UpdatedTime"] as? String {
                    self.updatedTime = value
                }
                if let value = dict["Usage"] as? String {
                    self.usage = value
                }
            }
        }
        public var list: [ListAudioFilesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListAudioFilesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListAudioFilesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListAudioFilesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListAudioFilesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAudioFilesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAudioFilesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAudioFilesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListBlacklistCallTaggingsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var numberList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
    }
}

public class ListBlacklistCallTaggingsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var blacklisted: Bool?

        public var jobId: String?

        public var number: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.blacklisted != nil {
                map["Blacklisted"] = self.blacklisted!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.number != nil {
                map["Number"] = self.number!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Blacklisted"] as? Bool {
                self.blacklisted = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Number"] as? String {
                self.number = value
            }
        }
    }
    public var code: String?

    public var data: [ListBlacklistCallTaggingsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListBlacklistCallTaggingsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListBlacklistCallTaggingsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListBlacklistCallTaggingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListBlacklistCallTaggingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListBlacklistCallTaggingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListBriefSkillGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mediaType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ListBriefSkillGroupsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var description_: String?

            public var displayName: String?

            public var instanceId: String?

            public var mediaType: String?

            public var phoneNumberCount: Int32?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var userCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                if self.phoneNumberCount != nil {
                    map["PhoneNumberCount"] = self.phoneNumberCount!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.userCount != nil {
                    map["UserCount"] = self.userCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
                if let value = dict["PhoneNumberCount"] as? Int32 {
                    self.phoneNumberCount = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["UserCount"] as? Int32 {
                    self.userCount = value
                }
            }
        }
        public var list: [ListBriefSkillGroupsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListBriefSkillGroupsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListBriefSkillGroupsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListBriefSkillGroupsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListBriefSkillGroupsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListBriefSkillGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListBriefSkillGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListBriefSkillGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCallDetailRecordsRequest : Tea.TeaModel {
    public var agentId: String?

    public var calledNumber: String?

    public var callingNumber: String?

    public var contactDisposition: String?

    public var contactDispositionList: String?

    public var contactId: String?

    public var contactType: String?

    public var contactTypeList: String?

    public var criteria: String?

    public var earlyMediaStateList: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var orderByField: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var satisfactionDescriptionList: String?

    public var satisfactionList: String?

    public var satisfactionSurveyChannel: String?

    public var skillGroupId: String?

    public var sortOrder: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.calledNumber != nil {
            map["CalledNumber"] = self.calledNumber!
        }
        if self.callingNumber != nil {
            map["CallingNumber"] = self.callingNumber!
        }
        if self.contactDisposition != nil {
            map["ContactDisposition"] = self.contactDisposition!
        }
        if self.contactDispositionList != nil {
            map["ContactDispositionList"] = self.contactDispositionList!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.contactType != nil {
            map["ContactType"] = self.contactType!
        }
        if self.contactTypeList != nil {
            map["ContactTypeList"] = self.contactTypeList!
        }
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.earlyMediaStateList != nil {
            map["EarlyMediaStateList"] = self.earlyMediaStateList!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderByField != nil {
            map["OrderByField"] = self.orderByField!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.satisfactionDescriptionList != nil {
            map["SatisfactionDescriptionList"] = self.satisfactionDescriptionList!
        }
        if self.satisfactionList != nil {
            map["SatisfactionList"] = self.satisfactionList!
        }
        if self.satisfactionSurveyChannel != nil {
            map["SatisfactionSurveyChannel"] = self.satisfactionSurveyChannel!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["CalledNumber"] as? String {
            self.calledNumber = value
        }
        if let value = dict["CallingNumber"] as? String {
            self.callingNumber = value
        }
        if let value = dict["ContactDisposition"] as? String {
            self.contactDisposition = value
        }
        if let value = dict["ContactDispositionList"] as? String {
            self.contactDispositionList = value
        }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["ContactType"] as? String {
            self.contactType = value
        }
        if let value = dict["ContactTypeList"] as? String {
            self.contactTypeList = value
        }
        if let value = dict["Criteria"] as? String {
            self.criteria = value
        }
        if let value = dict["EarlyMediaStateList"] as? String {
            self.earlyMediaStateList = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderByField"] as? String {
            self.orderByField = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SatisfactionDescriptionList"] as? String {
            self.satisfactionDescriptionList = value
        }
        if let value = dict["SatisfactionList"] as? String {
            self.satisfactionList = value
        }
        if let value = dict["SatisfactionSurveyChannel"] as? String {
            self.satisfactionSurveyChannel = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListCallDetailRecordsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var additionalBroker: String?

            public var agentIds: String?

            public var agentNames: String?

            public var broker: String?

            public var callDuration: String?

            public var callIds: String?

            public var calledNumber: String?

            public var calleeLocation: String?

            public var callerLocation: String?

            public var callingNumber: String?

            public var contactDisposition: String?

            public var contactId: String?

            public var contactType: String?

            public var dialingTime: Int64?

            public var earlyMediaState: String?

            public var establishedTime: Int64?

            public var heldTime: Int64?

            public var instanceId: String?

            public var ivrTime: Int64?

            public var queueTime: Int64?

            public var recordingDuration: Int64?

            public var recordingReady: Bool?

            public var releaseInitiator: String?

            public var releaseReason: String?

            public var releaseTime: Int64?

            public var ringTime: Int64?

            public var satisfactionDescription: String?

            public var satisfactionIndex: Int32?

            public var satisfactionSurveyChannel: String?

            public var satisfactionSurveyOffered: Bool?

            public var skillGroupIds: String?

            public var skillGroupNames: String?

            public var startTime: Int64?

            public var talkTime: Int64?

            public var waitTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.additionalBroker != nil {
                    map["AdditionalBroker"] = self.additionalBroker!
                }
                if self.agentIds != nil {
                    map["AgentIds"] = self.agentIds!
                }
                if self.agentNames != nil {
                    map["AgentNames"] = self.agentNames!
                }
                if self.broker != nil {
                    map["Broker"] = self.broker!
                }
                if self.callDuration != nil {
                    map["CallDuration"] = self.callDuration!
                }
                if self.callIds != nil {
                    map["CallIds"] = self.callIds!
                }
                if self.calledNumber != nil {
                    map["CalledNumber"] = self.calledNumber!
                }
                if self.calleeLocation != nil {
                    map["CalleeLocation"] = self.calleeLocation!
                }
                if self.callerLocation != nil {
                    map["CallerLocation"] = self.callerLocation!
                }
                if self.callingNumber != nil {
                    map["CallingNumber"] = self.callingNumber!
                }
                if self.contactDisposition != nil {
                    map["ContactDisposition"] = self.contactDisposition!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactType != nil {
                    map["ContactType"] = self.contactType!
                }
                if self.dialingTime != nil {
                    map["DialingTime"] = self.dialingTime!
                }
                if self.earlyMediaState != nil {
                    map["EarlyMediaState"] = self.earlyMediaState!
                }
                if self.establishedTime != nil {
                    map["EstablishedTime"] = self.establishedTime!
                }
                if self.heldTime != nil {
                    map["HeldTime"] = self.heldTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.ivrTime != nil {
                    map["IvrTime"] = self.ivrTime!
                }
                if self.queueTime != nil {
                    map["QueueTime"] = self.queueTime!
                }
                if self.recordingDuration != nil {
                    map["RecordingDuration"] = self.recordingDuration!
                }
                if self.recordingReady != nil {
                    map["RecordingReady"] = self.recordingReady!
                }
                if self.releaseInitiator != nil {
                    map["ReleaseInitiator"] = self.releaseInitiator!
                }
                if self.releaseReason != nil {
                    map["ReleaseReason"] = self.releaseReason!
                }
                if self.releaseTime != nil {
                    map["ReleaseTime"] = self.releaseTime!
                }
                if self.ringTime != nil {
                    map["RingTime"] = self.ringTime!
                }
                if self.satisfactionDescription != nil {
                    map["SatisfactionDescription"] = self.satisfactionDescription!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveyChannel != nil {
                    map["SatisfactionSurveyChannel"] = self.satisfactionSurveyChannel!
                }
                if self.satisfactionSurveyOffered != nil {
                    map["SatisfactionSurveyOffered"] = self.satisfactionSurveyOffered!
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.skillGroupNames != nil {
                    map["SkillGroupNames"] = self.skillGroupNames!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.talkTime != nil {
                    map["TalkTime"] = self.talkTime!
                }
                if self.waitTime != nil {
                    map["WaitTime"] = self.waitTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdditionalBroker"] as? String {
                    self.additionalBroker = value
                }
                if let value = dict["AgentIds"] as? String {
                    self.agentIds = value
                }
                if let value = dict["AgentNames"] as? String {
                    self.agentNames = value
                }
                if let value = dict["Broker"] as? String {
                    self.broker = value
                }
                if let value = dict["CallDuration"] as? String {
                    self.callDuration = value
                }
                if let value = dict["CallIds"] as? String {
                    self.callIds = value
                }
                if let value = dict["CalledNumber"] as? String {
                    self.calledNumber = value
                }
                if let value = dict["CalleeLocation"] as? String {
                    self.calleeLocation = value
                }
                if let value = dict["CallerLocation"] as? String {
                    self.callerLocation = value
                }
                if let value = dict["CallingNumber"] as? String {
                    self.callingNumber = value
                }
                if let value = dict["ContactDisposition"] as? String {
                    self.contactDisposition = value
                }
                if let value = dict["ContactId"] as? String {
                    self.contactId = value
                }
                if let value = dict["ContactType"] as? String {
                    self.contactType = value
                }
                if let value = dict["DialingTime"] as? Int64 {
                    self.dialingTime = value
                }
                if let value = dict["EarlyMediaState"] as? String {
                    self.earlyMediaState = value
                }
                if let value = dict["EstablishedTime"] as? Int64 {
                    self.establishedTime = value
                }
                if let value = dict["HeldTime"] as? Int64 {
                    self.heldTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["IvrTime"] as? Int64 {
                    self.ivrTime = value
                }
                if let value = dict["QueueTime"] as? Int64 {
                    self.queueTime = value
                }
                if let value = dict["RecordingDuration"] as? Int64 {
                    self.recordingDuration = value
                }
                if let value = dict["RecordingReady"] as? Bool {
                    self.recordingReady = value
                }
                if let value = dict["ReleaseInitiator"] as? String {
                    self.releaseInitiator = value
                }
                if let value = dict["ReleaseReason"] as? String {
                    self.releaseReason = value
                }
                if let value = dict["ReleaseTime"] as? Int64 {
                    self.releaseTime = value
                }
                if let value = dict["RingTime"] as? Int64 {
                    self.ringTime = value
                }
                if let value = dict["SatisfactionDescription"] as? String {
                    self.satisfactionDescription = value
                }
                if let value = dict["SatisfactionIndex"] as? Int32 {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionSurveyChannel"] as? String {
                    self.satisfactionSurveyChannel = value
                }
                if let value = dict["SatisfactionSurveyOffered"] as? Bool {
                    self.satisfactionSurveyOffered = value
                }
                if let value = dict["SkillGroupIds"] as? String {
                    self.skillGroupIds = value
                }
                if let value = dict["SkillGroupNames"] as? String {
                    self.skillGroupNames = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["TalkTime"] as? Int64 {
                    self.talkTime = value
                }
                if let value = dict["WaitTime"] as? Int64 {
                    self.waitTime = value
                }
            }
        }
        public var list: [ListCallDetailRecordsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListCallDetailRecordsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListCallDetailRecordsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListCallDetailRecordsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCallDetailRecordsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCallDetailRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallDetailRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCallDetailRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCallDetailRecordsV2Request : Tea.TeaModel {
    public var accessChannelTypeList: String?

    public var agentId: String?

    public var analyticsReportReady: Bool?

    public var broker: String?

    public var calledNumber: String?

    public var callingNumber: String?

    public var contactDispositionList: String?

    public var contactIdList: String?

    public var contactTypeList: String?

    public var earlyMediaStateList: String?

    public var endTime: Int64?

    public var firstAgentId: String?

    public var instanceId: String?

    public var mediaType: String?

    public var number: String?

    public var orderByField: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var releaseInitiatorList: String?

    public var releaseReasonList: String?

    public var satisfactionDescriptionList: String?

    public var satisfactionRateList: String?

    public var satisfactionSurveyChannel: String?

    public var searchPattern: String?

    public var skillGroupIdList: String?

    public var sortOrder: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessChannelTypeList != nil {
            map["AccessChannelTypeList"] = self.accessChannelTypeList!
        }
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.analyticsReportReady != nil {
            map["AnalyticsReportReady"] = self.analyticsReportReady!
        }
        if self.broker != nil {
            map["Broker"] = self.broker!
        }
        if self.calledNumber != nil {
            map["CalledNumber"] = self.calledNumber!
        }
        if self.callingNumber != nil {
            map["CallingNumber"] = self.callingNumber!
        }
        if self.contactDispositionList != nil {
            map["ContactDispositionList"] = self.contactDispositionList!
        }
        if self.contactIdList != nil {
            map["ContactIdList"] = self.contactIdList!
        }
        if self.contactTypeList != nil {
            map["ContactTypeList"] = self.contactTypeList!
        }
        if self.earlyMediaStateList != nil {
            map["EarlyMediaStateList"] = self.earlyMediaStateList!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.firstAgentId != nil {
            map["FirstAgentId"] = self.firstAgentId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        if self.orderByField != nil {
            map["OrderByField"] = self.orderByField!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.releaseInitiatorList != nil {
            map["ReleaseInitiatorList"] = self.releaseInitiatorList!
        }
        if self.releaseReasonList != nil {
            map["ReleaseReasonList"] = self.releaseReasonList!
        }
        if self.satisfactionDescriptionList != nil {
            map["SatisfactionDescriptionList"] = self.satisfactionDescriptionList!
        }
        if self.satisfactionRateList != nil {
            map["SatisfactionRateList"] = self.satisfactionRateList!
        }
        if self.satisfactionSurveyChannel != nil {
            map["SatisfactionSurveyChannel"] = self.satisfactionSurveyChannel!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessChannelTypeList"] as? String {
            self.accessChannelTypeList = value
        }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["AnalyticsReportReady"] as? Bool {
            self.analyticsReportReady = value
        }
        if let value = dict["Broker"] as? String {
            self.broker = value
        }
        if let value = dict["CalledNumber"] as? String {
            self.calledNumber = value
        }
        if let value = dict["CallingNumber"] as? String {
            self.callingNumber = value
        }
        if let value = dict["ContactDispositionList"] as? String {
            self.contactDispositionList = value
        }
        if let value = dict["ContactIdList"] as? String {
            self.contactIdList = value
        }
        if let value = dict["ContactTypeList"] as? String {
            self.contactTypeList = value
        }
        if let value = dict["EarlyMediaStateList"] as? String {
            self.earlyMediaStateList = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["FirstAgentId"] as? String {
            self.firstAgentId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
        if let value = dict["OrderByField"] as? String {
            self.orderByField = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ReleaseInitiatorList"] as? String {
            self.releaseInitiatorList = value
        }
        if let value = dict["ReleaseReasonList"] as? String {
            self.releaseReasonList = value
        }
        if let value = dict["SatisfactionDescriptionList"] as? String {
            self.satisfactionDescriptionList = value
        }
        if let value = dict["SatisfactionRateList"] as? String {
            self.satisfactionRateList = value
        }
        if let value = dict["SatisfactionSurveyChannel"] as? String {
            self.satisfactionSurveyChannel = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListCallDetailRecordsV2ResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class AnalyticsReport : Tea.TeaModel {
                public class Emotion : Tea.TeaModel {
                    public var confidence: Int32?

                    public var remark: String?

                    public var success: Bool?

                    public var taskId: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.confidence != nil {
                            map["Confidence"] = self.confidence!
                        }
                        if self.remark != nil {
                            map["Remark"] = self.remark!
                        }
                        if self.success != nil {
                            map["Success"] = self.success!
                        }
                        if self.taskId != nil {
                            map["TaskId"] = self.taskId!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Confidence"] as? Int32 {
                            self.confidence = value
                        }
                        if let value = dict["Remark"] as? String {
                            self.remark = value
                        }
                        if let value = dict["Success"] as? Bool {
                            self.success = value
                        }
                        if let value = dict["TaskId"] as? String {
                            self.taskId = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public class ProblemSolving : Tea.TeaModel {
                    public var problem: String?

                    public var solution: String?

                    public var solved: Bool?

                    public var success: Bool?

                    public var taskId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.problem != nil {
                            map["Problem"] = self.problem!
                        }
                        if self.solution != nil {
                            map["Solution"] = self.solution!
                        }
                        if self.solved != nil {
                            map["Solved"] = self.solved!
                        }
                        if self.success != nil {
                            map["Success"] = self.success!
                        }
                        if self.taskId != nil {
                            map["TaskId"] = self.taskId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Problem"] as? String {
                            self.problem = value
                        }
                        if let value = dict["Solution"] as? String {
                            self.solution = value
                        }
                        if let value = dict["Solved"] as? Bool {
                            self.solved = value
                        }
                        if let value = dict["Success"] as? Bool {
                            self.success = value
                        }
                        if let value = dict["TaskId"] as? String {
                            self.taskId = value
                        }
                    }
                }
                public class Satisfaction : Tea.TeaModel {
                    public var remark: String?

                    public var satisfactionDescription: String?

                    public var success: Bool?

                    public var taskId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.remark != nil {
                            map["Remark"] = self.remark!
                        }
                        if self.satisfactionDescription != nil {
                            map["SatisfactionDescription"] = self.satisfactionDescription!
                        }
                        if self.success != nil {
                            map["Success"] = self.success!
                        }
                        if self.taskId != nil {
                            map["TaskId"] = self.taskId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Remark"] as? String {
                            self.remark = value
                        }
                        if let value = dict["SatisfactionDescription"] as? String {
                            self.satisfactionDescription = value
                        }
                        if let value = dict["Success"] as? Bool {
                            self.success = value
                        }
                        if let value = dict["TaskId"] as? String {
                            self.taskId = value
                        }
                    }
                }
                public class TodoList : Tea.TeaModel {
                    public var success: Bool?

                    public var taskId: String?

                    public var tasks: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.success != nil {
                            map["Success"] = self.success!
                        }
                        if self.taskId != nil {
                            map["TaskId"] = self.taskId!
                        }
                        if self.tasks != nil {
                            map["Tasks"] = self.tasks!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Success"] as? Bool {
                            self.success = value
                        }
                        if let value = dict["TaskId"] as? String {
                            self.taskId = value
                        }
                        if let value = dict["Tasks"] as? [String] {
                            self.tasks = value
                        }
                    }
                }
                public var emotion: ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.Emotion?

                public var problemSolving: ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.ProblemSolving?

                public var satisfaction: ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.Satisfaction?

                public var todoList: ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.TodoList?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.emotion?.validate()
                    try self.problemSolving?.validate()
                    try self.satisfaction?.validate()
                    try self.todoList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.emotion != nil {
                        map["Emotion"] = self.emotion?.toMap()
                    }
                    if self.problemSolving != nil {
                        map["ProblemSolving"] = self.problemSolving?.toMap()
                    }
                    if self.satisfaction != nil {
                        map["Satisfaction"] = self.satisfaction?.toMap()
                    }
                    if self.todoList != nil {
                        map["TodoList"] = self.todoList?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Emotion"] as? [String: Any?] {
                        var model = ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.Emotion()
                        model.fromMap(value)
                        self.emotion = model
                    }
                    if let value = dict["ProblemSolving"] as? [String: Any?] {
                        var model = ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.ProblemSolving()
                        model.fromMap(value)
                        self.problemSolving = model
                    }
                    if let value = dict["Satisfaction"] as? [String: Any?] {
                        var model = ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.Satisfaction()
                        model.fromMap(value)
                        self.satisfaction = model
                    }
                    if let value = dict["TodoList"] as? [String: Any?] {
                        var model = ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport.TodoList()
                        model.fromMap(value)
                        self.todoList = model
                    }
                }
            }
            public class SummaryIndex : Tea.TeaModel {
                public var keywords: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.keywords != nil {
                        map["Keywords"] = self.keywords!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Keywords"] as? String {
                        self.keywords = value
                    }
                }
            }
            public var accessChannelName: String?

            public var accessChannelType: String?

            public var accessChannelUserId: String?

            public var accessChannelUserName: String?

            public var additionalBroker: String?

            public var agentIds: String?

            public var agentNames: String?

            public var analyticsReport: ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport?

            public var analyticsReportReady: Bool?

            public var broker: String?

            public var callDuration: String?

            public var callIds: String?

            public var calledNumber: String?

            public var calleeLocation: String?

            public var callerLocation: String?

            public var callingNumber: String?

            public var clientAppName: String?

            public var clientIpAddress: String?

            public var clientLocation: String?

            public var clientUserAgent: String?

            public var contactDisposition: String?

            public var contactId: String?

            public var contactType: String?

            public var dialingTime: Int64?

            public var earlyMediaState: String?

            public var earlyMediaText: String?

            public var establishedTime: Int64?

            public var firstResponseTime: Int64?

            public var heldTime: Int64?

            public var instanceId: String?

            public var ivrTime: Int64?

            public var mediaType: String?

            public var messagesSent: Int64?

            public var messagesSentByAgent: Int64?

            public var messagesSentByCustomer: Int64?

            public var offSiteAgentIds: String?

            public var offsiteAgentDestinationNumbers: String?

            public var offsiteAgentOriginatorNumbers: String?

            public var outsideNumberReleaseReason: String?

            public var queueTime: Int64?

            public var recordingDuration: Int64?

            public var recordingReady: Bool?

            public var releaseInitiator: String?

            public var releaseReason: String?

            public var releaseTime: Int64?

            public var ringTime: Int64?

            public var satisfactionDescription: String?

            public var satisfactionIndex: Int32?

            public var satisfactionSurveyChannel: String?

            public var satisfactionSurveyOffered: Bool?

            public var skillGroupIds: String?

            public var skillGroupNames: String?

            public var startTime: Int64?

            public var summaryIndex: ListCallDetailRecordsV2ResponseBody.Data.List.SummaryIndex?

            public var talkTime: Int64?

            public var transferCount: Int64?

            public var waitTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.analyticsReport?.validate()
                try self.summaryIndex?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessChannelName != nil {
                    map["AccessChannelName"] = self.accessChannelName!
                }
                if self.accessChannelType != nil {
                    map["AccessChannelType"] = self.accessChannelType!
                }
                if self.accessChannelUserId != nil {
                    map["AccessChannelUserId"] = self.accessChannelUserId!
                }
                if self.accessChannelUserName != nil {
                    map["AccessChannelUserName"] = self.accessChannelUserName!
                }
                if self.additionalBroker != nil {
                    map["AdditionalBroker"] = self.additionalBroker!
                }
                if self.agentIds != nil {
                    map["AgentIds"] = self.agentIds!
                }
                if self.agentNames != nil {
                    map["AgentNames"] = self.agentNames!
                }
                if self.analyticsReport != nil {
                    map["AnalyticsReport"] = self.analyticsReport?.toMap()
                }
                if self.analyticsReportReady != nil {
                    map["AnalyticsReportReady"] = self.analyticsReportReady!
                }
                if self.broker != nil {
                    map["Broker"] = self.broker!
                }
                if self.callDuration != nil {
                    map["CallDuration"] = self.callDuration!
                }
                if self.callIds != nil {
                    map["CallIds"] = self.callIds!
                }
                if self.calledNumber != nil {
                    map["CalledNumber"] = self.calledNumber!
                }
                if self.calleeLocation != nil {
                    map["CalleeLocation"] = self.calleeLocation!
                }
                if self.callerLocation != nil {
                    map["CallerLocation"] = self.callerLocation!
                }
                if self.callingNumber != nil {
                    map["CallingNumber"] = self.callingNumber!
                }
                if self.clientAppName != nil {
                    map["ClientAppName"] = self.clientAppName!
                }
                if self.clientIpAddress != nil {
                    map["ClientIpAddress"] = self.clientIpAddress!
                }
                if self.clientLocation != nil {
                    map["ClientLocation"] = self.clientLocation!
                }
                if self.clientUserAgent != nil {
                    map["ClientUserAgent"] = self.clientUserAgent!
                }
                if self.contactDisposition != nil {
                    map["ContactDisposition"] = self.contactDisposition!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactType != nil {
                    map["ContactType"] = self.contactType!
                }
                if self.dialingTime != nil {
                    map["DialingTime"] = self.dialingTime!
                }
                if self.earlyMediaState != nil {
                    map["EarlyMediaState"] = self.earlyMediaState!
                }
                if self.earlyMediaText != nil {
                    map["EarlyMediaText"] = self.earlyMediaText!
                }
                if self.establishedTime != nil {
                    map["EstablishedTime"] = self.establishedTime!
                }
                if self.firstResponseTime != nil {
                    map["FirstResponseTime"] = self.firstResponseTime!
                }
                if self.heldTime != nil {
                    map["HeldTime"] = self.heldTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.ivrTime != nil {
                    map["IvrTime"] = self.ivrTime!
                }
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                if self.messagesSent != nil {
                    map["MessagesSent"] = self.messagesSent!
                }
                if self.messagesSentByAgent != nil {
                    map["MessagesSentByAgent"] = self.messagesSentByAgent!
                }
                if self.messagesSentByCustomer != nil {
                    map["MessagesSentByCustomer"] = self.messagesSentByCustomer!
                }
                if self.offSiteAgentIds != nil {
                    map["OffSiteAgentIds"] = self.offSiteAgentIds!
                }
                if self.offsiteAgentDestinationNumbers != nil {
                    map["OffsiteAgentDestinationNumbers"] = self.offsiteAgentDestinationNumbers!
                }
                if self.offsiteAgentOriginatorNumbers != nil {
                    map["OffsiteAgentOriginatorNumbers"] = self.offsiteAgentOriginatorNumbers!
                }
                if self.outsideNumberReleaseReason != nil {
                    map["OutsideNumberReleaseReason"] = self.outsideNumberReleaseReason!
                }
                if self.queueTime != nil {
                    map["QueueTime"] = self.queueTime!
                }
                if self.recordingDuration != nil {
                    map["RecordingDuration"] = self.recordingDuration!
                }
                if self.recordingReady != nil {
                    map["RecordingReady"] = self.recordingReady!
                }
                if self.releaseInitiator != nil {
                    map["ReleaseInitiator"] = self.releaseInitiator!
                }
                if self.releaseReason != nil {
                    map["ReleaseReason"] = self.releaseReason!
                }
                if self.releaseTime != nil {
                    map["ReleaseTime"] = self.releaseTime!
                }
                if self.ringTime != nil {
                    map["RingTime"] = self.ringTime!
                }
                if self.satisfactionDescription != nil {
                    map["SatisfactionDescription"] = self.satisfactionDescription!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveyChannel != nil {
                    map["SatisfactionSurveyChannel"] = self.satisfactionSurveyChannel!
                }
                if self.satisfactionSurveyOffered != nil {
                    map["SatisfactionSurveyOffered"] = self.satisfactionSurveyOffered!
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.skillGroupNames != nil {
                    map["SkillGroupNames"] = self.skillGroupNames!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.summaryIndex != nil {
                    map["SummaryIndex"] = self.summaryIndex?.toMap()
                }
                if self.talkTime != nil {
                    map["TalkTime"] = self.talkTime!
                }
                if self.transferCount != nil {
                    map["TransferCount"] = self.transferCount!
                }
                if self.waitTime != nil {
                    map["WaitTime"] = self.waitTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessChannelName"] as? String {
                    self.accessChannelName = value
                }
                if let value = dict["AccessChannelType"] as? String {
                    self.accessChannelType = value
                }
                if let value = dict["AccessChannelUserId"] as? String {
                    self.accessChannelUserId = value
                }
                if let value = dict["AccessChannelUserName"] as? String {
                    self.accessChannelUserName = value
                }
                if let value = dict["AdditionalBroker"] as? String {
                    self.additionalBroker = value
                }
                if let value = dict["AgentIds"] as? String {
                    self.agentIds = value
                }
                if let value = dict["AgentNames"] as? String {
                    self.agentNames = value
                }
                if let value = dict["AnalyticsReport"] as? [String: Any?] {
                    var model = ListCallDetailRecordsV2ResponseBody.Data.List.AnalyticsReport()
                    model.fromMap(value)
                    self.analyticsReport = model
                }
                if let value = dict["AnalyticsReportReady"] as? Bool {
                    self.analyticsReportReady = value
                }
                if let value = dict["Broker"] as? String {
                    self.broker = value
                }
                if let value = dict["CallDuration"] as? String {
                    self.callDuration = value
                }
                if let value = dict["CallIds"] as? String {
                    self.callIds = value
                }
                if let value = dict["CalledNumber"] as? String {
                    self.calledNumber = value
                }
                if let value = dict["CalleeLocation"] as? String {
                    self.calleeLocation = value
                }
                if let value = dict["CallerLocation"] as? String {
                    self.callerLocation = value
                }
                if let value = dict["CallingNumber"] as? String {
                    self.callingNumber = value
                }
                if let value = dict["ClientAppName"] as? String {
                    self.clientAppName = value
                }
                if let value = dict["ClientIpAddress"] as? String {
                    self.clientIpAddress = value
                }
                if let value = dict["ClientLocation"] as? String {
                    self.clientLocation = value
                }
                if let value = dict["ClientUserAgent"] as? String {
                    self.clientUserAgent = value
                }
                if let value = dict["ContactDisposition"] as? String {
                    self.contactDisposition = value
                }
                if let value = dict["ContactId"] as? String {
                    self.contactId = value
                }
                if let value = dict["ContactType"] as? String {
                    self.contactType = value
                }
                if let value = dict["DialingTime"] as? Int64 {
                    self.dialingTime = value
                }
                if let value = dict["EarlyMediaState"] as? String {
                    self.earlyMediaState = value
                }
                if let value = dict["EarlyMediaText"] as? String {
                    self.earlyMediaText = value
                }
                if let value = dict["EstablishedTime"] as? Int64 {
                    self.establishedTime = value
                }
                if let value = dict["FirstResponseTime"] as? Int64 {
                    self.firstResponseTime = value
                }
                if let value = dict["HeldTime"] as? Int64 {
                    self.heldTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["IvrTime"] as? Int64 {
                    self.ivrTime = value
                }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
                if let value = dict["MessagesSent"] as? Int64 {
                    self.messagesSent = value
                }
                if let value = dict["MessagesSentByAgent"] as? Int64 {
                    self.messagesSentByAgent = value
                }
                if let value = dict["MessagesSentByCustomer"] as? Int64 {
                    self.messagesSentByCustomer = value
                }
                if let value = dict["OffSiteAgentIds"] as? String {
                    self.offSiteAgentIds = value
                }
                if let value = dict["OffsiteAgentDestinationNumbers"] as? String {
                    self.offsiteAgentDestinationNumbers = value
                }
                if let value = dict["OffsiteAgentOriginatorNumbers"] as? String {
                    self.offsiteAgentOriginatorNumbers = value
                }
                if let value = dict["OutsideNumberReleaseReason"] as? String {
                    self.outsideNumberReleaseReason = value
                }
                if let value = dict["QueueTime"] as? Int64 {
                    self.queueTime = value
                }
                if let value = dict["RecordingDuration"] as? Int64 {
                    self.recordingDuration = value
                }
                if let value = dict["RecordingReady"] as? Bool {
                    self.recordingReady = value
                }
                if let value = dict["ReleaseInitiator"] as? String {
                    self.releaseInitiator = value
                }
                if let value = dict["ReleaseReason"] as? String {
                    self.releaseReason = value
                }
                if let value = dict["ReleaseTime"] as? Int64 {
                    self.releaseTime = value
                }
                if let value = dict["RingTime"] as? Int64 {
                    self.ringTime = value
                }
                if let value = dict["SatisfactionDescription"] as? String {
                    self.satisfactionDescription = value
                }
                if let value = dict["SatisfactionIndex"] as? Int32 {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionSurveyChannel"] as? String {
                    self.satisfactionSurveyChannel = value
                }
                if let value = dict["SatisfactionSurveyOffered"] as? Bool {
                    self.satisfactionSurveyOffered = value
                }
                if let value = dict["SkillGroupIds"] as? String {
                    self.skillGroupIds = value
                }
                if let value = dict["SkillGroupNames"] as? String {
                    self.skillGroupNames = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["SummaryIndex"] as? [String: Any?] {
                    var model = ListCallDetailRecordsV2ResponseBody.Data.List.SummaryIndex()
                    model.fromMap(value)
                    self.summaryIndex = model
                }
                if let value = dict["TalkTime"] as? Int64 {
                    self.talkTime = value
                }
                if let value = dict["TransferCount"] as? Int64 {
                    self.transferCount = value
                }
                if let value = dict["WaitTime"] as? Int64 {
                    self.waitTime = value
                }
            }
        }
        public var list: [ListCallDetailRecordsV2ResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListCallDetailRecordsV2ResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListCallDetailRecordsV2ResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListCallDetailRecordsV2ResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCallDetailRecordsV2ResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCallDetailRecordsV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallDetailRecordsV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCallDetailRecordsV2ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCallSummariesRequest : Tea.TeaModel {
    public var contactIdList: [String]?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactIdList != nil {
            map["ContactIdList"] = self.contactIdList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactIdList"] as? [String] {
            self.contactIdList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListCallSummariesShrinkRequest : Tea.TeaModel {
    public var contactIdListShrink: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactIdListShrink != nil {
            map["ContactIdList"] = self.contactIdListShrink!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactIdList"] as? String {
            self.contactIdListShrink = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListCallSummariesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var contactId: String?

        public var context: String?

        public var createdTime: Int64?

        public var creator: String?

        public var editor: String?

        public var ticketId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactId != nil {
                map["ContactId"] = self.contactId!
            }
            if self.context != nil {
                map["Context"] = self.context!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.editor != nil {
                map["Editor"] = self.editor!
            }
            if self.ticketId != nil {
                map["TicketId"] = self.ticketId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactId"] as? String {
                self.contactId = value
            }
            if let value = dict["Context"] as? String {
                self.context = value
            }
            if let value = dict["CreatedTime"] as? Int64 {
                self.createdTime = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Editor"] as? String {
                self.editor = value
            }
            if let value = dict["TicketId"] as? String {
                self.ticketId = value
            }
        }
    }
    public var code: String?

    public var data: [ListCallSummariesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListCallSummariesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListCallSummariesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCallSummariesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallSummariesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCallSummariesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCallTagsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListCallTagsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var instanceId: String?

            public var tagName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.tagName != nil {
                    map["TagName"] = self.tagName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["TagName"] as? String {
                    self.tagName = value
                }
            }
        }
        public var list: [ListCallTagsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListCallTagsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListCallTagsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListCallTagsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCallTagsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCallTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCallTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCampaignTrendingReportRequest : Tea.TeaModel {
    public var campaignId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListCampaignTrendingReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakAgents: Int64?

        public var breakingAgents: Int64?

        public var concurrency: Int64?

        public var datetime: Int64?

        public var loggedInAgents: Int64?

        public var outboundScenarioBreakingAgents: Int64?

        public var outboundScenarioReadyAgents: Int64?

        public var outboundScenarioTalkingAgents: Int64?

        public var outboundScenarioWorkingAgents: Int64?

        public var readyAgents: Int64?

        public var statsTime: Int64?

        public var talkAgents: Int64?

        public var talkingAgents: Int64?

        public var workAgents: Int64?

        public var workingAgents: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakAgents != nil {
                map["BreakAgents"] = self.breakAgents!
            }
            if self.breakingAgents != nil {
                map["BreakingAgents"] = self.breakingAgents!
            }
            if self.concurrency != nil {
                map["Concurrency"] = self.concurrency!
            }
            if self.datetime != nil {
                map["Datetime"] = self.datetime!
            }
            if self.loggedInAgents != nil {
                map["LoggedInAgents"] = self.loggedInAgents!
            }
            if self.outboundScenarioBreakingAgents != nil {
                map["OutboundScenarioBreakingAgents"] = self.outboundScenarioBreakingAgents!
            }
            if self.outboundScenarioReadyAgents != nil {
                map["OutboundScenarioReadyAgents"] = self.outboundScenarioReadyAgents!
            }
            if self.outboundScenarioTalkingAgents != nil {
                map["OutboundScenarioTalkingAgents"] = self.outboundScenarioTalkingAgents!
            }
            if self.outboundScenarioWorkingAgents != nil {
                map["OutboundScenarioWorkingAgents"] = self.outboundScenarioWorkingAgents!
            }
            if self.readyAgents != nil {
                map["ReadyAgents"] = self.readyAgents!
            }
            if self.statsTime != nil {
                map["StatsTime"] = self.statsTime!
            }
            if self.talkAgents != nil {
                map["TalkAgents"] = self.talkAgents!
            }
            if self.talkingAgents != nil {
                map["TalkingAgents"] = self.talkingAgents!
            }
            if self.workAgents != nil {
                map["WorkAgents"] = self.workAgents!
            }
            if self.workingAgents != nil {
                map["WorkingAgents"] = self.workingAgents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakAgents"] as? Int64 {
                self.breakAgents = value
            }
            if let value = dict["BreakingAgents"] as? Int64 {
                self.breakingAgents = value
            }
            if let value = dict["Concurrency"] as? Int64 {
                self.concurrency = value
            }
            if let value = dict["Datetime"] as? Int64 {
                self.datetime = value
            }
            if let value = dict["LoggedInAgents"] as? Int64 {
                self.loggedInAgents = value
            }
            if let value = dict["OutboundScenarioBreakingAgents"] as? Int64 {
                self.outboundScenarioBreakingAgents = value
            }
            if let value = dict["OutboundScenarioReadyAgents"] as? Int64 {
                self.outboundScenarioReadyAgents = value
            }
            if let value = dict["OutboundScenarioTalkingAgents"] as? Int64 {
                self.outboundScenarioTalkingAgents = value
            }
            if let value = dict["OutboundScenarioWorkingAgents"] as? Int64 {
                self.outboundScenarioWorkingAgents = value
            }
            if let value = dict["ReadyAgents"] as? Int64 {
                self.readyAgents = value
            }
            if let value = dict["StatsTime"] as? Int64 {
                self.statsTime = value
            }
            if let value = dict["TalkAgents"] as? Int64 {
                self.talkAgents = value
            }
            if let value = dict["TalkingAgents"] as? Int64 {
                self.talkingAgents = value
            }
            if let value = dict["WorkAgents"] as? Int64 {
                self.workAgents = value
            }
            if let value = dict["WorkingAgents"] as? Int64 {
                self.workingAgents = value
            }
        }
    }
    public var code: String?

    public var data: [ListCampaignTrendingReportResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListCampaignTrendingReportResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListCampaignTrendingReportResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCampaignTrendingReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCampaignTrendingReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCampaignTrendingReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCampaignsRequest : Tea.TeaModel {
    public var actualStartTimeFrom: String?

    public var actualStartTimeTo: String?

    public var instanceId: String?

    public var name: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var planedStartTimeFrom: String?

    public var planedStartTimeTo: String?

    public var queueId: String?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.actualStartTimeFrom != nil {
            map["ActualStartTimeFrom"] = self.actualStartTimeFrom!
        }
        if self.actualStartTimeTo != nil {
            map["ActualStartTimeTo"] = self.actualStartTimeTo!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.planedStartTimeFrom != nil {
            map["PlanedStartTimeFrom"] = self.planedStartTimeFrom!
        }
        if self.planedStartTimeTo != nil {
            map["PlanedStartTimeTo"] = self.planedStartTimeTo!
        }
        if self.queueId != nil {
            map["QueueId"] = self.queueId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ActualStartTimeFrom"] as? String {
            self.actualStartTimeFrom = value
        }
        if let value = dict["ActualStartTimeTo"] as? String {
            self.actualStartTimeTo = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PlanedStartTimeFrom"] as? String {
            self.planedStartTimeFrom = value
        }
        if let value = dict["PlanedStartTimeTo"] as? String {
            self.planedStartTimeTo = value
        }
        if let value = dict["QueueId"] as? String {
            self.queueId = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class ListCampaignsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var actualEndTime: Int64?

            public var actualStartTime: Int64?

            public var campaignId: String?

            public var casesAborted: Int64?

            public var casesConnected: Int64?

            public var casesUncompleted: Int64?

            public var completionRate: Double?

            public var contactFlowId: String?

            public var maxAttemptCount: Int64?

            public var minAttemptInterval: Int64?

            public var name: String?

            public var planedEndTime: Int64?

            public var planedStartTime: Int64?

            public var queueId: String?

            public var queueName: String?

            public var simulation: Bool?

            public var state: String?

            public var strategyParameters: String?

            public var strategyType: String?

            public var totalCases: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.actualEndTime != nil {
                    map["ActualEndTime"] = self.actualEndTime!
                }
                if self.actualStartTime != nil {
                    map["ActualStartTime"] = self.actualStartTime!
                }
                if self.campaignId != nil {
                    map["CampaignId"] = self.campaignId!
                }
                if self.casesAborted != nil {
                    map["CasesAborted"] = self.casesAborted!
                }
                if self.casesConnected != nil {
                    map["CasesConnected"] = self.casesConnected!
                }
                if self.casesUncompleted != nil {
                    map["CasesUncompleted"] = self.casesUncompleted!
                }
                if self.completionRate != nil {
                    map["CompletionRate"] = self.completionRate!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.maxAttemptCount != nil {
                    map["MaxAttemptCount"] = self.maxAttemptCount!
                }
                if self.minAttemptInterval != nil {
                    map["MinAttemptInterval"] = self.minAttemptInterval!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.planedEndTime != nil {
                    map["PlanedEndTime"] = self.planedEndTime!
                }
                if self.planedStartTime != nil {
                    map["PlanedStartTime"] = self.planedStartTime!
                }
                if self.queueId != nil {
                    map["QueueId"] = self.queueId!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.simulation != nil {
                    map["Simulation"] = self.simulation!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.strategyParameters != nil {
                    map["StrategyParameters"] = self.strategyParameters!
                }
                if self.strategyType != nil {
                    map["StrategyType"] = self.strategyType!
                }
                if self.totalCases != nil {
                    map["TotalCases"] = self.totalCases!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ActualEndTime"] as? Int64 {
                    self.actualEndTime = value
                }
                if let value = dict["ActualStartTime"] as? Int64 {
                    self.actualStartTime = value
                }
                if let value = dict["CampaignId"] as? String {
                    self.campaignId = value
                }
                if let value = dict["CasesAborted"] as? Int64 {
                    self.casesAborted = value
                }
                if let value = dict["CasesConnected"] as? Int64 {
                    self.casesConnected = value
                }
                if let value = dict["CasesUncompleted"] as? Int64 {
                    self.casesUncompleted = value
                }
                if let value = dict["CompletionRate"] as? Double {
                    self.completionRate = value
                }
                if let value = dict["ContactFlowId"] as? String {
                    self.contactFlowId = value
                }
                if let value = dict["MaxAttemptCount"] as? Int64 {
                    self.maxAttemptCount = value
                }
                if let value = dict["MinAttemptInterval"] as? Int64 {
                    self.minAttemptInterval = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PlanedEndTime"] as? Int64 {
                    self.planedEndTime = value
                }
                if let value = dict["PlanedStartTime"] as? Int64 {
                    self.planedStartTime = value
                }
                if let value = dict["QueueId"] as? String {
                    self.queueId = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["Simulation"] as? Bool {
                    self.simulation = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["StrategyParameters"] as? String {
                    self.strategyParameters = value
                }
                if let value = dict["StrategyType"] as? String {
                    self.strategyType = value
                }
                if let value = dict["TotalCases"] as? Int64 {
                    self.totalCases = value
                }
            }
        }
        public var list: [ListCampaignsResponseBody.Data.List]?

        public var pageNumber: Int64?

        public var pageSize: Int64?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListCampaignsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListCampaignsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int64 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListCampaignsResponseBody.Data?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCampaignsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListCampaignsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCampaignsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCampaignsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCasesRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var phoneNumber: String?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PhoneNumber"] as? String {
            self.phoneNumber = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class ListCasesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var abandonPhase: String?

            public var abandonType: String?

            public var attemptCount: Int64?

            public var caseId: String?

            public var customVariables: String?

            public var failureReason: String?

            public var phoneNumber: String?

            public var state: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abandonPhase != nil {
                    map["AbandonPhase"] = self.abandonPhase!
                }
                if self.abandonType != nil {
                    map["AbandonType"] = self.abandonType!
                }
                if self.attemptCount != nil {
                    map["AttemptCount"] = self.attemptCount!
                }
                if self.caseId != nil {
                    map["CaseId"] = self.caseId!
                }
                if self.customVariables != nil {
                    map["CustomVariables"] = self.customVariables!
                }
                if self.failureReason != nil {
                    map["FailureReason"] = self.failureReason!
                }
                if self.phoneNumber != nil {
                    map["PhoneNumber"] = self.phoneNumber!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbandonPhase"] as? String {
                    self.abandonPhase = value
                }
                if let value = dict["AbandonType"] as? String {
                    self.abandonType = value
                }
                if let value = dict["AttemptCount"] as? Int64 {
                    self.attemptCount = value
                }
                if let value = dict["CaseId"] as? String {
                    self.caseId = value
                }
                if let value = dict["CustomVariables"] as? String {
                    self.customVariables = value
                }
                if let value = dict["FailureReason"] as? String {
                    self.failureReason = value
                }
                if let value = dict["PhoneNumber"] as? String {
                    self.phoneNumber = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
            }
        }
        public var list: [ListCasesResponseBody.Data.List]?

        public var pageNumber: Int64?

        public var pageSize: Int64?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListCasesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListCasesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int64 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListCasesResponseBody.Data?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCasesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCasesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCasesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCasesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCategoriesRequest : Tea.TeaModel {
    public var categoryId: String?

    public var instanceId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListCategoriesResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCategoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCategoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCategoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCommonTicketFieldsRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListCommonTicketFieldsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createdTime: String?

        public var id: String?

        public var instanceId: String?

        public var properties: [String: DataPropertiesValue]?

        public var updatedTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.properties != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.properties! {
                    tmp[k] = v.toMap()
                }
                map["Properties"] = tmp
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Properties"] as? [String: Any?] {
                var tmp : [String: DataPropertiesValue] = [:]
                for (k, v) in value {
                    if v != nil {
                        var model = DataPropertiesValue()
                        model.fromMap(v as? [String: Any?])
                        tmp[k] = model
                    }
                }
                self.properties = tmp
            }
            if let value = dict["UpdatedTime"] as? String {
                self.updatedTime = value
            }
        }
    }
    public var code: String?

    public var data: ListCommonTicketFieldsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCommonTicketFieldsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCommonTicketFieldsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCommonTicketFieldsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCommonTicketFieldsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListConfigItemsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var objectId: String?

    public var objectType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.objectId != nil {
            map["ObjectId"] = self.objectId!
        }
        if self.objectType != nil {
            map["ObjectType"] = self.objectType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ObjectId"] as? String {
            self.objectId = value
        }
        if let value = dict["ObjectType"] as? String {
            self.objectType = value
        }
    }
}

public class ListConfigItemsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var name: String?

        public var objectId: String?

        public var objectType: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.objectId != nil {
                map["ObjectId"] = self.objectId!
            }
            if self.objectType != nil {
                map["ObjectType"] = self.objectType!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ObjectId"] as? String {
                self.objectId = value
            }
            if let value = dict["ObjectType"] as? String {
                self.objectType = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var code: String?

    public var data: [ListConfigItemsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListConfigItemsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListConfigItemsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListConfigItemsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListConfigItemsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListConfigItemsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListContactFlowsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var orderByField: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var sortOrder: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderByField != nil {
            map["OrderByField"] = self.orderByField!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderByField"] as? String {
            self.orderByField = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListContactFlowsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var contactFlowId: String?

            public var createdTime: String?

            public var definition: String?

            public var description_: String?

            public var draftId: String?

            public var editor: String?

            public var instanceId: String?

            public var name: String?

            public var numberList: [String]?

            public var published: Bool?

            public var type: String?

            public var updatedTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.definition != nil {
                    map["Definition"] = self.definition!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.draftId != nil {
                    map["DraftId"] = self.draftId!
                }
                if self.editor != nil {
                    map["Editor"] = self.editor!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.numberList != nil {
                    map["NumberList"] = self.numberList!
                }
                if self.published != nil {
                    map["Published"] = self.published!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContactFlowId"] as? String {
                    self.contactFlowId = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Definition"] as? String {
                    self.definition = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DraftId"] as? String {
                    self.draftId = value
                }
                if let value = dict["Editor"] as? String {
                    self.editor = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NumberList"] as? [String] {
                    self.numberList = value
                }
                if let value = dict["Published"] as? Bool {
                    self.published = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UpdatedTime"] as? String {
                    self.updatedTime = value
                }
            }
        }
        public var list: [ListContactFlowsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListContactFlowsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListContactFlowsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListContactFlowsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListContactFlowsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListContactFlowsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListContactFlowsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListContactFlowsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCustomCallTaggingRequest : Tea.TeaModel {
    public var callTagNameList: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callTagNameList != nil {
            map["CallTagNameList"] = self.callTagNameList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallTagNameList"] as? String {
            self.callTagNameList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ListCustomCallTaggingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class CallTagList : Tea.TeaModel {
                public var instanceId: String?

                public var tagName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.tagName != nil {
                        map["TagName"] = self.tagName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["TagName"] as? String {
                        self.tagName = value
                    }
                }
            }
            public var callTagList: [ListCustomCallTaggingResponseBody.Data.List.CallTagList]?

            public var creator: String?

            public var description_: String?

            public var instanceId: String?

            public var number: String?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callTagList != nil {
                    var tmp : [Any] = []
                    for k in self.callTagList! {
                        tmp.append(k.toMap())
                    }
                    map["CallTagList"] = tmp
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallTagList"] as? [Any?] {
                    var tmp : [ListCustomCallTaggingResponseBody.Data.List.CallTagList] = []
                    for v in value {
                        if v != nil {
                            var model = ListCustomCallTaggingResponseBody.Data.List.CallTagList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.callTagList = tmp
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var list: [ListCustomCallTaggingResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListCustomCallTaggingResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListCustomCallTaggingResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListCustomCallTaggingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListCustomCallTaggingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListCustomCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCustomCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCustomCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDevicesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ListDevicesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var callId: String?

        public var contact: String?

        public var deviceId: String?

        public var deviceType: String?

        public var expires: Int64?

        public var extension_: String?

        public var instanceId: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callId != nil {
                map["CallId"] = self.callId!
            }
            if self.contact != nil {
                map["Contact"] = self.contact!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.expires != nil {
                map["Expires"] = self.expires!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallId"] as? String {
                self.callId = value
            }
            if let value = dict["Contact"] as? String {
                self.contact = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["Expires"] as? Int64 {
                self.expires = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var code: String?

    public var data: [ListDevicesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListDevicesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListDevicesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDoNotCallNumbersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var scope: String?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ListDoNotCallNumbersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var createTime: Int64?

            public var createdTime: Int64?

            public var creator: String?

            public var number: String?

            public var remark: String?

            public var scope: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.scope != nil {
                    map["Scope"] = self.scope!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["CreatedTime"] as? Int64 {
                    self.createdTime = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["Scope"] as? String {
                    self.scope = value
                }
            }
        }
        public var list: [ListDoNotCallNumbersResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListDoNotCallNumbersResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListDoNotCallNumbersResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListDoNotCallNumbersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListDoNotCallNumbersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDoNotCallNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDoNotCallNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDoNotCallNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDocumentsRequest : Tea.TeaModel {
    public class Sorts : Tea.TeaModel {
        public var order: String?

        public var propertyName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.order != nil {
                map["Order"] = self.order!
            }
            if self.propertyName != nil {
                map["PropertyName"] = self.propertyName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Order"] as? String {
                self.order = value
            }
            if let value = dict["PropertyName"] as? String {
                self.propertyName = value
            }
        }
    }
    public var instanceId: String?

    public var nextPageToken: String?

    public var pageSize: Int32?

    public var requestId: String?

    public var schemaId: String?

    public var searchPattern: String?

    public var sorts: [ListDocumentsRequest.Sorts]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.nextPageToken != nil {
            map["NextPageToken"] = self.nextPageToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.sorts != nil {
            var tmp : [Any] = []
            for k in self.sorts! {
                tmp.append(k.toMap())
            }
            map["Sorts"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NextPageToken"] as? String {
            self.nextPageToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["Sorts"] as? [Any?] {
            var tmp : [ListDocumentsRequest.Sorts] = []
            for v in value {
                if v != nil {
                    var model = ListDocumentsRequest.Sorts()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sorts = tmp
        }
    }
}

public class ListDocumentsShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var nextPageToken: String?

    public var pageSize: Int32?

    public var requestId: String?

    public var schemaId: String?

    public var searchPattern: String?

    public var sortsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.nextPageToken != nil {
            map["NextPageToken"] = self.nextPageToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.sortsShrink != nil {
            map["Sorts"] = self.sortsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NextPageToken"] as? String {
            self.nextPageToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["Sorts"] as? String {
            self.sortsShrink = value
        }
    }
}

public class ListDocumentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Schema : Tea.TeaModel {
            public var createdTime: String?

            public var deleted: Bool?

            public var description_: String?

            public var id: String?

            public var instanceId: String?

            public var properties: [String: DataSchemaPropertiesValue]?

            public var updatedTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.deleted != nil {
                    map["Deleted"] = self.deleted!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.properties != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.properties! {
                        tmp[k] = v.toMap()
                    }
                    map["Properties"] = tmp
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Deleted"] as? Bool {
                    self.deleted = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var tmp : [String: DataSchemaPropertiesValue] = [:]
                    for (k, v) in value {
                        if v != nil {
                            var model = DataSchemaPropertiesValue()
                            model.fromMap(v as? [String: Any?])
                            tmp[k] = model
                        }
                    }
                    self.properties = tmp
                }
                if let value = dict["UpdatedTime"] as? String {
                    self.updatedTime = value
                }
            }
        }
        public var documents: [[String: Any]]?

        public var nextPageToken: String?

        public var schema: ListDocumentsResponseBody.Data.Schema?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.schema?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.documents != nil {
                map["Documents"] = self.documents!
            }
            if self.nextPageToken != nil {
                map["NextPageToken"] = self.nextPageToken!
            }
            if self.schema != nil {
                map["Schema"] = self.schema?.toMap()
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Documents"] as? [[String: Any]] {
                self.documents = value
            }
            if let value = dict["NextPageToken"] as? String {
                self.nextPageToken = value
            }
            if let value = dict["Schema"] as? [String: Any?] {
                var model = ListDocumentsResponseBody.Data.Schema()
                model.fromMap(value)
                self.schema = model
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListDocumentsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListDocumentsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDocumentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDocumentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDocumentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListFlashSmsApplicationsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var name: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var providerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.providerId != nil {
            map["ProviderId"] = self.providerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProviderId"] as? String {
            self.providerId = value
        }
    }
}

public class ListFlashSmsApplicationsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var applicationId: String?

            public var instanceId: String?

            public var name: String?

            public var providerId: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicationId != nil {
                    map["ApplicationId"] = self.applicationId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.providerId != nil {
                    map["ProviderId"] = self.providerId!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicationId"] as? String {
                    self.applicationId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ProviderId"] as? String {
                    self.providerId = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var list: [ListFlashSmsApplicationsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListFlashSmsApplicationsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListFlashSmsApplicationsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListFlashSmsApplicationsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListFlashSmsApplicationsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListFlashSmsApplicationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListFlashSmsApplicationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListFlashSmsApplicationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListFlashSmsTemplatesRequest : Tea.TeaModel {
    public var applicationId: String?

    public var instanceId: String?

    public var providerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationId != nil {
            map["ApplicationId"] = self.applicationId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.providerId != nil {
            map["ProviderId"] = self.providerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationId"] as? String {
            self.applicationId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ProviderId"] as? String {
            self.providerId = value
        }
    }
}

public class ListFlashSmsTemplatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var templateId: String?

        public var templateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
        }
    }
    public var code: String?

    public var data: [ListFlashSmsTemplatesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListFlashSmsTemplatesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListFlashSmsTemplatesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListFlashSmsTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListFlashSmsTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListFlashSmsTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListGroupChatMessagesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public var nextPageToken: String?

    public var pageSize: Int32?

    public var sortOrder: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.nextPageToken != nil {
            map["NextPageToken"] = self.nextPageToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["NextPageToken"] as? String {
            self.nextPageToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
    }
}

public class ListGroupChatMessagesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Messages : Tea.TeaModel {
            public var content: String?

            public var jobId: String?

            public var recalled: Bool?

            public var senderAvatarUrl: String?

            public var senderId: String?

            public var senderName: String?

            public var senderType: String?

            public var timestamp: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.recalled != nil {
                    map["Recalled"] = self.recalled!
                }
                if self.senderAvatarUrl != nil {
                    map["SenderAvatarUrl"] = self.senderAvatarUrl!
                }
                if self.senderId != nil {
                    map["SenderId"] = self.senderId!
                }
                if self.senderName != nil {
                    map["SenderName"] = self.senderName!
                }
                if self.senderType != nil {
                    map["SenderType"] = self.senderType!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Recalled"] as? Bool {
                    self.recalled = value
                }
                if let value = dict["SenderAvatarUrl"] as? String {
                    self.senderAvatarUrl = value
                }
                if let value = dict["SenderId"] as? String {
                    self.senderId = value
                }
                if let value = dict["SenderName"] as? String {
                    self.senderName = value
                }
                if let value = dict["SenderType"] as? String {
                    self.senderType = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
            }
        }
        public var messages: [ListGroupChatMessagesResponseBody.Data.Messages]?

        public var nextPageToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.messages != nil {
                var tmp : [Any] = []
                for k in self.messages! {
                    tmp.append(k.toMap())
                }
                map["Messages"] = tmp
            }
            if self.nextPageToken != nil {
                map["NextPageToken"] = self.nextPageToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Messages"] as? [Any?] {
                var tmp : [ListGroupChatMessagesResponseBody.Data.Messages] = []
                for v in value {
                    if v != nil {
                        var model = ListGroupChatMessagesResponseBody.Data.Messages()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.messages = tmp
            }
            if let value = dict["NextPageToken"] as? String {
                self.nextPageToken = value
            }
        }
    }
    public var code: String?

    public var data: ListGroupChatMessagesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListGroupChatMessagesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListGroupChatMessagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListGroupChatMessagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListGroupChatMessagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHistoricalAgentReportRequest : Tea.TeaModel {
    public var agentIdList: String?

    public var instanceId: String?

    public var mediaType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIdList != nil {
            map["AgentIdList"] = self.agentIdList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentIdList"] as? String {
            self.agentIdList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["StopTime"] as? Int64 {
            self.stopTime = value
        }
    }
}

public class ListHistoricalAgentReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Back2Back : Tea.TeaModel {
                public var agentHandleRate: String?

                public var answerRate: String?

                public var averageCustomerRingTime: String?

                public var averageRingTime: String?

                public var averageTalkTime: String?

                public var callsAgentHandled: String?

                public var callsAnswered: String?

                public var callsCustomerAnswered: String?

                public var callsDialed: String?

                public var customerAnswerRate: String?

                public var maxCustomerRingTime: String?

                public var maxRingTime: String?

                public var maxTalkTime: String?

                public var totalCustomerRingTime: String?

                public var totalRingTime: String?

                public var totalTalkTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentHandleRate != nil {
                        map["AgentHandleRate"] = self.agentHandleRate!
                    }
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageCustomerRingTime != nil {
                        map["AverageCustomerRingTime"] = self.averageCustomerRingTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.callsAgentHandled != nil {
                        map["CallsAgentHandled"] = self.callsAgentHandled!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsCustomerAnswered != nil {
                        map["CallsCustomerAnswered"] = self.callsCustomerAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.customerAnswerRate != nil {
                        map["CustomerAnswerRate"] = self.customerAnswerRate!
                    }
                    if self.maxCustomerRingTime != nil {
                        map["MaxCustomerRingTime"] = self.maxCustomerRingTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.totalCustomerRingTime != nil {
                        map["TotalCustomerRingTime"] = self.totalCustomerRingTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AgentHandleRate"] as? String {
                        self.agentHandleRate = value
                    }
                    if let value = dict["AnswerRate"] as? String {
                        self.answerRate = value
                    }
                    if let value = dict["AverageCustomerRingTime"] as? String {
                        self.averageCustomerRingTime = value
                    }
                    if let value = dict["AverageRingTime"] as? String {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? String {
                        self.averageTalkTime = value
                    }
                    if let value = dict["CallsAgentHandled"] as? String {
                        self.callsAgentHandled = value
                    }
                    if let value = dict["CallsAnswered"] as? String {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsCustomerAnswered"] as? String {
                        self.callsCustomerAnswered = value
                    }
                    if let value = dict["CallsDialed"] as? String {
                        self.callsDialed = value
                    }
                    if let value = dict["CustomerAnswerRate"] as? String {
                        self.customerAnswerRate = value
                    }
                    if let value = dict["MaxCustomerRingTime"] as? String {
                        self.maxCustomerRingTime = value
                    }
                    if let value = dict["MaxRingTime"] as? String {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? String {
                        self.maxTalkTime = value
                    }
                    if let value = dict["TotalCustomerRingTime"] as? String {
                        self.totalCustomerRingTime = value
                    }
                    if let value = dict["TotalRingTime"] as? String {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? String {
                        self.totalTalkTime = value
                    }
                }
            }
            public class Inbound : Tea.TeaModel {
                public class AccessChannelTypeDetails : Tea.TeaModel {
                    public var accessChannelType: String?

                    public var callsOffered: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.accessChannelType != nil {
                            map["AccessChannelType"] = self.accessChannelType!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AccessChannelType"] as? String {
                            self.accessChannelType = value
                        }
                        if let value = dict["CallsOffered"] as? Int64 {
                            self.callsOffered = value
                        }
                    }
                }
                public var accessChannelTypeDetails: [ListHistoricalAgentReportResponseBody.Data.List.Inbound.AccessChannelTypeDetails]?

                public var averageFirstResponseTime: Double?

                public var averageHoldTime: Double?

                public var averageResponseTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var callsAttendedTransferIn: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferIn: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsHandled: Int64?

                public var callsHold: Int64?

                public var callsOffered: Int64?

                public var callsRinged: Int64?

                public var handleRate: Double?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var serviceLevel15: Double?

                public var totalHoldTime: Int64?

                public var totalMessagesSent: Int64?

                public var totalMessagesSentByAgent: Int64?

                public var totalMessagesSentByCustomer: String?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accessChannelTypeDetails != nil {
                        var tmp : [Any] = []
                        for k in self.accessChannelTypeDetails! {
                            tmp.append(k.toMap())
                        }
                        map["AccessChannelTypeDetails"] = tmp
                    }
                    if self.averageFirstResponseTime != nil {
                        map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageResponseTime != nil {
                        map["AverageResponseTime"] = self.averageResponseTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAttendedTransferIn != nil {
                        map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferIn != nil {
                        map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsHold != nil {
                        map["CallsHold"] = self.callsHold!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsRinged != nil {
                        map["CallsRinged"] = self.callsRinged!
                    }
                    if self.handleRate != nil {
                        map["HandleRate"] = self.handleRate!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.serviceLevel15 != nil {
                        map["ServiceLevel15"] = self.serviceLevel15!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalMessagesSent != nil {
                        map["TotalMessagesSent"] = self.totalMessagesSent!
                    }
                    if self.totalMessagesSentByAgent != nil {
                        map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                    }
                    if self.totalMessagesSentByCustomer != nil {
                        map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccessChannelTypeDetails"] as? [Any?] {
                        var tmp : [ListHistoricalAgentReportResponseBody.Data.List.Inbound.AccessChannelTypeDetails] = []
                        for v in value {
                            if v != nil {
                                var model = ListHistoricalAgentReportResponseBody.Data.List.Inbound.AccessChannelTypeDetails()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.accessChannelTypeDetails = tmp
                    }
                    if let value = dict["AverageFirstResponseTime"] as? Double {
                        self.averageFirstResponseTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageResponseTime"] as? Double {
                        self.averageResponseTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                        self.callsAttendedTransferIn = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferIn"] as? Int64 {
                        self.callsBlindTransferIn = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsHold"] as? Int64 {
                        self.callsHold = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsRinged"] as? Int64 {
                        self.callsRinged = value
                    }
                    if let value = dict["HandleRate"] as? Double {
                        self.handleRate = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["ServiceLevel15"] as? Double {
                        self.serviceLevel15 = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalMessagesSent"] as? Int64 {
                        self.totalMessagesSent = value
                    }
                    if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                        self.totalMessagesSentByAgent = value
                    }
                    if let value = dict["TotalMessagesSentByCustomer"] as? String {
                        self.totalMessagesSentByCustomer = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Internal_ : Tea.TeaModel {
                public var averageTalkTime: Double?

                public var callsAnswered: Int64?

                public var callsDialed: Int64?

                public var callsHandled: Int64?

                public var callsOffered: Int64?

                public var callsTalked: Int64?

                public var maxTalkTime: Int64?

                public var totalTalkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsTalked != nil {
                        map["CallsTalked"] = self.callsTalked!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsTalked"] as? Int64 {
                        self.callsTalked = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                }
            }
            public class Outbound : Tea.TeaModel {
                public var answerRate: Double?

                public var averageDialingTime: Double?

                public var averageHoldTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var callsAnswered: Int64?

                public var callsAttendedTransferIn: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferIn: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsDialed: Int64?

                public var callsHold: Int64?

                public var callsRinged: Int64?

                public var maxDialingTime: Int64?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalDialingTime: Int64?

                public var totalHoldTime: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageDialingTime != nil {
                        map["AverageDialingTime"] = self.averageDialingTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsAttendedTransferIn != nil {
                        map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferIn != nil {
                        map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.callsHold != nil {
                        map["CallsHold"] = self.callsHold!
                    }
                    if self.callsRinged != nil {
                        map["CallsRinged"] = self.callsRinged!
                    }
                    if self.maxDialingTime != nil {
                        map["MaxDialingTime"] = self.maxDialingTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalDialingTime != nil {
                        map["TotalDialingTime"] = self.totalDialingTime!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageDialingTime"] as? Double {
                        self.averageDialingTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                        self.callsAttendedTransferIn = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferIn"] as? Int64 {
                        self.callsBlindTransferIn = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CallsHold"] as? Int64 {
                        self.callsHold = value
                    }
                    if let value = dict["CallsRinged"] as? Int64 {
                        self.callsRinged = value
                    }
                    if let value = dict["MaxDialingTime"] as? Int64 {
                        self.maxDialingTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalDialingTime"] as? Int64 {
                        self.totalDialingTime = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Overall : Tea.TeaModel {
                public class BreakCodeDetailList : Tea.TeaModel {
                    public var breakCode: String?

                    public var count: Int64?

                    public var duration: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.breakCode != nil {
                            map["BreakCode"] = self.breakCode!
                        }
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.duration != nil {
                            map["Duration"] = self.duration!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BreakCode"] as? String {
                            self.breakCode = value
                        }
                        if let value = dict["Count"] as? Int64 {
                            self.count = value
                        }
                        if let value = dict["Duration"] as? Int64 {
                            self.duration = value
                        }
                    }
                }
                public var averageBreakTime: Double?

                public var averageHoldTime: Double?

                public var averageReadyTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var breakCodeDetailList: [ListHistoricalAgentReportResponseBody.Data.List.Overall.BreakCodeDetailList]?

                public var firstCheckInTime: Int64?

                public var lastCheckOutTime: Int64?

                public var maxBreakTime: Int64?

                public var maxHoldTime: Int64?

                public var maxReadyTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var occupancyRate: Double?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalBreakTime: Int64?

                public var totalCalls: Int64?

                public var totalHoldTime: Int64?

                public var totalLoggedInTime: Int64?

                public var totalOffSiteLoggedInTime: Int64?

                public var totalOffSiteOnlineTime: Int64?

                public var totalOfficePhoneLoggedInTime: Int64?

                public var totalOfficePhoneOnlineTime: Int64?

                public var totalOnSiteLoggedInTime: Int64?

                public var totalOnSiteOnlineTime: Int64?

                public var totalOutboundScenarioLoggedInTime: Int64?

                public var totalOutboundScenarioReadyTime: Int64?

                public var totalOutboundScenarioTime: Int64?

                public var totalReadyTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageBreakTime != nil {
                        map["AverageBreakTime"] = self.averageBreakTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageReadyTime != nil {
                        map["AverageReadyTime"] = self.averageReadyTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.breakCodeDetailList != nil {
                        var tmp : [Any] = []
                        for k in self.breakCodeDetailList! {
                            tmp.append(k.toMap())
                        }
                        map["BreakCodeDetailList"] = tmp
                    }
                    if self.firstCheckInTime != nil {
                        map["FirstCheckInTime"] = self.firstCheckInTime!
                    }
                    if self.lastCheckOutTime != nil {
                        map["LastCheckOutTime"] = self.lastCheckOutTime!
                    }
                    if self.maxBreakTime != nil {
                        map["MaxBreakTime"] = self.maxBreakTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxReadyTime != nil {
                        map["MaxReadyTime"] = self.maxReadyTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.occupancyRate != nil {
                        map["OccupancyRate"] = self.occupancyRate!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalBreakTime != nil {
                        map["TotalBreakTime"] = self.totalBreakTime!
                    }
                    if self.totalCalls != nil {
                        map["TotalCalls"] = self.totalCalls!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalLoggedInTime != nil {
                        map["TotalLoggedInTime"] = self.totalLoggedInTime!
                    }
                    if self.totalOffSiteLoggedInTime != nil {
                        map["TotalOffSiteLoggedInTime"] = self.totalOffSiteLoggedInTime!
                    }
                    if self.totalOffSiteOnlineTime != nil {
                        map["TotalOffSiteOnlineTime"] = self.totalOffSiteOnlineTime!
                    }
                    if self.totalOfficePhoneLoggedInTime != nil {
                        map["TotalOfficePhoneLoggedInTime"] = self.totalOfficePhoneLoggedInTime!
                    }
                    if self.totalOfficePhoneOnlineTime != nil {
                        map["TotalOfficePhoneOnlineTime"] = self.totalOfficePhoneOnlineTime!
                    }
                    if self.totalOnSiteLoggedInTime != nil {
                        map["TotalOnSiteLoggedInTime"] = self.totalOnSiteLoggedInTime!
                    }
                    if self.totalOnSiteOnlineTime != nil {
                        map["TotalOnSiteOnlineTime"] = self.totalOnSiteOnlineTime!
                    }
                    if self.totalOutboundScenarioLoggedInTime != nil {
                        map["TotalOutboundScenarioLoggedInTime"] = self.totalOutboundScenarioLoggedInTime!
                    }
                    if self.totalOutboundScenarioReadyTime != nil {
                        map["TotalOutboundScenarioReadyTime"] = self.totalOutboundScenarioReadyTime!
                    }
                    if self.totalOutboundScenarioTime != nil {
                        map["TotalOutboundScenarioTime"] = self.totalOutboundScenarioTime!
                    }
                    if self.totalReadyTime != nil {
                        map["TotalReadyTime"] = self.totalReadyTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageBreakTime"] as? Double {
                        self.averageBreakTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageReadyTime"] as? Double {
                        self.averageReadyTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["BreakCodeDetailList"] as? [Any?] {
                        var tmp : [ListHistoricalAgentReportResponseBody.Data.List.Overall.BreakCodeDetailList] = []
                        for v in value {
                            if v != nil {
                                var model = ListHistoricalAgentReportResponseBody.Data.List.Overall.BreakCodeDetailList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.breakCodeDetailList = tmp
                    }
                    if let value = dict["FirstCheckInTime"] as? Int64 {
                        self.firstCheckInTime = value
                    }
                    if let value = dict["LastCheckOutTime"] as? Int64 {
                        self.lastCheckOutTime = value
                    }
                    if let value = dict["MaxBreakTime"] as? Int64 {
                        self.maxBreakTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxReadyTime"] as? Int64 {
                        self.maxReadyTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["OccupancyRate"] as? Double {
                        self.occupancyRate = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalBreakTime"] as? Int64 {
                        self.totalBreakTime = value
                    }
                    if let value = dict["TotalCalls"] as? Int64 {
                        self.totalCalls = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalLoggedInTime"] as? Int64 {
                        self.totalLoggedInTime = value
                    }
                    if let value = dict["TotalOffSiteLoggedInTime"] as? Int64 {
                        self.totalOffSiteLoggedInTime = value
                    }
                    if let value = dict["TotalOffSiteOnlineTime"] as? Int64 {
                        self.totalOffSiteOnlineTime = value
                    }
                    if let value = dict["TotalOfficePhoneLoggedInTime"] as? Int64 {
                        self.totalOfficePhoneLoggedInTime = value
                    }
                    if let value = dict["TotalOfficePhoneOnlineTime"] as? Int64 {
                        self.totalOfficePhoneOnlineTime = value
                    }
                    if let value = dict["TotalOnSiteLoggedInTime"] as? Int64 {
                        self.totalOnSiteLoggedInTime = value
                    }
                    if let value = dict["TotalOnSiteOnlineTime"] as? Int64 {
                        self.totalOnSiteOnlineTime = value
                    }
                    if let value = dict["TotalOutboundScenarioLoggedInTime"] as? Int64 {
                        self.totalOutboundScenarioLoggedInTime = value
                    }
                    if let value = dict["TotalOutboundScenarioReadyTime"] as? Int64 {
                        self.totalOutboundScenarioReadyTime = value
                    }
                    if let value = dict["TotalOutboundScenarioTime"] as? Int64 {
                        self.totalOutboundScenarioTime = value
                    }
                    if let value = dict["TotalReadyTime"] as? Int64 {
                        self.totalReadyTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public var agentId: String?

            public var agentName: String?

            public var back2Back: ListHistoricalAgentReportResponseBody.Data.List.Back2Back?

            public var displayId: String?

            public var inbound: ListHistoricalAgentReportResponseBody.Data.List.Inbound?

            public var internal_: ListHistoricalAgentReportResponseBody.Data.List.Internal_?

            public var outbound: ListHistoricalAgentReportResponseBody.Data.List.Outbound?

            public var overall: ListHistoricalAgentReportResponseBody.Data.List.Overall?

            public var skillGroupIds: String?

            public var skillGroupNames: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.back2Back?.validate()
                try self.inbound?.validate()
                try self.internal_?.validate()
                try self.outbound?.validate()
                try self.overall?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.back2Back != nil {
                    map["Back2Back"] = self.back2Back?.toMap()
                }
                if self.displayId != nil {
                    map["DisplayId"] = self.displayId!
                }
                if self.inbound != nil {
                    map["Inbound"] = self.inbound?.toMap()
                }
                if self.internal_ != nil {
                    map["Internal"] = self.internal_?.toMap()
                }
                if self.outbound != nil {
                    map["Outbound"] = self.outbound?.toMap()
                }
                if self.overall != nil {
                    map["Overall"] = self.overall?.toMap()
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.skillGroupNames != nil {
                    map["SkillGroupNames"] = self.skillGroupNames!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentName"] as? String {
                    self.agentName = value
                }
                if let value = dict["Back2Back"] as? [String: Any?] {
                    var model = ListHistoricalAgentReportResponseBody.Data.List.Back2Back()
                    model.fromMap(value)
                    self.back2Back = model
                }
                if let value = dict["DisplayId"] as? String {
                    self.displayId = value
                }
                if let value = dict["Inbound"] as? [String: Any?] {
                    var model = ListHistoricalAgentReportResponseBody.Data.List.Inbound()
                    model.fromMap(value)
                    self.inbound = model
                }
                if let value = dict["Internal"] as? [String: Any?] {
                    var model = ListHistoricalAgentReportResponseBody.Data.List.Internal_()
                    model.fromMap(value)
                    self.internal_ = model
                }
                if let value = dict["Outbound"] as? [String: Any?] {
                    var model = ListHistoricalAgentReportResponseBody.Data.List.Outbound()
                    model.fromMap(value)
                    self.outbound = model
                }
                if let value = dict["Overall"] as? [String: Any?] {
                    var model = ListHistoricalAgentReportResponseBody.Data.List.Overall()
                    model.fromMap(value)
                    self.overall = model
                }
                if let value = dict["SkillGroupIds"] as? String {
                    self.skillGroupIds = value
                }
                if let value = dict["SkillGroupNames"] as? String {
                    self.skillGroupNames = value
                }
            }
        }
        public var list: [ListHistoricalAgentReportResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListHistoricalAgentReportResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListHistoricalAgentReportResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListHistoricalAgentReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListHistoricalAgentReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListHistoricalAgentReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHistoricalAgentReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHistoricalAgentReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHistoricalAgentSkillGroupReportRequest : Tea.TeaModel {
    public var agentIdList: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var mediaType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIdList: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIdList != nil {
            map["AgentIdList"] = self.agentIdList!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentIdList"] as? String {
            self.agentIdList = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListHistoricalAgentSkillGroupReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Back2Back : Tea.TeaModel {
                public var agentAnswerRate: Double?

                public var agentHandleRate: Double?

                public var answerRate: Double?

                public var averageCustomerRingTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Int64?

                public var callsAgentHandled: Int64?

                public var callsAnswered: Int64?

                public var callsCustomerAnswered: Int64?

                public var callsCustomerHandled: Int64?

                public var callsDialed: Int64?

                public var customerAnswerRate: Double?

                public var customerHandleRate: Double?

                public var maxCustomerRingTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var totalCustomerRingTime: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentAnswerRate != nil {
                        map["AgentAnswerRate"] = self.agentAnswerRate!
                    }
                    if self.agentHandleRate != nil {
                        map["AgentHandleRate"] = self.agentHandleRate!
                    }
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageCustomerRingTime != nil {
                        map["AverageCustomerRingTime"] = self.averageCustomerRingTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.callsAgentHandled != nil {
                        map["CallsAgentHandled"] = self.callsAgentHandled!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsCustomerAnswered != nil {
                        map["CallsCustomerAnswered"] = self.callsCustomerAnswered!
                    }
                    if self.callsCustomerHandled != nil {
                        map["CallsCustomerHandled"] = self.callsCustomerHandled!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.customerAnswerRate != nil {
                        map["CustomerAnswerRate"] = self.customerAnswerRate!
                    }
                    if self.customerHandleRate != nil {
                        map["CustomerHandleRate"] = self.customerHandleRate!
                    }
                    if self.maxCustomerRingTime != nil {
                        map["MaxCustomerRingTime"] = self.maxCustomerRingTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.totalCustomerRingTime != nil {
                        map["TotalCustomerRingTime"] = self.totalCustomerRingTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AgentAnswerRate"] as? Double {
                        self.agentAnswerRate = value
                    }
                    if let value = dict["AgentHandleRate"] as? Double {
                        self.agentHandleRate = value
                    }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageCustomerRingTime"] as? Double {
                        self.averageCustomerRingTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["CallsAgentHandled"] as? Int64 {
                        self.callsAgentHandled = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsCustomerAnswered"] as? Int64 {
                        self.callsCustomerAnswered = value
                    }
                    if let value = dict["CallsCustomerHandled"] as? Int64 {
                        self.callsCustomerHandled = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CustomerAnswerRate"] as? Double {
                        self.customerAnswerRate = value
                    }
                    if let value = dict["CustomerHandleRate"] as? Double {
                        self.customerHandleRate = value
                    }
                    if let value = dict["MaxCustomerRingTime"] as? Int64 {
                        self.maxCustomerRingTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["TotalCustomerRingTime"] as? Int64 {
                        self.totalCustomerRingTime = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                }
            }
            public class Inbound : Tea.TeaModel {
                public var averageFirstResponseTime: Double?

                public var averageHoldTime: Double?

                public var averageResponseTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var callsAttendedTransferIn: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferIn: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsHandled: Int64?

                public var callsHold: Int64?

                public var callsOffered: Int64?

                public var callsRinged: Int64?

                public var handleRate: Double?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalHoldTime: Int64?

                public var totalMessagesSent: Int64?

                public var totalMessagesSentByAgent: Int64?

                public var totalMessagesSentByCustomer: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageFirstResponseTime != nil {
                        map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageResponseTime != nil {
                        map["AverageResponseTime"] = self.averageResponseTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAttendedTransferIn != nil {
                        map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferIn != nil {
                        map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsHold != nil {
                        map["CallsHold"] = self.callsHold!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsRinged != nil {
                        map["CallsRinged"] = self.callsRinged!
                    }
                    if self.handleRate != nil {
                        map["HandleRate"] = self.handleRate!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalMessagesSent != nil {
                        map["TotalMessagesSent"] = self.totalMessagesSent!
                    }
                    if self.totalMessagesSentByAgent != nil {
                        map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                    }
                    if self.totalMessagesSentByCustomer != nil {
                        map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageFirstResponseTime"] as? Double {
                        self.averageFirstResponseTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageResponseTime"] as? Double {
                        self.averageResponseTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                        self.callsAttendedTransferIn = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferIn"] as? Int64 {
                        self.callsBlindTransferIn = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsHold"] as? Int64 {
                        self.callsHold = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsRinged"] as? Int64 {
                        self.callsRinged = value
                    }
                    if let value = dict["HandleRate"] as? Double {
                        self.handleRate = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalMessagesSent"] as? Int64 {
                        self.totalMessagesSent = value
                    }
                    if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                        self.totalMessagesSentByAgent = value
                    }
                    if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                        self.totalMessagesSentByCustomer = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Internal_ : Tea.TeaModel {
                public var averageTalkTime: Int64?

                public var callsAnswered: Int64?

                public var callsDialed: Int64?

                public var callsHandled: Int64?

                public var callsOffered: Int64?

                public var callsTalk: Int64?

                public var callsTalked: Int64?

                public var maxTalkTime: Int64?

                public var totalTalkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsTalk != nil {
                        map["CallsTalk"] = self.callsTalk!
                    }
                    if self.callsTalked != nil {
                        map["CallsTalked"] = self.callsTalked!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsTalk"] as? Int64 {
                        self.callsTalk = value
                    }
                    if let value = dict["CallsTalked"] as? Int64 {
                        self.callsTalked = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                }
            }
            public class Outbound : Tea.TeaModel {
                public var answerRate: Double?

                public var averageDialingTime: Double?

                public var averageHoldTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var callsAnswered: Int64?

                public var callsAttendedTransferIn: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferIn: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsDialed: Int64?

                public var callsHold: Int64?

                public var callsRinged: Int64?

                public var maxDialingTime: Int64?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalDialingTime: Int64?

                public var totalHoldTime: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageDialingTime != nil {
                        map["AverageDialingTime"] = self.averageDialingTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsAttendedTransferIn != nil {
                        map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferIn != nil {
                        map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.callsHold != nil {
                        map["CallsHold"] = self.callsHold!
                    }
                    if self.callsRinged != nil {
                        map["CallsRinged"] = self.callsRinged!
                    }
                    if self.maxDialingTime != nil {
                        map["MaxDialingTime"] = self.maxDialingTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalDialingTime != nil {
                        map["TotalDialingTime"] = self.totalDialingTime!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageDialingTime"] as? Double {
                        self.averageDialingTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                        self.callsAttendedTransferIn = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferIn"] as? Int64 {
                        self.callsBlindTransferIn = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CallsHold"] as? Int64 {
                        self.callsHold = value
                    }
                    if let value = dict["CallsRinged"] as? Int64 {
                        self.callsRinged = value
                    }
                    if let value = dict["MaxDialingTime"] as? Int64 {
                        self.maxDialingTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalDialingTime"] as? Int64 {
                        self.totalDialingTime = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Overall : Tea.TeaModel {
                public class BreakCodeDetailList : Tea.TeaModel {
                    public var breakCode: String?

                    public var count: Int64?

                    public var duration: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.breakCode != nil {
                            map["BreakCode"] = self.breakCode!
                        }
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.duration != nil {
                            map["Duration"] = self.duration!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BreakCode"] as? String {
                            self.breakCode = value
                        }
                        if let value = dict["Count"] as? Int64 {
                            self.count = value
                        }
                        if let value = dict["Duration"] as? Int64 {
                            self.duration = value
                        }
                    }
                }
                public var averageBreakTime: Double?

                public var averageHoldTime: Double?

                public var averageReadyTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var breakCodeDetailList: [ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Overall.BreakCodeDetailList]?

                public var firstCheckInTime: Int64?

                public var lastCheckOutTime: Int64?

                public var maxBreakTime: Int64?

                public var maxHoldTime: Int64?

                public var maxReadyTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var occupancyRate: Double?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalBreakTime: Int64?

                public var totalCalls: Int64?

                public var totalHoldTime: Int64?

                public var totalLoggedInTime: Int64?

                public var totalOffSiteLggedInTime: Int64?

                public var totalOfficePhoneLoggedInTime: Int64?

                public var totalOnSiteLoggedInTime: String?

                public var totalOutboundScenarioLoggedInTime: Int64?

                public var totalOutboundScenarioReadyTime: Int64?

                public var totalOutboundScenarioTime: Int64?

                public var totalReadyTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageBreakTime != nil {
                        map["AverageBreakTime"] = self.averageBreakTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageReadyTime != nil {
                        map["AverageReadyTime"] = self.averageReadyTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.breakCodeDetailList != nil {
                        var tmp : [Any] = []
                        for k in self.breakCodeDetailList! {
                            tmp.append(k.toMap())
                        }
                        map["BreakCodeDetailList"] = tmp
                    }
                    if self.firstCheckInTime != nil {
                        map["FirstCheckInTime"] = self.firstCheckInTime!
                    }
                    if self.lastCheckOutTime != nil {
                        map["LastCheckOutTime"] = self.lastCheckOutTime!
                    }
                    if self.maxBreakTime != nil {
                        map["MaxBreakTime"] = self.maxBreakTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxReadyTime != nil {
                        map["MaxReadyTime"] = self.maxReadyTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.occupancyRate != nil {
                        map["OccupancyRate"] = self.occupancyRate!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalBreakTime != nil {
                        map["TotalBreakTime"] = self.totalBreakTime!
                    }
                    if self.totalCalls != nil {
                        map["TotalCalls"] = self.totalCalls!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalLoggedInTime != nil {
                        map["TotalLoggedInTime"] = self.totalLoggedInTime!
                    }
                    if self.totalOffSiteLggedInTime != nil {
                        map["TotalOffSiteLggedInTime"] = self.totalOffSiteLggedInTime!
                    }
                    if self.totalOfficePhoneLoggedInTime != nil {
                        map["TotalOfficePhoneLoggedInTime"] = self.totalOfficePhoneLoggedInTime!
                    }
                    if self.totalOnSiteLoggedInTime != nil {
                        map["TotalOnSiteLoggedInTime"] = self.totalOnSiteLoggedInTime!
                    }
                    if self.totalOutboundScenarioLoggedInTime != nil {
                        map["TotalOutboundScenarioLoggedInTime"] = self.totalOutboundScenarioLoggedInTime!
                    }
                    if self.totalOutboundScenarioReadyTime != nil {
                        map["TotalOutboundScenarioReadyTime"] = self.totalOutboundScenarioReadyTime!
                    }
                    if self.totalOutboundScenarioTime != nil {
                        map["TotalOutboundScenarioTime"] = self.totalOutboundScenarioTime!
                    }
                    if self.totalReadyTime != nil {
                        map["TotalReadyTime"] = self.totalReadyTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageBreakTime"] as? Double {
                        self.averageBreakTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageReadyTime"] as? Double {
                        self.averageReadyTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["BreakCodeDetailList"] as? [Any?] {
                        var tmp : [ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Overall.BreakCodeDetailList] = []
                        for v in value {
                            if v != nil {
                                var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Overall.BreakCodeDetailList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.breakCodeDetailList = tmp
                    }
                    if let value = dict["FirstCheckInTime"] as? Int64 {
                        self.firstCheckInTime = value
                    }
                    if let value = dict["LastCheckOutTime"] as? Int64 {
                        self.lastCheckOutTime = value
                    }
                    if let value = dict["MaxBreakTime"] as? Int64 {
                        self.maxBreakTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxReadyTime"] as? Int64 {
                        self.maxReadyTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["OccupancyRate"] as? Double {
                        self.occupancyRate = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalBreakTime"] as? Int64 {
                        self.totalBreakTime = value
                    }
                    if let value = dict["TotalCalls"] as? Int64 {
                        self.totalCalls = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalLoggedInTime"] as? Int64 {
                        self.totalLoggedInTime = value
                    }
                    if let value = dict["TotalOffSiteLggedInTime"] as? Int64 {
                        self.totalOffSiteLggedInTime = value
                    }
                    if let value = dict["TotalOfficePhoneLoggedInTime"] as? Int64 {
                        self.totalOfficePhoneLoggedInTime = value
                    }
                    if let value = dict["TotalOnSiteLoggedInTime"] as? String {
                        self.totalOnSiteLoggedInTime = value
                    }
                    if let value = dict["TotalOutboundScenarioLoggedInTime"] as? Int64 {
                        self.totalOutboundScenarioLoggedInTime = value
                    }
                    if let value = dict["TotalOutboundScenarioReadyTime"] as? Int64 {
                        self.totalOutboundScenarioReadyTime = value
                    }
                    if let value = dict["TotalOutboundScenarioTime"] as? Int64 {
                        self.totalOutboundScenarioTime = value
                    }
                    if let value = dict["TotalReadyTime"] as? Int64 {
                        self.totalReadyTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public var agentId: String?

            public var agentName: String?

            public var back2Back: ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Back2Back?

            public var displayId: String?

            public var inbound: ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Inbound?

            public var internal_: ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Internal_?

            public var outbound: ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Outbound?

            public var overall: ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Overall?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.back2Back?.validate()
                try self.inbound?.validate()
                try self.internal_?.validate()
                try self.outbound?.validate()
                try self.overall?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.back2Back != nil {
                    map["Back2Back"] = self.back2Back?.toMap()
                }
                if self.displayId != nil {
                    map["DisplayId"] = self.displayId!
                }
                if self.inbound != nil {
                    map["Inbound"] = self.inbound?.toMap()
                }
                if self.internal_ != nil {
                    map["Internal"] = self.internal_?.toMap()
                }
                if self.outbound != nil {
                    map["Outbound"] = self.outbound?.toMap()
                }
                if self.overall != nil {
                    map["Overall"] = self.overall?.toMap()
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentName"] as? String {
                    self.agentName = value
                }
                if let value = dict["Back2Back"] as? [String: Any?] {
                    var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Back2Back()
                    model.fromMap(value)
                    self.back2Back = model
                }
                if let value = dict["DisplayId"] as? String {
                    self.displayId = value
                }
                if let value = dict["Inbound"] as? [String: Any?] {
                    var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Inbound()
                    model.fromMap(value)
                    self.inbound = model
                }
                if let value = dict["Internal"] as? [String: Any?] {
                    var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Internal_()
                    model.fromMap(value)
                    self.internal_ = model
                }
                if let value = dict["Outbound"] as? [String: Any?] {
                    var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Outbound()
                    model.fromMap(value)
                    self.outbound = model
                }
                if let value = dict["Overall"] as? [String: Any?] {
                    var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List.Overall()
                    model.fromMap(value)
                    self.overall = model
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
            }
        }
        public var list: [ListHistoricalAgentSkillGroupReportResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListHistoricalAgentSkillGroupReportResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListHistoricalAgentSkillGroupReportResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListHistoricalAgentSkillGroupReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListHistoricalAgentSkillGroupReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListHistoricalAgentSkillGroupReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHistoricalAgentSkillGroupReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHistoricalAgentSkillGroupReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHistoricalSkillGroupReportRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var mediaType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIdList: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListHistoricalSkillGroupReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Back2Back : Tea.TeaModel {
                public var agentHandleRate: Double?

                public var answerRate: Double?

                public var averageCustomerRingTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var callsAnswered: Int64?

                public var callsCustomerAnswered: Int64?

                public var callsDialed: Int64?

                public var customerAnswerRate: Double?

                public var maxCustomerRingTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var totalCustomerRingTime: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentHandleRate != nil {
                        map["AgentHandleRate"] = self.agentHandleRate!
                    }
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageCustomerRingTime != nil {
                        map["AverageCustomerRingTime"] = self.averageCustomerRingTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsCustomerAnswered != nil {
                        map["CallsCustomerAnswered"] = self.callsCustomerAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.customerAnswerRate != nil {
                        map["CustomerAnswerRate"] = self.customerAnswerRate!
                    }
                    if self.maxCustomerRingTime != nil {
                        map["MaxCustomerRingTime"] = self.maxCustomerRingTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.totalCustomerRingTime != nil {
                        map["TotalCustomerRingTime"] = self.totalCustomerRingTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AgentHandleRate"] as? Double {
                        self.agentHandleRate = value
                    }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageCustomerRingTime"] as? Double {
                        self.averageCustomerRingTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsCustomerAnswered"] as? Int64 {
                        self.callsCustomerAnswered = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CustomerAnswerRate"] as? Double {
                        self.customerAnswerRate = value
                    }
                    if let value = dict["MaxCustomerRingTime"] as? Int64 {
                        self.maxCustomerRingTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["TotalCustomerRingTime"] as? Int64 {
                        self.totalCustomerRingTime = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                }
            }
            public class Inbound : Tea.TeaModel {
                public class AccessChannelTypeDetails : Tea.TeaModel {
                    public var accessChannelType: String?

                    public var callsOffered: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.accessChannelType != nil {
                            map["AccessChannelType"] = self.accessChannelType!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AccessChannelType"] as? String {
                            self.accessChannelType = value
                        }
                        if let value = dict["CallsOffered"] as? Int64 {
                            self.callsOffered = value
                        }
                    }
                }
                public var abandonRate: Double?

                public var accessChannelTypeDetails: [ListHistoricalSkillGroupReportResponseBody.Data.List.Inbound.AccessChannelTypeDetails]?

                public var averageAbandonTime: Double?

                public var averageAbandonedInQueueTime: Double?

                public var averageAbandonedInRingTime: Double?

                public var averageFirstResponseTime: Double?

                public var averageHoldTime: Double?

                public var averageResponseTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var averageWaitTime: Double?

                public var averageWorkTime: Double?

                public var callsAbandoned: Int64?

                public var callsAbandonedInQueue: Int64?

                public var callsAbandonedInRing: Int64?

                public var callsAttendedTransferIn: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferIn: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsHandled: Int64?

                public var callsHold: Int64?

                public var callsOffered: Int64?

                public var callsOverflow: Int64?

                public var callsQueued: Int64?

                public var callsQueuingFailed: Int64?

                public var callsQueuingOverflow: Int64?

                public var callsQueuingTimeout: Int64?

                public var callsRinged: Int64?

                public var callsTimeout: Int64?

                public var handleRate: Double?

                public var maxAbandonTime: Int64?

                public var maxAbandonedInQueueTime: Int64?

                public var maxAbandonedInRingTime: Int64?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWaitTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var serviceLevel15: Double?

                public var serviceLevel20: Double?

                public var serviceLevel30: Double?

                public var totalAbandonTime: Int64?

                public var totalAbandonedInQueueTime: Int64?

                public var totalAbandonedInRingTime: Int64?

                public var totalHoldTime: Int64?

                public var totalMessagesSent: Int64?

                public var totalMessagesSentByAgent: Int64?

                public var totalMessagesSentByCustomer: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWaitTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.abandonRate != nil {
                        map["AbandonRate"] = self.abandonRate!
                    }
                    if self.accessChannelTypeDetails != nil {
                        var tmp : [Any] = []
                        for k in self.accessChannelTypeDetails! {
                            tmp.append(k.toMap())
                        }
                        map["AccessChannelTypeDetails"] = tmp
                    }
                    if self.averageAbandonTime != nil {
                        map["AverageAbandonTime"] = self.averageAbandonTime!
                    }
                    if self.averageAbandonedInQueueTime != nil {
                        map["AverageAbandonedInQueueTime"] = self.averageAbandonedInQueueTime!
                    }
                    if self.averageAbandonedInRingTime != nil {
                        map["AverageAbandonedInRingTime"] = self.averageAbandonedInRingTime!
                    }
                    if self.averageFirstResponseTime != nil {
                        map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageResponseTime != nil {
                        map["AverageResponseTime"] = self.averageResponseTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWaitTime != nil {
                        map["AverageWaitTime"] = self.averageWaitTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAbandoned != nil {
                        map["CallsAbandoned"] = self.callsAbandoned!
                    }
                    if self.callsAbandonedInQueue != nil {
                        map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                    }
                    if self.callsAbandonedInRing != nil {
                        map["CallsAbandonedInRing"] = self.callsAbandonedInRing!
                    }
                    if self.callsAttendedTransferIn != nil {
                        map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferIn != nil {
                        map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsHold != nil {
                        map["CallsHold"] = self.callsHold!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsOverflow != nil {
                        map["CallsOverflow"] = self.callsOverflow!
                    }
                    if self.callsQueued != nil {
                        map["CallsQueued"] = self.callsQueued!
                    }
                    if self.callsQueuingFailed != nil {
                        map["CallsQueuingFailed"] = self.callsQueuingFailed!
                    }
                    if self.callsQueuingOverflow != nil {
                        map["CallsQueuingOverflow"] = self.callsQueuingOverflow!
                    }
                    if self.callsQueuingTimeout != nil {
                        map["CallsQueuingTimeout"] = self.callsQueuingTimeout!
                    }
                    if self.callsRinged != nil {
                        map["CallsRinged"] = self.callsRinged!
                    }
                    if self.callsTimeout != nil {
                        map["CallsTimeout"] = self.callsTimeout!
                    }
                    if self.handleRate != nil {
                        map["HandleRate"] = self.handleRate!
                    }
                    if self.maxAbandonTime != nil {
                        map["MaxAbandonTime"] = self.maxAbandonTime!
                    }
                    if self.maxAbandonedInQueueTime != nil {
                        map["MaxAbandonedInQueueTime"] = self.maxAbandonedInQueueTime!
                    }
                    if self.maxAbandonedInRingTime != nil {
                        map["MaxAbandonedInRingTime"] = self.maxAbandonedInRingTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWaitTime != nil {
                        map["MaxWaitTime"] = self.maxWaitTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.serviceLevel15 != nil {
                        map["ServiceLevel15"] = self.serviceLevel15!
                    }
                    if self.serviceLevel20 != nil {
                        map["ServiceLevel20"] = self.serviceLevel20!
                    }
                    if self.serviceLevel30 != nil {
                        map["ServiceLevel30"] = self.serviceLevel30!
                    }
                    if self.totalAbandonTime != nil {
                        map["TotalAbandonTime"] = self.totalAbandonTime!
                    }
                    if self.totalAbandonedInQueueTime != nil {
                        map["TotalAbandonedInQueueTime"] = self.totalAbandonedInQueueTime!
                    }
                    if self.totalAbandonedInRingTime != nil {
                        map["TotalAbandonedInRingTime"] = self.totalAbandonedInRingTime!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalMessagesSent != nil {
                        map["TotalMessagesSent"] = self.totalMessagesSent!
                    }
                    if self.totalMessagesSentByAgent != nil {
                        map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                    }
                    if self.totalMessagesSentByCustomer != nil {
                        map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWaitTime != nil {
                        map["TotalWaitTime"] = self.totalWaitTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AbandonRate"] as? Double {
                        self.abandonRate = value
                    }
                    if let value = dict["AccessChannelTypeDetails"] as? [Any?] {
                        var tmp : [ListHistoricalSkillGroupReportResponseBody.Data.List.Inbound.AccessChannelTypeDetails] = []
                        for v in value {
                            if v != nil {
                                var model = ListHistoricalSkillGroupReportResponseBody.Data.List.Inbound.AccessChannelTypeDetails()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.accessChannelTypeDetails = tmp
                    }
                    if let value = dict["AverageAbandonTime"] as? Double {
                        self.averageAbandonTime = value
                    }
                    if let value = dict["AverageAbandonedInQueueTime"] as? Double {
                        self.averageAbandonedInQueueTime = value
                    }
                    if let value = dict["AverageAbandonedInRingTime"] as? Double {
                        self.averageAbandonedInRingTime = value
                    }
                    if let value = dict["AverageFirstResponseTime"] as? Double {
                        self.averageFirstResponseTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageResponseTime"] as? Double {
                        self.averageResponseTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWaitTime"] as? Double {
                        self.averageWaitTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAbandoned"] as? Int64 {
                        self.callsAbandoned = value
                    }
                    if let value = dict["CallsAbandonedInQueue"] as? Int64 {
                        self.callsAbandonedInQueue = value
                    }
                    if let value = dict["CallsAbandonedInRing"] as? Int64 {
                        self.callsAbandonedInRing = value
                    }
                    if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                        self.callsAttendedTransferIn = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferIn"] as? Int64 {
                        self.callsBlindTransferIn = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsHold"] as? Int64 {
                        self.callsHold = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsOverflow"] as? Int64 {
                        self.callsOverflow = value
                    }
                    if let value = dict["CallsQueued"] as? Int64 {
                        self.callsQueued = value
                    }
                    if let value = dict["CallsQueuingFailed"] as? Int64 {
                        self.callsQueuingFailed = value
                    }
                    if let value = dict["CallsQueuingOverflow"] as? Int64 {
                        self.callsQueuingOverflow = value
                    }
                    if let value = dict["CallsQueuingTimeout"] as? Int64 {
                        self.callsQueuingTimeout = value
                    }
                    if let value = dict["CallsRinged"] as? Int64 {
                        self.callsRinged = value
                    }
                    if let value = dict["CallsTimeout"] as? Int64 {
                        self.callsTimeout = value
                    }
                    if let value = dict["HandleRate"] as? Double {
                        self.handleRate = value
                    }
                    if let value = dict["MaxAbandonTime"] as? Int64 {
                        self.maxAbandonTime = value
                    }
                    if let value = dict["MaxAbandonedInQueueTime"] as? Int64 {
                        self.maxAbandonedInQueueTime = value
                    }
                    if let value = dict["MaxAbandonedInRingTime"] as? Int64 {
                        self.maxAbandonedInRingTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWaitTime"] as? Int64 {
                        self.maxWaitTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["ServiceLevel15"] as? Double {
                        self.serviceLevel15 = value
                    }
                    if let value = dict["ServiceLevel20"] as? Double {
                        self.serviceLevel20 = value
                    }
                    if let value = dict["ServiceLevel30"] as? Double {
                        self.serviceLevel30 = value
                    }
                    if let value = dict["TotalAbandonTime"] as? Int64 {
                        self.totalAbandonTime = value
                    }
                    if let value = dict["TotalAbandonedInQueueTime"] as? Int64 {
                        self.totalAbandonedInQueueTime = value
                    }
                    if let value = dict["TotalAbandonedInRingTime"] as? Int64 {
                        self.totalAbandonedInRingTime = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalMessagesSent"] as? Int64 {
                        self.totalMessagesSent = value
                    }
                    if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                        self.totalMessagesSentByAgent = value
                    }
                    if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                        self.totalMessagesSentByCustomer = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWaitTime"] as? Int64 {
                        self.totalWaitTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Outbound : Tea.TeaModel {
                public var answerRate: Double?

                public var averageDialingTime: Double?

                public var averageHoldTime: Double?

                public var averageRingTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var callsAnswered: Int64?

                public var callsAttendedTransferIn: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferIn: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsDialed: Int64?

                public var callsHold: Int64?

                public var callsRinged: Int64?

                public var maxDialingTime: Int64?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalDialingTime: Int64?

                public var totalHoldTime: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageDialingTime != nil {
                        map["AverageDialingTime"] = self.averageDialingTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsAttendedTransferIn != nil {
                        map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferIn != nil {
                        map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.callsHold != nil {
                        map["CallsHold"] = self.callsHold!
                    }
                    if self.callsRinged != nil {
                        map["CallsRinged"] = self.callsRinged!
                    }
                    if self.maxDialingTime != nil {
                        map["MaxDialingTime"] = self.maxDialingTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalDialingTime != nil {
                        map["TotalDialingTime"] = self.totalDialingTime!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageDialingTime"] as? Double {
                        self.averageDialingTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageRingTime"] as? Double {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                        self.callsAttendedTransferIn = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferIn"] as? Int64 {
                        self.callsBlindTransferIn = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CallsHold"] as? Int64 {
                        self.callsHold = value
                    }
                    if let value = dict["CallsRinged"] as? Int64 {
                        self.callsRinged = value
                    }
                    if let value = dict["MaxDialingTime"] as? Int64 {
                        self.maxDialingTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalDialingTime"] as? Int64 {
                        self.totalDialingTime = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Overall : Tea.TeaModel {
                public class BreakCodeDetailList : Tea.TeaModel {
                    public var breakCode: String?

                    public var count: Int64?

                    public var duration: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.breakCode != nil {
                            map["BreakCode"] = self.breakCode!
                        }
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.duration != nil {
                            map["Duration"] = self.duration!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BreakCode"] as? String {
                            self.breakCode = value
                        }
                        if let value = dict["Count"] as? Int64 {
                            self.count = value
                        }
                        if let value = dict["Duration"] as? Int64 {
                            self.duration = value
                        }
                    }
                }
                public var averageBreakTime: Double?

                public var averageHoldTime: Double?

                public var averageReadyTime: Double?

                public var averageTalkTime: Double?

                public var averageWorkTime: Double?

                public var breakCodeDetailList: [ListHistoricalSkillGroupReportResponseBody.Data.List.Overall.BreakCodeDetailList]?

                public var maxBreakTime: Int64?

                public var maxHoldTime: Int64?

                public var maxReadyTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var occupancyRate: Double?

                public var satisfactionIndex: Double?

                public var satisfactionRate: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalBreakTime: Int64?

                public var totalCalls: Int64?

                public var totalHoldTime: Int64?

                public var totalLoggedInTime: Int64?

                public var totalReadyTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageBreakTime != nil {
                        map["AverageBreakTime"] = self.averageBreakTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageReadyTime != nil {
                        map["AverageReadyTime"] = self.averageReadyTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.breakCodeDetailList != nil {
                        var tmp : [Any] = []
                        for k in self.breakCodeDetailList! {
                            tmp.append(k.toMap())
                        }
                        map["BreakCodeDetailList"] = tmp
                    }
                    if self.maxBreakTime != nil {
                        map["MaxBreakTime"] = self.maxBreakTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxReadyTime != nil {
                        map["MaxReadyTime"] = self.maxReadyTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.occupancyRate != nil {
                        map["OccupancyRate"] = self.occupancyRate!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionRate != nil {
                        map["SatisfactionRate"] = self.satisfactionRate!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalBreakTime != nil {
                        map["TotalBreakTime"] = self.totalBreakTime!
                    }
                    if self.totalCalls != nil {
                        map["TotalCalls"] = self.totalCalls!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalLoggedInTime != nil {
                        map["TotalLoggedInTime"] = self.totalLoggedInTime!
                    }
                    if self.totalReadyTime != nil {
                        map["TotalReadyTime"] = self.totalReadyTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageBreakTime"] as? Double {
                        self.averageBreakTime = value
                    }
                    if let value = dict["AverageHoldTime"] as? Double {
                        self.averageHoldTime = value
                    }
                    if let value = dict["AverageReadyTime"] as? Double {
                        self.averageReadyTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Double {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Double {
                        self.averageWorkTime = value
                    }
                    if let value = dict["BreakCodeDetailList"] as? [Any?] {
                        var tmp : [ListHistoricalSkillGroupReportResponseBody.Data.List.Overall.BreakCodeDetailList] = []
                        for v in value {
                            if v != nil {
                                var model = ListHistoricalSkillGroupReportResponseBody.Data.List.Overall.BreakCodeDetailList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.breakCodeDetailList = tmp
                    }
                    if let value = dict["MaxBreakTime"] as? Int64 {
                        self.maxBreakTime = value
                    }
                    if let value = dict["MaxHoldTime"] as? Int64 {
                        self.maxHoldTime = value
                    }
                    if let value = dict["MaxReadyTime"] as? Int64 {
                        self.maxReadyTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["OccupancyRate"] as? Double {
                        self.occupancyRate = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionRate"] as? Double {
                        self.satisfactionRate = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalBreakTime"] as? Int64 {
                        self.totalBreakTime = value
                    }
                    if let value = dict["TotalCalls"] as? Int64 {
                        self.totalCalls = value
                    }
                    if let value = dict["TotalHoldTime"] as? Int64 {
                        self.totalHoldTime = value
                    }
                    if let value = dict["TotalLoggedInTime"] as? Int64 {
                        self.totalLoggedInTime = value
                    }
                    if let value = dict["TotalReadyTime"] as? Int64 {
                        self.totalReadyTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public var back2Back: ListHistoricalSkillGroupReportResponseBody.Data.List.Back2Back?

            public var inbound: ListHistoricalSkillGroupReportResponseBody.Data.List.Inbound?

            public var outbound: ListHistoricalSkillGroupReportResponseBody.Data.List.Outbound?

            public var overall: ListHistoricalSkillGroupReportResponseBody.Data.List.Overall?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.back2Back?.validate()
                try self.inbound?.validate()
                try self.outbound?.validate()
                try self.overall?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.back2Back != nil {
                    map["Back2Back"] = self.back2Back?.toMap()
                }
                if self.inbound != nil {
                    map["Inbound"] = self.inbound?.toMap()
                }
                if self.outbound != nil {
                    map["Outbound"] = self.outbound?.toMap()
                }
                if self.overall != nil {
                    map["Overall"] = self.overall?.toMap()
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Back2Back"] as? [String: Any?] {
                    var model = ListHistoricalSkillGroupReportResponseBody.Data.List.Back2Back()
                    model.fromMap(value)
                    self.back2Back = model
                }
                if let value = dict["Inbound"] as? [String: Any?] {
                    var model = ListHistoricalSkillGroupReportResponseBody.Data.List.Inbound()
                    model.fromMap(value)
                    self.inbound = model
                }
                if let value = dict["Outbound"] as? [String: Any?] {
                    var model = ListHistoricalSkillGroupReportResponseBody.Data.List.Outbound()
                    model.fromMap(value)
                    self.outbound = model
                }
                if let value = dict["Overall"] as? [String: Any?] {
                    var model = ListHistoricalSkillGroupReportResponseBody.Data.List.Overall()
                    model.fromMap(value)
                    self.overall = model
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
            }
        }
        public var list: [ListHistoricalSkillGroupReportResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListHistoricalSkillGroupReportResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListHistoricalSkillGroupReportResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListHistoricalSkillGroupReportResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListHistoricalSkillGroupReportResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListHistoricalSkillGroupReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHistoricalSkillGroupReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHistoricalSkillGroupReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInstancesRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListInstancesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class AdminList : Tea.TeaModel {
                public var displayName: String?

                public var email: String?

                public var extension_: String?

                public var instanceId: String?

                public var loginName: String?

                public var mobile: String?

                public var roleId: String?

                public var roleName: String?

                public var userId: String?

                public var workMode: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.email != nil {
                        map["Email"] = self.email!
                    }
                    if self.extension_ != nil {
                        map["Extension"] = self.extension_!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loginName != nil {
                        map["LoginName"] = self.loginName!
                    }
                    if self.mobile != nil {
                        map["Mobile"] = self.mobile!
                    }
                    if self.roleId != nil {
                        map["RoleId"] = self.roleId!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    if self.workMode != nil {
                        map["WorkMode"] = self.workMode!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Email"] as? String {
                        self.email = value
                    }
                    if let value = dict["Extension"] as? String {
                        self.extension_ = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["LoginName"] as? String {
                        self.loginName = value
                    }
                    if let value = dict["Mobile"] as? String {
                        self.mobile = value
                    }
                    if let value = dict["RoleId"] as? String {
                        self.roleId = value
                    }
                    if let value = dict["RoleName"] as? String {
                        self.roleName = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                    if let value = dict["WorkMode"] as? String {
                        self.workMode = value
                    }
                }
            }
            public class NumberList : Tea.TeaModel {
                public var number: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Number"] as? String {
                        self.number = value
                    }
                }
            }
            public var adminList: [ListInstancesResponseBody.Data.List.AdminList]?

            public var aliyunUid: String?

            public var consoleUrl: String?

            public var createTime: Int64?

            public var description_: String?

            public var domainName: String?

            public var id: String?

            public var name: String?

            public var numberList: [ListInstancesResponseBody.Data.List.NumberList]?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adminList != nil {
                    var tmp : [Any] = []
                    for k in self.adminList! {
                        tmp.append(k.toMap())
                    }
                    map["AdminList"] = tmp
                }
                if self.aliyunUid != nil {
                    map["AliyunUid"] = self.aliyunUid!
                }
                if self.consoleUrl != nil {
                    map["ConsoleUrl"] = self.consoleUrl!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.numberList != nil {
                    var tmp : [Any] = []
                    for k in self.numberList! {
                        tmp.append(k.toMap())
                    }
                    map["NumberList"] = tmp
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdminList"] as? [Any?] {
                    var tmp : [ListInstancesResponseBody.Data.List.AdminList] = []
                    for v in value {
                        if v != nil {
                            var model = ListInstancesResponseBody.Data.List.AdminList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.adminList = tmp
                }
                if let value = dict["AliyunUid"] as? String {
                    self.aliyunUid = value
                }
                if let value = dict["ConsoleUrl"] as? String {
                    self.consoleUrl = value
                }
                if let value = dict["CreateTime"] as? Int64 {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NumberList"] as? [Any?] {
                    var tmp : [ListInstancesResponseBody.Data.List.NumberList] = []
                    for v in value {
                        if v != nil {
                            var model = ListInstancesResponseBody.Data.List.NumberList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.numberList = tmp
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var list: [ListInstancesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListInstancesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListInstancesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListInstancesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListInstancesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInstancesOfUserRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListInstancesOfUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class AdminList : Tea.TeaModel {
                public var displayName: String?

                public var email: String?

                public var extension_: String?

                public var instanceId: String?

                public var loginName: String?

                public var mobile: String?

                public var roleId: String?

                public var roleName: String?

                public var userId: String?

                public var workMode: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.email != nil {
                        map["Email"] = self.email!
                    }
                    if self.extension_ != nil {
                        map["Extension"] = self.extension_!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loginName != nil {
                        map["LoginName"] = self.loginName!
                    }
                    if self.mobile != nil {
                        map["Mobile"] = self.mobile!
                    }
                    if self.roleId != nil {
                        map["RoleId"] = self.roleId!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    if self.workMode != nil {
                        map["WorkMode"] = self.workMode!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Email"] as? String {
                        self.email = value
                    }
                    if let value = dict["Extension"] as? String {
                        self.extension_ = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["LoginName"] as? String {
                        self.loginName = value
                    }
                    if let value = dict["Mobile"] as? String {
                        self.mobile = value
                    }
                    if let value = dict["RoleId"] as? String {
                        self.roleId = value
                    }
                    if let value = dict["RoleName"] as? String {
                        self.roleName = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                    if let value = dict["WorkMode"] as? String {
                        self.workMode = value
                    }
                }
            }
            public class NumberList : Tea.TeaModel {
                public class SkillGroups : Tea.TeaModel {
                    public var description_: String?

                    public var displayName: String?

                    public var instanceId: String?

                    public var name: String?

                    public var phoneNumberCount: Int32?

                    public var skillGroupId: String?

                    public var userCount: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.description_ != nil {
                            map["Description"] = self.description_!
                        }
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.phoneNumberCount != nil {
                            map["PhoneNumberCount"] = self.phoneNumberCount!
                        }
                        if self.skillGroupId != nil {
                            map["SkillGroupId"] = self.skillGroupId!
                        }
                        if self.userCount != nil {
                            map["UserCount"] = self.userCount!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Description"] as? String {
                            self.description_ = value
                        }
                        if let value = dict["DisplayName"] as? String {
                            self.displayName = value
                        }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["PhoneNumberCount"] as? Int32 {
                            self.phoneNumberCount = value
                        }
                        if let value = dict["SkillGroupId"] as? String {
                            self.skillGroupId = value
                        }
                        if let value = dict["UserCount"] as? Int32 {
                            self.userCount = value
                        }
                    }
                }
                public var active: Bool?

                public var city: String?

                public var contactFlowId: String?

                public var instanceId: String?

                public var number: String?

                public var province: String?

                public var skillGroups: [ListInstancesOfUserResponseBody.Data.List.NumberList.SkillGroups]?

                public var usage: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.active != nil {
                        map["Active"] = self.active!
                    }
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.contactFlowId != nil {
                        map["ContactFlowId"] = self.contactFlowId!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    if self.skillGroups != nil {
                        var tmp : [Any] = []
                        for k in self.skillGroups! {
                            tmp.append(k.toMap())
                        }
                        map["SkillGroups"] = tmp
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Active"] as? Bool {
                        self.active = value
                    }
                    if let value = dict["City"] as? String {
                        self.city = value
                    }
                    if let value = dict["ContactFlowId"] as? String {
                        self.contactFlowId = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["Number"] as? String {
                        self.number = value
                    }
                    if let value = dict["Province"] as? String {
                        self.province = value
                    }
                    if let value = dict["SkillGroups"] as? [Any?] {
                        var tmp : [ListInstancesOfUserResponseBody.Data.List.NumberList.SkillGroups] = []
                        for v in value {
                            if v != nil {
                                var model = ListInstancesOfUserResponseBody.Data.List.NumberList.SkillGroups()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.skillGroups = tmp
                    }
                    if let value = dict["Usage"] as? String {
                        self.usage = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var adminList: [ListInstancesOfUserResponseBody.Data.List.AdminList]?

            public var aliyunUid: String?

            public var consoleUrl: String?

            public var description_: String?

            public var domainName: String?

            public var id: String?

            public var name: String?

            public var numberList: [ListInstancesOfUserResponseBody.Data.List.NumberList]?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adminList != nil {
                    var tmp : [Any] = []
                    for k in self.adminList! {
                        tmp.append(k.toMap())
                    }
                    map["AdminList"] = tmp
                }
                if self.aliyunUid != nil {
                    map["AliyunUid"] = self.aliyunUid!
                }
                if self.consoleUrl != nil {
                    map["ConsoleUrl"] = self.consoleUrl!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.numberList != nil {
                    var tmp : [Any] = []
                    for k in self.numberList! {
                        tmp.append(k.toMap())
                    }
                    map["NumberList"] = tmp
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdminList"] as? [Any?] {
                    var tmp : [ListInstancesOfUserResponseBody.Data.List.AdminList] = []
                    for v in value {
                        if v != nil {
                            var model = ListInstancesOfUserResponseBody.Data.List.AdminList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.adminList = tmp
                }
                if let value = dict["AliyunUid"] as? String {
                    self.aliyunUid = value
                }
                if let value = dict["ConsoleUrl"] as? String {
                    self.consoleUrl = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NumberList"] as? [Any?] {
                    var tmp : [ListInstancesOfUserResponseBody.Data.List.NumberList] = []
                    for v in value {
                        if v != nil {
                            var model = ListInstancesOfUserResponseBody.Data.List.NumberList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.numberList = tmp
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var list: [ListInstancesOfUserResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListInstancesOfUserResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListInstancesOfUserResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListInstancesOfUserResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListInstancesOfUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListInstancesOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInstancesOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInstancesOfUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIntervalAgentReportRequest : Tea.TeaModel {
    public var agentId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var interval: String?

    public var mediaType: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListIntervalAgentReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Back2Back : Tea.TeaModel {
            public var agentHandleRate: Double?

            public var answerRate: Double?

            public var averageCustomerRingTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var callsAgentHandled: Int64?

            public var callsAnswered: Int64?

            public var callsCustomerAnswered: Int64?

            public var callsDialed: Int64?

            public var customerAnswerRate: Double?

            public var maxCustomerRingTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var totalCustomerRingTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentHandleRate != nil {
                    map["AgentHandleRate"] = self.agentHandleRate!
                }
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageCustomerRingTime != nil {
                    map["AverageCustomerRingTime"] = self.averageCustomerRingTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.callsAgentHandled != nil {
                    map["CallsAgentHandled"] = self.callsAgentHandled!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsCustomerAnswered != nil {
                    map["CallsCustomerAnswered"] = self.callsCustomerAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.customerAnswerRate != nil {
                    map["CustomerAnswerRate"] = self.customerAnswerRate!
                }
                if self.maxCustomerRingTime != nil {
                    map["MaxCustomerRingTime"] = self.maxCustomerRingTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.totalCustomerRingTime != nil {
                    map["TotalCustomerRingTime"] = self.totalCustomerRingTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentHandleRate"] as? Double {
                    self.agentHandleRate = value
                }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageCustomerRingTime"] as? Double {
                    self.averageCustomerRingTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["CallsAgentHandled"] as? Int64 {
                    self.callsAgentHandled = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsCustomerAnswered"] as? Int64 {
                    self.callsCustomerAnswered = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CustomerAnswerRate"] as? Double {
                    self.customerAnswerRate = value
                }
                if let value = dict["MaxCustomerRingTime"] as? Int64 {
                    self.maxCustomerRingTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["TotalCustomerRingTime"] as? Int64 {
                    self.totalCustomerRingTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
            }
        }
        public class Inbound : Tea.TeaModel {
            public class AccessChannelTypeDetails : Tea.TeaModel {
                public var accessChannelType: String?

                public var callsOffered: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accessChannelType != nil {
                        map["AccessChannelType"] = self.accessChannelType!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccessChannelType"] as? String {
                        self.accessChannelType = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                }
            }
            public var accessChannelTypeDetails: [ListIntervalAgentReportResponseBody.Data.Inbound.AccessChannelTypeDetails]?

            public var averageFirstResponseTime: Double?

            public var averageHoldTime: Double?

            public var averageResponseTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAttendedTransferIn: Int64?

            public var callsAttendedTransferOut: Int64?

            public var callsBlindTransferIn: Int64?

            public var callsBlindTransferOut: Int64?

            public var callsHandled: Int64?

            public var callsHold: Int64?

            public var callsOffered: Int64?

            public var callsRinged: Int64?

            public var handleRate: Double?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var serviceLevel15: Double?

            public var totalHoldTime: Int64?

            public var totalMessagesSent: Int64?

            public var totalMessagesSentByAgent: Int64?

            public var totalMessagesSentByCustomer: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessChannelTypeDetails != nil {
                    var tmp : [Any] = []
                    for k in self.accessChannelTypeDetails! {
                        tmp.append(k.toMap())
                    }
                    map["AccessChannelTypeDetails"] = tmp
                }
                if self.averageFirstResponseTime != nil {
                    map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageResponseTime != nil {
                    map["AverageResponseTime"] = self.averageResponseTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAttendedTransferIn != nil {
                    map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                }
                if self.callsAttendedTransferOut != nil {
                    map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                }
                if self.callsBlindTransferIn != nil {
                    map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                }
                if self.callsBlindTransferOut != nil {
                    map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.serviceLevel15 != nil {
                    map["ServiceLevel15"] = self.serviceLevel15!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalMessagesSent != nil {
                    map["TotalMessagesSent"] = self.totalMessagesSent!
                }
                if self.totalMessagesSentByAgent != nil {
                    map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                }
                if self.totalMessagesSentByCustomer != nil {
                    map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessChannelTypeDetails"] as? [Any?] {
                    var tmp : [ListIntervalAgentReportResponseBody.Data.Inbound.AccessChannelTypeDetails] = []
                    for v in value {
                        if v != nil {
                            var model = ListIntervalAgentReportResponseBody.Data.Inbound.AccessChannelTypeDetails()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.accessChannelTypeDetails = tmp
                }
                if let value = dict["AverageFirstResponseTime"] as? Double {
                    self.averageFirstResponseTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageResponseTime"] as? Double {
                    self.averageResponseTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                    self.callsAttendedTransferIn = value
                }
                if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                    self.callsAttendedTransferOut = value
                }
                if let value = dict["CallsBlindTransferIn"] as? Int64 {
                    self.callsBlindTransferIn = value
                }
                if let value = dict["CallsBlindTransferOut"] as? Int64 {
                    self.callsBlindTransferOut = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["HandleRate"] as? Double {
                    self.handleRate = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["ServiceLevel15"] as? Double {
                    self.serviceLevel15 = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalMessagesSent"] as? Int64 {
                    self.totalMessagesSent = value
                }
                if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                    self.totalMessagesSentByAgent = value
                }
                if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                    self.totalMessagesSentByCustomer = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Internal_ : Tea.TeaModel {
            public var averageTalkTime: Double?

            public var callsAnswered: Int64?

            public var callsDialed: Int64?

            public var callsHandled: Int64?

            public var callsOffered: Int64?

            public var callsTalked: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsTalked != nil {
                    map["CallsTalked"] = self.callsTalked!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsTalked"] as? Int64 {
                    self.callsTalked = value
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Double?

            public var averageHoldTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAnswered: Int64?

            public var callsAttendedTransferIn: Int64?

            public var callsAttendedTransferOut: Int64?

            public var callsBlindTransferIn: Int64?

            public var callsBlindTransferOut: Int64?

            public var callsDialed: Int64?

            public var callsHold: Int64?

            public var callsRinged: Int64?

            public var maxDialingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsAttendedTransferIn != nil {
                    map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                }
                if self.callsAttendedTransferOut != nil {
                    map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                }
                if self.callsBlindTransferIn != nil {
                    map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                }
                if self.callsBlindTransferOut != nil {
                    map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageDialingTime"] as? Double {
                    self.averageDialingTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                    self.callsAttendedTransferIn = value
                }
                if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                    self.callsAttendedTransferOut = value
                }
                if let value = dict["CallsBlindTransferIn"] as? Int64 {
                    self.callsBlindTransferIn = value
                }
                if let value = dict["CallsBlindTransferOut"] as? Int64 {
                    self.callsBlindTransferOut = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["MaxDialingTime"] as? Int64 {
                    self.maxDialingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalDialingTime"] as? Int64 {
                    self.totalDialingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public class BreakCodeDetailList : Tea.TeaModel {
                public var breakCode: String?

                public var count: Int64?

                public var duration: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.breakCode != nil {
                        map["BreakCode"] = self.breakCode!
                    }
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BreakCode"] as? String {
                        self.breakCode = value
                    }
                    if let value = dict["Count"] as? Int64 {
                        self.count = value
                    }
                    if let value = dict["Duration"] as? Int64 {
                        self.duration = value
                    }
                }
            }
            public var averageBreakTime: Double?

            public var averageHoldTime: Double?

            public var averageReadyTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var breakCodeDetailList: [ListIntervalAgentReportResponseBody.Data.Overall.BreakCodeDetailList]?

            public var firstCheckInTime: Int64?

            public var lastCheckOutTime: Int64?

            public var lastCheckoutTime: Int64?

            public var maxBreakTime: Int64?

            public var maxHoldTime: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalHoldTime: Int64?

            public var totalLoggedInTime: Int64?

            public var totalOffSiteLoggedInTime: Int64?

            public var totalOffSiteOnlineTime: Int64?

            public var totalOfficePhoneLoggedInTime: Int64?

            public var totalOfficePhoneOnlineTime: Int64?

            public var totalOnSiteLoggedInTime: Int64?

            public var totalOnSiteOnlineTime: Int64?

            public var totalOutboundScenarioLoggedInTime: Int64?

            public var totalOutboundScenarioReadyTime: Int64?

            public var totalOutboundScenarioTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageBreakTime != nil {
                    map["AverageBreakTime"] = self.averageBreakTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.breakCodeDetailList != nil {
                    var tmp : [Any] = []
                    for k in self.breakCodeDetailList! {
                        tmp.append(k.toMap())
                    }
                    map["BreakCodeDetailList"] = tmp
                }
                if self.firstCheckInTime != nil {
                    map["FirstCheckInTime"] = self.firstCheckInTime!
                }
                if self.lastCheckOutTime != nil {
                    map["LastCheckOutTime"] = self.lastCheckOutTime!
                }
                if self.lastCheckoutTime != nil {
                    map["LastCheckoutTime"] = self.lastCheckoutTime!
                }
                if self.maxBreakTime != nil {
                    map["MaxBreakTime"] = self.maxBreakTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalOffSiteLoggedInTime != nil {
                    map["TotalOffSiteLoggedInTime"] = self.totalOffSiteLoggedInTime!
                }
                if self.totalOffSiteOnlineTime != nil {
                    map["TotalOffSiteOnlineTime"] = self.totalOffSiteOnlineTime!
                }
                if self.totalOfficePhoneLoggedInTime != nil {
                    map["TotalOfficePhoneLoggedInTime"] = self.totalOfficePhoneLoggedInTime!
                }
                if self.totalOfficePhoneOnlineTime != nil {
                    map["TotalOfficePhoneOnlineTime"] = self.totalOfficePhoneOnlineTime!
                }
                if self.totalOnSiteLoggedInTime != nil {
                    map["TotalOnSiteLoggedInTime"] = self.totalOnSiteLoggedInTime!
                }
                if self.totalOnSiteOnlineTime != nil {
                    map["TotalOnSiteOnlineTime"] = self.totalOnSiteOnlineTime!
                }
                if self.totalOutboundScenarioLoggedInTime != nil {
                    map["TotalOutboundScenarioLoggedInTime"] = self.totalOutboundScenarioLoggedInTime!
                }
                if self.totalOutboundScenarioReadyTime != nil {
                    map["TotalOutboundScenarioReadyTime"] = self.totalOutboundScenarioReadyTime!
                }
                if self.totalOutboundScenarioTime != nil {
                    map["TotalOutboundScenarioTime"] = self.totalOutboundScenarioTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageBreakTime"] as? Double {
                    self.averageBreakTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageReadyTime"] as? Double {
                    self.averageReadyTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["BreakCodeDetailList"] as? [Any?] {
                    var tmp : [ListIntervalAgentReportResponseBody.Data.Overall.BreakCodeDetailList] = []
                    for v in value {
                        if v != nil {
                            var model = ListIntervalAgentReportResponseBody.Data.Overall.BreakCodeDetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.breakCodeDetailList = tmp
                }
                if let value = dict["FirstCheckInTime"] as? Int64 {
                    self.firstCheckInTime = value
                }
                if let value = dict["LastCheckOutTime"] as? Int64 {
                    self.lastCheckOutTime = value
                }
                if let value = dict["LastCheckoutTime"] as? Int64 {
                    self.lastCheckoutTime = value
                }
                if let value = dict["MaxBreakTime"] as? Int64 {
                    self.maxBreakTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxReadyTime"] as? Int64 {
                    self.maxReadyTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["OccupancyRate"] as? Double {
                    self.occupancyRate = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalBreakTime"] as? Int64 {
                    self.totalBreakTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalLoggedInTime"] as? Int64 {
                    self.totalLoggedInTime = value
                }
                if let value = dict["TotalOffSiteLoggedInTime"] as? Int64 {
                    self.totalOffSiteLoggedInTime = value
                }
                if let value = dict["TotalOffSiteOnlineTime"] as? Int64 {
                    self.totalOffSiteOnlineTime = value
                }
                if let value = dict["TotalOfficePhoneLoggedInTime"] as? Int64 {
                    self.totalOfficePhoneLoggedInTime = value
                }
                if let value = dict["TotalOfficePhoneOnlineTime"] as? Int64 {
                    self.totalOfficePhoneOnlineTime = value
                }
                if let value = dict["TotalOnSiteLoggedInTime"] as? Int64 {
                    self.totalOnSiteLoggedInTime = value
                }
                if let value = dict["TotalOnSiteOnlineTime"] as? Int64 {
                    self.totalOnSiteOnlineTime = value
                }
                if let value = dict["TotalOutboundScenarioLoggedInTime"] as? Int64 {
                    self.totalOutboundScenarioLoggedInTime = value
                }
                if let value = dict["TotalOutboundScenarioReadyTime"] as? Int64 {
                    self.totalOutboundScenarioReadyTime = value
                }
                if let value = dict["TotalOutboundScenarioTime"] as? Int64 {
                    self.totalOutboundScenarioTime = value
                }
                if let value = dict["TotalReadyTime"] as? Int64 {
                    self.totalReadyTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public var back2Back: ListIntervalAgentReportResponseBody.Data.Back2Back?

        public var inbound: ListIntervalAgentReportResponseBody.Data.Inbound?

        public var internal_: ListIntervalAgentReportResponseBody.Data.Internal_?

        public var outbound: ListIntervalAgentReportResponseBody.Data.Outbound?

        public var overall: ListIntervalAgentReportResponseBody.Data.Overall?

        public var statsTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.back2Back?.validate()
            try self.inbound?.validate()
            try self.internal_?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.back2Back != nil {
                map["Back2Back"] = self.back2Back?.toMap()
            }
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.internal_ != nil {
                map["Internal"] = self.internal_?.toMap()
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            if self.statsTime != nil {
                map["StatsTime"] = self.statsTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Back2Back"] as? [String: Any?] {
                var model = ListIntervalAgentReportResponseBody.Data.Back2Back()
                model.fromMap(value)
                self.back2Back = model
            }
            if let value = dict["Inbound"] as? [String: Any?] {
                var model = ListIntervalAgentReportResponseBody.Data.Inbound()
                model.fromMap(value)
                self.inbound = model
            }
            if let value = dict["Internal"] as? [String: Any?] {
                var model = ListIntervalAgentReportResponseBody.Data.Internal_()
                model.fromMap(value)
                self.internal_ = model
            }
            if let value = dict["Outbound"] as? [String: Any?] {
                var model = ListIntervalAgentReportResponseBody.Data.Outbound()
                model.fromMap(value)
                self.outbound = model
            }
            if let value = dict["Overall"] as? [String: Any?] {
                var model = ListIntervalAgentReportResponseBody.Data.Overall()
                model.fromMap(value)
                self.overall = model
            }
            if let value = dict["StatsTime"] as? Int64 {
                self.statsTime = value
            }
        }
    }
    public var code: String?

    public var data: [ListIntervalAgentReportResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListIntervalAgentReportResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListIntervalAgentReportResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIntervalAgentReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIntervalAgentReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIntervalAgentReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIntervalAgentSkillGroupReportRequest : Tea.TeaModel {
    public var agentId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var interval: String?

    public var skillGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListIntervalAgentSkillGroupReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Back2Back : Tea.TeaModel {
            public var agentAnswerRate: Double?

            public var agentHandleRate: Double?

            public var answerRate: Double?

            public var averageCustomerRingTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Int64?

            public var callsAgentHandled: Int64?

            public var callsAnswered: Int64?

            public var callsCustomerAnswered: Int64?

            public var callsCustomerHandled: Int64?

            public var callsDialed: Int64?

            public var customerAnswerRate: Double?

            public var customerHandleRate: Double?

            public var maxCustomerRingTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var totalCustomerRingTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentAnswerRate != nil {
                    map["AgentAnswerRate"] = self.agentAnswerRate!
                }
                if self.agentHandleRate != nil {
                    map["AgentHandleRate"] = self.agentHandleRate!
                }
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageCustomerRingTime != nil {
                    map["AverageCustomerRingTime"] = self.averageCustomerRingTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.callsAgentHandled != nil {
                    map["CallsAgentHandled"] = self.callsAgentHandled!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsCustomerAnswered != nil {
                    map["CallsCustomerAnswered"] = self.callsCustomerAnswered!
                }
                if self.callsCustomerHandled != nil {
                    map["CallsCustomerHandled"] = self.callsCustomerHandled!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.customerAnswerRate != nil {
                    map["CustomerAnswerRate"] = self.customerAnswerRate!
                }
                if self.customerHandleRate != nil {
                    map["CustomerHandleRate"] = self.customerHandleRate!
                }
                if self.maxCustomerRingTime != nil {
                    map["MaxCustomerRingTime"] = self.maxCustomerRingTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.totalCustomerRingTime != nil {
                    map["TotalCustomerRingTime"] = self.totalCustomerRingTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentAnswerRate"] as? Double {
                    self.agentAnswerRate = value
                }
                if let value = dict["AgentHandleRate"] as? Double {
                    self.agentHandleRate = value
                }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageCustomerRingTime"] as? Double {
                    self.averageCustomerRingTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Int64 {
                    self.averageTalkTime = value
                }
                if let value = dict["CallsAgentHandled"] as? Int64 {
                    self.callsAgentHandled = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsCustomerAnswered"] as? Int64 {
                    self.callsCustomerAnswered = value
                }
                if let value = dict["CallsCustomerHandled"] as? Int64 {
                    self.callsCustomerHandled = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CustomerAnswerRate"] as? Double {
                    self.customerAnswerRate = value
                }
                if let value = dict["CustomerHandleRate"] as? Double {
                    self.customerHandleRate = value
                }
                if let value = dict["MaxCustomerRingTime"] as? Int64 {
                    self.maxCustomerRingTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["TotalCustomerRingTime"] as? Int64 {
                    self.totalCustomerRingTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
            }
        }
        public class Inbound : Tea.TeaModel {
            public var averageFirstResponseTime: Double?

            public var averageHoldTime: Double?

            public var averageResponseTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAttendedTransferIn: Int64?

            public var callsAttendedTransferOut: Int64?

            public var callsBlindTransferIn: Int64?

            public var callsBlindTransferOut: Int64?

            public var callsHandled: Int64?

            public var callsHold: Int64?

            public var callsOffered: Int64?

            public var callsRinged: Int64?

            public var handleRate: Double?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalHoldTime: Int64?

            public var totalMessagesSent: Int64?

            public var totalMessagesSentByAgent: Int64?

            public var totalMessagesSentByCustomer: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageFirstResponseTime != nil {
                    map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageResponseTime != nil {
                    map["AverageResponseTime"] = self.averageResponseTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAttendedTransferIn != nil {
                    map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                }
                if self.callsAttendedTransferOut != nil {
                    map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                }
                if self.callsBlindTransferIn != nil {
                    map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                }
                if self.callsBlindTransferOut != nil {
                    map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalMessagesSent != nil {
                    map["TotalMessagesSent"] = self.totalMessagesSent!
                }
                if self.totalMessagesSentByAgent != nil {
                    map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                }
                if self.totalMessagesSentByCustomer != nil {
                    map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageFirstResponseTime"] as? Double {
                    self.averageFirstResponseTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageResponseTime"] as? Double {
                    self.averageResponseTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                    self.callsAttendedTransferIn = value
                }
                if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                    self.callsAttendedTransferOut = value
                }
                if let value = dict["CallsBlindTransferIn"] as? Int64 {
                    self.callsBlindTransferIn = value
                }
                if let value = dict["CallsBlindTransferOut"] as? Int64 {
                    self.callsBlindTransferOut = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["HandleRate"] as? Double {
                    self.handleRate = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalMessagesSent"] as? Int64 {
                    self.totalMessagesSent = value
                }
                if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                    self.totalMessagesSentByAgent = value
                }
                if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                    self.totalMessagesSentByCustomer = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Internal_ : Tea.TeaModel {
            public var averageTalkTime: Double?

            public var callsAnswered: Int64?

            public var callsDialed: Int64?

            public var callsHandled: Int64?

            public var callsOffered: Int64?

            public var callsTalk: Int64?

            public var callsTalked: Int64?

            public var maxTalkTime: Int64?

            public var totalTalkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsTalk != nil {
                    map["CallsTalk"] = self.callsTalk!
                }
                if self.callsTalked != nil {
                    map["CallsTalked"] = self.callsTalked!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsTalk"] as? Int64 {
                    self.callsTalk = value
                }
                if let value = dict["CallsTalked"] as? Int64 {
                    self.callsTalked = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Double?

            public var averageHoldTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAnswered: Int64?

            public var callsAttendedTransferIn: Int64?

            public var callsAttendedTransferOut: Int64?

            public var callsBlindTransferIn: Int64?

            public var callsBlindTransferOut: Int64?

            public var callsDialed: Int64?

            public var callsHold: Int64?

            public var callsRinged: Int64?

            public var maxDialingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsAttendedTransferIn != nil {
                    map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                }
                if self.callsAttendedTransferOut != nil {
                    map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                }
                if self.callsBlindTransferIn != nil {
                    map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                }
                if self.callsBlindTransferOut != nil {
                    map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageDialingTime"] as? Double {
                    self.averageDialingTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                    self.callsAttendedTransferIn = value
                }
                if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                    self.callsAttendedTransferOut = value
                }
                if let value = dict["CallsBlindTransferIn"] as? Int64 {
                    self.callsBlindTransferIn = value
                }
                if let value = dict["CallsBlindTransferOut"] as? Int64 {
                    self.callsBlindTransferOut = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["MaxDialingTime"] as? Int64 {
                    self.maxDialingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalDialingTime"] as? Int64 {
                    self.totalDialingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public class BreakCodeDetailList : Tea.TeaModel {
                public var breakCode: String?

                public var count: Int64?

                public var duration: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.breakCode != nil {
                        map["BreakCode"] = self.breakCode!
                    }
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BreakCode"] as? String {
                        self.breakCode = value
                    }
                    if let value = dict["Count"] as? Int64 {
                        self.count = value
                    }
                    if let value = dict["Duration"] as? Int64 {
                        self.duration = value
                    }
                }
            }
            public var averageBreakTime: Double?

            public var averageHoldTime: Double?

            public var averageReadyTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var breakCodeDetailList: [ListIntervalAgentSkillGroupReportResponseBody.Data.Overall.BreakCodeDetailList]?

            public var firstCheckInTime: Int64?

            public var lastCheckOutTime: Int64?

            public var lastCheckoutTime: Int64?

            public var maxBreakTime: Int64?

            public var maxHoldTime: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalHoldTime: Int64?

            public var totalLoggedInTime: Int64?

            public var totalOffSiteLoggedInTime: String?

            public var totalOfficePhoneLoggedInTime: String?

            public var totalOnSiteLoggedInTime: String?

            public var totalOutboundScenarioLoggedInTime: Int64?

            public var totalOutboundScenarioReadyTime: Int64?

            public var totalOutboundScenarioTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageBreakTime != nil {
                    map["AverageBreakTime"] = self.averageBreakTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.breakCodeDetailList != nil {
                    var tmp : [Any] = []
                    for k in self.breakCodeDetailList! {
                        tmp.append(k.toMap())
                    }
                    map["BreakCodeDetailList"] = tmp
                }
                if self.firstCheckInTime != nil {
                    map["FirstCheckInTime"] = self.firstCheckInTime!
                }
                if self.lastCheckOutTime != nil {
                    map["LastCheckOutTime"] = self.lastCheckOutTime!
                }
                if self.lastCheckoutTime != nil {
                    map["LastCheckoutTime"] = self.lastCheckoutTime!
                }
                if self.maxBreakTime != nil {
                    map["MaxBreakTime"] = self.maxBreakTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalOffSiteLoggedInTime != nil {
                    map["TotalOffSiteLoggedInTime"] = self.totalOffSiteLoggedInTime!
                }
                if self.totalOfficePhoneLoggedInTime != nil {
                    map["TotalOfficePhoneLoggedInTime"] = self.totalOfficePhoneLoggedInTime!
                }
                if self.totalOnSiteLoggedInTime != nil {
                    map["TotalOnSiteLoggedInTime"] = self.totalOnSiteLoggedInTime!
                }
                if self.totalOutboundScenarioLoggedInTime != nil {
                    map["TotalOutboundScenarioLoggedInTime"] = self.totalOutboundScenarioLoggedInTime!
                }
                if self.totalOutboundScenarioReadyTime != nil {
                    map["TotalOutboundScenarioReadyTime"] = self.totalOutboundScenarioReadyTime!
                }
                if self.totalOutboundScenarioTime != nil {
                    map["TotalOutboundScenarioTime"] = self.totalOutboundScenarioTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageBreakTime"] as? Double {
                    self.averageBreakTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageReadyTime"] as? Double {
                    self.averageReadyTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["BreakCodeDetailList"] as? [Any?] {
                    var tmp : [ListIntervalAgentSkillGroupReportResponseBody.Data.Overall.BreakCodeDetailList] = []
                    for v in value {
                        if v != nil {
                            var model = ListIntervalAgentSkillGroupReportResponseBody.Data.Overall.BreakCodeDetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.breakCodeDetailList = tmp
                }
                if let value = dict["FirstCheckInTime"] as? Int64 {
                    self.firstCheckInTime = value
                }
                if let value = dict["LastCheckOutTime"] as? Int64 {
                    self.lastCheckOutTime = value
                }
                if let value = dict["LastCheckoutTime"] as? Int64 {
                    self.lastCheckoutTime = value
                }
                if let value = dict["MaxBreakTime"] as? Int64 {
                    self.maxBreakTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxReadyTime"] as? Int64 {
                    self.maxReadyTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["OccupancyRate"] as? Double {
                    self.occupancyRate = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalBreakTime"] as? Int64 {
                    self.totalBreakTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalLoggedInTime"] as? Int64 {
                    self.totalLoggedInTime = value
                }
                if let value = dict["TotalOffSiteLoggedInTime"] as? String {
                    self.totalOffSiteLoggedInTime = value
                }
                if let value = dict["TotalOfficePhoneLoggedInTime"] as? String {
                    self.totalOfficePhoneLoggedInTime = value
                }
                if let value = dict["TotalOnSiteLoggedInTime"] as? String {
                    self.totalOnSiteLoggedInTime = value
                }
                if let value = dict["TotalOutboundScenarioLoggedInTime"] as? Int64 {
                    self.totalOutboundScenarioLoggedInTime = value
                }
                if let value = dict["TotalOutboundScenarioReadyTime"] as? Int64 {
                    self.totalOutboundScenarioReadyTime = value
                }
                if let value = dict["TotalOutboundScenarioTime"] as? Int64 {
                    self.totalOutboundScenarioTime = value
                }
                if let value = dict["TotalReadyTime"] as? Int64 {
                    self.totalReadyTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public var back2Back: ListIntervalAgentSkillGroupReportResponseBody.Data.Back2Back?

        public var inbound: ListIntervalAgentSkillGroupReportResponseBody.Data.Inbound?

        public var internal_: ListIntervalAgentSkillGroupReportResponseBody.Data.Internal_?

        public var outbound: ListIntervalAgentSkillGroupReportResponseBody.Data.Outbound?

        public var overall: ListIntervalAgentSkillGroupReportResponseBody.Data.Overall?

        public var statsTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.back2Back?.validate()
            try self.inbound?.validate()
            try self.internal_?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.back2Back != nil {
                map["Back2Back"] = self.back2Back?.toMap()
            }
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.internal_ != nil {
                map["Internal"] = self.internal_?.toMap()
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            if self.statsTime != nil {
                map["StatsTime"] = self.statsTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Back2Back"] as? [String: Any?] {
                var model = ListIntervalAgentSkillGroupReportResponseBody.Data.Back2Back()
                model.fromMap(value)
                self.back2Back = model
            }
            if let value = dict["Inbound"] as? [String: Any?] {
                var model = ListIntervalAgentSkillGroupReportResponseBody.Data.Inbound()
                model.fromMap(value)
                self.inbound = model
            }
            if let value = dict["Internal"] as? [String: Any?] {
                var model = ListIntervalAgentSkillGroupReportResponseBody.Data.Internal_()
                model.fromMap(value)
                self.internal_ = model
            }
            if let value = dict["Outbound"] as? [String: Any?] {
                var model = ListIntervalAgentSkillGroupReportResponseBody.Data.Outbound()
                model.fromMap(value)
                self.outbound = model
            }
            if let value = dict["Overall"] as? [String: Any?] {
                var model = ListIntervalAgentSkillGroupReportResponseBody.Data.Overall()
                model.fromMap(value)
                self.overall = model
            }
            if let value = dict["StatsTime"] as? Int64 {
                self.statsTime = value
            }
        }
    }
    public var code: String?

    public var data: [ListIntervalAgentSkillGroupReportResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListIntervalAgentSkillGroupReportResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListIntervalAgentSkillGroupReportResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIntervalAgentSkillGroupReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIntervalAgentSkillGroupReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIntervalAgentSkillGroupReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIntervalInstanceReportRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var interval: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListIntervalInstanceReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Inbound : Tea.TeaModel {
            public var abandonRate: Double?

            public var abandonedRate: Double?

            public var averageAbandonTime: Double?

            public var averageAbandonedInIVRTime: Double?

            public var averageAbandonedInQueueTime: Double?

            public var averageAbandonedInRingTime: Double?

            public var averageFirstResponseTime: Double?

            public var averageHoldTime: Double?

            public var averageResponseTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWaitTime: Double?

            public var averageWorkTime: Double?

            public var callsAbandoned: Int64?

            public var callsAbandonedInIVR: Int64?

            public var callsAbandonedInQueue: Int64?

            public var callsAbandonedInRing: Int64?

            public var callsAbandonedInVoiceNavigator: Int64?

            public var callsAttendedTransferred: Int64?

            public var callsBlindTransferred: Int64?

            public var callsCausedIVRException: Int64?

            public var callsForwardToOutsideNumber: Int64?

            public var callsHandled: Int64?

            public var callsHold: Int64?

            public var callsIVRException: Int64?

            public var callsOffered: Int64?

            public var callsQueued: Int64?

            public var callsQueuingFailed: Int64?

            public var callsQueuingOverflow: Int64?

            public var callsQueuingTimeout: Int64?

            public var callsRinged: Int64?

            public var callsToVoicemail: Int64?

            public var callsVoicemail: Int64?

            public var handleRate: Double?

            public var maxAbandonTime: Int64?

            public var maxAbandonedInIVRTime: Int64?

            public var maxAbandonedInQueueTime: Int64?

            public var maxAbandonedInRingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWaitTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var serviceLevel20: Double?

            public var totalAbandonTime: Int64?

            public var totalAbandonedInIVRTime: Int64?

            public var totalAbandonedInQueueTime: Int64?

            public var totalAbandonedInRingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalMessagesSent: Int64?

            public var totalMessagesSentByAgent: Int64?

            public var totalMessagesSentByCustomer: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWaitTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abandonRate != nil {
                    map["AbandonRate"] = self.abandonRate!
                }
                if self.abandonedRate != nil {
                    map["AbandonedRate"] = self.abandonedRate!
                }
                if self.averageAbandonTime != nil {
                    map["AverageAbandonTime"] = self.averageAbandonTime!
                }
                if self.averageAbandonedInIVRTime != nil {
                    map["AverageAbandonedInIVRTime"] = self.averageAbandonedInIVRTime!
                }
                if self.averageAbandonedInQueueTime != nil {
                    map["AverageAbandonedInQueueTime"] = self.averageAbandonedInQueueTime!
                }
                if self.averageAbandonedInRingTime != nil {
                    map["AverageAbandonedInRingTime"] = self.averageAbandonedInRingTime!
                }
                if self.averageFirstResponseTime != nil {
                    map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageResponseTime != nil {
                    map["AverageResponseTime"] = self.averageResponseTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWaitTime != nil {
                    map["AverageWaitTime"] = self.averageWaitTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAbandoned != nil {
                    map["CallsAbandoned"] = self.callsAbandoned!
                }
                if self.callsAbandonedInIVR != nil {
                    map["CallsAbandonedInIVR"] = self.callsAbandonedInIVR!
                }
                if self.callsAbandonedInQueue != nil {
                    map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                }
                if self.callsAbandonedInRing != nil {
                    map["CallsAbandonedInRing"] = self.callsAbandonedInRing!
                }
                if self.callsAbandonedInVoiceNavigator != nil {
                    map["CallsAbandonedInVoiceNavigator"] = self.callsAbandonedInVoiceNavigator!
                }
                if self.callsAttendedTransferred != nil {
                    map["CallsAttendedTransferred"] = self.callsAttendedTransferred!
                }
                if self.callsBlindTransferred != nil {
                    map["CallsBlindTransferred"] = self.callsBlindTransferred!
                }
                if self.callsCausedIVRException != nil {
                    map["CallsCausedIVRException"] = self.callsCausedIVRException!
                }
                if self.callsForwardToOutsideNumber != nil {
                    map["CallsForwardToOutsideNumber"] = self.callsForwardToOutsideNumber!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsIVRException != nil {
                    map["CallsIVRException"] = self.callsIVRException!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsQueued != nil {
                    map["CallsQueued"] = self.callsQueued!
                }
                if self.callsQueuingFailed != nil {
                    map["CallsQueuingFailed"] = self.callsQueuingFailed!
                }
                if self.callsQueuingOverflow != nil {
                    map["CallsQueuingOverflow"] = self.callsQueuingOverflow!
                }
                if self.callsQueuingTimeout != nil {
                    map["CallsQueuingTimeout"] = self.callsQueuingTimeout!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.callsToVoicemail != nil {
                    map["CallsToVoicemail"] = self.callsToVoicemail!
                }
                if self.callsVoicemail != nil {
                    map["CallsVoicemail"] = self.callsVoicemail!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxAbandonTime != nil {
                    map["MaxAbandonTime"] = self.maxAbandonTime!
                }
                if self.maxAbandonedInIVRTime != nil {
                    map["MaxAbandonedInIVRTime"] = self.maxAbandonedInIVRTime!
                }
                if self.maxAbandonedInQueueTime != nil {
                    map["MaxAbandonedInQueueTime"] = self.maxAbandonedInQueueTime!
                }
                if self.maxAbandonedInRingTime != nil {
                    map["MaxAbandonedInRingTime"] = self.maxAbandonedInRingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWaitTime != nil {
                    map["MaxWaitTime"] = self.maxWaitTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.serviceLevel20 != nil {
                    map["ServiceLevel20"] = self.serviceLevel20!
                }
                if self.totalAbandonTime != nil {
                    map["TotalAbandonTime"] = self.totalAbandonTime!
                }
                if self.totalAbandonedInIVRTime != nil {
                    map["TotalAbandonedInIVRTime"] = self.totalAbandonedInIVRTime!
                }
                if self.totalAbandonedInQueueTime != nil {
                    map["TotalAbandonedInQueueTime"] = self.totalAbandonedInQueueTime!
                }
                if self.totalAbandonedInRingTime != nil {
                    map["TotalAbandonedInRingTime"] = self.totalAbandonedInRingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalMessagesSent != nil {
                    map["TotalMessagesSent"] = self.totalMessagesSent!
                }
                if self.totalMessagesSentByAgent != nil {
                    map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                }
                if self.totalMessagesSentByCustomer != nil {
                    map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWaitTime != nil {
                    map["TotalWaitTime"] = self.totalWaitTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbandonRate"] as? Double {
                    self.abandonRate = value
                }
                if let value = dict["AbandonedRate"] as? Double {
                    self.abandonedRate = value
                }
                if let value = dict["AverageAbandonTime"] as? Double {
                    self.averageAbandonTime = value
                }
                if let value = dict["AverageAbandonedInIVRTime"] as? Double {
                    self.averageAbandonedInIVRTime = value
                }
                if let value = dict["AverageAbandonedInQueueTime"] as? Double {
                    self.averageAbandonedInQueueTime = value
                }
                if let value = dict["AverageAbandonedInRingTime"] as? Double {
                    self.averageAbandonedInRingTime = value
                }
                if let value = dict["AverageFirstResponseTime"] as? Double {
                    self.averageFirstResponseTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageResponseTime"] as? Double {
                    self.averageResponseTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWaitTime"] as? Double {
                    self.averageWaitTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAbandoned"] as? Int64 {
                    self.callsAbandoned = value
                }
                if let value = dict["CallsAbandonedInIVR"] as? Int64 {
                    self.callsAbandonedInIVR = value
                }
                if let value = dict["CallsAbandonedInQueue"] as? Int64 {
                    self.callsAbandonedInQueue = value
                }
                if let value = dict["CallsAbandonedInRing"] as? Int64 {
                    self.callsAbandonedInRing = value
                }
                if let value = dict["CallsAbandonedInVoiceNavigator"] as? Int64 {
                    self.callsAbandonedInVoiceNavigator = value
                }
                if let value = dict["CallsAttendedTransferred"] as? Int64 {
                    self.callsAttendedTransferred = value
                }
                if let value = dict["CallsBlindTransferred"] as? Int64 {
                    self.callsBlindTransferred = value
                }
                if let value = dict["CallsCausedIVRException"] as? Int64 {
                    self.callsCausedIVRException = value
                }
                if let value = dict["CallsForwardToOutsideNumber"] as? Int64 {
                    self.callsForwardToOutsideNumber = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsIVRException"] as? Int64 {
                    self.callsIVRException = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsQueued"] as? Int64 {
                    self.callsQueued = value
                }
                if let value = dict["CallsQueuingFailed"] as? Int64 {
                    self.callsQueuingFailed = value
                }
                if let value = dict["CallsQueuingOverflow"] as? Int64 {
                    self.callsQueuingOverflow = value
                }
                if let value = dict["CallsQueuingTimeout"] as? Int64 {
                    self.callsQueuingTimeout = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["CallsToVoicemail"] as? Int64 {
                    self.callsToVoicemail = value
                }
                if let value = dict["CallsVoicemail"] as? Int64 {
                    self.callsVoicemail = value
                }
                if let value = dict["HandleRate"] as? Double {
                    self.handleRate = value
                }
                if let value = dict["MaxAbandonTime"] as? Int64 {
                    self.maxAbandonTime = value
                }
                if let value = dict["MaxAbandonedInIVRTime"] as? Int64 {
                    self.maxAbandonedInIVRTime = value
                }
                if let value = dict["MaxAbandonedInQueueTime"] as? Int64 {
                    self.maxAbandonedInQueueTime = value
                }
                if let value = dict["MaxAbandonedInRingTime"] as? Int64 {
                    self.maxAbandonedInRingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWaitTime"] as? Int64 {
                    self.maxWaitTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["ServiceLevel20"] as? Double {
                    self.serviceLevel20 = value
                }
                if let value = dict["TotalAbandonTime"] as? Int64 {
                    self.totalAbandonTime = value
                }
                if let value = dict["TotalAbandonedInIVRTime"] as? Int64 {
                    self.totalAbandonedInIVRTime = value
                }
                if let value = dict["TotalAbandonedInQueueTime"] as? Int64 {
                    self.totalAbandonedInQueueTime = value
                }
                if let value = dict["TotalAbandonedInRingTime"] as? Int64 {
                    self.totalAbandonedInRingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalMessagesSent"] as? Int64 {
                    self.totalMessagesSent = value
                }
                if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                    self.totalMessagesSentByAgent = value
                }
                if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                    self.totalMessagesSentByCustomer = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWaitTime"] as? Int64 {
                    self.totalWaitTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Double?

            public var averageHoldTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAnswered: Int64?

            public var callsAttendedTransferred: Int64?

            public var callsBlindTransferred: Int64?

            public var callsDialed: Int64?

            public var callsHold: Int64?

            public var callsRinged: Int64?

            public var maxDialingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsAttendedTransferred != nil {
                    map["CallsAttendedTransferred"] = self.callsAttendedTransferred!
                }
                if self.callsBlindTransferred != nil {
                    map["CallsBlindTransferred"] = self.callsBlindTransferred!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageDialingTime"] as? Double {
                    self.averageDialingTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsAttendedTransferred"] as? Int64 {
                    self.callsAttendedTransferred = value
                }
                if let value = dict["CallsBlindTransferred"] as? Int64 {
                    self.callsBlindTransferred = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["MaxDialingTime"] as? Int64 {
                    self.maxDialingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalDialingTime"] as? Int64 {
                    self.totalDialingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public var averageBreakTime: Double?

            public var averageHoldTime: Double?

            public var averageReadyTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var maxBreakTime: Int64?

            public var maxHoldTime: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalHoldTime: Int64?

            public var totalLoggedInTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageBreakTime != nil {
                    map["AverageBreakTime"] = self.averageBreakTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.maxBreakTime != nil {
                    map["MaxBreakTime"] = self.maxBreakTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageBreakTime"] as? Double {
                    self.averageBreakTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageReadyTime"] as? Double {
                    self.averageReadyTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["MaxBreakTime"] as? Int64 {
                    self.maxBreakTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxReadyTime"] as? Int64 {
                    self.maxReadyTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["OccupancyRate"] as? Double {
                    self.occupancyRate = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalBreakTime"] as? Int64 {
                    self.totalBreakTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalLoggedInTime"] as? Int64 {
                    self.totalLoggedInTime = value
                }
                if let value = dict["TotalReadyTime"] as? Int64 {
                    self.totalReadyTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public var inbound: ListIntervalInstanceReportResponseBody.Data.Inbound?

        public var outbound: ListIntervalInstanceReportResponseBody.Data.Outbound?

        public var overall: ListIntervalInstanceReportResponseBody.Data.Overall?

        public var statsTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.inbound?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            if self.statsTime != nil {
                map["StatsTime"] = self.statsTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Inbound"] as? [String: Any?] {
                var model = ListIntervalInstanceReportResponseBody.Data.Inbound()
                model.fromMap(value)
                self.inbound = model
            }
            if let value = dict["Outbound"] as? [String: Any?] {
                var model = ListIntervalInstanceReportResponseBody.Data.Outbound()
                model.fromMap(value)
                self.outbound = model
            }
            if let value = dict["Overall"] as? [String: Any?] {
                var model = ListIntervalInstanceReportResponseBody.Data.Overall()
                model.fromMap(value)
                self.overall = model
            }
            if let value = dict["StatsTime"] as? Int64 {
                self.statsTime = value
            }
        }
    }
    public var code: String?

    public var data: [ListIntervalInstanceReportResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListIntervalInstanceReportResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListIntervalInstanceReportResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIntervalInstanceReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIntervalInstanceReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIntervalInstanceReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIntervalSkillGroupReportRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var interval: String?

    public var mediaType: String?

    public var skillGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListIntervalSkillGroupReportResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Back2Back : Tea.TeaModel {
            public var agentHandleRate: Double?

            public var answerRate: String?

            public var averageCustomerRingTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: String?

            public var callsAgentHandled: Int64?

            public var callsAnswered: Int64?

            public var callsCustomerAnswered: Int64?

            public var callsDialed: Int64?

            public var customerAnswerRate: Double?

            public var maxCustomerRingTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: String?

            public var totalCustomerRingTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentHandleRate != nil {
                    map["AgentHandleRate"] = self.agentHandleRate!
                }
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageCustomerRingTime != nil {
                    map["AverageCustomerRingTime"] = self.averageCustomerRingTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.callsAgentHandled != nil {
                    map["CallsAgentHandled"] = self.callsAgentHandled!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsCustomerAnswered != nil {
                    map["CallsCustomerAnswered"] = self.callsCustomerAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.customerAnswerRate != nil {
                    map["CustomerAnswerRate"] = self.customerAnswerRate!
                }
                if self.maxCustomerRingTime != nil {
                    map["MaxCustomerRingTime"] = self.maxCustomerRingTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.totalCustomerRingTime != nil {
                    map["TotalCustomerRingTime"] = self.totalCustomerRingTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentHandleRate"] as? Double {
                    self.agentHandleRate = value
                }
                if let value = dict["AnswerRate"] as? String {
                    self.answerRate = value
                }
                if let value = dict["AverageCustomerRingTime"] as? Double {
                    self.averageCustomerRingTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? String {
                    self.averageTalkTime = value
                }
                if let value = dict["CallsAgentHandled"] as? Int64 {
                    self.callsAgentHandled = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsCustomerAnswered"] as? Int64 {
                    self.callsCustomerAnswered = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CustomerAnswerRate"] as? Double {
                    self.customerAnswerRate = value
                }
                if let value = dict["MaxCustomerRingTime"] as? Int64 {
                    self.maxCustomerRingTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? String {
                    self.maxTalkTime = value
                }
                if let value = dict["TotalCustomerRingTime"] as? Int64 {
                    self.totalCustomerRingTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
            }
        }
        public class Inbound : Tea.TeaModel {
            public var abandonRate: Double?

            public var averageAbandonTime: Double?

            public var averageAbandonedInQueueTime: Double?

            public var averageAbandonedInRingTime: Double?

            public var averageFirstResponseTime: Double?

            public var averageHoldTime: Double?

            public var averageResponseTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWaitTime: Double?

            public var averageWorkTime: Double?

            public var callsAbandoned: Int64?

            public var callsAbandonedInQueue: Int64?

            public var callsAbandonedInRing: Int64?

            public var callsAttendedTransferIn: Int64?

            public var callsAttendedTransferOut: Int64?

            public var callsBlindTransferIn: Int64?

            public var callsBlindTransferOut: Int64?

            public var callsHandled: Int64?

            public var callsHold: Int64?

            public var callsOffered: Int64?

            public var callsOverflow: Int64?

            public var callsQueued: Int64?

            public var callsQueuingOverflow: Int64?

            public var callsQueuingTimeout: Int64?

            public var callsRinged: Int64?

            public var callsTimeout: Int64?

            public var handleRate: Double?

            public var maxAbandonTime: Int64?

            public var maxAbandonedInQueueTime: Int64?

            public var maxAbandonedInRingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWaitTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var serviceLevel20: Double?

            public var totalAbandonTime: Int64?

            public var totalAbandonedInQueueTime: Int64?

            public var totalAbandonedInRingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalMessagesSent: Int64?

            public var totalMessagesSentByAgent: Int64?

            public var totalMessagesSentByCustomer: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWaitTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abandonRate != nil {
                    map["AbandonRate"] = self.abandonRate!
                }
                if self.averageAbandonTime != nil {
                    map["AverageAbandonTime"] = self.averageAbandonTime!
                }
                if self.averageAbandonedInQueueTime != nil {
                    map["AverageAbandonedInQueueTime"] = self.averageAbandonedInQueueTime!
                }
                if self.averageAbandonedInRingTime != nil {
                    map["AverageAbandonedInRingTime"] = self.averageAbandonedInRingTime!
                }
                if self.averageFirstResponseTime != nil {
                    map["AverageFirstResponseTime"] = self.averageFirstResponseTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageResponseTime != nil {
                    map["AverageResponseTime"] = self.averageResponseTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWaitTime != nil {
                    map["AverageWaitTime"] = self.averageWaitTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAbandoned != nil {
                    map["CallsAbandoned"] = self.callsAbandoned!
                }
                if self.callsAbandonedInQueue != nil {
                    map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                }
                if self.callsAbandonedInRing != nil {
                    map["CallsAbandonedInRing"] = self.callsAbandonedInRing!
                }
                if self.callsAttendedTransferIn != nil {
                    map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                }
                if self.callsAttendedTransferOut != nil {
                    map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                }
                if self.callsBlindTransferIn != nil {
                    map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                }
                if self.callsBlindTransferOut != nil {
                    map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.callsOverflow != nil {
                    map["CallsOverflow"] = self.callsOverflow!
                }
                if self.callsQueued != nil {
                    map["CallsQueued"] = self.callsQueued!
                }
                if self.callsQueuingOverflow != nil {
                    map["CallsQueuingOverflow"] = self.callsQueuingOverflow!
                }
                if self.callsQueuingTimeout != nil {
                    map["CallsQueuingTimeout"] = self.callsQueuingTimeout!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.callsTimeout != nil {
                    map["CallsTimeout"] = self.callsTimeout!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxAbandonTime != nil {
                    map["MaxAbandonTime"] = self.maxAbandonTime!
                }
                if self.maxAbandonedInQueueTime != nil {
                    map["MaxAbandonedInQueueTime"] = self.maxAbandonedInQueueTime!
                }
                if self.maxAbandonedInRingTime != nil {
                    map["MaxAbandonedInRingTime"] = self.maxAbandonedInRingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWaitTime != nil {
                    map["MaxWaitTime"] = self.maxWaitTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.serviceLevel20 != nil {
                    map["ServiceLevel20"] = self.serviceLevel20!
                }
                if self.totalAbandonTime != nil {
                    map["TotalAbandonTime"] = self.totalAbandonTime!
                }
                if self.totalAbandonedInQueueTime != nil {
                    map["TotalAbandonedInQueueTime"] = self.totalAbandonedInQueueTime!
                }
                if self.totalAbandonedInRingTime != nil {
                    map["TotalAbandonedInRingTime"] = self.totalAbandonedInRingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalMessagesSent != nil {
                    map["TotalMessagesSent"] = self.totalMessagesSent!
                }
                if self.totalMessagesSentByAgent != nil {
                    map["TotalMessagesSentByAgent"] = self.totalMessagesSentByAgent!
                }
                if self.totalMessagesSentByCustomer != nil {
                    map["TotalMessagesSentByCustomer"] = self.totalMessagesSentByCustomer!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWaitTime != nil {
                    map["TotalWaitTime"] = self.totalWaitTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbandonRate"] as? Double {
                    self.abandonRate = value
                }
                if let value = dict["AverageAbandonTime"] as? Double {
                    self.averageAbandonTime = value
                }
                if let value = dict["AverageAbandonedInQueueTime"] as? Double {
                    self.averageAbandonedInQueueTime = value
                }
                if let value = dict["AverageAbandonedInRingTime"] as? Double {
                    self.averageAbandonedInRingTime = value
                }
                if let value = dict["AverageFirstResponseTime"] as? Double {
                    self.averageFirstResponseTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageResponseTime"] as? Double {
                    self.averageResponseTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWaitTime"] as? Double {
                    self.averageWaitTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAbandoned"] as? Int64 {
                    self.callsAbandoned = value
                }
                if let value = dict["CallsAbandonedInQueue"] as? Int64 {
                    self.callsAbandonedInQueue = value
                }
                if let value = dict["CallsAbandonedInRing"] as? Int64 {
                    self.callsAbandonedInRing = value
                }
                if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                    self.callsAttendedTransferIn = value
                }
                if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                    self.callsAttendedTransferOut = value
                }
                if let value = dict["CallsBlindTransferIn"] as? Int64 {
                    self.callsBlindTransferIn = value
                }
                if let value = dict["CallsBlindTransferOut"] as? Int64 {
                    self.callsBlindTransferOut = value
                }
                if let value = dict["CallsHandled"] as? Int64 {
                    self.callsHandled = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsOffered"] as? Int64 {
                    self.callsOffered = value
                }
                if let value = dict["CallsOverflow"] as? Int64 {
                    self.callsOverflow = value
                }
                if let value = dict["CallsQueued"] as? Int64 {
                    self.callsQueued = value
                }
                if let value = dict["CallsQueuingOverflow"] as? Int64 {
                    self.callsQueuingOverflow = value
                }
                if let value = dict["CallsQueuingTimeout"] as? Int64 {
                    self.callsQueuingTimeout = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["CallsTimeout"] as? Int64 {
                    self.callsTimeout = value
                }
                if let value = dict["HandleRate"] as? Double {
                    self.handleRate = value
                }
                if let value = dict["MaxAbandonTime"] as? Int64 {
                    self.maxAbandonTime = value
                }
                if let value = dict["MaxAbandonedInQueueTime"] as? Int64 {
                    self.maxAbandonedInQueueTime = value
                }
                if let value = dict["MaxAbandonedInRingTime"] as? Int64 {
                    self.maxAbandonedInRingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWaitTime"] as? Int64 {
                    self.maxWaitTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["ServiceLevel20"] as? Double {
                    self.serviceLevel20 = value
                }
                if let value = dict["TotalAbandonTime"] as? Int64 {
                    self.totalAbandonTime = value
                }
                if let value = dict["TotalAbandonedInQueueTime"] as? Int64 {
                    self.totalAbandonedInQueueTime = value
                }
                if let value = dict["TotalAbandonedInRingTime"] as? Int64 {
                    self.totalAbandonedInRingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalMessagesSent"] as? Int64 {
                    self.totalMessagesSent = value
                }
                if let value = dict["TotalMessagesSentByAgent"] as? Int64 {
                    self.totalMessagesSentByAgent = value
                }
                if let value = dict["TotalMessagesSentByCustomer"] as? Int64 {
                    self.totalMessagesSentByCustomer = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWaitTime"] as? Int64 {
                    self.totalWaitTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Double?

            public var averageHoldTime: Double?

            public var averageRingTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var callsAnswered: Int64?

            public var callsAttendedTransferIn: Int64?

            public var callsAttendedTransferOut: Int64?

            public var callsBlindTransferIn: Int64?

            public var callsBlindTransferOut: Int64?

            public var callsDialed: Int64?

            public var callsHold: Int64?

            public var callsRinged: Int64?

            public var maxDialingTime: Int64?

            public var maxHoldTime: Int64?

            public var maxRingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalHoldTime: Int64?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsAttendedTransferIn != nil {
                    map["CallsAttendedTransferIn"] = self.callsAttendedTransferIn!
                }
                if self.callsAttendedTransferOut != nil {
                    map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                }
                if self.callsBlindTransferIn != nil {
                    map["CallsBlindTransferIn"] = self.callsBlindTransferIn!
                }
                if self.callsBlindTransferOut != nil {
                    map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.callsHold != nil {
                    map["CallsHold"] = self.callsHold!
                }
                if self.callsRinged != nil {
                    map["CallsRinged"] = self.callsRinged!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerRate"] as? Double {
                    self.answerRate = value
                }
                if let value = dict["AverageDialingTime"] as? Double {
                    self.averageDialingTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageRingTime"] as? Double {
                    self.averageRingTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["CallsAnswered"] as? Int64 {
                    self.callsAnswered = value
                }
                if let value = dict["CallsAttendedTransferIn"] as? Int64 {
                    self.callsAttendedTransferIn = value
                }
                if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                    self.callsAttendedTransferOut = value
                }
                if let value = dict["CallsBlindTransferIn"] as? Int64 {
                    self.callsBlindTransferIn = value
                }
                if let value = dict["CallsBlindTransferOut"] as? Int64 {
                    self.callsBlindTransferOut = value
                }
                if let value = dict["CallsDialed"] as? Int64 {
                    self.callsDialed = value
                }
                if let value = dict["CallsHold"] as? Int64 {
                    self.callsHold = value
                }
                if let value = dict["CallsRinged"] as? Int64 {
                    self.callsRinged = value
                }
                if let value = dict["MaxDialingTime"] as? Int64 {
                    self.maxDialingTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxRingTime"] as? Int64 {
                    self.maxRingTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalDialingTime"] as? Int64 {
                    self.totalDialingTime = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalRingTime"] as? Int64 {
                    self.totalRingTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public class BreakCodeDetailList : Tea.TeaModel {
                public var breakCode: String?

                public var count: Int64?

                public var duration: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.breakCode != nil {
                        map["BreakCode"] = self.breakCode!
                    }
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BreakCode"] as? String {
                        self.breakCode = value
                    }
                    if let value = dict["Count"] as? Int64 {
                        self.count = value
                    }
                    if let value = dict["Duration"] as? Int64 {
                        self.duration = value
                    }
                }
            }
            public var averageBreakTime: Double?

            public var averageHoldTime: Double?

            public var averageReadyTime: Double?

            public var averageTalkTime: Double?

            public var averageWorkTime: Double?

            public var breakCodeDetailList: [ListIntervalSkillGroupReportResponseBody.Data.Overall.BreakCodeDetailList]?

            public var maxBreakTime: Int64?

            public var maxHoldTime: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionRate: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalHoldTime: Int64?

            public var totalLoggedInTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageBreakTime != nil {
                    map["AverageBreakTime"] = self.averageBreakTime!
                }
                if self.averageHoldTime != nil {
                    map["AverageHoldTime"] = self.averageHoldTime!
                }
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.breakCodeDetailList != nil {
                    var tmp : [Any] = []
                    for k in self.breakCodeDetailList! {
                        tmp.append(k.toMap())
                    }
                    map["BreakCodeDetailList"] = tmp
                }
                if self.maxBreakTime != nil {
                    map["MaxBreakTime"] = self.maxBreakTime!
                }
                if self.maxHoldTime != nil {
                    map["MaxHoldTime"] = self.maxHoldTime!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionRate != nil {
                    map["SatisfactionRate"] = self.satisfactionRate!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalHoldTime != nil {
                    map["TotalHoldTime"] = self.totalHoldTime!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageBreakTime"] as? Double {
                    self.averageBreakTime = value
                }
                if let value = dict["AverageHoldTime"] as? Double {
                    self.averageHoldTime = value
                }
                if let value = dict["AverageReadyTime"] as? Double {
                    self.averageReadyTime = value
                }
                if let value = dict["AverageTalkTime"] as? Double {
                    self.averageTalkTime = value
                }
                if let value = dict["AverageWorkTime"] as? Double {
                    self.averageWorkTime = value
                }
                if let value = dict["BreakCodeDetailList"] as? [Any?] {
                    var tmp : [ListIntervalSkillGroupReportResponseBody.Data.Overall.BreakCodeDetailList] = []
                    for v in value {
                        if v != nil {
                            var model = ListIntervalSkillGroupReportResponseBody.Data.Overall.BreakCodeDetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.breakCodeDetailList = tmp
                }
                if let value = dict["MaxBreakTime"] as? Int64 {
                    self.maxBreakTime = value
                }
                if let value = dict["MaxHoldTime"] as? Int64 {
                    self.maxHoldTime = value
                }
                if let value = dict["MaxReadyTime"] as? Int64 {
                    self.maxReadyTime = value
                }
                if let value = dict["MaxTalkTime"] as? Int64 {
                    self.maxTalkTime = value
                }
                if let value = dict["MaxWorkTime"] as? Int64 {
                    self.maxWorkTime = value
                }
                if let value = dict["OccupancyRate"] as? Double {
                    self.occupancyRate = value
                }
                if let value = dict["SatisfactionIndex"] as? Double {
                    self.satisfactionIndex = value
                }
                if let value = dict["SatisfactionRate"] as? Double {
                    self.satisfactionRate = value
                }
                if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                    self.satisfactionSurveysOffered = value
                }
                if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                    self.satisfactionSurveysResponded = value
                }
                if let value = dict["TotalBreakTime"] as? Int64 {
                    self.totalBreakTime = value
                }
                if let value = dict["TotalCalls"] as? Int64 {
                    self.totalCalls = value
                }
                if let value = dict["TotalHoldTime"] as? Int64 {
                    self.totalHoldTime = value
                }
                if let value = dict["TotalLoggedInTime"] as? Int64 {
                    self.totalLoggedInTime = value
                }
                if let value = dict["TotalReadyTime"] as? Int64 {
                    self.totalReadyTime = value
                }
                if let value = dict["TotalTalkTime"] as? Int64 {
                    self.totalTalkTime = value
                }
                if let value = dict["TotalWorkTime"] as? Int64 {
                    self.totalWorkTime = value
                }
            }
        }
        public var back2Back: ListIntervalSkillGroupReportResponseBody.Data.Back2Back?

        public var inbound: ListIntervalSkillGroupReportResponseBody.Data.Inbound?

        public var outbound: ListIntervalSkillGroupReportResponseBody.Data.Outbound?

        public var overall: ListIntervalSkillGroupReportResponseBody.Data.Overall?

        public var statsTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.back2Back?.validate()
            try self.inbound?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.back2Back != nil {
                map["Back2Back"] = self.back2Back?.toMap()
            }
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            if self.statsTime != nil {
                map["StatsTime"] = self.statsTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Back2Back"] as? [String: Any?] {
                var model = ListIntervalSkillGroupReportResponseBody.Data.Back2Back()
                model.fromMap(value)
                self.back2Back = model
            }
            if let value = dict["Inbound"] as? [String: Any?] {
                var model = ListIntervalSkillGroupReportResponseBody.Data.Inbound()
                model.fromMap(value)
                self.inbound = model
            }
            if let value = dict["Outbound"] as? [String: Any?] {
                var model = ListIntervalSkillGroupReportResponseBody.Data.Outbound()
                model.fromMap(value)
                self.outbound = model
            }
            if let value = dict["Overall"] as? [String: Any?] {
                var model = ListIntervalSkillGroupReportResponseBody.Data.Overall()
                model.fromMap(value)
                self.overall = model
            }
            if let value = dict["StatsTime"] as? Int64 {
                self.statsTime = value
            }
        }
    }
    public var code: String?

    public var data: [ListIntervalSkillGroupReportResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListIntervalSkillGroupReportResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListIntervalSkillGroupReportResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIntervalSkillGroupReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIntervalSkillGroupReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIntervalSkillGroupReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIvrTrackingDetailsRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListIvrTrackingDetailsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var callee: String?

            public var caller: String?

            public var channelId: String?

            public var channelVariables: String?

            public var contactId: String?

            public var enterTime: Int64?

            public var flowId: String?

            public var flowName: String?

            public var instance: String?

            public var leaveTime: Int64?

            public var nodeExitCode: String?

            public var nodeId: String?

            public var nodeName: String?

            public var nodeProperties: [String: Any]?

            public var nodeType: String?

            public var nodeVariables: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callee != nil {
                    map["Callee"] = self.callee!
                }
                if self.caller != nil {
                    map["Caller"] = self.caller!
                }
                if self.channelId != nil {
                    map["ChannelId"] = self.channelId!
                }
                if self.channelVariables != nil {
                    map["ChannelVariables"] = self.channelVariables!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.enterTime != nil {
                    map["EnterTime"] = self.enterTime!
                }
                if self.flowId != nil {
                    map["FlowId"] = self.flowId!
                }
                if self.flowName != nil {
                    map["FlowName"] = self.flowName!
                }
                if self.instance != nil {
                    map["Instance"] = self.instance!
                }
                if self.leaveTime != nil {
                    map["LeaveTime"] = self.leaveTime!
                }
                if self.nodeExitCode != nil {
                    map["NodeExitCode"] = self.nodeExitCode!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.nodeName != nil {
                    map["NodeName"] = self.nodeName!
                }
                if self.nodeProperties != nil {
                    map["NodeProperties"] = self.nodeProperties!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                if self.nodeVariables != nil {
                    map["NodeVariables"] = self.nodeVariables!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Callee"] as? String {
                    self.callee = value
                }
                if let value = dict["Caller"] as? String {
                    self.caller = value
                }
                if let value = dict["ChannelId"] as? String {
                    self.channelId = value
                }
                if let value = dict["ChannelVariables"] as? String {
                    self.channelVariables = value
                }
                if let value = dict["ContactId"] as? String {
                    self.contactId = value
                }
                if let value = dict["EnterTime"] as? Int64 {
                    self.enterTime = value
                }
                if let value = dict["FlowId"] as? String {
                    self.flowId = value
                }
                if let value = dict["FlowName"] as? String {
                    self.flowName = value
                }
                if let value = dict["Instance"] as? String {
                    self.instance = value
                }
                if let value = dict["LeaveTime"] as? Int64 {
                    self.leaveTime = value
                }
                if let value = dict["NodeExitCode"] as? String {
                    self.nodeExitCode = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["NodeName"] as? String {
                    self.nodeName = value
                }
                if let value = dict["NodeProperties"] as? [String: Any] {
                    self.nodeProperties = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
                if let value = dict["NodeVariables"] as? [String: Any] {
                    self.nodeVariables = value
                }
            }
        }
        public var list: [ListIvrTrackingDetailsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListIvrTrackingDetailsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListIvrTrackingDetailsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListIvrTrackingDetailsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListIvrTrackingDetailsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListIvrTrackingDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIvrTrackingDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIvrTrackingDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLegacyAgentEventLogsRequest : Tea.TeaModel {
    public var agentId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListLegacyAgentEventLogsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var agentDropCall: String?

            public var agentNo: String?

            public var callDir: String?

            public var callId: String?

            public var callMode: String?

            public var callType: String?

            public var calleeId: String?

            public var callerId: String?

            public var connId: String?

            public var event: String?

            public var groupNo: String?

            public var outboundScenario: Bool?

            public var phoneNo: String?

            public var statisticDate: String?

            public var targetRequest: String?

            public var targetSelect: String?

            public var tenantId: String?

            public var transferNumber: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentDropCall != nil {
                    map["AgentDropCall"] = self.agentDropCall!
                }
                if self.agentNo != nil {
                    map["AgentNo"] = self.agentNo!
                }
                if self.callDir != nil {
                    map["CallDir"] = self.callDir!
                }
                if self.callId != nil {
                    map["CallId"] = self.callId!
                }
                if self.callMode != nil {
                    map["CallMode"] = self.callMode!
                }
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.calleeId != nil {
                    map["CalleeId"] = self.calleeId!
                }
                if self.callerId != nil {
                    map["CallerId"] = self.callerId!
                }
                if self.connId != nil {
                    map["ConnId"] = self.connId!
                }
                if self.event != nil {
                    map["Event"] = self.event!
                }
                if self.groupNo != nil {
                    map["GroupNo"] = self.groupNo!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.phoneNo != nil {
                    map["PhoneNo"] = self.phoneNo!
                }
                if self.statisticDate != nil {
                    map["StatisticDate"] = self.statisticDate!
                }
                if self.targetRequest != nil {
                    map["TargetRequest"] = self.targetRequest!
                }
                if self.targetSelect != nil {
                    map["TargetSelect"] = self.targetSelect!
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                if self.transferNumber != nil {
                    map["TransferNumber"] = self.transferNumber!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentDropCall"] as? String {
                    self.agentDropCall = value
                }
                if let value = dict["AgentNo"] as? String {
                    self.agentNo = value
                }
                if let value = dict["CallDir"] as? String {
                    self.callDir = value
                }
                if let value = dict["CallId"] as? String {
                    self.callId = value
                }
                if let value = dict["CallMode"] as? String {
                    self.callMode = value
                }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["CalleeId"] as? String {
                    self.calleeId = value
                }
                if let value = dict["CallerId"] as? String {
                    self.callerId = value
                }
                if let value = dict["ConnId"] as? String {
                    self.connId = value
                }
                if let value = dict["Event"] as? String {
                    self.event = value
                }
                if let value = dict["GroupNo"] as? String {
                    self.groupNo = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["PhoneNo"] as? String {
                    self.phoneNo = value
                }
                if let value = dict["StatisticDate"] as? String {
                    self.statisticDate = value
                }
                if let value = dict["TargetRequest"] as? String {
                    self.targetRequest = value
                }
                if let value = dict["TargetSelect"] as? String {
                    self.targetSelect = value
                }
                if let value = dict["TenantId"] as? String {
                    self.tenantId = value
                }
                if let value = dict["TransferNumber"] as? String {
                    self.transferNumber = value
                }
            }
        }
        public var list: [ListLegacyAgentEventLogsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListLegacyAgentEventLogsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListLegacyAgentEventLogsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListLegacyAgentEventLogsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListLegacyAgentEventLogsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListLegacyAgentEventLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLegacyAgentEventLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLegacyAgentEventLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLegacyAgentStatusLogsRequest : Tea.TeaModel {
    public var agentId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentId"] as? String {
            self.agentId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListLegacyAgentStatusLogsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var agentDropCall: String?

            public var agentNo: String?

            public var aliHangupCause: String?

            public var callDir: String?

            public var callId: String?

            public var callType: String?

            public var calleeId: String?

            public var callerId: String?

            public var connId: String?

            public var extend1: String?

            public var extend2: String?

            public var extend3: String?

            public var extend4: String?

            public var groupNo: String?

            public var monitedAgentNo: String?

            public var monitedAgentPhoneNo: String?

            public var outboundScenario: Bool?

            public var phoneNo: String?

            public var statisticDate: String?

            public var statisticTime: Int32?

            public var status: String?

            public var targetRequest: String?

            public var targetSelect: String?

            public var tenantId: String?

            public var transferNo: String?

            public var transferNumber: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentDropCall != nil {
                    map["AgentDropCall"] = self.agentDropCall!
                }
                if self.agentNo != nil {
                    map["AgentNo"] = self.agentNo!
                }
                if self.aliHangupCause != nil {
                    map["AliHangupCause"] = self.aliHangupCause!
                }
                if self.callDir != nil {
                    map["CallDir"] = self.callDir!
                }
                if self.callId != nil {
                    map["CallId"] = self.callId!
                }
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.calleeId != nil {
                    map["CalleeId"] = self.calleeId!
                }
                if self.callerId != nil {
                    map["CallerId"] = self.callerId!
                }
                if self.connId != nil {
                    map["ConnId"] = self.connId!
                }
                if self.extend1 != nil {
                    map["Extend1"] = self.extend1!
                }
                if self.extend2 != nil {
                    map["Extend2"] = self.extend2!
                }
                if self.extend3 != nil {
                    map["Extend3"] = self.extend3!
                }
                if self.extend4 != nil {
                    map["Extend4"] = self.extend4!
                }
                if self.groupNo != nil {
                    map["GroupNo"] = self.groupNo!
                }
                if self.monitedAgentNo != nil {
                    map["MonitedAgentNo"] = self.monitedAgentNo!
                }
                if self.monitedAgentPhoneNo != nil {
                    map["MonitedAgentPhoneNo"] = self.monitedAgentPhoneNo!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.phoneNo != nil {
                    map["PhoneNo"] = self.phoneNo!
                }
                if self.statisticDate != nil {
                    map["StatisticDate"] = self.statisticDate!
                }
                if self.statisticTime != nil {
                    map["StatisticTime"] = self.statisticTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.targetRequest != nil {
                    map["TargetRequest"] = self.targetRequest!
                }
                if self.targetSelect != nil {
                    map["TargetSelect"] = self.targetSelect!
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                if self.transferNo != nil {
                    map["TransferNo"] = self.transferNo!
                }
                if self.transferNumber != nil {
                    map["TransferNumber"] = self.transferNumber!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentDropCall"] as? String {
                    self.agentDropCall = value
                }
                if let value = dict["AgentNo"] as? String {
                    self.agentNo = value
                }
                if let value = dict["AliHangupCause"] as? String {
                    self.aliHangupCause = value
                }
                if let value = dict["CallDir"] as? String {
                    self.callDir = value
                }
                if let value = dict["CallId"] as? String {
                    self.callId = value
                }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["CalleeId"] as? String {
                    self.calleeId = value
                }
                if let value = dict["CallerId"] as? String {
                    self.callerId = value
                }
                if let value = dict["ConnId"] as? String {
                    self.connId = value
                }
                if let value = dict["Extend1"] as? String {
                    self.extend1 = value
                }
                if let value = dict["Extend2"] as? String {
                    self.extend2 = value
                }
                if let value = dict["Extend3"] as? String {
                    self.extend3 = value
                }
                if let value = dict["Extend4"] as? String {
                    self.extend4 = value
                }
                if let value = dict["GroupNo"] as? String {
                    self.groupNo = value
                }
                if let value = dict["MonitedAgentNo"] as? String {
                    self.monitedAgentNo = value
                }
                if let value = dict["MonitedAgentPhoneNo"] as? String {
                    self.monitedAgentPhoneNo = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["PhoneNo"] as? String {
                    self.phoneNo = value
                }
                if let value = dict["StatisticDate"] as? String {
                    self.statisticDate = value
                }
                if let value = dict["StatisticTime"] as? Int32 {
                    self.statisticTime = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TargetRequest"] as? String {
                    self.targetRequest = value
                }
                if let value = dict["TargetSelect"] as? String {
                    self.targetSelect = value
                }
                if let value = dict["TenantId"] as? String {
                    self.tenantId = value
                }
                if let value = dict["TransferNo"] as? String {
                    self.transferNo = value
                }
                if let value = dict["TransferNumber"] as? String {
                    self.transferNumber = value
                }
            }
        }
        public var list: [ListLegacyAgentStatusLogsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListLegacyAgentStatusLogsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListLegacyAgentStatusLogsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListLegacyAgentStatusLogsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListLegacyAgentStatusLogsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListLegacyAgentStatusLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLegacyAgentStatusLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLegacyAgentStatusLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLegacyAppraiseLogsRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListLegacyAppraiseLogsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var acid: String?

            public var contactType: String?

            public var id: Int64?

            public var instanceId: String?

            public var keyMarkRelation: String?

            public var note: String?

            public var parentNote: String?

            public var pressKey: String?

            public var ramId: String?

            public var skillGroupId: String?

            public var statisticDate: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acid != nil {
                    map["Acid"] = self.acid!
                }
                if self.contactType != nil {
                    map["ContactType"] = self.contactType!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.keyMarkRelation != nil {
                    map["KeyMarkRelation"] = self.keyMarkRelation!
                }
                if self.note != nil {
                    map["Note"] = self.note!
                }
                if self.parentNote != nil {
                    map["ParentNote"] = self.parentNote!
                }
                if self.pressKey != nil {
                    map["PressKey"] = self.pressKey!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.statisticDate != nil {
                    map["StatisticDate"] = self.statisticDate!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Acid"] as? String {
                    self.acid = value
                }
                if let value = dict["ContactType"] as? String {
                    self.contactType = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["KeyMarkRelation"] as? String {
                    self.keyMarkRelation = value
                }
                if let value = dict["Note"] as? String {
                    self.note = value
                }
                if let value = dict["ParentNote"] as? String {
                    self.parentNote = value
                }
                if let value = dict["PressKey"] as? String {
                    self.pressKey = value
                }
                if let value = dict["RamId"] as? String {
                    self.ramId = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["StatisticDate"] as? String {
                    self.statisticDate = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var list: [ListLegacyAppraiseLogsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListLegacyAppraiseLogsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListLegacyAppraiseLogsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListLegacyAppraiseLogsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListLegacyAppraiseLogsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListLegacyAppraiseLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLegacyAppraiseLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLegacyAppraiseLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLegacyQueueEventLogsRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListLegacyQueueEventLogsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var acid: String?

            public var ani: String?

            public var answerPhone: String?

            public var answerTime: Int64?

            public var cause: String?

            public var dnis: String?

            public var id: Int64?

            public var queueTime: Int64?

            public var statisticDate: String?

            public var tenantId: String?

            public var vq: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acid != nil {
                    map["Acid"] = self.acid!
                }
                if self.ani != nil {
                    map["Ani"] = self.ani!
                }
                if self.answerPhone != nil {
                    map["AnswerPhone"] = self.answerPhone!
                }
                if self.answerTime != nil {
                    map["AnswerTime"] = self.answerTime!
                }
                if self.cause != nil {
                    map["Cause"] = self.cause!
                }
                if self.dnis != nil {
                    map["Dnis"] = self.dnis!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.queueTime != nil {
                    map["QueueTime"] = self.queueTime!
                }
                if self.statisticDate != nil {
                    map["StatisticDate"] = self.statisticDate!
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                if self.vq != nil {
                    map["Vq"] = self.vq!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Acid"] as? String {
                    self.acid = value
                }
                if let value = dict["Ani"] as? String {
                    self.ani = value
                }
                if let value = dict["AnswerPhone"] as? String {
                    self.answerPhone = value
                }
                if let value = dict["AnswerTime"] as? Int64 {
                    self.answerTime = value
                }
                if let value = dict["Cause"] as? String {
                    self.cause = value
                }
                if let value = dict["Dnis"] as? String {
                    self.dnis = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["QueueTime"] as? Int64 {
                    self.queueTime = value
                }
                if let value = dict["StatisticDate"] as? String {
                    self.statisticDate = value
                }
                if let value = dict["TenantId"] as? String {
                    self.tenantId = value
                }
                if let value = dict["Vq"] as? String {
                    self.vq = value
                }
            }
        }
        public var list: [ListLegacyQueueEventLogsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListLegacyQueueEventLogsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListLegacyQueueEventLogsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListLegacyQueueEventLogsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListLegacyQueueEventLogsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListLegacyQueueEventLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLegacyQueueEventLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLegacyQueueEventLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListMonoRecordingsRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListMonoRecordingsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var agentId: String?

        public var agentName: String?

        public var contactId: String?

        public var duration: String?

        public var fileName: String?

        public var fileUrl: String?

        public var ramId: String?

        public var skillGroupId: String?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentId != nil {
                map["AgentId"] = self.agentId!
            }
            if self.agentName != nil {
                map["AgentName"] = self.agentName!
            }
            if self.contactId != nil {
                map["ContactId"] = self.contactId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.ramId != nil {
                map["RamId"] = self.ramId!
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentId"] as? String {
                self.agentId = value
            }
            if let value = dict["AgentName"] as? String {
                self.agentName = value
            }
            if let value = dict["ContactId"] as? String {
                self.contactId = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["RamId"] as? String {
                self.ramId = value
            }
            if let value = dict["SkillGroupId"] as? String {
                self.skillGroupId = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var code: String?

    public var data: [ListMonoRecordingsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListMonoRecordingsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListMonoRecordingsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListMonoRecordingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListMonoRecordingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListMonoRecordingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListMultiChannelRecordingsRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListMultiChannelRecordingsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class HoldTimeSegments : Tea.TeaModel {
            public var endTime: Int64?

            public var startTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
            }
        }
        public var agentChannelId: String?

        public var agentId: String?

        public var agentName: String?

        public var contactId: String?

        public var duration: String?

        public var fileName: String?

        public var fileUrl: String?

        public var holdTimeSegments: [ListMultiChannelRecordingsResponseBody.Data.HoldTimeSegments]?

        public var ramId: String?

        public var skillGroupId: String?

        public var startTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentChannelId != nil {
                map["AgentChannelId"] = self.agentChannelId!
            }
            if self.agentId != nil {
                map["AgentId"] = self.agentId!
            }
            if self.agentName != nil {
                map["AgentName"] = self.agentName!
            }
            if self.contactId != nil {
                map["ContactId"] = self.contactId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.holdTimeSegments != nil {
                var tmp : [Any] = []
                for k in self.holdTimeSegments! {
                    tmp.append(k.toMap())
                }
                map["HoldTimeSegments"] = tmp
            }
            if self.ramId != nil {
                map["RamId"] = self.ramId!
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AgentChannelId"] as? String {
                self.agentChannelId = value
            }
            if let value = dict["AgentId"] as? String {
                self.agentId = value
            }
            if let value = dict["AgentName"] as? String {
                self.agentName = value
            }
            if let value = dict["ContactId"] as? String {
                self.contactId = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["HoldTimeSegments"] as? [Any?] {
                var tmp : [ListMultiChannelRecordingsResponseBody.Data.HoldTimeSegments] = []
                for v in value {
                    if v != nil {
                        var model = ListMultiChannelRecordingsResponseBody.Data.HoldTimeSegments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.holdTimeSegments = tmp
            }
            if let value = dict["RamId"] as? String {
                self.ramId = value
            }
            if let value = dict["SkillGroupId"] as? String {
                self.skillGroupId = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
        }
    }
    public var code: String?

    public var data: [ListMultiChannelRecordingsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListMultiChannelRecordingsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListMultiChannelRecordingsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListMultiChannelRecordingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListMultiChannelRecordingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListMultiChannelRecordingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOutboundNumbersOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIdList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ListOutboundNumbersOfUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var city: String?

            public var number: String?

            public var provider: String?

            public var providerCode: String?

            public var providerDisplayName: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.provider != nil {
                    map["Provider"] = self.provider!
                }
                if self.providerCode != nil {
                    map["ProviderCode"] = self.providerCode!
                }
                if self.providerDisplayName != nil {
                    map["ProviderDisplayName"] = self.providerDisplayName!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Provider"] as? String {
                    self.provider = value
                }
                if let value = dict["ProviderCode"] as? String {
                    self.providerCode = value
                }
                if let value = dict["ProviderDisplayName"] as? String {
                    self.providerDisplayName = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
            }
        }
        public var list: [ListOutboundNumbersOfUserResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListOutboundNumbersOfUserResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListOutboundNumbersOfUserResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListOutboundNumbersOfUserResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListOutboundNumbersOfUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListOutboundNumbersOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOutboundNumbersOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOutboundNumbersOfUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPersonalNumbersOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var isMember: Bool?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isMember != nil {
            map["IsMember"] = self.isMember!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsMember"] as? Bool {
            self.isMember = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ListPersonalNumbersOfUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var active: Bool?

            public var city: String?

            public var contactFlowId: String?

            public var instanceId: String?

            public var number: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.active != nil {
                    map["Active"] = self.active!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Active"] as? Bool {
                    self.active = value
                }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["ContactFlowId"] as? String {
                    self.contactFlowId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
            }
        }
        public var list: [ListPersonalNumbersOfUserResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListPersonalNumbersOfUserResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListPersonalNumbersOfUserResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListPersonalNumbersOfUserResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListPersonalNumbersOfUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPersonalNumbersOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPersonalNumbersOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPersonalNumbersOfUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPhoneNumbersRequest : Tea.TeaModel {
    public var active: Bool?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.active != nil {
            map["Active"] = self.active!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Active"] as? Bool {
            self.active = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class ListPhoneNumbersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class SkillGroups : Tea.TeaModel {
                public var displayName: String?

                public var instanceId: String?

                public var name: String?

                public var skillGroupId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                }
            }
            public var active: Bool?

            public var city: String?

            public var contactFlowId: String?

            public var contactFlowName: String?

            public var createTime: String?

            public var instanceId: String?

            public var number: String?

            public var provider: String?

            public var province: String?

            public var skillGroups: [ListPhoneNumbersResponseBody.Data.List.SkillGroups]?

            public var tags: String?

            public var usage: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.active != nil {
                    map["Active"] = self.active!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.contactFlowName != nil {
                    map["ContactFlowName"] = self.contactFlowName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.provider != nil {
                    map["Provider"] = self.provider!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                if self.skillGroups != nil {
                    var tmp : [Any] = []
                    for k in self.skillGroups! {
                        tmp.append(k.toMap())
                    }
                    map["SkillGroups"] = tmp
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Active"] as? Bool {
                    self.active = value
                }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["ContactFlowId"] as? String {
                    self.contactFlowId = value
                }
                if let value = dict["ContactFlowName"] as? String {
                    self.contactFlowName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Provider"] as? String {
                    self.provider = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
                if let value = dict["SkillGroups"] as? [Any?] {
                    var tmp : [ListPhoneNumbersResponseBody.Data.List.SkillGroups] = []
                    for v in value {
                        if v != nil {
                            var model = ListPhoneNumbersResponseBody.Data.List.SkillGroups()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.skillGroups = tmp
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Usage"] as? String {
                    self.usage = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var list: [ListPhoneNumbersResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListPhoneNumbersResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListPhoneNumbersResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListPhoneNumbersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListPhoneNumbersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPhoneNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPhoneNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPhoneNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPhoneNumbersOfSkillGroupRequest : Tea.TeaModel {
    public var active: Bool?

    public var instanceId: String?

    public var isMember: Bool?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.active != nil {
            map["Active"] = self.active!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isMember != nil {
            map["IsMember"] = self.isMember!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Active"] as? Bool {
            self.active = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsMember"] as? Bool {
            self.isMember = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class ListPhoneNumbersOfSkillGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var active: Bool?

            public var city: String?

            public var contactFlowId: String?

            public var instanceId: String?

            public var number: String?

            public var province: String?

            public var usage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.active != nil {
                    map["Active"] = self.active!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Active"] as? Bool {
                    self.active = value
                }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["ContactFlowId"] as? String {
                    self.contactFlowId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
                if let value = dict["Usage"] as? String {
                    self.usage = value
                }
            }
        }
        public var list: [ListPhoneNumbersOfSkillGroupResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListPhoneNumbersOfSkillGroupResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListPhoneNumbersOfSkillGroupResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListPhoneNumbersOfSkillGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListPhoneNumbersOfSkillGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPhoneNumbersOfSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPhoneNumbersOfSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPhoneNumbersOfSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivilegesOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListPrivilegesOfUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var name: String?

        public var scope: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.scope != nil {
                map["Scope"] = self.scope!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Scope"] as? String {
                self.scope = value
            }
        }
    }
    public var code: String?

    public var data: [ListPrivilegesOfUserResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListPrivilegesOfUserResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListPrivilegesOfUserResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPrivilegesOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivilegesOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivilegesOfUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRamUsersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ListRamUsersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var aliyunUid: Int64?

            public var displayName: String?

            public var email: String?

            public var loginName: String?

            public var mobile: String?

            public var primary: Bool?

            public var ramId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aliyunUid != nil {
                    map["AliyunUid"] = self.aliyunUid!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.primary != nil {
                    map["Primary"] = self.primary!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AliyunUid"] as? Int64 {
                    self.aliyunUid = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["LoginName"] as? String {
                    self.loginName = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["Primary"] as? Bool {
                    self.primary = value
                }
                if let value = dict["RamId"] as? String {
                    self.ramId = value
                }
            }
        }
        public var list: [ListRamUsersResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListRamUsersResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListRamUsersResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListRamUsersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListRamUsersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListRamUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRamUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRamUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRealtimeAgentStatesRequest : Tea.TeaModel {
    public var agentIdList: String?

    public var agentName: String?

    public var callTypeList: String?

    public var instanceId: String?

    public var mediaType: String?

    public var outboundScenario: Bool?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var skillGroupId: String?

    public var stateList: String?

    public var workModeList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIdList != nil {
            map["AgentIdList"] = self.agentIdList!
        }
        if self.agentName != nil {
            map["AgentName"] = self.agentName!
        }
        if self.callTypeList != nil {
            map["CallTypeList"] = self.callTypeList!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.outboundScenario != nil {
            map["OutboundScenario"] = self.outboundScenario!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.stateList != nil {
            map["StateList"] = self.stateList!
        }
        if self.workModeList != nil {
            map["WorkModeList"] = self.workModeList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentIdList"] as? String {
            self.agentIdList = value
        }
        if let value = dict["AgentName"] as? String {
            self.agentName = value
        }
        if let value = dict["CallTypeList"] as? String {
            self.callTypeList = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["OutboundScenario"] as? Bool {
            self.outboundScenario = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["StateList"] as? String {
            self.stateList = value
        }
        if let value = dict["WorkModeList"] as? String {
            self.workModeList = value
        }
    }
}

public class ListRealtimeAgentStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var agentId: String?

            public var agentName: String?

            public var breakCode: String?

            public var callType: String?

            public var counterParty: String?

            public var duration: Int64?

            public var extension_: String?

            public var instanceId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var skillGroupIdList: [String]?

            public var skillGroupNameList: [String]?

            public var state: String?

            public var stateCode: String?

            public var stateTime: Int64?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.counterParty != nil {
                    map["CounterParty"] = self.counterParty!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.skillGroupIdList != nil {
                    map["SkillGroupIdList"] = self.skillGroupIdList!
                }
                if self.skillGroupNameList != nil {
                    map["SkillGroupNameList"] = self.skillGroupNameList!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.stateCode != nil {
                    map["StateCode"] = self.stateCode!
                }
                if self.stateTime != nil {
                    map["StateTime"] = self.stateTime!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["AgentName"] as? String {
                    self.agentName = value
                }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["CounterParty"] as? String {
                    self.counterParty = value
                }
                if let value = dict["Duration"] as? Int64 {
                    self.duration = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SkillGroupIdList"] as? [String] {
                    self.skillGroupIdList = value
                }
                if let value = dict["SkillGroupNameList"] as? [String] {
                    self.skillGroupNameList = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["StateCode"] as? String {
                    self.stateCode = value
                }
                if let value = dict["StateTime"] as? Int64 {
                    self.stateTime = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var list: [ListRealtimeAgentStatesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListRealtimeAgentStatesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListRealtimeAgentStatesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListRealtimeAgentStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListRealtimeAgentStatesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListRealtimeAgentStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRealtimeAgentStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRealtimeAgentStatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRealtimeSkillGroupStatesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mediaType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
    }
}

public class ListRealtimeSkillGroupStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class BreakCodeDetailList : Tea.TeaModel {
                public var breakCode: String?

                public var count: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.breakCode != nil {
                        map["BreakCode"] = self.breakCode!
                    }
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BreakCode"] as? String {
                        self.breakCode = value
                    }
                    if let value = dict["Count"] as? Int64 {
                        self.count = value
                    }
                }
            }
            public var breakCodeDetailList: [ListRealtimeSkillGroupStatesResponseBody.Data.List.BreakCodeDetailList]?

            public var breakingAgents: Int64?

            public var instanceId: String?

            public var loggedInAgents: Int64?

            public var longestWaitingTime: Int64?

            public var outboundScenarioReadyAgents: Int64?

            public var readyAgents: Int64?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var talkingAgents: Int64?

            public var totalAgents: Int64?

            public var waitingCalls: Int64?

            public var workingAgents: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCodeDetailList != nil {
                    var tmp : [Any] = []
                    for k in self.breakCodeDetailList! {
                        tmp.append(k.toMap())
                    }
                    map["BreakCodeDetailList"] = tmp
                }
                if self.breakingAgents != nil {
                    map["BreakingAgents"] = self.breakingAgents!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loggedInAgents != nil {
                    map["LoggedInAgents"] = self.loggedInAgents!
                }
                if self.longestWaitingTime != nil {
                    map["LongestWaitingTime"] = self.longestWaitingTime!
                }
                if self.outboundScenarioReadyAgents != nil {
                    map["OutboundScenarioReadyAgents"] = self.outboundScenarioReadyAgents!
                }
                if self.readyAgents != nil {
                    map["ReadyAgents"] = self.readyAgents!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.talkingAgents != nil {
                    map["TalkingAgents"] = self.talkingAgents!
                }
                if self.totalAgents != nil {
                    map["TotalAgents"] = self.totalAgents!
                }
                if self.waitingCalls != nil {
                    map["WaitingCalls"] = self.waitingCalls!
                }
                if self.workingAgents != nil {
                    map["WorkingAgents"] = self.workingAgents!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCodeDetailList"] as? [Any?] {
                    var tmp : [ListRealtimeSkillGroupStatesResponseBody.Data.List.BreakCodeDetailList] = []
                    for v in value {
                        if v != nil {
                            var model = ListRealtimeSkillGroupStatesResponseBody.Data.List.BreakCodeDetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.breakCodeDetailList = tmp
                }
                if let value = dict["BreakingAgents"] as? Int64 {
                    self.breakingAgents = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LoggedInAgents"] as? Int64 {
                    self.loggedInAgents = value
                }
                if let value = dict["LongestWaitingTime"] as? Int64 {
                    self.longestWaitingTime = value
                }
                if let value = dict["OutboundScenarioReadyAgents"] as? Int64 {
                    self.outboundScenarioReadyAgents = value
                }
                if let value = dict["ReadyAgents"] as? Int64 {
                    self.readyAgents = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["TalkingAgents"] as? Int64 {
                    self.talkingAgents = value
                }
                if let value = dict["TotalAgents"] as? Int64 {
                    self.totalAgents = value
                }
                if let value = dict["WaitingCalls"] as? Int64 {
                    self.waitingCalls = value
                }
                if let value = dict["WorkingAgents"] as? Int64 {
                    self.workingAgents = value
                }
            }
        }
        public var list: [ListRealtimeSkillGroupStatesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListRealtimeSkillGroupStatesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListRealtimeSkillGroupStatesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListRealtimeSkillGroupStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListRealtimeSkillGroupStatesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListRealtimeSkillGroupStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRealtimeSkillGroupStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRealtimeSkillGroupStatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRecentCallDetailRecordsRequest : Tea.TeaModel {
    public var criteria: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Criteria"] as? String {
            self.criteria = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListRecentCallDetailRecordsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var agentIds: String?

            public var callDuration: String?

            public var calledNumber: String?

            public var callingNumber: String?

            public var contactDisposition: String?

            public var contactId: String?

            public var contactType: String?

            public var duration: Int64?

            public var instanceId: String?

            public var skillGroupIds: String?

            public var startTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentIds != nil {
                    map["AgentIds"] = self.agentIds!
                }
                if self.callDuration != nil {
                    map["CallDuration"] = self.callDuration!
                }
                if self.calledNumber != nil {
                    map["CalledNumber"] = self.calledNumber!
                }
                if self.callingNumber != nil {
                    map["CallingNumber"] = self.callingNumber!
                }
                if self.contactDisposition != nil {
                    map["ContactDisposition"] = self.contactDisposition!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactType != nil {
                    map["ContactType"] = self.contactType!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentIds"] as? String {
                    self.agentIds = value
                }
                if let value = dict["CallDuration"] as? String {
                    self.callDuration = value
                }
                if let value = dict["CalledNumber"] as? String {
                    self.calledNumber = value
                }
                if let value = dict["CallingNumber"] as? String {
                    self.callingNumber = value
                }
                if let value = dict["ContactDisposition"] as? String {
                    self.contactDisposition = value
                }
                if let value = dict["ContactId"] as? String {
                    self.contactId = value
                }
                if let value = dict["ContactType"] as? String {
                    self.contactType = value
                }
                if let value = dict["Duration"] as? Int64 {
                    self.duration = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["SkillGroupIds"] as? String {
                    self.skillGroupIds = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
            }
        }
        public var list: [ListRecentCallDetailRecordsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListRecentCallDetailRecordsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListRecentCallDetailRecordsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListRecentCallDetailRecordsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListRecentCallDetailRecordsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListRecentCallDetailRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRecentCallDetailRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRecentCallDetailRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRolesRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ListRolesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var name: String?

        public var roleId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RoleId"] as? String {
                self.roleId = value
            }
        }
    }
    public var code: String?

    public var data: [ListRolesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListRolesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListRolesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListRolesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRolesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRolesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSkillGroupStatesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIds != nil {
            map["SkillGroupIds"] = self.skillGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroupIds"] as? String {
            self.skillGroupIds = value
        }
    }
}

public class ListSkillGroupStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var averageWaitingTime: Int64?

            public var breakingAgents: Int64?

            public var inboundTalkingAgents: Int64?

            public var instanceId: String?

            public var loggedInAgents: Int64?

            public var longestCall: Int64?

            public var outboundScenarioReadyAgents: Int64?

            public var outboundTalkingAgents: Int64?

            public var readyAgents: Int64?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var talkingAgents: Int64?

            public var waitingCalls: Int64?

            public var waitingCallsLevel10: Int64?

            public var waitingCallsLevel20: Int64?

            public var waitingCallsLevel30: Int64?

            public var workingAgents: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageWaitingTime != nil {
                    map["AverageWaitingTime"] = self.averageWaitingTime!
                }
                if self.breakingAgents != nil {
                    map["BreakingAgents"] = self.breakingAgents!
                }
                if self.inboundTalkingAgents != nil {
                    map["InboundTalkingAgents"] = self.inboundTalkingAgents!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loggedInAgents != nil {
                    map["LoggedInAgents"] = self.loggedInAgents!
                }
                if self.longestCall != nil {
                    map["LongestCall"] = self.longestCall!
                }
                if self.outboundScenarioReadyAgents != nil {
                    map["OutboundScenarioReadyAgents"] = self.outboundScenarioReadyAgents!
                }
                if self.outboundTalkingAgents != nil {
                    map["OutboundTalkingAgents"] = self.outboundTalkingAgents!
                }
                if self.readyAgents != nil {
                    map["ReadyAgents"] = self.readyAgents!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.talkingAgents != nil {
                    map["TalkingAgents"] = self.talkingAgents!
                }
                if self.waitingCalls != nil {
                    map["WaitingCalls"] = self.waitingCalls!
                }
                if self.waitingCallsLevel10 != nil {
                    map["WaitingCallsLevel10"] = self.waitingCallsLevel10!
                }
                if self.waitingCallsLevel20 != nil {
                    map["WaitingCallsLevel20"] = self.waitingCallsLevel20!
                }
                if self.waitingCallsLevel30 != nil {
                    map["WaitingCallsLevel30"] = self.waitingCallsLevel30!
                }
                if self.workingAgents != nil {
                    map["WorkingAgents"] = self.workingAgents!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AverageWaitingTime"] as? Int64 {
                    self.averageWaitingTime = value
                }
                if let value = dict["BreakingAgents"] as? Int64 {
                    self.breakingAgents = value
                }
                if let value = dict["InboundTalkingAgents"] as? Int64 {
                    self.inboundTalkingAgents = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LoggedInAgents"] as? Int64 {
                    self.loggedInAgents = value
                }
                if let value = dict["LongestCall"] as? Int64 {
                    self.longestCall = value
                }
                if let value = dict["OutboundScenarioReadyAgents"] as? Int64 {
                    self.outboundScenarioReadyAgents = value
                }
                if let value = dict["OutboundTalkingAgents"] as? Int64 {
                    self.outboundTalkingAgents = value
                }
                if let value = dict["ReadyAgents"] as? Int64 {
                    self.readyAgents = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["TalkingAgents"] as? Int64 {
                    self.talkingAgents = value
                }
                if let value = dict["WaitingCalls"] as? Int64 {
                    self.waitingCalls = value
                }
                if let value = dict["WaitingCallsLevel10"] as? Int64 {
                    self.waitingCallsLevel10 = value
                }
                if let value = dict["WaitingCallsLevel20"] as? Int64 {
                    self.waitingCallsLevel20 = value
                }
                if let value = dict["WaitingCallsLevel30"] as? Int64 {
                    self.waitingCallsLevel30 = value
                }
                if let value = dict["WorkingAgents"] as? Int64 {
                    self.workingAgents = value
                }
            }
        }
        public var list: [ListSkillGroupStatesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListSkillGroupStatesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListSkillGroupStatesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListSkillGroupStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSkillGroupStatesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListSkillGroupStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSkillGroupStatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSkillGroupSummaryReportsSinceMidnightRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroups: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroups != nil {
            map["SkillGroups"] = self.skillGroups!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SkillGroups"] as? String {
            self.skillGroups = value
        }
    }
}

public class ListSkillGroupSummaryReportsSinceMidnightResponseBody : Tea.TeaModel {
    public class PagedSkillGroupSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Inbound : Tea.TeaModel {
                public var abandonedInQueueOfQueueCount: Int64?

                public var answeredByAgentOfQueueCount: Int64?

                public var answeredByAgentOfQueueMaxWaitTimeDuration: Int64?

                public var answeredByAgentOfQueueWaitTimeDuration: Int64?

                public var averageRingTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var callsAbandoned: Int64?

                public var callsAttendedTransferOut: Int64?

                public var callsBlindTransferOut: Int64?

                public var callsHandled: Int64?

                public var callsOffered: Int64?

                public var callsOverflow: String?

                public var callsQueuingCanceled: String?

                public var callsQueuingFailure: String?

                public var callsQueuingRerouted: String?

                public var callsQueuingTimeout: Int64?

                public var callsServiceLevel10: Int64?

                public var callsServiceLevel20: Int64?

                public var callsServiceLevel30: Int64?

                public var callsTimeout: Int64?

                public var giveUpByAgentOfQueueCount: Int64?

                public var handleRate: Double?

                public var inComingQueueOfQueueCount: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: String?

                public var maxWorkTime: Int64?

                public var overFlowInQueueOfQueueCount: Int64?

                public var queueMaxWaitTimeDuration: Int64?

                public var queueWaitTimeDuration: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var serviceLevel20: Double?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.abandonedInQueueOfQueueCount != nil {
                        map["AbandonedInQueueOfQueueCount"] = self.abandonedInQueueOfQueueCount!
                    }
                    if self.answeredByAgentOfQueueCount != nil {
                        map["AnsweredByAgentOfQueueCount"] = self.answeredByAgentOfQueueCount!
                    }
                    if self.answeredByAgentOfQueueMaxWaitTimeDuration != nil {
                        map["AnsweredByAgentOfQueueMaxWaitTimeDuration"] = self.answeredByAgentOfQueueMaxWaitTimeDuration!
                    }
                    if self.answeredByAgentOfQueueWaitTimeDuration != nil {
                        map["AnsweredByAgentOfQueueWaitTimeDuration"] = self.answeredByAgentOfQueueWaitTimeDuration!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAbandoned != nil {
                        map["CallsAbandoned"] = self.callsAbandoned!
                    }
                    if self.callsAttendedTransferOut != nil {
                        map["CallsAttendedTransferOut"] = self.callsAttendedTransferOut!
                    }
                    if self.callsBlindTransferOut != nil {
                        map["CallsBlindTransferOut"] = self.callsBlindTransferOut!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsOverflow != nil {
                        map["CallsOverflow"] = self.callsOverflow!
                    }
                    if self.callsQueuingCanceled != nil {
                        map["CallsQueuingCanceled"] = self.callsQueuingCanceled!
                    }
                    if self.callsQueuingFailure != nil {
                        map["CallsQueuingFailure"] = self.callsQueuingFailure!
                    }
                    if self.callsQueuingRerouted != nil {
                        map["CallsQueuingRerouted"] = self.callsQueuingRerouted!
                    }
                    if self.callsQueuingTimeout != nil {
                        map["CallsQueuingTimeout"] = self.callsQueuingTimeout!
                    }
                    if self.callsServiceLevel10 != nil {
                        map["CallsServiceLevel10"] = self.callsServiceLevel10!
                    }
                    if self.callsServiceLevel20 != nil {
                        map["CallsServiceLevel20"] = self.callsServiceLevel20!
                    }
                    if self.callsServiceLevel30 != nil {
                        map["CallsServiceLevel30"] = self.callsServiceLevel30!
                    }
                    if self.callsTimeout != nil {
                        map["CallsTimeout"] = self.callsTimeout!
                    }
                    if self.giveUpByAgentOfQueueCount != nil {
                        map["GiveUpByAgentOfQueueCount"] = self.giveUpByAgentOfQueueCount!
                    }
                    if self.handleRate != nil {
                        map["HandleRate"] = self.handleRate!
                    }
                    if self.inComingQueueOfQueueCount != nil {
                        map["InComingQueueOfQueueCount"] = self.inComingQueueOfQueueCount!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.overFlowInQueueOfQueueCount != nil {
                        map["OverFlowInQueueOfQueueCount"] = self.overFlowInQueueOfQueueCount!
                    }
                    if self.queueMaxWaitTimeDuration != nil {
                        map["QueueMaxWaitTimeDuration"] = self.queueMaxWaitTimeDuration!
                    }
                    if self.queueWaitTimeDuration != nil {
                        map["QueueWaitTimeDuration"] = self.queueWaitTimeDuration!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.serviceLevel20 != nil {
                        map["ServiceLevel20"] = self.serviceLevel20!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AbandonedInQueueOfQueueCount"] as? Int64 {
                        self.abandonedInQueueOfQueueCount = value
                    }
                    if let value = dict["AnsweredByAgentOfQueueCount"] as? Int64 {
                        self.answeredByAgentOfQueueCount = value
                    }
                    if let value = dict["AnsweredByAgentOfQueueMaxWaitTimeDuration"] as? Int64 {
                        self.answeredByAgentOfQueueMaxWaitTimeDuration = value
                    }
                    if let value = dict["AnsweredByAgentOfQueueWaitTimeDuration"] as? Int64 {
                        self.answeredByAgentOfQueueWaitTimeDuration = value
                    }
                    if let value = dict["AverageRingTime"] as? Int64 {
                        self.averageRingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Int64 {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAbandoned"] as? Int64 {
                        self.callsAbandoned = value
                    }
                    if let value = dict["CallsAttendedTransferOut"] as? Int64 {
                        self.callsAttendedTransferOut = value
                    }
                    if let value = dict["CallsBlindTransferOut"] as? Int64 {
                        self.callsBlindTransferOut = value
                    }
                    if let value = dict["CallsHandled"] as? Int64 {
                        self.callsHandled = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsOverflow"] as? String {
                        self.callsOverflow = value
                    }
                    if let value = dict["CallsQueuingCanceled"] as? String {
                        self.callsQueuingCanceled = value
                    }
                    if let value = dict["CallsQueuingFailure"] as? String {
                        self.callsQueuingFailure = value
                    }
                    if let value = dict["CallsQueuingRerouted"] as? String {
                        self.callsQueuingRerouted = value
                    }
                    if let value = dict["CallsQueuingTimeout"] as? Int64 {
                        self.callsQueuingTimeout = value
                    }
                    if let value = dict["CallsServiceLevel10"] as? Int64 {
                        self.callsServiceLevel10 = value
                    }
                    if let value = dict["CallsServiceLevel20"] as? Int64 {
                        self.callsServiceLevel20 = value
                    }
                    if let value = dict["CallsServiceLevel30"] as? Int64 {
                        self.callsServiceLevel30 = value
                    }
                    if let value = dict["CallsTimeout"] as? Int64 {
                        self.callsTimeout = value
                    }
                    if let value = dict["GiveUpByAgentOfQueueCount"] as? Int64 {
                        self.giveUpByAgentOfQueueCount = value
                    }
                    if let value = dict["HandleRate"] as? Double {
                        self.handleRate = value
                    }
                    if let value = dict["InComingQueueOfQueueCount"] as? Int64 {
                        self.inComingQueueOfQueueCount = value
                    }
                    if let value = dict["MaxRingTime"] as? Int64 {
                        self.maxRingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? String {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["OverFlowInQueueOfQueueCount"] as? Int64 {
                        self.overFlowInQueueOfQueueCount = value
                    }
                    if let value = dict["QueueMaxWaitTimeDuration"] as? Int64 {
                        self.queueMaxWaitTimeDuration = value
                    }
                    if let value = dict["QueueWaitTimeDuration"] as? Int64 {
                        self.queueWaitTimeDuration = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["ServiceLevel20"] as? Double {
                        self.serviceLevel20 = value
                    }
                    if let value = dict["TotalRingTime"] as? Int64 {
                        self.totalRingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Outbound : Tea.TeaModel {
                public var answerRate: Double?

                public var averageDialingTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var callsAbandoned: Int64?

                public var callsAgentHandled: Int64?

                public var callsAnswered: Int64?

                public var callsDialed: Int64?

                public var callsOffered: Int64?

                public var callsQueuingCancelled: Int64?

                public var callsQueuingFailed: Int64?

                public var callsQueuingFailure: Int64?

                public var callsQueuingOverflow: Int64?

                public var callsQueuingRerouted: Int64?

                public var callsQueuingTimeout: Int64?

                public var callsServiceLevel30: String?

                public var callsServiceLevel30V2: Int64?

                public var maxDialingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalDialingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWaitTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageDialingTime != nil {
                        map["AverageDialingTime"] = self.averageDialingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAbandoned != nil {
                        map["CallsAbandoned"] = self.callsAbandoned!
                    }
                    if self.callsAgentHandled != nil {
                        map["CallsAgentHandled"] = self.callsAgentHandled!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.callsQueuingCancelled != nil {
                        map["CallsQueuingCancelled"] = self.callsQueuingCancelled!
                    }
                    if self.callsQueuingFailed != nil {
                        map["CallsQueuingFailed"] = self.callsQueuingFailed!
                    }
                    if self.callsQueuingFailure != nil {
                        map["CallsQueuingFailure"] = self.callsQueuingFailure!
                    }
                    if self.callsQueuingOverflow != nil {
                        map["CallsQueuingOverflow"] = self.callsQueuingOverflow!
                    }
                    if self.callsQueuingRerouted != nil {
                        map["CallsQueuingRerouted"] = self.callsQueuingRerouted!
                    }
                    if self.callsQueuingTimeout != nil {
                        map["CallsQueuingTimeout"] = self.callsQueuingTimeout!
                    }
                    if self.callsServiceLevel30 != nil {
                        map["CallsServiceLevel30"] = self.callsServiceLevel30!
                    }
                    if self.callsServiceLevel30V2 != nil {
                        map["CallsServiceLevel30V2"] = self.callsServiceLevel30V2!
                    }
                    if self.maxDialingTime != nil {
                        map["MaxDialingTime"] = self.maxDialingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalDialingTime != nil {
                        map["TotalDialingTime"] = self.totalDialingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWaitTime != nil {
                        map["TotalWaitTime"] = self.totalWaitTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerRate"] as? Double {
                        self.answerRate = value
                    }
                    if let value = dict["AverageDialingTime"] as? Int64 {
                        self.averageDialingTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Int64 {
                        self.averageWorkTime = value
                    }
                    if let value = dict["CallsAbandoned"] as? Int64 {
                        self.callsAbandoned = value
                    }
                    if let value = dict["CallsAgentHandled"] as? Int64 {
                        self.callsAgentHandled = value
                    }
                    if let value = dict["CallsAnswered"] as? Int64 {
                        self.callsAnswered = value
                    }
                    if let value = dict["CallsDialed"] as? Int64 {
                        self.callsDialed = value
                    }
                    if let value = dict["CallsOffered"] as? Int64 {
                        self.callsOffered = value
                    }
                    if let value = dict["CallsQueuingCancelled"] as? Int64 {
                        self.callsQueuingCancelled = value
                    }
                    if let value = dict["CallsQueuingFailed"] as? Int64 {
                        self.callsQueuingFailed = value
                    }
                    if let value = dict["CallsQueuingFailure"] as? Int64 {
                        self.callsQueuingFailure = value
                    }
                    if let value = dict["CallsQueuingOverflow"] as? Int64 {
                        self.callsQueuingOverflow = value
                    }
                    if let value = dict["CallsQueuingRerouted"] as? Int64 {
                        self.callsQueuingRerouted = value
                    }
                    if let value = dict["CallsQueuingTimeout"] as? Int64 {
                        self.callsQueuingTimeout = value
                    }
                    if let value = dict["CallsServiceLevel30"] as? String {
                        self.callsServiceLevel30 = value
                    }
                    if let value = dict["CallsServiceLevel30V2"] as? Int64 {
                        self.callsServiceLevel30V2 = value
                    }
                    if let value = dict["MaxDialingTime"] as? Int64 {
                        self.maxDialingTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalDialingTime"] as? Int64 {
                        self.totalDialingTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWaitTime"] as? Int64 {
                        self.totalWaitTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public class Overall : Tea.TeaModel {
                public var averageReadyTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var maxReadyTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var occupancyRate: Double?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalBreakTime: Int64?

                public var totalCalls: Int64?

                public var totalLoggedInTime: Int64?

                public var totalReadyTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageReadyTime != nil {
                        map["AverageReadyTime"] = self.averageReadyTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.maxReadyTime != nil {
                        map["MaxReadyTime"] = self.maxReadyTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.occupancyRate != nil {
                        map["OccupancyRate"] = self.occupancyRate!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalBreakTime != nil {
                        map["TotalBreakTime"] = self.totalBreakTime!
                    }
                    if self.totalCalls != nil {
                        map["TotalCalls"] = self.totalCalls!
                    }
                    if self.totalLoggedInTime != nil {
                        map["TotalLoggedInTime"] = self.totalLoggedInTime!
                    }
                    if self.totalReadyTime != nil {
                        map["TotalReadyTime"] = self.totalReadyTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageReadyTime"] as? Int64 {
                        self.averageReadyTime = value
                    }
                    if let value = dict["AverageTalkTime"] as? Int64 {
                        self.averageTalkTime = value
                    }
                    if let value = dict["AverageWorkTime"] as? Int64 {
                        self.averageWorkTime = value
                    }
                    if let value = dict["MaxReadyTime"] as? Int64 {
                        self.maxReadyTime = value
                    }
                    if let value = dict["MaxTalkTime"] as? Int64 {
                        self.maxTalkTime = value
                    }
                    if let value = dict["MaxWorkTime"] as? Int64 {
                        self.maxWorkTime = value
                    }
                    if let value = dict["OccupancyRate"] as? Double {
                        self.occupancyRate = value
                    }
                    if let value = dict["SatisfactionIndex"] as? Double {
                        self.satisfactionIndex = value
                    }
                    if let value = dict["SatisfactionSurveysOffered"] as? Int64 {
                        self.satisfactionSurveysOffered = value
                    }
                    if let value = dict["SatisfactionSurveysResponded"] as? Int64 {
                        self.satisfactionSurveysResponded = value
                    }
                    if let value = dict["TotalBreakTime"] as? Int64 {
                        self.totalBreakTime = value
                    }
                    if let value = dict["TotalCalls"] as? Int64 {
                        self.totalCalls = value
                    }
                    if let value = dict["TotalLoggedInTime"] as? Int64 {
                        self.totalLoggedInTime = value
                    }
                    if let value = dict["TotalReadyTime"] as? Int64 {
                        self.totalReadyTime = value
                    }
                    if let value = dict["TotalTalkTime"] as? Int64 {
                        self.totalTalkTime = value
                    }
                    if let value = dict["TotalWorkTime"] as? Int64 {
                        self.totalWorkTime = value
                    }
                }
            }
            public var inbound: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.Inbound?

            public var instanceId: String?

            public var outbound: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.Outbound?

            public var overall: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.Overall?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.inbound?.validate()
                try self.outbound?.validate()
                try self.overall?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inbound != nil {
                    map["Inbound"] = self.inbound?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.outbound != nil {
                    map["Outbound"] = self.outbound?.toMap()
                }
                if self.overall != nil {
                    map["Overall"] = self.overall?.toMap()
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Inbound"] as? [String: Any?] {
                    var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.Inbound()
                    model.fromMap(value)
                    self.inbound = model
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Outbound"] as? [String: Any?] {
                    var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.Outbound()
                    model.fromMap(value)
                    self.outbound = model
                }
                if let value = dict["Overall"] as? [String: Any?] {
                    var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.Overall()
                    model.fromMap(value)
                    self.overall = model
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public var list: [ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List] = []
                for v in value {
                    if v != nil {
                        var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedSkillGroupSummaryReport: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedSkillGroupSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedSkillGroupSummaryReport != nil {
            map["PagedSkillGroupSummaryReport"] = self.pagedSkillGroupSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PagedSkillGroupSummaryReport"] as? [String: Any?] {
            var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport()
            model.fromMap(value)
            self.pagedSkillGroupSummaryReport = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListSkillGroupSummaryReportsSinceMidnightResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupSummaryReportsSinceMidnightResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSkillGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var mediaType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ListSkillGroupsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var description_: String?

            public var displayName: String?

            public var instanceId: String?

            public var mediaType: String?

            public var phoneNumberCount: Int32?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var userCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                if self.phoneNumberCount != nil {
                    map["PhoneNumberCount"] = self.phoneNumberCount!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.userCount != nil {
                    map["UserCount"] = self.userCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
                if let value = dict["PhoneNumberCount"] as? Int32 {
                    self.phoneNumberCount = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["UserCount"] as? Int32 {
                    self.userCount = value
                }
            }
        }
        public var list: [ListSkillGroupsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListSkillGroupsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListSkillGroupsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListSkillGroupsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSkillGroupsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListSkillGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSkillGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSkillLevelsOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var isMember: Bool?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isMember != nil {
            map["IsMember"] = self.isMember!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsMember"] as? Bool {
            self.isMember = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ListSkillLevelsOfUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var mediaType: String?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var skillLevel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.skillLevel != nil {
                    map["SkillLevel"] = self.skillLevel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["SkillLevel"] as? String {
                    self.skillLevel = value
                }
            }
        }
        public var list: [ListSkillLevelsOfUserResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListSkillLevelsOfUserResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListSkillLevelsOfUserResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListSkillLevelsOfUserResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSkillLevelsOfUserResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListSkillLevelsOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillLevelsOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSkillLevelsOfUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSmsMetadataRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var scenarioListJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.scenarioListJson != nil {
            map["ScenarioListJson"] = self.scenarioListJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ScenarioListJson"] as? String {
            self.scenarioListJson = value
        }
    }
}

public class ListSmsMetadataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var aliyunUid: Int64?

            public var description_: String?

            public var instanceId: String?

            public var name: String?

            public var scenario: String?

            public var signName: String?

            public var smsMetadataId: String?

            public var templateCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aliyunUid != nil {
                    map["AliyunUid"] = self.aliyunUid!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.scenario != nil {
                    map["Scenario"] = self.scenario!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.smsMetadataId != nil {
                    map["SmsMetadataId"] = self.smsMetadataId!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AliyunUid"] as? Int64 {
                    self.aliyunUid = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Scenario"] as? String {
                    self.scenario = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SmsMetadataId"] as? String {
                    self.smsMetadataId = value
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
            }
        }
        public var list: [ListSmsMetadataResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListSmsMetadataResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListSmsMetadataResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListSmsMetadataResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListSmsMetadataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListSmsMetadataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSmsMetadataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSmsMetadataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTicketTasksRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class ListTicketTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var action: String?

        public var assignee: String?

        public var assigneeName: String?

        public var comment: String?

        public var endTime: Int64?

        public var fileKeys: [String]?

        public var fileUrls: [String]?

        public var instanceId: String?

        public var startTime: Int64?

        public var taskDefinitionNodeId: String?

        public var taskDefinitionNodeType: String?

        public var taskId: String?

        public var taskName: String?

        public var ticketId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.assignee != nil {
                map["Assignee"] = self.assignee!
            }
            if self.assigneeName != nil {
                map["AssigneeName"] = self.assigneeName!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.fileKeys != nil {
                map["FileKeys"] = self.fileKeys!
            }
            if self.fileUrls != nil {
                map["FileUrls"] = self.fileUrls!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.taskDefinitionNodeId != nil {
                map["TaskDefinitionNodeId"] = self.taskDefinitionNodeId!
            }
            if self.taskDefinitionNodeType != nil {
                map["TaskDefinitionNodeType"] = self.taskDefinitionNodeType!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.ticketId != nil {
                map["TicketId"] = self.ticketId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["Assignee"] as? String {
                self.assignee = value
            }
            if let value = dict["AssigneeName"] as? String {
                self.assigneeName = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["FileKeys"] as? [String] {
                self.fileKeys = value
            }
            if let value = dict["FileUrls"] as? [String] {
                self.fileUrls = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["TaskDefinitionNodeId"] as? String {
                self.taskDefinitionNodeId = value
            }
            if let value = dict["TaskDefinitionNodeType"] as? String {
                self.taskDefinitionNodeType = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TicketId"] as? String {
                self.ticketId = value
            }
        }
    }
    public var code: String?

    public var data: [ListTicketTasksResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListTicketTasksResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListTicketTasksResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTicketTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTicketTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTicketTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTicketTemplatesRequest : Tea.TeaModel {
    public var categoryId: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class ListTicketTemplatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class TicketFields : Tea.TeaModel {
                public var array: Bool?

                public var attribute: String?

                public var createdTime: Int64?

                public var creator: String?

                public var dataType: String?

                public var description_: String?

                public var disabled: Bool?

                public var displayName: String?

                public var displayOrder: Int32?

                public var editorType: String?

                public var maxLength: Int32?

                public var maximum: Double?

                public var minLength: Int32?

                public var minimum: Double?

                public var name: String?

                public var pattern: String?

                public var patternErrorMessage: String?

                public var readOnly: Bool?

                public var required_: Bool?

                public var system: Bool?

                public var updatedTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.array != nil {
                        map["Array"] = self.array!
                    }
                    if self.attribute != nil {
                        map["Attribute"] = self.attribute!
                    }
                    if self.createdTime != nil {
                        map["CreatedTime"] = self.createdTime!
                    }
                    if self.creator != nil {
                        map["Creator"] = self.creator!
                    }
                    if self.dataType != nil {
                        map["DataType"] = self.dataType!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.disabled != nil {
                        map["Disabled"] = self.disabled!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.displayOrder != nil {
                        map["DisplayOrder"] = self.displayOrder!
                    }
                    if self.editorType != nil {
                        map["EditorType"] = self.editorType!
                    }
                    if self.maxLength != nil {
                        map["MaxLength"] = self.maxLength!
                    }
                    if self.maximum != nil {
                        map["Maximum"] = self.maximum!
                    }
                    if self.minLength != nil {
                        map["MinLength"] = self.minLength!
                    }
                    if self.minimum != nil {
                        map["Minimum"] = self.minimum!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.pattern != nil {
                        map["Pattern"] = self.pattern!
                    }
                    if self.patternErrorMessage != nil {
                        map["PatternErrorMessage"] = self.patternErrorMessage!
                    }
                    if self.readOnly != nil {
                        map["ReadOnly"] = self.readOnly!
                    }
                    if self.required_ != nil {
                        map["Required"] = self.required_!
                    }
                    if self.system != nil {
                        map["System"] = self.system!
                    }
                    if self.updatedTime != nil {
                        map["UpdatedTime"] = self.updatedTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Array"] as? Bool {
                        self.array = value
                    }
                    if let value = dict["Attribute"] as? String {
                        self.attribute = value
                    }
                    if let value = dict["CreatedTime"] as? Int64 {
                        self.createdTime = value
                    }
                    if let value = dict["Creator"] as? String {
                        self.creator = value
                    }
                    if let value = dict["DataType"] as? String {
                        self.dataType = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Disabled"] as? Bool {
                        self.disabled = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["DisplayOrder"] as? Int32 {
                        self.displayOrder = value
                    }
                    if let value = dict["EditorType"] as? String {
                        self.editorType = value
                    }
                    if let value = dict["MaxLength"] as? Int32 {
                        self.maxLength = value
                    }
                    if let value = dict["Maximum"] as? Double {
                        self.maximum = value
                    }
                    if let value = dict["MinLength"] as? Int32 {
                        self.minLength = value
                    }
                    if let value = dict["Minimum"] as? Double {
                        self.minimum = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Pattern"] as? String {
                        self.pattern = value
                    }
                    if let value = dict["PatternErrorMessage"] as? String {
                        self.patternErrorMessage = value
                    }
                    if let value = dict["ReadOnly"] as? Bool {
                        self.readOnly = value
                    }
                    if let value = dict["Required"] as? Bool {
                        self.required_ = value
                    }
                    if let value = dict["System"] as? Bool {
                        self.system = value
                    }
                    if let value = dict["UpdatedTime"] as? Int64 {
                        self.updatedTime = value
                    }
                }
            }
            public var appliedVersion: String?

            public var categoryId: String?

            public var editor: String?

            public var instanceId: String?

            public var latestVersion: String?

            public var name: String?

            public var processDefinition: String?

            public var state: String?

            public var templateId: String?

            public var ticketFields: [ListTicketTemplatesResponseBody.Data.List.TicketFields]?

            public var updatedTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedVersion != nil {
                    map["AppliedVersion"] = self.appliedVersion!
                }
                if self.categoryId != nil {
                    map["CategoryId"] = self.categoryId!
                }
                if self.editor != nil {
                    map["Editor"] = self.editor!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.latestVersion != nil {
                    map["LatestVersion"] = self.latestVersion!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.processDefinition != nil {
                    map["ProcessDefinition"] = self.processDefinition!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.templateId != nil {
                    map["TemplateId"] = self.templateId!
                }
                if self.ticketFields != nil {
                    var tmp : [Any] = []
                    for k in self.ticketFields! {
                        tmp.append(k.toMap())
                    }
                    map["TicketFields"] = tmp
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppliedVersion"] as? String {
                    self.appliedVersion = value
                }
                if let value = dict["CategoryId"] as? String {
                    self.categoryId = value
                }
                if let value = dict["Editor"] as? String {
                    self.editor = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LatestVersion"] as? String {
                    self.latestVersion = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ProcessDefinition"] as? String {
                    self.processDefinition = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["TemplateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["TicketFields"] as? [Any?] {
                    var tmp : [ListTicketTemplatesResponseBody.Data.List.TicketFields] = []
                    for v in value {
                        if v != nil {
                            var model = ListTicketTemplatesResponseBody.Data.List.TicketFields()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ticketFields = tmp
                }
                if let value = dict["UpdatedTime"] as? Int64 {
                    self.updatedTime = value
                }
            }
        }
        public var list: [ListTicketTemplatesResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListTicketTemplatesResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListTicketTemplatesResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListTicketTemplatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListTicketTemplatesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTicketTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTicketTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTicketTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTicketsRequest : Tea.TeaModel {
    public var assignee: String?

    public var assigneeType: String?

    public var categoryId: String?

    public var creator: String?

    public var customerId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var jobIdList: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var participant: String?

    public var startTime: Int64?

    public var state: String?

    public var ticketId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assignee != nil {
            map["Assignee"] = self.assignee!
        }
        if self.assigneeType != nil {
            map["AssigneeType"] = self.assigneeType!
        }
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.creator != nil {
            map["Creator"] = self.creator!
        }
        if self.customerId != nil {
            map["CustomerId"] = self.customerId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobIdList != nil {
            map["JobIdList"] = self.jobIdList!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.participant != nil {
            map["Participant"] = self.participant!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Assignee"] as? String {
            self.assignee = value
        }
        if let value = dict["AssigneeType"] as? String {
            self.assigneeType = value
        }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["Creator"] as? String {
            self.creator = value
        }
        if let value = dict["CustomerId"] as? String {
            self.customerId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobIdList"] as? String {
            self.jobIdList = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["Participant"] as? String {
            self.participant = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class ListTicketsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var assignee: String?

            public var assigneeName: String?

            public var categoryId: String?

            public var categoryName: String?

            public var closeCode: String?

            public var comment: String?

            public var context: String?

            public var createdTime: String?

            public var creator: String?

            public var creatorName: String?

            public var currentTaskId: String?

            public var currentTaskName: String?

            public var currentTaskStartTime: Int64?

            public var customerId: String?

            public var endTime: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var source: String?

            public var startTime: Int64?

            public var state: String?

            public var templateId: String?

            public var templateVersion: String?

            public var ticketId: String?

            public var title: String?

            public var updatedTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.assignee != nil {
                    map["Assignee"] = self.assignee!
                }
                if self.assigneeName != nil {
                    map["AssigneeName"] = self.assigneeName!
                }
                if self.categoryId != nil {
                    map["CategoryId"] = self.categoryId!
                }
                if self.categoryName != nil {
                    map["CategoryName"] = self.categoryName!
                }
                if self.closeCode != nil {
                    map["CloseCode"] = self.closeCode!
                }
                if self.comment != nil {
                    map["Comment"] = self.comment!
                }
                if self.context != nil {
                    map["Context"] = self.context!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.creatorName != nil {
                    map["CreatorName"] = self.creatorName!
                }
                if self.currentTaskId != nil {
                    map["CurrentTaskId"] = self.currentTaskId!
                }
                if self.currentTaskName != nil {
                    map["CurrentTaskName"] = self.currentTaskName!
                }
                if self.currentTaskStartTime != nil {
                    map["CurrentTaskStartTime"] = self.currentTaskStartTime!
                }
                if self.customerId != nil {
                    map["CustomerId"] = self.customerId!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.templateId != nil {
                    map["TemplateId"] = self.templateId!
                }
                if self.templateVersion != nil {
                    map["TemplateVersion"] = self.templateVersion!
                }
                if self.ticketId != nil {
                    map["TicketId"] = self.ticketId!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Assignee"] as? String {
                    self.assignee = value
                }
                if let value = dict["AssigneeName"] as? String {
                    self.assigneeName = value
                }
                if let value = dict["CategoryId"] as? String {
                    self.categoryId = value
                }
                if let value = dict["CategoryName"] as? String {
                    self.categoryName = value
                }
                if let value = dict["CloseCode"] as? String {
                    self.closeCode = value
                }
                if let value = dict["Comment"] as? String {
                    self.comment = value
                }
                if let value = dict["Context"] as? String {
                    self.context = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["CreatorName"] as? String {
                    self.creatorName = value
                }
                if let value = dict["CurrentTaskId"] as? String {
                    self.currentTaskId = value
                }
                if let value = dict["CurrentTaskName"] as? String {
                    self.currentTaskName = value
                }
                if let value = dict["CurrentTaskStartTime"] as? Int64 {
                    self.currentTaskStartTime = value
                }
                if let value = dict["CustomerId"] as? String {
                    self.customerId = value
                }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["TemplateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["TemplateVersion"] as? String {
                    self.templateVersion = value
                }
                if let value = dict["TicketId"] as? String {
                    self.ticketId = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UpdatedTime"] as? String {
                    self.updatedTime = value
                }
            }
        }
        public var list: [ListTicketsResponseBody.Data.List]?

        public var pageNumber: Int64?

        public var pageSize: Int64?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListTicketsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListTicketsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int64 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListTicketsResponseBody.Data?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListTicketsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTicketsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTicketsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTicketsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUnassignedNumbersRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
    }
}

public class ListUnassignedNumbersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var city: String?

            public var number: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
            }
        }
        public var list: [ListUnassignedNumbersResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListUnassignedNumbersResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListUnassignedNumbersResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListUnassignedNumbersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListUnassignedNumbersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListUnassignedNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUnassignedNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUnassignedNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserLevelsOfSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var isMember: Bool?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isMember != nil {
            map["IsMember"] = self.isMember!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IsMember"] as? Bool {
            self.isMember = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class ListUserLevelsOfSkillGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var displayName: String?

            public var loginName: String?

            public var ramId: String?

            public var roleId: String?

            public var roleName: String?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var skillLevel: Int32?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.roleId != nil {
                    map["RoleId"] = self.roleId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.skillLevel != nil {
                    map["SkillLevel"] = self.skillLevel!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["LoginName"] as? String {
                    self.loginName = value
                }
                if let value = dict["RamId"] as? String {
                    self.ramId = value
                }
                if let value = dict["RoleId"] as? String {
                    self.roleId = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
                if let value = dict["SkillGroupId"] as? String {
                    self.skillGroupId = value
                }
                if let value = dict["SkillGroupName"] as? String {
                    self.skillGroupName = value
                }
                if let value = dict["SkillLevel"] as? Int32 {
                    self.skillLevel = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var list: [ListUserLevelsOfSkillGroupResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListUserLevelsOfSkillGroupResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListUserLevelsOfSkillGroupResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListUserLevelsOfSkillGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListUserLevelsOfSkillGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListUserLevelsOfSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserLevelsOfSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserLevelsOfSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUsersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchPattern: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchPattern != nil {
            map["SearchPattern"] = self.searchPattern!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchPattern"] as? String {
            self.searchPattern = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class ListUsersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class PersonalOutboundNumberList : Tea.TeaModel {
                public var active: Bool?

                public var city: String?

                public var number: String?

                public var province: String?

                public var usage: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.active != nil {
                        map["Active"] = self.active!
                    }
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Active"] as? Bool {
                        self.active = value
                    }
                    if let value = dict["City"] as? String {
                        self.city = value
                    }
                    if let value = dict["Number"] as? String {
                        self.number = value
                    }
                    if let value = dict["Province"] as? String {
                        self.province = value
                    }
                    if let value = dict["Usage"] as? String {
                        self.usage = value
                    }
                }
            }
            public class SkillLevelList : Tea.TeaModel {
                public var skillGroupId: String?

                public var skillGroupName: String?

                public var skillLevel: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    if self.skillLevel != nil {
                        map["SkillLevel"] = self.skillLevel!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["SkillGroupName"] as? String {
                        self.skillGroupName = value
                    }
                    if let value = dict["SkillLevel"] as? Int32 {
                        self.skillLevel = value
                    }
                }
            }
            public var deviceExt: String?

            public var deviceId: String?

            public var deviceState: String?

            public var displayId: String?

            public var displayName: String?

            public var email: String?

            public var extension_: String?

            public var loginName: String?

            public var mobile: String?

            public var personalOutboundNumberList: [ListUsersResponseBody.Data.List.PersonalOutboundNumberList]?

            public var primary: Bool?

            public var primaryAccount: Bool?

            public var ramId: Int64?

            public var roleId: String?

            public var roleName: String?

            public var skillLevelList: [ListUsersResponseBody.Data.List.SkillLevelList]?

            public var userId: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceExt != nil {
                    map["DeviceExt"] = self.deviceExt!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.displayId != nil {
                    map["DisplayId"] = self.displayId!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.personalOutboundNumberList != nil {
                    var tmp : [Any] = []
                    for k in self.personalOutboundNumberList! {
                        tmp.append(k.toMap())
                    }
                    map["PersonalOutboundNumberList"] = tmp
                }
                if self.primary != nil {
                    map["Primary"] = self.primary!
                }
                if self.primaryAccount != nil {
                    map["PrimaryAccount"] = self.primaryAccount!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.roleId != nil {
                    map["RoleId"] = self.roleId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                if self.skillLevelList != nil {
                    var tmp : [Any] = []
                    for k in self.skillLevelList! {
                        tmp.append(k.toMap())
                    }
                    map["SkillLevelList"] = tmp
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceExt"] as? String {
                    self.deviceExt = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["DisplayId"] as? String {
                    self.displayId = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["LoginName"] as? String {
                    self.loginName = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["PersonalOutboundNumberList"] as? [Any?] {
                    var tmp : [ListUsersResponseBody.Data.List.PersonalOutboundNumberList] = []
                    for v in value {
                        if v != nil {
                            var model = ListUsersResponseBody.Data.List.PersonalOutboundNumberList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.personalOutboundNumberList = tmp
                }
                if let value = dict["Primary"] as? Bool {
                    self.primary = value
                }
                if let value = dict["PrimaryAccount"] as? Bool {
                    self.primaryAccount = value
                }
                if let value = dict["RamId"] as? Int64 {
                    self.ramId = value
                }
                if let value = dict["RoleId"] as? String {
                    self.roleId = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
                if let value = dict["SkillLevelList"] as? [Any?] {
                    var tmp : [ListUsersResponseBody.Data.List.SkillLevelList] = []
                    for v in value {
                        if v != nil {
                            var model = ListUsersResponseBody.Data.List.SkillLevelList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.skillLevelList = tmp
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var list: [ListUsersResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListUsersResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListUsersResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListUsersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListUsersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListVisitorChatMessagesRequest : Tea.TeaModel {
    public var accessChannelId: String?

    public var accessToken: String?

    public var endTime: String?

    public var instanceId: String?

    public var nextPageToken: String?

    public var pageSize: Int32?

    public var sortOrder: String?

    public var startTime: Int64?

    public var visitorId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessChannelId != nil {
            map["AccessChannelId"] = self.accessChannelId!
        }
        if self.accessToken != nil {
            map["AccessToken"] = self.accessToken!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.nextPageToken != nil {
            map["NextPageToken"] = self.nextPageToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.visitorId != nil {
            map["VisitorId"] = self.visitorId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessChannelId"] as? String {
            self.accessChannelId = value
        }
        if let value = dict["AccessToken"] as? String {
            self.accessToken = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NextPageToken"] as? String {
            self.nextPageToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["VisitorId"] as? String {
            self.visitorId = value
        }
    }
}

public class ListVisitorChatMessagesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Messages : Tea.TeaModel {
            public var content: String?

            public var jobId: String?

            public var senderAvatarUrl: String?

            public var senderId: String?

            public var senderName: String?

            public var senderType: String?

            public var timestamp: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.senderAvatarUrl != nil {
                    map["SenderAvatarUrl"] = self.senderAvatarUrl!
                }
                if self.senderId != nil {
                    map["SenderId"] = self.senderId!
                }
                if self.senderName != nil {
                    map["SenderName"] = self.senderName!
                }
                if self.senderType != nil {
                    map["SenderType"] = self.senderType!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["SenderAvatarUrl"] as? String {
                    self.senderAvatarUrl = value
                }
                if let value = dict["SenderId"] as? String {
                    self.senderId = value
                }
                if let value = dict["SenderName"] as? String {
                    self.senderName = value
                }
                if let value = dict["SenderType"] as? String {
                    self.senderType = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
            }
        }
        public var messages: [ListVisitorChatMessagesResponseBody.Data.Messages]?

        public var nextPageToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.messages != nil {
                var tmp : [Any] = []
                for k in self.messages! {
                    tmp.append(k.toMap())
                }
                map["Messages"] = tmp
            }
            if self.nextPageToken != nil {
                map["NextPageToken"] = self.nextPageToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Messages"] as? [Any?] {
                var tmp : [ListVisitorChatMessagesResponseBody.Data.Messages] = []
                for v in value {
                    if v != nil {
                        var model = ListVisitorChatMessagesResponseBody.Data.Messages()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.messages = tmp
            }
            if let value = dict["NextPageToken"] as? String {
                self.nextPageToken = value
            }
        }
    }
    public var code: String?

    public var data: ListVisitorChatMessagesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListVisitorChatMessagesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListVisitorChatMessagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListVisitorChatMessagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListVisitorChatMessagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListVoicemailsRequest : Tea.TeaModel {
    public var caller: String?

    public var contactId: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var name: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["ContactId"] as? String {
            self.contactId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListVoicemailsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var callee: String?

            public var caller: String?

            public var cdrStartTime: Int64?

            public var contactId: String?

            public var duration: Int64?

            public var instanceId: String?

            public var name: String?

            public var recordingDuration: Int64?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callee != nil {
                    map["Callee"] = self.callee!
                }
                if self.caller != nil {
                    map["Caller"] = self.caller!
                }
                if self.cdrStartTime != nil {
                    map["CdrStartTime"] = self.cdrStartTime!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.recordingDuration != nil {
                    map["RecordingDuration"] = self.recordingDuration!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Callee"] as? String {
                    self.callee = value
                }
                if let value = dict["Caller"] as? String {
                    self.caller = value
                }
                if let value = dict["CdrStartTime"] as? Int64 {
                    self.cdrStartTime = value
                }
                if let value = dict["ContactId"] as? String {
                    self.contactId = value
                }
                if let value = dict["Duration"] as? Int64 {
                    self.duration = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["RecordingDuration"] as? Int64 {
                    self.recordingDuration = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public var list: [ListVoicemailsResponseBody.Data.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [ListVoicemailsResponseBody.Data.List] = []
                for v in value {
                    if v != nil {
                        var model = ListVoicemailsResponseBody.Data.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageNumber"] as? Int32 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ListVoicemailsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListVoicemailsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListVoicemailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListVoicemailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListVoicemailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWaitingChatsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
    }
}

public class ListWaitingChatsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Messages : Tea.TeaModel {
            public var content: String?

            public var senderId: String?

            public var senderType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.senderId != nil {
                    map["SenderId"] = self.senderId!
                }
                if self.senderType != nil {
                    map["SenderType"] = self.senderType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["SenderId"] as? String {
                    self.senderId = value
                }
                if let value = dict["SenderType"] as? String {
                    self.senderType = value
                }
            }
        }
        public class UserList : Tea.TeaModel {
            public var avatarUrl: String?

            public var userId: String?

            public var userName: String?

            public var userType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.avatarUrl != nil {
                    map["AvatarUrl"] = self.avatarUrl!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                if self.userType != nil {
                    map["UserType"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AvatarUrl"] as? String {
                    self.avatarUrl = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
                if let value = dict["UserType"] as? String {
                    self.userType = value
                }
            }
        }
        public var accessChannelId: String?

        public var accessChannelType: String?

        public var beingAssigned: Bool?

        public var chatConversationId: String?

        public var enqueueTime: Int64?

        public var jobId: String?

        public var messages: [ListWaitingChatsResponseBody.Data.Messages]?

        public var skillGroupId: String?

        public var userList: [ListWaitingChatsResponseBody.Data.UserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessChannelId != nil {
                map["AccessChannelId"] = self.accessChannelId!
            }
            if self.accessChannelType != nil {
                map["AccessChannelType"] = self.accessChannelType!
            }
            if self.beingAssigned != nil {
                map["BeingAssigned"] = self.beingAssigned!
            }
            if self.chatConversationId != nil {
                map["ChatConversationId"] = self.chatConversationId!
            }
            if self.enqueueTime != nil {
                map["EnqueueTime"] = self.enqueueTime!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.messages != nil {
                var tmp : [Any] = []
                for k in self.messages! {
                    tmp.append(k.toMap())
                }
                map["Messages"] = tmp
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            if self.userList != nil {
                var tmp : [Any] = []
                for k in self.userList! {
                    tmp.append(k.toMap())
                }
                map["UserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessChannelId"] as? String {
                self.accessChannelId = value
            }
            if let value = dict["AccessChannelType"] as? String {
                self.accessChannelType = value
            }
            if let value = dict["BeingAssigned"] as? Bool {
                self.beingAssigned = value
            }
            if let value = dict["ChatConversationId"] as? String {
                self.chatConversationId = value
            }
            if let value = dict["EnqueueTime"] as? Int64 {
                self.enqueueTime = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Messages"] as? [Any?] {
                var tmp : [ListWaitingChatsResponseBody.Data.Messages] = []
                for v in value {
                    if v != nil {
                        var model = ListWaitingChatsResponseBody.Data.Messages()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.messages = tmp
            }
            if let value = dict["SkillGroupId"] as? String {
                self.skillGroupId = value
            }
            if let value = dict["UserList"] as? [Any?] {
                var tmp : [ListWaitingChatsResponseBody.Data.UserList] = []
                for v in value {
                    if v != nil {
                        var model = ListWaitingChatsResponseBody.Data.UserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userList = tmp
            }
        }
    }
    public var code: String?

    public var data: [ListWaitingChatsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListWaitingChatsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListWaitingChatsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListWaitingChatsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWaitingChatsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWaitingChatsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MakeCallRequest : Tea.TeaModel {
    public var callee: String?

    public var caller: String?

    public var deviceId: String?

    public var flashSmsVariables: String?

    public var instanceId: String?

    public var maskedCallee: String?

    public var mediaType: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.flashSmsVariables != nil {
            map["FlashSmsVariables"] = self.flashSmsVariables!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maskedCallee != nil {
            map["MaskedCallee"] = self.maskedCallee!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["FlashSmsVariables"] as? String {
            self.flashSmsVariables = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MaskedCallee"] as? String {
            self.maskedCallee = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class MakeCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var mediaType: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.mediaType != nil {
                        map["MediaType"] = self.mediaType!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["MediaType"] as? String {
                        self.mediaType = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var callVariables: String?

            public var channelContexts: [MakeCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.callVariables != nil {
                    map["CallVariables"] = self.callVariables!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["CallVariables"] as? String {
                    self.callVariables = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [MakeCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = MakeCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var instanceId: String?

            public var jobId: String?

            public var outboundScenario: Bool?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: MakeCallResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: MakeCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = MakeCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = MakeCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: MakeCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = MakeCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class MakeCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MakeCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MakeCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyAudioFileRequest : Tea.TeaModel {
    public var audioFileName: String?

    public var audioResourceId: String?

    public var instanceId: String?

    public var name: String?

    public var ossFileKey: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioFileName != nil {
            map["AudioFileName"] = self.audioFileName!
        }
        if self.audioResourceId != nil {
            map["AudioResourceId"] = self.audioResourceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.ossFileKey != nil {
            map["OssFileKey"] = self.ossFileKey!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AudioFileName"] as? String {
            self.audioFileName = value
        }
        if let value = dict["AudioResourceId"] as? String {
            self.audioResourceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OssFileKey"] as? String {
            self.ossFileKey = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class ModifyAudioFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyAudioFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAudioFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyAudioFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCustomCallTaggingRequest : Tea.TeaModel {
    public var callTagNameList: String?

    public var description_: String?

    public var instanceId: String?

    public var number: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callTagNameList != nil {
            map["CallTagNameList"] = self.callTagNameList!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallTagNameList"] as? String {
            self.callTagNameList = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
    }
}

public class ModifyCustomCallTaggingResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCustomCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCustomCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCustomCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyInstanceRequest : Tea.TeaModel {
    public var description_: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ModifyInstanceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyPhoneNumberRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public var number: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class ModifyPhoneNumberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyPhoneNumberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPhoneNumberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyPhoneNumberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifySkillGroupRequest : Tea.TeaModel {
    public var description_: String?

    public var displayName: String?

    public var instanceId: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisplayName"] as? String {
            self.displayName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class ModifySkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifySkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifySkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifySkillLevelsOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillLevelList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillLevelList != nil {
            map["SkillLevelList"] = self.skillLevelList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillLevelList"] as? String {
            self.skillLevelList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ModifySkillLevelsOfUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifySkillLevelsOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySkillLevelsOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifySkillLevelsOfUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyUserRequest : Tea.TeaModel {
    public var avatarUrl: String?

    public var displayId: String?

    public var displayName: String?

    public var force: Bool?

    public var instanceId: String?

    public var mobile: String?

    public var nickname: String?

    public var roleId: String?

    public var userId: String?

    public var workMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.avatarUrl != nil {
            map["AvatarUrl"] = self.avatarUrl!
        }
        if self.displayId != nil {
            map["DisplayId"] = self.displayId!
        }
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.mobile != nil {
            map["Mobile"] = self.mobile!
        }
        if self.nickname != nil {
            map["Nickname"] = self.nickname!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.workMode != nil {
            map["WorkMode"] = self.workMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvatarUrl"] as? String {
            self.avatarUrl = value
        }
        if let value = dict["DisplayId"] as? String {
            self.displayId = value
        }
        if let value = dict["DisplayName"] as? String {
            self.displayName = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Mobile"] as? String {
            self.mobile = value
        }
        if let value = dict["Nickname"] as? String {
            self.nickname = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["WorkMode"] as? String {
            self.workMode = value
        }
    }
}

public class ModifyUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyUserLevelsOfSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public var userLevelList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.userLevelList != nil {
            map["UserLevelList"] = self.userLevelList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["UserLevelList"] as? String {
            self.userLevelList = value
        }
    }
}

public class ModifyUserLevelsOfSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyUserLevelsOfSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserLevelsOfSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyUserLevelsOfSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MonitorCallRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var monitoredUserId: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.monitoredUserId != nil {
            map["MonitoredUserId"] = self.monitoredUserId!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MonitoredUserId"] as? String {
            self.monitoredUserId = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class MonitorCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [MonitorCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [MonitorCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = MonitorCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: MonitorCallResponseBody.Data.CallContext?

        public var userContext: MonitorCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = MonitorCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = MonitorCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: MonitorCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = MonitorCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class MonitorCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MonitorCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MonitorCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MuteCallRequest : Tea.TeaModel {
    public var channelId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? String {
            self.channelId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class MuteCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [MuteCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [MuteCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = MuteCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: MuteCallResponseBody.Data.CallContext?

        public var userContext: MuteCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = MuteCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = MuteCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: MuteCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = MuteCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class MuteCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MuteCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MuteCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PauseCampaignRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class PauseCampaignResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PauseCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PauseCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PauseCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PickOutboundNumbersRequest : Tea.TeaModel {
    public var calledNumber: String?

    public var count: Int32?

    public var instanceId: String?

    public var skillGroupIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calledNumber != nil {
            map["CalledNumber"] = self.calledNumber!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalledNumber"] as? String {
            self.calledNumber = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
    }
}

public class PickOutboundNumbersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Callee : Tea.TeaModel {
            public var city: String?

            public var number: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
            }
        }
        public class Caller : Tea.TeaModel {
            public var city: String?

            public var number: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["City"] as? String {
                    self.city = value
                }
                if let value = dict["Number"] as? String {
                    self.number = value
                }
                if let value = dict["Province"] as? String {
                    self.province = value
                }
            }
        }
        public var callee: PickOutboundNumbersResponseBody.Data.Callee?

        public var caller: PickOutboundNumbersResponseBody.Data.Caller?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callee?.validate()
            try self.caller?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callee != nil {
                map["Callee"] = self.callee?.toMap()
            }
            if self.caller != nil {
                map["Caller"] = self.caller?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Callee"] as? [String: Any?] {
                var model = PickOutboundNumbersResponseBody.Data.Callee()
                model.fromMap(value)
                self.callee = model
            }
            if let value = dict["Caller"] as? [String: Any?] {
                var model = PickOutboundNumbersResponseBody.Data.Caller()
                model.fromMap(value)
                self.caller = model
            }
        }
    }
    public var code: String?

    public var data: [PickOutboundNumbersResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [PickOutboundNumbersResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = PickOutboundNumbersResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PickOutboundNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PickOutboundNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PickOutboundNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PollUserStatusRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class PollUserStatusResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var channelVariables: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.channelVariables != nil {
                        map["ChannelVariables"] = self.channelVariables!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["ChannelVariables"] as? String {
                        self.channelVariables = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var callVariables: String?

            public var channelContexts: [PollUserStatusResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.callVariables != nil {
                    map["CallVariables"] = self.callVariables!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["CallVariables"] as? String {
                    self.callVariables = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [PollUserStatusResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = PollUserStatusResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class ChatContexts : Tea.TeaModel {
            public class Members : Tea.TeaModel {
                public var index: Int32?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var status: String?

                public var userId: String?

                public var userType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    if self.userType != nil {
                        map["UserType"] = self.userType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                    if let value = dict["UserType"] as? String {
                        self.userType = value
                    }
                }
            }
            public var callVariables: String?

            public var chatType: String?

            public var instanceId: String?

            public var jobId: String?

            public var members: [PollUserStatusResponseBody.Data.ChatContexts.Members]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callVariables != nil {
                    map["CallVariables"] = self.callVariables!
                }
                if self.chatType != nil {
                    map["ChatType"] = self.chatType!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.members != nil {
                    var tmp : [Any] = []
                    for k in self.members! {
                        tmp.append(k.toMap())
                    }
                    map["Members"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallVariables"] as? String {
                    self.callVariables = value
                }
                if let value = dict["ChatType"] as? String {
                    self.chatType = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Members"] as? [Any?] {
                    var tmp : [PollUserStatusResponseBody.Data.ChatContexts.Members] = []
                    for v in value {
                        if v != nil {
                            var model = PollUserStatusResponseBody.Data.ChatContexts.Members()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.members = tmp
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public class ParallelJobList : Tea.TeaModel {
                public var jobId: String?

                public var status: String?

                public var timestamp: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                }
            }
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var parallelJobList: [PollUserStatusResponseBody.Data.UserContext.ParallelJobList]?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.parallelJobList != nil {
                    var tmp : [Any] = []
                    for k in self.parallelJobList! {
                        tmp.append(k.toMap())
                    }
                    map["ParallelJobList"] = tmp
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["ParallelJobList"] as? [Any?] {
                    var tmp : [PollUserStatusResponseBody.Data.UserContext.ParallelJobList] = []
                    for v in value {
                        if v != nil {
                            var model = PollUserStatusResponseBody.Data.UserContext.ParallelJobList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.parallelJobList = tmp
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: PollUserStatusResponseBody.Data.CallContext?

        public var chatContexts: [PollUserStatusResponseBody.Data.ChatContexts]?

        public var contextId: Int64?

        public var userContext: PollUserStatusResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.chatContexts != nil {
                var tmp : [Any] = []
                for k in self.chatContexts! {
                    tmp.append(k.toMap())
                }
                map["ChatContexts"] = tmp
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = PollUserStatusResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ChatContexts"] as? [Any?] {
                var tmp : [PollUserStatusResponseBody.Data.ChatContexts] = []
                for v in value {
                    if v != nil {
                        var model = PollUserStatusResponseBody.Data.ChatContexts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.chatContexts = tmp
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = PollUserStatusResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: PollUserStatusResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = PollUserStatusResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PollUserStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PollUserStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PollUserStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ProcessAliMeCallbackOfStagingRequest : Tea.TeaModel {
    public var data: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class ProcessAliMeCallbackOfStagingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var result: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.result != nil {
                map["Result"] = self.result!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Result"] as? String {
                self.result = value
            }
        }
    }
    public var code: String?

    public var data: ProcessAliMeCallbackOfStagingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ProcessAliMeCallbackOfStagingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ProcessAliMeCallbackOfStagingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ProcessAliMeCallbackOfStagingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ProcessAliMeCallbackOfStagingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ProcessCustomIMCallbackRequest : Tea.TeaModel {
    public var accessChannelId: String?

    public var conversationId: String?

    public var instanceId: String?

    public var messageContent: String?

    public var requestId: String?

    public var senderAvatarMediaId: String?

    public var senderId: String?

    public var senderName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessChannelId != nil {
            map["AccessChannelId"] = self.accessChannelId!
        }
        if self.conversationId != nil {
            map["ConversationId"] = self.conversationId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.messageContent != nil {
            map["MessageContent"] = self.messageContent!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.senderAvatarMediaId != nil {
            map["SenderAvatarMediaId"] = self.senderAvatarMediaId!
        }
        if self.senderId != nil {
            map["SenderId"] = self.senderId!
        }
        if self.senderName != nil {
            map["SenderName"] = self.senderName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessChannelId"] as? String {
            self.accessChannelId = value
        }
        if let value = dict["ConversationId"] as? String {
            self.conversationId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MessageContent"] as? String {
            self.messageContent = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SenderAvatarMediaId"] as? String {
            self.senderAvatarMediaId = value
        }
        if let value = dict["SenderId"] as? String {
            self.senderId = value
        }
        if let value = dict["SenderName"] as? String {
            self.senderName = value
        }
    }
}

public class ProcessCustomIMCallbackResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var jobId: String?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ProcessCustomIMCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ProcessCustomIMCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ProcessCustomIMCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PublishContactFlowRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var draftId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.draftId != nil {
            map["DraftId"] = self.draftId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["DraftId"] as? String {
            self.draftId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class PublishContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PublishContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PublishContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PublishContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReadyForServiceRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var outboundScenario: Bool?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.outboundScenario != nil {
            map["OutboundScenario"] = self.outboundScenario!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OutboundScenario"] as? Bool {
            self.outboundScenario = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ReadyForServiceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var deviceId: String?

        public var extension_: String?

        public var instanceId: String?

        public var jobId: String?

        public var outboundScenario: Bool?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: ReadyForServiceResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ReadyForServiceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReadyForServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReadyForServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReadyForServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RedialCallRequest : Tea.TeaModel {
    public var callee: String?

    public var caller: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class RedialCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [RedialCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [RedialCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = RedialCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var instanceId: String?

            public var jobId: String?

            public var outboundScenario: Bool?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: RedialCallResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: RedialCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = RedialCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = RedialCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: RedialCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RedialCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RedialCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RedialCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RedialCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RegisterDeviceRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var password: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class RegisterDeviceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RegisterDeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RegisterDeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RegisterDeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RegisterDevicesRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var password: String?

    public var userIdListJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.userIdListJson != nil {
            map["UserIdListJson"] = self.userIdListJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["UserIdListJson"] as? String {
            self.userIdListJson = value
        }
    }
}

public class RegisterDevicesResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RegisterDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RegisterDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RegisterDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RejectChatRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
    }
}

public class RejectChatResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RejectChatResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RejectChatResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RejectChatResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RejectTicketRequest : Tea.TeaModel {
    public var comment: String?

    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class RejectTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RejectTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RejectTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RejectTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReleaseCallRequest : Tea.TeaModel {
    public var channelId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? String {
            self.channelId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ReleaseCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelId: String?

                public var channelState: String?

                public var channelVariables: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.channelVariables != nil {
                        map["ChannelVariables"] = self.channelVariables!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["ChannelVariables"] as? String {
                        self.channelVariables = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var channelContexts: [ReleaseCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [ReleaseCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = ReleaseCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var instanceId: String?

            public var jobId: String?

            public var outboundScenario: Bool?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: ReleaseCallResponseBody.Data.CallContext?

        public var contextId: Int64?

        public var userContext: ReleaseCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.contextId != nil {
                map["ContextId"] = self.contextId!
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = ReleaseCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["ContextId"] as? Int64 {
                self.contextId = value
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = ReleaseCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: ReleaseCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ReleaseCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReleaseCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReleaseCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReleaseCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReleaseChatRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public var token: String?

    public var userId: String?

    public var userType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
    }
}

public class ReleaseChatResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReleaseChatResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReleaseChatResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReleaseChatResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveBlacklistCallTaggingRequest : Tea.TeaModel {
    public var instanceId: String?

    public var jobId: String?

    public var number: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
    }
}

public class RemoveBlacklistCallTaggingResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveBlacklistCallTaggingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveBlacklistCallTaggingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveBlacklistCallTaggingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveDoNotCallNumbersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var numberList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
    }
}

public class RemoveDoNotCallNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveDoNotCallNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveDoNotCallNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveDoNotCallNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemovePersonalNumbersFromUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var numberList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class RemovePersonalNumbersFromUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemovePersonalNumbersFromUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemovePersonalNumbersFromUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemovePersonalNumbersFromUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemovePhoneNumberFromSkillGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var number: String?

    public var skillGroupIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Number"] as? String {
            self.number = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
    }
}

public class RemovePhoneNumberFromSkillGroupsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemovePhoneNumberFromSkillGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemovePhoneNumberFromSkillGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemovePhoneNumberFromSkillGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemovePhoneNumbersRequest : Tea.TeaModel {
    public var force: Bool?

    public var instanceId: String?

    public var numberList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
    }
}

public class RemovePhoneNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemovePhoneNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemovePhoneNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemovePhoneNumbersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemovePhoneNumbersFromSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var numberList: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NumberList"] as? String {
            self.numberList = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
    }
}

public class RemovePhoneNumbersFromSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemovePhoneNumbersFromSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemovePhoneNumbersFromSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemovePhoneNumbersFromSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveSkillGroupsFromUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupIdList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupIdList"] as? String {
            self.skillGroupIdList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class RemoveSkillGroupsFromUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveSkillGroupsFromUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveSkillGroupsFromUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveSkillGroupsFromUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveUsersRequest : Tea.TeaModel {
    public var filePath: String?

    public var force: Bool?

    public var instanceId: String?

    public var notificationEmail: String?

    public var userIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filePath != nil {
            map["FilePath"] = self.filePath!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.notificationEmail != nil {
            map["NotificationEmail"] = self.notificationEmail!
        }
        if self.userIdList != nil {
            map["UserIdList"] = self.userIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FilePath"] as? String {
            self.filePath = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NotificationEmail"] as? String {
            self.notificationEmail = value
        }
        if let value = dict["UserIdList"] as? String {
            self.userIdList = value
        }
    }
}

public class RemoveUsersResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveUsersFromSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public var userIdList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.userIdList != nil {
            map["UserIdList"] = self.userIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["UserIdList"] as? String {
            self.userIdList = value
        }
    }
}

public class RemoveUsersFromSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveUsersFromSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUsersFromSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveUsersFromSkillGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetAgentStateRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ResetAgentStateResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var deviceId: String?

        public var extension_: String?

        public var instanceId: String?

        public var jobId: String?

        public var outboundScenario: Bool?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: ResetAgentStateResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ResetAgentStateResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetAgentStateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetAgentStateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetAgentStateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetUserPasswordRequest : Tea.TeaModel {
    public var instanceId: String?

    public var password: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class ResetUserPasswordResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetUserPasswordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetUserPasswordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetUserPasswordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RestoreArchivedRecordingsRequest : Tea.TeaModel {
    public var contactIds: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactIds != nil {
            map["ContactIds"] = self.contactIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactIds"] as? String {
            self.contactIds = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class RestoreArchivedRecordingsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var contactId: String?

        public var exists: String?

        public var status: String?

        public var storageType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactId != nil {
                map["ContactId"] = self.contactId!
            }
            if self.exists != nil {
                map["Exists"] = self.exists!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageType != nil {
                map["StorageType"] = self.storageType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContactId"] as? String {
                self.contactId = value
            }
            if let value = dict["Exists"] as? String {
                self.exists = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageType"] as? String {
                self.storageType = value
            }
        }
    }
    public var code: String?

    public var data: [RestoreArchivedRecordingsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [RestoreArchivedRecordingsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = RestoreArchivedRecordingsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RestoreArchivedRecordingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RestoreArchivedRecordingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RestoreArchivedRecordingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResubmitTicketRequest : Tea.TeaModel {
    public var comment: String?

    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class ResubmitTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResubmitTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResubmitTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResubmitTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResumeCampaignRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class ResumeCampaignResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResumeCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResumeCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResumeCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RetrieveCallRequest : Tea.TeaModel {
    public var channelId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? String {
            self.channelId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class RetrieveCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [RetrieveCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [RetrieveCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = RetrieveCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: RetrieveCallResponseBody.Data.CallContext?

        public var userContext: RetrieveCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = RetrieveCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = RetrieveCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: RetrieveCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RetrieveCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RetrieveCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RetrieveCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RetrieveCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveDocumentRequest : Tea.TeaModel {
    public var documentId: String?

    public var documentJson: String?

    public var instanceId: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.documentId != nil {
            map["DocumentId"] = self.documentId!
        }
        if self.documentJson != nil {
            map["DocumentJson"] = self.documentJson!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocumentId"] as? String {
            self.documentId = value
        }
        if let value = dict["DocumentJson"] as? String {
            self.documentJson = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class SaveDocumentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SaveDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveRTCStatsV2Request : Tea.TeaModel {
    public var callId: String?

    public var generalInfo: String?

    public var googAddress: String?

    public var instanceId: String?

    public var receiverReport: String?

    public var senderReport: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callId != nil {
            map["CallId"] = self.callId!
        }
        if self.generalInfo != nil {
            map["GeneralInfo"] = self.generalInfo!
        }
        if self.googAddress != nil {
            map["GoogAddress"] = self.googAddress!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.receiverReport != nil {
            map["ReceiverReport"] = self.receiverReport!
        }
        if self.senderReport != nil {
            map["SenderReport"] = self.senderReport!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallId"] as? String {
            self.callId = value
        }
        if let value = dict["GeneralInfo"] as? String {
            self.generalInfo = value
        }
        if let value = dict["GoogAddress"] as? String {
            self.googAddress = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ReceiverReport"] as? String {
            self.receiverReport = value
        }
        if let value = dict["SenderReport"] as? String {
            self.senderReport = value
        }
    }
}

public class SaveRTCStatsV2ResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public var rowCount: Int64?

    public var success: Bool?

    public var timeStamp: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.timeStamp != nil {
            map["TimeStamp"] = self.timeStamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TimeStamp"] as? Int64 {
            self.timeStamp = value
        }
    }
}

public class SaveRTCStatsV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveRTCStatsV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveRTCStatsV2ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveTerminalLogRequest : Tea.TeaModel {
    public var appName: String?

    public var callId: String?

    public var content: String?

    public var dataType: Int32?

    public var instanceId: String?

    public var jobId: String?

    public var methodName: String?

    public var status: String?

    public var uniqueRequestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.callId != nil {
            map["CallId"] = self.callId!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.methodName != nil {
            map["MethodName"] = self.methodName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.uniqueRequestId != nil {
            map["UniqueRequestId"] = self.uniqueRequestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["CallId"] as? String {
            self.callId = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["DataType"] as? Int32 {
            self.dataType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["MethodName"] as? String {
            self.methodName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UniqueRequestId"] as? String {
            self.uniqueRequestId = value
        }
    }
}

public class SaveTerminalLogResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var timeStamp: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.timeStamp != nil {
            map["TimeStamp"] = self.timeStamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TimeStamp"] as? Int64 {
            self.timeStamp = value
        }
    }
}

public class SaveTerminalLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveTerminalLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveTerminalLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveWebRTCStatsRequest : Tea.TeaModel {
    public var callId: String?

    public var generalInfo: String?

    public var googAddress: String?

    public var instanceId: String?

    public var receiverReport: String?

    public var senderReport: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callId != nil {
            map["CallId"] = self.callId!
        }
        if self.generalInfo != nil {
            map["GeneralInfo"] = self.generalInfo!
        }
        if self.googAddress != nil {
            map["GoogAddress"] = self.googAddress!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.receiverReport != nil {
            map["ReceiverReport"] = self.receiverReport!
        }
        if self.senderReport != nil {
            map["SenderReport"] = self.senderReport!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallId"] as? String {
            self.callId = value
        }
        if let value = dict["GeneralInfo"] as? String {
            self.generalInfo = value
        }
        if let value = dict["GoogAddress"] as? String {
            self.googAddress = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ReceiverReport"] as? String {
            self.receiverReport = value
        }
        if let value = dict["SenderReport"] as? String {
            self.senderReport = value
        }
    }
}

public class SaveWebRTCStatsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public var rowCount: Int64?

    public var success: Bool?

    public var timeStamp: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.timeStamp != nil {
            map["TimeStamp"] = self.timeStamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TimeStamp"] as? Int64 {
            self.timeStamp = value
        }
    }
}

public class SaveWebRTCStatsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveWebRTCStatsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveWebRTCStatsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveWebRtcInfoRequest : Tea.TeaModel {
    public var callId: String?

    public var content: String?

    public var contentType: String?

    public var instanceId: String?

    public var jobId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callId != nil {
            map["CallId"] = self.callId!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentType != nil {
            map["ContentType"] = self.contentType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallId"] as? String {
            self.callId = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentType"] as? String {
            self.contentType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
    }
}

public class SaveWebRtcInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public var rowCount: Int64?

    public var success: Bool?

    public var timeStamp: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.timeStamp != nil {
            map["TimeStamp"] = self.timeStamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TimeStamp"] as? Int64 {
            self.timeStamp = value
        }
    }
}

public class SaveWebRtcInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveWebRtcInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveWebRtcInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendDtmfSignalingRequest : Tea.TeaModel {
    public var channelId: String?

    public var deviceId: String?

    public var dtmf: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.dtmf != nil {
            map["Dtmf"] = self.dtmf!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? String {
            self.channelId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["Dtmf"] as? String {
            self.dtmf = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class SendDtmfSignalingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [SendDtmfSignalingResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [SendDtmfSignalingResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = SendDtmfSignalingResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: SendDtmfSignalingResponseBody.Data.CallContext?

        public var userContext: SendDtmfSignalingResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = SendDtmfSignalingResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = SendDtmfSignalingResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: SendDtmfSignalingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SendDtmfSignalingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SendDtmfSignalingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendDtmfSignalingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendDtmfSignalingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SignInGroupRequest : Tea.TeaModel {
    public var additivity: Bool?

    public var chatDeviceId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var signedSkillGroupIdList: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additivity != nil {
            map["Additivity"] = self.additivity!
        }
        if self.chatDeviceId != nil {
            map["ChatDeviceId"] = self.chatDeviceId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.signedSkillGroupIdList != nil {
            map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Additivity"] as? Bool {
            self.additivity = value
        }
        if let value = dict["ChatDeviceId"] as? String {
            self.chatDeviceId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SignedSkillGroupIdList"] as? String {
            self.signedSkillGroupIdList = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class SignInGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var chatDeviceId: String?

        public var deviceId: String?

        public var extension_: String?

        public var instanceId: String?

        public var jobId: String?

        public var outboundScenario: Bool?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.chatDeviceId != nil {
                map["ChatDeviceId"] = self.chatDeviceId!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["ChatDeviceId"] as? String {
                self.chatDeviceId = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: SignInGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SignInGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SignInGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SignInGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SignInGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SignOutGroupRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class SignOutGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var deviceId: String?

        public var extension_: String?

        public var heartbeat: Int64?

        public var instanceId: String?

        public var jobId: String?

        public var mobile: String?

        public var outboundScenario: Bool?

        public var reserved: Int64?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.heartbeat != nil {
                map["Heartbeat"] = self.heartbeat!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.reserved != nil {
                map["Reserved"] = self.reserved!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Heartbeat"] as? Int64 {
                self.heartbeat = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Mobile"] as? String {
                self.mobile = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["Reserved"] as? Int64 {
                self.reserved = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: SignOutGroupResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SignOutGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SignOutGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SignOutGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SignOutGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartBack2BackCallRequest : Tea.TeaModel {
    public var additionalBroker: String?

    public var broker: String?

    public var callee: String?

    public var caller: String?

    public var instanceId: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionalBroker != nil {
            map["AdditionalBroker"] = self.additionalBroker!
        }
        if self.broker != nil {
            map["Broker"] = self.broker!
        }
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionalBroker"] as? String {
            self.additionalBroker = value
        }
        if let value = dict["Broker"] as? String {
            self.broker = value
        }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
    }
}

public class StartBack2BackCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [StartBack2BackCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [StartBack2BackCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = StartBack2BackCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: StartBack2BackCallResponseBody.Data.CallContext?

        public var userContext: StartBack2BackCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = StartBack2BackCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = StartBack2BackCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: StartBack2BackCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = StartBack2BackCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartBack2BackCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartBack2BackCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartBack2BackCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartChatRequest : Tea.TeaModel {
    public class UserList : Tea.TeaModel {
        public var avatarUrl: String?

        public var nickname: String?

        public var userId: String?

        public var userType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.avatarUrl != nil {
                map["AvatarUrl"] = self.avatarUrl!
            }
            if self.nickname != nil {
                map["Nickname"] = self.nickname!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userType != nil {
                map["UserType"] = self.userType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AvatarUrl"] as? String {
                self.avatarUrl = value
            }
            if let value = dict["Nickname"] as? String {
                self.nickname = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserType"] as? String {
                self.userType = value
            }
        }
    }
    public var accessChannelId: String?

    public var instanceId: String?

    public var token: String?

    public var userList: [StartChatRequest.UserList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessChannelId != nil {
            map["AccessChannelId"] = self.accessChannelId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.userList != nil {
            var tmp : [Any] = []
            for k in self.userList! {
                tmp.append(k.toMap())
            }
            map["UserList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessChannelId"] as? String {
            self.accessChannelId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["UserList"] as? [Any?] {
            var tmp : [StartChatRequest.UserList] = []
            for v in value {
                if v != nil {
                    var model = StartChatRequest.UserList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userList = tmp
        }
    }
}

public class StartChatShrinkRequest : Tea.TeaModel {
    public var accessChannelId: String?

    public var instanceId: String?

    public var token: String?

    public var userListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessChannelId != nil {
            map["AccessChannelId"] = self.accessChannelId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.userListShrink != nil {
            map["UserList"] = self.userListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessChannelId"] as? String {
            self.accessChannelId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["UserList"] as? String {
            self.userListShrink = value
        }
    }
}

public class StartChatResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var chatConversationId: String?

        public var jobId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chatConversationId != nil {
                map["ChatConversationId"] = self.chatConversationId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChatConversationId"] as? String {
                self.chatConversationId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
        }
    }
    public var code: String?

    public var data: StartChatResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = StartChatResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartChatResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartChatResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartChatResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartConferenceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var participantListJson: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.participantListJson != nil {
            map["ParticipantListJson"] = self.participantListJson!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ParticipantListJson"] as? String {
            self.participantListJson = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class StartConferenceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [StartConferenceResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [StartConferenceResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = StartConferenceResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: StartConferenceResponseBody.Data.CallContext?

        public var userContext: StartConferenceResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = StartConferenceResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = StartConferenceResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: StartConferenceResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = StartConferenceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartEditContactFlowRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class StartEditContactFlowResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartEditContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartEditContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartEditContactFlowResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartPredictiveCallRequest : Tea.TeaModel {
    public var callee: String?

    public var caller: String?

    public var contactFlowId: String?

    public var contactFlowVariables: String?

    public var instanceId: String?

    public var maskedCallee: String?

    public var skillGroupId: String?

    public var tags: String?

    public var timeoutSeconds: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.contactFlowVariables != nil {
            map["ContactFlowVariables"] = self.contactFlowVariables!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maskedCallee != nil {
            map["MaskedCallee"] = self.maskedCallee!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.timeoutSeconds != nil {
            map["TimeoutSeconds"] = self.timeoutSeconds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["ContactFlowVariables"] as? String {
            self.contactFlowVariables = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["MaskedCallee"] as? String {
            self.maskedCallee = value
        }
        if let value = dict["SkillGroupId"] as? String {
            self.skillGroupId = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TimeoutSeconds"] as? Int32 {
            self.timeoutSeconds = value
        }
    }
}

public class StartPredictiveCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [StartPredictiveCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [StartPredictiveCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = StartPredictiveCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var reserved: Int64?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.reserved != nil {
                    map["Reserved"] = self.reserved!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["Reserved"] as? Int64 {
                    self.reserved = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: StartPredictiveCallResponseBody.Data.CallContext?

        public var userContext: StartPredictiveCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = StartPredictiveCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = StartPredictiveCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: StartPredictiveCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = StartPredictiveCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartPredictiveCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartPredictiveCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartPredictiveCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartPrivacyCallRequest : Tea.TeaModel {
    public var appId: String?

    public var callee: String?

    public var caller: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Callee"] as? String {
            self.callee = value
        }
        if let value = dict["Caller"] as? String {
            self.caller = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class StartPrivacyCallResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartPrivacyCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartPrivacyCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartPrivacyCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitCampaignRequest : Tea.TeaModel {
    public var campaignId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class SubmitCampaignResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchToConferenceRequest : Tea.TeaModel {
    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class SwitchToConferenceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [SwitchToConferenceResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [SwitchToConferenceResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = SwitchToConferenceResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var deviceState: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.deviceState != nil {
                    map["DeviceState"] = self.deviceState!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["DeviceState"] as? String {
                    self.deviceState = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: SwitchToConferenceResponseBody.Data.CallContext?

        public var userContext: SwitchToConferenceResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = SwitchToConferenceResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = SwitchToConferenceResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: SwitchToConferenceResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SwitchToConferenceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SwitchToConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchToConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchToConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TakeBreakRequest : Tea.TeaModel {
    public var code: String?

    public var deviceId: String?

    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class TakeBreakResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var breakCode: String?

        public var deviceId: String?

        public var extension_: String?

        public var heartbeat: Int64?

        public var instanceId: String?

        public var jobId: String?

        public var mobile: String?

        public var outboundScenario: Bool?

        public var reserved: Int64?

        public var signedSkillGroupIdList: [String]?

        public var userId: String?

        public var userState: String?

        public var workMode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.breakCode != nil {
                map["BreakCode"] = self.breakCode!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.heartbeat != nil {
                map["Heartbeat"] = self.heartbeat!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.mobile != nil {
                map["Mobile"] = self.mobile!
            }
            if self.outboundScenario != nil {
                map["OutboundScenario"] = self.outboundScenario!
            }
            if self.reserved != nil {
                map["Reserved"] = self.reserved!
            }
            if self.signedSkillGroupIdList != nil {
                map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userState != nil {
                map["UserState"] = self.userState!
            }
            if self.workMode != nil {
                map["WorkMode"] = self.workMode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BreakCode"] as? String {
                self.breakCode = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Heartbeat"] as? Int64 {
                self.heartbeat = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Mobile"] as? String {
                self.mobile = value
            }
            if let value = dict["OutboundScenario"] as? Bool {
                self.outboundScenario = value
            }
            if let value = dict["Reserved"] as? Int64 {
                self.reserved = value
            }
            if let value = dict["SignedSkillGroupIdList"] as? [String] {
                self.signedSkillGroupIdList = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserState"] as? String {
                self.userState = value
            }
            if let value = dict["WorkMode"] as? String {
                self.workMode = value
            }
        }
    }
    public var code: String?

    public var data: TakeBreakResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = TakeBreakResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TakeBreakResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TakeBreakResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TakeBreakResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TerminateTicketRequest : Tea.TeaModel {
    public var comment: String?

    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class TerminateTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TerminateTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TerminateTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TerminateTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TransferTicketTaskRequest : Tea.TeaModel {
    public var assignee: String?

    public var comment: String?

    public var instanceId: String?

    public var taskId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assignee != nil {
            map["Assignee"] = self.assignee!
        }
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Assignee"] as? String {
            self.assignee = value
        }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class TransferTicketTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TransferTicketTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TransferTicketTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TransferTicketTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnmuteCallRequest : Tea.TeaModel {
    public var channelId: String?

    public var deviceId: String?

    public var instanceId: String?

    public var jobId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? String {
            self.channelId = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class UnmuteCallResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallContext : Tea.TeaModel {
            public class ChannelContexts : Tea.TeaModel {
                public var callType: String?

                public var channelFlags: String?

                public var channelId: String?

                public var channelState: String?

                public var destination: String?

                public var index: Int32?

                public var jobId: String?

                public var originator: String?

                public var releaseInitiator: String?

                public var releaseReason: String?

                public var skillGroupId: String?

                public var timestamp: Int64?

                public var userExtension: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.callType != nil {
                        map["CallType"] = self.callType!
                    }
                    if self.channelFlags != nil {
                        map["ChannelFlags"] = self.channelFlags!
                    }
                    if self.channelId != nil {
                        map["ChannelId"] = self.channelId!
                    }
                    if self.channelState != nil {
                        map["ChannelState"] = self.channelState!
                    }
                    if self.destination != nil {
                        map["Destination"] = self.destination!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.jobId != nil {
                        map["JobId"] = self.jobId!
                    }
                    if self.originator != nil {
                        map["Originator"] = self.originator!
                    }
                    if self.releaseInitiator != nil {
                        map["ReleaseInitiator"] = self.releaseInitiator!
                    }
                    if self.releaseReason != nil {
                        map["ReleaseReason"] = self.releaseReason!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.userExtension != nil {
                        map["UserExtension"] = self.userExtension!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CallType"] as? String {
                        self.callType = value
                    }
                    if let value = dict["ChannelFlags"] as? String {
                        self.channelFlags = value
                    }
                    if let value = dict["ChannelId"] as? String {
                        self.channelId = value
                    }
                    if let value = dict["ChannelState"] as? String {
                        self.channelState = value
                    }
                    if let value = dict["Destination"] as? String {
                        self.destination = value
                    }
                    if let value = dict["Index"] as? Int32 {
                        self.index = value
                    }
                    if let value = dict["JobId"] as? String {
                        self.jobId = value
                    }
                    if let value = dict["Originator"] as? String {
                        self.originator = value
                    }
                    if let value = dict["ReleaseInitiator"] as? String {
                        self.releaseInitiator = value
                    }
                    if let value = dict["ReleaseReason"] as? String {
                        self.releaseReason = value
                    }
                    if let value = dict["SkillGroupId"] as? String {
                        self.skillGroupId = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["UserExtension"] as? String {
                        self.userExtension = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public var callType: String?

            public var channelContexts: [UnmuteCallResponseBody.Data.CallContext.ChannelContexts]?

            public var instanceId: String?

            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callType != nil {
                    map["CallType"] = self.callType!
                }
                if self.channelContexts != nil {
                    var tmp : [Any] = []
                    for k in self.channelContexts! {
                        tmp.append(k.toMap())
                    }
                    map["ChannelContexts"] = tmp
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallType"] as? String {
                    self.callType = value
                }
                if let value = dict["ChannelContexts"] as? [Any?] {
                    var tmp : [UnmuteCallResponseBody.Data.CallContext.ChannelContexts] = []
                    for v in value {
                        if v != nil {
                            var model = UnmuteCallResponseBody.Data.CallContext.ChannelContexts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.channelContexts = tmp
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public class UserContext : Tea.TeaModel {
            public var breakCode: String?

            public var deviceId: String?

            public var extension_: String?

            public var heartbeat: Int64?

            public var instanceId: String?

            public var jobId: String?

            public var mobile: String?

            public var outboundScenario: Bool?

            public var signedSkillGroupIdList: [String]?

            public var userId: String?

            public var userState: String?

            public var workMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakCode != nil {
                    map["BreakCode"] = self.breakCode!
                }
                if self.deviceId != nil {
                    map["DeviceId"] = self.deviceId!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.heartbeat != nil {
                    map["Heartbeat"] = self.heartbeat!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mobile != nil {
                    map["Mobile"] = self.mobile!
                }
                if self.outboundScenario != nil {
                    map["OutboundScenario"] = self.outboundScenario!
                }
                if self.signedSkillGroupIdList != nil {
                    map["SignedSkillGroupIdList"] = self.signedSkillGroupIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userState != nil {
                    map["UserState"] = self.userState!
                }
                if self.workMode != nil {
                    map["WorkMode"] = self.workMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BreakCode"] as? String {
                    self.breakCode = value
                }
                if let value = dict["DeviceId"] as? String {
                    self.deviceId = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["Heartbeat"] as? Int64 {
                    self.heartbeat = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["Mobile"] as? String {
                    self.mobile = value
                }
                if let value = dict["OutboundScenario"] as? Bool {
                    self.outboundScenario = value
                }
                if let value = dict["SignedSkillGroupIdList"] as? [String] {
                    self.signedSkillGroupIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserState"] as? String {
                    self.userState = value
                }
                if let value = dict["WorkMode"] as? String {
                    self.workMode = value
                }
            }
        }
        public var callContext: UnmuteCallResponseBody.Data.CallContext?

        public var userContext: UnmuteCallResponseBody.Data.UserContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callContext?.validate()
            try self.userContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callContext != nil {
                map["CallContext"] = self.callContext?.toMap()
            }
            if self.userContext != nil {
                map["UserContext"] = self.userContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallContext"] as? [String: Any?] {
                var model = UnmuteCallResponseBody.Data.CallContext()
                model.fromMap(value)
                self.callContext = model
            }
            if let value = dict["UserContext"] as? [String: Any?] {
                var model = UnmuteCallResponseBody.Data.UserContext()
                model.fromMap(value)
                self.userContext = model
            }
        }
    }
    public var code: String?

    public var data: UnmuteCallResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UnmuteCallResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UnmuteCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnmuteCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnmuteCallResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnregisterDeviceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class UnregisterDeviceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UnregisterDeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnregisterDeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnregisterDeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCallSummaryRequest : Tea.TeaModel {
    public var context: String?

    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.context != nil {
            map["Context"] = self.context!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Context"] as? String {
            self.context = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class UpdateCallSummaryResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCallSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCallSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCallSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCampaignRequest : Tea.TeaModel {
    public var callableTime: String?

    public var campaignId: String?

    public var contactFlowId: String?

    public var endTime: String?

    public var instanceId: String?

    public var name: String?

    public var startTime: String?

    public var strategyParameters: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callableTime != nil {
            map["CallableTime"] = self.callableTime!
        }
        if self.campaignId != nil {
            map["CampaignId"] = self.campaignId!
        }
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.strategyParameters != nil {
            map["StrategyParameters"] = self.strategyParameters!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallableTime"] as? String {
            self.callableTime = value
        }
        if let value = dict["CampaignId"] as? String {
            self.campaignId = value
        }
        if let value = dict["ContactFlowId"] as? String {
            self.contactFlowId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StrategyParameters"] as? String {
            self.strategyParameters = value
        }
    }
}

public class UpdateCampaignResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int64?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int64 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCampaignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCampaignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCampaignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateChatRoutingProfileRequest : Tea.TeaModel {
    public var instanceId: String?

    public var routingProfiles: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.routingProfiles != nil {
            map["RoutingProfiles"] = self.routingProfiles!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RoutingProfiles"] as? String {
            self.routingProfiles = value
        }
    }
}

public class UpdateChatRoutingProfileResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateChatRoutingProfileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateChatRoutingProfileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateChatRoutingProfileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateConfigItemsRequest : Tea.TeaModel {
    public var configItems: String?

    public var instanceId: String?

    public var objectId: String?

    public var objectType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configItems != nil {
            map["ConfigItems"] = self.configItems!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.objectId != nil {
            map["ObjectId"] = self.objectId!
        }
        if self.objectType != nil {
            map["ObjectType"] = self.objectType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigItems"] as? String {
            self.configItems = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ObjectId"] as? String {
            self.objectId = value
        }
        if let value = dict["ObjectType"] as? String {
            self.objectType = value
        }
    }
}

public class UpdateConfigItemsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateConfigItemsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateConfigItemsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateConfigItemsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSchemaPropertyRequest : Tea.TeaModel {
    public class Property : Tea.TeaModel {
        public var array: Bool?

        public var attributes: String?

        public var dataType: String?

        public var description_: String?

        public var disabled: Bool?

        public var displayName: String?

        public var displayOrder: Int32?

        public var editorType: String?

        public var maxLength: Int32?

        public var maximum: Double?

        public var minLength: Int32?

        public var minimum: Double?

        public var name: String?

        public var pattern: String?

        public var patternErrorMessage: String?

        public var readOnly: Bool?

        public var required_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.array != nil {
                map["Array"] = self.array!
            }
            if self.attributes != nil {
                map["Attributes"] = self.attributes!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.disabled != nil {
                map["Disabled"] = self.disabled!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayOrder != nil {
                map["DisplayOrder"] = self.displayOrder!
            }
            if self.editorType != nil {
                map["EditorType"] = self.editorType!
            }
            if self.maxLength != nil {
                map["MaxLength"] = self.maxLength!
            }
            if self.maximum != nil {
                map["Maximum"] = self.maximum!
            }
            if self.minLength != nil {
                map["MinLength"] = self.minLength!
            }
            if self.minimum != nil {
                map["Minimum"] = self.minimum!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.pattern != nil {
                map["Pattern"] = self.pattern!
            }
            if self.patternErrorMessage != nil {
                map["PatternErrorMessage"] = self.patternErrorMessage!
            }
            if self.readOnly != nil {
                map["ReadOnly"] = self.readOnly!
            }
            if self.required_ != nil {
                map["Required"] = self.required_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Array"] as? Bool {
                self.array = value
            }
            if let value = dict["Attributes"] as? String {
                self.attributes = value
            }
            if let value = dict["DataType"] as? String {
                self.dataType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Disabled"] as? Bool {
                self.disabled = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayOrder"] as? Int32 {
                self.displayOrder = value
            }
            if let value = dict["EditorType"] as? String {
                self.editorType = value
            }
            if let value = dict["MaxLength"] as? Int32 {
                self.maxLength = value
            }
            if let value = dict["Maximum"] as? Double {
                self.maximum = value
            }
            if let value = dict["MinLength"] as? Int32 {
                self.minLength = value
            }
            if let value = dict["Minimum"] as? Double {
                self.minimum = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Pattern"] as? String {
                self.pattern = value
            }
            if let value = dict["PatternErrorMessage"] as? String {
                self.patternErrorMessage = value
            }
            if let value = dict["ReadOnly"] as? Bool {
                self.readOnly = value
            }
            if let value = dict["Required"] as? Bool {
                self.required_ = value
            }
        }
    }
    public var instanceId: String?

    public var property: UpdateSchemaPropertyRequest.Property?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.property?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.property != nil {
            map["Property"] = self.property?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Property"] as? [String: Any?] {
            var model = UpdateSchemaPropertyRequest.Property()
            model.fromMap(value)
            self.property = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class UpdateSchemaPropertyShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var propertyShrink: String?

    public var requestId: String?

    public var schemaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.propertyShrink != nil {
            map["Property"] = self.propertyShrink!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schemaId != nil {
            map["SchemaId"] = self.schemaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Property"] as? String {
            self.propertyShrink = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SchemaId"] as? String {
            self.schemaId = value
        }
    }
}

public class UpdateSchemaPropertyResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSchemaPropertyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSchemaPropertyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSchemaPropertyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTicketRequest : Tea.TeaModel {
    public var context: String?

    public var customerId: String?

    public var instanceId: String?

    public var ticketId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.context != nil {
            map["Context"] = self.context!
        }
        if self.customerId != nil {
            map["CustomerId"] = self.customerId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Context"] as? String {
            self.context = value
        }
        if let value = dict["CustomerId"] as? String {
            self.customerId = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class WithdrawTicketRequest : Tea.TeaModel {
    public var comment: String?

    public var instanceId: String?

    public var ticketId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ticketId != nil {
            map["TicketId"] = self.ticketId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TicketId"] as? String {
            self.ticketId = value
        }
    }
}

public class WithdrawTicketResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Any?

    public var httpStatusCode: Int32?

    public var message: String?

    public var params: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Any {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Params"] as? [String] {
            self.params = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class WithdrawTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: WithdrawTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = WithdrawTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
