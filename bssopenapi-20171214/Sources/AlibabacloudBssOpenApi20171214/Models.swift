import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AddAccountRelationRequest : Tea.TeaModel {
    public var childNick: String?

    public var childUserId: Int64?

    public var parentUserId: Int64?

    public var permissionCodes: [String]?

    public var relationType: String?

    public var requestId: String?

    public var roleCodes: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.childNick != nil {
            map["ChildNick"] = self.childNick!
        }
        if self.childUserId != nil {
            map["ChildUserId"] = self.childUserId!
        }
        if self.parentUserId != nil {
            map["ParentUserId"] = self.parentUserId!
        }
        if self.permissionCodes != nil {
            map["PermissionCodes"] = self.permissionCodes!
        }
        if self.relationType != nil {
            map["RelationType"] = self.relationType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.roleCodes != nil {
            map["RoleCodes"] = self.roleCodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChildNick"] as? String {
            self.childNick = value
        }
        if let value = dict["ChildUserId"] as? Int64 {
            self.childUserId = value
        }
        if let value = dict["ParentUserId"] as? Int64 {
            self.parentUserId = value
        }
        if let value = dict["PermissionCodes"] as? [String] {
            self.permissionCodes = value
        }
        if let value = dict["RelationType"] as? String {
            self.relationType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RoleCodes"] as? [String] {
            self.roleCodes = value
        }
    }
}

public class AddAccountRelationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public var relationId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.relationId != nil {
                map["RelationId"] = self.relationId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["RelationId"] as? Int64 {
                self.relationId = value
            }
        }
    }
    public var code: String?

    public var data: AddAccountRelationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddAccountRelationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddAccountRelationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddAccountRelationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddAccountRelationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AllocateCostUnitResourceRequest : Tea.TeaModel {
    public class ResourceInstanceList : Tea.TeaModel {
        public var apportionCode: String?

        public var commodityCode: String?

        public var resourceId: String?

        public var resourceUserId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apportionCode != nil {
                map["ApportionCode"] = self.apportionCode!
            }
            if self.commodityCode != nil {
                map["CommodityCode"] = self.commodityCode!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceUserId != nil {
                map["ResourceUserId"] = self.resourceUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApportionCode"] as? String {
                self.apportionCode = value
            }
            if let value = dict["CommodityCode"] as? String {
                self.commodityCode = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceUserId"] as? Int64 {
                self.resourceUserId = value
            }
        }
    }
    public var fromUnitId: Int64?

    public var fromUnitUserId: Int64?

    public var resourceInstanceList: [AllocateCostUnitResourceRequest.ResourceInstanceList]?

    public var toUnitId: Int64?

    public var toUnitUserId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fromUnitId != nil {
            map["FromUnitId"] = self.fromUnitId!
        }
        if self.fromUnitUserId != nil {
            map["FromUnitUserId"] = self.fromUnitUserId!
        }
        if self.resourceInstanceList != nil {
            var tmp : [Any] = []
            for k in self.resourceInstanceList! {
                tmp.append(k.toMap())
            }
            map["ResourceInstanceList"] = tmp
        }
        if self.toUnitId != nil {
            map["ToUnitId"] = self.toUnitId!
        }
        if self.toUnitUserId != nil {
            map["ToUnitUserId"] = self.toUnitUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FromUnitId"] as? Int64 {
            self.fromUnitId = value
        }
        if let value = dict["FromUnitUserId"] as? Int64 {
            self.fromUnitUserId = value
        }
        if let value = dict["ResourceInstanceList"] as? [Any?] {
            var tmp : [AllocateCostUnitResourceRequest.ResourceInstanceList] = []
            for v in value {
                if v != nil {
                    var model = AllocateCostUnitResourceRequest.ResourceInstanceList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceInstanceList = tmp
        }
        if let value = dict["ToUnitId"] as? Int64 {
            self.toUnitId = value
        }
        if let value = dict["ToUnitUserId"] as? Int64 {
            self.toUnitUserId = value
        }
    }
}

public class AllocateCostUnitResourceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var isSuccess: Bool?

        public var toUnitId: Int64?

        public var toUnitUserId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isSuccess != nil {
                map["IsSuccess"] = self.isSuccess!
            }
            if self.toUnitId != nil {
                map["ToUnitId"] = self.toUnitId!
            }
            if self.toUnitUserId != nil {
                map["ToUnitUserId"] = self.toUnitUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsSuccess"] as? Bool {
                self.isSuccess = value
            }
            if let value = dict["ToUnitId"] as? Int64 {
                self.toUnitId = value
            }
            if let value = dict["ToUnitUserId"] as? Int64 {
                self.toUnitUserId = value
            }
        }
    }
    public var code: String?

    public var data: AllocateCostUnitResourceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AllocateCostUnitResourceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AllocateCostUnitResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AllocateCostUnitResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AllocateCostUnitResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyInvoiceRequest : Tea.TeaModel {
    public var addressId: Int64?

    public var applyUserNick: String?

    public var customerId: Int64?

    public var invoiceAmount: Int64?

    public var invoiceByAmount: Bool?

    public var invoicingType: Int32?

    public var ownerId: Int64?

    public var processWay: Int32?

    public var selectedIds: [Int64]?

    public var userRemark: String?

    public var emails: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addressId != nil {
            map["AddressId"] = self.addressId!
        }
        if self.applyUserNick != nil {
            map["ApplyUserNick"] = self.applyUserNick!
        }
        if self.customerId != nil {
            map["CustomerId"] = self.customerId!
        }
        if self.invoiceAmount != nil {
            map["InvoiceAmount"] = self.invoiceAmount!
        }
        if self.invoiceByAmount != nil {
            map["InvoiceByAmount"] = self.invoiceByAmount!
        }
        if self.invoicingType != nil {
            map["InvoicingType"] = self.invoicingType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.processWay != nil {
            map["ProcessWay"] = self.processWay!
        }
        if self.selectedIds != nil {
            map["SelectedIds"] = self.selectedIds!
        }
        if self.userRemark != nil {
            map["UserRemark"] = self.userRemark!
        }
        if self.emails != nil {
            map["emails"] = self.emails!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddressId"] as? Int64 {
            self.addressId = value
        }
        if let value = dict["ApplyUserNick"] as? String {
            self.applyUserNick = value
        }
        if let value = dict["CustomerId"] as? Int64 {
            self.customerId = value
        }
        if let value = dict["InvoiceAmount"] as? Int64 {
            self.invoiceAmount = value
        }
        if let value = dict["InvoiceByAmount"] as? Bool {
            self.invoiceByAmount = value
        }
        if let value = dict["InvoicingType"] as? Int32 {
            self.invoicingType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProcessWay"] as? Int32 {
            self.processWay = value
        }
        if let value = dict["SelectedIds"] as? [Int64] {
            self.selectedIds = value
        }
        if let value = dict["UserRemark"] as? String {
            self.userRemark = value
        }
        if let value = dict["emails"] as? String {
            self.emails = value
        }
    }
}

public class ApplyInvoiceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var invoiceApplyId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.invoiceApplyId != nil {
                map["InvoiceApplyId"] = self.invoiceApplyId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InvoiceApplyId"] as? Int64 {
                self.invoiceApplyId = value
            }
        }
    }
    public var code: String?

    public var data: ApplyInvoiceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ApplyInvoiceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ApplyInvoiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyInvoiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyInvoiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelOrderRequest : Tea.TeaModel {
    public var orderId: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class CancelOrderResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
        }
    }
    public var code: String?

    public var data: CancelOrderResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CancelOrderResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CancelOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelOrderResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ChangeResellerConsumeAmountRequest : Tea.TeaModel {
    public var adjustType: String?

    public var amount: String?

    public var businessType: String?

    public var currency: String?

    public var extendMap: String?

    public var outBizId: String?

    public var ownerId: Int64?

    public var source: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adjustType != nil {
            map["AdjustType"] = self.adjustType!
        }
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.currency != nil {
            map["Currency"] = self.currency!
        }
        if self.extendMap != nil {
            map["ExtendMap"] = self.extendMap!
        }
        if self.outBizId != nil {
            map["OutBizId"] = self.outBizId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdjustType"] as? String {
            self.adjustType = value
        }
        if let value = dict["Amount"] as? String {
            self.amount = value
        }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["Currency"] as? String {
            self.currency = value
        }
        if let value = dict["ExtendMap"] as? String {
            self.extendMap = value
        }
        if let value = dict["OutBizId"] as? String {
            self.outBizId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
    }
}

public class ChangeResellerConsumeAmountResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ChangeResellerConsumeAmountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeResellerConsumeAmountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeResellerConsumeAmountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ConfirmRelationRequest : Tea.TeaModel {
    public var childUserId: Int64?

    public var confirmCode: String?

    public var parentUserId: Int64?

    public var permissionCodes: [String]?

    public var relationId: Int64?

    public var relationType: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.childUserId != nil {
            map["ChildUserId"] = self.childUserId!
        }
        if self.confirmCode != nil {
            map["ConfirmCode"] = self.confirmCode!
        }
        if self.parentUserId != nil {
            map["ParentUserId"] = self.parentUserId!
        }
        if self.permissionCodes != nil {
            map["PermissionCodes"] = self.permissionCodes!
        }
        if self.relationId != nil {
            map["RelationId"] = self.relationId!
        }
        if self.relationType != nil {
            map["RelationType"] = self.relationType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChildUserId"] as? Int64 {
            self.childUserId = value
        }
        if let value = dict["ConfirmCode"] as? String {
            self.confirmCode = value
        }
        if let value = dict["ParentUserId"] as? Int64 {
            self.parentUserId = value
        }
        if let value = dict["PermissionCodes"] as? [String] {
            self.permissionCodes = value
        }
        if let value = dict["RelationId"] as? Int64 {
            self.relationId = value
        }
        if let value = dict["RelationType"] as? String {
            self.relationType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ConfirmRelationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
        }
    }
    public var code: String?

    public var data: ConfirmRelationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ConfirmRelationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ConfirmRelationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ConfirmRelationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ConfirmRelationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ConvertChargeTypeRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ownerId: Int64?

    public var period: Int32?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class ConvertChargeTypeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var orderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OrderId"] as? String {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: ConvertChargeTypeResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ConvertChargeTypeResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ConvertChargeTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ConvertChargeTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ConvertChargeTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAgAccountRequest : Tea.TeaModel {
    public var accountAttr: String?

    public var cityName: String?

    public var enterpriseName: String?

    public var firstName: String?

    public var lastName: String?

    public var loginEmail: String?

    public var nationCode: String?

    public var postcode: String?

    public var provinceName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountAttr != nil {
            map["AccountAttr"] = self.accountAttr!
        }
        if self.cityName != nil {
            map["CityName"] = self.cityName!
        }
        if self.enterpriseName != nil {
            map["EnterpriseName"] = self.enterpriseName!
        }
        if self.firstName != nil {
            map["FirstName"] = self.firstName!
        }
        if self.lastName != nil {
            map["LastName"] = self.lastName!
        }
        if self.loginEmail != nil {
            map["LoginEmail"] = self.loginEmail!
        }
        if self.nationCode != nil {
            map["NationCode"] = self.nationCode!
        }
        if self.postcode != nil {
            map["Postcode"] = self.postcode!
        }
        if self.provinceName != nil {
            map["ProvinceName"] = self.provinceName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountAttr"] as? String {
            self.accountAttr = value
        }
        if let value = dict["CityName"] as? String {
            self.cityName = value
        }
        if let value = dict["EnterpriseName"] as? String {
            self.enterpriseName = value
        }
        if let value = dict["FirstName"] as? String {
            self.firstName = value
        }
        if let value = dict["LastName"] as? String {
            self.lastName = value
        }
        if let value = dict["LoginEmail"] as? String {
            self.loginEmail = value
        }
        if let value = dict["NationCode"] as? String {
            self.nationCode = value
        }
        if let value = dict["Postcode"] as? String {
            self.postcode = value
        }
        if let value = dict["ProvinceName"] as? String {
            self.provinceName = value
        }
    }
}

public class CreateAgAccountResponseBody : Tea.TeaModel {
    public class AgRelationDto : Tea.TeaModel {
        public var mpk: String?

        public var pk: String?

        public var ramAdminRoleName: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mpk != nil {
                map["Mpk"] = self.mpk!
            }
            if self.pk != nil {
                map["Pk"] = self.pk!
            }
            if self.ramAdminRoleName != nil {
                map["RamAdminRoleName"] = self.ramAdminRoleName!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Mpk"] as? String {
                self.mpk = value
            }
            if let value = dict["Pk"] as? String {
                self.pk = value
            }
            if let value = dict["RamAdminRoleName"] as? String {
                self.ramAdminRoleName = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var agRelationDto: CreateAgAccountResponseBody.AgRelationDto?

    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.agRelationDto?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agRelationDto != nil {
            map["AgRelationDto"] = self.agRelationDto?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgRelationDto"] as? [String: Any?] {
            var model = CreateAgAccountResponseBody.AgRelationDto()
            model.fromMap(value)
            self.agRelationDto = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateAgAccountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAgAccountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAgAccountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCostUnitRequest : Tea.TeaModel {
    public class UnitEntityList : Tea.TeaModel {
        public var ownerUid: Int64?

        public var parentUnitId: Int64?

        public var unitName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ownerUid != nil {
                map["OwnerUid"] = self.ownerUid!
            }
            if self.parentUnitId != nil {
                map["ParentUnitId"] = self.parentUnitId!
            }
            if self.unitName != nil {
                map["UnitName"] = self.unitName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OwnerUid"] as? Int64 {
                self.ownerUid = value
            }
            if let value = dict["ParentUnitId"] as? Int64 {
                self.parentUnitId = value
            }
            if let value = dict["UnitName"] as? String {
                self.unitName = value
            }
        }
    }
    public var unitEntityList: [CreateCostUnitRequest.UnitEntityList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.unitEntityList != nil {
            var tmp : [Any] = []
            for k in self.unitEntityList! {
                tmp.append(k.toMap())
            }
            map["UnitEntityList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UnitEntityList"] as? [Any?] {
            var tmp : [CreateCostUnitRequest.UnitEntityList] = []
            for v in value {
                if v != nil {
                    var model = CreateCostUnitRequest.UnitEntityList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.unitEntityList = tmp
        }
    }
}

public class CreateCostUnitResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CostUnitDtoList : Tea.TeaModel {
            public var ownerUid: Int64?

            public var parentUnitId: Int64?

            public var unitId: Int64?

            public var unitName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ownerUid != nil {
                    map["OwnerUid"] = self.ownerUid!
                }
                if self.parentUnitId != nil {
                    map["ParentUnitId"] = self.parentUnitId!
                }
                if self.unitId != nil {
                    map["UnitId"] = self.unitId!
                }
                if self.unitName != nil {
                    map["UnitName"] = self.unitName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["OwnerUid"] as? Int64 {
                    self.ownerUid = value
                }
                if let value = dict["ParentUnitId"] as? Int64 {
                    self.parentUnitId = value
                }
                if let value = dict["UnitId"] as? Int64 {
                    self.unitId = value
                }
                if let value = dict["UnitName"] as? String {
                    self.unitName = value
                }
            }
        }
        public var costUnitDtoList: [CreateCostUnitResponseBody.Data.CostUnitDtoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.costUnitDtoList != nil {
                var tmp : [Any] = []
                for k in self.costUnitDtoList! {
                    tmp.append(k.toMap())
                }
                map["CostUnitDtoList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CostUnitDtoList"] as? [Any?] {
                var tmp : [CreateCostUnitResponseBody.Data.CostUnitDtoList] = []
                for v in value {
                    if v != nil {
                        var model = CreateCostUnitResponseBody.Data.CostUnitDtoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.costUnitDtoList = tmp
            }
        }
    }
    public var code: String?

    public var data: CreateCostUnitResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateCostUnitResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateCostUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCostUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCostUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateInstanceRequest : Tea.TeaModel {
    public class Parameter : Tea.TeaModel {
        public var code: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var clientToken: String?

    public var logistics: String?

    public var ownerId: Int64?

    public var parameter: [CreateInstanceRequest.Parameter]?

    public var period: Int32?

    public var pricingCycle: Int64?

    public var productCode: String?

    public var productType: String?

    public var renewPeriod: Int32?

    public var renewalStatus: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.logistics != nil {
            map["Logistics"] = self.logistics!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.parameter != nil {
            var tmp : [Any] = []
            for k in self.parameter! {
                tmp.append(k.toMap())
            }
            map["Parameter"] = tmp
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.renewPeriod != nil {
            map["RenewPeriod"] = self.renewPeriod!
        }
        if self.renewalStatus != nil {
            map["RenewalStatus"] = self.renewalStatus!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["Logistics"] as? String {
            self.logistics = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Parameter"] as? [Any?] {
            var tmp : [CreateInstanceRequest.Parameter] = []
            for v in value {
                if v != nil {
                    var model = CreateInstanceRequest.Parameter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.parameter = tmp
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PricingCycle"] as? Int64 {
            self.pricingCycle = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RenewPeriod"] as? Int32 {
            self.renewPeriod = value
        }
        if let value = dict["RenewalStatus"] as? String {
            self.renewalStatus = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class CreateInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var orderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["OrderId"] as? String {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: CreateInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateResellerUserQuotaRequest : Tea.TeaModel {
    public var amount: String?

    public var currency: String?

    public var outBizId: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.currency != nil {
            map["Currency"] = self.currency!
        }
        if self.outBizId != nil {
            map["OutBizId"] = self.outBizId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? String {
            self.amount = value
        }
        if let value = dict["Currency"] as? String {
            self.currency = value
        }
        if let value = dict["OutBizId"] as? String {
            self.outBizId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class CreateResellerUserQuotaResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateResellerUserQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateResellerUserQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateResellerUserQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateResourcePackageRequest : Tea.TeaModel {
    public var duration: Int32?

    public var effectiveDate: String?

    public var ownerId: Int64?

    public var packageType: String?

    public var pricingCycle: String?

    public var productCode: String?

    public var specification: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.effectiveDate != nil {
            map["EffectiveDate"] = self.effectiveDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageType != nil {
            map["PackageType"] = self.packageType!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Duration"] as? Int32 {
            self.duration = value
        }
        if let value = dict["EffectiveDate"] as? String {
            self.effectiveDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageType"] as? String {
            self.packageType = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
    }
}

public class CreateResourcePackageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var orderId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: CreateResourcePackageResponseBody.Data?

    public var message: String?

    public var orderId: Int64?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateResourcePackageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateResourcePackageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateResourcePackageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateResourcePackageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSavingsPlansInstanceRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var commodityCode: String?

    public var duration: String?

    public var effectiveDate: String?

    public var extendMap: [String: String]?

    public var payMode: String?

    public var poolValue: String?

    public var pricingCycle: String?

    public var region: String?

    public var specType: String?

    public var specification: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.effectiveDate != nil {
            map["EffectiveDate"] = self.effectiveDate!
        }
        if self.extendMap != nil {
            map["ExtendMap"] = self.extendMap!
        }
        if self.payMode != nil {
            map["PayMode"] = self.payMode!
        }
        if self.poolValue != nil {
            map["PoolValue"] = self.poolValue!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.specType != nil {
            map["SpecType"] = self.specType!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Duration"] as? String {
            self.duration = value
        }
        if let value = dict["EffectiveDate"] as? String {
            self.effectiveDate = value
        }
        if let value = dict["ExtendMap"] as? [String: String] {
            self.extendMap = value
        }
        if let value = dict["PayMode"] as? String {
            self.payMode = value
        }
        if let value = dict["PoolValue"] as? String {
            self.poolValue = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["SpecType"] as? String {
            self.specType = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateSavingsPlansInstanceShrinkRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var commodityCode: String?

    public var duration: String?

    public var effectiveDate: String?

    public var extendMapShrink: String?

    public var payMode: String?

    public var poolValue: String?

    public var pricingCycle: String?

    public var region: String?

    public var specType: String?

    public var specification: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.effectiveDate != nil {
            map["EffectiveDate"] = self.effectiveDate!
        }
        if self.extendMapShrink != nil {
            map["ExtendMap"] = self.extendMapShrink!
        }
        if self.payMode != nil {
            map["PayMode"] = self.payMode!
        }
        if self.poolValue != nil {
            map["PoolValue"] = self.poolValue!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.specType != nil {
            map["SpecType"] = self.specType!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Duration"] as? String {
            self.duration = value
        }
        if let value = dict["EffectiveDate"] as? String {
            self.effectiveDate = value
        }
        if let value = dict["ExtendMap"] as? String {
            self.extendMapShrink = value
        }
        if let value = dict["PayMode"] as? String {
            self.payMode = value
        }
        if let value = dict["PoolValue"] as? String {
            self.poolValue = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["SpecType"] as? String {
            self.specType = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateSavingsPlansInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var orderId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: CreateSavingsPlansInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateSavingsPlansInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateSavingsPlansInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSavingsPlansInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSavingsPlansInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCostUnitRequest : Tea.TeaModel {
    public var ownerUid: Int64?

    public var unitId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerUid != nil {
            map["OwnerUid"] = self.ownerUid!
        }
        if self.unitId != nil {
            map["UnitId"] = self.unitId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerUid"] as? Int64 {
            self.ownerUid = value
        }
        if let value = dict["UnitId"] as? Int64 {
            self.unitId = value
        }
    }
}

public class DeleteCostUnitResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var isSuccess: Bool?

        public var ownerUid: Int64?

        public var unitId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isSuccess != nil {
                map["IsSuccess"] = self.isSuccess!
            }
            if self.ownerUid != nil {
                map["OwnerUid"] = self.ownerUid!
            }
            if self.unitId != nil {
                map["UnitId"] = self.unitId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsSuccess"] as? Bool {
                self.isSuccess = value
            }
            if let value = dict["OwnerUid"] as? Int64 {
                self.ownerUid = value
            }
            if let value = dict["UnitId"] as? Int64 {
                self.unitId = value
            }
        }
    }
    public var code: String?

    public var data: DeleteCostUnitResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DeleteCostUnitResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCostUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCostUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCostUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCostBudgetsSummaryRequest : Tea.TeaModel {
    public var budgetName: String?

    public var budgetStatus: String?

    public var budgetType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.budgetName != nil {
            map["BudgetName"] = self.budgetName!
        }
        if self.budgetStatus != nil {
            map["BudgetStatus"] = self.budgetStatus!
        }
        if self.budgetType != nil {
            map["BudgetType"] = self.budgetType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BudgetName"] as? String {
            self.budgetName = value
        }
        if let value = dict["BudgetStatus"] as? String {
            self.budgetStatus = value
        }
        if let value = dict["BudgetType"] as? String {
            self.budgetType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class DescribeCostBudgetsSummaryResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var budget: [String: Any]?

            public var budgetName: String?

            public var budgetStatus: String?

            public var budgetType: String?

            public var calculatedValues: [String: Any]?

            public var consumePeriod: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.budget != nil {
                    map["Budget"] = self.budget!
                }
                if self.budgetName != nil {
                    map["BudgetName"] = self.budgetName!
                }
                if self.budgetStatus != nil {
                    map["BudgetStatus"] = self.budgetStatus!
                }
                if self.budgetType != nil {
                    map["BudgetType"] = self.budgetType!
                }
                if self.calculatedValues != nil {
                    map["CalculatedValues"] = self.calculatedValues!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Budget"] as? [String: Any] {
                    self.budget = value
                }
                if let value = dict["BudgetName"] as? String {
                    self.budgetName = value
                }
                if let value = dict["BudgetStatus"] as? String {
                    self.budgetStatus = value
                }
                if let value = dict["BudgetType"] as? String {
                    self.budgetType = value
                }
                if let value = dict["CalculatedValues"] as? [String: Any] {
                    self.calculatedValues = value
                }
                if let value = dict["ConsumePeriod"] as? [String: Any] {
                    self.consumePeriod = value
                }
            }
        }
        public var hostId: String?

        public var items: [DescribeCostBudgetsSummaryResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeCostBudgetsSummaryResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCostBudgetsSummaryResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeCostBudgetsSummaryResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeCostBudgetsSummaryResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeCostBudgetsSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCostBudgetsSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCostBudgetsSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceAmortizedCostByAmortizationPeriodRequest : Tea.TeaModel {
    public var billOwnerIdList: [String]?

    public var billUserIdList: [String]?

    public var billingCycle: String?

    public var consumePeriodFilter: [String]?

    public var costUnitCode: String?

    public var instanceIdList: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var productCode: String?

    public var productDetail: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerIdList != nil {
            map["BillOwnerIdList"] = self.billOwnerIdList!
        }
        if self.billUserIdList != nil {
            map["BillUserIdList"] = self.billUserIdList!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.consumePeriodFilter != nil {
            map["ConsumePeriodFilter"] = self.consumePeriodFilter!
        }
        if self.costUnitCode != nil {
            map["CostUnitCode"] = self.costUnitCode!
        }
        if self.instanceIdList != nil {
            map["InstanceIdList"] = self.instanceIdList!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productDetail != nil {
            map["ProductDetail"] = self.productDetail!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerIdList"] as? [String] {
            self.billOwnerIdList = value
        }
        if let value = dict["BillUserIdList"] as? [String] {
            self.billUserIdList = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["ConsumePeriodFilter"] as? [String] {
            self.consumePeriodFilter = value
        }
        if let value = dict["CostUnitCode"] as? String {
            self.costUnitCode = value
        }
        if let value = dict["InstanceIdList"] as? [String] {
            self.instanceIdList = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductDetail"] as? String {
            self.productDetail = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var afterDiscountAmount: Double?

            public var amortizationPeriod: String?

            public var amortizationStatus: String?

            public var billAccountID: Int64?

            public var billAccountName: String?

            public var billOwnerID: Int64?

            public var billOwnerName: String?

            public var bizType: String?

            public var consumePeriod: String?

            public var costUnit: String?

            public var costUnitCode: String?

            public var currentAmortizationAfterDiscountAmount: Double?

            public var currentAmortizationDeductedByCashCoupons: Double?

            public var currentAmortizationDeductedByCoupons: Double?

            public var currentAmortizationDeductedByPrepaidCard: Double?

            public var currentAmortizationExpenditureAmount: Double?

            public var currentAmortizationInvoiceDiscount: Double?

            public var currentAmortizationPretaxAmount: Double?

            public var currentAmortizationPretaxGrossAmount: Double?

            public var currentAmortizationRoundDownDiscount: Double?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var expenditureAmount: Double?

            public var instanceID: String?

            public var internetIP: String?

            public var intranetIP: String?

            public var invoiceDiscount: Double?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var previouslyAmortizedAfterDiscountAmount: Double?

            public var previouslyAmortizedDeductedByCashCoupons: Double?

            public var previouslyAmortizedDeductedByCoupons: Double?

            public var previouslyAmortizedDeductedByPrepaidCard: Double?

            public var previouslyAmortizedExpenditureAmount: Double?

            public var previouslyAmortizedInvoiceDiscount: Double?

            public var previouslyAmortizedPretaxAmount: Double?

            public var previouslyAmortizedPretaxGrossAmount: Double?

            public var previouslyAmortizedRoundDownDiscount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productDetailCode: String?

            public var productName: String?

            public var region: String?

            public var remainingAmortizationAfterDiscountAmount: Double?

            public var remainingAmortizationDeductedByCashCoupons: Double?

            public var remainingAmortizationDeductedByCoupons: Double?

            public var remainingAmortizationDeductedByPrepaidCard: Double?

            public var remainingAmortizationExpenditureAmount: Double?

            public var remainingAmortizationInvoiceDiscount: Double?

            public var remainingAmortizationPretaxAmount: Double?

            public var remainingAmortizationPretaxGrossAmount: Double?

            public var remainingAmortizationRoundDownDiscount: Double?

            public var resourceGroup: String?

            public var roundDownDiscount: Double?

            public var splitAccountName: String?

            public var splitItemID: String?

            public var splitItemName: String?

            public var splitProductDetail: String?

            public var subscriptionType: String?

            public var tag: String?

            public var zone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.afterDiscountAmount != nil {
                    map["AfterDiscountAmount"] = self.afterDiscountAmount!
                }
                if self.amortizationPeriod != nil {
                    map["AmortizationPeriod"] = self.amortizationPeriod!
                }
                if self.amortizationStatus != nil {
                    map["AmortizationStatus"] = self.amortizationStatus!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billOwnerID != nil {
                    map["BillOwnerID"] = self.billOwnerID!
                }
                if self.billOwnerName != nil {
                    map["BillOwnerName"] = self.billOwnerName!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                if self.costUnit != nil {
                    map["CostUnit"] = self.costUnit!
                }
                if self.costUnitCode != nil {
                    map["CostUnitCode"] = self.costUnitCode!
                }
                if self.currentAmortizationAfterDiscountAmount != nil {
                    map["CurrentAmortizationAfterDiscountAmount"] = self.currentAmortizationAfterDiscountAmount!
                }
                if self.currentAmortizationDeductedByCashCoupons != nil {
                    map["CurrentAmortizationDeductedByCashCoupons"] = self.currentAmortizationDeductedByCashCoupons!
                }
                if self.currentAmortizationDeductedByCoupons != nil {
                    map["CurrentAmortizationDeductedByCoupons"] = self.currentAmortizationDeductedByCoupons!
                }
                if self.currentAmortizationDeductedByPrepaidCard != nil {
                    map["CurrentAmortizationDeductedByPrepaidCard"] = self.currentAmortizationDeductedByPrepaidCard!
                }
                if self.currentAmortizationExpenditureAmount != nil {
                    map["CurrentAmortizationExpenditureAmount"] = self.currentAmortizationExpenditureAmount!
                }
                if self.currentAmortizationInvoiceDiscount != nil {
                    map["CurrentAmortizationInvoiceDiscount"] = self.currentAmortizationInvoiceDiscount!
                }
                if self.currentAmortizationPretaxAmount != nil {
                    map["CurrentAmortizationPretaxAmount"] = self.currentAmortizationPretaxAmount!
                }
                if self.currentAmortizationPretaxGrossAmount != nil {
                    map["CurrentAmortizationPretaxGrossAmount"] = self.currentAmortizationPretaxGrossAmount!
                }
                if self.currentAmortizationRoundDownDiscount != nil {
                    map["CurrentAmortizationRoundDownDiscount"] = self.currentAmortizationRoundDownDiscount!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.expenditureAmount != nil {
                    map["ExpenditureAmount"] = self.expenditureAmount!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.internetIP != nil {
                    map["InternetIP"] = self.internetIP!
                }
                if self.intranetIP != nil {
                    map["IntranetIP"] = self.intranetIP!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.previouslyAmortizedAfterDiscountAmount != nil {
                    map["PreviouslyAmortizedAfterDiscountAmount"] = self.previouslyAmortizedAfterDiscountAmount!
                }
                if self.previouslyAmortizedDeductedByCashCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCashCoupons"] = self.previouslyAmortizedDeductedByCashCoupons!
                }
                if self.previouslyAmortizedDeductedByCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCoupons"] = self.previouslyAmortizedDeductedByCoupons!
                }
                if self.previouslyAmortizedDeductedByPrepaidCard != nil {
                    map["PreviouslyAmortizedDeductedByPrepaidCard"] = self.previouslyAmortizedDeductedByPrepaidCard!
                }
                if self.previouslyAmortizedExpenditureAmount != nil {
                    map["PreviouslyAmortizedExpenditureAmount"] = self.previouslyAmortizedExpenditureAmount!
                }
                if self.previouslyAmortizedInvoiceDiscount != nil {
                    map["PreviouslyAmortizedInvoiceDiscount"] = self.previouslyAmortizedInvoiceDiscount!
                }
                if self.previouslyAmortizedPretaxAmount != nil {
                    map["PreviouslyAmortizedPretaxAmount"] = self.previouslyAmortizedPretaxAmount!
                }
                if self.previouslyAmortizedPretaxGrossAmount != nil {
                    map["PreviouslyAmortizedPretaxGrossAmount"] = self.previouslyAmortizedPretaxGrossAmount!
                }
                if self.previouslyAmortizedRoundDownDiscount != nil {
                    map["PreviouslyAmortizedRoundDownDiscount"] = self.previouslyAmortizedRoundDownDiscount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productDetailCode != nil {
                    map["ProductDetailCode"] = self.productDetailCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.remainingAmortizationAfterDiscountAmount != nil {
                    map["RemainingAmortizationAfterDiscountAmount"] = self.remainingAmortizationAfterDiscountAmount!
                }
                if self.remainingAmortizationDeductedByCashCoupons != nil {
                    map["RemainingAmortizationDeductedByCashCoupons"] = self.remainingAmortizationDeductedByCashCoupons!
                }
                if self.remainingAmortizationDeductedByCoupons != nil {
                    map["RemainingAmortizationDeductedByCoupons"] = self.remainingAmortizationDeductedByCoupons!
                }
                if self.remainingAmortizationDeductedByPrepaidCard != nil {
                    map["RemainingAmortizationDeductedByPrepaidCard"] = self.remainingAmortizationDeductedByPrepaidCard!
                }
                if self.remainingAmortizationExpenditureAmount != nil {
                    map["RemainingAmortizationExpenditureAmount"] = self.remainingAmortizationExpenditureAmount!
                }
                if self.remainingAmortizationInvoiceDiscount != nil {
                    map["RemainingAmortizationInvoiceDiscount"] = self.remainingAmortizationInvoiceDiscount!
                }
                if self.remainingAmortizationPretaxAmount != nil {
                    map["RemainingAmortizationPretaxAmount"] = self.remainingAmortizationPretaxAmount!
                }
                if self.remainingAmortizationPretaxGrossAmount != nil {
                    map["RemainingAmortizationPretaxGrossAmount"] = self.remainingAmortizationPretaxGrossAmount!
                }
                if self.remainingAmortizationRoundDownDiscount != nil {
                    map["RemainingAmortizationRoundDownDiscount"] = self.remainingAmortizationRoundDownDiscount!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.roundDownDiscount != nil {
                    map["RoundDownDiscount"] = self.roundDownDiscount!
                }
                if self.splitAccountName != nil {
                    map["SplitAccountName"] = self.splitAccountName!
                }
                if self.splitItemID != nil {
                    map["SplitItemID"] = self.splitItemID!
                }
                if self.splitItemName != nil {
                    map["SplitItemName"] = self.splitItemName!
                }
                if self.splitProductDetail != nil {
                    map["SplitProductDetail"] = self.splitProductDetail!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AfterDiscountAmount"] as? Double {
                    self.afterDiscountAmount = value
                }
                if let value = dict["AmortizationPeriod"] as? String {
                    self.amortizationPeriod = value
                }
                if let value = dict["AmortizationStatus"] as? String {
                    self.amortizationStatus = value
                }
                if let value = dict["BillAccountID"] as? Int64 {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillOwnerID"] as? Int64 {
                    self.billOwnerID = value
                }
                if let value = dict["BillOwnerName"] as? String {
                    self.billOwnerName = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ConsumePeriod"] as? String {
                    self.consumePeriod = value
                }
                if let value = dict["CostUnit"] as? String {
                    self.costUnit = value
                }
                if let value = dict["CostUnitCode"] as? String {
                    self.costUnitCode = value
                }
                if let value = dict["CurrentAmortizationAfterDiscountAmount"] as? Double {
                    self.currentAmortizationAfterDiscountAmount = value
                }
                if let value = dict["CurrentAmortizationDeductedByCashCoupons"] as? Double {
                    self.currentAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByCoupons"] as? Double {
                    self.currentAmortizationDeductedByCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByPrepaidCard"] as? Double {
                    self.currentAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["CurrentAmortizationExpenditureAmount"] as? Double {
                    self.currentAmortizationExpenditureAmount = value
                }
                if let value = dict["CurrentAmortizationInvoiceDiscount"] as? Double {
                    self.currentAmortizationInvoiceDiscount = value
                }
                if let value = dict["CurrentAmortizationPretaxAmount"] as? Double {
                    self.currentAmortizationPretaxAmount = value
                }
                if let value = dict["CurrentAmortizationPretaxGrossAmount"] as? Double {
                    self.currentAmortizationPretaxGrossAmount = value
                }
                if let value = dict["CurrentAmortizationRoundDownDiscount"] as? Double {
                    self.currentAmortizationRoundDownDiscount = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["ExpenditureAmount"] as? Double {
                    self.expenditureAmount = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["InternetIP"] as? String {
                    self.internetIP = value
                }
                if let value = dict["IntranetIP"] as? String {
                    self.intranetIP = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedAfterDiscountAmount"] as? Double {
                    self.previouslyAmortizedAfterDiscountAmount = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCashCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCashCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByPrepaidCard"] as? Double {
                    self.previouslyAmortizedDeductedByPrepaidCard = value
                }
                if let value = dict["PreviouslyAmortizedExpenditureAmount"] as? Double {
                    self.previouslyAmortizedExpenditureAmount = value
                }
                if let value = dict["PreviouslyAmortizedInvoiceDiscount"] as? Double {
                    self.previouslyAmortizedInvoiceDiscount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxAmount"] as? Double {
                    self.previouslyAmortizedPretaxAmount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxGrossAmount"] as? Double {
                    self.previouslyAmortizedPretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedRoundDownDiscount"] as? Double {
                    self.previouslyAmortizedRoundDownDiscount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductDetailCode"] as? String {
                    self.productDetailCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RemainingAmortizationAfterDiscountAmount"] as? Double {
                    self.remainingAmortizationAfterDiscountAmount = value
                }
                if let value = dict["RemainingAmortizationDeductedByCashCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByPrepaidCard"] as? Double {
                    self.remainingAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["RemainingAmortizationExpenditureAmount"] as? Double {
                    self.remainingAmortizationExpenditureAmount = value
                }
                if let value = dict["RemainingAmortizationInvoiceDiscount"] as? Double {
                    self.remainingAmortizationInvoiceDiscount = value
                }
                if let value = dict["RemainingAmortizationPretaxAmount"] as? Double {
                    self.remainingAmortizationPretaxAmount = value
                }
                if let value = dict["RemainingAmortizationPretaxGrossAmount"] as? Double {
                    self.remainingAmortizationPretaxGrossAmount = value
                }
                if let value = dict["RemainingAmortizationRoundDownDiscount"] as? Double {
                    self.remainingAmortizationRoundDownDiscount = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["RoundDownDiscount"] as? Double {
                    self.roundDownDiscount = value
                }
                if let value = dict["SplitAccountName"] as? String {
                    self.splitAccountName = value
                }
                if let value = dict["SplitItemID"] as? String {
                    self.splitItemID = value
                }
                if let value = dict["SplitItemName"] as? String {
                    self.splitItemName = value
                }
                if let value = dict["SplitProductDetail"] as? String {
                    self.splitProductDetail = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var items: [DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeInstanceAmortizedCostByAmortizationPeriodResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest : Tea.TeaModel {
    public var amortizationDateEnd: String?

    public var amortizationDateStart: String?

    public var billOwnerIdList: [String]?

    public var billUserIdList: [String]?

    public var billingCycle: String?

    public var costUnitCode: String?

    public var instanceIdList: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var productCode: String?

    public var productDetail: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amortizationDateEnd != nil {
            map["AmortizationDateEnd"] = self.amortizationDateEnd!
        }
        if self.amortizationDateStart != nil {
            map["AmortizationDateStart"] = self.amortizationDateStart!
        }
        if self.billOwnerIdList != nil {
            map["BillOwnerIdList"] = self.billOwnerIdList!
        }
        if self.billUserIdList != nil {
            map["BillUserIdList"] = self.billUserIdList!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.costUnitCode != nil {
            map["CostUnitCode"] = self.costUnitCode!
        }
        if self.instanceIdList != nil {
            map["InstanceIdList"] = self.instanceIdList!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productDetail != nil {
            map["ProductDetail"] = self.productDetail!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AmortizationDateEnd"] as? String {
            self.amortizationDateEnd = value
        }
        if let value = dict["AmortizationDateStart"] as? String {
            self.amortizationDateStart = value
        }
        if let value = dict["BillOwnerIdList"] as? [String] {
            self.billOwnerIdList = value
        }
        if let value = dict["BillUserIdList"] as? [String] {
            self.billUserIdList = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["CostUnitCode"] as? String {
            self.costUnitCode = value
        }
        if let value = dict["InstanceIdList"] as? [String] {
            self.instanceIdList = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductDetail"] as? String {
            self.productDetail = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var amortizationPeriod: String?

            public var amortizationPeriodDay: String?

            public var amortizationStatus: String?

            public var billAccountID: Int64?

            public var billAccountName: String?

            public var billOwnerID: Int64?

            public var billOwnerName: String?

            public var bizType: String?

            public var consumePeriod: String?

            public var consumePeriodDay: String?

            public var costUnit: String?

            public var costUnitCode: String?

            public var currentAmortizationDeductedByCashCoupons: Double?

            public var currentAmortizationDeductedByCoupons: Double?

            public var currentAmortizationDeductedByPrepaidCard: Double?

            public var currentAmortizationExpenditureAmount: Double?

            public var currentAmortizationInvoiceDiscount: Double?

            public var currentAmortizationPretaxAmount: Double?

            public var currentAmortizationPretaxGrossAmount: Double?

            public var currentAmortizationRoundDownDiscount: Double?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var expenditureAmount: Double?

            public var instanceID: String?

            public var internetIP: String?

            public var intranetIP: String?

            public var invoiceDiscount: Double?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var previouslyAmortizedDeductedByCashCoupons: Double?

            public var previouslyAmortizedDeductedByCoupons: Double?

            public var previouslyAmortizedDeductedByPrepaidCard: Double?

            public var previouslyAmortizedExpenditureAmount: Double?

            public var previouslyAmortizedInvoiceDiscount: Double?

            public var previouslyAmortizedPretaxAmount: Double?

            public var previouslyAmortizedPretaxGrossAmount: Double?

            public var previouslyAmortizedRoundDownDiscount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productDetailCode: String?

            public var productName: String?

            public var region: String?

            public var remainingAmortizationDeductedByCashCoupons: Double?

            public var remainingAmortizationDeductedByCoupons: Double?

            public var remainingAmortizationDeductedByPrepaidCard: Double?

            public var remainingAmortizationExpenditureAmount: Double?

            public var remainingAmortizationInvoiceDiscount: Double?

            public var remainingAmortizationPretaxAmount: Double?

            public var remainingAmortizationPretaxGrossAmount: Double?

            public var remainingAmortizationRoundDownDiscount: Double?

            public var resourceGroup: String?

            public var roundDownDiscount: Double?

            public var splitAccountName: String?

            public var splitItemID: String?

            public var splitItemName: String?

            public var splitProductDetail: String?

            public var subscriptionType: String?

            public var tag: String?

            public var zone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amortizationPeriod != nil {
                    map["AmortizationPeriod"] = self.amortizationPeriod!
                }
                if self.amortizationPeriodDay != nil {
                    map["AmortizationPeriodDay"] = self.amortizationPeriodDay!
                }
                if self.amortizationStatus != nil {
                    map["AmortizationStatus"] = self.amortizationStatus!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billOwnerID != nil {
                    map["BillOwnerID"] = self.billOwnerID!
                }
                if self.billOwnerName != nil {
                    map["BillOwnerName"] = self.billOwnerName!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                if self.consumePeriodDay != nil {
                    map["ConsumePeriodDay"] = self.consumePeriodDay!
                }
                if self.costUnit != nil {
                    map["CostUnit"] = self.costUnit!
                }
                if self.costUnitCode != nil {
                    map["CostUnitCode"] = self.costUnitCode!
                }
                if self.currentAmortizationDeductedByCashCoupons != nil {
                    map["CurrentAmortizationDeductedByCashCoupons"] = self.currentAmortizationDeductedByCashCoupons!
                }
                if self.currentAmortizationDeductedByCoupons != nil {
                    map["CurrentAmortizationDeductedByCoupons"] = self.currentAmortizationDeductedByCoupons!
                }
                if self.currentAmortizationDeductedByPrepaidCard != nil {
                    map["CurrentAmortizationDeductedByPrepaidCard"] = self.currentAmortizationDeductedByPrepaidCard!
                }
                if self.currentAmortizationExpenditureAmount != nil {
                    map["CurrentAmortizationExpenditureAmount"] = self.currentAmortizationExpenditureAmount!
                }
                if self.currentAmortizationInvoiceDiscount != nil {
                    map["CurrentAmortizationInvoiceDiscount"] = self.currentAmortizationInvoiceDiscount!
                }
                if self.currentAmortizationPretaxAmount != nil {
                    map["CurrentAmortizationPretaxAmount"] = self.currentAmortizationPretaxAmount!
                }
                if self.currentAmortizationPretaxGrossAmount != nil {
                    map["CurrentAmortizationPretaxGrossAmount"] = self.currentAmortizationPretaxGrossAmount!
                }
                if self.currentAmortizationRoundDownDiscount != nil {
                    map["CurrentAmortizationRoundDownDiscount"] = self.currentAmortizationRoundDownDiscount!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.expenditureAmount != nil {
                    map["ExpenditureAmount"] = self.expenditureAmount!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.internetIP != nil {
                    map["InternetIP"] = self.internetIP!
                }
                if self.intranetIP != nil {
                    map["IntranetIP"] = self.intranetIP!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.previouslyAmortizedDeductedByCashCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCashCoupons"] = self.previouslyAmortizedDeductedByCashCoupons!
                }
                if self.previouslyAmortizedDeductedByCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCoupons"] = self.previouslyAmortizedDeductedByCoupons!
                }
                if self.previouslyAmortizedDeductedByPrepaidCard != nil {
                    map["PreviouslyAmortizedDeductedByPrepaidCard"] = self.previouslyAmortizedDeductedByPrepaidCard!
                }
                if self.previouslyAmortizedExpenditureAmount != nil {
                    map["PreviouslyAmortizedExpenditureAmount"] = self.previouslyAmortizedExpenditureAmount!
                }
                if self.previouslyAmortizedInvoiceDiscount != nil {
                    map["PreviouslyAmortizedInvoiceDiscount"] = self.previouslyAmortizedInvoiceDiscount!
                }
                if self.previouslyAmortizedPretaxAmount != nil {
                    map["PreviouslyAmortizedPretaxAmount"] = self.previouslyAmortizedPretaxAmount!
                }
                if self.previouslyAmortizedPretaxGrossAmount != nil {
                    map["PreviouslyAmortizedPretaxGrossAmount"] = self.previouslyAmortizedPretaxGrossAmount!
                }
                if self.previouslyAmortizedRoundDownDiscount != nil {
                    map["PreviouslyAmortizedRoundDownDiscount"] = self.previouslyAmortizedRoundDownDiscount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productDetailCode != nil {
                    map["ProductDetailCode"] = self.productDetailCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.remainingAmortizationDeductedByCashCoupons != nil {
                    map["RemainingAmortizationDeductedByCashCoupons"] = self.remainingAmortizationDeductedByCashCoupons!
                }
                if self.remainingAmortizationDeductedByCoupons != nil {
                    map["RemainingAmortizationDeductedByCoupons"] = self.remainingAmortizationDeductedByCoupons!
                }
                if self.remainingAmortizationDeductedByPrepaidCard != nil {
                    map["RemainingAmortizationDeductedByPrepaidCard"] = self.remainingAmortizationDeductedByPrepaidCard!
                }
                if self.remainingAmortizationExpenditureAmount != nil {
                    map["RemainingAmortizationExpenditureAmount"] = self.remainingAmortizationExpenditureAmount!
                }
                if self.remainingAmortizationInvoiceDiscount != nil {
                    map["RemainingAmortizationInvoiceDiscount"] = self.remainingAmortizationInvoiceDiscount!
                }
                if self.remainingAmortizationPretaxAmount != nil {
                    map["RemainingAmortizationPretaxAmount"] = self.remainingAmortizationPretaxAmount!
                }
                if self.remainingAmortizationPretaxGrossAmount != nil {
                    map["RemainingAmortizationPretaxGrossAmount"] = self.remainingAmortizationPretaxGrossAmount!
                }
                if self.remainingAmortizationRoundDownDiscount != nil {
                    map["RemainingAmortizationRoundDownDiscount"] = self.remainingAmortizationRoundDownDiscount!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.roundDownDiscount != nil {
                    map["RoundDownDiscount"] = self.roundDownDiscount!
                }
                if self.splitAccountName != nil {
                    map["SplitAccountName"] = self.splitAccountName!
                }
                if self.splitItemID != nil {
                    map["SplitItemID"] = self.splitItemID!
                }
                if self.splitItemName != nil {
                    map["SplitItemName"] = self.splitItemName!
                }
                if self.splitProductDetail != nil {
                    map["SplitProductDetail"] = self.splitProductDetail!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AmortizationPeriod"] as? String {
                    self.amortizationPeriod = value
                }
                if let value = dict["AmortizationPeriodDay"] as? String {
                    self.amortizationPeriodDay = value
                }
                if let value = dict["AmortizationStatus"] as? String {
                    self.amortizationStatus = value
                }
                if let value = dict["BillAccountID"] as? Int64 {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillOwnerID"] as? Int64 {
                    self.billOwnerID = value
                }
                if let value = dict["BillOwnerName"] as? String {
                    self.billOwnerName = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ConsumePeriod"] as? String {
                    self.consumePeriod = value
                }
                if let value = dict["ConsumePeriodDay"] as? String {
                    self.consumePeriodDay = value
                }
                if let value = dict["CostUnit"] as? String {
                    self.costUnit = value
                }
                if let value = dict["CostUnitCode"] as? String {
                    self.costUnitCode = value
                }
                if let value = dict["CurrentAmortizationDeductedByCashCoupons"] as? Double {
                    self.currentAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByCoupons"] as? Double {
                    self.currentAmortizationDeductedByCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByPrepaidCard"] as? Double {
                    self.currentAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["CurrentAmortizationExpenditureAmount"] as? Double {
                    self.currentAmortizationExpenditureAmount = value
                }
                if let value = dict["CurrentAmortizationInvoiceDiscount"] as? Double {
                    self.currentAmortizationInvoiceDiscount = value
                }
                if let value = dict["CurrentAmortizationPretaxAmount"] as? Double {
                    self.currentAmortizationPretaxAmount = value
                }
                if let value = dict["CurrentAmortizationPretaxGrossAmount"] as? Double {
                    self.currentAmortizationPretaxGrossAmount = value
                }
                if let value = dict["CurrentAmortizationRoundDownDiscount"] as? Double {
                    self.currentAmortizationRoundDownDiscount = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["ExpenditureAmount"] as? Double {
                    self.expenditureAmount = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["InternetIP"] as? String {
                    self.internetIP = value
                }
                if let value = dict["IntranetIP"] as? String {
                    self.intranetIP = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCashCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCashCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByPrepaidCard"] as? Double {
                    self.previouslyAmortizedDeductedByPrepaidCard = value
                }
                if let value = dict["PreviouslyAmortizedExpenditureAmount"] as? Double {
                    self.previouslyAmortizedExpenditureAmount = value
                }
                if let value = dict["PreviouslyAmortizedInvoiceDiscount"] as? Double {
                    self.previouslyAmortizedInvoiceDiscount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxAmount"] as? Double {
                    self.previouslyAmortizedPretaxAmount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxGrossAmount"] as? Double {
                    self.previouslyAmortizedPretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedRoundDownDiscount"] as? Double {
                    self.previouslyAmortizedRoundDownDiscount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductDetailCode"] as? String {
                    self.productDetailCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RemainingAmortizationDeductedByCashCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByPrepaidCard"] as? Double {
                    self.remainingAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["RemainingAmortizationExpenditureAmount"] as? Double {
                    self.remainingAmortizationExpenditureAmount = value
                }
                if let value = dict["RemainingAmortizationInvoiceDiscount"] as? Double {
                    self.remainingAmortizationInvoiceDiscount = value
                }
                if let value = dict["RemainingAmortizationPretaxAmount"] as? Double {
                    self.remainingAmortizationPretaxAmount = value
                }
                if let value = dict["RemainingAmortizationPretaxGrossAmount"] as? Double {
                    self.remainingAmortizationPretaxGrossAmount = value
                }
                if let value = dict["RemainingAmortizationRoundDownDiscount"] as? Double {
                    self.remainingAmortizationRoundDownDiscount = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["RoundDownDiscount"] as? Double {
                    self.roundDownDiscount = value
                }
                if let value = dict["SplitAccountName"] as? String {
                    self.splitAccountName = value
                }
                if let value = dict["SplitItemID"] as? String {
                    self.splitItemID = value
                }
                if let value = dict["SplitItemName"] as? String {
                    self.splitItemName = value
                }
                if let value = dict["SplitProductDetail"] as? String {
                    self.splitProductDetail = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var hostId: String?

        public var items: [DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceAmortizedCostByConsumePeriodRequest : Tea.TeaModel {
    public var amortizationPeriodFilter: [String]?

    public var billOwnerIdList: [String]?

    public var billUserIdList: [String]?

    public var billingCycle: String?

    public var costUnitCode: String?

    public var instanceIdList: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var productCode: String?

    public var productDetail: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amortizationPeriodFilter != nil {
            map["AmortizationPeriodFilter"] = self.amortizationPeriodFilter!
        }
        if self.billOwnerIdList != nil {
            map["BillOwnerIdList"] = self.billOwnerIdList!
        }
        if self.billUserIdList != nil {
            map["BillUserIdList"] = self.billUserIdList!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.costUnitCode != nil {
            map["CostUnitCode"] = self.costUnitCode!
        }
        if self.instanceIdList != nil {
            map["InstanceIdList"] = self.instanceIdList!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productDetail != nil {
            map["ProductDetail"] = self.productDetail!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AmortizationPeriodFilter"] as? [String] {
            self.amortizationPeriodFilter = value
        }
        if let value = dict["BillOwnerIdList"] as? [String] {
            self.billOwnerIdList = value
        }
        if let value = dict["BillUserIdList"] as? [String] {
            self.billUserIdList = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["CostUnitCode"] as? String {
            self.costUnitCode = value
        }
        if let value = dict["InstanceIdList"] as? [String] {
            self.instanceIdList = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductDetail"] as? String {
            self.productDetail = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeInstanceAmortizedCostByConsumePeriodResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var afterDiscountAmount: Double?

            public var amortizationPeriod: String?

            public var amortizationStatus: String?

            public var billAccountID: Int64?

            public var billAccountName: String?

            public var billOwnerID: Int64?

            public var billOwnerName: String?

            public var bizType: String?

            public var consumePeriod: String?

            public var costUnit: String?

            public var costUnitCode: String?

            public var currentAmortizationAfterDiscountAmount: Double?

            public var currentAmortizationDeductedByCashCoupons: Double?

            public var currentAmortizationDeductedByCoupons: Double?

            public var currentAmortizationDeductedByPrepaidCard: Double?

            public var currentAmortizationExpenditureAmount: Double?

            public var currentAmortizationInvoiceDiscount: Double?

            public var currentAmortizationPretaxAmount: Double?

            public var currentAmortizationPretaxGrossAmount: Double?

            public var currentAmortizationRoundDownDiscount: Double?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var expenditureAmount: Double?

            public var instanceID: String?

            public var internetIP: String?

            public var intranetIP: String?

            public var invoiceDiscount: Double?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var previouslyAmortizedAfterDiscountAmount: Double?

            public var previouslyAmortizedDeductedByCashCoupons: Double?

            public var previouslyAmortizedDeductedByCoupons: Double?

            public var previouslyAmortizedDeductedByPrepaidCard: Double?

            public var previouslyAmortizedExpenditureAmount: Double?

            public var previouslyAmortizedInvoiceDiscount: Double?

            public var previouslyAmortizedPretaxAmount: Double?

            public var previouslyAmortizedPretaxGrossAmount: Double?

            public var previouslyAmortizedRoundDownDiscount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productDetailCode: String?

            public var productName: String?

            public var region: String?

            public var remainingAmortizationAfterDiscountAmount: Double?

            public var remainingAmortizationDeductedByCashCoupons: Double?

            public var remainingAmortizationDeductedByCoupons: Double?

            public var remainingAmortizationDeductedByPrepaidCard: Double?

            public var remainingAmortizationExpenditureAmount: Double?

            public var remainingAmortizationInvoiceDiscount: Double?

            public var remainingAmortizationPretaxAmount: Double?

            public var remainingAmortizationPretaxGrossAmount: Double?

            public var remainingAmortizationRoundDownDiscount: Double?

            public var resourceGroup: String?

            public var roundDownDiscount: Double?

            public var splitAccountName: String?

            public var splitItemID: String?

            public var splitItemName: String?

            public var splitProductDetail: String?

            public var subscriptionType: String?

            public var tag: String?

            public var zone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.afterDiscountAmount != nil {
                    map["AfterDiscountAmount"] = self.afterDiscountAmount!
                }
                if self.amortizationPeriod != nil {
                    map["AmortizationPeriod"] = self.amortizationPeriod!
                }
                if self.amortizationStatus != nil {
                    map["AmortizationStatus"] = self.amortizationStatus!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billOwnerID != nil {
                    map["BillOwnerID"] = self.billOwnerID!
                }
                if self.billOwnerName != nil {
                    map["BillOwnerName"] = self.billOwnerName!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                if self.costUnit != nil {
                    map["CostUnit"] = self.costUnit!
                }
                if self.costUnitCode != nil {
                    map["CostUnitCode"] = self.costUnitCode!
                }
                if self.currentAmortizationAfterDiscountAmount != nil {
                    map["CurrentAmortizationAfterDiscountAmount"] = self.currentAmortizationAfterDiscountAmount!
                }
                if self.currentAmortizationDeductedByCashCoupons != nil {
                    map["CurrentAmortizationDeductedByCashCoupons"] = self.currentAmortizationDeductedByCashCoupons!
                }
                if self.currentAmortizationDeductedByCoupons != nil {
                    map["CurrentAmortizationDeductedByCoupons"] = self.currentAmortizationDeductedByCoupons!
                }
                if self.currentAmortizationDeductedByPrepaidCard != nil {
                    map["CurrentAmortizationDeductedByPrepaidCard"] = self.currentAmortizationDeductedByPrepaidCard!
                }
                if self.currentAmortizationExpenditureAmount != nil {
                    map["CurrentAmortizationExpenditureAmount"] = self.currentAmortizationExpenditureAmount!
                }
                if self.currentAmortizationInvoiceDiscount != nil {
                    map["CurrentAmortizationInvoiceDiscount"] = self.currentAmortizationInvoiceDiscount!
                }
                if self.currentAmortizationPretaxAmount != nil {
                    map["CurrentAmortizationPretaxAmount"] = self.currentAmortizationPretaxAmount!
                }
                if self.currentAmortizationPretaxGrossAmount != nil {
                    map["CurrentAmortizationPretaxGrossAmount"] = self.currentAmortizationPretaxGrossAmount!
                }
                if self.currentAmortizationRoundDownDiscount != nil {
                    map["CurrentAmortizationRoundDownDiscount"] = self.currentAmortizationRoundDownDiscount!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.expenditureAmount != nil {
                    map["ExpenditureAmount"] = self.expenditureAmount!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.internetIP != nil {
                    map["InternetIP"] = self.internetIP!
                }
                if self.intranetIP != nil {
                    map["IntranetIP"] = self.intranetIP!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.previouslyAmortizedAfterDiscountAmount != nil {
                    map["PreviouslyAmortizedAfterDiscountAmount"] = self.previouslyAmortizedAfterDiscountAmount!
                }
                if self.previouslyAmortizedDeductedByCashCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCashCoupons"] = self.previouslyAmortizedDeductedByCashCoupons!
                }
                if self.previouslyAmortizedDeductedByCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCoupons"] = self.previouslyAmortizedDeductedByCoupons!
                }
                if self.previouslyAmortizedDeductedByPrepaidCard != nil {
                    map["PreviouslyAmortizedDeductedByPrepaidCard"] = self.previouslyAmortizedDeductedByPrepaidCard!
                }
                if self.previouslyAmortizedExpenditureAmount != nil {
                    map["PreviouslyAmortizedExpenditureAmount"] = self.previouslyAmortizedExpenditureAmount!
                }
                if self.previouslyAmortizedInvoiceDiscount != nil {
                    map["PreviouslyAmortizedInvoiceDiscount"] = self.previouslyAmortizedInvoiceDiscount!
                }
                if self.previouslyAmortizedPretaxAmount != nil {
                    map["PreviouslyAmortizedPretaxAmount"] = self.previouslyAmortizedPretaxAmount!
                }
                if self.previouslyAmortizedPretaxGrossAmount != nil {
                    map["PreviouslyAmortizedPretaxGrossAmount"] = self.previouslyAmortizedPretaxGrossAmount!
                }
                if self.previouslyAmortizedRoundDownDiscount != nil {
                    map["PreviouslyAmortizedRoundDownDiscount"] = self.previouslyAmortizedRoundDownDiscount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productDetailCode != nil {
                    map["ProductDetailCode"] = self.productDetailCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.remainingAmortizationAfterDiscountAmount != nil {
                    map["RemainingAmortizationAfterDiscountAmount"] = self.remainingAmortizationAfterDiscountAmount!
                }
                if self.remainingAmortizationDeductedByCashCoupons != nil {
                    map["RemainingAmortizationDeductedByCashCoupons"] = self.remainingAmortizationDeductedByCashCoupons!
                }
                if self.remainingAmortizationDeductedByCoupons != nil {
                    map["RemainingAmortizationDeductedByCoupons"] = self.remainingAmortizationDeductedByCoupons!
                }
                if self.remainingAmortizationDeductedByPrepaidCard != nil {
                    map["RemainingAmortizationDeductedByPrepaidCard"] = self.remainingAmortizationDeductedByPrepaidCard!
                }
                if self.remainingAmortizationExpenditureAmount != nil {
                    map["RemainingAmortizationExpenditureAmount"] = self.remainingAmortizationExpenditureAmount!
                }
                if self.remainingAmortizationInvoiceDiscount != nil {
                    map["RemainingAmortizationInvoiceDiscount"] = self.remainingAmortizationInvoiceDiscount!
                }
                if self.remainingAmortizationPretaxAmount != nil {
                    map["RemainingAmortizationPretaxAmount"] = self.remainingAmortizationPretaxAmount!
                }
                if self.remainingAmortizationPretaxGrossAmount != nil {
                    map["RemainingAmortizationPretaxGrossAmount"] = self.remainingAmortizationPretaxGrossAmount!
                }
                if self.remainingAmortizationRoundDownDiscount != nil {
                    map["RemainingAmortizationRoundDownDiscount"] = self.remainingAmortizationRoundDownDiscount!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.roundDownDiscount != nil {
                    map["RoundDownDiscount"] = self.roundDownDiscount!
                }
                if self.splitAccountName != nil {
                    map["SplitAccountName"] = self.splitAccountName!
                }
                if self.splitItemID != nil {
                    map["SplitItemID"] = self.splitItemID!
                }
                if self.splitItemName != nil {
                    map["SplitItemName"] = self.splitItemName!
                }
                if self.splitProductDetail != nil {
                    map["SplitProductDetail"] = self.splitProductDetail!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AfterDiscountAmount"] as? Double {
                    self.afterDiscountAmount = value
                }
                if let value = dict["AmortizationPeriod"] as? String {
                    self.amortizationPeriod = value
                }
                if let value = dict["AmortizationStatus"] as? String {
                    self.amortizationStatus = value
                }
                if let value = dict["BillAccountID"] as? Int64 {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillOwnerID"] as? Int64 {
                    self.billOwnerID = value
                }
                if let value = dict["BillOwnerName"] as? String {
                    self.billOwnerName = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ConsumePeriod"] as? String {
                    self.consumePeriod = value
                }
                if let value = dict["CostUnit"] as? String {
                    self.costUnit = value
                }
                if let value = dict["CostUnitCode"] as? String {
                    self.costUnitCode = value
                }
                if let value = dict["CurrentAmortizationAfterDiscountAmount"] as? Double {
                    self.currentAmortizationAfterDiscountAmount = value
                }
                if let value = dict["CurrentAmortizationDeductedByCashCoupons"] as? Double {
                    self.currentAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByCoupons"] as? Double {
                    self.currentAmortizationDeductedByCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByPrepaidCard"] as? Double {
                    self.currentAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["CurrentAmortizationExpenditureAmount"] as? Double {
                    self.currentAmortizationExpenditureAmount = value
                }
                if let value = dict["CurrentAmortizationInvoiceDiscount"] as? Double {
                    self.currentAmortizationInvoiceDiscount = value
                }
                if let value = dict["CurrentAmortizationPretaxAmount"] as? Double {
                    self.currentAmortizationPretaxAmount = value
                }
                if let value = dict["CurrentAmortizationPretaxGrossAmount"] as? Double {
                    self.currentAmortizationPretaxGrossAmount = value
                }
                if let value = dict["CurrentAmortizationRoundDownDiscount"] as? Double {
                    self.currentAmortizationRoundDownDiscount = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["ExpenditureAmount"] as? Double {
                    self.expenditureAmount = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["InternetIP"] as? String {
                    self.internetIP = value
                }
                if let value = dict["IntranetIP"] as? String {
                    self.intranetIP = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedAfterDiscountAmount"] as? Double {
                    self.previouslyAmortizedAfterDiscountAmount = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCashCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCashCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByPrepaidCard"] as? Double {
                    self.previouslyAmortizedDeductedByPrepaidCard = value
                }
                if let value = dict["PreviouslyAmortizedExpenditureAmount"] as? Double {
                    self.previouslyAmortizedExpenditureAmount = value
                }
                if let value = dict["PreviouslyAmortizedInvoiceDiscount"] as? Double {
                    self.previouslyAmortizedInvoiceDiscount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxAmount"] as? Double {
                    self.previouslyAmortizedPretaxAmount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxGrossAmount"] as? Double {
                    self.previouslyAmortizedPretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedRoundDownDiscount"] as? Double {
                    self.previouslyAmortizedRoundDownDiscount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductDetailCode"] as? String {
                    self.productDetailCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RemainingAmortizationAfterDiscountAmount"] as? Double {
                    self.remainingAmortizationAfterDiscountAmount = value
                }
                if let value = dict["RemainingAmortizationDeductedByCashCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByPrepaidCard"] as? Double {
                    self.remainingAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["RemainingAmortizationExpenditureAmount"] as? Double {
                    self.remainingAmortizationExpenditureAmount = value
                }
                if let value = dict["RemainingAmortizationInvoiceDiscount"] as? Double {
                    self.remainingAmortizationInvoiceDiscount = value
                }
                if let value = dict["RemainingAmortizationPretaxAmount"] as? Double {
                    self.remainingAmortizationPretaxAmount = value
                }
                if let value = dict["RemainingAmortizationPretaxGrossAmount"] as? Double {
                    self.remainingAmortizationPretaxGrossAmount = value
                }
                if let value = dict["RemainingAmortizationRoundDownDiscount"] as? Double {
                    self.remainingAmortizationRoundDownDiscount = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["RoundDownDiscount"] as? Double {
                    self.roundDownDiscount = value
                }
                if let value = dict["SplitAccountName"] as? String {
                    self.splitAccountName = value
                }
                if let value = dict["SplitItemID"] as? String {
                    self.splitItemID = value
                }
                if let value = dict["SplitItemName"] as? String {
                    self.splitItemName = value
                }
                if let value = dict["SplitProductDetail"] as? String {
                    self.splitProductDetail = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var items: [DescribeInstanceAmortizedCostByConsumePeriodResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeInstanceAmortizedCostByConsumePeriodResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceAmortizedCostByConsumePeriodResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeInstanceAmortizedCostByConsumePeriodResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeInstanceAmortizedCostByConsumePeriodResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeInstanceAmortizedCostByConsumePeriodResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceAmortizedCostByConsumePeriodResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceAmortizedCostByConsumePeriodResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceBillRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var billingDate: String?

    public var granularity: String?

    public var instanceID: String?

    public var isBillingItem: Bool?

    public var isHideZeroCharge: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var ownerId: Int64?

    public var pipCode: String?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.billingDate != nil {
            map["BillingDate"] = self.billingDate!
        }
        if self.granularity != nil {
            map["Granularity"] = self.granularity!
        }
        if self.instanceID != nil {
            map["InstanceID"] = self.instanceID!
        }
        if self.isBillingItem != nil {
            map["IsBillingItem"] = self.isBillingItem!
        }
        if self.isHideZeroCharge != nil {
            map["IsHideZeroCharge"] = self.isHideZeroCharge!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pipCode != nil {
            map["PipCode"] = self.pipCode!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["BillingDate"] as? String {
            self.billingDate = value
        }
        if let value = dict["Granularity"] as? String {
            self.granularity = value
        }
        if let value = dict["InstanceID"] as? String {
            self.instanceID = value
        }
        if let value = dict["IsBillingItem"] as? Bool {
            self.isBillingItem = value
        }
        if let value = dict["IsHideZeroCharge"] as? Bool {
            self.isHideZeroCharge = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PipCode"] as? String {
            self.pipCode = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeInstanceBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var adjustAmount: Double?

            public var afterDiscountAmount: Double?

            public var billAccountID: String?

            public var billAccountName: String?

            public var billingDate: String?

            public var billingItem: String?

            public var billingItemCode: String?

            public var billingType: String?

            public var bizType: String?

            public var cashAmount: Double?

            public var commodityCode: String?

            public var costUnit: String?

            public var currency: String?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var deductedByResourcePackage: String?

            public var instanceConfig: String?

            public var instanceID: String?

            public var instanceSpec: String?

            public var internetIP: String?

            public var intranetIP: String?

            public var invoiceDiscount: Double?

            public var item: String?

            public var itemName: String?

            public var listPrice: String?

            public var listPriceUnit: String?

            public var nickName: String?

            public var outstandingAmount: Double?

            public var ownerID: String?

            public var paymentAmount: Double?

            public var pipCode: String?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productName: String?

            public var productType: String?

            public var region: String?

            public var resourceGroup: String?

            public var servicePeriod: String?

            public var servicePeriodUnit: String?

            public var subscriptionType: String?

            public var tag: String?

            public var usage: String?

            public var usageUnit: String?

            public var zone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adjustAmount != nil {
                    map["AdjustAmount"] = self.adjustAmount!
                }
                if self.afterDiscountAmount != nil {
                    map["AfterDiscountAmount"] = self.afterDiscountAmount!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billingDate != nil {
                    map["BillingDate"] = self.billingDate!
                }
                if self.billingItem != nil {
                    map["BillingItem"] = self.billingItem!
                }
                if self.billingItemCode != nil {
                    map["BillingItemCode"] = self.billingItemCode!
                }
                if self.billingType != nil {
                    map["BillingType"] = self.billingType!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.cashAmount != nil {
                    map["CashAmount"] = self.cashAmount!
                }
                if self.commodityCode != nil {
                    map["CommodityCode"] = self.commodityCode!
                }
                if self.costUnit != nil {
                    map["CostUnit"] = self.costUnit!
                }
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.deductedByResourcePackage != nil {
                    map["DeductedByResourcePackage"] = self.deductedByResourcePackage!
                }
                if self.instanceConfig != nil {
                    map["InstanceConfig"] = self.instanceConfig!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.internetIP != nil {
                    map["InternetIP"] = self.internetIP!
                }
                if self.intranetIP != nil {
                    map["IntranetIP"] = self.intranetIP!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemName != nil {
                    map["ItemName"] = self.itemName!
                }
                if self.listPrice != nil {
                    map["ListPrice"] = self.listPrice!
                }
                if self.listPriceUnit != nil {
                    map["ListPriceUnit"] = self.listPriceUnit!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.outstandingAmount != nil {
                    map["OutstandingAmount"] = self.outstandingAmount!
                }
                if self.ownerID != nil {
                    map["OwnerID"] = self.ownerID!
                }
                if self.paymentAmount != nil {
                    map["PaymentAmount"] = self.paymentAmount!
                }
                if self.pipCode != nil {
                    map["PipCode"] = self.pipCode!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.productType != nil {
                    map["ProductType"] = self.productType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.servicePeriod != nil {
                    map["ServicePeriod"] = self.servicePeriod!
                }
                if self.servicePeriodUnit != nil {
                    map["ServicePeriodUnit"] = self.servicePeriodUnit!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.usageUnit != nil {
                    map["UsageUnit"] = self.usageUnit!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdjustAmount"] as? Double {
                    self.adjustAmount = value
                }
                if let value = dict["AfterDiscountAmount"] as? Double {
                    self.afterDiscountAmount = value
                }
                if let value = dict["BillAccountID"] as? String {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillingDate"] as? String {
                    self.billingDate = value
                }
                if let value = dict["BillingItem"] as? String {
                    self.billingItem = value
                }
                if let value = dict["BillingItemCode"] as? String {
                    self.billingItemCode = value
                }
                if let value = dict["BillingType"] as? String {
                    self.billingType = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["CashAmount"] as? Double {
                    self.cashAmount = value
                }
                if let value = dict["CommodityCode"] as? String {
                    self.commodityCode = value
                }
                if let value = dict["CostUnit"] as? String {
                    self.costUnit = value
                }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["DeductedByResourcePackage"] as? String {
                    self.deductedByResourcePackage = value
                }
                if let value = dict["InstanceConfig"] as? String {
                    self.instanceConfig = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["InternetIP"] as? String {
                    self.internetIP = value
                }
                if let value = dict["IntranetIP"] as? String {
                    self.intranetIP = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemName"] as? String {
                    self.itemName = value
                }
                if let value = dict["ListPrice"] as? String {
                    self.listPrice = value
                }
                if let value = dict["ListPriceUnit"] as? String {
                    self.listPriceUnit = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["OutstandingAmount"] as? Double {
                    self.outstandingAmount = value
                }
                if let value = dict["OwnerID"] as? String {
                    self.ownerID = value
                }
                if let value = dict["PaymentAmount"] as? Double {
                    self.paymentAmount = value
                }
                if let value = dict["PipCode"] as? String {
                    self.pipCode = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["ProductType"] as? String {
                    self.productType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["ServicePeriod"] as? String {
                    self.servicePeriod = value
                }
                if let value = dict["ServicePeriodUnit"] as? String {
                    self.servicePeriodUnit = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Usage"] as? String {
                    self.usage = value
                }
                if let value = dict["UsageUnit"] as? String {
                    self.usageUnit = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: [DescribeInstanceBillResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeInstanceBillResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceBillResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeInstanceBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeInstanceBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeInstanceBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest : Tea.TeaModel {
    public var billOwnerIdList: [String]?

    public var billUserIdList: [String]?

    public var billingCycle: String?

    public var costUnitCode: String?

    public var instanceIdList: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var productCode: String?

    public var productDetail: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerIdList != nil {
            map["BillOwnerIdList"] = self.billOwnerIdList!
        }
        if self.billUserIdList != nil {
            map["BillUserIdList"] = self.billUserIdList!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.costUnitCode != nil {
            map["CostUnitCode"] = self.costUnitCode!
        }
        if self.instanceIdList != nil {
            map["InstanceIdList"] = self.instanceIdList!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productDetail != nil {
            map["ProductDetail"] = self.productDetail!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerIdList"] as? [String] {
            self.billOwnerIdList = value
        }
        if let value = dict["BillUserIdList"] as? [String] {
            self.billUserIdList = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["CostUnitCode"] as? String {
            self.costUnitCode = value
        }
        if let value = dict["InstanceIdList"] as? [String] {
            self.instanceIdList = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductDetail"] as? String {
            self.productDetail = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var amortizationPeriod: String?

            public var amortizationPeriodDay: String?

            public var amortizationStatus: String?

            public var billAccountID: Int64?

            public var billAccountName: String?

            public var billOwnerID: Int64?

            public var billOwnerName: String?

            public var bizType: String?

            public var consumePeriod: String?

            public var costUnit: String?

            public var costUnitCode: String?

            public var currentAmortizationDeductedByCoupons: Double?

            public var currentAmortizationInvoiceDiscount: Double?

            public var currentAmortizationPretaxAmount: Double?

            public var currentAmortizationPretaxGrossAmount: Double?

            public var currentAmortizationRoundDownDiscount: Double?

            public var deductedByCoupons: Double?

            public var instanceConfig: String?

            public var instanceID: String?

            public var internetIP: String?

            public var intranetIP: String?

            public var invoiceDiscount: Double?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productDetailCode: String?

            public var productName: String?

            public var referFrInstanceID: String?

            public var referFrOwnerID: String?

            public var referFrProductDetailCode: String?

            public var region: String?

            public var resourceGroup: String?

            public var roundDownDiscount: Double?

            public var splitAccountName: String?

            public var splitItemID: String?

            public var splitItemName: String?

            public var splitProductDetail: String?

            public var subscriptionType: String?

            public var tag: String?

            public var unusedAmortizationDeductedByCoupons: Double?

            public var unusedAmortizationInvoiceDiscount: Double?

            public var unusedAmortizationPretaxAmount: Double?

            public var unusedAmortizationPretaxGrossAmount: Double?

            public var unusedAmortizationRoundDownDiscount: Double?

            public var zone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amortizationPeriod != nil {
                    map["AmortizationPeriod"] = self.amortizationPeriod!
                }
                if self.amortizationPeriodDay != nil {
                    map["AmortizationPeriodDay"] = self.amortizationPeriodDay!
                }
                if self.amortizationStatus != nil {
                    map["AmortizationStatus"] = self.amortizationStatus!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billOwnerID != nil {
                    map["BillOwnerID"] = self.billOwnerID!
                }
                if self.billOwnerName != nil {
                    map["BillOwnerName"] = self.billOwnerName!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                if self.costUnit != nil {
                    map["CostUnit"] = self.costUnit!
                }
                if self.costUnitCode != nil {
                    map["CostUnitCode"] = self.costUnitCode!
                }
                if self.currentAmortizationDeductedByCoupons != nil {
                    map["CurrentAmortizationDeductedByCoupons"] = self.currentAmortizationDeductedByCoupons!
                }
                if self.currentAmortizationInvoiceDiscount != nil {
                    map["CurrentAmortizationInvoiceDiscount"] = self.currentAmortizationInvoiceDiscount!
                }
                if self.currentAmortizationPretaxAmount != nil {
                    map["CurrentAmortizationPretaxAmount"] = self.currentAmortizationPretaxAmount!
                }
                if self.currentAmortizationPretaxGrossAmount != nil {
                    map["CurrentAmortizationPretaxGrossAmount"] = self.currentAmortizationPretaxGrossAmount!
                }
                if self.currentAmortizationRoundDownDiscount != nil {
                    map["CurrentAmortizationRoundDownDiscount"] = self.currentAmortizationRoundDownDiscount!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.instanceConfig != nil {
                    map["InstanceConfig"] = self.instanceConfig!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.internetIP != nil {
                    map["InternetIP"] = self.internetIP!
                }
                if self.intranetIP != nil {
                    map["IntranetIP"] = self.intranetIP!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productDetailCode != nil {
                    map["ProductDetailCode"] = self.productDetailCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.referFrInstanceID != nil {
                    map["ReferFrInstanceID"] = self.referFrInstanceID!
                }
                if self.referFrOwnerID != nil {
                    map["ReferFrOwnerID"] = self.referFrOwnerID!
                }
                if self.referFrProductDetailCode != nil {
                    map["ReferFrProductDetailCode"] = self.referFrProductDetailCode!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.roundDownDiscount != nil {
                    map["RoundDownDiscount"] = self.roundDownDiscount!
                }
                if self.splitAccountName != nil {
                    map["SplitAccountName"] = self.splitAccountName!
                }
                if self.splitItemID != nil {
                    map["SplitItemID"] = self.splitItemID!
                }
                if self.splitItemName != nil {
                    map["SplitItemName"] = self.splitItemName!
                }
                if self.splitProductDetail != nil {
                    map["SplitProductDetail"] = self.splitProductDetail!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.unusedAmortizationDeductedByCoupons != nil {
                    map["UnusedAmortizationDeductedByCoupons"] = self.unusedAmortizationDeductedByCoupons!
                }
                if self.unusedAmortizationInvoiceDiscount != nil {
                    map["UnusedAmortizationInvoiceDiscount"] = self.unusedAmortizationInvoiceDiscount!
                }
                if self.unusedAmortizationPretaxAmount != nil {
                    map["UnusedAmortizationPretaxAmount"] = self.unusedAmortizationPretaxAmount!
                }
                if self.unusedAmortizationPretaxGrossAmount != nil {
                    map["UnusedAmortizationPretaxGrossAmount"] = self.unusedAmortizationPretaxGrossAmount!
                }
                if self.unusedAmortizationRoundDownDiscount != nil {
                    map["UnusedAmortizationRoundDownDiscount"] = self.unusedAmortizationRoundDownDiscount!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AmortizationPeriod"] as? String {
                    self.amortizationPeriod = value
                }
                if let value = dict["AmortizationPeriodDay"] as? String {
                    self.amortizationPeriodDay = value
                }
                if let value = dict["AmortizationStatus"] as? String {
                    self.amortizationStatus = value
                }
                if let value = dict["BillAccountID"] as? Int64 {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillOwnerID"] as? Int64 {
                    self.billOwnerID = value
                }
                if let value = dict["BillOwnerName"] as? String {
                    self.billOwnerName = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ConsumePeriod"] as? String {
                    self.consumePeriod = value
                }
                if let value = dict["CostUnit"] as? String {
                    self.costUnit = value
                }
                if let value = dict["CostUnitCode"] as? String {
                    self.costUnitCode = value
                }
                if let value = dict["CurrentAmortizationDeductedByCoupons"] as? Double {
                    self.currentAmortizationDeductedByCoupons = value
                }
                if let value = dict["CurrentAmortizationInvoiceDiscount"] as? Double {
                    self.currentAmortizationInvoiceDiscount = value
                }
                if let value = dict["CurrentAmortizationPretaxAmount"] as? Double {
                    self.currentAmortizationPretaxAmount = value
                }
                if let value = dict["CurrentAmortizationPretaxGrossAmount"] as? Double {
                    self.currentAmortizationPretaxGrossAmount = value
                }
                if let value = dict["CurrentAmortizationRoundDownDiscount"] as? Double {
                    self.currentAmortizationRoundDownDiscount = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["InstanceConfig"] as? String {
                    self.instanceConfig = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["InternetIP"] as? String {
                    self.internetIP = value
                }
                if let value = dict["IntranetIP"] as? String {
                    self.intranetIP = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductDetailCode"] as? String {
                    self.productDetailCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["ReferFrInstanceID"] as? String {
                    self.referFrInstanceID = value
                }
                if let value = dict["ReferFrOwnerID"] as? String {
                    self.referFrOwnerID = value
                }
                if let value = dict["ReferFrProductDetailCode"] as? String {
                    self.referFrProductDetailCode = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["RoundDownDiscount"] as? Double {
                    self.roundDownDiscount = value
                }
                if let value = dict["SplitAccountName"] as? String {
                    self.splitAccountName = value
                }
                if let value = dict["SplitItemID"] as? String {
                    self.splitItemID = value
                }
                if let value = dict["SplitItemName"] as? String {
                    self.splitItemName = value
                }
                if let value = dict["SplitProductDetail"] as? String {
                    self.splitProductDetail = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["UnusedAmortizationDeductedByCoupons"] as? Double {
                    self.unusedAmortizationDeductedByCoupons = value
                }
                if let value = dict["UnusedAmortizationInvoiceDiscount"] as? Double {
                    self.unusedAmortizationInvoiceDiscount = value
                }
                if let value = dict["UnusedAmortizationPretaxAmount"] as? Double {
                    self.unusedAmortizationPretaxAmount = value
                }
                if let value = dict["UnusedAmortizationPretaxGrossAmount"] as? Double {
                    self.unusedAmortizationPretaxGrossAmount = value
                }
                if let value = dict["UnusedAmortizationRoundDownDiscount"] as? Double {
                    self.unusedAmortizationRoundDownDiscount = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var items: [DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePricingModuleRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribePricingModuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AttributeList : Tea.TeaModel {
            public class Attribute : Tea.TeaModel {
                public class Values : Tea.TeaModel {
                    public class AttributeValue : Tea.TeaModel {
                        public var name: String?

                        public var remark: String?

                        public var type: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            if self.remark != nil {
                                map["Remark"] = self.remark!
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                            if let value = dict["Remark"] as? String {
                                self.remark = value
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var attributeValue: [DescribePricingModuleResponseBody.Data.AttributeList.Attribute.Values.AttributeValue]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.attributeValue != nil {
                            var tmp : [Any] = []
                            for k in self.attributeValue! {
                                tmp.append(k.toMap())
                            }
                            map["AttributeValue"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AttributeValue"] as? [Any?] {
                            var tmp : [DescribePricingModuleResponseBody.Data.AttributeList.Attribute.Values.AttributeValue] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribePricingModuleResponseBody.Data.AttributeList.Attribute.Values.AttributeValue()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.attributeValue = tmp
                        }
                    }
                }
                public var code: String?

                public var name: String?

                public var unit: String?

                public var values: DescribePricingModuleResponseBody.Data.AttributeList.Attribute.Values?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.values?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.unit != nil {
                        map["Unit"] = self.unit!
                    }
                    if self.values != nil {
                        map["Values"] = self.values?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Unit"] as? String {
                        self.unit = value
                    }
                    if let value = dict["Values"] as? [String: Any?] {
                        var model = DescribePricingModuleResponseBody.Data.AttributeList.Attribute.Values()
                        model.fromMap(value)
                        self.values = model
                    }
                }
            }
            public var attribute: [DescribePricingModuleResponseBody.Data.AttributeList.Attribute]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attribute != nil {
                    var tmp : [Any] = []
                    for k in self.attribute! {
                        tmp.append(k.toMap())
                    }
                    map["Attribute"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attribute"] as? [Any?] {
                    var tmp : [DescribePricingModuleResponseBody.Data.AttributeList.Attribute] = []
                    for v in value {
                        if v != nil {
                            var model = DescribePricingModuleResponseBody.Data.AttributeList.Attribute()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attribute = tmp
                }
            }
        }
        public class ModuleList : Tea.TeaModel {
            public class Module : Tea.TeaModel {
                public class ConfigList : Tea.TeaModel {
                    public var configList: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.configList != nil {
                            map["ConfigList"] = self.configList!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConfigList"] as? [String] {
                            self.configList = value
                        }
                    }
                }
                public var configList: DescribePricingModuleResponseBody.Data.ModuleList.Module.ConfigList?

                public var currency: String?

                public var moduleCode: String?

                public var moduleName: String?

                public var priceType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.configList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.configList != nil {
                        map["ConfigList"] = self.configList?.toMap()
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.moduleCode != nil {
                        map["ModuleCode"] = self.moduleCode!
                    }
                    if self.moduleName != nil {
                        map["ModuleName"] = self.moduleName!
                    }
                    if self.priceType != nil {
                        map["PriceType"] = self.priceType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConfigList"] as? [String: Any?] {
                        var model = DescribePricingModuleResponseBody.Data.ModuleList.Module.ConfigList()
                        model.fromMap(value)
                        self.configList = model
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["ModuleCode"] as? String {
                        self.moduleCode = value
                    }
                    if let value = dict["ModuleName"] as? String {
                        self.moduleName = value
                    }
                    if let value = dict["PriceType"] as? String {
                        self.priceType = value
                    }
                }
            }
            public var module: [DescribePricingModuleResponseBody.Data.ModuleList.Module]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.module != nil {
                    var tmp : [Any] = []
                    for k in self.module! {
                        tmp.append(k.toMap())
                    }
                    map["Module"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Module"] as? [Any?] {
                    var tmp : [DescribePricingModuleResponseBody.Data.ModuleList.Module] = []
                    for v in value {
                        if v != nil {
                            var model = DescribePricingModuleResponseBody.Data.ModuleList.Module()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.module = tmp
                }
            }
        }
        public var attributeList: DescribePricingModuleResponseBody.Data.AttributeList?

        public var moduleList: DescribePricingModuleResponseBody.Data.ModuleList?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.attributeList?.validate()
            try self.moduleList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attributeList != nil {
                map["AttributeList"] = self.attributeList?.toMap()
            }
            if self.moduleList != nil {
                map["ModuleList"] = self.moduleList?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AttributeList"] as? [String: Any?] {
                var model = DescribePricingModuleResponseBody.Data.AttributeList()
                model.fromMap(value)
                self.attributeList = model
            }
            if let value = dict["ModuleList"] as? [String: Any?] {
                var model = DescribePricingModuleResponseBody.Data.ModuleList()
                model.fromMap(value)
                self.moduleList = model
            }
        }
    }
    public var code: String?

    public var data: DescribePricingModuleResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribePricingModuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribePricingModuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePricingModuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePricingModuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeProductAmortizedCostByAmortizationPeriodRequest : Tea.TeaModel {
    public var billOwnerIdList: [String]?

    public var billUserIdList: [String]?

    public var billingCycle: String?

    public var consumePeriodFilter: [String]?

    public var costUnitCode: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var productCode: String?

    public var productDetail: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerIdList != nil {
            map["BillOwnerIdList"] = self.billOwnerIdList!
        }
        if self.billUserIdList != nil {
            map["BillUserIdList"] = self.billUserIdList!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.consumePeriodFilter != nil {
            map["ConsumePeriodFilter"] = self.consumePeriodFilter!
        }
        if self.costUnitCode != nil {
            map["CostUnitCode"] = self.costUnitCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productDetail != nil {
            map["ProductDetail"] = self.productDetail!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerIdList"] as? [String] {
            self.billOwnerIdList = value
        }
        if let value = dict["BillUserIdList"] as? [String] {
            self.billUserIdList = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["ConsumePeriodFilter"] as? [String] {
            self.consumePeriodFilter = value
        }
        if let value = dict["CostUnitCode"] as? String {
            self.costUnitCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductDetail"] as? String {
            self.productDetail = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeProductAmortizedCostByAmortizationPeriodResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var afterDiscountAmount: Double?

            public var amortizationPeriod: String?

            public var amortizationStatus: String?

            public var billAccountID: Int64?

            public var billAccountName: String?

            public var billOwnerID: Int64?

            public var billOwnerName: String?

            public var bizType: String?

            public var consumePeriod: String?

            public var currentAmortizationAfterDiscountAmount: Double?

            public var currentAmortizationDeductedByCashCoupons: Double?

            public var currentAmortizationDeductedByCoupons: Double?

            public var currentAmortizationDeductedByPrepaidCard: Double?

            public var currentAmortizationExpenditureAmount: Double?

            public var currentAmortizationInvoiceDiscount: Double?

            public var currentAmortizationPretaxAmount: Double?

            public var currentAmortizationPretaxGrossAmount: Double?

            public var currentAmortizationRoundDownDiscount: Double?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var expenditureAmount: Double?

            public var invoiceDiscount: Double?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var previouslyAmortizedAfterDiscountAmount: Double?

            public var previouslyAmortizedDeductedByCashCoupons: Double?

            public var previouslyAmortizedDeductedByCoupons: Double?

            public var previouslyAmortizedDeductedByPrepaidCard: Double?

            public var previouslyAmortizedExpenditureAmount: Double?

            public var previouslyAmortizedInvoiceDiscount: Double?

            public var previouslyAmortizedPretaxAmount: Double?

            public var previouslyAmortizedPretaxGrossAmount: Double?

            public var previouslyAmortizedRoundDownDiscount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productDetailCode: String?

            public var productName: String?

            public var remainingAmortizationAfterDiscountAmount: Double?

            public var remainingAmortizationDeductedByCashCoupons: Double?

            public var remainingAmortizationDeductedByCoupons: Double?

            public var remainingAmortizationDeductedByPrepaidCard: Double?

            public var remainingAmortizationExpenditureAmount: Double?

            public var remainingAmortizationInvoiceDiscount: Double?

            public var remainingAmortizationPretaxAmount: Double?

            public var remainingAmortizationPretaxGrossAmount: Double?

            public var remainingAmortizationRoundDownDiscount: Double?

            public var roundDownDiscount: Double?

            public var subscriptionType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.afterDiscountAmount != nil {
                    map["AfterDiscountAmount"] = self.afterDiscountAmount!
                }
                if self.amortizationPeriod != nil {
                    map["AmortizationPeriod"] = self.amortizationPeriod!
                }
                if self.amortizationStatus != nil {
                    map["AmortizationStatus"] = self.amortizationStatus!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billOwnerID != nil {
                    map["BillOwnerID"] = self.billOwnerID!
                }
                if self.billOwnerName != nil {
                    map["BillOwnerName"] = self.billOwnerName!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                if self.currentAmortizationAfterDiscountAmount != nil {
                    map["CurrentAmortizationAfterDiscountAmount"] = self.currentAmortizationAfterDiscountAmount!
                }
                if self.currentAmortizationDeductedByCashCoupons != nil {
                    map["CurrentAmortizationDeductedByCashCoupons"] = self.currentAmortizationDeductedByCashCoupons!
                }
                if self.currentAmortizationDeductedByCoupons != nil {
                    map["CurrentAmortizationDeductedByCoupons"] = self.currentAmortizationDeductedByCoupons!
                }
                if self.currentAmortizationDeductedByPrepaidCard != nil {
                    map["CurrentAmortizationDeductedByPrepaidCard"] = self.currentAmortizationDeductedByPrepaidCard!
                }
                if self.currentAmortizationExpenditureAmount != nil {
                    map["CurrentAmortizationExpenditureAmount"] = self.currentAmortizationExpenditureAmount!
                }
                if self.currentAmortizationInvoiceDiscount != nil {
                    map["CurrentAmortizationInvoiceDiscount"] = self.currentAmortizationInvoiceDiscount!
                }
                if self.currentAmortizationPretaxAmount != nil {
                    map["CurrentAmortizationPretaxAmount"] = self.currentAmortizationPretaxAmount!
                }
                if self.currentAmortizationPretaxGrossAmount != nil {
                    map["CurrentAmortizationPretaxGrossAmount"] = self.currentAmortizationPretaxGrossAmount!
                }
                if self.currentAmortizationRoundDownDiscount != nil {
                    map["CurrentAmortizationRoundDownDiscount"] = self.currentAmortizationRoundDownDiscount!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.expenditureAmount != nil {
                    map["ExpenditureAmount"] = self.expenditureAmount!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.previouslyAmortizedAfterDiscountAmount != nil {
                    map["PreviouslyAmortizedAfterDiscountAmount"] = self.previouslyAmortizedAfterDiscountAmount!
                }
                if self.previouslyAmortizedDeductedByCashCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCashCoupons"] = self.previouslyAmortizedDeductedByCashCoupons!
                }
                if self.previouslyAmortizedDeductedByCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCoupons"] = self.previouslyAmortizedDeductedByCoupons!
                }
                if self.previouslyAmortizedDeductedByPrepaidCard != nil {
                    map["PreviouslyAmortizedDeductedByPrepaidCard"] = self.previouslyAmortizedDeductedByPrepaidCard!
                }
                if self.previouslyAmortizedExpenditureAmount != nil {
                    map["PreviouslyAmortizedExpenditureAmount"] = self.previouslyAmortizedExpenditureAmount!
                }
                if self.previouslyAmortizedInvoiceDiscount != nil {
                    map["PreviouslyAmortizedInvoiceDiscount"] = self.previouslyAmortizedInvoiceDiscount!
                }
                if self.previouslyAmortizedPretaxAmount != nil {
                    map["PreviouslyAmortizedPretaxAmount"] = self.previouslyAmortizedPretaxAmount!
                }
                if self.previouslyAmortizedPretaxGrossAmount != nil {
                    map["PreviouslyAmortizedPretaxGrossAmount"] = self.previouslyAmortizedPretaxGrossAmount!
                }
                if self.previouslyAmortizedRoundDownDiscount != nil {
                    map["PreviouslyAmortizedRoundDownDiscount"] = self.previouslyAmortizedRoundDownDiscount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productDetailCode != nil {
                    map["ProductDetailCode"] = self.productDetailCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.remainingAmortizationAfterDiscountAmount != nil {
                    map["RemainingAmortizationAfterDiscountAmount"] = self.remainingAmortizationAfterDiscountAmount!
                }
                if self.remainingAmortizationDeductedByCashCoupons != nil {
                    map["RemainingAmortizationDeductedByCashCoupons"] = self.remainingAmortizationDeductedByCashCoupons!
                }
                if self.remainingAmortizationDeductedByCoupons != nil {
                    map["RemainingAmortizationDeductedByCoupons"] = self.remainingAmortizationDeductedByCoupons!
                }
                if self.remainingAmortizationDeductedByPrepaidCard != nil {
                    map["RemainingAmortizationDeductedByPrepaidCard"] = self.remainingAmortizationDeductedByPrepaidCard!
                }
                if self.remainingAmortizationExpenditureAmount != nil {
                    map["RemainingAmortizationExpenditureAmount"] = self.remainingAmortizationExpenditureAmount!
                }
                if self.remainingAmortizationInvoiceDiscount != nil {
                    map["RemainingAmortizationInvoiceDiscount"] = self.remainingAmortizationInvoiceDiscount!
                }
                if self.remainingAmortizationPretaxAmount != nil {
                    map["RemainingAmortizationPretaxAmount"] = self.remainingAmortizationPretaxAmount!
                }
                if self.remainingAmortizationPretaxGrossAmount != nil {
                    map["RemainingAmortizationPretaxGrossAmount"] = self.remainingAmortizationPretaxGrossAmount!
                }
                if self.remainingAmortizationRoundDownDiscount != nil {
                    map["RemainingAmortizationRoundDownDiscount"] = self.remainingAmortizationRoundDownDiscount!
                }
                if self.roundDownDiscount != nil {
                    map["RoundDownDiscount"] = self.roundDownDiscount!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AfterDiscountAmount"] as? Double {
                    self.afterDiscountAmount = value
                }
                if let value = dict["AmortizationPeriod"] as? String {
                    self.amortizationPeriod = value
                }
                if let value = dict["AmortizationStatus"] as? String {
                    self.amortizationStatus = value
                }
                if let value = dict["BillAccountID"] as? Int64 {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillOwnerID"] as? Int64 {
                    self.billOwnerID = value
                }
                if let value = dict["BillOwnerName"] as? String {
                    self.billOwnerName = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ConsumePeriod"] as? String {
                    self.consumePeriod = value
                }
                if let value = dict["CurrentAmortizationAfterDiscountAmount"] as? Double {
                    self.currentAmortizationAfterDiscountAmount = value
                }
                if let value = dict["CurrentAmortizationDeductedByCashCoupons"] as? Double {
                    self.currentAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByCoupons"] as? Double {
                    self.currentAmortizationDeductedByCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByPrepaidCard"] as? Double {
                    self.currentAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["CurrentAmortizationExpenditureAmount"] as? Double {
                    self.currentAmortizationExpenditureAmount = value
                }
                if let value = dict["CurrentAmortizationInvoiceDiscount"] as? Double {
                    self.currentAmortizationInvoiceDiscount = value
                }
                if let value = dict["CurrentAmortizationPretaxAmount"] as? Double {
                    self.currentAmortizationPretaxAmount = value
                }
                if let value = dict["CurrentAmortizationPretaxGrossAmount"] as? Double {
                    self.currentAmortizationPretaxGrossAmount = value
                }
                if let value = dict["CurrentAmortizationRoundDownDiscount"] as? Double {
                    self.currentAmortizationRoundDownDiscount = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["ExpenditureAmount"] as? Double {
                    self.expenditureAmount = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedAfterDiscountAmount"] as? Double {
                    self.previouslyAmortizedAfterDiscountAmount = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCashCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCashCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByPrepaidCard"] as? Double {
                    self.previouslyAmortizedDeductedByPrepaidCard = value
                }
                if let value = dict["PreviouslyAmortizedExpenditureAmount"] as? Double {
                    self.previouslyAmortizedExpenditureAmount = value
                }
                if let value = dict["PreviouslyAmortizedInvoiceDiscount"] as? Double {
                    self.previouslyAmortizedInvoiceDiscount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxAmount"] as? Double {
                    self.previouslyAmortizedPretaxAmount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxGrossAmount"] as? Double {
                    self.previouslyAmortizedPretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedRoundDownDiscount"] as? Double {
                    self.previouslyAmortizedRoundDownDiscount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductDetailCode"] as? String {
                    self.productDetailCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["RemainingAmortizationAfterDiscountAmount"] as? Double {
                    self.remainingAmortizationAfterDiscountAmount = value
                }
                if let value = dict["RemainingAmortizationDeductedByCashCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByPrepaidCard"] as? Double {
                    self.remainingAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["RemainingAmortizationExpenditureAmount"] as? Double {
                    self.remainingAmortizationExpenditureAmount = value
                }
                if let value = dict["RemainingAmortizationInvoiceDiscount"] as? Double {
                    self.remainingAmortizationInvoiceDiscount = value
                }
                if let value = dict["RemainingAmortizationPretaxAmount"] as? Double {
                    self.remainingAmortizationPretaxAmount = value
                }
                if let value = dict["RemainingAmortizationPretaxGrossAmount"] as? Double {
                    self.remainingAmortizationPretaxGrossAmount = value
                }
                if let value = dict["RemainingAmortizationRoundDownDiscount"] as? Double {
                    self.remainingAmortizationRoundDownDiscount = value
                }
                if let value = dict["RoundDownDiscount"] as? Double {
                    self.roundDownDiscount = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var items: [DescribeProductAmortizedCostByAmortizationPeriodResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeProductAmortizedCostByAmortizationPeriodResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeProductAmortizedCostByAmortizationPeriodResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeProductAmortizedCostByAmortizationPeriodResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeProductAmortizedCostByAmortizationPeriodResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeProductAmortizedCostByAmortizationPeriodResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeProductAmortizedCostByAmortizationPeriodResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeProductAmortizedCostByAmortizationPeriodResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeProductAmortizedCostByConsumePeriodRequest : Tea.TeaModel {
    public var amortizationPeriodFilter: [String]?

    public var billOwnerIdList: [String]?

    public var billUserIdList: [String]?

    public var billingCycle: String?

    public var costUnitCode: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var productCode: String?

    public var productDetail: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amortizationPeriodFilter != nil {
            map["AmortizationPeriodFilter"] = self.amortizationPeriodFilter!
        }
        if self.billOwnerIdList != nil {
            map["BillOwnerIdList"] = self.billOwnerIdList!
        }
        if self.billUserIdList != nil {
            map["BillUserIdList"] = self.billUserIdList!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.costUnitCode != nil {
            map["CostUnitCode"] = self.costUnitCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productDetail != nil {
            map["ProductDetail"] = self.productDetail!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AmortizationPeriodFilter"] as? [String] {
            self.amortizationPeriodFilter = value
        }
        if let value = dict["BillOwnerIdList"] as? [String] {
            self.billOwnerIdList = value
        }
        if let value = dict["BillUserIdList"] as? [String] {
            self.billUserIdList = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["CostUnitCode"] as? String {
            self.costUnitCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductDetail"] as? String {
            self.productDetail = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class DescribeProductAmortizedCostByConsumePeriodResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var afterDiscountAmount: Double?

            public var amortizationPeriod: String?

            public var amortizationStatus: String?

            public var billAccountID: Int64?

            public var billAccountName: String?

            public var billOwnerID: Int64?

            public var billOwnerName: String?

            public var bizType: String?

            public var consumePeriod: String?

            public var currentAmortizationAfterDiscountAmount: Double?

            public var currentAmortizationDeductedByCashCoupons: Double?

            public var currentAmortizationDeductedByCoupons: Double?

            public var currentAmortizationDeductedByPrepaidCard: Double?

            public var currentAmortizationExpenditureAmount: Double?

            public var currentAmortizationInvoiceDiscount: Double?

            public var currentAmortizationPretaxAmount: Double?

            public var currentAmortizationPretaxGrossAmount: Double?

            public var currentAmortizationRoundDownDiscount: Double?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var expenditureAmount: Double?

            public var invoiceDiscount: Double?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var previouslyAmortizedAfterDiscountAmount: Double?

            public var previouslyAmortizedDeductedByCashCoupons: Double?

            public var previouslyAmortizedDeductedByCoupons: Double?

            public var previouslyAmortizedDeductedByPrepaidCard: Double?

            public var previouslyAmortizedExpenditureAmount: Double?

            public var previouslyAmortizedInvoiceDiscount: Double?

            public var previouslyAmortizedPretaxAmount: Double?

            public var previouslyAmortizedPretaxGrossAmount: Double?

            public var previouslyAmortizedRoundDownDiscount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productDetailCode: String?

            public var productName: String?

            public var remainingAmortizationAfterDiscountAmount: Double?

            public var remainingAmortizationDeductedByCashCoupons: Double?

            public var remainingAmortizationDeductedByCoupons: Double?

            public var remainingAmortizationDeductedByPrepaidCard: Double?

            public var remainingAmortizationExpenditureAmount: Double?

            public var remainingAmortizationInvoiceDiscount: Double?

            public var remainingAmortizationPretaxAmount: Double?

            public var remainingAmortizationPretaxGrossAmount: Double?

            public var remainingAmortizationRoundDownDiscount: Double?

            public var roundDownDiscount: Double?

            public var subscriptionType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.afterDiscountAmount != nil {
                    map["AfterDiscountAmount"] = self.afterDiscountAmount!
                }
                if self.amortizationPeriod != nil {
                    map["AmortizationPeriod"] = self.amortizationPeriod!
                }
                if self.amortizationStatus != nil {
                    map["AmortizationStatus"] = self.amortizationStatus!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billOwnerID != nil {
                    map["BillOwnerID"] = self.billOwnerID!
                }
                if self.billOwnerName != nil {
                    map["BillOwnerName"] = self.billOwnerName!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.consumePeriod != nil {
                    map["ConsumePeriod"] = self.consumePeriod!
                }
                if self.currentAmortizationAfterDiscountAmount != nil {
                    map["CurrentAmortizationAfterDiscountAmount"] = self.currentAmortizationAfterDiscountAmount!
                }
                if self.currentAmortizationDeductedByCashCoupons != nil {
                    map["CurrentAmortizationDeductedByCashCoupons"] = self.currentAmortizationDeductedByCashCoupons!
                }
                if self.currentAmortizationDeductedByCoupons != nil {
                    map["CurrentAmortizationDeductedByCoupons"] = self.currentAmortizationDeductedByCoupons!
                }
                if self.currentAmortizationDeductedByPrepaidCard != nil {
                    map["CurrentAmortizationDeductedByPrepaidCard"] = self.currentAmortizationDeductedByPrepaidCard!
                }
                if self.currentAmortizationExpenditureAmount != nil {
                    map["CurrentAmortizationExpenditureAmount"] = self.currentAmortizationExpenditureAmount!
                }
                if self.currentAmortizationInvoiceDiscount != nil {
                    map["CurrentAmortizationInvoiceDiscount"] = self.currentAmortizationInvoiceDiscount!
                }
                if self.currentAmortizationPretaxAmount != nil {
                    map["CurrentAmortizationPretaxAmount"] = self.currentAmortizationPretaxAmount!
                }
                if self.currentAmortizationPretaxGrossAmount != nil {
                    map["CurrentAmortizationPretaxGrossAmount"] = self.currentAmortizationPretaxGrossAmount!
                }
                if self.currentAmortizationRoundDownDiscount != nil {
                    map["CurrentAmortizationRoundDownDiscount"] = self.currentAmortizationRoundDownDiscount!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.expenditureAmount != nil {
                    map["ExpenditureAmount"] = self.expenditureAmount!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.previouslyAmortizedAfterDiscountAmount != nil {
                    map["PreviouslyAmortizedAfterDiscountAmount"] = self.previouslyAmortizedAfterDiscountAmount!
                }
                if self.previouslyAmortizedDeductedByCashCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCashCoupons"] = self.previouslyAmortizedDeductedByCashCoupons!
                }
                if self.previouslyAmortizedDeductedByCoupons != nil {
                    map["PreviouslyAmortizedDeductedByCoupons"] = self.previouslyAmortizedDeductedByCoupons!
                }
                if self.previouslyAmortizedDeductedByPrepaidCard != nil {
                    map["PreviouslyAmortizedDeductedByPrepaidCard"] = self.previouslyAmortizedDeductedByPrepaidCard!
                }
                if self.previouslyAmortizedExpenditureAmount != nil {
                    map["PreviouslyAmortizedExpenditureAmount"] = self.previouslyAmortizedExpenditureAmount!
                }
                if self.previouslyAmortizedInvoiceDiscount != nil {
                    map["PreviouslyAmortizedInvoiceDiscount"] = self.previouslyAmortizedInvoiceDiscount!
                }
                if self.previouslyAmortizedPretaxAmount != nil {
                    map["PreviouslyAmortizedPretaxAmount"] = self.previouslyAmortizedPretaxAmount!
                }
                if self.previouslyAmortizedPretaxGrossAmount != nil {
                    map["PreviouslyAmortizedPretaxGrossAmount"] = self.previouslyAmortizedPretaxGrossAmount!
                }
                if self.previouslyAmortizedRoundDownDiscount != nil {
                    map["PreviouslyAmortizedRoundDownDiscount"] = self.previouslyAmortizedRoundDownDiscount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productDetailCode != nil {
                    map["ProductDetailCode"] = self.productDetailCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.remainingAmortizationAfterDiscountAmount != nil {
                    map["RemainingAmortizationAfterDiscountAmount"] = self.remainingAmortizationAfterDiscountAmount!
                }
                if self.remainingAmortizationDeductedByCashCoupons != nil {
                    map["RemainingAmortizationDeductedByCashCoupons"] = self.remainingAmortizationDeductedByCashCoupons!
                }
                if self.remainingAmortizationDeductedByCoupons != nil {
                    map["RemainingAmortizationDeductedByCoupons"] = self.remainingAmortizationDeductedByCoupons!
                }
                if self.remainingAmortizationDeductedByPrepaidCard != nil {
                    map["RemainingAmortizationDeductedByPrepaidCard"] = self.remainingAmortizationDeductedByPrepaidCard!
                }
                if self.remainingAmortizationExpenditureAmount != nil {
                    map["RemainingAmortizationExpenditureAmount"] = self.remainingAmortizationExpenditureAmount!
                }
                if self.remainingAmortizationInvoiceDiscount != nil {
                    map["RemainingAmortizationInvoiceDiscount"] = self.remainingAmortizationInvoiceDiscount!
                }
                if self.remainingAmortizationPretaxAmount != nil {
                    map["RemainingAmortizationPretaxAmount"] = self.remainingAmortizationPretaxAmount!
                }
                if self.remainingAmortizationPretaxGrossAmount != nil {
                    map["RemainingAmortizationPretaxGrossAmount"] = self.remainingAmortizationPretaxGrossAmount!
                }
                if self.remainingAmortizationRoundDownDiscount != nil {
                    map["RemainingAmortizationRoundDownDiscount"] = self.remainingAmortizationRoundDownDiscount!
                }
                if self.roundDownDiscount != nil {
                    map["RoundDownDiscount"] = self.roundDownDiscount!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AfterDiscountAmount"] as? Double {
                    self.afterDiscountAmount = value
                }
                if let value = dict["AmortizationPeriod"] as? String {
                    self.amortizationPeriod = value
                }
                if let value = dict["AmortizationStatus"] as? String {
                    self.amortizationStatus = value
                }
                if let value = dict["BillAccountID"] as? Int64 {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillOwnerID"] as? Int64 {
                    self.billOwnerID = value
                }
                if let value = dict["BillOwnerName"] as? String {
                    self.billOwnerName = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ConsumePeriod"] as? String {
                    self.consumePeriod = value
                }
                if let value = dict["CurrentAmortizationAfterDiscountAmount"] as? Double {
                    self.currentAmortizationAfterDiscountAmount = value
                }
                if let value = dict["CurrentAmortizationDeductedByCashCoupons"] as? Double {
                    self.currentAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByCoupons"] as? Double {
                    self.currentAmortizationDeductedByCoupons = value
                }
                if let value = dict["CurrentAmortizationDeductedByPrepaidCard"] as? Double {
                    self.currentAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["CurrentAmortizationExpenditureAmount"] as? Double {
                    self.currentAmortizationExpenditureAmount = value
                }
                if let value = dict["CurrentAmortizationInvoiceDiscount"] as? Double {
                    self.currentAmortizationInvoiceDiscount = value
                }
                if let value = dict["CurrentAmortizationPretaxAmount"] as? Double {
                    self.currentAmortizationPretaxAmount = value
                }
                if let value = dict["CurrentAmortizationPretaxGrossAmount"] as? Double {
                    self.currentAmortizationPretaxGrossAmount = value
                }
                if let value = dict["CurrentAmortizationRoundDownDiscount"] as? Double {
                    self.currentAmortizationRoundDownDiscount = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["ExpenditureAmount"] as? Double {
                    self.expenditureAmount = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedAfterDiscountAmount"] as? Double {
                    self.previouslyAmortizedAfterDiscountAmount = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCashCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCashCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByCoupons"] as? Double {
                    self.previouslyAmortizedDeductedByCoupons = value
                }
                if let value = dict["PreviouslyAmortizedDeductedByPrepaidCard"] as? Double {
                    self.previouslyAmortizedDeductedByPrepaidCard = value
                }
                if let value = dict["PreviouslyAmortizedExpenditureAmount"] as? Double {
                    self.previouslyAmortizedExpenditureAmount = value
                }
                if let value = dict["PreviouslyAmortizedInvoiceDiscount"] as? Double {
                    self.previouslyAmortizedInvoiceDiscount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxAmount"] as? Double {
                    self.previouslyAmortizedPretaxAmount = value
                }
                if let value = dict["PreviouslyAmortizedPretaxGrossAmount"] as? Double {
                    self.previouslyAmortizedPretaxGrossAmount = value
                }
                if let value = dict["PreviouslyAmortizedRoundDownDiscount"] as? Double {
                    self.previouslyAmortizedRoundDownDiscount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductDetailCode"] as? String {
                    self.productDetailCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["RemainingAmortizationAfterDiscountAmount"] as? Double {
                    self.remainingAmortizationAfterDiscountAmount = value
                }
                if let value = dict["RemainingAmortizationDeductedByCashCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCashCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByCoupons"] as? Double {
                    self.remainingAmortizationDeductedByCoupons = value
                }
                if let value = dict["RemainingAmortizationDeductedByPrepaidCard"] as? Double {
                    self.remainingAmortizationDeductedByPrepaidCard = value
                }
                if let value = dict["RemainingAmortizationExpenditureAmount"] as? Double {
                    self.remainingAmortizationExpenditureAmount = value
                }
                if let value = dict["RemainingAmortizationInvoiceDiscount"] as? Double {
                    self.remainingAmortizationInvoiceDiscount = value
                }
                if let value = dict["RemainingAmortizationPretaxAmount"] as? Double {
                    self.remainingAmortizationPretaxAmount = value
                }
                if let value = dict["RemainingAmortizationPretaxGrossAmount"] as? Double {
                    self.remainingAmortizationPretaxGrossAmount = value
                }
                if let value = dict["RemainingAmortizationRoundDownDiscount"] as? Double {
                    self.remainingAmortizationRoundDownDiscount = value
                }
                if let value = dict["RoundDownDiscount"] as? Double {
                    self.roundDownDiscount = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var items: [DescribeProductAmortizedCostByConsumePeriodResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeProductAmortizedCostByConsumePeriodResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeProductAmortizedCostByConsumePeriodResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeProductAmortizedCostByConsumePeriodResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeProductAmortizedCostByConsumePeriodResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeProductAmortizedCostByConsumePeriodResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeProductAmortizedCostByConsumePeriodResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeProductAmortizedCostByConsumePeriodResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceCoverageDetailRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var periodType: String?

    public var resourceType: String?

    public var startPeriod: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
    }
}

public class DescribeResourceCoverageDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var capacityUnit: String?

            public var commodityCode: String?

            public var commodityName: String?

            public var coveragePercentage: Double?

            public var currency: String?

            public var deductQuantity: Double?

            public var endTime: String?

            public var instanceId: String?

            public var instanceSpec: String?

            public var paymentAmount: Double?

            public var productCode: String?

            public var productName: String?

            public var region: String?

            public var regionNo: String?

            public var startTime: String?

            public var totalQuantity: Double?

            public var userId: String?

            public var userName: String?

            public var zone: String?

            public var zoneName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.capacityUnit != nil {
                    map["CapacityUnit"] = self.capacityUnit!
                }
                if self.commodityCode != nil {
                    map["CommodityCode"] = self.commodityCode!
                }
                if self.commodityName != nil {
                    map["CommodityName"] = self.commodityName!
                }
                if self.coveragePercentage != nil {
                    map["CoveragePercentage"] = self.coveragePercentage!
                }
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.deductQuantity != nil {
                    map["DeductQuantity"] = self.deductQuantity!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.paymentAmount != nil {
                    map["PaymentAmount"] = self.paymentAmount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.regionNo != nil {
                    map["RegionNo"] = self.regionNo!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.totalQuantity != nil {
                    map["TotalQuantity"] = self.totalQuantity!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                if self.zoneName != nil {
                    map["ZoneName"] = self.zoneName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CapacityUnit"] as? String {
                    self.capacityUnit = value
                }
                if let value = dict["CommodityCode"] as? String {
                    self.commodityCode = value
                }
                if let value = dict["CommodityName"] as? String {
                    self.commodityName = value
                }
                if let value = dict["CoveragePercentage"] as? Double {
                    self.coveragePercentage = value
                }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DeductQuantity"] as? Double {
                    self.deductQuantity = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["PaymentAmount"] as? Double {
                    self.paymentAmount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RegionNo"] as? String {
                    self.regionNo = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["TotalQuantity"] as? Double {
                    self.totalQuantity = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
                if let value = dict["ZoneName"] as? String {
                    self.zoneName = value
                }
            }
        }
        public var items: [DescribeResourceCoverageDetailResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeResourceCoverageDetailResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeResourceCoverageDetailResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeResourceCoverageDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeResourceCoverageDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeResourceCoverageDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceCoverageDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceCoverageDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceCoverageTotalRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var periodType: String?

    public var resourceType: String?

    public var startPeriod: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
    }
}

public class DescribeResourceCoverageTotalResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PeriodCoverage : Tea.TeaModel {
            public var coveragePercentage: Double?

            public var period: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.coveragePercentage != nil {
                    map["CoveragePercentage"] = self.coveragePercentage!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CoveragePercentage"] as? Double {
                    self.coveragePercentage = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
            }
        }
        public class TotalCoverage : Tea.TeaModel {
            public var capacityUnit: String?

            public var coveragePercentage: Double?

            public var deductQuantity: Double?

            public var totalQuantity: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.capacityUnit != nil {
                    map["CapacityUnit"] = self.capacityUnit!
                }
                if self.coveragePercentage != nil {
                    map["CoveragePercentage"] = self.coveragePercentage!
                }
                if self.deductQuantity != nil {
                    map["DeductQuantity"] = self.deductQuantity!
                }
                if self.totalQuantity != nil {
                    map["TotalQuantity"] = self.totalQuantity!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CapacityUnit"] as? String {
                    self.capacityUnit = value
                }
                if let value = dict["CoveragePercentage"] as? Double {
                    self.coveragePercentage = value
                }
                if let value = dict["DeductQuantity"] as? Double {
                    self.deductQuantity = value
                }
                if let value = dict["TotalQuantity"] as? Double {
                    self.totalQuantity = value
                }
            }
        }
        public var periodCoverage: [DescribeResourceCoverageTotalResponseBody.Data.PeriodCoverage]?

        public var totalCoverage: DescribeResourceCoverageTotalResponseBody.Data.TotalCoverage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.totalCoverage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.periodCoverage != nil {
                var tmp : [Any] = []
                for k in self.periodCoverage! {
                    tmp.append(k.toMap())
                }
                map["PeriodCoverage"] = tmp
            }
            if self.totalCoverage != nil {
                map["TotalCoverage"] = self.totalCoverage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PeriodCoverage"] as? [Any?] {
                var tmp : [DescribeResourceCoverageTotalResponseBody.Data.PeriodCoverage] = []
                for v in value {
                    if v != nil {
                        var model = DescribeResourceCoverageTotalResponseBody.Data.PeriodCoverage()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.periodCoverage = tmp
            }
            if let value = dict["TotalCoverage"] as? [String: Any?] {
                var model = DescribeResourceCoverageTotalResponseBody.Data.TotalCoverage()
                model.fromMap(value)
                self.totalCoverage = model
            }
        }
    }
    public var code: String?

    public var data: DescribeResourceCoverageTotalResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeResourceCoverageTotalResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeResourceCoverageTotalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceCoverageTotalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceCoverageTotalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourcePackageProductRequest : Tea.TeaModel {
    public var productCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
    }
}

public class DescribeResourcePackageProductResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ResourcePackages : Tea.TeaModel {
            public class ResourcePackage : Tea.TeaModel {
                public class PackageTypes : Tea.TeaModel {
                    public class PackageType : Tea.TeaModel {
                        public class Properties : Tea.TeaModel {
                            public class Property : Tea.TeaModel {
                                public var name: String?

                                public var value: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.name != nil {
                                        map["Name"] = self.name!
                                    }
                                    if self.value != nil {
                                        map["Value"] = self.value!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Name"] as? String {
                                        self.name = value
                                    }
                                    if let value = dict["Value"] as? String {
                                        self.value = value
                                    }
                                }
                            }
                            public var property: [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Properties.Property]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.property != nil {
                                    var tmp : [Any] = []
                                    for k in self.property! {
                                        tmp.append(k.toMap())
                                    }
                                    map["Property"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Property"] as? [Any?] {
                                    var tmp : [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Properties.Property] = []
                                    for v in value {
                                        if v != nil {
                                            var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Properties.Property()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.property = tmp
                                }
                            }
                        }
                        public class Specifications : Tea.TeaModel {
                            public class Specification : Tea.TeaModel {
                                public class AvailableDurations : Tea.TeaModel {
                                    public class AvailableDuration : Tea.TeaModel {
                                        public var name: String?

                                        public var unit: String?

                                        public var value: Int32?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.name != nil {
                                                map["Name"] = self.name!
                                            }
                                            if self.unit != nil {
                                                map["Unit"] = self.unit!
                                            }
                                            if self.value != nil {
                                                map["Value"] = self.value!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["Name"] as? String {
                                                self.name = value
                                            }
                                            if let value = dict["Unit"] as? String {
                                                self.unit = value
                                            }
                                            if let value = dict["Value"] as? Int32 {
                                                self.value = value
                                            }
                                        }
                                    }
                                    public var availableDuration: [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification.AvailableDurations.AvailableDuration]?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.availableDuration != nil {
                                            var tmp : [Any] = []
                                            for k in self.availableDuration! {
                                                tmp.append(k.toMap())
                                            }
                                            map["AvailableDuration"] = tmp
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["AvailableDuration"] as? [Any?] {
                                            var tmp : [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification.AvailableDurations.AvailableDuration] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification.AvailableDurations.AvailableDuration()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.availableDuration = tmp
                                        }
                                    }
                                }
                                public var availableDurations: DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification.AvailableDurations?

                                public var name: String?

                                public var value: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.availableDurations?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.availableDurations != nil {
                                        map["AvailableDurations"] = self.availableDurations?.toMap()
                                    }
                                    if self.name != nil {
                                        map["Name"] = self.name!
                                    }
                                    if self.value != nil {
                                        map["Value"] = self.value!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["AvailableDurations"] as? [String: Any?] {
                                        var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification.AvailableDurations()
                                        model.fromMap(value)
                                        self.availableDurations = model
                                    }
                                    if let value = dict["Name"] as? String {
                                        self.name = value
                                    }
                                    if let value = dict["Value"] as? String {
                                        self.value = value
                                    }
                                }
                            }
                            public var specification: [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.specification != nil {
                                    var tmp : [Any] = []
                                    for k in self.specification! {
                                        tmp.append(k.toMap())
                                    }
                                    map["Specification"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Specification"] as? [Any?] {
                                    var tmp : [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification] = []
                                    for v in value {
                                        if v != nil {
                                            var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications.Specification()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.specification = tmp
                                }
                            }
                        }
                        public var code: String?

                        public var name: String?

                        public var properties: DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Properties?

                        public var specifications: DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.properties?.validate()
                            try self.specifications?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.code != nil {
                                map["Code"] = self.code!
                            }
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            if self.properties != nil {
                                map["Properties"] = self.properties?.toMap()
                            }
                            if self.specifications != nil {
                                map["Specifications"] = self.specifications?.toMap()
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Code"] as? String {
                                self.code = value
                            }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                            if let value = dict["Properties"] as? [String: Any?] {
                                var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Properties()
                                model.fromMap(value)
                                self.properties = model
                            }
                            if let value = dict["Specifications"] as? [String: Any?] {
                                var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType.Specifications()
                                model.fromMap(value)
                                self.specifications = model
                            }
                        }
                    }
                    public var packageType: [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.packageType != nil {
                            var tmp : [Any] = []
                            for k in self.packageType! {
                                tmp.append(k.toMap())
                            }
                            map["PackageType"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["PackageType"] as? [Any?] {
                            var tmp : [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes.PackageType()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.packageType = tmp
                        }
                    }
                }
                public var name: String?

                public var packageTypes: DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes?

                public var productCode: String?

                public var productType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.packageTypes?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.packageTypes != nil {
                        map["PackageTypes"] = self.packageTypes?.toMap()
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["PackageTypes"] as? [String: Any?] {
                        var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage.PackageTypes()
                        model.fromMap(value)
                        self.packageTypes = model
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                }
            }
            public var resourcePackage: [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourcePackage != nil {
                    var tmp : [Any] = []
                    for k in self.resourcePackage! {
                        tmp.append(k.toMap())
                    }
                    map["ResourcePackage"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourcePackage"] as? [Any?] {
                    var tmp : [DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages.ResourcePackage()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.resourcePackage = tmp
                }
            }
        }
        public var resourcePackages: DescribeResourcePackageProductResponseBody.Data.ResourcePackages?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.resourcePackages?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourcePackages != nil {
                map["ResourcePackages"] = self.resourcePackages?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourcePackages"] as? [String: Any?] {
                var model = DescribeResourcePackageProductResponseBody.Data.ResourcePackages()
                model.fromMap(value)
                self.resourcePackages = model
            }
        }
    }
    public var code: String?

    public var data: DescribeResourcePackageProductResponseBody.Data?

    public var message: String?

    public var orderId: Int64?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeResourcePackageProductResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeResourcePackageProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourcePackageProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourcePackageProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceUsageDetailRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var periodType: String?

    public var resourceType: String?

    public var startPeriod: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
    }
}

public class DescribeResourceUsageDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var capacityUnit: String?

            public var currency: String?

            public var deductQuantity: Double?

            public var endTime: String?

            public var imageType: String?

            public var instanceSpec: String?

            public var postpaidCost: String?

            public var potentialSavedCost: String?

            public var quantity: Int64?

            public var region: String?

            public var regionNo: String?

            public var reservationCost: String?

            public var resourceInstanceId: String?

            public var savedCost: String?

            public var startTime: String?

            public var status: String?

            public var statusName: String?

            public var totalQuantity: Double?

            public var usagePercentage: Double?

            public var userId: String?

            public var userName: String?

            public var zone: String?

            public var zoneName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.capacityUnit != nil {
                    map["CapacityUnit"] = self.capacityUnit!
                }
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.deductQuantity != nil {
                    map["DeductQuantity"] = self.deductQuantity!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.imageType != nil {
                    map["ImageType"] = self.imageType!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.postpaidCost != nil {
                    map["PostpaidCost"] = self.postpaidCost!
                }
                if self.potentialSavedCost != nil {
                    map["PotentialSavedCost"] = self.potentialSavedCost!
                }
                if self.quantity != nil {
                    map["Quantity"] = self.quantity!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.regionNo != nil {
                    map["RegionNo"] = self.regionNo!
                }
                if self.reservationCost != nil {
                    map["ReservationCost"] = self.reservationCost!
                }
                if self.resourceInstanceId != nil {
                    map["ResourceInstanceId"] = self.resourceInstanceId!
                }
                if self.savedCost != nil {
                    map["SavedCost"] = self.savedCost!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.statusName != nil {
                    map["StatusName"] = self.statusName!
                }
                if self.totalQuantity != nil {
                    map["TotalQuantity"] = self.totalQuantity!
                }
                if self.usagePercentage != nil {
                    map["UsagePercentage"] = self.usagePercentage!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                if self.zoneName != nil {
                    map["ZoneName"] = self.zoneName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CapacityUnit"] as? String {
                    self.capacityUnit = value
                }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DeductQuantity"] as? Double {
                    self.deductQuantity = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["ImageType"] as? String {
                    self.imageType = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["PostpaidCost"] as? String {
                    self.postpaidCost = value
                }
                if let value = dict["PotentialSavedCost"] as? String {
                    self.potentialSavedCost = value
                }
                if let value = dict["Quantity"] as? Int64 {
                    self.quantity = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RegionNo"] as? String {
                    self.regionNo = value
                }
                if let value = dict["ReservationCost"] as? String {
                    self.reservationCost = value
                }
                if let value = dict["ResourceInstanceId"] as? String {
                    self.resourceInstanceId = value
                }
                if let value = dict["SavedCost"] as? String {
                    self.savedCost = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StatusName"] as? String {
                    self.statusName = value
                }
                if let value = dict["TotalQuantity"] as? Double {
                    self.totalQuantity = value
                }
                if let value = dict["UsagePercentage"] as? Double {
                    self.usagePercentage = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
                if let value = dict["ZoneName"] as? String {
                    self.zoneName = value
                }
            }
        }
        public var items: [DescribeResourceUsageDetailResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeResourceUsageDetailResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeResourceUsageDetailResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeResourceUsageDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeResourceUsageDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeResourceUsageDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceUsageDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceUsageDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceUsageTotalRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var periodType: String?

    public var resourceType: String?

    public var startPeriod: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
    }
}

public class DescribeResourceUsageTotalResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PeriodCoverage : Tea.TeaModel {
            public var period: String?

            public var usagePercentage: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.period != nil {
                    map["Period"] = self.period!
                }
                if self.usagePercentage != nil {
                    map["UsagePercentage"] = self.usagePercentage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
                if let value = dict["UsagePercentage"] as? Double {
                    self.usagePercentage = value
                }
            }
        }
        public class TotalUsage : Tea.TeaModel {
            public var postpaidCost: Double?

            public var potentialSavedCost: Double?

            public var reservationCost: Double?

            public var savedCost: Double?

            public var usagePercentage: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.postpaidCost != nil {
                    map["PostpaidCost"] = self.postpaidCost!
                }
                if self.potentialSavedCost != nil {
                    map["PotentialSavedCost"] = self.potentialSavedCost!
                }
                if self.reservationCost != nil {
                    map["ReservationCost"] = self.reservationCost!
                }
                if self.savedCost != nil {
                    map["SavedCost"] = self.savedCost!
                }
                if self.usagePercentage != nil {
                    map["UsagePercentage"] = self.usagePercentage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PostpaidCost"] as? Double {
                    self.postpaidCost = value
                }
                if let value = dict["PotentialSavedCost"] as? Double {
                    self.potentialSavedCost = value
                }
                if let value = dict["ReservationCost"] as? Double {
                    self.reservationCost = value
                }
                if let value = dict["SavedCost"] as? Double {
                    self.savedCost = value
                }
                if let value = dict["UsagePercentage"] as? Double {
                    self.usagePercentage = value
                }
            }
        }
        public var periodCoverage: [DescribeResourceUsageTotalResponseBody.Data.PeriodCoverage]?

        public var totalUsage: DescribeResourceUsageTotalResponseBody.Data.TotalUsage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.totalUsage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.periodCoverage != nil {
                var tmp : [Any] = []
                for k in self.periodCoverage! {
                    tmp.append(k.toMap())
                }
                map["PeriodCoverage"] = tmp
            }
            if self.totalUsage != nil {
                map["TotalUsage"] = self.totalUsage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PeriodCoverage"] as? [Any?] {
                var tmp : [DescribeResourceUsageTotalResponseBody.Data.PeriodCoverage] = []
                for v in value {
                    if v != nil {
                        var model = DescribeResourceUsageTotalResponseBody.Data.PeriodCoverage()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.periodCoverage = tmp
            }
            if let value = dict["TotalUsage"] as? [String: Any?] {
                var model = DescribeResourceUsageTotalResponseBody.Data.TotalUsage()
                model.fromMap(value)
                self.totalUsage = model
            }
        }
    }
    public var code: String?

    public var data: DescribeResourceUsageTotalResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeResourceUsageTotalResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeResourceUsageTotalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceUsageTotalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceUsageTotalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSavingsPlansCoverageDetailRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var maxResults: Int32?

    public var periodType: String?

    public var startPeriod: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class DescribeSavingsPlansCoverageDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var coveragePercentage: Double?

            public var currency: String?

            public var deductAmount: Double?

            public var endPeriod: String?

            public var instanceId: String?

            public var instanceSpec: String?

            public var ownerId: Int64?

            public var postpaidCost: Double?

            public var region: String?

            public var startPeriod: String?

            public var totalAmount: Double?

            public var userId: Int64?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.coveragePercentage != nil {
                    map["CoveragePercentage"] = self.coveragePercentage!
                }
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.deductAmount != nil {
                    map["DeductAmount"] = self.deductAmount!
                }
                if self.endPeriod != nil {
                    map["EndPeriod"] = self.endPeriod!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.ownerId != nil {
                    map["OwnerId"] = self.ownerId!
                }
                if self.postpaidCost != nil {
                    map["PostpaidCost"] = self.postpaidCost!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.startPeriod != nil {
                    map["StartPeriod"] = self.startPeriod!
                }
                if self.totalAmount != nil {
                    map["TotalAmount"] = self.totalAmount!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CoveragePercentage"] as? Double {
                    self.coveragePercentage = value
                }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DeductAmount"] as? Double {
                    self.deductAmount = value
                }
                if let value = dict["EndPeriod"] as? String {
                    self.endPeriod = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["OwnerId"] as? Int64 {
                    self.ownerId = value
                }
                if let value = dict["PostpaidCost"] as? Double {
                    self.postpaidCost = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["StartPeriod"] as? String {
                    self.startPeriod = value
                }
                if let value = dict["TotalAmount"] as? Double {
                    self.totalAmount = value
                }
                if let value = dict["UserId"] as? Int64 {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
            }
        }
        public var items: [DescribeSavingsPlansCoverageDetailResponseBody.Data.Items]?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeSavingsPlansCoverageDetailResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSavingsPlansCoverageDetailResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeSavingsPlansCoverageDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSavingsPlansCoverageDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSavingsPlansCoverageDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSavingsPlansCoverageDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSavingsPlansCoverageDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSavingsPlansCoverageTotalRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var periodType: String?

    public var startPeriod: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
    }
}

public class DescribeSavingsPlansCoverageTotalResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PeriodCoverage : Tea.TeaModel {
            public var percentage: Double?

            public var period: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.percentage != nil {
                    map["Percentage"] = self.percentage!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Percentage"] as? Double {
                    self.percentage = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
            }
        }
        public class TotalCoverage : Tea.TeaModel {
            public var coveragePercentage: Double?

            public var deductAmount: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.coveragePercentage != nil {
                    map["CoveragePercentage"] = self.coveragePercentage!
                }
                if self.deductAmount != nil {
                    map["DeductAmount"] = self.deductAmount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CoveragePercentage"] as? Double {
                    self.coveragePercentage = value
                }
                if let value = dict["DeductAmount"] as? Double {
                    self.deductAmount = value
                }
            }
        }
        public var periodCoverage: [DescribeSavingsPlansCoverageTotalResponseBody.Data.PeriodCoverage]?

        public var totalCoverage: DescribeSavingsPlansCoverageTotalResponseBody.Data.TotalCoverage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.totalCoverage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.periodCoverage != nil {
                var tmp : [Any] = []
                for k in self.periodCoverage! {
                    tmp.append(k.toMap())
                }
                map["PeriodCoverage"] = tmp
            }
            if self.totalCoverage != nil {
                map["TotalCoverage"] = self.totalCoverage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PeriodCoverage"] as? [Any?] {
                var tmp : [DescribeSavingsPlansCoverageTotalResponseBody.Data.PeriodCoverage] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSavingsPlansCoverageTotalResponseBody.Data.PeriodCoverage()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.periodCoverage = tmp
            }
            if let value = dict["TotalCoverage"] as? [String: Any?] {
                var model = DescribeSavingsPlansCoverageTotalResponseBody.Data.TotalCoverage()
                model.fromMap(value)
                self.totalCoverage = model
            }
        }
    }
    public var code: String?

    public var data: DescribeSavingsPlansCoverageTotalResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSavingsPlansCoverageTotalResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSavingsPlansCoverageTotalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSavingsPlansCoverageTotalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSavingsPlansCoverageTotalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSavingsPlansUsageDetailRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var maxResults: Int32?

    public var periodType: String?

    public var startPeriod: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class DescribeSavingsPlansUsageDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var currency: String?

            public var deductValue: Double?

            public var endPeriod: String?

            public var instanceId: String?

            public var poolValue: Double?

            public var postpaidCost: Double?

            public var savedCost: Double?

            public var startPeriod: String?

            public var status: String?

            public var type: String?

            public var usagePercentage: Double?

            public var userId: Int64?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.deductValue != nil {
                    map["DeductValue"] = self.deductValue!
                }
                if self.endPeriod != nil {
                    map["EndPeriod"] = self.endPeriod!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.poolValue != nil {
                    map["PoolValue"] = self.poolValue!
                }
                if self.postpaidCost != nil {
                    map["PostpaidCost"] = self.postpaidCost!
                }
                if self.savedCost != nil {
                    map["SavedCost"] = self.savedCost!
                }
                if self.startPeriod != nil {
                    map["StartPeriod"] = self.startPeriod!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.usagePercentage != nil {
                    map["UsagePercentage"] = self.usagePercentage!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DeductValue"] as? Double {
                    self.deductValue = value
                }
                if let value = dict["EndPeriod"] as? String {
                    self.endPeriod = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["PoolValue"] as? Double {
                    self.poolValue = value
                }
                if let value = dict["PostpaidCost"] as? Double {
                    self.postpaidCost = value
                }
                if let value = dict["SavedCost"] as? Double {
                    self.savedCost = value
                }
                if let value = dict["StartPeriod"] as? String {
                    self.startPeriod = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UsagePercentage"] as? Double {
                    self.usagePercentage = value
                }
                if let value = dict["UserId"] as? Int64 {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
            }
        }
        public var items: [DescribeSavingsPlansUsageDetailResponseBody.Data.Items]?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeSavingsPlansUsageDetailResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSavingsPlansUsageDetailResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeSavingsPlansUsageDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSavingsPlansUsageDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSavingsPlansUsageDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSavingsPlansUsageDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSavingsPlansUsageDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSavingsPlansUsageTotalRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var endPeriod: String?

    public var periodType: String?

    public var startPeriod: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.endPeriod != nil {
            map["EndPeriod"] = self.endPeriod!
        }
        if self.periodType != nil {
            map["PeriodType"] = self.periodType!
        }
        if self.startPeriod != nil {
            map["StartPeriod"] = self.startPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["EndPeriod"] as? String {
            self.endPeriod = value
        }
        if let value = dict["PeriodType"] as? String {
            self.periodType = value
        }
        if let value = dict["StartPeriod"] as? String {
            self.startPeriod = value
        }
    }
}

public class DescribeSavingsPlansUsageTotalResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PeriodCoverage : Tea.TeaModel {
            public var percentage: Double?

            public var period: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.percentage != nil {
                    map["Percentage"] = self.percentage!
                }
                if self.period != nil {
                    map["Period"] = self.period!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Percentage"] as? Double {
                    self.percentage = value
                }
                if let value = dict["Period"] as? String {
                    self.period = value
                }
            }
        }
        public class TotalUsage : Tea.TeaModel {
            public var poolValue: Double?

            public var postpaidCost: Double?

            public var savedCost: Double?

            public var usagePercentage: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.poolValue != nil {
                    map["PoolValue"] = self.poolValue!
                }
                if self.postpaidCost != nil {
                    map["PostpaidCost"] = self.postpaidCost!
                }
                if self.savedCost != nil {
                    map["SavedCost"] = self.savedCost!
                }
                if self.usagePercentage != nil {
                    map["UsagePercentage"] = self.usagePercentage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PoolValue"] as? Double {
                    self.poolValue = value
                }
                if let value = dict["PostpaidCost"] as? Double {
                    self.postpaidCost = value
                }
                if let value = dict["SavedCost"] as? Double {
                    self.savedCost = value
                }
                if let value = dict["UsagePercentage"] as? Double {
                    self.usagePercentage = value
                }
            }
        }
        public var periodCoverage: [DescribeSavingsPlansUsageTotalResponseBody.Data.PeriodCoverage]?

        public var totalUsage: DescribeSavingsPlansUsageTotalResponseBody.Data.TotalUsage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.totalUsage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.periodCoverage != nil {
                var tmp : [Any] = []
                for k in self.periodCoverage! {
                    tmp.append(k.toMap())
                }
                map["PeriodCoverage"] = tmp
            }
            if self.totalUsage != nil {
                map["TotalUsage"] = self.totalUsage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PeriodCoverage"] as? [Any?] {
                var tmp : [DescribeSavingsPlansUsageTotalResponseBody.Data.PeriodCoverage] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSavingsPlansUsageTotalResponseBody.Data.PeriodCoverage()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.periodCoverage = tmp
            }
            if let value = dict["TotalUsage"] as? [String: Any?] {
                var model = DescribeSavingsPlansUsageTotalResponseBody.Data.TotalUsage()
                model.fromMap(value)
                self.totalUsage = model
            }
        }
    }
    public var code: String?

    public var data: DescribeSavingsPlansUsageTotalResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSavingsPlansUsageTotalResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSavingsPlansUsageTotalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSavingsPlansUsageTotalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSavingsPlansUsageTotalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSplitItemBillRequest : Tea.TeaModel {
    public class TagFilter : Tea.TeaModel {
        public var tagKey: String?

        public var tagValues: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValues != nil {
                map["TagValues"] = self.tagValues!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValues"] as? [String] {
                self.tagValues = value
            }
        }
    }
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var billingDate: String?

    public var granularity: String?

    public var instanceID: String?

    public var isHideZeroCharge: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var ownerId: Int64?

    public var pipCode: String?

    public var productCode: String?

    public var productType: String?

    public var splitItemID: String?

    public var subscriptionType: String?

    public var tagFilter: [DescribeSplitItemBillRequest.TagFilter]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.billingDate != nil {
            map["BillingDate"] = self.billingDate!
        }
        if self.granularity != nil {
            map["Granularity"] = self.granularity!
        }
        if self.instanceID != nil {
            map["InstanceID"] = self.instanceID!
        }
        if self.isHideZeroCharge != nil {
            map["IsHideZeroCharge"] = self.isHideZeroCharge!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pipCode != nil {
            map["PipCode"] = self.pipCode!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.splitItemID != nil {
            map["SplitItemID"] = self.splitItemID!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        if self.tagFilter != nil {
            var tmp : [Any] = []
            for k in self.tagFilter! {
                tmp.append(k.toMap())
            }
            map["TagFilter"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["BillingDate"] as? String {
            self.billingDate = value
        }
        if let value = dict["Granularity"] as? String {
            self.granularity = value
        }
        if let value = dict["InstanceID"] as? String {
            self.instanceID = value
        }
        if let value = dict["IsHideZeroCharge"] as? Bool {
            self.isHideZeroCharge = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PipCode"] as? String {
            self.pipCode = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SplitItemID"] as? String {
            self.splitItemID = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
        if let value = dict["TagFilter"] as? [Any?] {
            var tmp : [DescribeSplitItemBillRequest.TagFilter] = []
            for v in value {
                if v != nil {
                    var model = DescribeSplitItemBillRequest.TagFilter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagFilter = tmp
        }
    }
}

public class DescribeSplitItemBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var adjustAmount: Double?

            public var afterDiscountAmount: Double?

            public var billAccountID: String?

            public var billAccountName: String?

            public var billingDate: String?

            public var billingItem: String?

            public var billingItemCode: String?

            public var billingType: String?

            public var bizType: String?

            public var cashAmount: Double?

            public var commodityCode: String?

            public var costUnit: String?

            public var currency: String?

            public var deductedByCashCoupons: Double?

            public var deductedByCoupons: Double?

            public var deductedByPrepaidCard: Double?

            public var deductedByResourcePackage: String?

            public var instanceConfig: String?

            public var instanceID: String?

            public var instanceSpec: String?

            public var internetIP: String?

            public var intranetIP: String?

            public var invoiceDiscount: Double?

            public var item: String?

            public var itemName: String?

            public var listPrice: String?

            public var listPriceUnit: String?

            public var nickName: String?

            public var outstandingAmount: Double?

            public var ownerID: String?

            public var paymentAmount: Double?

            public var pipCode: String?

            public var pretaxAmount: Double?

            public var pretaxGrossAmount: Double?

            public var productCode: String?

            public var productDetail: String?

            public var productName: String?

            public var productType: String?

            public var region: String?

            public var resourceGroup: String?

            public var servicePeriod: String?

            public var servicePeriodUnit: String?

            public var splitAccountID: String?

            public var splitAccountName: String?

            public var splitBillingCycle: String?

            public var splitBillingDate: String?

            public var splitCommodityCode: String?

            public var splitItemID: String?

            public var splitItemName: String?

            public var splitProductDetail: String?

            public var subscriptionType: String?

            public var tag: String?

            public var usage: String?

            public var usageUnit: String?

            public var zone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adjustAmount != nil {
                    map["AdjustAmount"] = self.adjustAmount!
                }
                if self.afterDiscountAmount != nil {
                    map["AfterDiscountAmount"] = self.afterDiscountAmount!
                }
                if self.billAccountID != nil {
                    map["BillAccountID"] = self.billAccountID!
                }
                if self.billAccountName != nil {
                    map["BillAccountName"] = self.billAccountName!
                }
                if self.billingDate != nil {
                    map["BillingDate"] = self.billingDate!
                }
                if self.billingItem != nil {
                    map["BillingItem"] = self.billingItem!
                }
                if self.billingItemCode != nil {
                    map["BillingItemCode"] = self.billingItemCode!
                }
                if self.billingType != nil {
                    map["BillingType"] = self.billingType!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.cashAmount != nil {
                    map["CashAmount"] = self.cashAmount!
                }
                if self.commodityCode != nil {
                    map["CommodityCode"] = self.commodityCode!
                }
                if self.costUnit != nil {
                    map["CostUnit"] = self.costUnit!
                }
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.deductedByCashCoupons != nil {
                    map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                }
                if self.deductedByCoupons != nil {
                    map["DeductedByCoupons"] = self.deductedByCoupons!
                }
                if self.deductedByPrepaidCard != nil {
                    map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                }
                if self.deductedByResourcePackage != nil {
                    map["DeductedByResourcePackage"] = self.deductedByResourcePackage!
                }
                if self.instanceConfig != nil {
                    map["InstanceConfig"] = self.instanceConfig!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.internetIP != nil {
                    map["InternetIP"] = self.internetIP!
                }
                if self.intranetIP != nil {
                    map["IntranetIP"] = self.intranetIP!
                }
                if self.invoiceDiscount != nil {
                    map["InvoiceDiscount"] = self.invoiceDiscount!
                }
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemName != nil {
                    map["ItemName"] = self.itemName!
                }
                if self.listPrice != nil {
                    map["ListPrice"] = self.listPrice!
                }
                if self.listPriceUnit != nil {
                    map["ListPriceUnit"] = self.listPriceUnit!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.outstandingAmount != nil {
                    map["OutstandingAmount"] = self.outstandingAmount!
                }
                if self.ownerID != nil {
                    map["OwnerID"] = self.ownerID!
                }
                if self.paymentAmount != nil {
                    map["PaymentAmount"] = self.paymentAmount!
                }
                if self.pipCode != nil {
                    map["PipCode"] = self.pipCode!
                }
                if self.pretaxAmount != nil {
                    map["PretaxAmount"] = self.pretaxAmount!
                }
                if self.pretaxGrossAmount != nil {
                    map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productDetail != nil {
                    map["ProductDetail"] = self.productDetail!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.productType != nil {
                    map["ProductType"] = self.productType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.servicePeriod != nil {
                    map["ServicePeriod"] = self.servicePeriod!
                }
                if self.servicePeriodUnit != nil {
                    map["ServicePeriodUnit"] = self.servicePeriodUnit!
                }
                if self.splitAccountID != nil {
                    map["SplitAccountID"] = self.splitAccountID!
                }
                if self.splitAccountName != nil {
                    map["SplitAccountName"] = self.splitAccountName!
                }
                if self.splitBillingCycle != nil {
                    map["SplitBillingCycle"] = self.splitBillingCycle!
                }
                if self.splitBillingDate != nil {
                    map["SplitBillingDate"] = self.splitBillingDate!
                }
                if self.splitCommodityCode != nil {
                    map["SplitCommodityCode"] = self.splitCommodityCode!
                }
                if self.splitItemID != nil {
                    map["SplitItemID"] = self.splitItemID!
                }
                if self.splitItemName != nil {
                    map["SplitItemName"] = self.splitItemName!
                }
                if self.splitProductDetail != nil {
                    map["SplitProductDetail"] = self.splitProductDetail!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.usageUnit != nil {
                    map["UsageUnit"] = self.usageUnit!
                }
                if self.zone != nil {
                    map["Zone"] = self.zone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdjustAmount"] as? Double {
                    self.adjustAmount = value
                }
                if let value = dict["AfterDiscountAmount"] as? Double {
                    self.afterDiscountAmount = value
                }
                if let value = dict["BillAccountID"] as? String {
                    self.billAccountID = value
                }
                if let value = dict["BillAccountName"] as? String {
                    self.billAccountName = value
                }
                if let value = dict["BillingDate"] as? String {
                    self.billingDate = value
                }
                if let value = dict["BillingItem"] as? String {
                    self.billingItem = value
                }
                if let value = dict["BillingItemCode"] as? String {
                    self.billingItemCode = value
                }
                if let value = dict["BillingType"] as? String {
                    self.billingType = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["CashAmount"] as? Double {
                    self.cashAmount = value
                }
                if let value = dict["CommodityCode"] as? String {
                    self.commodityCode = value
                }
                if let value = dict["CostUnit"] as? String {
                    self.costUnit = value
                }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DeductedByCashCoupons"] as? Double {
                    self.deductedByCashCoupons = value
                }
                if let value = dict["DeductedByCoupons"] as? Double {
                    self.deductedByCoupons = value
                }
                if let value = dict["DeductedByPrepaidCard"] as? Double {
                    self.deductedByPrepaidCard = value
                }
                if let value = dict["DeductedByResourcePackage"] as? String {
                    self.deductedByResourcePackage = value
                }
                if let value = dict["InstanceConfig"] as? String {
                    self.instanceConfig = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["InternetIP"] as? String {
                    self.internetIP = value
                }
                if let value = dict["IntranetIP"] as? String {
                    self.intranetIP = value
                }
                if let value = dict["InvoiceDiscount"] as? Double {
                    self.invoiceDiscount = value
                }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemName"] as? String {
                    self.itemName = value
                }
                if let value = dict["ListPrice"] as? String {
                    self.listPrice = value
                }
                if let value = dict["ListPriceUnit"] as? String {
                    self.listPriceUnit = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["OutstandingAmount"] as? Double {
                    self.outstandingAmount = value
                }
                if let value = dict["OwnerID"] as? String {
                    self.ownerID = value
                }
                if let value = dict["PaymentAmount"] as? Double {
                    self.paymentAmount = value
                }
                if let value = dict["PipCode"] as? String {
                    self.pipCode = value
                }
                if let value = dict["PretaxAmount"] as? Double {
                    self.pretaxAmount = value
                }
                if let value = dict["PretaxGrossAmount"] as? Double {
                    self.pretaxGrossAmount = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductDetail"] as? String {
                    self.productDetail = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["ProductType"] as? String {
                    self.productType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["ServicePeriod"] as? String {
                    self.servicePeriod = value
                }
                if let value = dict["ServicePeriodUnit"] as? String {
                    self.servicePeriodUnit = value
                }
                if let value = dict["SplitAccountID"] as? String {
                    self.splitAccountID = value
                }
                if let value = dict["SplitAccountName"] as? String {
                    self.splitAccountName = value
                }
                if let value = dict["SplitBillingCycle"] as? String {
                    self.splitBillingCycle = value
                }
                if let value = dict["SplitBillingDate"] as? String {
                    self.splitBillingDate = value
                }
                if let value = dict["SplitCommodityCode"] as? String {
                    self.splitCommodityCode = value
                }
                if let value = dict["SplitItemID"] as? String {
                    self.splitItemID = value
                }
                if let value = dict["SplitItemName"] as? String {
                    self.splitItemName = value
                }
                if let value = dict["SplitProductDetail"] as? String {
                    self.splitProductDetail = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Usage"] as? String {
                    self.usage = value
                }
                if let value = dict["UsageUnit"] as? String {
                    self.usageUnit = value
                }
                if let value = dict["Zone"] as? String {
                    self.zone = value
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: [DescribeSplitItemBillResponseBody.Data.Items]?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [DescribeSplitItemBillResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSplitItemBillResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: DescribeSplitItemBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeSplitItemBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeSplitItemBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSplitItemBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSplitItemBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAccountRelationRequest : Tea.TeaModel {
    public var relationId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.relationId != nil {
            map["RelationId"] = self.relationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RelationId"] as? Int64 {
            self.relationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAccountRelationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var childUserId: Int64?

        public var endTime: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var parentUserId: Int64?

        public var startTime: Int64?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.childUserId != nil {
                map["ChildUserId"] = self.childUserId!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.parentUserId != nil {
                map["ParentUserId"] = self.parentUserId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChildUserId"] as? Int64 {
                self.childUserId = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["ParentUserId"] as? Int64 {
                self.parentUserId = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: String?

    public var data: GetAccountRelationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAccountRelationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAccountRelationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAccountRelationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAccountRelationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomerAccountInfoRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class GetCustomerAccountInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var accountType: String?

        public var creditLimitStatus: String?

        public var hostingStatus: String?

        public var isCertified: Bool?

        public var loginEmail: String?

        public var mpk: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountType != nil {
                map["AccountType"] = self.accountType!
            }
            if self.creditLimitStatus != nil {
                map["CreditLimitStatus"] = self.creditLimitStatus!
            }
            if self.hostingStatus != nil {
                map["HostingStatus"] = self.hostingStatus!
            }
            if self.isCertified != nil {
                map["IsCertified"] = self.isCertified!
            }
            if self.loginEmail != nil {
                map["LoginEmail"] = self.loginEmail!
            }
            if self.mpk != nil {
                map["Mpk"] = self.mpk!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountType"] as? String {
                self.accountType = value
            }
            if let value = dict["CreditLimitStatus"] as? String {
                self.creditLimitStatus = value
            }
            if let value = dict["HostingStatus"] as? String {
                self.hostingStatus = value
            }
            if let value = dict["IsCertified"] as? Bool {
                self.isCertified = value
            }
            if let value = dict["LoginEmail"] as? String {
                self.loginEmail = value
            }
            if let value = dict["Mpk"] as? Int64 {
                self.mpk = value
            }
        }
    }
    public var code: String?

    public var data: GetCustomerAccountInfoResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomerAccountInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomerAccountInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomerAccountInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomerAccountInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomerListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var uidList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.uidList != nil {
                map["UidList"] = self.uidList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UidList"] as? [String] {
                self.uidList = value
            }
        }
    }
    public var code: String?

    public var data: GetCustomerListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomerListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomerListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomerListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomerListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOrderDetailRequest : Tea.TeaModel {
    public var orderId: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class GetOrderDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class OrderList : Tea.TeaModel {
            public class Order : Tea.TeaModel {
                public class BillModuleConfig : Tea.TeaModel {
                    public class BillModuleConfig : Tea.TeaModel {
                        public class BillModuleProperties : Tea.TeaModel {
                            public class BillModuleProperties : Tea.TeaModel {
                                public var attrApiCode: String?

                                public var moduleApiCode: String?

                                public var value: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.attrApiCode != nil {
                                        map["AttrApiCode"] = self.attrApiCode!
                                    }
                                    if self.moduleApiCode != nil {
                                        map["ModuleApiCode"] = self.moduleApiCode!
                                    }
                                    if self.value != nil {
                                        map["Value"] = self.value!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["AttrApiCode"] as? String {
                                        self.attrApiCode = value
                                    }
                                    if let value = dict["ModuleApiCode"] as? String {
                                        self.moduleApiCode = value
                                    }
                                    if let value = dict["Value"] as? String {
                                        self.value = value
                                    }
                                }
                            }
                            public var billModuleProperties: [GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig.BillModuleProperties.BillModuleProperties]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.billModuleProperties != nil {
                                    var tmp : [Any] = []
                                    for k in self.billModuleProperties! {
                                        tmp.append(k.toMap())
                                    }
                                    map["billModuleProperties"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["billModuleProperties"] as? [Any?] {
                                    var tmp : [GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig.BillModuleProperties.BillModuleProperties] = []
                                    for v in value {
                                        if v != nil {
                                            var model = GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig.BillModuleProperties.BillModuleProperties()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.billModuleProperties = tmp
                                }
                            }
                        }
                        public var apiCode: String?

                        public var billModuleProperties: GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig.BillModuleProperties?

                        public var code: String?

                        public var name: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.billModuleProperties?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.apiCode != nil {
                                map["ApiCode"] = self.apiCode!
                            }
                            if self.billModuleProperties != nil {
                                map["BillModuleProperties"] = self.billModuleProperties?.toMap()
                            }
                            if self.code != nil {
                                map["Code"] = self.code!
                            }
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ApiCode"] as? String {
                                self.apiCode = value
                            }
                            if let value = dict["BillModuleProperties"] as? [String: Any?] {
                                var model = GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig.BillModuleProperties()
                                model.fromMap(value)
                                self.billModuleProperties = model
                            }
                            if let value = dict["Code"] as? String {
                                self.code = value
                            }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                        }
                    }
                    public var billModuleConfig: [GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.billModuleConfig != nil {
                            var tmp : [Any] = []
                            for k in self.billModuleConfig! {
                                tmp.append(k.toMap())
                            }
                            map["billModuleConfig"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["billModuleConfig"] as? [Any?] {
                            var tmp : [GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig] = []
                            for v in value {
                                if v != nil {
                                    var model = GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig.BillModuleConfig()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.billModuleConfig = tmp
                        }
                    }
                }
                public class OriginalModuleConfig : Tea.TeaModel {
                    public class OriginalModuleConfig : Tea.TeaModel {
                        public class ModuleProperties : Tea.TeaModel {
                            public class ModuleProperties : Tea.TeaModel {
                                public var code: String?

                                public var name: String?

                                public var value: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.code != nil {
                                        map["Code"] = self.code!
                                    }
                                    if self.name != nil {
                                        map["Name"] = self.name!
                                    }
                                    if self.value != nil {
                                        map["Value"] = self.value!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Code"] as? String {
                                        self.code = value
                                    }
                                    if let value = dict["Name"] as? String {
                                        self.name = value
                                    }
                                    if let value = dict["Value"] as? String {
                                        self.value = value
                                    }
                                }
                            }
                            public var moduleProperties: [GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig.ModuleProperties.ModuleProperties]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.moduleProperties != nil {
                                    var tmp : [Any] = []
                                    for k in self.moduleProperties! {
                                        tmp.append(k.toMap())
                                    }
                                    map["moduleProperties"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["moduleProperties"] as? [Any?] {
                                    var tmp : [GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig.ModuleProperties.ModuleProperties] = []
                                    for v in value {
                                        if v != nil {
                                            var model = GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig.ModuleProperties.ModuleProperties()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.moduleProperties = tmp
                                }
                            }
                        }
                        public var code: String?

                        public var moduleProperties: GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig.ModuleProperties?

                        public var name: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.moduleProperties?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.code != nil {
                                map["Code"] = self.code!
                            }
                            if self.moduleProperties != nil {
                                map["ModuleProperties"] = self.moduleProperties?.toMap()
                            }
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Code"] as? String {
                                self.code = value
                            }
                            if let value = dict["ModuleProperties"] as? [String: Any?] {
                                var model = GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig.ModuleProperties()
                                model.fromMap(value)
                                self.moduleProperties = model
                            }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                        }
                    }
                    public var originalModuleConfig: [GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.originalModuleConfig != nil {
                            var tmp : [Any] = []
                            for k in self.originalModuleConfig! {
                                tmp.append(k.toMap())
                            }
                            map["originalModuleConfig"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["originalModuleConfig"] as? [Any?] {
                            var tmp : [GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig] = []
                            for v in value {
                                if v != nil {
                                    var model = GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig.OriginalModuleConfig()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.originalModuleConfig = tmp
                        }
                    }
                }
                public var afterTaxAmount: String?

                public var billModuleConfig: GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig?

                public var commodityCode: String?

                public var config: String?

                public var createTime: String?

                public var currency: String?

                public var extendInfos: [String: String]?

                public var instanceIDs: String?

                public var operator_: String?

                public var orderId: String?

                public var orderSubType: String?

                public var orderType: String?

                public var originalConfig: String?

                public var originalModuleConfig: GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig?

                public var paymentCurrency: String?

                public var paymentStatus: String?

                public var paymentTime: String?

                public var pretaxAmount: String?

                public var pretaxAmountLocal: String?

                public var pretaxGrossAmount: String?

                public var productCode: String?

                public var productType: String?

                public var quantity: String?

                public var region: String?

                public var relatedOrderId: String?

                public var subOrderId: String?

                public var subscriptionType: String?

                public var tax: String?

                public var usageEndTime: String?

                public var usageStartTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.billModuleConfig?.validate()
                    try self.originalModuleConfig?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.afterTaxAmount != nil {
                        map["AfterTaxAmount"] = self.afterTaxAmount!
                    }
                    if self.billModuleConfig != nil {
                        map["BillModuleConfig"] = self.billModuleConfig?.toMap()
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.config != nil {
                        map["Config"] = self.config!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.extendInfos != nil {
                        map["ExtendInfos"] = self.extendInfos!
                    }
                    if self.instanceIDs != nil {
                        map["InstanceIDs"] = self.instanceIDs!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.orderId != nil {
                        map["OrderId"] = self.orderId!
                    }
                    if self.orderSubType != nil {
                        map["OrderSubType"] = self.orderSubType!
                    }
                    if self.orderType != nil {
                        map["OrderType"] = self.orderType!
                    }
                    if self.originalConfig != nil {
                        map["OriginalConfig"] = self.originalConfig!
                    }
                    if self.originalModuleConfig != nil {
                        map["OriginalModuleConfig"] = self.originalModuleConfig?.toMap()
                    }
                    if self.paymentCurrency != nil {
                        map["PaymentCurrency"] = self.paymentCurrency!
                    }
                    if self.paymentStatus != nil {
                        map["PaymentStatus"] = self.paymentStatus!
                    }
                    if self.paymentTime != nil {
                        map["PaymentTime"] = self.paymentTime!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxAmountLocal != nil {
                        map["PretaxAmountLocal"] = self.pretaxAmountLocal!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.quantity != nil {
                        map["Quantity"] = self.quantity!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.relatedOrderId != nil {
                        map["RelatedOrderId"] = self.relatedOrderId!
                    }
                    if self.subOrderId != nil {
                        map["SubOrderId"] = self.subOrderId!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tax != nil {
                        map["Tax"] = self.tax!
                    }
                    if self.usageEndTime != nil {
                        map["UsageEndTime"] = self.usageEndTime!
                    }
                    if self.usageStartTime != nil {
                        map["UsageStartTime"] = self.usageStartTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AfterTaxAmount"] as? String {
                        self.afterTaxAmount = value
                    }
                    if let value = dict["BillModuleConfig"] as? [String: Any?] {
                        var model = GetOrderDetailResponseBody.Data.OrderList.Order.BillModuleConfig()
                        model.fromMap(value)
                        self.billModuleConfig = model
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["Config"] as? String {
                        self.config = value
                    }
                    if let value = dict["CreateTime"] as? String {
                        self.createTime = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["ExtendInfos"] as? [String: String] {
                        self.extendInfos = value
                    }
                    if let value = dict["InstanceIDs"] as? String {
                        self.instanceIDs = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["OrderId"] as? String {
                        self.orderId = value
                    }
                    if let value = dict["OrderSubType"] as? String {
                        self.orderSubType = value
                    }
                    if let value = dict["OrderType"] as? String {
                        self.orderType = value
                    }
                    if let value = dict["OriginalConfig"] as? String {
                        self.originalConfig = value
                    }
                    if let value = dict["OriginalModuleConfig"] as? [String: Any?] {
                        var model = GetOrderDetailResponseBody.Data.OrderList.Order.OriginalModuleConfig()
                        model.fromMap(value)
                        self.originalModuleConfig = model
                    }
                    if let value = dict["PaymentCurrency"] as? String {
                        self.paymentCurrency = value
                    }
                    if let value = dict["PaymentStatus"] as? String {
                        self.paymentStatus = value
                    }
                    if let value = dict["PaymentTime"] as? String {
                        self.paymentTime = value
                    }
                    if let value = dict["PretaxAmount"] as? String {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxAmountLocal"] as? String {
                        self.pretaxAmountLocal = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? String {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["Quantity"] as? String {
                        self.quantity = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["RelatedOrderId"] as? String {
                        self.relatedOrderId = value
                    }
                    if let value = dict["SubOrderId"] as? String {
                        self.subOrderId = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tax"] as? String {
                        self.tax = value
                    }
                    if let value = dict["UsageEndTime"] as? String {
                        self.usageEndTime = value
                    }
                    if let value = dict["UsageStartTime"] as? String {
                        self.usageStartTime = value
                    }
                }
            }
            public var order: [GetOrderDetailResponseBody.Data.OrderList.Order]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.order != nil {
                    var tmp : [Any] = []
                    for k in self.order! {
                        tmp.append(k.toMap())
                    }
                    map["Order"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Order"] as? [Any?] {
                    var tmp : [GetOrderDetailResponseBody.Data.OrderList.Order] = []
                    for v in value {
                        if v != nil {
                            var model = GetOrderDetailResponseBody.Data.OrderList.Order()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.order = tmp
                }
            }
        }
        public var hostName: String?

        public var orderList: GetOrderDetailResponseBody.Data.OrderList?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.orderList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.orderList != nil {
                map["OrderList"] = self.orderList?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["OrderList"] as? [String: Any?] {
                var model = GetOrderDetailResponseBody.Data.OrderList()
                model.fromMap(value)
                self.orderList = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: GetOrderDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetOrderDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetOrderDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOrderDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOrderDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPayAsYouGoPriceRequest : Tea.TeaModel {
    public class ModuleList : Tea.TeaModel {
        public var config: String?

        public var moduleCode: String?

        public var priceType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.moduleCode != nil {
                map["ModuleCode"] = self.moduleCode!
            }
            if self.priceType != nil {
                map["PriceType"] = self.priceType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Config"] as? String {
                self.config = value
            }
            if let value = dict["ModuleCode"] as? String {
                self.moduleCode = value
            }
            if let value = dict["PriceType"] as? String {
                self.priceType = value
            }
        }
    }
    public var moduleList: [GetPayAsYouGoPriceRequest.ModuleList]?

    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var region: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.moduleList != nil {
            var tmp : [Any] = []
            for k in self.moduleList! {
                tmp.append(k.toMap())
            }
            map["ModuleList"] = tmp
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModuleList"] as? [Any?] {
            var tmp : [GetPayAsYouGoPriceRequest.ModuleList] = []
            for v in value {
                if v != nil {
                    var model = GetPayAsYouGoPriceRequest.ModuleList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.moduleList = tmp
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class GetPayAsYouGoPriceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ModuleDetails : Tea.TeaModel {
            public class ModuleDetail : Tea.TeaModel {
                public var costAfterDiscount: Double?

                public var invoiceDiscount: Double?

                public var moduleCode: String?

                public var originalCost: Double?

                public var unitPrice: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.costAfterDiscount != nil {
                        map["CostAfterDiscount"] = self.costAfterDiscount!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.moduleCode != nil {
                        map["ModuleCode"] = self.moduleCode!
                    }
                    if self.originalCost != nil {
                        map["OriginalCost"] = self.originalCost!
                    }
                    if self.unitPrice != nil {
                        map["UnitPrice"] = self.unitPrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CostAfterDiscount"] as? Double {
                        self.costAfterDiscount = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["ModuleCode"] as? String {
                        self.moduleCode = value
                    }
                    if let value = dict["OriginalCost"] as? Double {
                        self.originalCost = value
                    }
                    if let value = dict["UnitPrice"] as? Double {
                        self.unitPrice = value
                    }
                }
            }
            public var moduleDetail: [GetPayAsYouGoPriceResponseBody.Data.ModuleDetails.ModuleDetail]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.moduleDetail != nil {
                    var tmp : [Any] = []
                    for k in self.moduleDetail! {
                        tmp.append(k.toMap())
                    }
                    map["ModuleDetail"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ModuleDetail"] as? [Any?] {
                    var tmp : [GetPayAsYouGoPriceResponseBody.Data.ModuleDetails.ModuleDetail] = []
                    for v in value {
                        if v != nil {
                            var model = GetPayAsYouGoPriceResponseBody.Data.ModuleDetails.ModuleDetail()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.moduleDetail = tmp
                }
            }
        }
        public class PromotionDetails : Tea.TeaModel {
            public class PromotionDetail : Tea.TeaModel {
                public var promotionDesc: String?

                public var promotionId: Int64?

                public var promotionName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.promotionDesc != nil {
                        map["PromotionDesc"] = self.promotionDesc!
                    }
                    if self.promotionId != nil {
                        map["PromotionId"] = self.promotionId!
                    }
                    if self.promotionName != nil {
                        map["PromotionName"] = self.promotionName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PromotionDesc"] as? String {
                        self.promotionDesc = value
                    }
                    if let value = dict["PromotionId"] as? Int64 {
                        self.promotionId = value
                    }
                    if let value = dict["PromotionName"] as? String {
                        self.promotionName = value
                    }
                }
            }
            public var promotionDetail: [GetPayAsYouGoPriceResponseBody.Data.PromotionDetails.PromotionDetail]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.promotionDetail != nil {
                    var tmp : [Any] = []
                    for k in self.promotionDetail! {
                        tmp.append(k.toMap())
                    }
                    map["PromotionDetail"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PromotionDetail"] as? [Any?] {
                    var tmp : [GetPayAsYouGoPriceResponseBody.Data.PromotionDetails.PromotionDetail] = []
                    for v in value {
                        if v != nil {
                            var model = GetPayAsYouGoPriceResponseBody.Data.PromotionDetails.PromotionDetail()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.promotionDetail = tmp
                }
            }
        }
        public var currency: String?

        public var moduleDetails: GetPayAsYouGoPriceResponseBody.Data.ModuleDetails?

        public var promotionDetails: GetPayAsYouGoPriceResponseBody.Data.PromotionDetails?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.moduleDetails?.validate()
            try self.promotionDetails?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currency != nil {
                map["Currency"] = self.currency!
            }
            if self.moduleDetails != nil {
                map["ModuleDetails"] = self.moduleDetails?.toMap()
            }
            if self.promotionDetails != nil {
                map["PromotionDetails"] = self.promotionDetails?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Currency"] as? String {
                self.currency = value
            }
            if let value = dict["ModuleDetails"] as? [String: Any?] {
                var model = GetPayAsYouGoPriceResponseBody.Data.ModuleDetails()
                model.fromMap(value)
                self.moduleDetails = model
            }
            if let value = dict["PromotionDetails"] as? [String: Any?] {
                var model = GetPayAsYouGoPriceResponseBody.Data.PromotionDetails()
                model.fromMap(value)
                self.promotionDetails = model
            }
        }
    }
    public var code: String?

    public var data: GetPayAsYouGoPriceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPayAsYouGoPriceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPayAsYouGoPriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPayAsYouGoPriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPayAsYouGoPriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetResourcePackagePriceRequest : Tea.TeaModel {
    public var duration: Int32?

    public var effectiveDate: String?

    public var instanceId: String?

    public var orderType: String?

    public var ownerId: Int64?

    public var packageType: String?

    public var pricingCycle: String?

    public var productCode: String?

    public var specification: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.effectiveDate != nil {
            map["EffectiveDate"] = self.effectiveDate!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageType != nil {
            map["PackageType"] = self.packageType!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Duration"] as? Int32 {
            self.duration = value
        }
        if let value = dict["EffectiveDate"] as? String {
            self.effectiveDate = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageType"] as? String {
            self.packageType = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
    }
}

public class GetResourcePackagePriceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Promotions : Tea.TeaModel {
            public class Promotion : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var promotion: [GetResourcePackagePriceResponseBody.Data.Promotions.Promotion]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.promotion != nil {
                    var tmp : [Any] = []
                    for k in self.promotion! {
                        tmp.append(k.toMap())
                    }
                    map["Promotion"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Promotion"] as? [Any?] {
                    var tmp : [GetResourcePackagePriceResponseBody.Data.Promotions.Promotion] = []
                    for v in value {
                        if v != nil {
                            var model = GetResourcePackagePriceResponseBody.Data.Promotions.Promotion()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.promotion = tmp
                }
            }
        }
        public var currency: String?

        public var discountPrice: Double?

        public var originalPrice: Double?

        public var promotions: GetResourcePackagePriceResponseBody.Data.Promotions?

        public var tradePrice: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.promotions?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currency != nil {
                map["Currency"] = self.currency!
            }
            if self.discountPrice != nil {
                map["DiscountPrice"] = self.discountPrice!
            }
            if self.originalPrice != nil {
                map["OriginalPrice"] = self.originalPrice!
            }
            if self.promotions != nil {
                map["Promotions"] = self.promotions?.toMap()
            }
            if self.tradePrice != nil {
                map["TradePrice"] = self.tradePrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Currency"] as? String {
                self.currency = value
            }
            if let value = dict["DiscountPrice"] as? Double {
                self.discountPrice = value
            }
            if let value = dict["OriginalPrice"] as? Double {
                self.originalPrice = value
            }
            if let value = dict["Promotions"] as? [String: Any?] {
                var model = GetResourcePackagePriceResponseBody.Data.Promotions()
                model.fromMap(value)
                self.promotions = model
            }
            if let value = dict["TradePrice"] as? Double {
                self.tradePrice = value
            }
        }
    }
    public var code: String?

    public var data: GetResourcePackagePriceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetResourcePackagePriceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetResourcePackagePriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetResourcePackagePriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetResourcePackagePriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSubscriptionPriceRequest : Tea.TeaModel {
    public class ModuleList : Tea.TeaModel {
        public var config: String?

        public var moduleCode: String?

        public var moduleStatus: Int32?

        public var tag: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.config != nil {
                map["Config"] = self.config!
            }
            if self.moduleCode != nil {
                map["ModuleCode"] = self.moduleCode!
            }
            if self.moduleStatus != nil {
                map["ModuleStatus"] = self.moduleStatus!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Config"] as? String {
                self.config = value
            }
            if let value = dict["ModuleCode"] as? String {
                self.moduleCode = value
            }
            if let value = dict["ModuleStatus"] as? Int32 {
                self.moduleStatus = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
        }
    }
    public var instanceId: String?

    public var moduleList: [GetSubscriptionPriceRequest.ModuleList]?

    public var orderType: String?

    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var quantity: Int32?

    public var region: String?

    public var servicePeriodQuantity: Int32?

    public var servicePeriodUnit: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.moduleList != nil {
            var tmp : [Any] = []
            for k in self.moduleList! {
                tmp.append(k.toMap())
            }
            map["ModuleList"] = tmp
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.quantity != nil {
            map["Quantity"] = self.quantity!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.servicePeriodQuantity != nil {
            map["ServicePeriodQuantity"] = self.servicePeriodQuantity!
        }
        if self.servicePeriodUnit != nil {
            map["ServicePeriodUnit"] = self.servicePeriodUnit!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ModuleList"] as? [Any?] {
            var tmp : [GetSubscriptionPriceRequest.ModuleList] = []
            for v in value {
                if v != nil {
                    var model = GetSubscriptionPriceRequest.ModuleList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.moduleList = tmp
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["Quantity"] as? Int32 {
            self.quantity = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["ServicePeriodQuantity"] as? Int32 {
            self.servicePeriodQuantity = value
        }
        if let value = dict["ServicePeriodUnit"] as? String {
            self.servicePeriodUnit = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class GetSubscriptionPriceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ModuleDetails : Tea.TeaModel {
            public class ModuleDetail : Tea.TeaModel {
                public var costAfterDiscount: Double?

                public var invoiceDiscount: Double?

                public var moduleCode: String?

                public var originalCost: Double?

                public var unitPrice: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.costAfterDiscount != nil {
                        map["CostAfterDiscount"] = self.costAfterDiscount!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.moduleCode != nil {
                        map["ModuleCode"] = self.moduleCode!
                    }
                    if self.originalCost != nil {
                        map["OriginalCost"] = self.originalCost!
                    }
                    if self.unitPrice != nil {
                        map["UnitPrice"] = self.unitPrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CostAfterDiscount"] as? Double {
                        self.costAfterDiscount = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["ModuleCode"] as? String {
                        self.moduleCode = value
                    }
                    if let value = dict["OriginalCost"] as? Double {
                        self.originalCost = value
                    }
                    if let value = dict["UnitPrice"] as? Double {
                        self.unitPrice = value
                    }
                }
            }
            public var moduleDetail: [GetSubscriptionPriceResponseBody.Data.ModuleDetails.ModuleDetail]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.moduleDetail != nil {
                    var tmp : [Any] = []
                    for k in self.moduleDetail! {
                        tmp.append(k.toMap())
                    }
                    map["ModuleDetail"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ModuleDetail"] as? [Any?] {
                    var tmp : [GetSubscriptionPriceResponseBody.Data.ModuleDetails.ModuleDetail] = []
                    for v in value {
                        if v != nil {
                            var model = GetSubscriptionPriceResponseBody.Data.ModuleDetails.ModuleDetail()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.moduleDetail = tmp
                }
            }
        }
        public class PromotionDetails : Tea.TeaModel {
            public class PromotionDetail : Tea.TeaModel {
                public var promotionDesc: String?

                public var promotionId: Int64?

                public var promotionName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.promotionDesc != nil {
                        map["PromotionDesc"] = self.promotionDesc!
                    }
                    if self.promotionId != nil {
                        map["PromotionId"] = self.promotionId!
                    }
                    if self.promotionName != nil {
                        map["PromotionName"] = self.promotionName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PromotionDesc"] as? String {
                        self.promotionDesc = value
                    }
                    if let value = dict["PromotionId"] as? Int64 {
                        self.promotionId = value
                    }
                    if let value = dict["PromotionName"] as? String {
                        self.promotionName = value
                    }
                }
            }
            public var promotionDetail: [GetSubscriptionPriceResponseBody.Data.PromotionDetails.PromotionDetail]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.promotionDetail != nil {
                    var tmp : [Any] = []
                    for k in self.promotionDetail! {
                        tmp.append(k.toMap())
                    }
                    map["PromotionDetail"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PromotionDetail"] as? [Any?] {
                    var tmp : [GetSubscriptionPriceResponseBody.Data.PromotionDetails.PromotionDetail] = []
                    for v in value {
                        if v != nil {
                            var model = GetSubscriptionPriceResponseBody.Data.PromotionDetails.PromotionDetail()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.promotionDetail = tmp
                }
            }
        }
        public var currency: String?

        public var discountPrice: Double?

        public var moduleDetails: GetSubscriptionPriceResponseBody.Data.ModuleDetails?

        public var originalPrice: Double?

        public var promotionDetails: GetSubscriptionPriceResponseBody.Data.PromotionDetails?

        public var quantity: Int32?

        public var tradePrice: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.moduleDetails?.validate()
            try self.promotionDetails?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currency != nil {
                map["Currency"] = self.currency!
            }
            if self.discountPrice != nil {
                map["DiscountPrice"] = self.discountPrice!
            }
            if self.moduleDetails != nil {
                map["ModuleDetails"] = self.moduleDetails?.toMap()
            }
            if self.originalPrice != nil {
                map["OriginalPrice"] = self.originalPrice!
            }
            if self.promotionDetails != nil {
                map["PromotionDetails"] = self.promotionDetails?.toMap()
            }
            if self.quantity != nil {
                map["Quantity"] = self.quantity!
            }
            if self.tradePrice != nil {
                map["TradePrice"] = self.tradePrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Currency"] as? String {
                self.currency = value
            }
            if let value = dict["DiscountPrice"] as? Double {
                self.discountPrice = value
            }
            if let value = dict["ModuleDetails"] as? [String: Any?] {
                var model = GetSubscriptionPriceResponseBody.Data.ModuleDetails()
                model.fromMap(value)
                self.moduleDetails = model
            }
            if let value = dict["OriginalPrice"] as? Double {
                self.originalPrice = value
            }
            if let value = dict["PromotionDetails"] as? [String: Any?] {
                var model = GetSubscriptionPriceResponseBody.Data.PromotionDetails()
                model.fromMap(value)
                self.promotionDetails = model
            }
            if let value = dict["Quantity"] as? Int32 {
                self.quantity = value
            }
            if let value = dict["TradePrice"] as? Double {
                self.tradePrice = value
            }
        }
    }
    public var code: String?

    public var data: GetSubscriptionPriceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSubscriptionPriceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSubscriptionPriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSubscriptionPriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSubscriptionPriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InquiryPriceRefundInstanceRequest : Tea.TeaModel {
    public var clientToken: String?

    public var instanceId: String?

    public var productCode: String?

    public var productType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
    }
}

public class InquiryPriceRefundInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var currency: String?

        public var hostId: String?

        public var instanceId: String?

        public var refundAmount: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currency != nil {
                map["Currency"] = self.currency!
            }
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.refundAmount != nil {
                map["RefundAmount"] = self.refundAmount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Currency"] as? String {
                self.currency = value
            }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["RefundAmount"] as? Double {
                self.refundAmount = value
            }
        }
    }
    public var code: String?

    public var data: InquiryPriceRefundInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = InquiryPriceRefundInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InquiryPriceRefundInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InquiryPriceRefundInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InquiryPriceRefundInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyAccountRelationRequest : Tea.TeaModel {
    public var childNick: String?

    public var childUserId: Int64?

    public var parentUserId: Int64?

    public var permissionCodes: [String]?

    public var relationId: Int64?

    public var relationOperation: String?

    public var relationType: String?

    public var requestId: String?

    public var roleCodes: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.childNick != nil {
            map["ChildNick"] = self.childNick!
        }
        if self.childUserId != nil {
            map["ChildUserId"] = self.childUserId!
        }
        if self.parentUserId != nil {
            map["ParentUserId"] = self.parentUserId!
        }
        if self.permissionCodes != nil {
            map["PermissionCodes"] = self.permissionCodes!
        }
        if self.relationId != nil {
            map["RelationId"] = self.relationId!
        }
        if self.relationOperation != nil {
            map["RelationOperation"] = self.relationOperation!
        }
        if self.relationType != nil {
            map["RelationType"] = self.relationType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.roleCodes != nil {
            map["RoleCodes"] = self.roleCodes!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChildNick"] as? String {
            self.childNick = value
        }
        if let value = dict["ChildUserId"] as? Int64 {
            self.childUserId = value
        }
        if let value = dict["ParentUserId"] as? Int64 {
            self.parentUserId = value
        }
        if let value = dict["PermissionCodes"] as? [String] {
            self.permissionCodes = value
        }
        if let value = dict["RelationId"] as? Int64 {
            self.relationId = value
        }
        if let value = dict["RelationOperation"] as? String {
            self.relationOperation = value
        }
        if let value = dict["RelationType"] as? String {
            self.relationType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RoleCodes"] as? [String] {
            self.roleCodes = value
        }
    }
}

public class ModifyAccountRelationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
        }
    }
    public var code: String?

    public var data: ModifyAccountRelationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ModifyAccountRelationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyAccountRelationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAccountRelationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyAccountRelationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCostUnitRequest : Tea.TeaModel {
    public class UnitEntityList : Tea.TeaModel {
        public var newUnitName: String?

        public var ownerUid: Int64?

        public var unitId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.newUnitName != nil {
                map["NewUnitName"] = self.newUnitName!
            }
            if self.ownerUid != nil {
                map["OwnerUid"] = self.ownerUid!
            }
            if self.unitId != nil {
                map["UnitId"] = self.unitId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NewUnitName"] as? String {
                self.newUnitName = value
            }
            if let value = dict["OwnerUid"] as? Int64 {
                self.ownerUid = value
            }
            if let value = dict["UnitId"] as? Int64 {
                self.unitId = value
            }
        }
    }
    public var unitEntityList: [ModifyCostUnitRequest.UnitEntityList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.unitEntityList != nil {
            var tmp : [Any] = []
            for k in self.unitEntityList! {
                tmp.append(k.toMap())
            }
            map["UnitEntityList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UnitEntityList"] as? [Any?] {
            var tmp : [ModifyCostUnitRequest.UnitEntityList] = []
            for v in value {
                if v != nil {
                    var model = ModifyCostUnitRequest.UnitEntityList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.unitEntityList = tmp
        }
    }
}

public class ModifyCostUnitResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var isSuccess: Bool?

        public var ownerUid: Int64?

        public var unitId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isSuccess != nil {
                map["IsSuccess"] = self.isSuccess!
            }
            if self.ownerUid != nil {
                map["OwnerUid"] = self.ownerUid!
            }
            if self.unitId != nil {
                map["UnitId"] = self.unitId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsSuccess"] as? Bool {
                self.isSuccess = value
            }
            if let value = dict["OwnerUid"] as? Int64 {
                self.ownerUid = value
            }
            if let value = dict["UnitId"] as? Int64 {
                self.unitId = value
            }
        }
    }
    public var code: String?

    public var data: [ModifyCostUnitResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ModifyCostUnitResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ModifyCostUnitResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyCostUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCostUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCostUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyInstanceRequest : Tea.TeaModel {
    public class Parameter : Tea.TeaModel {
        public var code: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var clientToken: String?

    public var instanceId: String?

    public var modifyType: String?

    public var ownerId: Int64?

    public var parameter: [ModifyInstanceRequest.Parameter]?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.modifyType != nil {
            map["ModifyType"] = self.modifyType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.parameter != nil {
            var tmp : [Any] = []
            for k in self.parameter! {
                tmp.append(k.toMap())
            }
            map["Parameter"] = tmp
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ModifyType"] as? String {
            self.modifyType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Parameter"] as? [Any?] {
            var tmp : [ModifyInstanceRequest.Parameter] = []
            for v in value {
                if v != nil {
                    var model = ModifyInstanceRequest.Parameter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.parameter = tmp
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class ModifyInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public var orderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["OrderId"] as? String {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: ModifyInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ModifyInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PayOrderRequest : Tea.TeaModel {
    public class EcIdAccountIds : Tea.TeaModel {
        public var accountIds: [Int64]?

        public var ecId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountIds != nil {
                map["AccountIds"] = self.accountIds!
            }
            if self.ecId != nil {
                map["EcId"] = self.ecId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountIds"] as? [Int64] {
                self.accountIds = value
            }
            if let value = dict["EcId"] as? String {
                self.ecId = value
            }
        }
    }
    public var buyerId: Int64?

    public var ecIdAccountIds: [PayOrderRequest.EcIdAccountIds]?

    public var nbid: String?

    public var orderId: Int64?

    public var paySubmitUid: Int64?

    public var payerId: Int64?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.buyerId != nil {
            map["BuyerId"] = self.buyerId!
        }
        if self.ecIdAccountIds != nil {
            var tmp : [Any] = []
            for k in self.ecIdAccountIds! {
                tmp.append(k.toMap())
            }
            map["EcIdAccountIds"] = tmp
        }
        if self.nbid != nil {
            map["Nbid"] = self.nbid!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.paySubmitUid != nil {
            map["PaySubmitUid"] = self.paySubmitUid!
        }
        if self.payerId != nil {
            map["PayerId"] = self.payerId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BuyerId"] as? Int64 {
            self.buyerId = value
        }
        if let value = dict["EcIdAccountIds"] as? [Any?] {
            var tmp : [PayOrderRequest.EcIdAccountIds] = []
            for v in value {
                if v != nil {
                    var model = PayOrderRequest.EcIdAccountIds()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ecIdAccountIds = tmp
        }
        if let value = dict["Nbid"] as? String {
            self.nbid = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["PaySubmitUid"] as? Int64 {
            self.paySubmitUid = value
        }
        if let value = dict["PayerId"] as? Int64 {
            self.payerId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class PayOrderResponseBody : Tea.TeaModel {
    public var metadata: Any?

    public var orderId: Int64?

    public var payStatus: Int64?

    public var payerId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.metadata != nil {
            map["Metadata"] = self.metadata!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.payStatus != nil {
            map["PayStatus"] = self.payStatus!
        }
        if self.payerId != nil {
            map["PayerId"] = self.payerId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Metadata"] as? Any {
            self.metadata = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["PayStatus"] as? Int64 {
            self.payStatus = value
        }
        if let value = dict["PayerId"] as? Int64 {
            self.payerId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PayOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PayOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PayOrderResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAccountBalanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var availableAmount: String?

        public var availableCashAmount: String?

        public var creditAmount: String?

        public var currency: String?

        public var mybankCreditAmount: String?

        public var quotaLimit: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.availableAmount != nil {
                map["AvailableAmount"] = self.availableAmount!
            }
            if self.availableCashAmount != nil {
                map["AvailableCashAmount"] = self.availableCashAmount!
            }
            if self.creditAmount != nil {
                map["CreditAmount"] = self.creditAmount!
            }
            if self.currency != nil {
                map["Currency"] = self.currency!
            }
            if self.mybankCreditAmount != nil {
                map["MybankCreditAmount"] = self.mybankCreditAmount!
            }
            if self.quotaLimit != nil {
                map["QuotaLimit"] = self.quotaLimit!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AvailableAmount"] as? String {
                self.availableAmount = value
            }
            if let value = dict["AvailableCashAmount"] as? String {
                self.availableCashAmount = value
            }
            if let value = dict["CreditAmount"] as? String {
                self.creditAmount = value
            }
            if let value = dict["Currency"] as? String {
                self.currency = value
            }
            if let value = dict["MybankCreditAmount"] as? String {
                self.mybankCreditAmount = value
            }
            if let value = dict["QuotaLimit"] as? String {
                self.quotaLimit = value
            }
        }
    }
    public var code: String?

    public var data: QueryAccountBalanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAccountBalanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAccountBalanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAccountBalanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAccountBalanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAccountBillRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var billingDate: String?

    public var granularity: String?

    public var isGroupByProduct: Bool?

    public var ownerID: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.billingDate != nil {
            map["BillingDate"] = self.billingDate!
        }
        if self.granularity != nil {
            map["Granularity"] = self.granularity!
        }
        if self.isGroupByProduct != nil {
            map["IsGroupByProduct"] = self.isGroupByProduct!
        }
        if self.ownerID != nil {
            map["OwnerID"] = self.ownerID!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["BillingDate"] as? String {
            self.billingDate = value
        }
        if let value = dict["Granularity"] as? String {
            self.granularity = value
        }
        if let value = dict["IsGroupByProduct"] as? Bool {
            self.isGroupByProduct = value
        }
        if let value = dict["OwnerID"] as? Int64 {
            self.ownerID = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
    }
}

public class QueryAccountBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var adjustAmount: Double?

                public var billAccountID: String?

                public var billAccountName: String?

                public var billingDate: String?

                public var bizType: String?

                public var cashAmount: Double?

                public var costUnit: String?

                public var currency: String?

                public var deductedByCashCoupons: Double?

                public var deductedByCoupons: Double?

                public var deductedByPrepaidCard: Double?

                public var invoiceDiscount: Double?

                public var outstandingAmount: Double?

                public var ownerID: String?

                public var ownerName: String?

                public var paymentAmount: Double?

                public var pipCode: String?

                public var pretaxAmount: Double?

                public var pretaxGrossAmount: Double?

                public var productCode: String?

                public var productName: String?

                public var subscriptionType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustAmount != nil {
                        map["AdjustAmount"] = self.adjustAmount!
                    }
                    if self.billAccountID != nil {
                        map["BillAccountID"] = self.billAccountID!
                    }
                    if self.billAccountName != nil {
                        map["BillAccountName"] = self.billAccountName!
                    }
                    if self.billingDate != nil {
                        map["BillingDate"] = self.billingDate!
                    }
                    if self.bizType != nil {
                        map["BizType"] = self.bizType!
                    }
                    if self.cashAmount != nil {
                        map["CashAmount"] = self.cashAmount!
                    }
                    if self.costUnit != nil {
                        map["CostUnit"] = self.costUnit!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.outstandingAmount != nil {
                        map["OutstandingAmount"] = self.outstandingAmount!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.ownerName != nil {
                        map["OwnerName"] = self.ownerName!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.pipCode != nil {
                        map["PipCode"] = self.pipCode!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustAmount"] as? Double {
                        self.adjustAmount = value
                    }
                    if let value = dict["BillAccountID"] as? String {
                        self.billAccountID = value
                    }
                    if let value = dict["BillAccountName"] as? String {
                        self.billAccountName = value
                    }
                    if let value = dict["BillingDate"] as? String {
                        self.billingDate = value
                    }
                    if let value = dict["BizType"] as? String {
                        self.bizType = value
                    }
                    if let value = dict["CashAmount"] as? Double {
                        self.cashAmount = value
                    }
                    if let value = dict["CostUnit"] as? String {
                        self.costUnit = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? Double {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? Double {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? Double {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["OutstandingAmount"] as? Double {
                        self.outstandingAmount = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["OwnerName"] as? String {
                        self.ownerName = value
                    }
                    if let value = dict["PaymentAmount"] as? Double {
                        self.paymentAmount = value
                    }
                    if let value = dict["PipCode"] as? String {
                        self.pipCode = value
                    }
                    if let value = dict["PretaxAmount"] as? Double {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? Double {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                }
            }
            public var item: [QueryAccountBillResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QueryAccountBillResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QueryAccountBillResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: QueryAccountBillResponseBody.Data.Items?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QueryAccountBillResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryAccountBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAccountBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAccountBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAccountBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAccountBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAccountTransactionDetailsRequest : Tea.TeaModel {
    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var recordID: String?

    public var transactionChannel: String?

    public var transactionChannelSN: String?

    public var transactionNumber: String?

    public var transactionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.recordID != nil {
            map["RecordID"] = self.recordID!
        }
        if self.transactionChannel != nil {
            map["TransactionChannel"] = self.transactionChannel!
        }
        if self.transactionChannelSN != nil {
            map["TransactionChannelSN"] = self.transactionChannelSN!
        }
        if self.transactionNumber != nil {
            map["TransactionNumber"] = self.transactionNumber!
        }
        if self.transactionType != nil {
            map["TransactionType"] = self.transactionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RecordID"] as? String {
            self.recordID = value
        }
        if let value = dict["TransactionChannel"] as? String {
            self.transactionChannel = value
        }
        if let value = dict["TransactionChannelSN"] as? String {
            self.transactionChannelSN = value
        }
        if let value = dict["TransactionNumber"] as? String {
            self.transactionNumber = value
        }
        if let value = dict["TransactionType"] as? String {
            self.transactionType = value
        }
    }
}

public class QueryAccountTransactionDetailsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AccountTransactionsList : Tea.TeaModel {
            public class AccountTransactionsList : Tea.TeaModel {
                public var amount: String?

                public var balance: String?

                public var billingCycle: String?

                public var fundType: String?

                public var recordID: String?

                public var remarks: String?

                public var transactionAccount: String?

                public var transactionChannel: String?

                public var transactionChannelSN: String?

                public var transactionFlow: String?

                public var transactionNumber: String?

                public var transactionTime: String?

                public var transactionType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.amount != nil {
                        map["Amount"] = self.amount!
                    }
                    if self.balance != nil {
                        map["Balance"] = self.balance!
                    }
                    if self.billingCycle != nil {
                        map["BillingCycle"] = self.billingCycle!
                    }
                    if self.fundType != nil {
                        map["FundType"] = self.fundType!
                    }
                    if self.recordID != nil {
                        map["RecordID"] = self.recordID!
                    }
                    if self.remarks != nil {
                        map["Remarks"] = self.remarks!
                    }
                    if self.transactionAccount != nil {
                        map["TransactionAccount"] = self.transactionAccount!
                    }
                    if self.transactionChannel != nil {
                        map["TransactionChannel"] = self.transactionChannel!
                    }
                    if self.transactionChannelSN != nil {
                        map["TransactionChannelSN"] = self.transactionChannelSN!
                    }
                    if self.transactionFlow != nil {
                        map["TransactionFlow"] = self.transactionFlow!
                    }
                    if self.transactionNumber != nil {
                        map["TransactionNumber"] = self.transactionNumber!
                    }
                    if self.transactionTime != nil {
                        map["TransactionTime"] = self.transactionTime!
                    }
                    if self.transactionType != nil {
                        map["TransactionType"] = self.transactionType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Amount"] as? String {
                        self.amount = value
                    }
                    if let value = dict["Balance"] as? String {
                        self.balance = value
                    }
                    if let value = dict["BillingCycle"] as? String {
                        self.billingCycle = value
                    }
                    if let value = dict["FundType"] as? String {
                        self.fundType = value
                    }
                    if let value = dict["RecordID"] as? String {
                        self.recordID = value
                    }
                    if let value = dict["Remarks"] as? String {
                        self.remarks = value
                    }
                    if let value = dict["TransactionAccount"] as? String {
                        self.transactionAccount = value
                    }
                    if let value = dict["TransactionChannel"] as? String {
                        self.transactionChannel = value
                    }
                    if let value = dict["TransactionChannelSN"] as? String {
                        self.transactionChannelSN = value
                    }
                    if let value = dict["TransactionFlow"] as? String {
                        self.transactionFlow = value
                    }
                    if let value = dict["TransactionNumber"] as? String {
                        self.transactionNumber = value
                    }
                    if let value = dict["TransactionTime"] as? String {
                        self.transactionTime = value
                    }
                    if let value = dict["TransactionType"] as? String {
                        self.transactionType = value
                    }
                }
            }
            public var accountTransactionsList: [QueryAccountTransactionDetailsResponseBody.Data.AccountTransactionsList.AccountTransactionsList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountTransactionsList != nil {
                    var tmp : [Any] = []
                    for k in self.accountTransactionsList! {
                        tmp.append(k.toMap())
                    }
                    map["AccountTransactionsList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountTransactionsList"] as? [Any?] {
                    var tmp : [QueryAccountTransactionDetailsResponseBody.Data.AccountTransactionsList.AccountTransactionsList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryAccountTransactionDetailsResponseBody.Data.AccountTransactionsList.AccountTransactionsList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.accountTransactionsList = tmp
                }
            }
        }
        public var accountName: String?

        public var accountTransactionsList: QueryAccountTransactionDetailsResponseBody.Data.AccountTransactionsList?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.accountTransactionsList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.accountTransactionsList != nil {
                map["AccountTransactionsList"] = self.accountTransactionsList?.toMap()
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["AccountTransactionsList"] as? [String: Any?] {
                var model = QueryAccountTransactionDetailsResponseBody.Data.AccountTransactionsList()
                model.fromMap(value)
                self.accountTransactionsList = model
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryAccountTransactionDetailsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAccountTransactionDetailsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAccountTransactionDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAccountTransactionDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAccountTransactionDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAccountTransactionsRequest : Tea.TeaModel {
    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var recordID: String?

    public var transactionChannel: String?

    public var transactionChannelSN: String?

    public var transactionFlow: String?

    public var transactionNumber: String?

    public var transactionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.recordID != nil {
            map["RecordID"] = self.recordID!
        }
        if self.transactionChannel != nil {
            map["TransactionChannel"] = self.transactionChannel!
        }
        if self.transactionChannelSN != nil {
            map["TransactionChannelSN"] = self.transactionChannelSN!
        }
        if self.transactionFlow != nil {
            map["TransactionFlow"] = self.transactionFlow!
        }
        if self.transactionNumber != nil {
            map["TransactionNumber"] = self.transactionNumber!
        }
        if self.transactionType != nil {
            map["TransactionType"] = self.transactionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RecordID"] as? String {
            self.recordID = value
        }
        if let value = dict["TransactionChannel"] as? String {
            self.transactionChannel = value
        }
        if let value = dict["TransactionChannelSN"] as? String {
            self.transactionChannelSN = value
        }
        if let value = dict["TransactionFlow"] as? String {
            self.transactionFlow = value
        }
        if let value = dict["TransactionNumber"] as? String {
            self.transactionNumber = value
        }
        if let value = dict["TransactionType"] as? String {
            self.transactionType = value
        }
    }
}

public class QueryAccountTransactionsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class AccountTransactionsList : Tea.TeaModel {
            public class AccountTransactionsList : Tea.TeaModel {
                public var amount: String?

                public var balance: String?

                public var billingCycle: String?

                public var fundType: String?

                public var recordID: String?

                public var remarks: String?

                public var transactionAccount: String?

                public var transactionChannel: String?

                public var transactionChannelSN: String?

                public var transactionFlow: String?

                public var transactionNumber: String?

                public var transactionTime: String?

                public var transactionType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.amount != nil {
                        map["Amount"] = self.amount!
                    }
                    if self.balance != nil {
                        map["Balance"] = self.balance!
                    }
                    if self.billingCycle != nil {
                        map["BillingCycle"] = self.billingCycle!
                    }
                    if self.fundType != nil {
                        map["FundType"] = self.fundType!
                    }
                    if self.recordID != nil {
                        map["RecordID"] = self.recordID!
                    }
                    if self.remarks != nil {
                        map["Remarks"] = self.remarks!
                    }
                    if self.transactionAccount != nil {
                        map["TransactionAccount"] = self.transactionAccount!
                    }
                    if self.transactionChannel != nil {
                        map["TransactionChannel"] = self.transactionChannel!
                    }
                    if self.transactionChannelSN != nil {
                        map["TransactionChannelSN"] = self.transactionChannelSN!
                    }
                    if self.transactionFlow != nil {
                        map["TransactionFlow"] = self.transactionFlow!
                    }
                    if self.transactionNumber != nil {
                        map["TransactionNumber"] = self.transactionNumber!
                    }
                    if self.transactionTime != nil {
                        map["TransactionTime"] = self.transactionTime!
                    }
                    if self.transactionType != nil {
                        map["TransactionType"] = self.transactionType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Amount"] as? String {
                        self.amount = value
                    }
                    if let value = dict["Balance"] as? String {
                        self.balance = value
                    }
                    if let value = dict["BillingCycle"] as? String {
                        self.billingCycle = value
                    }
                    if let value = dict["FundType"] as? String {
                        self.fundType = value
                    }
                    if let value = dict["RecordID"] as? String {
                        self.recordID = value
                    }
                    if let value = dict["Remarks"] as? String {
                        self.remarks = value
                    }
                    if let value = dict["TransactionAccount"] as? String {
                        self.transactionAccount = value
                    }
                    if let value = dict["TransactionChannel"] as? String {
                        self.transactionChannel = value
                    }
                    if let value = dict["TransactionChannelSN"] as? String {
                        self.transactionChannelSN = value
                    }
                    if let value = dict["TransactionFlow"] as? String {
                        self.transactionFlow = value
                    }
                    if let value = dict["TransactionNumber"] as? String {
                        self.transactionNumber = value
                    }
                    if let value = dict["TransactionTime"] as? String {
                        self.transactionTime = value
                    }
                    if let value = dict["TransactionType"] as? String {
                        self.transactionType = value
                    }
                }
            }
            public var accountTransactionsList: [QueryAccountTransactionsResponseBody.Data.AccountTransactionsList.AccountTransactionsList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountTransactionsList != nil {
                    var tmp : [Any] = []
                    for k in self.accountTransactionsList! {
                        tmp.append(k.toMap())
                    }
                    map["AccountTransactionsList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountTransactionsList"] as? [Any?] {
                    var tmp : [QueryAccountTransactionsResponseBody.Data.AccountTransactionsList.AccountTransactionsList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryAccountTransactionsResponseBody.Data.AccountTransactionsList.AccountTransactionsList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.accountTransactionsList = tmp
                }
            }
        }
        public var accountName: String?

        public var accountTransactionsList: QueryAccountTransactionsResponseBody.Data.AccountTransactionsList?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.accountTransactionsList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.accountTransactionsList != nil {
                map["AccountTransactionsList"] = self.accountTransactionsList?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["AccountTransactionsList"] as? [String: Any?] {
                var model = QueryAccountTransactionsResponseBody.Data.AccountTransactionsList()
                model.fromMap(value)
                self.accountTransactionsList = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryAccountTransactionsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAccountTransactionsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAccountTransactionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAccountTransactionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAccountTransactionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAvailableInstancesRequest : Tea.TeaModel {
    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var endTimeEnd: String?

    public var endTimeStart: String?

    public var instanceIDs: String?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public var productType: String?

    public var region: String?

    public var renewStatus: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.endTimeEnd != nil {
            map["EndTimeEnd"] = self.endTimeEnd!
        }
        if self.endTimeStart != nil {
            map["EndTimeStart"] = self.endTimeStart!
        }
        if self.instanceIDs != nil {
            map["InstanceIDs"] = self.instanceIDs!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.renewStatus != nil {
            map["RenewStatus"] = self.renewStatus!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["EndTimeEnd"] as? String {
            self.endTimeEnd = value
        }
        if let value = dict["EndTimeStart"] as? String {
            self.endTimeStart = value
        }
        if let value = dict["InstanceIDs"] as? String {
            self.instanceIDs = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RenewStatus"] as? String {
            self.renewStatus = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class QueryAvailableInstancesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class InstanceList : Tea.TeaModel {
            public var createTime: String?

            public var endTime: String?

            public var expectedReleaseTime: String?

            public var instanceID: String?

            public var ownerId: Int64?

            public var productCode: String?

            public var productType: String?

            public var region: String?

            public var releaseTime: String?

            public var renewStatus: String?

            public var renewalDuration: Int32?

            public var renewalDurationUnit: String?

            public var seller: String?

            public var sellerId: Int64?

            public var status: String?

            public var stopTime: String?

            public var subStatus: String?

            public var subscriptionType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.expectedReleaseTime != nil {
                    map["ExpectedReleaseTime"] = self.expectedReleaseTime!
                }
                if self.instanceID != nil {
                    map["InstanceID"] = self.instanceID!
                }
                if self.ownerId != nil {
                    map["OwnerId"] = self.ownerId!
                }
                if self.productCode != nil {
                    map["ProductCode"] = self.productCode!
                }
                if self.productType != nil {
                    map["ProductType"] = self.productType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.releaseTime != nil {
                    map["ReleaseTime"] = self.releaseTime!
                }
                if self.renewStatus != nil {
                    map["RenewStatus"] = self.renewStatus!
                }
                if self.renewalDuration != nil {
                    map["RenewalDuration"] = self.renewalDuration!
                }
                if self.renewalDurationUnit != nil {
                    map["RenewalDurationUnit"] = self.renewalDurationUnit!
                }
                if self.seller != nil {
                    map["Seller"] = self.seller!
                }
                if self.sellerId != nil {
                    map["SellerId"] = self.sellerId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.stopTime != nil {
                    map["StopTime"] = self.stopTime!
                }
                if self.subStatus != nil {
                    map["SubStatus"] = self.subStatus!
                }
                if self.subscriptionType != nil {
                    map["SubscriptionType"] = self.subscriptionType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["ExpectedReleaseTime"] as? String {
                    self.expectedReleaseTime = value
                }
                if let value = dict["InstanceID"] as? String {
                    self.instanceID = value
                }
                if let value = dict["OwnerId"] as? Int64 {
                    self.ownerId = value
                }
                if let value = dict["ProductCode"] as? String {
                    self.productCode = value
                }
                if let value = dict["ProductType"] as? String {
                    self.productType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ReleaseTime"] as? String {
                    self.releaseTime = value
                }
                if let value = dict["RenewStatus"] as? String {
                    self.renewStatus = value
                }
                if let value = dict["RenewalDuration"] as? Int32 {
                    self.renewalDuration = value
                }
                if let value = dict["RenewalDurationUnit"] as? String {
                    self.renewalDurationUnit = value
                }
                if let value = dict["Seller"] as? String {
                    self.seller = value
                }
                if let value = dict["SellerId"] as? Int64 {
                    self.sellerId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StopTime"] as? String {
                    self.stopTime = value
                }
                if let value = dict["SubStatus"] as? String {
                    self.subStatus = value
                }
                if let value = dict["SubscriptionType"] as? String {
                    self.subscriptionType = value
                }
            }
        }
        public var instanceList: [QueryAvailableInstancesResponseBody.Data.InstanceList]?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceList != nil {
                var tmp : [Any] = []
                for k in self.instanceList! {
                    tmp.append(k.toMap())
                }
                map["InstanceList"] = tmp
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceList"] as? [Any?] {
                var tmp : [QueryAvailableInstancesResponseBody.Data.InstanceList] = []
                for v in value {
                    if v != nil {
                        var model = QueryAvailableInstancesResponseBody.Data.InstanceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.instanceList = tmp
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryAvailableInstancesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAvailableInstancesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAvailableInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAvailableInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAvailableInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryBillRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var isDisplayLocalCurrency: Bool?

    public var isHideZeroCharge: Bool?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.isDisplayLocalCurrency != nil {
            map["IsDisplayLocalCurrency"] = self.isDisplayLocalCurrency!
        }
        if self.isHideZeroCharge != nil {
            map["IsHideZeroCharge"] = self.isHideZeroCharge!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["IsDisplayLocalCurrency"] as? Bool {
            self.isDisplayLocalCurrency = value
        }
        if let value = dict["IsHideZeroCharge"] as? Bool {
            self.isHideZeroCharge = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class QueryBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var adjustAmount: Double?

                public var afterTaxAmount: Double?

                public var cashAmount: Double?

                public var commodityCode: String?

                public var currency: String?

                public var deductedByCashCoupons: Double?

                public var deductedByCoupons: Double?

                public var deductedByPrepaidCard: Double?

                public var invoiceDiscount: Double?

                public var item: String?

                public var outstandingAmount: Double?

                public var ownerID: String?

                public var paymentAmount: Double?

                public var paymentCurrency: String?

                public var paymentTime: String?

                public var paymentTransactionID: String?

                public var pipCode: String?

                public var pretaxAmount: Double?

                public var pretaxAmountLocal: Double?

                public var pretaxGrossAmount: Double?

                public var productCode: String?

                public var productDetail: String?

                public var productName: String?

                public var productType: String?

                public var recordID: String?

                public var roundDownDiscount: String?

                public var status: String?

                public var subOrderId: String?

                public var subscriptionType: String?

                public var tax: Double?

                public var usageEndTime: String?

                public var usageStartTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustAmount != nil {
                        map["AdjustAmount"] = self.adjustAmount!
                    }
                    if self.afterTaxAmount != nil {
                        map["AfterTaxAmount"] = self.afterTaxAmount!
                    }
                    if self.cashAmount != nil {
                        map["CashAmount"] = self.cashAmount!
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.item != nil {
                        map["Item"] = self.item!
                    }
                    if self.outstandingAmount != nil {
                        map["OutstandingAmount"] = self.outstandingAmount!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.paymentCurrency != nil {
                        map["PaymentCurrency"] = self.paymentCurrency!
                    }
                    if self.paymentTime != nil {
                        map["PaymentTime"] = self.paymentTime!
                    }
                    if self.paymentTransactionID != nil {
                        map["PaymentTransactionID"] = self.paymentTransactionID!
                    }
                    if self.pipCode != nil {
                        map["PipCode"] = self.pipCode!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxAmountLocal != nil {
                        map["PretaxAmountLocal"] = self.pretaxAmountLocal!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productDetail != nil {
                        map["ProductDetail"] = self.productDetail!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.recordID != nil {
                        map["RecordID"] = self.recordID!
                    }
                    if self.roundDownDiscount != nil {
                        map["RoundDownDiscount"] = self.roundDownDiscount!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.subOrderId != nil {
                        map["SubOrderId"] = self.subOrderId!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tax != nil {
                        map["Tax"] = self.tax!
                    }
                    if self.usageEndTime != nil {
                        map["UsageEndTime"] = self.usageEndTime!
                    }
                    if self.usageStartTime != nil {
                        map["UsageStartTime"] = self.usageStartTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustAmount"] as? Double {
                        self.adjustAmount = value
                    }
                    if let value = dict["AfterTaxAmount"] as? Double {
                        self.afterTaxAmount = value
                    }
                    if let value = dict["CashAmount"] as? Double {
                        self.cashAmount = value
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? Double {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? Double {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? Double {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["Item"] as? String {
                        self.item = value
                    }
                    if let value = dict["OutstandingAmount"] as? Double {
                        self.outstandingAmount = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["PaymentAmount"] as? Double {
                        self.paymentAmount = value
                    }
                    if let value = dict["PaymentCurrency"] as? String {
                        self.paymentCurrency = value
                    }
                    if let value = dict["PaymentTime"] as? String {
                        self.paymentTime = value
                    }
                    if let value = dict["PaymentTransactionID"] as? String {
                        self.paymentTransactionID = value
                    }
                    if let value = dict["PipCode"] as? String {
                        self.pipCode = value
                    }
                    if let value = dict["PretaxAmount"] as? Double {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxAmountLocal"] as? Double {
                        self.pretaxAmountLocal = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? Double {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductDetail"] as? String {
                        self.productDetail = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["RecordID"] as? String {
                        self.recordID = value
                    }
                    if let value = dict["RoundDownDiscount"] as? String {
                        self.roundDownDiscount = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["SubOrderId"] as? String {
                        self.subOrderId = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tax"] as? Double {
                        self.tax = value
                    }
                    if let value = dict["UsageEndTime"] as? String {
                        self.usageEndTime = value
                    }
                    if let value = dict["UsageStartTime"] as? String {
                        self.usageStartTime = value
                    }
                }
            }
            public var item: [QueryBillResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QueryBillResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QueryBillResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: QueryBillResponseBody.Data.Items?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QueryBillResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryBillOverviewRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class QueryBillOverviewResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var adjustAmount: Double?

                public var afterTaxAmount: Double?

                public var billAccountID: String?

                public var billAccountName: String?

                public var bizType: String?

                public var cashAmount: Double?

                public var commodityCode: String?

                public var currency: String?

                public var deductedByCashCoupons: Double?

                public var deductedByCoupons: Double?

                public var deductedByPrepaidCard: Double?

                public var invoiceDiscount: Double?

                public var item: String?

                public var outstandingAmount: Double?

                public var ownerID: String?

                public var paymentAmount: Double?

                public var paymentCurrency: String?

                public var pipCode: String?

                public var pretaxAmount: Double?

                public var pretaxAmountLocal: Double?

                public var pretaxGrossAmount: Double?

                public var productCode: String?

                public var productDetail: String?

                public var productName: String?

                public var productType: String?

                public var roundDownDiscount: String?

                public var subscriptionType: String?

                public var tax: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustAmount != nil {
                        map["AdjustAmount"] = self.adjustAmount!
                    }
                    if self.afterTaxAmount != nil {
                        map["AfterTaxAmount"] = self.afterTaxAmount!
                    }
                    if self.billAccountID != nil {
                        map["BillAccountID"] = self.billAccountID!
                    }
                    if self.billAccountName != nil {
                        map["BillAccountName"] = self.billAccountName!
                    }
                    if self.bizType != nil {
                        map["BizType"] = self.bizType!
                    }
                    if self.cashAmount != nil {
                        map["CashAmount"] = self.cashAmount!
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.item != nil {
                        map["Item"] = self.item!
                    }
                    if self.outstandingAmount != nil {
                        map["OutstandingAmount"] = self.outstandingAmount!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.paymentCurrency != nil {
                        map["PaymentCurrency"] = self.paymentCurrency!
                    }
                    if self.pipCode != nil {
                        map["PipCode"] = self.pipCode!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxAmountLocal != nil {
                        map["PretaxAmountLocal"] = self.pretaxAmountLocal!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productDetail != nil {
                        map["ProductDetail"] = self.productDetail!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.roundDownDiscount != nil {
                        map["RoundDownDiscount"] = self.roundDownDiscount!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tax != nil {
                        map["Tax"] = self.tax!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustAmount"] as? Double {
                        self.adjustAmount = value
                    }
                    if let value = dict["AfterTaxAmount"] as? Double {
                        self.afterTaxAmount = value
                    }
                    if let value = dict["BillAccountID"] as? String {
                        self.billAccountID = value
                    }
                    if let value = dict["BillAccountName"] as? String {
                        self.billAccountName = value
                    }
                    if let value = dict["BizType"] as? String {
                        self.bizType = value
                    }
                    if let value = dict["CashAmount"] as? Double {
                        self.cashAmount = value
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? Double {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? Double {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? Double {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["Item"] as? String {
                        self.item = value
                    }
                    if let value = dict["OutstandingAmount"] as? Double {
                        self.outstandingAmount = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["PaymentAmount"] as? Double {
                        self.paymentAmount = value
                    }
                    if let value = dict["PaymentCurrency"] as? String {
                        self.paymentCurrency = value
                    }
                    if let value = dict["PipCode"] as? String {
                        self.pipCode = value
                    }
                    if let value = dict["PretaxAmount"] as? Double {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxAmountLocal"] as? Double {
                        self.pretaxAmountLocal = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? Double {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductDetail"] as? String {
                        self.productDetail = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["RoundDownDiscount"] as? String {
                        self.roundDownDiscount = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tax"] as? Double {
                        self.tax = value
                    }
                }
            }
            public var item: [QueryBillOverviewResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QueryBillOverviewResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QueryBillOverviewResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: QueryBillOverviewResponseBody.Data.Items?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QueryBillOverviewResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
        }
    }
    public var code: String?

    public var data: QueryBillOverviewResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryBillOverviewResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryBillOverviewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryBillOverviewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryBillOverviewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryBillToOSSSubscriptionResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var bucketOwnerId: Int64?

                public var bucketPath: String?

                public var rowLimitPerFile: Int32?

                public var subscribeBucket: String?

                public var subscribeLanguage: String?

                public var subscribeTime: String?

                public var subscribeType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bucketOwnerId != nil {
                        map["BucketOwnerId"] = self.bucketOwnerId!
                    }
                    if self.bucketPath != nil {
                        map["BucketPath"] = self.bucketPath!
                    }
                    if self.rowLimitPerFile != nil {
                        map["RowLimitPerFile"] = self.rowLimitPerFile!
                    }
                    if self.subscribeBucket != nil {
                        map["SubscribeBucket"] = self.subscribeBucket!
                    }
                    if self.subscribeLanguage != nil {
                        map["SubscribeLanguage"] = self.subscribeLanguage!
                    }
                    if self.subscribeTime != nil {
                        map["SubscribeTime"] = self.subscribeTime!
                    }
                    if self.subscribeType != nil {
                        map["SubscribeType"] = self.subscribeType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BucketOwnerId"] as? Int64 {
                        self.bucketOwnerId = value
                    }
                    if let value = dict["BucketPath"] as? String {
                        self.bucketPath = value
                    }
                    if let value = dict["RowLimitPerFile"] as? Int32 {
                        self.rowLimitPerFile = value
                    }
                    if let value = dict["SubscribeBucket"] as? String {
                        self.subscribeBucket = value
                    }
                    if let value = dict["SubscribeLanguage"] as? String {
                        self.subscribeLanguage = value
                    }
                    if let value = dict["SubscribeTime"] as? String {
                        self.subscribeTime = value
                    }
                    if let value = dict["SubscribeType"] as? String {
                        self.subscribeType = value
                    }
                }
            }
            public var item: [QueryBillToOSSSubscriptionResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QueryBillToOSSSubscriptionResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QueryBillToOSSSubscriptionResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var items: QueryBillToOSSSubscriptionResponseBody.Data.Items?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QueryBillToOSSSubscriptionResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
        }
    }
    public var code: String?

    public var data: QueryBillToOSSSubscriptionResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryBillToOSSSubscriptionResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryBillToOSSSubscriptionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryBillToOSSSubscriptionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryBillToOSSSubscriptionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCashCouponsRequest : Tea.TeaModel {
    public var effectiveOrNot: Bool?

    public var expiryTimeEnd: String?

    public var expiryTimeStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.effectiveOrNot != nil {
            map["EffectiveOrNot"] = self.effectiveOrNot!
        }
        if self.expiryTimeEnd != nil {
            map["ExpiryTimeEnd"] = self.expiryTimeEnd!
        }
        if self.expiryTimeStart != nil {
            map["ExpiryTimeStart"] = self.expiryTimeStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EffectiveOrNot"] as? Bool {
            self.effectiveOrNot = value
        }
        if let value = dict["ExpiryTimeEnd"] as? String {
            self.expiryTimeEnd = value
        }
        if let value = dict["ExpiryTimeStart"] as? String {
            self.expiryTimeStart = value
        }
    }
}

public class QueryCashCouponsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CashCoupon : Tea.TeaModel {
            public var applicableProducts: String?

            public var applicableScenarios: String?

            public var balance: String?

            public var cashCouponId: Int64?

            public var cashCouponNo: String?

            public var description_: String?

            public var effectiveTime: String?

            public var expiryTime: String?

            public var grantedTime: String?

            public var nominalValue: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicableProducts != nil {
                    map["ApplicableProducts"] = self.applicableProducts!
                }
                if self.applicableScenarios != nil {
                    map["ApplicableScenarios"] = self.applicableScenarios!
                }
                if self.balance != nil {
                    map["Balance"] = self.balance!
                }
                if self.cashCouponId != nil {
                    map["CashCouponId"] = self.cashCouponId!
                }
                if self.cashCouponNo != nil {
                    map["CashCouponNo"] = self.cashCouponNo!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.effectiveTime != nil {
                    map["EffectiveTime"] = self.effectiveTime!
                }
                if self.expiryTime != nil {
                    map["ExpiryTime"] = self.expiryTime!
                }
                if self.grantedTime != nil {
                    map["GrantedTime"] = self.grantedTime!
                }
                if self.nominalValue != nil {
                    map["NominalValue"] = self.nominalValue!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicableProducts"] as? String {
                    self.applicableProducts = value
                }
                if let value = dict["ApplicableScenarios"] as? String {
                    self.applicableScenarios = value
                }
                if let value = dict["Balance"] as? String {
                    self.balance = value
                }
                if let value = dict["CashCouponId"] as? Int64 {
                    self.cashCouponId = value
                }
                if let value = dict["CashCouponNo"] as? String {
                    self.cashCouponNo = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EffectiveTime"] as? String {
                    self.effectiveTime = value
                }
                if let value = dict["ExpiryTime"] as? String {
                    self.expiryTime = value
                }
                if let value = dict["GrantedTime"] as? String {
                    self.grantedTime = value
                }
                if let value = dict["NominalValue"] as? String {
                    self.nominalValue = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var cashCoupon: [QueryCashCouponsResponseBody.Data.CashCoupon]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cashCoupon != nil {
                var tmp : [Any] = []
                for k in self.cashCoupon! {
                    tmp.append(k.toMap())
                }
                map["CashCoupon"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CashCoupon"] as? [Any?] {
                var tmp : [QueryCashCouponsResponseBody.Data.CashCoupon] = []
                for v in value {
                    if v != nil {
                        var model = QueryCashCouponsResponseBody.Data.CashCoupon()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.cashCoupon = tmp
            }
        }
    }
    public var code: String?

    public var data: QueryCashCouponsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryCashCouponsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCashCouponsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCashCouponsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCashCouponsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCommodityListRequest : Tea.TeaModel {
    public var lang: String?

    public var productCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
    }
}

public class QueryCommodityListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CommodityList : Tea.TeaModel {
            public var chargeType: String?

            public var commodityCode: String?

            public var commodityName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.chargeType != nil {
                    map["ChargeType"] = self.chargeType!
                }
                if self.commodityCode != nil {
                    map["CommodityCode"] = self.commodityCode!
                }
                if self.commodityName != nil {
                    map["CommodityName"] = self.commodityName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChargeType"] as? String {
                    self.chargeType = value
                }
                if let value = dict["CommodityCode"] as? String {
                    self.commodityCode = value
                }
                if let value = dict["CommodityName"] as? String {
                    self.commodityName = value
                }
            }
        }
        public var commodityList: [QueryCommodityListResponseBody.Data.CommodityList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commodityList != nil {
                var tmp : [Any] = []
                for k in self.commodityList! {
                    tmp.append(k.toMap())
                }
                map["CommodityList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommodityList"] as? [Any?] {
                var tmp : [QueryCommodityListResponseBody.Data.CommodityList] = []
                for v in value {
                    if v != nil {
                        var model = QueryCommodityListResponseBody.Data.CommodityList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.commodityList = tmp
            }
        }
    }
    public var code: String?

    public var data: QueryCommodityListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryCommodityListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCommodityListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCommodityListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCommodityListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCostUnitRequest : Tea.TeaModel {
    public var ownerUid: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var parentUnitId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerUid != nil {
            map["OwnerUid"] = self.ownerUid!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.parentUnitId != nil {
            map["ParentUnitId"] = self.parentUnitId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerUid"] as? Int64 {
            self.ownerUid = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ParentUnitId"] as? Int64 {
            self.parentUnitId = value
        }
    }
}

public class QueryCostUnitResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CostUnitDtoList : Tea.TeaModel {
            public var ownerUid: Int64?

            public var parentUnitId: Int64?

            public var unitId: Int64?

            public var unitName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ownerUid != nil {
                    map["OwnerUid"] = self.ownerUid!
                }
                if self.parentUnitId != nil {
                    map["ParentUnitId"] = self.parentUnitId!
                }
                if self.unitId != nil {
                    map["UnitId"] = self.unitId!
                }
                if self.unitName != nil {
                    map["UnitName"] = self.unitName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["OwnerUid"] as? Int64 {
                    self.ownerUid = value
                }
                if let value = dict["ParentUnitId"] as? Int64 {
                    self.parentUnitId = value
                }
                if let value = dict["UnitId"] as? Int64 {
                    self.unitId = value
                }
                if let value = dict["UnitName"] as? String {
                    self.unitName = value
                }
            }
        }
        public var costUnitDtoList: [QueryCostUnitResponseBody.Data.CostUnitDtoList]?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.costUnitDtoList != nil {
                var tmp : [Any] = []
                for k in self.costUnitDtoList! {
                    tmp.append(k.toMap())
                }
                map["CostUnitDtoList"] = tmp
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CostUnitDtoList"] as? [Any?] {
                var tmp : [QueryCostUnitResponseBody.Data.CostUnitDtoList] = []
                for v in value {
                    if v != nil {
                        var model = QueryCostUnitResponseBody.Data.CostUnitDtoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.costUnitDtoList = tmp
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryCostUnitResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryCostUnitResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCostUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCostUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCostUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCostUnitResourceRequest : Tea.TeaModel {
    public var ownerUid: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var unitId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerUid != nil {
            map["OwnerUid"] = self.ownerUid!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.unitId != nil {
            map["UnitId"] = self.unitId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerUid"] as? Int64 {
            self.ownerUid = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["UnitId"] as? Int64 {
            self.unitId = value
        }
    }
}

public class QueryCostUnitResourceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CostUnit : Tea.TeaModel {
            public var ownerUid: Int64?

            public var parentUnitId: Int64?

            public var unitId: Int64?

            public var unitName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ownerUid != nil {
                    map["OwnerUid"] = self.ownerUid!
                }
                if self.parentUnitId != nil {
                    map["ParentUnitId"] = self.parentUnitId!
                }
                if self.unitId != nil {
                    map["UnitId"] = self.unitId!
                }
                if self.unitName != nil {
                    map["UnitName"] = self.unitName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["OwnerUid"] as? Int64 {
                    self.ownerUid = value
                }
                if let value = dict["ParentUnitId"] as? Int64 {
                    self.parentUnitId = value
                }
                if let value = dict["UnitId"] as? Int64 {
                    self.unitId = value
                }
                if let value = dict["UnitName"] as? String {
                    self.unitName = value
                }
            }
        }
        public class CostUnitStatisInfo : Tea.TeaModel {
            public var resourceCount: Int64?

            public var resourceGroupCount: Int64?

            public var subUnitCount: Int64?

            public var totalResourceCount: Int64?

            public var totalResourceGroupCount: Int64?

            public var totalUserCount: Int64?

            public var userCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceCount != nil {
                    map["ResourceCount"] = self.resourceCount!
                }
                if self.resourceGroupCount != nil {
                    map["ResourceGroupCount"] = self.resourceGroupCount!
                }
                if self.subUnitCount != nil {
                    map["SubUnitCount"] = self.subUnitCount!
                }
                if self.totalResourceCount != nil {
                    map["TotalResourceCount"] = self.totalResourceCount!
                }
                if self.totalResourceGroupCount != nil {
                    map["TotalResourceGroupCount"] = self.totalResourceGroupCount!
                }
                if self.totalUserCount != nil {
                    map["TotalUserCount"] = self.totalUserCount!
                }
                if self.userCount != nil {
                    map["UserCount"] = self.userCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceCount"] as? Int64 {
                    self.resourceCount = value
                }
                if let value = dict["ResourceGroupCount"] as? Int64 {
                    self.resourceGroupCount = value
                }
                if let value = dict["SubUnitCount"] as? Int64 {
                    self.subUnitCount = value
                }
                if let value = dict["TotalResourceCount"] as? Int64 {
                    self.totalResourceCount = value
                }
                if let value = dict["TotalResourceGroupCount"] as? Int64 {
                    self.totalResourceGroupCount = value
                }
                if let value = dict["TotalUserCount"] as? Int64 {
                    self.totalUserCount = value
                }
                if let value = dict["UserCount"] as? Int64 {
                    self.userCount = value
                }
            }
        }
        public class ResourceInstanceDtoList : Tea.TeaModel {
            public var apportionCode: String?

            public var apportionName: String?

            public var commodityCode: String?

            public var commodityName: String?

            public var pipCode: String?

            public var relatedResources: String?

            public var resourceGroup: String?

            public var resourceId: String?

            public var resourceNick: String?

            public var resourceSource: String?

            public var resourceStatus: String?

            public var resourceTag: String?

            public var resourceType: String?

            public var resourceUserId: Int64?

            public var resourceUserName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apportionCode != nil {
                    map["ApportionCode"] = self.apportionCode!
                }
                if self.apportionName != nil {
                    map["ApportionName"] = self.apportionName!
                }
                if self.commodityCode != nil {
                    map["CommodityCode"] = self.commodityCode!
                }
                if self.commodityName != nil {
                    map["CommodityName"] = self.commodityName!
                }
                if self.pipCode != nil {
                    map["PipCode"] = self.pipCode!
                }
                if self.relatedResources != nil {
                    map["RelatedResources"] = self.relatedResources!
                }
                if self.resourceGroup != nil {
                    map["ResourceGroup"] = self.resourceGroup!
                }
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.resourceNick != nil {
                    map["ResourceNick"] = self.resourceNick!
                }
                if self.resourceSource != nil {
                    map["ResourceSource"] = self.resourceSource!
                }
                if self.resourceStatus != nil {
                    map["ResourceStatus"] = self.resourceStatus!
                }
                if self.resourceTag != nil {
                    map["ResourceTag"] = self.resourceTag!
                }
                if self.resourceType != nil {
                    map["ResourceType"] = self.resourceType!
                }
                if self.resourceUserId != nil {
                    map["ResourceUserId"] = self.resourceUserId!
                }
                if self.resourceUserName != nil {
                    map["ResourceUserName"] = self.resourceUserName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApportionCode"] as? String {
                    self.apportionCode = value
                }
                if let value = dict["ApportionName"] as? String {
                    self.apportionName = value
                }
                if let value = dict["CommodityCode"] as? String {
                    self.commodityCode = value
                }
                if let value = dict["CommodityName"] as? String {
                    self.commodityName = value
                }
                if let value = dict["PipCode"] as? String {
                    self.pipCode = value
                }
                if let value = dict["RelatedResources"] as? String {
                    self.relatedResources = value
                }
                if let value = dict["ResourceGroup"] as? String {
                    self.resourceGroup = value
                }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["ResourceNick"] as? String {
                    self.resourceNick = value
                }
                if let value = dict["ResourceSource"] as? String {
                    self.resourceSource = value
                }
                if let value = dict["ResourceStatus"] as? String {
                    self.resourceStatus = value
                }
                if let value = dict["ResourceTag"] as? String {
                    self.resourceTag = value
                }
                if let value = dict["ResourceType"] as? String {
                    self.resourceType = value
                }
                if let value = dict["ResourceUserId"] as? Int64 {
                    self.resourceUserId = value
                }
                if let value = dict["ResourceUserName"] as? String {
                    self.resourceUserName = value
                }
            }
        }
        public var costUnit: QueryCostUnitResourceResponseBody.Data.CostUnit?

        public var costUnitStatisInfo: QueryCostUnitResourceResponseBody.Data.CostUnitStatisInfo?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var resourceInstanceDtoList: [QueryCostUnitResourceResponseBody.Data.ResourceInstanceDtoList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.costUnit?.validate()
            try self.costUnitStatisInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.costUnit != nil {
                map["CostUnit"] = self.costUnit?.toMap()
            }
            if self.costUnitStatisInfo != nil {
                map["CostUnitStatisInfo"] = self.costUnitStatisInfo?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.resourceInstanceDtoList != nil {
                var tmp : [Any] = []
                for k in self.resourceInstanceDtoList! {
                    tmp.append(k.toMap())
                }
                map["ResourceInstanceDtoList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CostUnit"] as? [String: Any?] {
                var model = QueryCostUnitResourceResponseBody.Data.CostUnit()
                model.fromMap(value)
                self.costUnit = model
            }
            if let value = dict["CostUnitStatisInfo"] as? [String: Any?] {
                var model = QueryCostUnitResourceResponseBody.Data.CostUnitStatisInfo()
                model.fromMap(value)
                self.costUnitStatisInfo = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["ResourceInstanceDtoList"] as? [Any?] {
                var tmp : [QueryCostUnitResourceResponseBody.Data.ResourceInstanceDtoList] = []
                for v in value {
                    if v != nil {
                        var model = QueryCostUnitResourceResponseBody.Data.ResourceInstanceDtoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceInstanceDtoList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryCostUnitResourceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryCostUnitResourceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCostUnitResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCostUnitResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCostUnitResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCustomerAddressListRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class QueryCustomerAddressListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CustomerInvoiceAddressList : Tea.TeaModel {
            public class CustomerInvoiceAddress : Tea.TeaModel {
                public var addressee: String?

                public var bizType: String?

                public var city: String?

                public var county: String?

                public var deliveryAddress: String?

                public var id: Int64?

                public var phone: String?

                public var postalCode: String?

                public var province: String?

                public var street: String?

                public var userId: Int64?

                public var userNick: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.addressee != nil {
                        map["Addressee"] = self.addressee!
                    }
                    if self.bizType != nil {
                        map["BizType"] = self.bizType!
                    }
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.county != nil {
                        map["County"] = self.county!
                    }
                    if self.deliveryAddress != nil {
                        map["DeliveryAddress"] = self.deliveryAddress!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.phone != nil {
                        map["Phone"] = self.phone!
                    }
                    if self.postalCode != nil {
                        map["PostalCode"] = self.postalCode!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    if self.street != nil {
                        map["Street"] = self.street!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    if self.userNick != nil {
                        map["UserNick"] = self.userNick!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Addressee"] as? String {
                        self.addressee = value
                    }
                    if let value = dict["BizType"] as? String {
                        self.bizType = value
                    }
                    if let value = dict["City"] as? String {
                        self.city = value
                    }
                    if let value = dict["County"] as? String {
                        self.county = value
                    }
                    if let value = dict["DeliveryAddress"] as? String {
                        self.deliveryAddress = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Phone"] as? String {
                        self.phone = value
                    }
                    if let value = dict["PostalCode"] as? String {
                        self.postalCode = value
                    }
                    if let value = dict["Province"] as? String {
                        self.province = value
                    }
                    if let value = dict["Street"] as? String {
                        self.street = value
                    }
                    if let value = dict["UserId"] as? Int64 {
                        self.userId = value
                    }
                    if let value = dict["UserNick"] as? String {
                        self.userNick = value
                    }
                }
            }
            public var customerInvoiceAddress: [QueryCustomerAddressListResponseBody.Data.CustomerInvoiceAddressList.CustomerInvoiceAddress]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customerInvoiceAddress != nil {
                    var tmp : [Any] = []
                    for k in self.customerInvoiceAddress! {
                        tmp.append(k.toMap())
                    }
                    map["CustomerInvoiceAddress"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomerInvoiceAddress"] as? [Any?] {
                    var tmp : [QueryCustomerAddressListResponseBody.Data.CustomerInvoiceAddressList.CustomerInvoiceAddress] = []
                    for v in value {
                        if v != nil {
                            var model = QueryCustomerAddressListResponseBody.Data.CustomerInvoiceAddressList.CustomerInvoiceAddress()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.customerInvoiceAddress = tmp
                }
            }
        }
        public var customerInvoiceAddressList: QueryCustomerAddressListResponseBody.Data.CustomerInvoiceAddressList?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customerInvoiceAddressList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customerInvoiceAddressList != nil {
                map["CustomerInvoiceAddressList"] = self.customerInvoiceAddressList?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomerInvoiceAddressList"] as? [String: Any?] {
                var model = QueryCustomerAddressListResponseBody.Data.CustomerInvoiceAddressList()
                model.fromMap(value)
                self.customerInvoiceAddressList = model
            }
        }
    }
    public var code: String?

    public var data: QueryCustomerAddressListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryCustomerAddressListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCustomerAddressListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCustomerAddressListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCustomerAddressListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDPUtilizationDetailRequest : Tea.TeaModel {
    public var commodityCode: String?

    public var deductedInstanceId: String?

    public var endTime: String?

    public var includeShare: Bool?

    public var instanceId: String?

    public var instanceSpec: String?

    public var lastToken: String?

    public var limit: Int32?

    public var prodCode: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.deductedInstanceId != nil {
            map["DeductedInstanceId"] = self.deductedInstanceId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.includeShare != nil {
            map["IncludeShare"] = self.includeShare!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceSpec != nil {
            map["InstanceSpec"] = self.instanceSpec!
        }
        if self.lastToken != nil {
            map["LastToken"] = self.lastToken!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["DeductedInstanceId"] as? String {
            self.deductedInstanceId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IncludeShare"] as? Bool {
            self.includeShare = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceSpec"] as? String {
            self.instanceSpec = value
        }
        if let value = dict["LastToken"] as? String {
            self.lastToken = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class QueryDPUtilizationDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DetailList : Tea.TeaModel {
            public class DetailList : Tea.TeaModel {
                public var deductDate: String?

                public var deductFactorTotal: Double?

                public var deductHours: Double?

                public var deductMeasure: Double?

                public var deductQuantity: Double?

                public var deductedCommodityCode: String?

                public var deductedInstanceId: String?

                public var deductedProductDetail: String?

                public var instanceId: String?

                public var instanceSpec: String?

                public var region: String?

                public var resCode: String?

                public var shareUid: Int64?

                public var uid: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.deductDate != nil {
                        map["DeductDate"] = self.deductDate!
                    }
                    if self.deductFactorTotal != nil {
                        map["DeductFactorTotal"] = self.deductFactorTotal!
                    }
                    if self.deductHours != nil {
                        map["DeductHours"] = self.deductHours!
                    }
                    if self.deductMeasure != nil {
                        map["DeductMeasure"] = self.deductMeasure!
                    }
                    if self.deductQuantity != nil {
                        map["DeductQuantity"] = self.deductQuantity!
                    }
                    if self.deductedCommodityCode != nil {
                        map["DeductedCommodityCode"] = self.deductedCommodityCode!
                    }
                    if self.deductedInstanceId != nil {
                        map["DeductedInstanceId"] = self.deductedInstanceId!
                    }
                    if self.deductedProductDetail != nil {
                        map["DeductedProductDetail"] = self.deductedProductDetail!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.instanceSpec != nil {
                        map["InstanceSpec"] = self.instanceSpec!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.resCode != nil {
                        map["ResCode"] = self.resCode!
                    }
                    if self.shareUid != nil {
                        map["ShareUid"] = self.shareUid!
                    }
                    if self.uid != nil {
                        map["Uid"] = self.uid!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DeductDate"] as? String {
                        self.deductDate = value
                    }
                    if let value = dict["DeductFactorTotal"] as? Double {
                        self.deductFactorTotal = value
                    }
                    if let value = dict["DeductHours"] as? Double {
                        self.deductHours = value
                    }
                    if let value = dict["DeductMeasure"] as? Double {
                        self.deductMeasure = value
                    }
                    if let value = dict["DeductQuantity"] as? Double {
                        self.deductQuantity = value
                    }
                    if let value = dict["DeductedCommodityCode"] as? String {
                        self.deductedCommodityCode = value
                    }
                    if let value = dict["DeductedInstanceId"] as? String {
                        self.deductedInstanceId = value
                    }
                    if let value = dict["DeductedProductDetail"] as? String {
                        self.deductedProductDetail = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["InstanceSpec"] as? String {
                        self.instanceSpec = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["ResCode"] as? String {
                        self.resCode = value
                    }
                    if let value = dict["ShareUid"] as? Int64 {
                        self.shareUid = value
                    }
                    if let value = dict["Uid"] as? Int64 {
                        self.uid = value
                    }
                }
            }
            public var detailList: [QueryDPUtilizationDetailResponseBody.Data.DetailList.DetailList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detailList != nil {
                    var tmp : [Any] = []
                    for k in self.detailList! {
                        tmp.append(k.toMap())
                    }
                    map["DetailList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DetailList"] as? [Any?] {
                    var tmp : [QueryDPUtilizationDetailResponseBody.Data.DetailList.DetailList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryDPUtilizationDetailResponseBody.Data.DetailList.DetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.detailList = tmp
                }
            }
        }
        public var detailList: QueryDPUtilizationDetailResponseBody.Data.DetailList?

        public var nextToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detailList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detailList != nil {
                map["DetailList"] = self.detailList?.toMap()
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DetailList"] as? [String: Any?] {
                var model = QueryDPUtilizationDetailResponseBody.Data.DetailList()
                model.fromMap(value)
                self.detailList = model
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
        }
    }
    public var code: String?

    public var data: QueryDPUtilizationDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryDPUtilizationDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryDPUtilizationDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDPUtilizationDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDPUtilizationDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryEvaluateListRequest : Tea.TeaModel {
    public var billCycle: String?

    public var bizTypeList: [String]?

    public var endAmount: Int64?

    public var endBizTime: String?

    public var endSearchTime: String?

    public var outBizId: String?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var sortType: Int32?

    public var startAmount: Int64?

    public var startBizTime: String?

    public var startSearchTime: String?

    public var type: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.bizTypeList != nil {
            map["BizTypeList"] = self.bizTypeList!
        }
        if self.endAmount != nil {
            map["EndAmount"] = self.endAmount!
        }
        if self.endBizTime != nil {
            map["EndBizTime"] = self.endBizTime!
        }
        if self.endSearchTime != nil {
            map["EndSearchTime"] = self.endSearchTime!
        }
        if self.outBizId != nil {
            map["OutBizId"] = self.outBizId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortType != nil {
            map["SortType"] = self.sortType!
        }
        if self.startAmount != nil {
            map["StartAmount"] = self.startAmount!
        }
        if self.startBizTime != nil {
            map["StartBizTime"] = self.startBizTime!
        }
        if self.startSearchTime != nil {
            map["StartSearchTime"] = self.startSearchTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["BizTypeList"] as? [String] {
            self.bizTypeList = value
        }
        if let value = dict["EndAmount"] as? Int64 {
            self.endAmount = value
        }
        if let value = dict["EndBizTime"] as? String {
            self.endBizTime = value
        }
        if let value = dict["EndSearchTime"] as? String {
            self.endSearchTime = value
        }
        if let value = dict["OutBizId"] as? String {
            self.outBizId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortType"] as? Int32 {
            self.sortType = value
        }
        if let value = dict["StartAmount"] as? Int64 {
            self.startAmount = value
        }
        if let value = dict["StartBizTime"] as? String {
            self.startBizTime = value
        }
        if let value = dict["StartSearchTime"] as? String {
            self.startSearchTime = value
        }
        if let value = dict["Type"] as? Int32 {
            self.type = value
        }
    }
}

public class QueryEvaluateListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class EvaluateList : Tea.TeaModel {
            public class Evaluate : Tea.TeaModel {
                public var billCycle: String?

                public var billId: Int64?

                public var bizTime: String?

                public var bizType: String?

                public var canInvoiceAmount: Int64?

                public var gmtCreate: String?

                public var gmtModified: String?

                public var id: Int64?

                public var invoicedAmount: Int64?

                public var itemId: Int64?

                public var name: String?

                public var offsetAcceptAmount: Int64?

                public var offsetCostAmount: Int64?

                public var opId: String?

                public var originalAmount: Int64?

                public var outBizId: String?

                public var presentAmount: Int64?

                public var status: Int32?

                public var type: Int32?

                public var userId: Int64?

                public var userNick: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.billCycle != nil {
                        map["BillCycle"] = self.billCycle!
                    }
                    if self.billId != nil {
                        map["BillId"] = self.billId!
                    }
                    if self.bizTime != nil {
                        map["BizTime"] = self.bizTime!
                    }
                    if self.bizType != nil {
                        map["BizType"] = self.bizType!
                    }
                    if self.canInvoiceAmount != nil {
                        map["CanInvoiceAmount"] = self.canInvoiceAmount!
                    }
                    if self.gmtCreate != nil {
                        map["GmtCreate"] = self.gmtCreate!
                    }
                    if self.gmtModified != nil {
                        map["GmtModified"] = self.gmtModified!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.invoicedAmount != nil {
                        map["InvoicedAmount"] = self.invoicedAmount!
                    }
                    if self.itemId != nil {
                        map["ItemId"] = self.itemId!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.offsetAcceptAmount != nil {
                        map["OffsetAcceptAmount"] = self.offsetAcceptAmount!
                    }
                    if self.offsetCostAmount != nil {
                        map["OffsetCostAmount"] = self.offsetCostAmount!
                    }
                    if self.opId != nil {
                        map["OpId"] = self.opId!
                    }
                    if self.originalAmount != nil {
                        map["OriginalAmount"] = self.originalAmount!
                    }
                    if self.outBizId != nil {
                        map["OutBizId"] = self.outBizId!
                    }
                    if self.presentAmount != nil {
                        map["PresentAmount"] = self.presentAmount!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    if self.userNick != nil {
                        map["UserNick"] = self.userNick!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BillCycle"] as? String {
                        self.billCycle = value
                    }
                    if let value = dict["BillId"] as? Int64 {
                        self.billId = value
                    }
                    if let value = dict["BizTime"] as? String {
                        self.bizTime = value
                    }
                    if let value = dict["BizType"] as? String {
                        self.bizType = value
                    }
                    if let value = dict["CanInvoiceAmount"] as? Int64 {
                        self.canInvoiceAmount = value
                    }
                    if let value = dict["GmtCreate"] as? String {
                        self.gmtCreate = value
                    }
                    if let value = dict["GmtModified"] as? String {
                        self.gmtModified = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["InvoicedAmount"] as? Int64 {
                        self.invoicedAmount = value
                    }
                    if let value = dict["ItemId"] as? Int64 {
                        self.itemId = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["OffsetAcceptAmount"] as? Int64 {
                        self.offsetAcceptAmount = value
                    }
                    if let value = dict["OffsetCostAmount"] as? Int64 {
                        self.offsetCostAmount = value
                    }
                    if let value = dict["OpId"] as? String {
                        self.opId = value
                    }
                    if let value = dict["OriginalAmount"] as? Int64 {
                        self.originalAmount = value
                    }
                    if let value = dict["OutBizId"] as? String {
                        self.outBizId = value
                    }
                    if let value = dict["PresentAmount"] as? Int64 {
                        self.presentAmount = value
                    }
                    if let value = dict["Status"] as? Int32 {
                        self.status = value
                    }
                    if let value = dict["Type"] as? Int32 {
                        self.type = value
                    }
                    if let value = dict["UserId"] as? Int64 {
                        self.userId = value
                    }
                    if let value = dict["UserNick"] as? String {
                        self.userNick = value
                    }
                }
            }
            public var evaluate: [QueryEvaluateListResponseBody.Data.EvaluateList.Evaluate]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.evaluate != nil {
                    var tmp : [Any] = []
                    for k in self.evaluate! {
                        tmp.append(k.toMap())
                    }
                    map["Evaluate"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Evaluate"] as? [Any?] {
                    var tmp : [QueryEvaluateListResponseBody.Data.EvaluateList.Evaluate] = []
                    for v in value {
                        if v != nil {
                            var model = QueryEvaluateListResponseBody.Data.EvaluateList.Evaluate()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.evaluate = tmp
                }
            }
        }
        public var evaluateList: QueryEvaluateListResponseBody.Data.EvaluateList?

        public var hostId: String?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public var totalInvoiceAmount: Int64?

        public var totalUnAppliedInvoiceAmount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.evaluateList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.evaluateList != nil {
                map["EvaluateList"] = self.evaluateList?.toMap()
            }
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.totalInvoiceAmount != nil {
                map["TotalInvoiceAmount"] = self.totalInvoiceAmount!
            }
            if self.totalUnAppliedInvoiceAmount != nil {
                map["TotalUnAppliedInvoiceAmount"] = self.totalUnAppliedInvoiceAmount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EvaluateList"] as? [String: Any?] {
                var model = QueryEvaluateListResponseBody.Data.EvaluateList()
                model.fromMap(value)
                self.evaluateList = model
            }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["TotalInvoiceAmount"] as? Int64 {
                self.totalInvoiceAmount = value
            }
            if let value = dict["TotalUnAppliedInvoiceAmount"] as? Int64 {
                self.totalUnAppliedInvoiceAmount = value
            }
        }
    }
    public var code: String?

    public var data: QueryEvaluateListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryEvaluateListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryEvaluateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryEvaluateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryEvaluateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryFinancialAccountInfoRequest : Tea.TeaModel {
    public var userId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UserId"] as? Int64 {
            self.userId = value
        }
    }
}

public class QueryFinancialAccountInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var accountType: String?

        public var isFinancialAccount: Bool?

        public var memberGroupId: Int64?

        public var memberGroupName: String?

        public var memberNickName: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountType != nil {
                map["AccountType"] = self.accountType!
            }
            if self.isFinancialAccount != nil {
                map["IsFinancialAccount"] = self.isFinancialAccount!
            }
            if self.memberGroupId != nil {
                map["MemberGroupId"] = self.memberGroupId!
            }
            if self.memberGroupName != nil {
                map["MemberGroupName"] = self.memberGroupName!
            }
            if self.memberNickName != nil {
                map["MemberNickName"] = self.memberNickName!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountType"] as? String {
                self.accountType = value
            }
            if let value = dict["IsFinancialAccount"] as? Bool {
                self.isFinancialAccount = value
            }
            if let value = dict["MemberGroupId"] as? Int64 {
                self.memberGroupId = value
            }
            if let value = dict["MemberGroupName"] as? String {
                self.memberGroupName = value
            }
            if let value = dict["MemberNickName"] as? String {
                self.memberNickName = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public var code: String?

    public var data: QueryFinancialAccountInfoResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryFinancialAccountInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryFinancialAccountInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryFinancialAccountInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryFinancialAccountInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryInstanceBillRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var billingDate: String?

    public var granularity: String?

    public var isBillingItem: Bool?

    public var isHideZeroCharge: Bool?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.billingDate != nil {
            map["BillingDate"] = self.billingDate!
        }
        if self.granularity != nil {
            map["Granularity"] = self.granularity!
        }
        if self.isBillingItem != nil {
            map["IsBillingItem"] = self.isBillingItem!
        }
        if self.isHideZeroCharge != nil {
            map["IsHideZeroCharge"] = self.isHideZeroCharge!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["BillingDate"] as? String {
            self.billingDate = value
        }
        if let value = dict["Granularity"] as? String {
            self.granularity = value
        }
        if let value = dict["IsBillingItem"] as? Bool {
            self.isBillingItem = value
        }
        if let value = dict["IsHideZeroCharge"] as? Bool {
            self.isHideZeroCharge = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class QueryInstanceBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var adjustAmount: Double?

                public var billingDate: String?

                public var billingItem: String?

                public var billingType: String?

                public var cashAmount: Double?

                public var commodityCode: String?

                public var costUnit: String?

                public var currency: String?

                public var deductedByCashCoupons: Double?

                public var deductedByCoupons: Double?

                public var deductedByPrepaidCard: Double?

                public var deductedByResourcePackage: String?

                public var instanceConfig: String?

                public var instanceID: String?

                public var instanceSpec: String?

                public var internetIP: String?

                public var intranetIP: String?

                public var invoiceDiscount: Double?

                public var item: String?

                public var listPrice: String?

                public var listPriceUnit: String?

                public var nickName: String?

                public var outstandingAmount: Double?

                public var ownerID: String?

                public var paymentAmount: Double?

                public var pipCode: String?

                public var pretaxAmount: Double?

                public var pretaxGrossAmount: Double?

                public var productCode: String?

                public var productDetail: String?

                public var productName: String?

                public var productType: String?

                public var region: String?

                public var resourceGroup: String?

                public var servicePeriod: String?

                public var servicePeriodUnit: String?

                public var subscriptionType: String?

                public var tag: String?

                public var usage: String?

                public var usageUnit: String?

                public var zone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustAmount != nil {
                        map["AdjustAmount"] = self.adjustAmount!
                    }
                    if self.billingDate != nil {
                        map["BillingDate"] = self.billingDate!
                    }
                    if self.billingItem != nil {
                        map["BillingItem"] = self.billingItem!
                    }
                    if self.billingType != nil {
                        map["BillingType"] = self.billingType!
                    }
                    if self.cashAmount != nil {
                        map["CashAmount"] = self.cashAmount!
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.costUnit != nil {
                        map["CostUnit"] = self.costUnit!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.deductedByResourcePackage != nil {
                        map["DeductedByResourcePackage"] = self.deductedByResourcePackage!
                    }
                    if self.instanceConfig != nil {
                        map["InstanceConfig"] = self.instanceConfig!
                    }
                    if self.instanceID != nil {
                        map["InstanceID"] = self.instanceID!
                    }
                    if self.instanceSpec != nil {
                        map["InstanceSpec"] = self.instanceSpec!
                    }
                    if self.internetIP != nil {
                        map["InternetIP"] = self.internetIP!
                    }
                    if self.intranetIP != nil {
                        map["IntranetIP"] = self.intranetIP!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.item != nil {
                        map["Item"] = self.item!
                    }
                    if self.listPrice != nil {
                        map["ListPrice"] = self.listPrice!
                    }
                    if self.listPriceUnit != nil {
                        map["ListPriceUnit"] = self.listPriceUnit!
                    }
                    if self.nickName != nil {
                        map["NickName"] = self.nickName!
                    }
                    if self.outstandingAmount != nil {
                        map["OutstandingAmount"] = self.outstandingAmount!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.pipCode != nil {
                        map["PipCode"] = self.pipCode!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productDetail != nil {
                        map["ProductDetail"] = self.productDetail!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.resourceGroup != nil {
                        map["ResourceGroup"] = self.resourceGroup!
                    }
                    if self.servicePeriod != nil {
                        map["ServicePeriod"] = self.servicePeriod!
                    }
                    if self.servicePeriodUnit != nil {
                        map["ServicePeriodUnit"] = self.servicePeriodUnit!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    if self.usageUnit != nil {
                        map["UsageUnit"] = self.usageUnit!
                    }
                    if self.zone != nil {
                        map["Zone"] = self.zone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustAmount"] as? Double {
                        self.adjustAmount = value
                    }
                    if let value = dict["BillingDate"] as? String {
                        self.billingDate = value
                    }
                    if let value = dict["BillingItem"] as? String {
                        self.billingItem = value
                    }
                    if let value = dict["BillingType"] as? String {
                        self.billingType = value
                    }
                    if let value = dict["CashAmount"] as? Double {
                        self.cashAmount = value
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["CostUnit"] as? String {
                        self.costUnit = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? Double {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? Double {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? Double {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["DeductedByResourcePackage"] as? String {
                        self.deductedByResourcePackage = value
                    }
                    if let value = dict["InstanceConfig"] as? String {
                        self.instanceConfig = value
                    }
                    if let value = dict["InstanceID"] as? String {
                        self.instanceID = value
                    }
                    if let value = dict["InstanceSpec"] as? String {
                        self.instanceSpec = value
                    }
                    if let value = dict["InternetIP"] as? String {
                        self.internetIP = value
                    }
                    if let value = dict["IntranetIP"] as? String {
                        self.intranetIP = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["Item"] as? String {
                        self.item = value
                    }
                    if let value = dict["ListPrice"] as? String {
                        self.listPrice = value
                    }
                    if let value = dict["ListPriceUnit"] as? String {
                        self.listPriceUnit = value
                    }
                    if let value = dict["NickName"] as? String {
                        self.nickName = value
                    }
                    if let value = dict["OutstandingAmount"] as? Double {
                        self.outstandingAmount = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["PaymentAmount"] as? Double {
                        self.paymentAmount = value
                    }
                    if let value = dict["PipCode"] as? String {
                        self.pipCode = value
                    }
                    if let value = dict["PretaxAmount"] as? Double {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? Double {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductDetail"] as? String {
                        self.productDetail = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["ResourceGroup"] as? String {
                        self.resourceGroup = value
                    }
                    if let value = dict["ServicePeriod"] as? String {
                        self.servicePeriod = value
                    }
                    if let value = dict["ServicePeriodUnit"] as? String {
                        self.servicePeriodUnit = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Usage"] as? String {
                        self.usage = value
                    }
                    if let value = dict["UsageUnit"] as? String {
                        self.usageUnit = value
                    }
                    if let value = dict["Zone"] as? String {
                        self.zone = value
                    }
                }
            }
            public var item: [QueryInstanceBillResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QueryInstanceBillResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QueryInstanceBillResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: QueryInstanceBillResponseBody.Data.Items?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QueryInstanceBillResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryInstanceBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryInstanceBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryInstanceBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryInstanceBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryInstanceBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryInstanceByTagRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [QueryInstanceByTagRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [QueryInstanceByTagRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = QueryInstanceByTagRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class QueryInstanceByTagResponseBody : Tea.TeaModel {
    public class TagResource : Tea.TeaModel {
        public class Tag : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var resourceId: String?

        public var resourceType: String?

        public var tag: [QueryInstanceByTagResponseBody.TagResource.Tag]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.tag != nil {
                var tmp : [Any] = []
                for k in self.tag! {
                    tmp.append(k.toMap())
                }
                map["Tag"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["Tag"] as? [Any?] {
                var tmp : [QueryInstanceByTagResponseBody.TagResource.Tag] = []
                for v in value {
                    if v != nil {
                        var model = QueryInstanceByTagResponseBody.TagResource.Tag()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tag = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var tagResource: [QueryInstanceByTagResponseBody.TagResource]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tagResource != nil {
            var tmp : [Any] = []
            for k in self.tagResource! {
                tmp.append(k.toMap())
            }
            map["TagResource"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TagResource"] as? [Any?] {
            var tmp : [QueryInstanceByTagResponseBody.TagResource] = []
            for v in value {
                if v != nil {
                    var model = QueryInstanceByTagResponseBody.TagResource()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagResource = tmp
        }
    }
}

public class QueryInstanceByTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryInstanceByTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryInstanceByTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryInstanceGaapCostRequest : Tea.TeaModel {
    public var billingCycle: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class QueryInstanceGaapCostResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Modules : Tea.TeaModel {
            public class Module : Tea.TeaModel {
                public var accountingUnit: String?

                public var billType: String?

                public var billingCycle: String?

                public var currency: String?

                public var deductedByCashCoupons: String?

                public var deductedByCoupons: String?

                public var deductedByPrepaidCard: String?

                public var gaapDeductedByCashCoupons: String?

                public var gaapDeductedByCoupons: String?

                public var gaapDeductedByPrepaidCard: String?

                public var gaapPaymentAmount: String?

                public var gaapPretaxAmount: String?

                public var gaapPretaxAmountLocal: String?

                public var gaapPretaxGrossAmount: String?

                public var gaapPricingDiscount: String?

                public var instanceID: String?

                public var monthGaapDeductedByCashCoupons: String?

                public var monthGaapDeductedByCoupons: String?

                public var monthGaapDeductedByPrepaidCard: String?

                public var monthGaapPaymentAmount: String?

                public var monthGaapPretaxAmount: String?

                public var monthGaapPretaxAmountLocal: String?

                public var monthGaapPretaxGrossAmount: String?

                public var monthGaapPricingDiscount: String?

                public var orderId: String?

                public var orderType: String?

                public var ownerID: String?

                public var payTime: String?

                public var payerAccount: String?

                public var paymentAmount: String?

                public var paymentCurrency: String?

                public var pretaxAmount: String?

                public var pretaxAmountLocal: String?

                public var pretaxGrossAmount: String?

                public var pricingDiscount: String?

                public var productCode: String?

                public var productType: String?

                public var region: String?

                public var resourceGroup: String?

                public var subOrderId: String?

                public var subscriptionType: String?

                public var tag: String?

                public var unallocatedDeductedByCashCoupons: String?

                public var unallocatedDeductedByCoupons: String?

                public var unallocatedDeductedByPrepaidCard: String?

                public var unallocatedPaymentAmount: String?

                public var unallocatedPretaxAmount: String?

                public var unallocatedPretaxAmountLocal: String?

                public var unallocatedPretaxGrossAmount: String?

                public var unallocatedPricingDiscount: String?

                public var usageEndDate: String?

                public var usageStartDate: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountingUnit != nil {
                        map["AccountingUnit"] = self.accountingUnit!
                    }
                    if self.billType != nil {
                        map["BillType"] = self.billType!
                    }
                    if self.billingCycle != nil {
                        map["BillingCycle"] = self.billingCycle!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.gaapDeductedByCashCoupons != nil {
                        map["GaapDeductedByCashCoupons"] = self.gaapDeductedByCashCoupons!
                    }
                    if self.gaapDeductedByCoupons != nil {
                        map["GaapDeductedByCoupons"] = self.gaapDeductedByCoupons!
                    }
                    if self.gaapDeductedByPrepaidCard != nil {
                        map["GaapDeductedByPrepaidCard"] = self.gaapDeductedByPrepaidCard!
                    }
                    if self.gaapPaymentAmount != nil {
                        map["GaapPaymentAmount"] = self.gaapPaymentAmount!
                    }
                    if self.gaapPretaxAmount != nil {
                        map["GaapPretaxAmount"] = self.gaapPretaxAmount!
                    }
                    if self.gaapPretaxAmountLocal != nil {
                        map["GaapPretaxAmountLocal"] = self.gaapPretaxAmountLocal!
                    }
                    if self.gaapPretaxGrossAmount != nil {
                        map["GaapPretaxGrossAmount"] = self.gaapPretaxGrossAmount!
                    }
                    if self.gaapPricingDiscount != nil {
                        map["GaapPricingDiscount"] = self.gaapPricingDiscount!
                    }
                    if self.instanceID != nil {
                        map["InstanceID"] = self.instanceID!
                    }
                    if self.monthGaapDeductedByCashCoupons != nil {
                        map["MonthGaapDeductedByCashCoupons"] = self.monthGaapDeductedByCashCoupons!
                    }
                    if self.monthGaapDeductedByCoupons != nil {
                        map["MonthGaapDeductedByCoupons"] = self.monthGaapDeductedByCoupons!
                    }
                    if self.monthGaapDeductedByPrepaidCard != nil {
                        map["MonthGaapDeductedByPrepaidCard"] = self.monthGaapDeductedByPrepaidCard!
                    }
                    if self.monthGaapPaymentAmount != nil {
                        map["MonthGaapPaymentAmount"] = self.monthGaapPaymentAmount!
                    }
                    if self.monthGaapPretaxAmount != nil {
                        map["MonthGaapPretaxAmount"] = self.monthGaapPretaxAmount!
                    }
                    if self.monthGaapPretaxAmountLocal != nil {
                        map["MonthGaapPretaxAmountLocal"] = self.monthGaapPretaxAmountLocal!
                    }
                    if self.monthGaapPretaxGrossAmount != nil {
                        map["MonthGaapPretaxGrossAmount"] = self.monthGaapPretaxGrossAmount!
                    }
                    if self.monthGaapPricingDiscount != nil {
                        map["MonthGaapPricingDiscount"] = self.monthGaapPricingDiscount!
                    }
                    if self.orderId != nil {
                        map["OrderId"] = self.orderId!
                    }
                    if self.orderType != nil {
                        map["OrderType"] = self.orderType!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.payTime != nil {
                        map["PayTime"] = self.payTime!
                    }
                    if self.payerAccount != nil {
                        map["PayerAccount"] = self.payerAccount!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.paymentCurrency != nil {
                        map["PaymentCurrency"] = self.paymentCurrency!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxAmountLocal != nil {
                        map["PretaxAmountLocal"] = self.pretaxAmountLocal!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.pricingDiscount != nil {
                        map["PricingDiscount"] = self.pricingDiscount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.resourceGroup != nil {
                        map["ResourceGroup"] = self.resourceGroup!
                    }
                    if self.subOrderId != nil {
                        map["SubOrderId"] = self.subOrderId!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.unallocatedDeductedByCashCoupons != nil {
                        map["UnallocatedDeductedByCashCoupons"] = self.unallocatedDeductedByCashCoupons!
                    }
                    if self.unallocatedDeductedByCoupons != nil {
                        map["UnallocatedDeductedByCoupons"] = self.unallocatedDeductedByCoupons!
                    }
                    if self.unallocatedDeductedByPrepaidCard != nil {
                        map["UnallocatedDeductedByPrepaidCard"] = self.unallocatedDeductedByPrepaidCard!
                    }
                    if self.unallocatedPaymentAmount != nil {
                        map["UnallocatedPaymentAmount"] = self.unallocatedPaymentAmount!
                    }
                    if self.unallocatedPretaxAmount != nil {
                        map["UnallocatedPretaxAmount"] = self.unallocatedPretaxAmount!
                    }
                    if self.unallocatedPretaxAmountLocal != nil {
                        map["UnallocatedPretaxAmountLocal"] = self.unallocatedPretaxAmountLocal!
                    }
                    if self.unallocatedPretaxGrossAmount != nil {
                        map["UnallocatedPretaxGrossAmount"] = self.unallocatedPretaxGrossAmount!
                    }
                    if self.unallocatedPricingDiscount != nil {
                        map["UnallocatedPricingDiscount"] = self.unallocatedPricingDiscount!
                    }
                    if self.usageEndDate != nil {
                        map["UsageEndDate"] = self.usageEndDate!
                    }
                    if self.usageStartDate != nil {
                        map["UsageStartDate"] = self.usageStartDate!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountingUnit"] as? String {
                        self.accountingUnit = value
                    }
                    if let value = dict["BillType"] as? String {
                        self.billType = value
                    }
                    if let value = dict["BillingCycle"] as? String {
                        self.billingCycle = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? String {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? String {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? String {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["GaapDeductedByCashCoupons"] as? String {
                        self.gaapDeductedByCashCoupons = value
                    }
                    if let value = dict["GaapDeductedByCoupons"] as? String {
                        self.gaapDeductedByCoupons = value
                    }
                    if let value = dict["GaapDeductedByPrepaidCard"] as? String {
                        self.gaapDeductedByPrepaidCard = value
                    }
                    if let value = dict["GaapPaymentAmount"] as? String {
                        self.gaapPaymentAmount = value
                    }
                    if let value = dict["GaapPretaxAmount"] as? String {
                        self.gaapPretaxAmount = value
                    }
                    if let value = dict["GaapPretaxAmountLocal"] as? String {
                        self.gaapPretaxAmountLocal = value
                    }
                    if let value = dict["GaapPretaxGrossAmount"] as? String {
                        self.gaapPretaxGrossAmount = value
                    }
                    if let value = dict["GaapPricingDiscount"] as? String {
                        self.gaapPricingDiscount = value
                    }
                    if let value = dict["InstanceID"] as? String {
                        self.instanceID = value
                    }
                    if let value = dict["MonthGaapDeductedByCashCoupons"] as? String {
                        self.monthGaapDeductedByCashCoupons = value
                    }
                    if let value = dict["MonthGaapDeductedByCoupons"] as? String {
                        self.monthGaapDeductedByCoupons = value
                    }
                    if let value = dict["MonthGaapDeductedByPrepaidCard"] as? String {
                        self.monthGaapDeductedByPrepaidCard = value
                    }
                    if let value = dict["MonthGaapPaymentAmount"] as? String {
                        self.monthGaapPaymentAmount = value
                    }
                    if let value = dict["MonthGaapPretaxAmount"] as? String {
                        self.monthGaapPretaxAmount = value
                    }
                    if let value = dict["MonthGaapPretaxAmountLocal"] as? String {
                        self.monthGaapPretaxAmountLocal = value
                    }
                    if let value = dict["MonthGaapPretaxGrossAmount"] as? String {
                        self.monthGaapPretaxGrossAmount = value
                    }
                    if let value = dict["MonthGaapPricingDiscount"] as? String {
                        self.monthGaapPricingDiscount = value
                    }
                    if let value = dict["OrderId"] as? String {
                        self.orderId = value
                    }
                    if let value = dict["OrderType"] as? String {
                        self.orderType = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["PayTime"] as? String {
                        self.payTime = value
                    }
                    if let value = dict["PayerAccount"] as? String {
                        self.payerAccount = value
                    }
                    if let value = dict["PaymentAmount"] as? String {
                        self.paymentAmount = value
                    }
                    if let value = dict["PaymentCurrency"] as? String {
                        self.paymentCurrency = value
                    }
                    if let value = dict["PretaxAmount"] as? String {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxAmountLocal"] as? String {
                        self.pretaxAmountLocal = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? String {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["PricingDiscount"] as? String {
                        self.pricingDiscount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["ResourceGroup"] as? String {
                        self.resourceGroup = value
                    }
                    if let value = dict["SubOrderId"] as? String {
                        self.subOrderId = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["UnallocatedDeductedByCashCoupons"] as? String {
                        self.unallocatedDeductedByCashCoupons = value
                    }
                    if let value = dict["UnallocatedDeductedByCoupons"] as? String {
                        self.unallocatedDeductedByCoupons = value
                    }
                    if let value = dict["UnallocatedDeductedByPrepaidCard"] as? String {
                        self.unallocatedDeductedByPrepaidCard = value
                    }
                    if let value = dict["UnallocatedPaymentAmount"] as? String {
                        self.unallocatedPaymentAmount = value
                    }
                    if let value = dict["UnallocatedPretaxAmount"] as? String {
                        self.unallocatedPretaxAmount = value
                    }
                    if let value = dict["UnallocatedPretaxAmountLocal"] as? String {
                        self.unallocatedPretaxAmountLocal = value
                    }
                    if let value = dict["UnallocatedPretaxGrossAmount"] as? String {
                        self.unallocatedPretaxGrossAmount = value
                    }
                    if let value = dict["UnallocatedPricingDiscount"] as? String {
                        self.unallocatedPricingDiscount = value
                    }
                    if let value = dict["UsageEndDate"] as? String {
                        self.usageEndDate = value
                    }
                    if let value = dict["UsageStartDate"] as? String {
                        self.usageStartDate = value
                    }
                }
            }
            public var module: [QueryInstanceGaapCostResponseBody.Data.Modules.Module]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.module != nil {
                    var tmp : [Any] = []
                    for k in self.module! {
                        tmp.append(k.toMap())
                    }
                    map["Module"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Module"] as? [Any?] {
                    var tmp : [QueryInstanceGaapCostResponseBody.Data.Modules.Module] = []
                    for v in value {
                        if v != nil {
                            var model = QueryInstanceGaapCostResponseBody.Data.Modules.Module()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.module = tmp
                }
            }
        }
        public var hostId: String?

        public var modules: QueryInstanceGaapCostResponseBody.Data.Modules?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.modules?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.modules != nil {
                map["Modules"] = self.modules?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["Modules"] as? [String: Any?] {
                var model = QueryInstanceGaapCostResponseBody.Data.Modules()
                model.fromMap(value)
                self.modules = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryInstanceGaapCostResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryInstanceGaapCostResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryInstanceGaapCostResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryInstanceGaapCostResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryInstanceGaapCostResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryInvoicingCustomerListRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class QueryInvoicingCustomerListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CustomerInvoiceList : Tea.TeaModel {
            public class CustomerInvoice : Tea.TeaModel {
                public var adjustType: Int64?

                public var bank: String?

                public var bankNo: String?

                public var customerType: Int64?

                public var defaultRemark: String?

                public var endCycle: Int64?

                public var gmtCreate: String?

                public var id: Int64?

                public var invoiceTitle: String?

                public var issueType: Int64?

                public var operatingLicenseAddress: String?

                public var operatingLicensePhone: String?

                public var registerNo: String?

                public var startCycle: Int64?

                public var status: Int64?

                public var taxationLicense: String?

                public var taxpayerType: Int64?

                public var titleChangeInstructions: String?

                public var type: Int64?

                public var userId: Int64?

                public var userNick: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustType != nil {
                        map["AdjustType"] = self.adjustType!
                    }
                    if self.bank != nil {
                        map["Bank"] = self.bank!
                    }
                    if self.bankNo != nil {
                        map["BankNo"] = self.bankNo!
                    }
                    if self.customerType != nil {
                        map["CustomerType"] = self.customerType!
                    }
                    if self.defaultRemark != nil {
                        map["DefaultRemark"] = self.defaultRemark!
                    }
                    if self.endCycle != nil {
                        map["EndCycle"] = self.endCycle!
                    }
                    if self.gmtCreate != nil {
                        map["GmtCreate"] = self.gmtCreate!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.invoiceTitle != nil {
                        map["InvoiceTitle"] = self.invoiceTitle!
                    }
                    if self.issueType != nil {
                        map["IssueType"] = self.issueType!
                    }
                    if self.operatingLicenseAddress != nil {
                        map["OperatingLicenseAddress"] = self.operatingLicenseAddress!
                    }
                    if self.operatingLicensePhone != nil {
                        map["OperatingLicensePhone"] = self.operatingLicensePhone!
                    }
                    if self.registerNo != nil {
                        map["RegisterNo"] = self.registerNo!
                    }
                    if self.startCycle != nil {
                        map["StartCycle"] = self.startCycle!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.taxationLicense != nil {
                        map["TaxationLicense"] = self.taxationLicense!
                    }
                    if self.taxpayerType != nil {
                        map["TaxpayerType"] = self.taxpayerType!
                    }
                    if self.titleChangeInstructions != nil {
                        map["TitleChangeInstructions"] = self.titleChangeInstructions!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    if self.userNick != nil {
                        map["UserNick"] = self.userNick!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustType"] as? Int64 {
                        self.adjustType = value
                    }
                    if let value = dict["Bank"] as? String {
                        self.bank = value
                    }
                    if let value = dict["BankNo"] as? String {
                        self.bankNo = value
                    }
                    if let value = dict["CustomerType"] as? Int64 {
                        self.customerType = value
                    }
                    if let value = dict["DefaultRemark"] as? String {
                        self.defaultRemark = value
                    }
                    if let value = dict["EndCycle"] as? Int64 {
                        self.endCycle = value
                    }
                    if let value = dict["GmtCreate"] as? String {
                        self.gmtCreate = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["InvoiceTitle"] as? String {
                        self.invoiceTitle = value
                    }
                    if let value = dict["IssueType"] as? Int64 {
                        self.issueType = value
                    }
                    if let value = dict["OperatingLicenseAddress"] as? String {
                        self.operatingLicenseAddress = value
                    }
                    if let value = dict["OperatingLicensePhone"] as? String {
                        self.operatingLicensePhone = value
                    }
                    if let value = dict["RegisterNo"] as? String {
                        self.registerNo = value
                    }
                    if let value = dict["StartCycle"] as? Int64 {
                        self.startCycle = value
                    }
                    if let value = dict["Status"] as? Int64 {
                        self.status = value
                    }
                    if let value = dict["TaxationLicense"] as? String {
                        self.taxationLicense = value
                    }
                    if let value = dict["TaxpayerType"] as? Int64 {
                        self.taxpayerType = value
                    }
                    if let value = dict["TitleChangeInstructions"] as? String {
                        self.titleChangeInstructions = value
                    }
                    if let value = dict["Type"] as? Int64 {
                        self.type = value
                    }
                    if let value = dict["UserId"] as? Int64 {
                        self.userId = value
                    }
                    if let value = dict["UserNick"] as? String {
                        self.userNick = value
                    }
                }
            }
            public var customerInvoice: [QueryInvoicingCustomerListResponseBody.Data.CustomerInvoiceList.CustomerInvoice]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customerInvoice != nil {
                    var tmp : [Any] = []
                    for k in self.customerInvoice! {
                        tmp.append(k.toMap())
                    }
                    map["CustomerInvoice"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomerInvoice"] as? [Any?] {
                    var tmp : [QueryInvoicingCustomerListResponseBody.Data.CustomerInvoiceList.CustomerInvoice] = []
                    for v in value {
                        if v != nil {
                            var model = QueryInvoicingCustomerListResponseBody.Data.CustomerInvoiceList.CustomerInvoice()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.customerInvoice = tmp
                }
            }
        }
        public var customerInvoiceList: QueryInvoicingCustomerListResponseBody.Data.CustomerInvoiceList?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customerInvoiceList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customerInvoiceList != nil {
                map["CustomerInvoiceList"] = self.customerInvoiceList?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomerInvoiceList"] as? [String: Any?] {
                var model = QueryInvoicingCustomerListResponseBody.Data.CustomerInvoiceList()
                model.fromMap(value)
                self.customerInvoiceList = model
            }
        }
    }
    public var code: String?

    public var data: QueryInvoicingCustomerListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryInvoicingCustomerListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryInvoicingCustomerListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryInvoicingCustomerListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryInvoicingCustomerListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryOrdersRequest : Tea.TeaModel {
    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var orderType: String?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var paymentStatus: String?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.paymentStatus != nil {
            map["PaymentStatus"] = self.paymentStatus!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PaymentStatus"] as? String {
            self.paymentStatus = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class QueryOrdersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class OrderList : Tea.TeaModel {
            public class Order : Tea.TeaModel {
                public var afterTaxAmount: String?

                public var commodityCode: String?

                public var createTime: String?

                public var currency: String?

                public var orderId: String?

                public var orderType: String?

                public var paymentCurrency: String?

                public var paymentStatus: String?

                public var paymentTime: String?

                public var pretaxAmount: String?

                public var pretaxAmountLocal: String?

                public var pretaxGrossAmount: String?

                public var productCode: String?

                public var productType: String?

                public var relatedOrderId: String?

                public var subscriptionType: String?

                public var tax: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.afterTaxAmount != nil {
                        map["AfterTaxAmount"] = self.afterTaxAmount!
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.orderId != nil {
                        map["OrderId"] = self.orderId!
                    }
                    if self.orderType != nil {
                        map["OrderType"] = self.orderType!
                    }
                    if self.paymentCurrency != nil {
                        map["PaymentCurrency"] = self.paymentCurrency!
                    }
                    if self.paymentStatus != nil {
                        map["PaymentStatus"] = self.paymentStatus!
                    }
                    if self.paymentTime != nil {
                        map["PaymentTime"] = self.paymentTime!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxAmountLocal != nil {
                        map["PretaxAmountLocal"] = self.pretaxAmountLocal!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.relatedOrderId != nil {
                        map["RelatedOrderId"] = self.relatedOrderId!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tax != nil {
                        map["Tax"] = self.tax!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AfterTaxAmount"] as? String {
                        self.afterTaxAmount = value
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["CreateTime"] as? String {
                        self.createTime = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["OrderId"] as? String {
                        self.orderId = value
                    }
                    if let value = dict["OrderType"] as? String {
                        self.orderType = value
                    }
                    if let value = dict["PaymentCurrency"] as? String {
                        self.paymentCurrency = value
                    }
                    if let value = dict["PaymentStatus"] as? String {
                        self.paymentStatus = value
                    }
                    if let value = dict["PaymentTime"] as? String {
                        self.paymentTime = value
                    }
                    if let value = dict["PretaxAmount"] as? String {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxAmountLocal"] as? String {
                        self.pretaxAmountLocal = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? String {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["RelatedOrderId"] as? String {
                        self.relatedOrderId = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tax"] as? String {
                        self.tax = value
                    }
                }
            }
            public var order: [QueryOrdersResponseBody.Data.OrderList.Order]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.order != nil {
                    var tmp : [Any] = []
                    for k in self.order! {
                        tmp.append(k.toMap())
                    }
                    map["Order"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Order"] as? [Any?] {
                    var tmp : [QueryOrdersResponseBody.Data.OrderList.Order] = []
                    for v in value {
                        if v != nil {
                            var model = QueryOrdersResponseBody.Data.OrderList.Order()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.order = tmp
                }
            }
        }
        public var hostName: String?

        public var orderList: QueryOrdersResponseBody.Data.OrderList?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.orderList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.orderList != nil {
                map["OrderList"] = self.orderList?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["OrderList"] as? [String: Any?] {
                var model = QueryOrdersResponseBody.Data.OrderList()
                model.fromMap(value)
                self.orderList = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryOrdersResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryOrdersResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryOrdersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryOrdersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryOrdersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPermissionListRequest : Tea.TeaModel {
    public var relationId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.relationId != nil {
            map["RelationId"] = self.relationId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RelationId"] as? Int64 {
            self.relationId = value
        }
    }
}

public class QueryPermissionListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PermissionList : Tea.TeaModel {
            public var endTime: String?

            public var permissionCode: String?

            public var permissionName: String?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.permissionCode != nil {
                    map["PermissionCode"] = self.permissionCode!
                }
                if self.permissionName != nil {
                    map["PermissionName"] = self.permissionName!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["PermissionCode"] as? String {
                    self.permissionCode = value
                }
                if let value = dict["PermissionName"] as? String {
                    self.permissionName = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public var endTime: String?

        public var masterId: Int64?

        public var memberId: Int64?

        public var permissionList: [QueryPermissionListResponseBody.Data.PermissionList]?

        public var relationType: String?

        public var setupTime: String?

        public var startTime: String?

        public var state: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.masterId != nil {
                map["MasterId"] = self.masterId!
            }
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.permissionList != nil {
                var tmp : [Any] = []
                for k in self.permissionList! {
                    tmp.append(k.toMap())
                }
                map["PermissionList"] = tmp
            }
            if self.relationType != nil {
                map["RelationType"] = self.relationType!
            }
            if self.setupTime != nil {
                map["SetupTime"] = self.setupTime!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.state != nil {
                map["State"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["MasterId"] as? Int64 {
                self.masterId = value
            }
            if let value = dict["MemberId"] as? Int64 {
                self.memberId = value
            }
            if let value = dict["PermissionList"] as? [Any?] {
                var tmp : [QueryPermissionListResponseBody.Data.PermissionList] = []
                for v in value {
                    if v != nil {
                        var model = QueryPermissionListResponseBody.Data.PermissionList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.permissionList = tmp
            }
            if let value = dict["RelationType"] as? String {
                self.relationType = value
            }
            if let value = dict["SetupTime"] as? String {
                self.setupTime = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["State"] as? String {
                self.state = value
            }
        }
    }
    public var code: String?

    public var data: QueryPermissionListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryPermissionListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryPermissionListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPermissionListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPermissionListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPrepaidCardsRequest : Tea.TeaModel {
    public var effectiveOrNot: Bool?

    public var expiryTimeEnd: String?

    public var expiryTimeStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.effectiveOrNot != nil {
            map["EffectiveOrNot"] = self.effectiveOrNot!
        }
        if self.expiryTimeEnd != nil {
            map["ExpiryTimeEnd"] = self.expiryTimeEnd!
        }
        if self.expiryTimeStart != nil {
            map["ExpiryTimeStart"] = self.expiryTimeStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EffectiveOrNot"] as? Bool {
            self.effectiveOrNot = value
        }
        if let value = dict["ExpiryTimeEnd"] as? String {
            self.expiryTimeEnd = value
        }
        if let value = dict["ExpiryTimeStart"] as? String {
            self.expiryTimeStart = value
        }
    }
}

public class QueryPrepaidCardsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PrepaidCard : Tea.TeaModel {
            public var applicableProducts: String?

            public var applicableScenarios: String?

            public var balance: String?

            public var effectiveTime: String?

            public var expiryTime: String?

            public var grantedTime: String?

            public var nominalValue: String?

            public var prepaidCardId: Int64?

            public var prepaidCardNo: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicableProducts != nil {
                    map["ApplicableProducts"] = self.applicableProducts!
                }
                if self.applicableScenarios != nil {
                    map["ApplicableScenarios"] = self.applicableScenarios!
                }
                if self.balance != nil {
                    map["Balance"] = self.balance!
                }
                if self.effectiveTime != nil {
                    map["EffectiveTime"] = self.effectiveTime!
                }
                if self.expiryTime != nil {
                    map["ExpiryTime"] = self.expiryTime!
                }
                if self.grantedTime != nil {
                    map["GrantedTime"] = self.grantedTime!
                }
                if self.nominalValue != nil {
                    map["NominalValue"] = self.nominalValue!
                }
                if self.prepaidCardId != nil {
                    map["PrepaidCardId"] = self.prepaidCardId!
                }
                if self.prepaidCardNo != nil {
                    map["PrepaidCardNo"] = self.prepaidCardNo!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicableProducts"] as? String {
                    self.applicableProducts = value
                }
                if let value = dict["ApplicableScenarios"] as? String {
                    self.applicableScenarios = value
                }
                if let value = dict["Balance"] as? String {
                    self.balance = value
                }
                if let value = dict["EffectiveTime"] as? String {
                    self.effectiveTime = value
                }
                if let value = dict["ExpiryTime"] as? String {
                    self.expiryTime = value
                }
                if let value = dict["GrantedTime"] as? String {
                    self.grantedTime = value
                }
                if let value = dict["NominalValue"] as? String {
                    self.nominalValue = value
                }
                if let value = dict["PrepaidCardId"] as? Int64 {
                    self.prepaidCardId = value
                }
                if let value = dict["PrepaidCardNo"] as? String {
                    self.prepaidCardNo = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var prepaidCard: [QueryPrepaidCardsResponseBody.Data.PrepaidCard]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.prepaidCard != nil {
                var tmp : [Any] = []
                for k in self.prepaidCard! {
                    tmp.append(k.toMap())
                }
                map["PrepaidCard"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PrepaidCard"] as? [Any?] {
                var tmp : [QueryPrepaidCardsResponseBody.Data.PrepaidCard] = []
                for v in value {
                    if v != nil {
                        var model = QueryPrepaidCardsResponseBody.Data.PrepaidCard()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.prepaidCard = tmp
            }
        }
    }
    public var code: String?

    public var data: QueryPrepaidCardsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryPrepaidCardsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryPrepaidCardsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPrepaidCardsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPrepaidCardsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPriceEntityListRequest : Tea.TeaModel {
    public var commodityCode: String?

    public var lang: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
    }
}

public class QueryPriceEntityListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class PriceEntityInfoList : Tea.TeaModel {
            public class PriceFactorList : Tea.TeaModel {
                public var priceFactorCode: String?

                public var priceFactorName: String?

                public var priceFactorValueList: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.priceFactorCode != nil {
                        map["PriceFactorCode"] = self.priceFactorCode!
                    }
                    if self.priceFactorName != nil {
                        map["PriceFactorName"] = self.priceFactorName!
                    }
                    if self.priceFactorValueList != nil {
                        map["PriceFactorValueList"] = self.priceFactorValueList!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PriceFactorCode"] as? String {
                        self.priceFactorCode = value
                    }
                    if let value = dict["PriceFactorName"] as? String {
                        self.priceFactorName = value
                    }
                    if let value = dict["PriceFactorValueList"] as? [String] {
                        self.priceFactorValueList = value
                    }
                }
            }
            public var priceEntityCode: String?

            public var priceEntityName: String?

            public var priceFactorList: [QueryPriceEntityListResponseBody.Data.PriceEntityInfoList.PriceFactorList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.priceEntityCode != nil {
                    map["PriceEntityCode"] = self.priceEntityCode!
                }
                if self.priceEntityName != nil {
                    map["PriceEntityName"] = self.priceEntityName!
                }
                if self.priceFactorList != nil {
                    var tmp : [Any] = []
                    for k in self.priceFactorList! {
                        tmp.append(k.toMap())
                    }
                    map["PriceFactorList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PriceEntityCode"] as? String {
                    self.priceEntityCode = value
                }
                if let value = dict["PriceEntityName"] as? String {
                    self.priceEntityName = value
                }
                if let value = dict["PriceFactorList"] as? [Any?] {
                    var tmp : [QueryPriceEntityListResponseBody.Data.PriceEntityInfoList.PriceFactorList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryPriceEntityListResponseBody.Data.PriceEntityInfoList.PriceFactorList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.priceFactorList = tmp
                }
            }
        }
        public var priceEntityInfoList: [QueryPriceEntityListResponseBody.Data.PriceEntityInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.priceEntityInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceEntityInfoList! {
                    tmp.append(k.toMap())
                }
                map["PriceEntityInfoList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PriceEntityInfoList"] as? [Any?] {
                var tmp : [QueryPriceEntityListResponseBody.Data.PriceEntityInfoList] = []
                for v in value {
                    if v != nil {
                        var model = QueryPriceEntityListResponseBody.Data.PriceEntityInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.priceEntityInfoList = tmp
            }
        }
    }
    public var code: String?

    public var data: QueryPriceEntityListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryPriceEntityListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryPriceEntityListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPriceEntityListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPriceEntityListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryProductListRequest : Tea.TeaModel {
    public var pageNum: Int32?

    public var pageSize: Int32?

    public var queryTotalCount: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryTotalCount != nil {
            map["QueryTotalCount"] = self.queryTotalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryTotalCount"] as? Bool {
            self.queryTotalCount = value
        }
    }
}

public class QueryProductListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ProductList : Tea.TeaModel {
            public class Product : Tea.TeaModel {
                public var productCode: String?

                public var productName: String?

                public var productType: String?

                public var subscriptionType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                }
            }
            public var product: [QueryProductListResponseBody.Data.ProductList.Product]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.product != nil {
                    var tmp : [Any] = []
                    for k in self.product! {
                        tmp.append(k.toMap())
                    }
                    map["Product"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Product"] as? [Any?] {
                    var tmp : [QueryProductListResponseBody.Data.ProductList.Product] = []
                    for v in value {
                        if v != nil {
                            var model = QueryProductListResponseBody.Data.ProductList.Product()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.product = tmp
                }
            }
        }
        public var pageNum: Int32?

        public var pageSize: Int32?

        public var productList: QueryProductListResponseBody.Data.ProductList?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.productList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.productList != nil {
                map["ProductList"] = self.productList?.toMap()
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["ProductList"] as? [String: Any?] {
                var model = QueryProductListResponseBody.Data.ProductList()
                model.fromMap(value)
                self.productList = model
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryProductListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryProductListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryProductListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryProductListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryProductListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryRIUtilizationDetailRequest : Tea.TeaModel {
    public var deductedInstanceId: String?

    public var endTime: String?

    public var instanceSpec: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var RICommodityCode: String?

    public var RIInstanceId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deductedInstanceId != nil {
            map["DeductedInstanceId"] = self.deductedInstanceId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceSpec != nil {
            map["InstanceSpec"] = self.instanceSpec!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.RICommodityCode != nil {
            map["RICommodityCode"] = self.RICommodityCode!
        }
        if self.RIInstanceId != nil {
            map["RIInstanceId"] = self.RIInstanceId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeductedInstanceId"] as? String {
            self.deductedInstanceId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceSpec"] as? String {
            self.instanceSpec = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RICommodityCode"] as? String {
            self.RICommodityCode = value
        }
        if let value = dict["RIInstanceId"] as? String {
            self.RIInstanceId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class QueryRIUtilizationDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DetailList : Tea.TeaModel {
            public class DetailList : Tea.TeaModel {
                public var deductDate: String?

                public var deductFactorTotal: Double?

                public var deductHours: String?

                public var deductQuantity: Double?

                public var deductedCommodityCode: String?

                public var deductedInstanceId: String?

                public var deductedProductDetail: String?

                public var instanceSpec: String?

                public var RIInstanceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.deductDate != nil {
                        map["DeductDate"] = self.deductDate!
                    }
                    if self.deductFactorTotal != nil {
                        map["DeductFactorTotal"] = self.deductFactorTotal!
                    }
                    if self.deductHours != nil {
                        map["DeductHours"] = self.deductHours!
                    }
                    if self.deductQuantity != nil {
                        map["DeductQuantity"] = self.deductQuantity!
                    }
                    if self.deductedCommodityCode != nil {
                        map["DeductedCommodityCode"] = self.deductedCommodityCode!
                    }
                    if self.deductedInstanceId != nil {
                        map["DeductedInstanceId"] = self.deductedInstanceId!
                    }
                    if self.deductedProductDetail != nil {
                        map["DeductedProductDetail"] = self.deductedProductDetail!
                    }
                    if self.instanceSpec != nil {
                        map["InstanceSpec"] = self.instanceSpec!
                    }
                    if self.RIInstanceId != nil {
                        map["RIInstanceId"] = self.RIInstanceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DeductDate"] as? String {
                        self.deductDate = value
                    }
                    if let value = dict["DeductFactorTotal"] as? Double {
                        self.deductFactorTotal = value
                    }
                    if let value = dict["DeductHours"] as? String {
                        self.deductHours = value
                    }
                    if let value = dict["DeductQuantity"] as? Double {
                        self.deductQuantity = value
                    }
                    if let value = dict["DeductedCommodityCode"] as? String {
                        self.deductedCommodityCode = value
                    }
                    if let value = dict["DeductedInstanceId"] as? String {
                        self.deductedInstanceId = value
                    }
                    if let value = dict["DeductedProductDetail"] as? String {
                        self.deductedProductDetail = value
                    }
                    if let value = dict["InstanceSpec"] as? String {
                        self.instanceSpec = value
                    }
                    if let value = dict["RIInstanceId"] as? String {
                        self.RIInstanceId = value
                    }
                }
            }
            public var detailList: [QueryRIUtilizationDetailResponseBody.Data.DetailList.DetailList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detailList != nil {
                    var tmp : [Any] = []
                    for k in self.detailList! {
                        tmp.append(k.toMap())
                    }
                    map["DetailList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DetailList"] as? [Any?] {
                    var tmp : [QueryRIUtilizationDetailResponseBody.Data.DetailList.DetailList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryRIUtilizationDetailResponseBody.Data.DetailList.DetailList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.detailList = tmp
                }
            }
        }
        public var detailList: QueryRIUtilizationDetailResponseBody.Data.DetailList?

        public var pageNum: Int64?

        public var pageSize: Int64?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detailList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detailList != nil {
                map["DetailList"] = self.detailList?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DetailList"] as? [String: Any?] {
                var model = QueryRIUtilizationDetailResponseBody.Data.DetailList()
                model.fromMap(value)
                self.detailList = model
            }
            if let value = dict["PageNum"] as? Int64 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryRIUtilizationDetailResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryRIUtilizationDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryRIUtilizationDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryRIUtilizationDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryRIUtilizationDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryRedeemRequest : Tea.TeaModel {
    public var effectiveOrNot: Bool?

    public var expiryTimeEnd: String?

    public var expiryTimeStart: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.effectiveOrNot != nil {
            map["EffectiveOrNot"] = self.effectiveOrNot!
        }
        if self.expiryTimeEnd != nil {
            map["ExpiryTimeEnd"] = self.expiryTimeEnd!
        }
        if self.expiryTimeStart != nil {
            map["ExpiryTimeStart"] = self.expiryTimeStart!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EffectiveOrNot"] as? Bool {
            self.effectiveOrNot = value
        }
        if let value = dict["ExpiryTimeEnd"] as? String {
            self.expiryTimeEnd = value
        }
        if let value = dict["ExpiryTimeStart"] as? String {
            self.expiryTimeStart = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class QueryRedeemResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Redeem : Tea.TeaModel {
            public class Redeem : Tea.TeaModel {
                public var applicableProducts: String?

                public var balance: String?

                public var effectiveTime: String?

                public var expiryTime: String?

                public var grantedTime: String?

                public var nominalValue: String?

                public var redeemId: String?

                public var redeemNo: String?

                public var specification: String?

                public var status: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.applicableProducts != nil {
                        map["ApplicableProducts"] = self.applicableProducts!
                    }
                    if self.balance != nil {
                        map["Balance"] = self.balance!
                    }
                    if self.effectiveTime != nil {
                        map["EffectiveTime"] = self.effectiveTime!
                    }
                    if self.expiryTime != nil {
                        map["ExpiryTime"] = self.expiryTime!
                    }
                    if self.grantedTime != nil {
                        map["GrantedTime"] = self.grantedTime!
                    }
                    if self.nominalValue != nil {
                        map["NominalValue"] = self.nominalValue!
                    }
                    if self.redeemId != nil {
                        map["RedeemId"] = self.redeemId!
                    }
                    if self.redeemNo != nil {
                        map["RedeemNo"] = self.redeemNo!
                    }
                    if self.specification != nil {
                        map["Specification"] = self.specification!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApplicableProducts"] as? String {
                        self.applicableProducts = value
                    }
                    if let value = dict["Balance"] as? String {
                        self.balance = value
                    }
                    if let value = dict["EffectiveTime"] as? String {
                        self.effectiveTime = value
                    }
                    if let value = dict["ExpiryTime"] as? String {
                        self.expiryTime = value
                    }
                    if let value = dict["GrantedTime"] as? String {
                        self.grantedTime = value
                    }
                    if let value = dict["NominalValue"] as? String {
                        self.nominalValue = value
                    }
                    if let value = dict["RedeemId"] as? String {
                        self.redeemId = value
                    }
                    if let value = dict["RedeemNo"] as? String {
                        self.redeemNo = value
                    }
                    if let value = dict["Specification"] as? String {
                        self.specification = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                }
            }
            public var redeem: [QueryRedeemResponseBody.Data.Redeem.Redeem]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.redeem != nil {
                    var tmp : [Any] = []
                    for k in self.redeem! {
                        tmp.append(k.toMap())
                    }
                    map["Redeem"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Redeem"] as? [Any?] {
                    var tmp : [QueryRedeemResponseBody.Data.Redeem.Redeem] = []
                    for v in value {
                        if v != nil {
                            var model = QueryRedeemResponseBody.Data.Redeem.Redeem()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.redeem = tmp
                }
            }
        }
        public var pageNum: Int64?

        public var pageSize: Int64?

        public var redeem: QueryRedeemResponseBody.Data.Redeem?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.redeem?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.redeem != nil {
                map["Redeem"] = self.redeem?.toMap()
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNum"] as? Int64 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Redeem"] as? [String: Any?] {
                var model = QueryRedeemResponseBody.Data.Redeem()
                model.fromMap(value)
                self.redeem = model
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryRedeemResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryRedeemResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryRedeemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryRedeemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryRedeemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryRelationListRequest : Tea.TeaModel {
    public var pageNum: Int32?

    public var pageSize: Int32?

    public var statusList: [String]?

    public var userId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.statusList != nil {
            map["StatusList"] = self.statusList!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StatusList"] as? [String] {
            self.statusList = value
        }
        if let value = dict["UserId"] as? Int64 {
            self.userId = value
        }
    }
}

public class QueryRelationListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FinancialRelationInfoList : Tea.TeaModel {
            public var accountId: Int64?

            public var accountName: String?

            public var accountNickName: String?

            public var accountType: String?

            public var endTime: String?

            public var relationId: Int64?

            public var relationType: String?

            public var setupTime: String?

            public var startTime: String?

            public var state: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountId != nil {
                    map["AccountId"] = self.accountId!
                }
                if self.accountName != nil {
                    map["AccountName"] = self.accountName!
                }
                if self.accountNickName != nil {
                    map["AccountNickName"] = self.accountNickName!
                }
                if self.accountType != nil {
                    map["AccountType"] = self.accountType!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.relationId != nil {
                    map["RelationId"] = self.relationId!
                }
                if self.relationType != nil {
                    map["RelationType"] = self.relationType!
                }
                if self.setupTime != nil {
                    map["SetupTime"] = self.setupTime!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountId"] as? Int64 {
                    self.accountId = value
                }
                if let value = dict["AccountName"] as? String {
                    self.accountName = value
                }
                if let value = dict["AccountNickName"] as? String {
                    self.accountNickName = value
                }
                if let value = dict["AccountType"] as? String {
                    self.accountType = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["RelationId"] as? Int64 {
                    self.relationId = value
                }
                if let value = dict["RelationType"] as? String {
                    self.relationType = value
                }
                if let value = dict["SetupTime"] as? String {
                    self.setupTime = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
            }
        }
        public var financialRelationInfoList: [QueryRelationListResponseBody.Data.FinancialRelationInfoList]?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.financialRelationInfoList != nil {
                var tmp : [Any] = []
                for k in self.financialRelationInfoList! {
                    tmp.append(k.toMap())
                }
                map["FinancialRelationInfoList"] = tmp
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FinancialRelationInfoList"] as? [Any?] {
                var tmp : [QueryRelationListResponseBody.Data.FinancialRelationInfoList] = []
                for v in value {
                    if v != nil {
                        var model = QueryRelationListResponseBody.Data.FinancialRelationInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.financialRelationInfoList = tmp
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryRelationListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryRelationListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryRelationListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryRelationListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryRelationListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryResellerAvailableQuotaRequest : Tea.TeaModel {
    public var itemCodes: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.itemCodes != nil {
            map["ItemCodes"] = self.itemCodes!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ItemCodes"] as? String {
            self.itemCodes = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class QueryResellerAvailableQuotaResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryResellerAvailableQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryResellerAvailableQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryResellerAvailableQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryResellerUserAlarmThresholdRequest : Tea.TeaModel {
    public var alarmType: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmType != nil {
            map["AlarmType"] = self.alarmType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmType"] as? String {
            self.alarmType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class QueryResellerUserAlarmThresholdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var denominator: Int32?

        public var numerator: Int32?

        public var thresholdAmount: String?

        public var thresholdType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.denominator != nil {
                map["Denominator"] = self.denominator!
            }
            if self.numerator != nil {
                map["Numerator"] = self.numerator!
            }
            if self.thresholdAmount != nil {
                map["ThresholdAmount"] = self.thresholdAmount!
            }
            if self.thresholdType != nil {
                map["ThresholdType"] = self.thresholdType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Denominator"] as? Int32 {
                self.denominator = value
            }
            if let value = dict["Numerator"] as? Int32 {
                self.numerator = value
            }
            if let value = dict["ThresholdAmount"] as? String {
                self.thresholdAmount = value
            }
            if let value = dict["ThresholdType"] as? Int32 {
                self.thresholdType = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var data: [QueryResellerUserAlarmThresholdResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [QueryResellerUserAlarmThresholdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = QueryResellerUserAlarmThresholdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryResellerUserAlarmThresholdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryResellerUserAlarmThresholdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryResellerUserAlarmThresholdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryResourcePackageInstancesRequest : Tea.TeaModel {
    public var expiryTimeEnd: String?

    public var expiryTimeStart: String?

    public var includePartner: Bool?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.expiryTimeEnd != nil {
            map["ExpiryTimeEnd"] = self.expiryTimeEnd!
        }
        if self.expiryTimeStart != nil {
            map["ExpiryTimeStart"] = self.expiryTimeStart!
        }
        if self.includePartner != nil {
            map["IncludePartner"] = self.includePartner!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExpiryTimeEnd"] as? String {
            self.expiryTimeEnd = value
        }
        if let value = dict["ExpiryTimeStart"] as? String {
            self.expiryTimeStart = value
        }
        if let value = dict["IncludePartner"] as? Bool {
            self.includePartner = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
    }
}

public class QueryResourcePackageInstancesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Instances : Tea.TeaModel {
            public class Instance : Tea.TeaModel {
                public class ApplicableProducts : Tea.TeaModel {
                    public var product: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.product != nil {
                            map["Product"] = self.product!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Product"] as? [String] {
                            self.product = value
                        }
                    }
                }
                public var applicableProducts: QueryResourcePackageInstancesResponseBody.Data.Instances.Instance.ApplicableProducts?

                public var commodityCode: String?

                public var deductType: String?

                public var effectiveTime: String?

                public var expiryTime: String?

                public var instanceId: String?

                public var packageType: String?

                public var region: String?

                public var remainingAmount: String?

                public var remainingAmountUnit: String?

                public var remark: String?

                public var status: String?

                public var totalAmount: String?

                public var totalAmountUnit: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.applicableProducts?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.applicableProducts != nil {
                        map["ApplicableProducts"] = self.applicableProducts?.toMap()
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.deductType != nil {
                        map["DeductType"] = self.deductType!
                    }
                    if self.effectiveTime != nil {
                        map["EffectiveTime"] = self.effectiveTime!
                    }
                    if self.expiryTime != nil {
                        map["ExpiryTime"] = self.expiryTime!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.packageType != nil {
                        map["PackageType"] = self.packageType!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.remainingAmount != nil {
                        map["RemainingAmount"] = self.remainingAmount!
                    }
                    if self.remainingAmountUnit != nil {
                        map["RemainingAmountUnit"] = self.remainingAmountUnit!
                    }
                    if self.remark != nil {
                        map["Remark"] = self.remark!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.totalAmount != nil {
                        map["TotalAmount"] = self.totalAmount!
                    }
                    if self.totalAmountUnit != nil {
                        map["TotalAmountUnit"] = self.totalAmountUnit!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApplicableProducts"] as? [String: Any?] {
                        var model = QueryResourcePackageInstancesResponseBody.Data.Instances.Instance.ApplicableProducts()
                        model.fromMap(value)
                        self.applicableProducts = model
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["DeductType"] as? String {
                        self.deductType = value
                    }
                    if let value = dict["EffectiveTime"] as? String {
                        self.effectiveTime = value
                    }
                    if let value = dict["ExpiryTime"] as? String {
                        self.expiryTime = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["PackageType"] as? String {
                        self.packageType = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["RemainingAmount"] as? String {
                        self.remainingAmount = value
                    }
                    if let value = dict["RemainingAmountUnit"] as? String {
                        self.remainingAmountUnit = value
                    }
                    if let value = dict["Remark"] as? String {
                        self.remark = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["TotalAmount"] as? String {
                        self.totalAmount = value
                    }
                    if let value = dict["TotalAmountUnit"] as? String {
                        self.totalAmountUnit = value
                    }
                }
            }
            public var instance: [QueryResourcePackageInstancesResponseBody.Data.Instances.Instance]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instance != nil {
                    var tmp : [Any] = []
                    for k in self.instance! {
                        tmp.append(k.toMap())
                    }
                    map["Instance"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Instance"] as? [Any?] {
                    var tmp : [QueryResourcePackageInstancesResponseBody.Data.Instances.Instance] = []
                    for v in value {
                        if v != nil {
                            var model = QueryResourcePackageInstancesResponseBody.Data.Instances.Instance()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.instance = tmp
                }
            }
        }
        public var hostId: String?

        public var instances: QueryResourcePackageInstancesResponseBody.Data.Instances?

        public var pageNum: String?

        public var pageSize: String?

        public var totalCount: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.instances?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.instances != nil {
                map["Instances"] = self.instances?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["Instances"] as? [String: Any?] {
                var model = QueryResourcePackageInstancesResponseBody.Data.Instances()
                model.fromMap(value)
                self.instances = model
            }
            if let value = dict["PageNum"] as? String {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? String {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? String {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QueryResourcePackageInstancesResponseBody.Data?

    public var message: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryResourcePackageInstancesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class QueryResourcePackageInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryResourcePackageInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryResourcePackageInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySavingsPlansDeductLogRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var instanceType: String?

    public var locale: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.locale != nil {
            map["Locale"] = self.locale!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["Locale"] as? String {
            self.locale = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class QuerySavingsPlansDeductLogResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var billModule: String?

            public var billingCycle: String?

            public var billingOfficialPrice: String?

            public var deductCommodity: String?

            public var deductFee: String?

            public var deductInstanceId: String?

            public var deductRate: String?

            public var deductedOfficialPrice: String?

            public var discountRate: String?

            public var endTime: String?

            public var instanceId: String?

            public var instanceSpec: String?

            public var instanceTypeFamily: String?

            public var ownerId: Int64?

            public var region: String?

            public var savingsType: String?

            public var startTime: String?

            public var userId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.billModule != nil {
                    map["BillModule"] = self.billModule!
                }
                if self.billingCycle != nil {
                    map["BillingCycle"] = self.billingCycle!
                }
                if self.billingOfficialPrice != nil {
                    map["BillingOfficialPrice"] = self.billingOfficialPrice!
                }
                if self.deductCommodity != nil {
                    map["DeductCommodity"] = self.deductCommodity!
                }
                if self.deductFee != nil {
                    map["DeductFee"] = self.deductFee!
                }
                if self.deductInstanceId != nil {
                    map["DeductInstanceId"] = self.deductInstanceId!
                }
                if self.deductRate != nil {
                    map["DeductRate"] = self.deductRate!
                }
                if self.deductedOfficialPrice != nil {
                    map["DeductedOfficialPrice"] = self.deductedOfficialPrice!
                }
                if self.discountRate != nil {
                    map["DiscountRate"] = self.discountRate!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.instanceTypeFamily != nil {
                    map["InstanceTypeFamily"] = self.instanceTypeFamily!
                }
                if self.ownerId != nil {
                    map["OwnerId"] = self.ownerId!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.savingsType != nil {
                    map["SavingsType"] = self.savingsType!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BillModule"] as? String {
                    self.billModule = value
                }
                if let value = dict["BillingCycle"] as? String {
                    self.billingCycle = value
                }
                if let value = dict["BillingOfficialPrice"] as? String {
                    self.billingOfficialPrice = value
                }
                if let value = dict["DeductCommodity"] as? String {
                    self.deductCommodity = value
                }
                if let value = dict["DeductFee"] as? String {
                    self.deductFee = value
                }
                if let value = dict["DeductInstanceId"] as? String {
                    self.deductInstanceId = value
                }
                if let value = dict["DeductRate"] as? String {
                    self.deductRate = value
                }
                if let value = dict["DeductedOfficialPrice"] as? String {
                    self.deductedOfficialPrice = value
                }
                if let value = dict["DiscountRate"] as? String {
                    self.discountRate = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["InstanceTypeFamily"] as? String {
                    self.instanceTypeFamily = value
                }
                if let value = dict["OwnerId"] as? Int64 {
                    self.ownerId = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SavingsType"] as? String {
                    self.savingsType = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["UserId"] as? Int64 {
                    self.userId = value
                }
            }
        }
        public var items: [QuerySavingsPlansDeductLogResponseBody.Data.Items]?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [QuerySavingsPlansDeductLogResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = QuerySavingsPlansDeductLogResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QuerySavingsPlansDeductLogResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QuerySavingsPlansDeductLogResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QuerySavingsPlansDeductLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySavingsPlansDeductLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySavingsPlansDeductLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySavingsPlansDiscountRequest : Tea.TeaModel {
    public var commodityCode: String?

    public var cycle: String?

    public var locale: String?

    public var moduleCode: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var payMode: String?

    public var region: String?

    public var spec: String?

    public var spnCommodityCode: String?

    public var spnType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.cycle != nil {
            map["Cycle"] = self.cycle!
        }
        if self.locale != nil {
            map["Locale"] = self.locale!
        }
        if self.moduleCode != nil {
            map["ModuleCode"] = self.moduleCode!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.payMode != nil {
            map["PayMode"] = self.payMode!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.spec != nil {
            map["Spec"] = self.spec!
        }
        if self.spnCommodityCode != nil {
            map["SpnCommodityCode"] = self.spnCommodityCode!
        }
        if self.spnType != nil {
            map["SpnType"] = self.spnType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Cycle"] as? String {
            self.cycle = value
        }
        if let value = dict["Locale"] as? String {
            self.locale = value
        }
        if let value = dict["ModuleCode"] as? String {
            self.moduleCode = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PayMode"] as? String {
            self.payMode = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["Spec"] as? String {
            self.spec = value
        }
        if let value = dict["SpnCommodityCode"] as? String {
            self.spnCommodityCode = value
        }
        if let value = dict["SpnType"] as? String {
            self.spnType = value
        }
    }
}

public class QuerySavingsPlansDiscountResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var commodityName: String?

            public var contractDiscountRate: String?

            public var cycle: String?

            public var discountRate: String?

            public var moduleName: String?

            public var payMode: String?

            public var region: String?

            public var regionCode: String?

            public var spec: String?

            public var spnType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.commodityName != nil {
                    map["CommodityName"] = self.commodityName!
                }
                if self.contractDiscountRate != nil {
                    map["ContractDiscountRate"] = self.contractDiscountRate!
                }
                if self.cycle != nil {
                    map["Cycle"] = self.cycle!
                }
                if self.discountRate != nil {
                    map["DiscountRate"] = self.discountRate!
                }
                if self.moduleName != nil {
                    map["ModuleName"] = self.moduleName!
                }
                if self.payMode != nil {
                    map["PayMode"] = self.payMode!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.regionCode != nil {
                    map["RegionCode"] = self.regionCode!
                }
                if self.spec != nil {
                    map["Spec"] = self.spec!
                }
                if self.spnType != nil {
                    map["SpnType"] = self.spnType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CommodityName"] as? String {
                    self.commodityName = value
                }
                if let value = dict["ContractDiscountRate"] as? String {
                    self.contractDiscountRate = value
                }
                if let value = dict["Cycle"] as? String {
                    self.cycle = value
                }
                if let value = dict["DiscountRate"] as? String {
                    self.discountRate = value
                }
                if let value = dict["ModuleName"] as? String {
                    self.moduleName = value
                }
                if let value = dict["PayMode"] as? String {
                    self.payMode = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RegionCode"] as? String {
                    self.regionCode = value
                }
                if let value = dict["Spec"] as? String {
                    self.spec = value
                }
                if let value = dict["SpnType"] as? String {
                    self.spnType = value
                }
            }
        }
        public var hostId: String?

        public var items: [QuerySavingsPlansDiscountResponseBody.Data.Items]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [QuerySavingsPlansDiscountResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = QuerySavingsPlansDiscountResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
        }
    }
    public var code: String?

    public var data: QuerySavingsPlansDiscountResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QuerySavingsPlansDiscountResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QuerySavingsPlansDiscountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySavingsPlansDiscountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySavingsPlansDiscountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySavingsPlansInstanceRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var commodityCode: String?

    public var endTime: String?

    public var instanceId: String?

    public var locale: String?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var status: String?

    public var tag: [QuerySavingsPlansInstanceRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.locale != nil {
            map["Locale"] = self.locale!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Locale"] as? String {
            self.locale = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [QuerySavingsPlansInstanceRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = QuerySavingsPlansInstanceRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class QuerySavingsPlansInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var allocationStatus: String?

            public var commodityCode: String?

            public var currency: String?

            public var currentPoolValue: String?

            public var cycle: String?

            public var deductCycleType: String?

            public var endTime: String?

            public var endTimestamp: Int64?

            public var instanceFamily: String?

            public var instanceId: String?

            public var lastBillTotalUsage: String?

            public var lastBillUtilization: String?

            public var payMode: String?

            public var poolValue: String?

            public var prepayFee: String?

            public var region: String?

            public var restPoolValue: String?

            public var savingsType: String?

            public var startTime: String?

            public var startTimestamp: Int64?

            public var status: String?

            public var tags: [QuerySavingsPlansInstanceResponseBody.Data.Items.Tags]?

            public var totalSave: String?

            public var utilization: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allocationStatus != nil {
                    map["AllocationStatus"] = self.allocationStatus!
                }
                if self.commodityCode != nil {
                    map["CommodityCode"] = self.commodityCode!
                }
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.currentPoolValue != nil {
                    map["CurrentPoolValue"] = self.currentPoolValue!
                }
                if self.cycle != nil {
                    map["Cycle"] = self.cycle!
                }
                if self.deductCycleType != nil {
                    map["DeductCycleType"] = self.deductCycleType!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.endTimestamp != nil {
                    map["EndTimestamp"] = self.endTimestamp!
                }
                if self.instanceFamily != nil {
                    map["InstanceFamily"] = self.instanceFamily!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.lastBillTotalUsage != nil {
                    map["LastBillTotalUsage"] = self.lastBillTotalUsage!
                }
                if self.lastBillUtilization != nil {
                    map["LastBillUtilization"] = self.lastBillUtilization!
                }
                if self.payMode != nil {
                    map["PayMode"] = self.payMode!
                }
                if self.poolValue != nil {
                    map["PoolValue"] = self.poolValue!
                }
                if self.prepayFee != nil {
                    map["PrepayFee"] = self.prepayFee!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.restPoolValue != nil {
                    map["RestPoolValue"] = self.restPoolValue!
                }
                if self.savingsType != nil {
                    map["SavingsType"] = self.savingsType!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.startTimestamp != nil {
                    map["StartTimestamp"] = self.startTimestamp!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.tags != nil {
                    var tmp : [Any] = []
                    for k in self.tags! {
                        tmp.append(k.toMap())
                    }
                    map["Tags"] = tmp
                }
                if self.totalSave != nil {
                    map["TotalSave"] = self.totalSave!
                }
                if self.utilization != nil {
                    map["Utilization"] = self.utilization!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AllocationStatus"] as? String {
                    self.allocationStatus = value
                }
                if let value = dict["CommodityCode"] as? String {
                    self.commodityCode = value
                }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["CurrentPoolValue"] as? String {
                    self.currentPoolValue = value
                }
                if let value = dict["Cycle"] as? String {
                    self.cycle = value
                }
                if let value = dict["DeductCycleType"] as? String {
                    self.deductCycleType = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["EndTimestamp"] as? Int64 {
                    self.endTimestamp = value
                }
                if let value = dict["InstanceFamily"] as? String {
                    self.instanceFamily = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["LastBillTotalUsage"] as? String {
                    self.lastBillTotalUsage = value
                }
                if let value = dict["LastBillUtilization"] as? String {
                    self.lastBillUtilization = value
                }
                if let value = dict["PayMode"] as? String {
                    self.payMode = value
                }
                if let value = dict["PoolValue"] as? String {
                    self.poolValue = value
                }
                if let value = dict["PrepayFee"] as? String {
                    self.prepayFee = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RestPoolValue"] as? String {
                    self.restPoolValue = value
                }
                if let value = dict["SavingsType"] as? String {
                    self.savingsType = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["StartTimestamp"] as? Int64 {
                    self.startTimestamp = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Tags"] as? [Any?] {
                    var tmp : [QuerySavingsPlansInstanceResponseBody.Data.Items.Tags] = []
                    for v in value {
                        if v != nil {
                            var model = QuerySavingsPlansInstanceResponseBody.Data.Items.Tags()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tags = tmp
                }
                if let value = dict["TotalSave"] as? String {
                    self.totalSave = value
                }
                if let value = dict["Utilization"] as? String {
                    self.utilization = value
                }
            }
        }
        public var items: [QuerySavingsPlansInstanceResponseBody.Data.Items]?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["Items"] = tmp
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Items"] as? [Any?] {
                var tmp : [QuerySavingsPlansInstanceResponseBody.Data.Items] = []
                for v in value {
                    if v != nil {
                        var model = QuerySavingsPlansInstanceResponseBody.Data.Items()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.items = tmp
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QuerySavingsPlansInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QuerySavingsPlansInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QuerySavingsPlansInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySavingsPlansInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySavingsPlansInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySettleBillRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var isDisplayLocalCurrency: Bool?

    public var isHideZeroCharge: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var recordID: String?

    public var subscriptionType: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.isDisplayLocalCurrency != nil {
            map["IsDisplayLocalCurrency"] = self.isDisplayLocalCurrency!
        }
        if self.isHideZeroCharge != nil {
            map["IsHideZeroCharge"] = self.isHideZeroCharge!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.recordID != nil {
            map["RecordID"] = self.recordID!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["IsDisplayLocalCurrency"] as? Bool {
            self.isDisplayLocalCurrency = value
        }
        if let value = dict["IsHideZeroCharge"] as? Bool {
            self.isHideZeroCharge = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RecordID"] as? String {
            self.recordID = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class QuerySettleBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var adjustAmount: Double?

                public var afterTaxAmount: Double?

                public var billAccountID: String?

                public var billAccountName: String?

                public var bizType: String?

                public var cashAmount: Double?

                public var commodityCode: String?

                public var currency: String?

                public var deductedByCashCoupons: Double?

                public var deductedByCoupons: Double?

                public var deductedByPrepaidCard: Double?

                public var invoiceDiscount: Double?

                public var item: String?

                public var outstandingAmount: Double?

                public var ownerID: String?

                public var paymentAmount: Double?

                public var paymentCurrency: String?

                public var paymentTime: String?

                public var paymentTransactionID: String?

                public var pipCode: String?

                public var pretaxAmount: Double?

                public var pretaxAmountLocal: Double?

                public var pretaxGrossAmount: Double?

                public var productCode: String?

                public var productDetail: String?

                public var productName: String?

                public var productType: String?

                public var recordID: String?

                public var roundDownDiscount: String?

                public var status: String?

                public var subOrderId: String?

                public var subscriptionType: String?

                public var tax: Double?

                public var usageEndTime: String?

                public var usageStartTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustAmount != nil {
                        map["AdjustAmount"] = self.adjustAmount!
                    }
                    if self.afterTaxAmount != nil {
                        map["AfterTaxAmount"] = self.afterTaxAmount!
                    }
                    if self.billAccountID != nil {
                        map["BillAccountID"] = self.billAccountID!
                    }
                    if self.billAccountName != nil {
                        map["BillAccountName"] = self.billAccountName!
                    }
                    if self.bizType != nil {
                        map["BizType"] = self.bizType!
                    }
                    if self.cashAmount != nil {
                        map["CashAmount"] = self.cashAmount!
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.item != nil {
                        map["Item"] = self.item!
                    }
                    if self.outstandingAmount != nil {
                        map["OutstandingAmount"] = self.outstandingAmount!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.paymentCurrency != nil {
                        map["PaymentCurrency"] = self.paymentCurrency!
                    }
                    if self.paymentTime != nil {
                        map["PaymentTime"] = self.paymentTime!
                    }
                    if self.paymentTransactionID != nil {
                        map["PaymentTransactionID"] = self.paymentTransactionID!
                    }
                    if self.pipCode != nil {
                        map["PipCode"] = self.pipCode!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxAmountLocal != nil {
                        map["PretaxAmountLocal"] = self.pretaxAmountLocal!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productDetail != nil {
                        map["ProductDetail"] = self.productDetail!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.recordID != nil {
                        map["RecordID"] = self.recordID!
                    }
                    if self.roundDownDiscount != nil {
                        map["RoundDownDiscount"] = self.roundDownDiscount!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.subOrderId != nil {
                        map["SubOrderId"] = self.subOrderId!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tax != nil {
                        map["Tax"] = self.tax!
                    }
                    if self.usageEndTime != nil {
                        map["UsageEndTime"] = self.usageEndTime!
                    }
                    if self.usageStartTime != nil {
                        map["UsageStartTime"] = self.usageStartTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustAmount"] as? Double {
                        self.adjustAmount = value
                    }
                    if let value = dict["AfterTaxAmount"] as? Double {
                        self.afterTaxAmount = value
                    }
                    if let value = dict["BillAccountID"] as? String {
                        self.billAccountID = value
                    }
                    if let value = dict["BillAccountName"] as? String {
                        self.billAccountName = value
                    }
                    if let value = dict["BizType"] as? String {
                        self.bizType = value
                    }
                    if let value = dict["CashAmount"] as? Double {
                        self.cashAmount = value
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? Double {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? Double {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? Double {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["Item"] as? String {
                        self.item = value
                    }
                    if let value = dict["OutstandingAmount"] as? Double {
                        self.outstandingAmount = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["PaymentAmount"] as? Double {
                        self.paymentAmount = value
                    }
                    if let value = dict["PaymentCurrency"] as? String {
                        self.paymentCurrency = value
                    }
                    if let value = dict["PaymentTime"] as? String {
                        self.paymentTime = value
                    }
                    if let value = dict["PaymentTransactionID"] as? String {
                        self.paymentTransactionID = value
                    }
                    if let value = dict["PipCode"] as? String {
                        self.pipCode = value
                    }
                    if let value = dict["PretaxAmount"] as? Double {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxAmountLocal"] as? Double {
                        self.pretaxAmountLocal = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? Double {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductDetail"] as? String {
                        self.productDetail = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["RecordID"] as? String {
                        self.recordID = value
                    }
                    if let value = dict["RoundDownDiscount"] as? String {
                        self.roundDownDiscount = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["SubOrderId"] as? String {
                        self.subOrderId = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tax"] as? Double {
                        self.tax = value
                    }
                    if let value = dict["UsageEndTime"] as? String {
                        self.usageEndTime = value
                    }
                    if let value = dict["UsageStartTime"] as? String {
                        self.usageStartTime = value
                    }
                }
            }
            public var item: [QuerySettleBillResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QuerySettleBillResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QuerySettleBillResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: QuerySettleBillResponseBody.Data.Items?

        public var maxResults: Int32?

        public var nextToken: String?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QuerySettleBillResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QuerySettleBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QuerySettleBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QuerySettleBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySettleBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySettleBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySkuPriceListRequest : Tea.TeaModel {
    public var commodityCode: String?

    public var lang: String?

    public var nextPageToken: String?

    public var pageSize: Int32?

    public var priceEntityCode: String?

    public var priceFactorConditionMap: [String: [String]]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.nextPageToken != nil {
            map["NextPageToken"] = self.nextPageToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.priceEntityCode != nil {
            map["PriceEntityCode"] = self.priceEntityCode!
        }
        if self.priceFactorConditionMap != nil {
            map["PriceFactorConditionMap"] = self.priceFactorConditionMap!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["NextPageToken"] as? String {
            self.nextPageToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PriceEntityCode"] as? String {
            self.priceEntityCode = value
        }
        if let value = dict["PriceFactorConditionMap"] as? [String: [String]] {
            self.priceFactorConditionMap = value
        }
    }
}

public class QuerySkuPriceListShrinkRequest : Tea.TeaModel {
    public var commodityCode: String?

    public var lang: String?

    public var nextPageToken: String?

    public var pageSize: Int32?

    public var priceEntityCode: String?

    public var priceFactorConditionMapShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.nextPageToken != nil {
            map["NextPageToken"] = self.nextPageToken!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.priceEntityCode != nil {
            map["PriceEntityCode"] = self.priceEntityCode!
        }
        if self.priceFactorConditionMapShrink != nil {
            map["PriceFactorConditionMap"] = self.priceFactorConditionMapShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["NextPageToken"] as? String {
            self.nextPageToken = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PriceEntityCode"] as? String {
            self.priceEntityCode = value
        }
        if let value = dict["PriceFactorConditionMap"] as? String {
            self.priceFactorConditionMapShrink = value
        }
    }
}

public class QuerySkuPriceListResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class SkuPricePage : Tea.TeaModel {
            public class SkuPriceList : Tea.TeaModel {
                public class CskuPriceList : Tea.TeaModel {
                    public class RangeList : Tea.TeaModel {
                        public var factorCode: String?

                        public var max: String?

                        public var min: String?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.factorCode != nil {
                                map["FactorCode"] = self.factorCode!
                            }
                            if self.max != nil {
                                map["Max"] = self.max!
                            }
                            if self.min != nil {
                                map["Min"] = self.min!
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["FactorCode"] as? String {
                                self.factorCode = value
                            }
                            if let value = dict["Max"] as? String {
                                self.max = value
                            }
                            if let value = dict["Min"] as? String {
                                self.min = value
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var cskuCode: String?

                    public var currency: String?

                    public var price: String?

                    public var priceMode: String?

                    public var priceType: String?

                    public var priceUnit: String?

                    public var rangeList: [QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList.CskuPriceList.RangeList]?

                    public var usageUnit: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cskuCode != nil {
                            map["CskuCode"] = self.cskuCode!
                        }
                        if self.currency != nil {
                            map["Currency"] = self.currency!
                        }
                        if self.price != nil {
                            map["Price"] = self.price!
                        }
                        if self.priceMode != nil {
                            map["PriceMode"] = self.priceMode!
                        }
                        if self.priceType != nil {
                            map["PriceType"] = self.priceType!
                        }
                        if self.priceUnit != nil {
                            map["PriceUnit"] = self.priceUnit!
                        }
                        if self.rangeList != nil {
                            var tmp : [Any] = []
                            for k in self.rangeList! {
                                tmp.append(k.toMap())
                            }
                            map["RangeList"] = tmp
                        }
                        if self.usageUnit != nil {
                            map["UsageUnit"] = self.usageUnit!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["CskuCode"] as? String {
                            self.cskuCode = value
                        }
                        if let value = dict["Currency"] as? String {
                            self.currency = value
                        }
                        if let value = dict["Price"] as? String {
                            self.price = value
                        }
                        if let value = dict["PriceMode"] as? String {
                            self.priceMode = value
                        }
                        if let value = dict["PriceType"] as? String {
                            self.priceType = value
                        }
                        if let value = dict["PriceUnit"] as? String {
                            self.priceUnit = value
                        }
                        if let value = dict["RangeList"] as? [Any?] {
                            var tmp : [QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList.CskuPriceList.RangeList] = []
                            for v in value {
                                if v != nil {
                                    var model = QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList.CskuPriceList.RangeList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.rangeList = tmp
                        }
                        if let value = dict["UsageUnit"] as? String {
                            self.usageUnit = value
                        }
                    }
                }
                public var cskuPriceList: [QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList.CskuPriceList]?

                public var skuCode: String?

                public var skuFactorMap: [String: String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cskuPriceList != nil {
                        var tmp : [Any] = []
                        for k in self.cskuPriceList! {
                            tmp.append(k.toMap())
                        }
                        map["CskuPriceList"] = tmp
                    }
                    if self.skuCode != nil {
                        map["SkuCode"] = self.skuCode!
                    }
                    if self.skuFactorMap != nil {
                        map["SkuFactorMap"] = self.skuFactorMap!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CskuPriceList"] as? [Any?] {
                        var tmp : [QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList.CskuPriceList] = []
                        for v in value {
                            if v != nil {
                                var model = QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList.CskuPriceList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.cskuPriceList = tmp
                    }
                    if let value = dict["SkuCode"] as? String {
                        self.skuCode = value
                    }
                    if let value = dict["SkuFactorMap"] as? [String: String] {
                        self.skuFactorMap = value
                    }
                }
            }
            public var nextPageToken: String?

            public var skuPriceList: [QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList]?

            public var totalCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nextPageToken != nil {
                    map["NextPageToken"] = self.nextPageToken!
                }
                if self.skuPriceList != nil {
                    var tmp : [Any] = []
                    for k in self.skuPriceList! {
                        tmp.append(k.toMap())
                    }
                    map["SkuPriceList"] = tmp
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NextPageToken"] as? String {
                    self.nextPageToken = value
                }
                if let value = dict["SkuPriceList"] as? [Any?] {
                    var tmp : [QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList] = []
                    for v in value {
                        if v != nil {
                            var model = QuerySkuPriceListResponseBody.Data.SkuPricePage.SkuPriceList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.skuPriceList = tmp
                }
                if let value = dict["TotalCount"] as? Int32 {
                    self.totalCount = value
                }
            }
        }
        public var skuPricePage: QuerySkuPriceListResponseBody.Data.SkuPricePage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.skuPricePage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.skuPricePage != nil {
                map["SkuPricePage"] = self.skuPricePage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SkuPricePage"] as? [String: Any?] {
                var model = QuerySkuPriceListResponseBody.Data.SkuPricePage()
                model.fromMap(value)
                self.skuPricePage = model
            }
        }
    }
    public var code: String?

    public var data: QuerySkuPriceListResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QuerySkuPriceListResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QuerySkuPriceListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySkuPriceListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySkuPriceListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySplitItemBillRequest : Tea.TeaModel {
    public var billOwnerId: Int64?

    public var billingCycle: String?

    public var ownerId: Int64?

    public var pageNum: Int32?

    public var pageSize: Int32?

    public var productCode: String?

    public var productType: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billOwnerId != nil {
            map["BillOwnerId"] = self.billOwnerId!
        }
        if self.billingCycle != nil {
            map["BillingCycle"] = self.billingCycle!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillOwnerId"] as? Int64 {
            self.billOwnerId = value
        }
        if let value = dict["BillingCycle"] as? String {
            self.billingCycle = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class QuerySplitItemBillResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Item : Tea.TeaModel {
                public var adjustAmount: Double?

                public var billingDate: String?

                public var billingItem: String?

                public var billingType: String?

                public var cashAmount: Double?

                public var commodityCode: String?

                public var costUnit: String?

                public var currency: String?

                public var deductedByCashCoupons: Double?

                public var deductedByCoupons: Double?

                public var deductedByPrepaidCard: Double?

                public var deductedByResourcePackage: String?

                public var instanceConfig: String?

                public var instanceID: String?

                public var instanceSpec: String?

                public var internetIP: String?

                public var intranetIP: String?

                public var invoiceDiscount: Double?

                public var item: String?

                public var listPrice: String?

                public var listPriceUnit: String?

                public var nickName: String?

                public var outstandingAmount: Double?

                public var ownerID: String?

                public var paymentAmount: Double?

                public var pipCode: String?

                public var pretaxAmount: Double?

                public var pretaxGrossAmount: Double?

                public var productCode: String?

                public var productDetail: String?

                public var productName: String?

                public var productType: String?

                public var region: String?

                public var resourceGroup: String?

                public var servicePeriod: String?

                public var servicePeriodUnit: String?

                public var splitAccountID: String?

                public var splitAccountName: String?

                public var splitBillingCycle: String?

                public var splitCommodityCode: String?

                public var splitItemID: String?

                public var splitItemName: String?

                public var splitProductDetail: String?

                public var subscriptionType: String?

                public var tag: String?

                public var usage: String?

                public var usageUnit: String?

                public var zone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adjustAmount != nil {
                        map["AdjustAmount"] = self.adjustAmount!
                    }
                    if self.billingDate != nil {
                        map["BillingDate"] = self.billingDate!
                    }
                    if self.billingItem != nil {
                        map["BillingItem"] = self.billingItem!
                    }
                    if self.billingType != nil {
                        map["BillingType"] = self.billingType!
                    }
                    if self.cashAmount != nil {
                        map["CashAmount"] = self.cashAmount!
                    }
                    if self.commodityCode != nil {
                        map["CommodityCode"] = self.commodityCode!
                    }
                    if self.costUnit != nil {
                        map["CostUnit"] = self.costUnit!
                    }
                    if self.currency != nil {
                        map["Currency"] = self.currency!
                    }
                    if self.deductedByCashCoupons != nil {
                        map["DeductedByCashCoupons"] = self.deductedByCashCoupons!
                    }
                    if self.deductedByCoupons != nil {
                        map["DeductedByCoupons"] = self.deductedByCoupons!
                    }
                    if self.deductedByPrepaidCard != nil {
                        map["DeductedByPrepaidCard"] = self.deductedByPrepaidCard!
                    }
                    if self.deductedByResourcePackage != nil {
                        map["DeductedByResourcePackage"] = self.deductedByResourcePackage!
                    }
                    if self.instanceConfig != nil {
                        map["InstanceConfig"] = self.instanceConfig!
                    }
                    if self.instanceID != nil {
                        map["InstanceID"] = self.instanceID!
                    }
                    if self.instanceSpec != nil {
                        map["InstanceSpec"] = self.instanceSpec!
                    }
                    if self.internetIP != nil {
                        map["InternetIP"] = self.internetIP!
                    }
                    if self.intranetIP != nil {
                        map["IntranetIP"] = self.intranetIP!
                    }
                    if self.invoiceDiscount != nil {
                        map["InvoiceDiscount"] = self.invoiceDiscount!
                    }
                    if self.item != nil {
                        map["Item"] = self.item!
                    }
                    if self.listPrice != nil {
                        map["ListPrice"] = self.listPrice!
                    }
                    if self.listPriceUnit != nil {
                        map["ListPriceUnit"] = self.listPriceUnit!
                    }
                    if self.nickName != nil {
                        map["NickName"] = self.nickName!
                    }
                    if self.outstandingAmount != nil {
                        map["OutstandingAmount"] = self.outstandingAmount!
                    }
                    if self.ownerID != nil {
                        map["OwnerID"] = self.ownerID!
                    }
                    if self.paymentAmount != nil {
                        map["PaymentAmount"] = self.paymentAmount!
                    }
                    if self.pipCode != nil {
                        map["PipCode"] = self.pipCode!
                    }
                    if self.pretaxAmount != nil {
                        map["PretaxAmount"] = self.pretaxAmount!
                    }
                    if self.pretaxGrossAmount != nil {
                        map["PretaxGrossAmount"] = self.pretaxGrossAmount!
                    }
                    if self.productCode != nil {
                        map["ProductCode"] = self.productCode!
                    }
                    if self.productDetail != nil {
                        map["ProductDetail"] = self.productDetail!
                    }
                    if self.productName != nil {
                        map["ProductName"] = self.productName!
                    }
                    if self.productType != nil {
                        map["ProductType"] = self.productType!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.resourceGroup != nil {
                        map["ResourceGroup"] = self.resourceGroup!
                    }
                    if self.servicePeriod != nil {
                        map["ServicePeriod"] = self.servicePeriod!
                    }
                    if self.servicePeriodUnit != nil {
                        map["ServicePeriodUnit"] = self.servicePeriodUnit!
                    }
                    if self.splitAccountID != nil {
                        map["SplitAccountID"] = self.splitAccountID!
                    }
                    if self.splitAccountName != nil {
                        map["SplitAccountName"] = self.splitAccountName!
                    }
                    if self.splitBillingCycle != nil {
                        map["SplitBillingCycle"] = self.splitBillingCycle!
                    }
                    if self.splitCommodityCode != nil {
                        map["SplitCommodityCode"] = self.splitCommodityCode!
                    }
                    if self.splitItemID != nil {
                        map["SplitItemID"] = self.splitItemID!
                    }
                    if self.splitItemName != nil {
                        map["SplitItemName"] = self.splitItemName!
                    }
                    if self.splitProductDetail != nil {
                        map["SplitProductDetail"] = self.splitProductDetail!
                    }
                    if self.subscriptionType != nil {
                        map["SubscriptionType"] = self.subscriptionType!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    if self.usageUnit != nil {
                        map["UsageUnit"] = self.usageUnit!
                    }
                    if self.zone != nil {
                        map["Zone"] = self.zone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdjustAmount"] as? Double {
                        self.adjustAmount = value
                    }
                    if let value = dict["BillingDate"] as? String {
                        self.billingDate = value
                    }
                    if let value = dict["BillingItem"] as? String {
                        self.billingItem = value
                    }
                    if let value = dict["BillingType"] as? String {
                        self.billingType = value
                    }
                    if let value = dict["CashAmount"] as? Double {
                        self.cashAmount = value
                    }
                    if let value = dict["CommodityCode"] as? String {
                        self.commodityCode = value
                    }
                    if let value = dict["CostUnit"] as? String {
                        self.costUnit = value
                    }
                    if let value = dict["Currency"] as? String {
                        self.currency = value
                    }
                    if let value = dict["DeductedByCashCoupons"] as? Double {
                        self.deductedByCashCoupons = value
                    }
                    if let value = dict["DeductedByCoupons"] as? Double {
                        self.deductedByCoupons = value
                    }
                    if let value = dict["DeductedByPrepaidCard"] as? Double {
                        self.deductedByPrepaidCard = value
                    }
                    if let value = dict["DeductedByResourcePackage"] as? String {
                        self.deductedByResourcePackage = value
                    }
                    if let value = dict["InstanceConfig"] as? String {
                        self.instanceConfig = value
                    }
                    if let value = dict["InstanceID"] as? String {
                        self.instanceID = value
                    }
                    if let value = dict["InstanceSpec"] as? String {
                        self.instanceSpec = value
                    }
                    if let value = dict["InternetIP"] as? String {
                        self.internetIP = value
                    }
                    if let value = dict["IntranetIP"] as? String {
                        self.intranetIP = value
                    }
                    if let value = dict["InvoiceDiscount"] as? Double {
                        self.invoiceDiscount = value
                    }
                    if let value = dict["Item"] as? String {
                        self.item = value
                    }
                    if let value = dict["ListPrice"] as? String {
                        self.listPrice = value
                    }
                    if let value = dict["ListPriceUnit"] as? String {
                        self.listPriceUnit = value
                    }
                    if let value = dict["NickName"] as? String {
                        self.nickName = value
                    }
                    if let value = dict["OutstandingAmount"] as? Double {
                        self.outstandingAmount = value
                    }
                    if let value = dict["OwnerID"] as? String {
                        self.ownerID = value
                    }
                    if let value = dict["PaymentAmount"] as? Double {
                        self.paymentAmount = value
                    }
                    if let value = dict["PipCode"] as? String {
                        self.pipCode = value
                    }
                    if let value = dict["PretaxAmount"] as? Double {
                        self.pretaxAmount = value
                    }
                    if let value = dict["PretaxGrossAmount"] as? Double {
                        self.pretaxGrossAmount = value
                    }
                    if let value = dict["ProductCode"] as? String {
                        self.productCode = value
                    }
                    if let value = dict["ProductDetail"] as? String {
                        self.productDetail = value
                    }
                    if let value = dict["ProductName"] as? String {
                        self.productName = value
                    }
                    if let value = dict["ProductType"] as? String {
                        self.productType = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["ResourceGroup"] as? String {
                        self.resourceGroup = value
                    }
                    if let value = dict["ServicePeriod"] as? String {
                        self.servicePeriod = value
                    }
                    if let value = dict["ServicePeriodUnit"] as? String {
                        self.servicePeriodUnit = value
                    }
                    if let value = dict["SplitAccountID"] as? String {
                        self.splitAccountID = value
                    }
                    if let value = dict["SplitAccountName"] as? String {
                        self.splitAccountName = value
                    }
                    if let value = dict["SplitBillingCycle"] as? String {
                        self.splitBillingCycle = value
                    }
                    if let value = dict["SplitCommodityCode"] as? String {
                        self.splitCommodityCode = value
                    }
                    if let value = dict["SplitItemID"] as? String {
                        self.splitItemID = value
                    }
                    if let value = dict["SplitItemName"] as? String {
                        self.splitItemName = value
                    }
                    if let value = dict["SplitProductDetail"] as? String {
                        self.splitProductDetail = value
                    }
                    if let value = dict["SubscriptionType"] as? String {
                        self.subscriptionType = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Usage"] as? String {
                        self.usage = value
                    }
                    if let value = dict["UsageUnit"] as? String {
                        self.usageUnit = value
                    }
                    if let value = dict["Zone"] as? String {
                        self.zone = value
                    }
                }
            }
            public var item: [QuerySplitItemBillResponseBody.Data.Items.Item]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    var tmp : [Any] = []
                    for k in self.item! {
                        tmp.append(k.toMap())
                    }
                    map["Item"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? [Any?] {
                    var tmp : [QuerySplitItemBillResponseBody.Data.Items.Item] = []
                    for v in value {
                        if v != nil {
                            var model = QuerySplitItemBillResponseBody.Data.Items.Item()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.item = tmp
                }
            }
        }
        public var accountID: String?

        public var accountName: String?

        public var billingCycle: String?

        public var items: QuerySplitItemBillResponseBody.Data.Items?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.items?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountID != nil {
                map["AccountID"] = self.accountID!
            }
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.billingCycle != nil {
                map["BillingCycle"] = self.billingCycle!
            }
            if self.items != nil {
                map["Items"] = self.items?.toMap()
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountID"] as? String {
                self.accountID = value
            }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["BillingCycle"] as? String {
                self.billingCycle = value
            }
            if let value = dict["Items"] as? [String: Any?] {
                var model = QuerySplitItemBillResponseBody.Data.Items()
                model.fromMap(value)
                self.items = model
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: QuerySplitItemBillResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QuerySplitItemBillResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QuerySplitItemBillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySplitItemBillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySplitItemBillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryUserOmsDataRequest : Tea.TeaModel {
    public var dataType: String?

    public var endTime: String?

    public var marker: String?

    public var ownerId: Int64?

    public var pageSize: Int32?

    public var startTime: String?

    public var table: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.marker != nil {
            map["Marker"] = self.marker!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.table != nil {
            map["Table"] = self.table!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Marker"] as? String {
            self.marker = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Table"] as? String {
            self.table = value
        }
    }
}

public class QueryUserOmsDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public var marker: String?

        public var omsData: [[String: Any]]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.marker != nil {
                map["Marker"] = self.marker!
            }
            if self.omsData != nil {
                map["OmsData"] = self.omsData!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["Marker"] as? String {
                self.marker = value
            }
            if let value = dict["OmsData"] as? [[String: Any]] {
                self.omsData = value
            }
        }
    }
    public var code: String?

    public var data: QueryUserOmsDataResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryUserOmsDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryUserOmsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryUserOmsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryUserOmsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RefundInstanceRequest : Tea.TeaModel {
    public var clientToken: String?

    public var immediatelyRelease: String?

    public var instanceId: String?

    public var productCode: String?

    public var productType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.immediatelyRelease != nil {
            map["ImmediatelyRelease"] = self.immediatelyRelease!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["ImmediatelyRelease"] as? String {
            self.immediatelyRelease = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
    }
}

public class RefundInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public var orderId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: RefundInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RefundInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RefundInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RefundInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RefundInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReleaseInstanceRequest : Tea.TeaModel {
    public var instanceIds: String?

    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var region: String?

    public var renewStatus: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.renewStatus != nil {
            map["RenewStatus"] = self.renewStatus!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceIds"] as? String {
            self.instanceIds = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RenewStatus"] as? String {
            self.renewStatus = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class ReleaseInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public var releaseResult: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.releaseResult != nil {
                map["ReleaseResult"] = self.releaseResult!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["ReleaseResult"] as? Bool {
                self.releaseResult = value
            }
        }
    }
    public var code: String?

    public var data: ReleaseInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ReleaseInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ReleaseInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReleaseInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReleaseInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RelieveAccountRelationRequest : Tea.TeaModel {
    public var childUserId: Int64?

    public var parentUserId: Int64?

    public var relationId: Int64?

    public var relationType: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.childUserId != nil {
            map["ChildUserId"] = self.childUserId!
        }
        if self.parentUserId != nil {
            map["ParentUserId"] = self.parentUserId!
        }
        if self.relationId != nil {
            map["RelationId"] = self.relationId!
        }
        if self.relationType != nil {
            map["RelationType"] = self.relationType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChildUserId"] as? Int64 {
            self.childUserId = value
        }
        if let value = dict["ParentUserId"] as? Int64 {
            self.parentUserId = value
        }
        if let value = dict["RelationId"] as? Int64 {
            self.relationId = value
        }
        if let value = dict["RelationType"] as? String {
            self.relationType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RelieveAccountRelationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
        }
    }
    public var code: String?

    public var data: RelieveAccountRelationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RelieveAccountRelationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RelieveAccountRelationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RelieveAccountRelationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RelieveAccountRelationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewChangeInstanceRequest : Tea.TeaModel {
    public class Parameter : Tea.TeaModel {
        public var code: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var clientToken: String?

    public var instanceId: String?

    public var ownerId: Int64?

    public var parameter: [RenewChangeInstanceRequest.Parameter]?

    public var productCode: String?

    public var productType: String?

    public var renewPeriod: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.parameter != nil {
            var tmp : [Any] = []
            for k in self.parameter! {
                tmp.append(k.toMap())
            }
            map["Parameter"] = tmp
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.renewPeriod != nil {
            map["RenewPeriod"] = self.renewPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Parameter"] as? [Any?] {
            var tmp : [RenewChangeInstanceRequest.Parameter] = []
            for v in value {
                if v != nil {
                    var model = RenewChangeInstanceRequest.Parameter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.parameter = tmp
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RenewPeriod"] as? Int64 {
            self.renewPeriod = value
        }
    }
}

public class RenewChangeInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var hostId: String?

        public var orderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hostId != nil {
                map["HostId"] = self.hostId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HostId"] as? String {
                self.hostId = value
            }
            if let value = dict["OrderId"] as? String {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: RenewChangeInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RenewChangeInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RenewChangeInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewChangeInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewChangeInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewInstanceRequest : Tea.TeaModel {
    public var clientToken: String?

    public var instanceId: String?

    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var renewPeriod: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.renewPeriod != nil {
            map["RenewPeriod"] = self.renewPeriod!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RenewPeriod"] as? Int32 {
            self.renewPeriod = value
        }
    }
}

public class RenewInstanceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var orderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OrderId"] as? String {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: RenewInstanceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RenewInstanceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RenewInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewResourcePackageRequest : Tea.TeaModel {
    public var duration: Int32?

    public var effectiveDate: String?

    public var instanceId: String?

    public var ownerId: Int64?

    public var pricingCycle: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.effectiveDate != nil {
            map["EffectiveDate"] = self.effectiveDate!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Duration"] as? Int32 {
            self.duration = value
        }
        if let value = dict["EffectiveDate"] as? String {
            self.effectiveDate = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
    }
}

public class RenewResourcePackageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var orderId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: RenewResourcePackageResponseBody.Data?

    public var message: String?

    public var orderId: Int64?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RenewResourcePackageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RenewResourcePackageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewResourcePackageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewResourcePackageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetAllExpirationDayRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var unifyExpireDay: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.unifyExpireDay != nil {
            map["UnifyExpireDay"] = self.unifyExpireDay!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["UnifyExpireDay"] as? String {
            self.unifyExpireDay = value
        }
    }
}

public class SetAllExpirationDayResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SetAllExpirationDayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetAllExpirationDayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetAllExpirationDayResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetRenewalRequest : Tea.TeaModel {
    public var instanceIDs: String?

    public var ownerId: Int64?

    public var productCode: String?

    public var productType: String?

    public var renewalPeriod: Int32?

    public var renewalPeriodUnit: String?

    public var renewalStatus: String?

    public var subscriptionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceIDs != nil {
            map["InstanceIDs"] = self.instanceIDs!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.renewalPeriod != nil {
            map["RenewalPeriod"] = self.renewalPeriod!
        }
        if self.renewalPeriodUnit != nil {
            map["RenewalPeriodUnit"] = self.renewalPeriodUnit!
        }
        if self.renewalStatus != nil {
            map["RenewalStatus"] = self.renewalStatus!
        }
        if self.subscriptionType != nil {
            map["SubscriptionType"] = self.subscriptionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceIDs"] as? String {
            self.instanceIDs = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RenewalPeriod"] as? Int32 {
            self.renewalPeriod = value
        }
        if let value = dict["RenewalPeriodUnit"] as? String {
            self.renewalPeriodUnit = value
        }
        if let value = dict["RenewalStatus"] as? String {
            self.renewalStatus = value
        }
        if let value = dict["SubscriptionType"] as? String {
            self.subscriptionType = value
        }
    }
}

public class SetRenewalResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SetRenewalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetRenewalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetRenewalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetResellerUserAlarmThresholdRequest : Tea.TeaModel {
    public var alarmThresholds: String?

    public var alarmType: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alarmThresholds != nil {
            map["AlarmThresholds"] = self.alarmThresholds!
        }
        if self.alarmType != nil {
            map["AlarmType"] = self.alarmType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlarmThresholds"] as? String {
            self.alarmThresholds = value
        }
        if let value = dict["AlarmType"] as? String {
            self.alarmType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class SetResellerUserAlarmThresholdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SetResellerUserAlarmThresholdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetResellerUserAlarmThresholdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetResellerUserAlarmThresholdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetResellerUserQuotaRequest : Tea.TeaModel {
    public var amount: String?

    public var currency: String?

    public var outBizId: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.currency != nil {
            map["Currency"] = self.currency!
        }
        if self.outBizId != nil {
            map["OutBizId"] = self.outBizId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? String {
            self.amount = value
        }
        if let value = dict["Currency"] as? String {
            self.currency = value
        }
        if let value = dict["OutBizId"] as? String {
            self.outBizId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class SetResellerUserQuotaResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SetResellerUserQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetResellerUserQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetResellerUserQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetResellerUserStatusRequest : Tea.TeaModel {
    public var businessType: String?

    public var ownerId: String?

    public var status: String?

    public var stopMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.stopMode != nil {
            map["StopMode"] = self.stopMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["StopMode"] as? String {
            self.stopMode = value
        }
    }
}

public class SetResellerUserStatusResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SetResellerUserStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetResellerUserStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetResellerUserStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetSavingPlanUserDeductRuleRequest : Tea.TeaModel {
    public class EcIdAccountIds : Tea.TeaModel {
        public var accountIds: [Int64]?

        public var ecId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountIds != nil {
                map["AccountIds"] = self.accountIds!
            }
            if self.ecId != nil {
                map["EcId"] = self.ecId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountIds"] as? [Int64] {
                self.accountIds = value
            }
            if let value = dict["EcId"] as? String {
                self.ecId = value
            }
        }
    }
    public class UserDeductRules : Tea.TeaModel {
        public var commodityCode: String?

        public var moduleCode: String?

        public var skipDeduct: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commodityCode != nil {
                map["CommodityCode"] = self.commodityCode!
            }
            if self.moduleCode != nil {
                map["ModuleCode"] = self.moduleCode!
            }
            if self.skipDeduct != nil {
                map["SkipDeduct"] = self.skipDeduct!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommodityCode"] as? String {
                self.commodityCode = value
            }
            if let value = dict["ModuleCode"] as? String {
                self.moduleCode = value
            }
            if let value = dict["SkipDeduct"] as? Bool {
                self.skipDeduct = value
            }
        }
    }
    public var ecIdAccountIds: [SetSavingPlanUserDeductRuleRequest.EcIdAccountIds]?

    public var nbid: String?

    public var spnInstanceCode: String?

    public var userDeductRules: [SetSavingPlanUserDeductRuleRequest.UserDeductRules]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ecIdAccountIds != nil {
            var tmp : [Any] = []
            for k in self.ecIdAccountIds! {
                tmp.append(k.toMap())
            }
            map["EcIdAccountIds"] = tmp
        }
        if self.nbid != nil {
            map["Nbid"] = self.nbid!
        }
        if self.spnInstanceCode != nil {
            map["SpnInstanceCode"] = self.spnInstanceCode!
        }
        if self.userDeductRules != nil {
            var tmp : [Any] = []
            for k in self.userDeductRules! {
                tmp.append(k.toMap())
            }
            map["UserDeductRules"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EcIdAccountIds"] as? [Any?] {
            var tmp : [SetSavingPlanUserDeductRuleRequest.EcIdAccountIds] = []
            for v in value {
                if v != nil {
                    var model = SetSavingPlanUserDeductRuleRequest.EcIdAccountIds()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ecIdAccountIds = tmp
        }
        if let value = dict["Nbid"] as? String {
            self.nbid = value
        }
        if let value = dict["SpnInstanceCode"] as? String {
            self.spnInstanceCode = value
        }
        if let value = dict["UserDeductRules"] as? [Any?] {
            var tmp : [SetSavingPlanUserDeductRuleRequest.UserDeductRules] = []
            for v in value {
                if v != nil {
                    var model = SetSavingPlanUserDeductRuleRequest.UserDeductRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userDeductRules = tmp
        }
    }
}

public class SetSavingPlanUserDeductRuleShrinkRequest : Tea.TeaModel {
    public var ecIdAccountIdsShrink: String?

    public var nbid: String?

    public var spnInstanceCode: String?

    public var userDeductRulesShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ecIdAccountIdsShrink != nil {
            map["EcIdAccountIds"] = self.ecIdAccountIdsShrink!
        }
        if self.nbid != nil {
            map["Nbid"] = self.nbid!
        }
        if self.spnInstanceCode != nil {
            map["SpnInstanceCode"] = self.spnInstanceCode!
        }
        if self.userDeductRulesShrink != nil {
            map["UserDeductRules"] = self.userDeductRulesShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EcIdAccountIds"] as? String {
            self.ecIdAccountIdsShrink = value
        }
        if let value = dict["Nbid"] as? String {
            self.nbid = value
        }
        if let value = dict["SpnInstanceCode"] as? String {
            self.spnInstanceCode = value
        }
        if let value = dict["UserDeductRules"] as? String {
            self.userDeductRulesShrink = value
        }
    }
}

public class SetSavingPlanUserDeductRuleResponseBody : Tea.TeaModel {
    public var data: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetSavingPlanUserDeductRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetSavingPlanUserDeductRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetSavingPlanUserDeductRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubscribeBillToOSSRequest : Tea.TeaModel {
    public var beginBillingCycle: String?

    public var bucketOwnerId: Int64?

    public var bucketPath: String?

    public var multAccountRelSubscribe: String?

    public var rowLimitPerFile: Int32?

    public var subscribeBucket: String?

    public var subscribeType: String?

    public var usingSsl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.beginBillingCycle != nil {
            map["BeginBillingCycle"] = self.beginBillingCycle!
        }
        if self.bucketOwnerId != nil {
            map["BucketOwnerId"] = self.bucketOwnerId!
        }
        if self.bucketPath != nil {
            map["BucketPath"] = self.bucketPath!
        }
        if self.multAccountRelSubscribe != nil {
            map["MultAccountRelSubscribe"] = self.multAccountRelSubscribe!
        }
        if self.rowLimitPerFile != nil {
            map["RowLimitPerFile"] = self.rowLimitPerFile!
        }
        if self.subscribeBucket != nil {
            map["SubscribeBucket"] = self.subscribeBucket!
        }
        if self.subscribeType != nil {
            map["SubscribeType"] = self.subscribeType!
        }
        if self.usingSsl != nil {
            map["UsingSsl"] = self.usingSsl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BeginBillingCycle"] as? String {
            self.beginBillingCycle = value
        }
        if let value = dict["BucketOwnerId"] as? Int64 {
            self.bucketOwnerId = value
        }
        if let value = dict["BucketPath"] as? String {
            self.bucketPath = value
        }
        if let value = dict["MultAccountRelSubscribe"] as? String {
            self.multAccountRelSubscribe = value
        }
        if let value = dict["RowLimitPerFile"] as? Int32 {
            self.rowLimitPerFile = value
        }
        if let value = dict["SubscribeBucket"] as? String {
            self.subscribeBucket = value
        }
        if let value = dict["SubscribeType"] as? String {
            self.subscribeType = value
        }
        if let value = dict["UsingSsl"] as? String {
            self.usingSsl = value
        }
    }
}

public class SubscribeBillToOSSResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubscribeBillToOSSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubscribeBillToOSSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubscribeBillToOSSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [TagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class TagResourcesResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class TagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnsubscribeBillToOSSRequest : Tea.TeaModel {
    public var multAccountRelSubscribe: String?

    public var subscribeType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.multAccountRelSubscribe != nil {
            map["MultAccountRelSubscribe"] = self.multAccountRelSubscribe!
        }
        if self.subscribeType != nil {
            map["SubscribeType"] = self.subscribeType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MultAccountRelSubscribe"] as? String {
            self.multAccountRelSubscribe = value
        }
        if let value = dict["SubscribeType"] as? String {
            self.subscribeType = value
        }
    }
}

public class UnsubscribeBillToOSSResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UnsubscribeBillToOSSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnsubscribeBillToOSSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnsubscribeBillToOSSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public var all: Bool?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tagKey: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpgradeResourcePackageRequest : Tea.TeaModel {
    public var effectiveDate: String?

    public var instanceId: String?

    public var ownerId: Int64?

    public var specification: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.effectiveDate != nil {
            map["EffectiveDate"] = self.effectiveDate!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EffectiveDate"] as? String {
            self.effectiveDate = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
    }
}

public class UpgradeResourcePackageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var instanceId: String?

        public var orderId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
        }
    }
    public var code: String?

    public var data: UpgradeResourcePackageResponseBody.Data?

    public var message: String?

    public var orderId: Int64?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpgradeResourcePackageResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpgradeResourcePackageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpgradeResourcePackageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpgradeResourcePackageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
