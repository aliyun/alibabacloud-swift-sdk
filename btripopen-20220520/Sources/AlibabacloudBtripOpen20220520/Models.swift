import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class ModuleFlightItemListBestPriceItemFlightRuleInfosValue : Tea.TeaModel {
    public var refundChangeRuleDesc: String?

    public var baggageDesc: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.refundChangeRuleDesc != nil {
            map["refund_change_rule_desc"] = self.refundChangeRuleDesc!
        }
        if self.baggageDesc != nil {
            map["baggage_desc"] = self.baggageDesc!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("refund_change_rule_desc") && dict["refund_change_rule_desc"] != nil {
            self.refundChangeRuleDesc = dict["refund_change_rule_desc"] as! String
        }
        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
            self.baggageDesc = dict["baggage_desc"] as! String
        }
    }
}

public class ModuleFlightItemListBestPriceItemShoppingItemMapValue : Tea.TeaModel {
    public class CabinQuantityList : Tea.TeaModel {
        public class SegmentPosition : Tea.TeaModel {
            public var segmentIndex: Int32?

            public var journeyIndex: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
            }
        }
        public class Cabin : Tea.TeaModel {
            public var cabin: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var quantity: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabin_class_name"] = self.cabinClassName!
                }
                if self.quantity != nil {
                    map["quantity"] = self.quantity!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                    self.cabinClassName = dict["cabin_class_name"] as! String
                }
                if dict.keys.contains("quantity") && dict["quantity"] != nil {
                    self.quantity = dict["quantity"] as! String
                }
            }
        }
        public var segmentPosition: ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList.SegmentPosition?

        public var cabin: ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList.Cabin?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.segmentPosition?.validate()
            try self.cabin?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.segmentPosition != nil {
                map["segment_position"] = self.segmentPosition?.toMap()
            }
            if self.cabin != nil {
                map["cabin"] = self.cabin?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList.SegmentPosition()
                model.fromMap(dict["segment_position"] as! [String: Any])
                self.segmentPosition = model
            }
            if dict.keys.contains("cabin") && dict["cabin"] != nil {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList.Cabin()
                model.fromMap(dict["cabin"] as! [String: Any])
                self.cabin = model
            }
        }
    }
    public class SearchPrice : Tea.TeaModel {
        public class PriceShowInfo : Tea.TeaModel {
            public var discountInfo: String?

            public var discountNum: Double?

            public var showTicketPrice: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discountInfo != nil {
                    map["discount_info"] = self.discountInfo!
                }
                if self.discountNum != nil {
                    map["discount_num"] = self.discountNum!
                }
                if self.showTicketPrice != nil {
                    map["show_ticket_price"] = self.showTicketPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                    self.discountInfo = dict["discount_info"] as! String
                }
                if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                    self.discountNum = dict["discount_num"] as! Double
                }
                if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                    self.showTicketPrice = dict["show_ticket_price"] as! Bool
                }
            }
        }
        public var floorPrice: Int32?

        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var originalSellPrice: Int32?

        public var baseTotalPrice: Int32?

        public var beforeControlPrice: Int32?

        public var tax: Int32?

        public var supplyPrice: Int32?

        public var basicCabinPrice: Int32?

        public var buildPrice: Int32?

        public var oilPrice: Int32?

        public var firstStandardPrice: Int32?

        public var businessStandardPrice: Int32?

        public var commonStandardPrice: Int32?

        public var interTicketPrice: Int32?

        public var subtractedPrice: Int32?

        public var originCommonPrice: Int32?

        public var dynamicPromotionPrice: Int32?

        public var installmentNum: Int32?

        public var installmentPrice: Double?

        public var competitionDynamicPrice: Int32?

        public var competitionPromotionPrice: Int32?

        public var minBeforeControlPriceOfNormal: Int32?

        public var priceShowInfo: ModuleFlightItemListBestPriceItemShoppingItemMapValue.SearchPrice.PriceShowInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.priceShowInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.floorPrice != nil {
                map["floor_price"] = self.floorPrice!
            }
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.originalSellPrice != nil {
                map["original_sell_price"] = self.originalSellPrice!
            }
            if self.baseTotalPrice != nil {
                map["base_total_price"] = self.baseTotalPrice!
            }
            if self.beforeControlPrice != nil {
                map["before_control_price"] = self.beforeControlPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            if self.supplyPrice != nil {
                map["supply_price"] = self.supplyPrice!
            }
            if self.basicCabinPrice != nil {
                map["basic_cabin_price"] = self.basicCabinPrice!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.firstStandardPrice != nil {
                map["first_standard_price"] = self.firstStandardPrice!
            }
            if self.businessStandardPrice != nil {
                map["business_standard_price"] = self.businessStandardPrice!
            }
            if self.commonStandardPrice != nil {
                map["common_standard_price"] = self.commonStandardPrice!
            }
            if self.interTicketPrice != nil {
                map["inter_ticket_price"] = self.interTicketPrice!
            }
            if self.subtractedPrice != nil {
                map["subtracted_price"] = self.subtractedPrice!
            }
            if self.originCommonPrice != nil {
                map["origin_common_price"] = self.originCommonPrice!
            }
            if self.dynamicPromotionPrice != nil {
                map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
            }
            if self.installmentNum != nil {
                map["installment_num"] = self.installmentNum!
            }
            if self.installmentPrice != nil {
                map["installment_price"] = self.installmentPrice!
            }
            if self.competitionDynamicPrice != nil {
                map["competition_dynamic_price"] = self.competitionDynamicPrice!
            }
            if self.competitionPromotionPrice != nil {
                map["competition_promotion_price"] = self.competitionPromotionPrice!
            }
            if self.minBeforeControlPriceOfNormal != nil {
                map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
            }
            if self.priceShowInfo != nil {
                map["price_show_info"] = self.priceShowInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
                self.floorPrice = dict["floor_price"] as! Int32
            }
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
                self.originalSellPrice = dict["original_sell_price"] as! Int32
            }
            if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
                self.baseTotalPrice = dict["base_total_price"] as! Int32
            }
            if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                self.beforeControlPrice = dict["before_control_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
            if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
                self.supplyPrice = dict["supply_price"] as! Int32
            }
            if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int32
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int32
            }
            if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
                self.firstStandardPrice = dict["first_standard_price"] as! Int32
            }
            if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
                self.businessStandardPrice = dict["business_standard_price"] as! Int32
            }
            if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
                self.commonStandardPrice = dict["common_standard_price"] as! Int32
            }
            if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
                self.interTicketPrice = dict["inter_ticket_price"] as! Int32
            }
            if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
                self.subtractedPrice = dict["subtracted_price"] as! Int32
            }
            if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
                self.originCommonPrice = dict["origin_common_price"] as! Int32
            }
            if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
                self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
            }
            if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
                self.installmentNum = dict["installment_num"] as! Int32
            }
            if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
                self.installmentPrice = dict["installment_price"] as! Double
            }
            if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
                self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
            }
            if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
                self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
            }
            if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
                self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
            }
            if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.SearchPrice.PriceShowInfo()
                model.fromMap(dict["price_show_info"] as! [String: Any])
                self.priceShowInfo = model
            }
        }
    }
    public class SegmentPriceList : Tea.TeaModel {
        public class SegmentPosition : Tea.TeaModel {
            public var journeyIndex: Int32?

            public var segmentIndex: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
            }
        }
        public class SearchPrice : Tea.TeaModel {
            public var ticketPrice: Int32?

            public var sellPrice: Int32?

            public var tax: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.sellPrice != nil {
                    map["sell_price"] = self.sellPrice!
                }
                if self.tax != nil {
                    map["tax"] = self.tax!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int32
                }
                if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                    self.sellPrice = dict["sell_price"] as! Int32
                }
                if dict.keys.contains("tax") && dict["tax"] != nil {
                    self.tax = dict["tax"] as! Int32
                }
            }
        }
        public var segmentPosition: ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList.SegmentPosition?

        public var searchPrice: ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList.SearchPrice?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.segmentPosition?.validate()
            try self.searchPrice?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.segmentPosition != nil {
                map["segment_position"] = self.segmentPosition?.toMap()
            }
            if self.searchPrice != nil {
                map["search_price"] = self.searchPrice?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList.SegmentPosition()
                model.fromMap(dict["segment_position"] as! [String: Any])
                self.segmentPosition = model
            }
            if dict.keys.contains("search_price") && dict["search_price"] != nil {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList.SearchPrice()
                model.fromMap(dict["search_price"] as! [String: Any])
                self.searchPrice = model
            }
        }
    }
    public var cabinQuantityList: [ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList]?

    public var searchPrice: ModuleFlightItemListBestPriceItemShoppingItemMapValue.SearchPrice?

    public var segmentPriceList: [ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList]?

    public var id: String?

    public var cabinQuantity: [String: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue]?

    public var segmentPrice: [String: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinQuantityList != nil {
            var tmp : [Any] = []
            for k in self.cabinQuantityList! {
                tmp.append(k.toMap())
            }
            map["cabin_quantity_list"] = tmp
        }
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.segmentPriceList != nil {
            var tmp : [Any] = []
            for k in self.segmentPriceList! {
                tmp.append(k.toMap())
            }
            map["segment_price_list"] = tmp
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.cabinQuantity != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.cabinQuantity! {
                tmp[k] = v.toMap()
            }
            map["cabin_quantity"] = tmp
        }
        if self.segmentPrice != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.segmentPrice! {
                tmp[k] = v.toMap()
            }
            map["segment_price"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_quantity_list") && dict["cabin_quantity_list"] != nil {
            var tmp : [ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList] = []
            for v in dict["cabin_quantity_list"] as! [Any] {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.CabinQuantityList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.cabinQuantityList = tmp
        }
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("segment_price_list") && dict["segment_price_list"] != nil {
            var tmp : [ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList] = []
            for v in dict["segment_price_list"] as! [Any] {
                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue.SegmentPriceList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.segmentPriceList = tmp
        }
        if dict.keys.contains("id") && dict["id"] != nil {
            self.id = dict["id"] as! String
        }
        if dict.keys.contains("cabin_quantity") && dict["cabin_quantity"] != nil {
            var tmp : [String: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue] = [:]
            for (k, v) in dict["cabin_quantity"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.cabinQuantity = tmp
        }
        if dict.keys.contains("segment_price") && dict["segment_price"] != nil {
            var tmp : [String: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue] = [:]
            for (k, v) in dict["segment_price"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.segmentPrice = tmp
        }
    }
}

public class ModuleFlightItemListBestPriceItemSubItemPositionMapValue : Tea.TeaModel {
    public var journeyIndex: Int32?

    public var segmentIndex: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.journeyIndex != nil {
            map["journey_index"] = self.journeyIndex!
        }
        if self.segmentIndex != nil {
            map["segment_index"] = self.segmentIndex!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
            self.journeyIndex = dict["journey_index"] as! Int32
        }
        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
            self.segmentIndex = dict["segment_index"] as! Int32
        }
    }
}

public class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue : Tea.TeaModel {
    public class SearchPrice : Tea.TeaModel {
        public class PriceShowInfo : Tea.TeaModel {
            public var discountInfo: String?

            public var discountNum: Double?

            public var showTicketPrice: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discountInfo != nil {
                    map["discount_info"] = self.discountInfo!
                }
                if self.discountNum != nil {
                    map["discount_num"] = self.discountNum!
                }
                if self.showTicketPrice != nil {
                    map["show_ticket_price"] = self.showTicketPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                    self.discountInfo = dict["discount_info"] as! String
                }
                if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                    self.discountNum = dict["discount_num"] as! Double
                }
                if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                    self.showTicketPrice = dict["show_ticket_price"] as! Bool
                }
            }
        }
        public var floorPrice: Int32?

        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var originalSellPrice: Int32?

        public var baseTotalPrice: Int32?

        public var beforeControlPrice: Int32?

        public var tax: Int32?

        public var supplyPrice: Int32?

        public var basicCabinPrice: Int32?

        public var buildPrice: Int32?

        public var oilPrice: Int32?

        public var firstStandardPrice: Int32?

        public var businessStandardPrice: Int32?

        public var commonStandardPrice: Int32?

        public var interTicketPrice: Int32?

        public var subtractedPrice: Int32?

        public var originCommonPrice: Int32?

        public var dynamicPromotionPrice: Int32?

        public var installmentNum: Int32?

        public var installmentPrice: Double?

        public var competitionDynamicPrice: Int32?

        public var competitionPromotionPrice: Int32?

        public var minBeforeControlPriceOfNormal: Int32?

        public var priceShowInfo: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue.SearchPrice.PriceShowInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.priceShowInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.floorPrice != nil {
                map["floor_price"] = self.floorPrice!
            }
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.originalSellPrice != nil {
                map["original_sell_price"] = self.originalSellPrice!
            }
            if self.baseTotalPrice != nil {
                map["base_total_price"] = self.baseTotalPrice!
            }
            if self.beforeControlPrice != nil {
                map["before_control_price"] = self.beforeControlPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            if self.supplyPrice != nil {
                map["supply_price"] = self.supplyPrice!
            }
            if self.basicCabinPrice != nil {
                map["basic_cabin_price"] = self.basicCabinPrice!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.firstStandardPrice != nil {
                map["first_standard_price"] = self.firstStandardPrice!
            }
            if self.businessStandardPrice != nil {
                map["business_standard_price"] = self.businessStandardPrice!
            }
            if self.commonStandardPrice != nil {
                map["common_standard_price"] = self.commonStandardPrice!
            }
            if self.interTicketPrice != nil {
                map["inter_ticket_price"] = self.interTicketPrice!
            }
            if self.subtractedPrice != nil {
                map["subtracted_price"] = self.subtractedPrice!
            }
            if self.originCommonPrice != nil {
                map["origin_common_price"] = self.originCommonPrice!
            }
            if self.dynamicPromotionPrice != nil {
                map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
            }
            if self.installmentNum != nil {
                map["installment_num"] = self.installmentNum!
            }
            if self.installmentPrice != nil {
                map["installment_price"] = self.installmentPrice!
            }
            if self.competitionDynamicPrice != nil {
                map["competition_dynamic_price"] = self.competitionDynamicPrice!
            }
            if self.competitionPromotionPrice != nil {
                map["competition_promotion_price"] = self.competitionPromotionPrice!
            }
            if self.minBeforeControlPriceOfNormal != nil {
                map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
            }
            if self.priceShowInfo != nil {
                map["price_show_info"] = self.priceShowInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
                self.floorPrice = dict["floor_price"] as! Int32
            }
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
                self.originalSellPrice = dict["original_sell_price"] as! Int32
            }
            if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
                self.baseTotalPrice = dict["base_total_price"] as! Int32
            }
            if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                self.beforeControlPrice = dict["before_control_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
            if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
                self.supplyPrice = dict["supply_price"] as! Int32
            }
            if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int32
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int32
            }
            if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
                self.firstStandardPrice = dict["first_standard_price"] as! Int32
            }
            if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
                self.businessStandardPrice = dict["business_standard_price"] as! Int32
            }
            if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
                self.commonStandardPrice = dict["common_standard_price"] as! Int32
            }
            if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
                self.interTicketPrice = dict["inter_ticket_price"] as! Int32
            }
            if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
                self.subtractedPrice = dict["subtracted_price"] as! Int32
            }
            if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
                self.originCommonPrice = dict["origin_common_price"] as! Int32
            }
            if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
                self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
            }
            if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
                self.installmentNum = dict["installment_num"] as! Int32
            }
            if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
                self.installmentPrice = dict["installment_price"] as! Double
            }
            if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
                self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
            }
            if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
                self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
            }
            if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
                self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
            }
            if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
                var model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue.SearchPrice.PriceShowInfo()
                model.fromMap(dict["price_show_info"] as! [String: Any])
                self.priceShowInfo = model
            }
        }
    }
    public var id: String?

    public var cabinQuantity: [String: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue]?

    public var searchPrice: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue.SearchPrice?

    public var segmentPrice: [String: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.cabinQuantity != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.cabinQuantity! {
                tmp[k] = v.toMap()
            }
            map["cabin_quantity"] = tmp
        }
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.segmentPrice != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.segmentPrice! {
                tmp[k] = v.toMap()
            }
            map["segment_price"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("id") && dict["id"] != nil {
            self.id = dict["id"] as! String
        }
        if dict.keys.contains("cabin_quantity") && dict["cabin_quantity"] != nil {
            var tmp : [String: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue] = [:]
            for (k, v) in dict["cabin_quantity"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.cabinQuantity = tmp
        }
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("segment_price") && dict["segment_price"] != nil {
            var tmp : [String: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue] = [:]
            for (k, v) in dict["segment_price"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.segmentPrice = tmp
        }
    }
}

public class ModuleFlightItemListItemListFlightRuleInfosValue : Tea.TeaModel {
    public var refundChangeRuleDesc: String?

    public var baggageDesc: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.refundChangeRuleDesc != nil {
            map["refund_change_rule_desc"] = self.refundChangeRuleDesc!
        }
        if self.baggageDesc != nil {
            map["baggage_desc"] = self.baggageDesc!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("refund_change_rule_desc") && dict["refund_change_rule_desc"] != nil {
            self.refundChangeRuleDesc = dict["refund_change_rule_desc"] as! String
        }
        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
            self.baggageDesc = dict["baggage_desc"] as! String
        }
    }
}

public class ModuleFlightItemListItemListShoppingItemMapValue : Tea.TeaModel {
    public class SearchPrice : Tea.TeaModel {
        public class PriceShowInfo : Tea.TeaModel {
            public var discountInfo: String?

            public var discountNum: Double?

            public var showTicketPrice: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discountInfo != nil {
                    map["discount_info"] = self.discountInfo!
                }
                if self.discountNum != nil {
                    map["discount_num"] = self.discountNum!
                }
                if self.showTicketPrice != nil {
                    map["show_ticket_price"] = self.showTicketPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                    self.discountInfo = dict["discount_info"] as! String
                }
                if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                    self.discountNum = dict["discount_num"] as! Double
                }
                if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                    self.showTicketPrice = dict["show_ticket_price"] as! Bool
                }
            }
        }
        public var floorPrice: Int32?

        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var originalSellPrice: Int32?

        public var baseTotalPrice: Int32?

        public var beforeControlPrice: Int32?

        public var tax: Int32?

        public var supplyPrice: Int32?

        public var basicCabinPrice: Int32?

        public var buildPrice: Int32?

        public var oilPrice: Int32?

        public var firstStandardPrice: Int32?

        public var businessStandardPrice: Int32?

        public var commonStandardPrice: Int32?

        public var interTicketPrice: Int32?

        public var subtractedPrice: Int32?

        public var originCommonPrice: Int32?

        public var dynamicPromotionPrice: Int32?

        public var installmentNum: Int32?

        public var installmentPrice: Double?

        public var competitionDynamicPrice: Int32?

        public var competitionPromotionPrice: Int32?

        public var minBeforeControlPriceOfNormal: Int32?

        public var priceShowInfo: ModuleFlightItemListItemListShoppingItemMapValue.SearchPrice.PriceShowInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.priceShowInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.floorPrice != nil {
                map["floor_price"] = self.floorPrice!
            }
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.originalSellPrice != nil {
                map["original_sell_price"] = self.originalSellPrice!
            }
            if self.baseTotalPrice != nil {
                map["base_total_price"] = self.baseTotalPrice!
            }
            if self.beforeControlPrice != nil {
                map["before_control_price"] = self.beforeControlPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            if self.supplyPrice != nil {
                map["supply_price"] = self.supplyPrice!
            }
            if self.basicCabinPrice != nil {
                map["basic_cabin_price"] = self.basicCabinPrice!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.firstStandardPrice != nil {
                map["first_standard_price"] = self.firstStandardPrice!
            }
            if self.businessStandardPrice != nil {
                map["business_standard_price"] = self.businessStandardPrice!
            }
            if self.commonStandardPrice != nil {
                map["common_standard_price"] = self.commonStandardPrice!
            }
            if self.interTicketPrice != nil {
                map["inter_ticket_price"] = self.interTicketPrice!
            }
            if self.subtractedPrice != nil {
                map["subtracted_price"] = self.subtractedPrice!
            }
            if self.originCommonPrice != nil {
                map["origin_common_price"] = self.originCommonPrice!
            }
            if self.dynamicPromotionPrice != nil {
                map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
            }
            if self.installmentNum != nil {
                map["installment_num"] = self.installmentNum!
            }
            if self.installmentPrice != nil {
                map["installment_price"] = self.installmentPrice!
            }
            if self.competitionDynamicPrice != nil {
                map["competition_dynamic_price"] = self.competitionDynamicPrice!
            }
            if self.competitionPromotionPrice != nil {
                map["competition_promotion_price"] = self.competitionPromotionPrice!
            }
            if self.minBeforeControlPriceOfNormal != nil {
                map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
            }
            if self.priceShowInfo != nil {
                map["price_show_info"] = self.priceShowInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
                self.floorPrice = dict["floor_price"] as! Int32
            }
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
                self.originalSellPrice = dict["original_sell_price"] as! Int32
            }
            if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
                self.baseTotalPrice = dict["base_total_price"] as! Int32
            }
            if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                self.beforeControlPrice = dict["before_control_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
            if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
                self.supplyPrice = dict["supply_price"] as! Int32
            }
            if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int32
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int32
            }
            if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
                self.firstStandardPrice = dict["first_standard_price"] as! Int32
            }
            if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
                self.businessStandardPrice = dict["business_standard_price"] as! Int32
            }
            if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
                self.commonStandardPrice = dict["common_standard_price"] as! Int32
            }
            if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
                self.interTicketPrice = dict["inter_ticket_price"] as! Int32
            }
            if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
                self.subtractedPrice = dict["subtracted_price"] as! Int32
            }
            if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
                self.originCommonPrice = dict["origin_common_price"] as! Int32
            }
            if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
                self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
            }
            if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
                self.installmentNum = dict["installment_num"] as! Int32
            }
            if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
                self.installmentPrice = dict["installment_price"] as! Double
            }
            if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
                self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
            }
            if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
                self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
            }
            if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
                self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
            }
            if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
                var model = ModuleFlightItemListItemListShoppingItemMapValue.SearchPrice.PriceShowInfo()
                model.fromMap(dict["price_show_info"] as! [String: Any])
                self.priceShowInfo = model
            }
        }
    }
    public var id: String?

    public var cabinQuantity: [String: ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue]?

    public var searchPrice: ModuleFlightItemListItemListShoppingItemMapValue.SearchPrice?

    public var segmentPrice: [String: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.cabinQuantity != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.cabinQuantity! {
                tmp[k] = v.toMap()
            }
            map["cabin_quantity"] = tmp
        }
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.segmentPrice != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.segmentPrice! {
                tmp[k] = v.toMap()
            }
            map["segment_price"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("id") && dict["id"] != nil {
            self.id = dict["id"] as! String
        }
        if dict.keys.contains("cabin_quantity") && dict["cabin_quantity"] != nil {
            var tmp : [String: ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue] = [:]
            for (k, v) in dict["cabin_quantity"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.cabinQuantity = tmp
        }
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleFlightItemListItemListShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("segment_price") && dict["segment_price"] != nil {
            var tmp : [String: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue] = [:]
            for (k, v) in dict["segment_price"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.segmentPrice = tmp
        }
    }
}

public class ModuleFlightItemListItemListSubItemPositionMapValue : Tea.TeaModel {
    public var journeyIndex: Int32?

    public var segmentIndex: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.journeyIndex != nil {
            map["journey_index"] = self.journeyIndex!
        }
        if self.segmentIndex != nil {
            map["segment_index"] = self.segmentIndex!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
            self.journeyIndex = dict["journey_index"] as! Int32
        }
        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
            self.segmentIndex = dict["segment_index"] as! Int32
        }
    }
}

public class ModuleFlightItemListItemListSubItemsShoppingItemMapValue : Tea.TeaModel {
    public class SearchPrice : Tea.TeaModel {
        public class PriceShowInfo : Tea.TeaModel {
            public var discountInfo: String?

            public var discountNum: Double?

            public var showTicketPrice: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discountInfo != nil {
                    map["discount_info"] = self.discountInfo!
                }
                if self.discountNum != nil {
                    map["discount_num"] = self.discountNum!
                }
                if self.showTicketPrice != nil {
                    map["show_ticket_price"] = self.showTicketPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                    self.discountInfo = dict["discount_info"] as! String
                }
                if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                    self.discountNum = dict["discount_num"] as! Double
                }
                if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                    self.showTicketPrice = dict["show_ticket_price"] as! Bool
                }
            }
        }
        public var floorPrice: Int32?

        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var originalSellPrice: Int32?

        public var baseTotalPrice: Int32?

        public var beforeControlPrice: Int32?

        public var tax: Int32?

        public var supplyPrice: Int32?

        public var basicCabinPrice: Int32?

        public var buildPrice: Int32?

        public var oilPrice: Int32?

        public var firstStandardPrice: Int32?

        public var businessStandardPrice: Int32?

        public var commonStandardPrice: Int32?

        public var interTicketPrice: Int32?

        public var subtractedPrice: Int32?

        public var originCommonPrice: Int32?

        public var dynamicPromotionPrice: Int32?

        public var installmentNum: Int32?

        public var installmentPrice: Double?

        public var competitionDynamicPrice: Int32?

        public var competitionPromotionPrice: Int32?

        public var minBeforeControlPriceOfNormal: Int32?

        public var priceShowInfo: ModuleFlightItemListItemListSubItemsShoppingItemMapValue.SearchPrice.PriceShowInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.priceShowInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.floorPrice != nil {
                map["floor_price"] = self.floorPrice!
            }
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.originalSellPrice != nil {
                map["original_sell_price"] = self.originalSellPrice!
            }
            if self.baseTotalPrice != nil {
                map["base_total_price"] = self.baseTotalPrice!
            }
            if self.beforeControlPrice != nil {
                map["before_control_price"] = self.beforeControlPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            if self.supplyPrice != nil {
                map["supply_price"] = self.supplyPrice!
            }
            if self.basicCabinPrice != nil {
                map["basic_cabin_price"] = self.basicCabinPrice!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.firstStandardPrice != nil {
                map["first_standard_price"] = self.firstStandardPrice!
            }
            if self.businessStandardPrice != nil {
                map["business_standard_price"] = self.businessStandardPrice!
            }
            if self.commonStandardPrice != nil {
                map["common_standard_price"] = self.commonStandardPrice!
            }
            if self.interTicketPrice != nil {
                map["inter_ticket_price"] = self.interTicketPrice!
            }
            if self.subtractedPrice != nil {
                map["subtracted_price"] = self.subtractedPrice!
            }
            if self.originCommonPrice != nil {
                map["origin_common_price"] = self.originCommonPrice!
            }
            if self.dynamicPromotionPrice != nil {
                map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
            }
            if self.installmentNum != nil {
                map["installment_num"] = self.installmentNum!
            }
            if self.installmentPrice != nil {
                map["installment_price"] = self.installmentPrice!
            }
            if self.competitionDynamicPrice != nil {
                map["competition_dynamic_price"] = self.competitionDynamicPrice!
            }
            if self.competitionPromotionPrice != nil {
                map["competition_promotion_price"] = self.competitionPromotionPrice!
            }
            if self.minBeforeControlPriceOfNormal != nil {
                map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
            }
            if self.priceShowInfo != nil {
                map["price_show_info"] = self.priceShowInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
                self.floorPrice = dict["floor_price"] as! Int32
            }
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
                self.originalSellPrice = dict["original_sell_price"] as! Int32
            }
            if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
                self.baseTotalPrice = dict["base_total_price"] as! Int32
            }
            if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                self.beforeControlPrice = dict["before_control_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
            if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
                self.supplyPrice = dict["supply_price"] as! Int32
            }
            if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int32
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int32
            }
            if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
                self.firstStandardPrice = dict["first_standard_price"] as! Int32
            }
            if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
                self.businessStandardPrice = dict["business_standard_price"] as! Int32
            }
            if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
                self.commonStandardPrice = dict["common_standard_price"] as! Int32
            }
            if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
                self.interTicketPrice = dict["inter_ticket_price"] as! Int32
            }
            if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
                self.subtractedPrice = dict["subtracted_price"] as! Int32
            }
            if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
                self.originCommonPrice = dict["origin_common_price"] as! Int32
            }
            if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
                self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
            }
            if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
                self.installmentNum = dict["installment_num"] as! Int32
            }
            if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
                self.installmentPrice = dict["installment_price"] as! Double
            }
            if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
                self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
            }
            if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
                self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
            }
            if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
                self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
            }
            if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
                var model = ModuleFlightItemListItemListSubItemsShoppingItemMapValue.SearchPrice.PriceShowInfo()
                model.fromMap(dict["price_show_info"] as! [String: Any])
                self.priceShowInfo = model
            }
        }
    }
    public var id: String?

    public var cabinQuantity: [String: ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue]?

    public var searchPrice: ModuleFlightItemListItemListSubItemsShoppingItemMapValue.SearchPrice?

    public var segmentPrice: [String: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.cabinQuantity != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.cabinQuantity! {
                tmp[k] = v.toMap()
            }
            map["cabin_quantity"] = tmp
        }
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.segmentPrice != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.segmentPrice! {
                tmp[k] = v.toMap()
            }
            map["segment_price"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("id") && dict["id"] != nil {
            self.id = dict["id"] as! String
        }
        if dict.keys.contains("cabin_quantity") && dict["cabin_quantity"] != nil {
            var tmp : [String: ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue] = [:]
            for (k, v) in dict["cabin_quantity"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.cabinQuantity = tmp
        }
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleFlightItemListItemListSubItemsShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("segment_price") && dict["segment_price"] != nil {
            var tmp : [String: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue] = [:]
            for (k, v) in dict["segment_price"] as! [String: Any] {
                if v != nil {
                    var model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.segmentPrice = tmp
        }
    }
}

public class ModuleAgentInfoAttributeShowInfoMapValue : Tea.TeaModel {
    public var code: String?

    public var name: String?

    public var text: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.text != nil {
            map["text"] = self.text!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("name") && dict["name"] != nil {
            self.name = dict["name"] as! String
        }
        if dict.keys.contains("text") && dict["text"] != nil {
            self.text = dict["text"] as! String
        }
    }
}

public class ModuleItemListFlightRuleInfosValue : Tea.TeaModel {
    public var refundChangeRuleDesc: String?

    public var baggageDesc: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.refundChangeRuleDesc != nil {
            map["refund_change_rule_desc"] = self.refundChangeRuleDesc!
        }
        if self.baggageDesc != nil {
            map["baggage_desc"] = self.baggageDesc!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("refund_change_rule_desc") && dict["refund_change_rule_desc"] != nil {
            self.refundChangeRuleDesc = dict["refund_change_rule_desc"] as! String
        }
        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
            self.baggageDesc = dict["baggage_desc"] as! String
        }
    }
}

public class ModuleItemListShoppingItemMapValue : Tea.TeaModel {
    public class CabinQuantityList : Tea.TeaModel {
        public class SegmentPosition : Tea.TeaModel {
            public var journeyIndex: Int32?

            public var segmentIndex: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
            }
        }
        public class Cabin : Tea.TeaModel {
            public var cabin: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var quantity: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabin_class_name"] = self.cabinClassName!
                }
                if self.quantity != nil {
                    map["quantity"] = self.quantity!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                    self.cabinClassName = dict["cabin_class_name"] as! String
                }
                if dict.keys.contains("quantity") && dict["quantity"] != nil {
                    self.quantity = dict["quantity"] as! String
                }
            }
        }
        public var segmentPosition: ModuleItemListShoppingItemMapValue.CabinQuantityList.SegmentPosition?

        public var cabin: ModuleItemListShoppingItemMapValue.CabinQuantityList.Cabin?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.segmentPosition?.validate()
            try self.cabin?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.segmentPosition != nil {
                map["segment_position"] = self.segmentPosition?.toMap()
            }
            if self.cabin != nil {
                map["cabin"] = self.cabin?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                var model = ModuleItemListShoppingItemMapValue.CabinQuantityList.SegmentPosition()
                model.fromMap(dict["segment_position"] as! [String: Any])
                self.segmentPosition = model
            }
            if dict.keys.contains("cabin") && dict["cabin"] != nil {
                var model = ModuleItemListShoppingItemMapValue.CabinQuantityList.Cabin()
                model.fromMap(dict["cabin"] as! [String: Any])
                self.cabin = model
            }
        }
    }
    public class SearchPrice : Tea.TeaModel {
        public class PriceShowInfo : Tea.TeaModel {
            public var discountInfo: String?

            public var discountNum: Double?

            public var showTicketPrice: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discountInfo != nil {
                    map["discount_info"] = self.discountInfo!
                }
                if self.discountNum != nil {
                    map["discount_num"] = self.discountNum!
                }
                if self.showTicketPrice != nil {
                    map["show_ticket_price"] = self.showTicketPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                    self.discountInfo = dict["discount_info"] as! String
                }
                if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                    self.discountNum = dict["discount_num"] as! Double
                }
                if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                    self.showTicketPrice = dict["show_ticket_price"] as! Bool
                }
            }
        }
        public var floorPrice: Int32?

        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var originalSellPrice: Int32?

        public var baseTotalPrice: Int32?

        public var beforeControlPrice: Int32?

        public var tax: Int32?

        public var supplyPrice: Int32?

        public var basicCabinPrice: Int32?

        public var buildPrice: Int32?

        public var oilPrice: Int32?

        public var firstStandardPrice: Int32?

        public var businessStandardPrice: Int32?

        public var commonStandardPrice: Int32?

        public var interTicketPrice: Int32?

        public var subtractedPrice: Int32?

        public var originCommonPrice: Int32?

        public var dynamicPromotionPrice: Int32?

        public var installmentNum: Int32?

        public var installmentPrice: Double?

        public var competitionDynamicPrice: Int32?

        public var competitionPromotionPrice: Int32?

        public var minBeforeControlPriceOfNormal: Int32?

        public var priceShowInfo: ModuleItemListShoppingItemMapValue.SearchPrice.PriceShowInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.priceShowInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.floorPrice != nil {
                map["floor_price"] = self.floorPrice!
            }
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.originalSellPrice != nil {
                map["original_sell_price"] = self.originalSellPrice!
            }
            if self.baseTotalPrice != nil {
                map["base_total_price"] = self.baseTotalPrice!
            }
            if self.beforeControlPrice != nil {
                map["before_control_price"] = self.beforeControlPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            if self.supplyPrice != nil {
                map["supply_price"] = self.supplyPrice!
            }
            if self.basicCabinPrice != nil {
                map["basic_cabin_price"] = self.basicCabinPrice!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.firstStandardPrice != nil {
                map["first_standard_price"] = self.firstStandardPrice!
            }
            if self.businessStandardPrice != nil {
                map["business_standard_price"] = self.businessStandardPrice!
            }
            if self.commonStandardPrice != nil {
                map["common_standard_price"] = self.commonStandardPrice!
            }
            if self.interTicketPrice != nil {
                map["inter_ticket_price"] = self.interTicketPrice!
            }
            if self.subtractedPrice != nil {
                map["subtracted_price"] = self.subtractedPrice!
            }
            if self.originCommonPrice != nil {
                map["origin_common_price"] = self.originCommonPrice!
            }
            if self.dynamicPromotionPrice != nil {
                map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
            }
            if self.installmentNum != nil {
                map["installment_num"] = self.installmentNum!
            }
            if self.installmentPrice != nil {
                map["installment_price"] = self.installmentPrice!
            }
            if self.competitionDynamicPrice != nil {
                map["competition_dynamic_price"] = self.competitionDynamicPrice!
            }
            if self.competitionPromotionPrice != nil {
                map["competition_promotion_price"] = self.competitionPromotionPrice!
            }
            if self.minBeforeControlPriceOfNormal != nil {
                map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
            }
            if self.priceShowInfo != nil {
                map["price_show_info"] = self.priceShowInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
                self.floorPrice = dict["floor_price"] as! Int32
            }
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
                self.originalSellPrice = dict["original_sell_price"] as! Int32
            }
            if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
                self.baseTotalPrice = dict["base_total_price"] as! Int32
            }
            if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                self.beforeControlPrice = dict["before_control_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
            if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
                self.supplyPrice = dict["supply_price"] as! Int32
            }
            if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int32
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int32
            }
            if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
                self.firstStandardPrice = dict["first_standard_price"] as! Int32
            }
            if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
                self.businessStandardPrice = dict["business_standard_price"] as! Int32
            }
            if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
                self.commonStandardPrice = dict["common_standard_price"] as! Int32
            }
            if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
                self.interTicketPrice = dict["inter_ticket_price"] as! Int32
            }
            if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
                self.subtractedPrice = dict["subtracted_price"] as! Int32
            }
            if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
                self.originCommonPrice = dict["origin_common_price"] as! Int32
            }
            if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
                self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
            }
            if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
                self.installmentNum = dict["installment_num"] as! Int32
            }
            if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
                self.installmentPrice = dict["installment_price"] as! Double
            }
            if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
                self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
            }
            if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
                self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
            }
            if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
                self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
            }
            if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
                var model = ModuleItemListShoppingItemMapValue.SearchPrice.PriceShowInfo()
                model.fromMap(dict["price_show_info"] as! [String: Any])
                self.priceShowInfo = model
            }
        }
    }
    public class SegmentPriceList : Tea.TeaModel {
        public class SegmentPosition : Tea.TeaModel {
            public var journeyIndex: Int32?

            public var segmentIndex: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
            }
        }
        public class SearchPrice : Tea.TeaModel {
            public var ticketPrice: Int32?

            public var sellPrice: Int32?

            public var tax: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.sellPrice != nil {
                    map["sell_price"] = self.sellPrice!
                }
                if self.tax != nil {
                    map["tax"] = self.tax!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int32
                }
                if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                    self.sellPrice = dict["sell_price"] as! Int32
                }
                if dict.keys.contains("tax") && dict["tax"] != nil {
                    self.tax = dict["tax"] as! Int32
                }
            }
        }
        public var segmentPosition: ModuleItemListShoppingItemMapValue.SegmentPriceList.SegmentPosition?

        public var searchPrice: ModuleItemListShoppingItemMapValue.SegmentPriceList.SearchPrice?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.segmentPosition?.validate()
            try self.searchPrice?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.segmentPosition != nil {
                map["segment_position"] = self.segmentPosition?.toMap()
            }
            if self.searchPrice != nil {
                map["search_price"] = self.searchPrice?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                var model = ModuleItemListShoppingItemMapValue.SegmentPriceList.SegmentPosition()
                model.fromMap(dict["segment_position"] as! [String: Any])
                self.segmentPosition = model
            }
            if dict.keys.contains("search_price") && dict["search_price"] != nil {
                var model = ModuleItemListShoppingItemMapValue.SegmentPriceList.SearchPrice()
                model.fromMap(dict["search_price"] as! [String: Any])
                self.searchPrice = model
            }
        }
    }
    public var cabinQuantityList: [ModuleItemListShoppingItemMapValue.CabinQuantityList]?

    public var searchPrice: ModuleItemListShoppingItemMapValue.SearchPrice?

    public var segmentPriceList: [ModuleItemListShoppingItemMapValue.SegmentPriceList]?

    public var id: String?

    public var cabinQuantity: [String: ModuleItemListShoppingItemMapValueCabinQuantityValue]?

    public var segmentPrice: [String: ModuleItemListShoppingItemMapValueSegmentPriceValue]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinQuantityList != nil {
            var tmp : [Any] = []
            for k in self.cabinQuantityList! {
                tmp.append(k.toMap())
            }
            map["cabin_quantity_list"] = tmp
        }
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.segmentPriceList != nil {
            var tmp : [Any] = []
            for k in self.segmentPriceList! {
                tmp.append(k.toMap())
            }
            map["segment_price_list"] = tmp
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.cabinQuantity != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.cabinQuantity! {
                tmp[k] = v.toMap()
            }
            map["cabin_quantity"] = tmp
        }
        if self.segmentPrice != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.segmentPrice! {
                tmp[k] = v.toMap()
            }
            map["segment_price"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_quantity_list") && dict["cabin_quantity_list"] != nil {
            var tmp : [ModuleItemListShoppingItemMapValue.CabinQuantityList] = []
            for v in dict["cabin_quantity_list"] as! [Any] {
                var model = ModuleItemListShoppingItemMapValue.CabinQuantityList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.cabinQuantityList = tmp
        }
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleItemListShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("segment_price_list") && dict["segment_price_list"] != nil {
            var tmp : [ModuleItemListShoppingItemMapValue.SegmentPriceList] = []
            for v in dict["segment_price_list"] as! [Any] {
                var model = ModuleItemListShoppingItemMapValue.SegmentPriceList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.segmentPriceList = tmp
        }
        if dict.keys.contains("id") && dict["id"] != nil {
            self.id = dict["id"] as! String
        }
        if dict.keys.contains("cabin_quantity") && dict["cabin_quantity"] != nil {
            var tmp : [String: ModuleItemListShoppingItemMapValueCabinQuantityValue] = [:]
            for (k, v) in dict["cabin_quantity"] as! [String: Any] {
                if v != nil {
                    var model = ModuleItemListShoppingItemMapValueCabinQuantityValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.cabinQuantity = tmp
        }
        if dict.keys.contains("segment_price") && dict["segment_price"] != nil {
            var tmp : [String: ModuleItemListShoppingItemMapValueSegmentPriceValue] = [:]
            for (k, v) in dict["segment_price"] as! [String: Any] {
                if v != nil {
                    var model = ModuleItemListShoppingItemMapValueSegmentPriceValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.segmentPrice = tmp
        }
    }
}

public class ModuleItemListSubItemPositionMapValue : Tea.TeaModel {
    public var journeyIndex: Int32?

    public var segmentIndex: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.journeyIndex != nil {
            map["journey_index"] = self.journeyIndex!
        }
        if self.segmentIndex != nil {
            map["segment_index"] = self.segmentIndex!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
            self.journeyIndex = dict["journey_index"] as! Int32
        }
        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
            self.segmentIndex = dict["segment_index"] as! Int32
        }
    }
}

public class ModuleItemListSubItemsShoppingItemMapValue : Tea.TeaModel {
    public class SearchPrice : Tea.TeaModel {
        public class PriceShowInfo : Tea.TeaModel {
            public var discountInfo: String?

            public var discountNum: Double?

            public var showTicketPrice: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.discountInfo != nil {
                    map["discount_info"] = self.discountInfo!
                }
                if self.discountNum != nil {
                    map["discount_num"] = self.discountNum!
                }
                if self.showTicketPrice != nil {
                    map["show_ticket_price"] = self.showTicketPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                    self.discountInfo = dict["discount_info"] as! String
                }
                if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                    self.discountNum = dict["discount_num"] as! Double
                }
                if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                    self.showTicketPrice = dict["show_ticket_price"] as! Bool
                }
            }
        }
        public var floorPrice: Int32?

        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var originalSellPrice: Int32?

        public var baseTotalPrice: Int32?

        public var beforeControlPrice: Int32?

        public var tax: Int32?

        public var supplyPrice: Int32?

        public var basicCabinPrice: Int32?

        public var buildPrice: Int32?

        public var oilPrice: Int32?

        public var firstStandardPrice: Int32?

        public var businessStandardPrice: Int32?

        public var commonStandardPrice: Int32?

        public var interTicketPrice: Int32?

        public var subtractedPrice: Int32?

        public var originCommonPrice: Int32?

        public var dynamicPromotionPrice: Int32?

        public var installmentNum: Int32?

        public var installmentPrice: Double?

        public var competitionDynamicPrice: Int32?

        public var competitionPromotionPrice: Int32?

        public var minBeforeControlPriceOfNormal: Int32?

        public var priceShowInfo: ModuleItemListSubItemsShoppingItemMapValue.SearchPrice.PriceShowInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.priceShowInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.floorPrice != nil {
                map["floor_price"] = self.floorPrice!
            }
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.originalSellPrice != nil {
                map["original_sell_price"] = self.originalSellPrice!
            }
            if self.baseTotalPrice != nil {
                map["base_total_price"] = self.baseTotalPrice!
            }
            if self.beforeControlPrice != nil {
                map["before_control_price"] = self.beforeControlPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            if self.supplyPrice != nil {
                map["supply_price"] = self.supplyPrice!
            }
            if self.basicCabinPrice != nil {
                map["basic_cabin_price"] = self.basicCabinPrice!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.firstStandardPrice != nil {
                map["first_standard_price"] = self.firstStandardPrice!
            }
            if self.businessStandardPrice != nil {
                map["business_standard_price"] = self.businessStandardPrice!
            }
            if self.commonStandardPrice != nil {
                map["common_standard_price"] = self.commonStandardPrice!
            }
            if self.interTicketPrice != nil {
                map["inter_ticket_price"] = self.interTicketPrice!
            }
            if self.subtractedPrice != nil {
                map["subtracted_price"] = self.subtractedPrice!
            }
            if self.originCommonPrice != nil {
                map["origin_common_price"] = self.originCommonPrice!
            }
            if self.dynamicPromotionPrice != nil {
                map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
            }
            if self.installmentNum != nil {
                map["installment_num"] = self.installmentNum!
            }
            if self.installmentPrice != nil {
                map["installment_price"] = self.installmentPrice!
            }
            if self.competitionDynamicPrice != nil {
                map["competition_dynamic_price"] = self.competitionDynamicPrice!
            }
            if self.competitionPromotionPrice != nil {
                map["competition_promotion_price"] = self.competitionPromotionPrice!
            }
            if self.minBeforeControlPriceOfNormal != nil {
                map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
            }
            if self.priceShowInfo != nil {
                map["price_show_info"] = self.priceShowInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
                self.floorPrice = dict["floor_price"] as! Int32
            }
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
                self.originalSellPrice = dict["original_sell_price"] as! Int32
            }
            if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
                self.baseTotalPrice = dict["base_total_price"] as! Int32
            }
            if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                self.beforeControlPrice = dict["before_control_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
            if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
                self.supplyPrice = dict["supply_price"] as! Int32
            }
            if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int32
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int32
            }
            if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
                self.firstStandardPrice = dict["first_standard_price"] as! Int32
            }
            if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
                self.businessStandardPrice = dict["business_standard_price"] as! Int32
            }
            if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
                self.commonStandardPrice = dict["common_standard_price"] as! Int32
            }
            if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
                self.interTicketPrice = dict["inter_ticket_price"] as! Int32
            }
            if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
                self.subtractedPrice = dict["subtracted_price"] as! Int32
            }
            if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
                self.originCommonPrice = dict["origin_common_price"] as! Int32
            }
            if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
                self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
            }
            if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
                self.installmentNum = dict["installment_num"] as! Int32
            }
            if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
                self.installmentPrice = dict["installment_price"] as! Double
            }
            if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
                self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
            }
            if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
                self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
            }
            if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
                self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
            }
            if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
                var model = ModuleItemListSubItemsShoppingItemMapValue.SearchPrice.PriceShowInfo()
                model.fromMap(dict["price_show_info"] as! [String: Any])
                self.priceShowInfo = model
            }
        }
    }
    public var searchPrice: ModuleItemListSubItemsShoppingItemMapValue.SearchPrice?

    public var id: String?

    public var cabinQuantity: [String: ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue]?

    public var segmentPrice: [String: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.cabinQuantity != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.cabinQuantity! {
                tmp[k] = v.toMap()
            }
            map["cabin_quantity"] = tmp
        }
        if self.segmentPrice != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.segmentPrice! {
                tmp[k] = v.toMap()
            }
            map["segment_price"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleItemListSubItemsShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("id") && dict["id"] != nil {
            self.id = dict["id"] as! String
        }
        if dict.keys.contains("cabin_quantity") && dict["cabin_quantity"] != nil {
            var tmp : [String: ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue] = [:]
            for (k, v) in dict["cabin_quantity"] as! [String: Any] {
                if v != nil {
                    var model = ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.cabinQuantity = tmp
        }
        if dict.keys.contains("segment_price") && dict["segment_price"] != nil {
            var tmp : [String: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue] = [:]
            for (k, v) in dict["segment_price"] as! [String: Any] {
                if v != nil {
                    var model = ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue()
                    model.fromMap(v as! [String: Any])
                    tmp[k] = model
                }
            }
            self.segmentPrice = tmp
        }
    }
}

public class ModuleGroupItemShoppingItemMapValue : Tea.TeaModel {
    public class CabinQuantityList : Tea.TeaModel {
        public class SegmentPosition : Tea.TeaModel {
            public var journeyIndex: Int32?

            public var segmentIndex: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
            }
        }
        public class Cabin : Tea.TeaModel {
            public var cabin: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var quantity: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabin_class_name"] = self.cabinClassName!
                }
                if self.quantity != nil {
                    map["quantity"] = self.quantity!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                    self.cabinClassName = dict["cabin_class_name"] as! String
                }
                if dict.keys.contains("quantity") && dict["quantity"] != nil {
                    self.quantity = dict["quantity"] as! String
                }
            }
        }
        public var segmentPosition: ModuleGroupItemShoppingItemMapValue.CabinQuantityList.SegmentPosition?

        public var cabin: ModuleGroupItemShoppingItemMapValue.CabinQuantityList.Cabin?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.segmentPosition?.validate()
            try self.cabin?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.segmentPosition != nil {
                map["segment_position"] = self.segmentPosition?.toMap()
            }
            if self.cabin != nil {
                map["cabin"] = self.cabin?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                var model = ModuleGroupItemShoppingItemMapValue.CabinQuantityList.SegmentPosition()
                model.fromMap(dict["segment_position"] as! [String: Any])
                self.segmentPosition = model
            }
            if dict.keys.contains("cabin") && dict["cabin"] != nil {
                var model = ModuleGroupItemShoppingItemMapValue.CabinQuantityList.Cabin()
                model.fromMap(dict["cabin"] as! [String: Any])
                self.cabin = model
            }
        }
    }
    public class SearchPrice : Tea.TeaModel {
        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var tax: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
        }
    }
    public class SegmentPriceList : Tea.TeaModel {
        public class SegmentPosition : Tea.TeaModel {
            public var journeyIndex: Int32?

            public var segmentIndex: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
            }
        }
        public class SearchPrice : Tea.TeaModel {
            public var ticketPrice: Int32?

            public var sellPrice: Int32?

            public var tax: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.sellPrice != nil {
                    map["sell_price"] = self.sellPrice!
                }
                if self.tax != nil {
                    map["tax"] = self.tax!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int32
                }
                if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                    self.sellPrice = dict["sell_price"] as! Int32
                }
                if dict.keys.contains("tax") && dict["tax"] != nil {
                    self.tax = dict["tax"] as! Int32
                }
            }
        }
        public var segmentPosition: ModuleGroupItemShoppingItemMapValue.SegmentPriceList.SegmentPosition?

        public var searchPrice: ModuleGroupItemShoppingItemMapValue.SegmentPriceList.SearchPrice?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.segmentPosition?.validate()
            try self.searchPrice?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.segmentPosition != nil {
                map["segment_position"] = self.segmentPosition?.toMap()
            }
            if self.searchPrice != nil {
                map["search_price"] = self.searchPrice?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                var model = ModuleGroupItemShoppingItemMapValue.SegmentPriceList.SegmentPosition()
                model.fromMap(dict["segment_position"] as! [String: Any])
                self.segmentPosition = model
            }
            if dict.keys.contains("search_price") && dict["search_price"] != nil {
                var model = ModuleGroupItemShoppingItemMapValue.SegmentPriceList.SearchPrice()
                model.fromMap(dict["search_price"] as! [String: Any])
                self.searchPrice = model
            }
        }
    }
    public var cabinQuantityList: [ModuleGroupItemShoppingItemMapValue.CabinQuantityList]?

    public var searchPrice: ModuleGroupItemShoppingItemMapValue.SearchPrice?

    public var segmentPriceList: [ModuleGroupItemShoppingItemMapValue.SegmentPriceList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinQuantityList != nil {
            var tmp : [Any] = []
            for k in self.cabinQuantityList! {
                tmp.append(k.toMap())
            }
            map["cabin_quantity_list"] = tmp
        }
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        if self.segmentPriceList != nil {
            var tmp : [Any] = []
            for k in self.segmentPriceList! {
                tmp.append(k.toMap())
            }
            map["segment_price_list"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_quantity_list") && dict["cabin_quantity_list"] != nil {
            var tmp : [ModuleGroupItemShoppingItemMapValue.CabinQuantityList] = []
            for v in dict["cabin_quantity_list"] as! [Any] {
                var model = ModuleGroupItemShoppingItemMapValue.CabinQuantityList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.cabinQuantityList = tmp
        }
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleGroupItemShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
        if dict.keys.contains("segment_price_list") && dict["segment_price_list"] != nil {
            var tmp : [ModuleGroupItemShoppingItemMapValue.SegmentPriceList] = []
            for v in dict["segment_price_list"] as! [Any] {
                var model = ModuleGroupItemShoppingItemMapValue.SegmentPriceList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.segmentPriceList = tmp
        }
    }
}

public class ModuleGroupItemSubItemPositionMapValue : Tea.TeaModel {
    public var journeyIndex: Int32?

    public var segmentIndex: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.journeyIndex != nil {
            map["journey_index"] = self.journeyIndex!
        }
        if self.segmentIndex != nil {
            map["segment_index"] = self.segmentIndex!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
            self.journeyIndex = dict["journey_index"] as! Int32
        }
        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
            self.segmentIndex = dict["segment_index"] as! Int32
        }
    }
}

public class ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue : Tea.TeaModel {
    public var carryFreepc: Int32?

    public var carryBagWeight: Int32?

    public var carryBagSize: String?

    public var isAllCarryBagWeight: Bool?

    public var airline: String?

    public var startAirport: String?

    public var endAirport: String?

    public var startCityCode: String?

    public var endCityCode: String?

    public var freePcs: Int64?

    public var baggageWeight: Int64?

    public var baggageUnit: String?

    public var baggageSize: String?

    public var allWeight: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.carryFreepc != nil {
            map["carry_freepc"] = self.carryFreepc!
        }
        if self.carryBagWeight != nil {
            map["carry_bag_weight"] = self.carryBagWeight!
        }
        if self.carryBagSize != nil {
            map["carry_bag_size"] = self.carryBagSize!
        }
        if self.isAllCarryBagWeight != nil {
            map["is_all_carry_bag_weight"] = self.isAllCarryBagWeight!
        }
        if self.airline != nil {
            map["airline"] = self.airline!
        }
        if self.startAirport != nil {
            map["start_airport"] = self.startAirport!
        }
        if self.endAirport != nil {
            map["end_airport"] = self.endAirport!
        }
        if self.startCityCode != nil {
            map["start_city_code"] = self.startCityCode!
        }
        if self.endCityCode != nil {
            map["end_city_code"] = self.endCityCode!
        }
        if self.freePcs != nil {
            map["free_pcs"] = self.freePcs!
        }
        if self.baggageWeight != nil {
            map["baggage_weight"] = self.baggageWeight!
        }
        if self.baggageUnit != nil {
            map["baggage_unit"] = self.baggageUnit!
        }
        if self.baggageSize != nil {
            map["baggage_size"] = self.baggageSize!
        }
        if self.allWeight != nil {
            map["all_weight"] = self.allWeight!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("carry_freepc") && dict["carry_freepc"] != nil {
            self.carryFreepc = dict["carry_freepc"] as! Int32
        }
        if dict.keys.contains("carry_bag_weight") && dict["carry_bag_weight"] != nil {
            self.carryBagWeight = dict["carry_bag_weight"] as! Int32
        }
        if dict.keys.contains("carry_bag_size") && dict["carry_bag_size"] != nil {
            self.carryBagSize = dict["carry_bag_size"] as! String
        }
        if dict.keys.contains("is_all_carry_bag_weight") && dict["is_all_carry_bag_weight"] != nil {
            self.isAllCarryBagWeight = dict["is_all_carry_bag_weight"] as! Bool
        }
        if dict.keys.contains("airline") && dict["airline"] != nil {
            self.airline = dict["airline"] as! String
        }
        if dict.keys.contains("start_airport") && dict["start_airport"] != nil {
            self.startAirport = dict["start_airport"] as! String
        }
        if dict.keys.contains("end_airport") && dict["end_airport"] != nil {
            self.endAirport = dict["end_airport"] as! String
        }
        if dict.keys.contains("start_city_code") && dict["start_city_code"] != nil {
            self.startCityCode = dict["start_city_code"] as! String
        }
        if dict.keys.contains("end_city_code") && dict["end_city_code"] != nil {
            self.endCityCode = dict["end_city_code"] as! String
        }
        if dict.keys.contains("free_pcs") && dict["free_pcs"] != nil {
            self.freePcs = dict["free_pcs"] as! Int64
        }
        if dict.keys.contains("baggage_weight") && dict["baggage_weight"] != nil {
            self.baggageWeight = dict["baggage_weight"] as! Int64
        }
        if dict.keys.contains("baggage_unit") && dict["baggage_unit"] != nil {
            self.baggageUnit = dict["baggage_unit"] as! String
        }
        if dict.keys.contains("baggage_size") && dict["baggage_size"] != nil {
            self.baggageSize = dict["baggage_size"] as! String
        }
        if dict.keys.contains("all_weight") && dict["all_weight"] != nil {
            self.allWeight = dict["all_weight"] as! Bool
        }
    }
}

public class ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue : Tea.TeaModel {
    public var struct_: Bool?

    public var cancelFeeInd: Bool?

    public var changeFeeInd: Bool?

    public var upgradeFeeInd: Bool?

    public var reissueInd: Bool?

    public var penaltyTypeCode: Int32?

    public var penaltyApplyRangeCode: Int32?

    public var penaltyChargeTypeCode: Int32?

    public var fee: Double?

    public var currency: String?

    public var penaltyPercent: Double?

    public var startTime: Int32?

    public var endTime: Int32?

    public var timeUnitCode: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.struct_ != nil {
            map["struct"] = self.struct_!
        }
        if self.cancelFeeInd != nil {
            map["cancel_fee_ind"] = self.cancelFeeInd!
        }
        if self.changeFeeInd != nil {
            map["change_fee_ind"] = self.changeFeeInd!
        }
        if self.upgradeFeeInd != nil {
            map["upgrade_fee_ind"] = self.upgradeFeeInd!
        }
        if self.reissueInd != nil {
            map["reissue_ind"] = self.reissueInd!
        }
        if self.penaltyTypeCode != nil {
            map["penalty_type_code"] = self.penaltyTypeCode!
        }
        if self.penaltyApplyRangeCode != nil {
            map["penalty_apply_range_code"] = self.penaltyApplyRangeCode!
        }
        if self.penaltyChargeTypeCode != nil {
            map["penalty_charge_type_code"] = self.penaltyChargeTypeCode!
        }
        if self.fee != nil {
            map["fee"] = self.fee!
        }
        if self.currency != nil {
            map["currency"] = self.currency!
        }
        if self.penaltyPercent != nil {
            map["penalty_percent"] = self.penaltyPercent!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.timeUnitCode != nil {
            map["time_unit_code"] = self.timeUnitCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("struct") && dict["struct"] != nil {
            self.struct_ = dict["struct"] as! Bool
        }
        if dict.keys.contains("cancel_fee_ind") && dict["cancel_fee_ind"] != nil {
            self.cancelFeeInd = dict["cancel_fee_ind"] as! Bool
        }
        if dict.keys.contains("change_fee_ind") && dict["change_fee_ind"] != nil {
            self.changeFeeInd = dict["change_fee_ind"] as! Bool
        }
        if dict.keys.contains("upgrade_fee_ind") && dict["upgrade_fee_ind"] != nil {
            self.upgradeFeeInd = dict["upgrade_fee_ind"] as! Bool
        }
        if dict.keys.contains("reissue_ind") && dict["reissue_ind"] != nil {
            self.reissueInd = dict["reissue_ind"] as! Bool
        }
        if dict.keys.contains("penalty_type_code") && dict["penalty_type_code"] != nil {
            self.penaltyTypeCode = dict["penalty_type_code"] as! Int32
        }
        if dict.keys.contains("penalty_apply_range_code") && dict["penalty_apply_range_code"] != nil {
            self.penaltyApplyRangeCode = dict["penalty_apply_range_code"] as! Int32
        }
        if dict.keys.contains("penalty_charge_type_code") && dict["penalty_charge_type_code"] != nil {
            self.penaltyChargeTypeCode = dict["penalty_charge_type_code"] as! Int32
        }
        if dict.keys.contains("fee") && dict["fee"] != nil {
            self.fee = dict["fee"] as! Double
        }
        if dict.keys.contains("currency") && dict["currency"] != nil {
            self.currency = dict["currency"] as! String
        }
        if dict.keys.contains("penalty_percent") && dict["penalty_percent"] != nil {
            self.penaltyPercent = dict["penalty_percent"] as! Double
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! Int32
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! Int32
        }
        if dict.keys.contains("time_unit_code") && dict["time_unit_code"] != nil {
            self.timeUnitCode = dict["time_unit_code"] as! Int32
        }
    }
}

public class ModuleGroupItemSubItemsShoppingItemMapValue : Tea.TeaModel {
    public class SearchPrice : Tea.TeaModel {
        public var ticketPrice: Int32?

        public var sellPrice: Int32?

        public var tax: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ticketPrice != nil {
                map["ticket_price"] = self.ticketPrice!
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.tax != nil {
                map["tax"] = self.tax!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                self.ticketPrice = dict["ticket_price"] as! Int32
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("tax") && dict["tax"] != nil {
                self.tax = dict["tax"] as! Int32
            }
        }
    }
    public var searchPrice: ModuleGroupItemSubItemsShoppingItemMapValue.SearchPrice?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.searchPrice?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.searchPrice != nil {
            map["search_price"] = self.searchPrice?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("search_price") && dict["search_price"] != nil {
            var model = ModuleGroupItemSubItemsShoppingItemMapValue.SearchPrice()
            model.fromMap(dict["search_price"] as! [String: Any])
            self.searchPrice = model
        }
    }
}

public class ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue : Tea.TeaModel {
    public var carryFreepc: Int32?

    public var carryBagWeight: Int32?

    public var carryBagSize: String?

    public var isAllCarryBagWeight: Bool?

    public var airline: String?

    public var startAirport: String?

    public var endAirport: String?

    public var startCityCode: String?

    public var endCityCode: String?

    public var freePcs: Int64?

    public var baggageWeight: Int64?

    public var baggageUnit: String?

    public var baggageSize: String?

    public var allWeight: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.carryFreepc != nil {
            map["carry_freepc"] = self.carryFreepc!
        }
        if self.carryBagWeight != nil {
            map["carry_bag_weight"] = self.carryBagWeight!
        }
        if self.carryBagSize != nil {
            map["carry_bag_size"] = self.carryBagSize!
        }
        if self.isAllCarryBagWeight != nil {
            map["is_all_carry_bag_weight"] = self.isAllCarryBagWeight!
        }
        if self.airline != nil {
            map["airline"] = self.airline!
        }
        if self.startAirport != nil {
            map["start_airport"] = self.startAirport!
        }
        if self.endAirport != nil {
            map["end_airport"] = self.endAirport!
        }
        if self.startCityCode != nil {
            map["start_city_code"] = self.startCityCode!
        }
        if self.endCityCode != nil {
            map["end_city_code"] = self.endCityCode!
        }
        if self.freePcs != nil {
            map["free_pcs"] = self.freePcs!
        }
        if self.baggageWeight != nil {
            map["baggage_weight"] = self.baggageWeight!
        }
        if self.baggageUnit != nil {
            map["baggage_unit"] = self.baggageUnit!
        }
        if self.baggageSize != nil {
            map["baggage_size"] = self.baggageSize!
        }
        if self.allWeight != nil {
            map["all_weight"] = self.allWeight!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("carry_freepc") && dict["carry_freepc"] != nil {
            self.carryFreepc = dict["carry_freepc"] as! Int32
        }
        if dict.keys.contains("carry_bag_weight") && dict["carry_bag_weight"] != nil {
            self.carryBagWeight = dict["carry_bag_weight"] as! Int32
        }
        if dict.keys.contains("carry_bag_size") && dict["carry_bag_size"] != nil {
            self.carryBagSize = dict["carry_bag_size"] as! String
        }
        if dict.keys.contains("is_all_carry_bag_weight") && dict["is_all_carry_bag_weight"] != nil {
            self.isAllCarryBagWeight = dict["is_all_carry_bag_weight"] as! Bool
        }
        if dict.keys.contains("airline") && dict["airline"] != nil {
            self.airline = dict["airline"] as! String
        }
        if dict.keys.contains("start_airport") && dict["start_airport"] != nil {
            self.startAirport = dict["start_airport"] as! String
        }
        if dict.keys.contains("end_airport") && dict["end_airport"] != nil {
            self.endAirport = dict["end_airport"] as! String
        }
        if dict.keys.contains("start_city_code") && dict["start_city_code"] != nil {
            self.startCityCode = dict["start_city_code"] as! String
        }
        if dict.keys.contains("end_city_code") && dict["end_city_code"] != nil {
            self.endCityCode = dict["end_city_code"] as! String
        }
        if dict.keys.contains("free_pcs") && dict["free_pcs"] != nil {
            self.freePcs = dict["free_pcs"] as! Int64
        }
        if dict.keys.contains("baggage_weight") && dict["baggage_weight"] != nil {
            self.baggageWeight = dict["baggage_weight"] as! Int64
        }
        if dict.keys.contains("baggage_unit") && dict["baggage_unit"] != nil {
            self.baggageUnit = dict["baggage_unit"] as! String
        }
        if dict.keys.contains("baggage_size") && dict["baggage_size"] != nil {
            self.baggageSize = dict["baggage_size"] as! String
        }
        if dict.keys.contains("all_weight") && dict["all_weight"] != nil {
            self.allWeight = dict["all_weight"] as! Bool
        }
    }
}

public class ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue : Tea.TeaModel {
    public var struct_: Bool?

    public var cancelFeeInd: Bool?

    public var changeFeeInd: Bool?

    public var upgradeFeeInd: Bool?

    public var reissueInd: Bool?

    public var penaltyTypeCode: Int32?

    public var penaltyApplyRangeCode: Int32?

    public var penaltyChargeTypeCode: Int32?

    public var fee: Double?

    public var currency: String?

    public var penaltyPercent: Double?

    public var startTime: Int32?

    public var endTime: Int32?

    public var timeUnitCode: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.struct_ != nil {
            map["struct"] = self.struct_!
        }
        if self.cancelFeeInd != nil {
            map["cancel_fee_ind"] = self.cancelFeeInd!
        }
        if self.changeFeeInd != nil {
            map["change_fee_ind"] = self.changeFeeInd!
        }
        if self.upgradeFeeInd != nil {
            map["upgrade_fee_ind"] = self.upgradeFeeInd!
        }
        if self.reissueInd != nil {
            map["reissue_ind"] = self.reissueInd!
        }
        if self.penaltyTypeCode != nil {
            map["penalty_type_code"] = self.penaltyTypeCode!
        }
        if self.penaltyApplyRangeCode != nil {
            map["penalty_apply_range_code"] = self.penaltyApplyRangeCode!
        }
        if self.penaltyChargeTypeCode != nil {
            map["penalty_charge_type_code"] = self.penaltyChargeTypeCode!
        }
        if self.fee != nil {
            map["fee"] = self.fee!
        }
        if self.currency != nil {
            map["currency"] = self.currency!
        }
        if self.penaltyPercent != nil {
            map["penalty_percent"] = self.penaltyPercent!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.timeUnitCode != nil {
            map["time_unit_code"] = self.timeUnitCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("struct") && dict["struct"] != nil {
            self.struct_ = dict["struct"] as! Bool
        }
        if dict.keys.contains("cancel_fee_ind") && dict["cancel_fee_ind"] != nil {
            self.cancelFeeInd = dict["cancel_fee_ind"] as! Bool
        }
        if dict.keys.contains("change_fee_ind") && dict["change_fee_ind"] != nil {
            self.changeFeeInd = dict["change_fee_ind"] as! Bool
        }
        if dict.keys.contains("upgrade_fee_ind") && dict["upgrade_fee_ind"] != nil {
            self.upgradeFeeInd = dict["upgrade_fee_ind"] as! Bool
        }
        if dict.keys.contains("reissue_ind") && dict["reissue_ind"] != nil {
            self.reissueInd = dict["reissue_ind"] as! Bool
        }
        if dict.keys.contains("penalty_type_code") && dict["penalty_type_code"] != nil {
            self.penaltyTypeCode = dict["penalty_type_code"] as! Int32
        }
        if dict.keys.contains("penalty_apply_range_code") && dict["penalty_apply_range_code"] != nil {
            self.penaltyApplyRangeCode = dict["penalty_apply_range_code"] as! Int32
        }
        if dict.keys.contains("penalty_charge_type_code") && dict["penalty_charge_type_code"] != nil {
            self.penaltyChargeTypeCode = dict["penalty_charge_type_code"] as! Int32
        }
        if dict.keys.contains("fee") && dict["fee"] != nil {
            self.fee = dict["fee"] as! Double
        }
        if dict.keys.contains("currency") && dict["currency"] != nil {
            self.currency = dict["currency"] as! String
        }
        if dict.keys.contains("penalty_percent") && dict["penalty_percent"] != nil {
            self.penaltyPercent = dict["penalty_percent"] as! Double
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! Int32
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! Int32
        }
        if dict.keys.contains("time_unit_code") && dict["time_unit_code"] != nil {
            self.timeUnitCode = dict["time_unit_code"] as! Int32
        }
    }
}

public class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue : Tea.TeaModel {
    public var cabin: String?

    public var cabinClass: String?

    public var cabinClassName: String?

    public var cabinClassMemo: String?

    public var specification: String?

    public var quantity: String?

    public var linkCabins: [String]?

    public var reshopChangeCabin: Bool?

    public var childCabinType: Int32?

    public var infantBasicCabin: String?

    public var innerCabinClass: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabin != nil {
            map["cabin"] = self.cabin!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.cabinClassName != nil {
            map["cabin_class_name"] = self.cabinClassName!
        }
        if self.cabinClassMemo != nil {
            map["cabin_class_memo"] = self.cabinClassMemo!
        }
        if self.specification != nil {
            map["specification"] = self.specification!
        }
        if self.quantity != nil {
            map["quantity"] = self.quantity!
        }
        if self.linkCabins != nil {
            map["link_cabins"] = self.linkCabins!
        }
        if self.reshopChangeCabin != nil {
            map["reshop_change_cabin"] = self.reshopChangeCabin!
        }
        if self.childCabinType != nil {
            map["child_cabin_type"] = self.childCabinType!
        }
        if self.infantBasicCabin != nil {
            map["infant_basic_cabin"] = self.infantBasicCabin!
        }
        if self.innerCabinClass != nil {
            map["inner_cabin_class"] = self.innerCabinClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin") && dict["cabin"] != nil {
            self.cabin = dict["cabin"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
            self.cabinClassName = dict["cabin_class_name"] as! String
        }
        if dict.keys.contains("cabin_class_memo") && dict["cabin_class_memo"] != nil {
            self.cabinClassMemo = dict["cabin_class_memo"] as! String
        }
        if dict.keys.contains("specification") && dict["specification"] != nil {
            self.specification = dict["specification"] as! String
        }
        if dict.keys.contains("quantity") && dict["quantity"] != nil {
            self.quantity = dict["quantity"] as! String
        }
        if dict.keys.contains("link_cabins") && dict["link_cabins"] != nil {
            self.linkCabins = dict["link_cabins"] as! [String]
        }
        if dict.keys.contains("reshop_change_cabin") && dict["reshop_change_cabin"] != nil {
            self.reshopChangeCabin = dict["reshop_change_cabin"] as! Bool
        }
        if dict.keys.contains("child_cabin_type") && dict["child_cabin_type"] != nil {
            self.childCabinType = dict["child_cabin_type"] as! Int32
        }
        if dict.keys.contains("infant_basic_cabin") && dict["infant_basic_cabin"] != nil {
            self.infantBasicCabin = dict["infant_basic_cabin"] as! String
        }
        if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
            self.innerCabinClass = dict["inner_cabin_class"] as! Int32
        }
    }
}

public class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue : Tea.TeaModel {
    public class PriceShowInfo : Tea.TeaModel {
        public var discountInfo: String?

        public var discountNum: Double?

        public var showTicketPrice: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.discountInfo != nil {
                map["discount_info"] = self.discountInfo!
            }
            if self.discountNum != nil {
                map["discount_num"] = self.discountNum!
            }
            if self.showTicketPrice != nil {
                map["show_ticket_price"] = self.showTicketPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                self.discountInfo = dict["discount_info"] as! String
            }
            if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                self.discountNum = dict["discount_num"] as! Double
            }
            if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                self.showTicketPrice = dict["show_ticket_price"] as! Bool
            }
        }
    }
    public var floorPrice: Int32?

    public var ticketPrice: Int32?

    public var sellPrice: Int32?

    public var originalSellPrice: Int32?

    public var baseTotalPrice: Int32?

    public var beforeControlPrice: Int32?

    public var tax: Int32?

    public var supplyPrice: Int32?

    public var basicCabinPrice: Int32?

    public var buildPrice: Int32?

    public var oilPrice: Int32?

    public var firstStandardPrice: Int32?

    public var businessStandardPrice: Int32?

    public var commonStandardPrice: Int32?

    public var interTicketPrice: Int32?

    public var subtractedPrice: Int32?

    public var originCommonPrice: Int32?

    public var dynamicPromotionPrice: Int32?

    public var installmentNum: Int32?

    public var installmentPrice: Double?

    public var competitionDynamicPrice: Int32?

    public var competitionPromotionPrice: Int32?

    public var minBeforeControlPriceOfNormal: Int32?

    public var priceShowInfo: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue.PriceShowInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceShowInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.floorPrice != nil {
            map["floor_price"] = self.floorPrice!
        }
        if self.ticketPrice != nil {
            map["ticket_price"] = self.ticketPrice!
        }
        if self.sellPrice != nil {
            map["sell_price"] = self.sellPrice!
        }
        if self.originalSellPrice != nil {
            map["original_sell_price"] = self.originalSellPrice!
        }
        if self.baseTotalPrice != nil {
            map["base_total_price"] = self.baseTotalPrice!
        }
        if self.beforeControlPrice != nil {
            map["before_control_price"] = self.beforeControlPrice!
        }
        if self.tax != nil {
            map["tax"] = self.tax!
        }
        if self.supplyPrice != nil {
            map["supply_price"] = self.supplyPrice!
        }
        if self.basicCabinPrice != nil {
            map["basic_cabin_price"] = self.basicCabinPrice!
        }
        if self.buildPrice != nil {
            map["build_price"] = self.buildPrice!
        }
        if self.oilPrice != nil {
            map["oil_price"] = self.oilPrice!
        }
        if self.firstStandardPrice != nil {
            map["first_standard_price"] = self.firstStandardPrice!
        }
        if self.businessStandardPrice != nil {
            map["business_standard_price"] = self.businessStandardPrice!
        }
        if self.commonStandardPrice != nil {
            map["common_standard_price"] = self.commonStandardPrice!
        }
        if self.interTicketPrice != nil {
            map["inter_ticket_price"] = self.interTicketPrice!
        }
        if self.subtractedPrice != nil {
            map["subtracted_price"] = self.subtractedPrice!
        }
        if self.originCommonPrice != nil {
            map["origin_common_price"] = self.originCommonPrice!
        }
        if self.dynamicPromotionPrice != nil {
            map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
        }
        if self.installmentNum != nil {
            map["installment_num"] = self.installmentNum!
        }
        if self.installmentPrice != nil {
            map["installment_price"] = self.installmentPrice!
        }
        if self.competitionDynamicPrice != nil {
            map["competition_dynamic_price"] = self.competitionDynamicPrice!
        }
        if self.competitionPromotionPrice != nil {
            map["competition_promotion_price"] = self.competitionPromotionPrice!
        }
        if self.minBeforeControlPriceOfNormal != nil {
            map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
        }
        if self.priceShowInfo != nil {
            map["price_show_info"] = self.priceShowInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
            self.floorPrice = dict["floor_price"] as! Int32
        }
        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
            self.ticketPrice = dict["ticket_price"] as! Int32
        }
        if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
            self.sellPrice = dict["sell_price"] as! Int32
        }
        if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
            self.originalSellPrice = dict["original_sell_price"] as! Int32
        }
        if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
            self.baseTotalPrice = dict["base_total_price"] as! Int32
        }
        if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
            self.beforeControlPrice = dict["before_control_price"] as! Int32
        }
        if dict.keys.contains("tax") && dict["tax"] != nil {
            self.tax = dict["tax"] as! Int32
        }
        if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
            self.supplyPrice = dict["supply_price"] as! Int32
        }
        if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
            self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
        }
        if dict.keys.contains("build_price") && dict["build_price"] != nil {
            self.buildPrice = dict["build_price"] as! Int32
        }
        if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
            self.oilPrice = dict["oil_price"] as! Int32
        }
        if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
            self.firstStandardPrice = dict["first_standard_price"] as! Int32
        }
        if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
            self.businessStandardPrice = dict["business_standard_price"] as! Int32
        }
        if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
            self.commonStandardPrice = dict["common_standard_price"] as! Int32
        }
        if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
            self.interTicketPrice = dict["inter_ticket_price"] as! Int32
        }
        if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
            self.subtractedPrice = dict["subtracted_price"] as! Int32
        }
        if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
            self.originCommonPrice = dict["origin_common_price"] as! Int32
        }
        if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
            self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
        }
        if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
            self.installmentNum = dict["installment_num"] as! Int32
        }
        if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
            self.installmentPrice = dict["installment_price"] as! Double
        }
        if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
            self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
        }
        if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
            self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
        }
        if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
            self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
        }
        if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
            var model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue.PriceShowInfo()
            model.fromMap(dict["price_show_info"] as! [String: Any])
            self.priceShowInfo = model
        }
    }
}

public class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue : Tea.TeaModel {
    public var cabin: String?

    public var cabinClass: String?

    public var cabinClassName: String?

    public var cabinClassMemo: String?

    public var specification: String?

    public var quantity: String?

    public var linkCabins: [String]?

    public var reshopChangeCabin: Bool?

    public var childCabinType: Int32?

    public var infantBasicCabin: String?

    public var innerCabinClass: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabin != nil {
            map["cabin"] = self.cabin!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.cabinClassName != nil {
            map["cabin_class_name"] = self.cabinClassName!
        }
        if self.cabinClassMemo != nil {
            map["cabin_class_memo"] = self.cabinClassMemo!
        }
        if self.specification != nil {
            map["specification"] = self.specification!
        }
        if self.quantity != nil {
            map["quantity"] = self.quantity!
        }
        if self.linkCabins != nil {
            map["link_cabins"] = self.linkCabins!
        }
        if self.reshopChangeCabin != nil {
            map["reshop_change_cabin"] = self.reshopChangeCabin!
        }
        if self.childCabinType != nil {
            map["child_cabin_type"] = self.childCabinType!
        }
        if self.infantBasicCabin != nil {
            map["infant_basic_cabin"] = self.infantBasicCabin!
        }
        if self.innerCabinClass != nil {
            map["inner_cabin_class"] = self.innerCabinClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin") && dict["cabin"] != nil {
            self.cabin = dict["cabin"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
            self.cabinClassName = dict["cabin_class_name"] as! String
        }
        if dict.keys.contains("cabin_class_memo") && dict["cabin_class_memo"] != nil {
            self.cabinClassMemo = dict["cabin_class_memo"] as! String
        }
        if dict.keys.contains("specification") && dict["specification"] != nil {
            self.specification = dict["specification"] as! String
        }
        if dict.keys.contains("quantity") && dict["quantity"] != nil {
            self.quantity = dict["quantity"] as! String
        }
        if dict.keys.contains("link_cabins") && dict["link_cabins"] != nil {
            self.linkCabins = dict["link_cabins"] as! [String]
        }
        if dict.keys.contains("reshop_change_cabin") && dict["reshop_change_cabin"] != nil {
            self.reshopChangeCabin = dict["reshop_change_cabin"] as! Bool
        }
        if dict.keys.contains("child_cabin_type") && dict["child_cabin_type"] != nil {
            self.childCabinType = dict["child_cabin_type"] as! Int32
        }
        if dict.keys.contains("infant_basic_cabin") && dict["infant_basic_cabin"] != nil {
            self.infantBasicCabin = dict["infant_basic_cabin"] as! String
        }
        if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
            self.innerCabinClass = dict["inner_cabin_class"] as! Int32
        }
    }
}

public class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue : Tea.TeaModel {
    public class PriceShowInfo : Tea.TeaModel {
        public var discountInfo: String?

        public var discountNum: Double?

        public var showTicketPrice: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.discountInfo != nil {
                map["discount_info"] = self.discountInfo!
            }
            if self.discountNum != nil {
                map["discount_num"] = self.discountNum!
            }
            if self.showTicketPrice != nil {
                map["show_ticket_price"] = self.showTicketPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                self.discountInfo = dict["discount_info"] as! String
            }
            if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                self.discountNum = dict["discount_num"] as! Double
            }
            if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                self.showTicketPrice = dict["show_ticket_price"] as! Bool
            }
        }
    }
    public var floorPrice: Int32?

    public var ticketPrice: Int32?

    public var sellPrice: Int32?

    public var originalSellPrice: Int32?

    public var baseTotalPrice: Int32?

    public var beforeControlPrice: Int32?

    public var tax: Int32?

    public var supplyPrice: Int32?

    public var basicCabinPrice: Int32?

    public var buildPrice: Int32?

    public var oilPrice: Int32?

    public var firstStandardPrice: Int32?

    public var businessStandardPrice: Int32?

    public var commonStandardPrice: Int32?

    public var interTicketPrice: Int32?

    public var subtractedPrice: Int32?

    public var originCommonPrice: Int32?

    public var dynamicPromotionPrice: Int32?

    public var installmentNum: Int32?

    public var installmentPrice: Double?

    public var competitionDynamicPrice: Int32?

    public var competitionPromotionPrice: Int32?

    public var minBeforeControlPriceOfNormal: Int32?

    public var priceShowInfo: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue.PriceShowInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceShowInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.floorPrice != nil {
            map["floor_price"] = self.floorPrice!
        }
        if self.ticketPrice != nil {
            map["ticket_price"] = self.ticketPrice!
        }
        if self.sellPrice != nil {
            map["sell_price"] = self.sellPrice!
        }
        if self.originalSellPrice != nil {
            map["original_sell_price"] = self.originalSellPrice!
        }
        if self.baseTotalPrice != nil {
            map["base_total_price"] = self.baseTotalPrice!
        }
        if self.beforeControlPrice != nil {
            map["before_control_price"] = self.beforeControlPrice!
        }
        if self.tax != nil {
            map["tax"] = self.tax!
        }
        if self.supplyPrice != nil {
            map["supply_price"] = self.supplyPrice!
        }
        if self.basicCabinPrice != nil {
            map["basic_cabin_price"] = self.basicCabinPrice!
        }
        if self.buildPrice != nil {
            map["build_price"] = self.buildPrice!
        }
        if self.oilPrice != nil {
            map["oil_price"] = self.oilPrice!
        }
        if self.firstStandardPrice != nil {
            map["first_standard_price"] = self.firstStandardPrice!
        }
        if self.businessStandardPrice != nil {
            map["business_standard_price"] = self.businessStandardPrice!
        }
        if self.commonStandardPrice != nil {
            map["common_standard_price"] = self.commonStandardPrice!
        }
        if self.interTicketPrice != nil {
            map["inter_ticket_price"] = self.interTicketPrice!
        }
        if self.subtractedPrice != nil {
            map["subtracted_price"] = self.subtractedPrice!
        }
        if self.originCommonPrice != nil {
            map["origin_common_price"] = self.originCommonPrice!
        }
        if self.dynamicPromotionPrice != nil {
            map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
        }
        if self.installmentNum != nil {
            map["installment_num"] = self.installmentNum!
        }
        if self.installmentPrice != nil {
            map["installment_price"] = self.installmentPrice!
        }
        if self.competitionDynamicPrice != nil {
            map["competition_dynamic_price"] = self.competitionDynamicPrice!
        }
        if self.competitionPromotionPrice != nil {
            map["competition_promotion_price"] = self.competitionPromotionPrice!
        }
        if self.minBeforeControlPriceOfNormal != nil {
            map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
        }
        if self.priceShowInfo != nil {
            map["price_show_info"] = self.priceShowInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
            self.floorPrice = dict["floor_price"] as! Int32
        }
        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
            self.ticketPrice = dict["ticket_price"] as! Int32
        }
        if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
            self.sellPrice = dict["sell_price"] as! Int32
        }
        if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
            self.originalSellPrice = dict["original_sell_price"] as! Int32
        }
        if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
            self.baseTotalPrice = dict["base_total_price"] as! Int32
        }
        if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
            self.beforeControlPrice = dict["before_control_price"] as! Int32
        }
        if dict.keys.contains("tax") && dict["tax"] != nil {
            self.tax = dict["tax"] as! Int32
        }
        if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
            self.supplyPrice = dict["supply_price"] as! Int32
        }
        if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
            self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
        }
        if dict.keys.contains("build_price") && dict["build_price"] != nil {
            self.buildPrice = dict["build_price"] as! Int32
        }
        if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
            self.oilPrice = dict["oil_price"] as! Int32
        }
        if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
            self.firstStandardPrice = dict["first_standard_price"] as! Int32
        }
        if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
            self.businessStandardPrice = dict["business_standard_price"] as! Int32
        }
        if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
            self.commonStandardPrice = dict["common_standard_price"] as! Int32
        }
        if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
            self.interTicketPrice = dict["inter_ticket_price"] as! Int32
        }
        if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
            self.subtractedPrice = dict["subtracted_price"] as! Int32
        }
        if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
            self.originCommonPrice = dict["origin_common_price"] as! Int32
        }
        if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
            self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
        }
        if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
            self.installmentNum = dict["installment_num"] as! Int32
        }
        if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
            self.installmentPrice = dict["installment_price"] as! Double
        }
        if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
            self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
        }
        if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
            self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
        }
        if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
            self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
        }
        if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
            var model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue.PriceShowInfo()
            model.fromMap(dict["price_show_info"] as! [String: Any])
            self.priceShowInfo = model
        }
    }
}

public class ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue : Tea.TeaModel {
    public var cabin: String?

    public var cabinClass: String?

    public var cabinClassName: String?

    public var cabinClassMemo: String?

    public var specification: String?

    public var quantity: String?

    public var linkCabins: [String]?

    public var reshopChangeCabin: Bool?

    public var childCabinType: Int32?

    public var infantBasicCabin: String?

    public var innerCabinClass: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabin != nil {
            map["cabin"] = self.cabin!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.cabinClassName != nil {
            map["cabin_class_name"] = self.cabinClassName!
        }
        if self.cabinClassMemo != nil {
            map["cabin_class_memo"] = self.cabinClassMemo!
        }
        if self.specification != nil {
            map["specification"] = self.specification!
        }
        if self.quantity != nil {
            map["quantity"] = self.quantity!
        }
        if self.linkCabins != nil {
            map["link_cabins"] = self.linkCabins!
        }
        if self.reshopChangeCabin != nil {
            map["reshop_change_cabin"] = self.reshopChangeCabin!
        }
        if self.childCabinType != nil {
            map["child_cabin_type"] = self.childCabinType!
        }
        if self.infantBasicCabin != nil {
            map["infant_basic_cabin"] = self.infantBasicCabin!
        }
        if self.innerCabinClass != nil {
            map["inner_cabin_class"] = self.innerCabinClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin") && dict["cabin"] != nil {
            self.cabin = dict["cabin"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
            self.cabinClassName = dict["cabin_class_name"] as! String
        }
        if dict.keys.contains("cabin_class_memo") && dict["cabin_class_memo"] != nil {
            self.cabinClassMemo = dict["cabin_class_memo"] as! String
        }
        if dict.keys.contains("specification") && dict["specification"] != nil {
            self.specification = dict["specification"] as! String
        }
        if dict.keys.contains("quantity") && dict["quantity"] != nil {
            self.quantity = dict["quantity"] as! String
        }
        if dict.keys.contains("link_cabins") && dict["link_cabins"] != nil {
            self.linkCabins = dict["link_cabins"] as! [String]
        }
        if dict.keys.contains("reshop_change_cabin") && dict["reshop_change_cabin"] != nil {
            self.reshopChangeCabin = dict["reshop_change_cabin"] as! Bool
        }
        if dict.keys.contains("child_cabin_type") && dict["child_cabin_type"] != nil {
            self.childCabinType = dict["child_cabin_type"] as! Int32
        }
        if dict.keys.contains("infant_basic_cabin") && dict["infant_basic_cabin"] != nil {
            self.infantBasicCabin = dict["infant_basic_cabin"] as! String
        }
        if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
            self.innerCabinClass = dict["inner_cabin_class"] as! Int32
        }
    }
}

public class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue : Tea.TeaModel {
    public class PriceShowInfo : Tea.TeaModel {
        public var discountInfo: String?

        public var discountNum: Double?

        public var showTicketPrice: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.discountInfo != nil {
                map["discount_info"] = self.discountInfo!
            }
            if self.discountNum != nil {
                map["discount_num"] = self.discountNum!
            }
            if self.showTicketPrice != nil {
                map["show_ticket_price"] = self.showTicketPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                self.discountInfo = dict["discount_info"] as! String
            }
            if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                self.discountNum = dict["discount_num"] as! Double
            }
            if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                self.showTicketPrice = dict["show_ticket_price"] as! Bool
            }
        }
    }
    public var floorPrice: Int32?

    public var ticketPrice: Int32?

    public var sellPrice: Int32?

    public var originalSellPrice: Int32?

    public var baseTotalPrice: Int32?

    public var beforeControlPrice: Int32?

    public var tax: Int32?

    public var supplyPrice: Int32?

    public var basicCabinPrice: Int32?

    public var buildPrice: Int32?

    public var oilPrice: Int32?

    public var firstStandardPrice: Int32?

    public var businessStandardPrice: Int32?

    public var commonStandardPrice: Int32?

    public var interTicketPrice: Int32?

    public var subtractedPrice: Int32?

    public var originCommonPrice: Int32?

    public var dynamicPromotionPrice: Int32?

    public var installmentNum: Int32?

    public var installmentPrice: Double?

    public var competitionDynamicPrice: Int32?

    public var competitionPromotionPrice: Int32?

    public var minBeforeControlPriceOfNormal: Int32?

    public var priceShowInfo: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue.PriceShowInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceShowInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.floorPrice != nil {
            map["floor_price"] = self.floorPrice!
        }
        if self.ticketPrice != nil {
            map["ticket_price"] = self.ticketPrice!
        }
        if self.sellPrice != nil {
            map["sell_price"] = self.sellPrice!
        }
        if self.originalSellPrice != nil {
            map["original_sell_price"] = self.originalSellPrice!
        }
        if self.baseTotalPrice != nil {
            map["base_total_price"] = self.baseTotalPrice!
        }
        if self.beforeControlPrice != nil {
            map["before_control_price"] = self.beforeControlPrice!
        }
        if self.tax != nil {
            map["tax"] = self.tax!
        }
        if self.supplyPrice != nil {
            map["supply_price"] = self.supplyPrice!
        }
        if self.basicCabinPrice != nil {
            map["basic_cabin_price"] = self.basicCabinPrice!
        }
        if self.buildPrice != nil {
            map["build_price"] = self.buildPrice!
        }
        if self.oilPrice != nil {
            map["oil_price"] = self.oilPrice!
        }
        if self.firstStandardPrice != nil {
            map["first_standard_price"] = self.firstStandardPrice!
        }
        if self.businessStandardPrice != nil {
            map["business_standard_price"] = self.businessStandardPrice!
        }
        if self.commonStandardPrice != nil {
            map["common_standard_price"] = self.commonStandardPrice!
        }
        if self.interTicketPrice != nil {
            map["inter_ticket_price"] = self.interTicketPrice!
        }
        if self.subtractedPrice != nil {
            map["subtracted_price"] = self.subtractedPrice!
        }
        if self.originCommonPrice != nil {
            map["origin_common_price"] = self.originCommonPrice!
        }
        if self.dynamicPromotionPrice != nil {
            map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
        }
        if self.installmentNum != nil {
            map["installment_num"] = self.installmentNum!
        }
        if self.installmentPrice != nil {
            map["installment_price"] = self.installmentPrice!
        }
        if self.competitionDynamicPrice != nil {
            map["competition_dynamic_price"] = self.competitionDynamicPrice!
        }
        if self.competitionPromotionPrice != nil {
            map["competition_promotion_price"] = self.competitionPromotionPrice!
        }
        if self.minBeforeControlPriceOfNormal != nil {
            map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
        }
        if self.priceShowInfo != nil {
            map["price_show_info"] = self.priceShowInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
            self.floorPrice = dict["floor_price"] as! Int32
        }
        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
            self.ticketPrice = dict["ticket_price"] as! Int32
        }
        if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
            self.sellPrice = dict["sell_price"] as! Int32
        }
        if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
            self.originalSellPrice = dict["original_sell_price"] as! Int32
        }
        if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
            self.baseTotalPrice = dict["base_total_price"] as! Int32
        }
        if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
            self.beforeControlPrice = dict["before_control_price"] as! Int32
        }
        if dict.keys.contains("tax") && dict["tax"] != nil {
            self.tax = dict["tax"] as! Int32
        }
        if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
            self.supplyPrice = dict["supply_price"] as! Int32
        }
        if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
            self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
        }
        if dict.keys.contains("build_price") && dict["build_price"] != nil {
            self.buildPrice = dict["build_price"] as! Int32
        }
        if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
            self.oilPrice = dict["oil_price"] as! Int32
        }
        if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
            self.firstStandardPrice = dict["first_standard_price"] as! Int32
        }
        if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
            self.businessStandardPrice = dict["business_standard_price"] as! Int32
        }
        if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
            self.commonStandardPrice = dict["common_standard_price"] as! Int32
        }
        if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
            self.interTicketPrice = dict["inter_ticket_price"] as! Int32
        }
        if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
            self.subtractedPrice = dict["subtracted_price"] as! Int32
        }
        if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
            self.originCommonPrice = dict["origin_common_price"] as! Int32
        }
        if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
            self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
        }
        if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
            self.installmentNum = dict["installment_num"] as! Int32
        }
        if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
            self.installmentPrice = dict["installment_price"] as! Double
        }
        if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
            self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
        }
        if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
            self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
        }
        if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
            self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
        }
        if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
            var model = ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue.PriceShowInfo()
            model.fromMap(dict["price_show_info"] as! [String: Any])
            self.priceShowInfo = model
        }
    }
}

public class ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue : Tea.TeaModel {
    public var cabin: String?

    public var cabinClass: String?

    public var cabinClassName: String?

    public var cabinClassMemo: String?

    public var specification: String?

    public var quantity: String?

    public var linkCabins: [String]?

    public var reshopChangeCabin: Bool?

    public var childCabinType: Int32?

    public var infantBasicCabin: String?

    public var innerCabinClass: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabin != nil {
            map["cabin"] = self.cabin!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.cabinClassName != nil {
            map["cabin_class_name"] = self.cabinClassName!
        }
        if self.cabinClassMemo != nil {
            map["cabin_class_memo"] = self.cabinClassMemo!
        }
        if self.specification != nil {
            map["specification"] = self.specification!
        }
        if self.quantity != nil {
            map["quantity"] = self.quantity!
        }
        if self.linkCabins != nil {
            map["link_cabins"] = self.linkCabins!
        }
        if self.reshopChangeCabin != nil {
            map["reshop_change_cabin"] = self.reshopChangeCabin!
        }
        if self.childCabinType != nil {
            map["child_cabin_type"] = self.childCabinType!
        }
        if self.infantBasicCabin != nil {
            map["infant_basic_cabin"] = self.infantBasicCabin!
        }
        if self.innerCabinClass != nil {
            map["inner_cabin_class"] = self.innerCabinClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin") && dict["cabin"] != nil {
            self.cabin = dict["cabin"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
            self.cabinClassName = dict["cabin_class_name"] as! String
        }
        if dict.keys.contains("cabin_class_memo") && dict["cabin_class_memo"] != nil {
            self.cabinClassMemo = dict["cabin_class_memo"] as! String
        }
        if dict.keys.contains("specification") && dict["specification"] != nil {
            self.specification = dict["specification"] as! String
        }
        if dict.keys.contains("quantity") && dict["quantity"] != nil {
            self.quantity = dict["quantity"] as! String
        }
        if dict.keys.contains("link_cabins") && dict["link_cabins"] != nil {
            self.linkCabins = dict["link_cabins"] as! [String]
        }
        if dict.keys.contains("reshop_change_cabin") && dict["reshop_change_cabin"] != nil {
            self.reshopChangeCabin = dict["reshop_change_cabin"] as! Bool
        }
        if dict.keys.contains("child_cabin_type") && dict["child_cabin_type"] != nil {
            self.childCabinType = dict["child_cabin_type"] as! Int32
        }
        if dict.keys.contains("infant_basic_cabin") && dict["infant_basic_cabin"] != nil {
            self.infantBasicCabin = dict["infant_basic_cabin"] as! String
        }
        if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
            self.innerCabinClass = dict["inner_cabin_class"] as! Int32
        }
    }
}

public class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue : Tea.TeaModel {
    public class PriceShowInfo : Tea.TeaModel {
        public var discountInfo: String?

        public var discountNum: Double?

        public var showTicketPrice: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.discountInfo != nil {
                map["discount_info"] = self.discountInfo!
            }
            if self.discountNum != nil {
                map["discount_num"] = self.discountNum!
            }
            if self.showTicketPrice != nil {
                map["show_ticket_price"] = self.showTicketPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                self.discountInfo = dict["discount_info"] as! String
            }
            if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                self.discountNum = dict["discount_num"] as! Double
            }
            if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                self.showTicketPrice = dict["show_ticket_price"] as! Bool
            }
        }
    }
    public var floorPrice: Int32?

    public var ticketPrice: Int32?

    public var sellPrice: Int32?

    public var originalSellPrice: Int32?

    public var baseTotalPrice: Int32?

    public var beforeControlPrice: Int32?

    public var tax: Int32?

    public var supplyPrice: Int32?

    public var basicCabinPrice: Int32?

    public var buildPrice: Int32?

    public var oilPrice: Int32?

    public var firstStandardPrice: Int32?

    public var businessStandardPrice: Int32?

    public var commonStandardPrice: Int32?

    public var interTicketPrice: Int32?

    public var subtractedPrice: Int32?

    public var originCommonPrice: Int32?

    public var dynamicPromotionPrice: Int32?

    public var installmentNum: Int32?

    public var installmentPrice: Double?

    public var competitionDynamicPrice: Int32?

    public var competitionPromotionPrice: Int32?

    public var minBeforeControlPriceOfNormal: Int32?

    public var priceShowInfo: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue.PriceShowInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceShowInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.floorPrice != nil {
            map["floor_price"] = self.floorPrice!
        }
        if self.ticketPrice != nil {
            map["ticket_price"] = self.ticketPrice!
        }
        if self.sellPrice != nil {
            map["sell_price"] = self.sellPrice!
        }
        if self.originalSellPrice != nil {
            map["original_sell_price"] = self.originalSellPrice!
        }
        if self.baseTotalPrice != nil {
            map["base_total_price"] = self.baseTotalPrice!
        }
        if self.beforeControlPrice != nil {
            map["before_control_price"] = self.beforeControlPrice!
        }
        if self.tax != nil {
            map["tax"] = self.tax!
        }
        if self.supplyPrice != nil {
            map["supply_price"] = self.supplyPrice!
        }
        if self.basicCabinPrice != nil {
            map["basic_cabin_price"] = self.basicCabinPrice!
        }
        if self.buildPrice != nil {
            map["build_price"] = self.buildPrice!
        }
        if self.oilPrice != nil {
            map["oil_price"] = self.oilPrice!
        }
        if self.firstStandardPrice != nil {
            map["first_standard_price"] = self.firstStandardPrice!
        }
        if self.businessStandardPrice != nil {
            map["business_standard_price"] = self.businessStandardPrice!
        }
        if self.commonStandardPrice != nil {
            map["common_standard_price"] = self.commonStandardPrice!
        }
        if self.interTicketPrice != nil {
            map["inter_ticket_price"] = self.interTicketPrice!
        }
        if self.subtractedPrice != nil {
            map["subtracted_price"] = self.subtractedPrice!
        }
        if self.originCommonPrice != nil {
            map["origin_common_price"] = self.originCommonPrice!
        }
        if self.dynamicPromotionPrice != nil {
            map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
        }
        if self.installmentNum != nil {
            map["installment_num"] = self.installmentNum!
        }
        if self.installmentPrice != nil {
            map["installment_price"] = self.installmentPrice!
        }
        if self.competitionDynamicPrice != nil {
            map["competition_dynamic_price"] = self.competitionDynamicPrice!
        }
        if self.competitionPromotionPrice != nil {
            map["competition_promotion_price"] = self.competitionPromotionPrice!
        }
        if self.minBeforeControlPriceOfNormal != nil {
            map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
        }
        if self.priceShowInfo != nil {
            map["price_show_info"] = self.priceShowInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
            self.floorPrice = dict["floor_price"] as! Int32
        }
        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
            self.ticketPrice = dict["ticket_price"] as! Int32
        }
        if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
            self.sellPrice = dict["sell_price"] as! Int32
        }
        if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
            self.originalSellPrice = dict["original_sell_price"] as! Int32
        }
        if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
            self.baseTotalPrice = dict["base_total_price"] as! Int32
        }
        if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
            self.beforeControlPrice = dict["before_control_price"] as! Int32
        }
        if dict.keys.contains("tax") && dict["tax"] != nil {
            self.tax = dict["tax"] as! Int32
        }
        if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
            self.supplyPrice = dict["supply_price"] as! Int32
        }
        if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
            self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
        }
        if dict.keys.contains("build_price") && dict["build_price"] != nil {
            self.buildPrice = dict["build_price"] as! Int32
        }
        if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
            self.oilPrice = dict["oil_price"] as! Int32
        }
        if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
            self.firstStandardPrice = dict["first_standard_price"] as! Int32
        }
        if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
            self.businessStandardPrice = dict["business_standard_price"] as! Int32
        }
        if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
            self.commonStandardPrice = dict["common_standard_price"] as! Int32
        }
        if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
            self.interTicketPrice = dict["inter_ticket_price"] as! Int32
        }
        if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
            self.subtractedPrice = dict["subtracted_price"] as! Int32
        }
        if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
            self.originCommonPrice = dict["origin_common_price"] as! Int32
        }
        if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
            self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
        }
        if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
            self.installmentNum = dict["installment_num"] as! Int32
        }
        if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
            self.installmentPrice = dict["installment_price"] as! Double
        }
        if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
            self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
        }
        if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
            self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
        }
        if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
            self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
        }
        if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
            var model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue.PriceShowInfo()
            model.fromMap(dict["price_show_info"] as! [String: Any])
            self.priceShowInfo = model
        }
    }
}

public class ModuleItemListShoppingItemMapValueCabinQuantityValue : Tea.TeaModel {
    public var cabin: String?

    public var cabinClass: String?

    public var cabinClassName: String?

    public var cabinClassMemo: String?

    public var specification: String?

    public var quantity: String?

    public var linkCabins: [String]?

    public var reshopChangeCabin: Bool?

    public var childCabinType: Int32?

    public var infantBasicCabin: String?

    public var innerCabinClass: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabin != nil {
            map["cabin"] = self.cabin!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.cabinClassName != nil {
            map["cabin_class_name"] = self.cabinClassName!
        }
        if self.cabinClassMemo != nil {
            map["cabin_class_memo"] = self.cabinClassMemo!
        }
        if self.specification != nil {
            map["specification"] = self.specification!
        }
        if self.quantity != nil {
            map["quantity"] = self.quantity!
        }
        if self.linkCabins != nil {
            map["link_cabins"] = self.linkCabins!
        }
        if self.reshopChangeCabin != nil {
            map["reshop_change_cabin"] = self.reshopChangeCabin!
        }
        if self.childCabinType != nil {
            map["child_cabin_type"] = self.childCabinType!
        }
        if self.infantBasicCabin != nil {
            map["infant_basic_cabin"] = self.infantBasicCabin!
        }
        if self.innerCabinClass != nil {
            map["inner_cabin_class"] = self.innerCabinClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin") && dict["cabin"] != nil {
            self.cabin = dict["cabin"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
            self.cabinClassName = dict["cabin_class_name"] as! String
        }
        if dict.keys.contains("cabin_class_memo") && dict["cabin_class_memo"] != nil {
            self.cabinClassMemo = dict["cabin_class_memo"] as! String
        }
        if dict.keys.contains("specification") && dict["specification"] != nil {
            self.specification = dict["specification"] as! String
        }
        if dict.keys.contains("quantity") && dict["quantity"] != nil {
            self.quantity = dict["quantity"] as! String
        }
        if dict.keys.contains("link_cabins") && dict["link_cabins"] != nil {
            self.linkCabins = dict["link_cabins"] as! [String]
        }
        if dict.keys.contains("reshop_change_cabin") && dict["reshop_change_cabin"] != nil {
            self.reshopChangeCabin = dict["reshop_change_cabin"] as! Bool
        }
        if dict.keys.contains("child_cabin_type") && dict["child_cabin_type"] != nil {
            self.childCabinType = dict["child_cabin_type"] as! Int32
        }
        if dict.keys.contains("infant_basic_cabin") && dict["infant_basic_cabin"] != nil {
            self.infantBasicCabin = dict["infant_basic_cabin"] as! String
        }
        if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
            self.innerCabinClass = dict["inner_cabin_class"] as! Int32
        }
    }
}

public class ModuleItemListShoppingItemMapValueSegmentPriceValue : Tea.TeaModel {
    public class PriceShowInfo : Tea.TeaModel {
        public var discountInfo: String?

        public var discountNum: Double?

        public var showTicketPrice: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.discountInfo != nil {
                map["discount_info"] = self.discountInfo!
            }
            if self.discountNum != nil {
                map["discount_num"] = self.discountNum!
            }
            if self.showTicketPrice != nil {
                map["show_ticket_price"] = self.showTicketPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                self.discountInfo = dict["discount_info"] as! String
            }
            if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                self.discountNum = dict["discount_num"] as! Double
            }
            if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                self.showTicketPrice = dict["show_ticket_price"] as! Bool
            }
        }
    }
    public var floorPrice: Int32?

    public var ticketPrice: Int32?

    public var sellPrice: Int32?

    public var originalSellPrice: Int32?

    public var baseTotalPrice: Int32?

    public var beforeControlPrice: Int32?

    public var tax: Int32?

    public var supplyPrice: Int32?

    public var basicCabinPrice: Int32?

    public var buildPrice: Int32?

    public var oilPrice: Int32?

    public var firstStandardPrice: Int32?

    public var businessStandardPrice: Int32?

    public var commonStandardPrice: Int32?

    public var interTicketPrice: Int32?

    public var subtractedPrice: Int32?

    public var originCommonPrice: Int32?

    public var dynamicPromotionPrice: Int32?

    public var installmentNum: Int32?

    public var installmentPrice: Double?

    public var competitionDynamicPrice: Int32?

    public var competitionPromotionPrice: Int32?

    public var minBeforeControlPriceOfNormal: Int32?

    public var priceShowInfo: ModuleItemListShoppingItemMapValueSegmentPriceValue.PriceShowInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceShowInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.floorPrice != nil {
            map["floor_price"] = self.floorPrice!
        }
        if self.ticketPrice != nil {
            map["ticket_price"] = self.ticketPrice!
        }
        if self.sellPrice != nil {
            map["sell_price"] = self.sellPrice!
        }
        if self.originalSellPrice != nil {
            map["original_sell_price"] = self.originalSellPrice!
        }
        if self.baseTotalPrice != nil {
            map["base_total_price"] = self.baseTotalPrice!
        }
        if self.beforeControlPrice != nil {
            map["before_control_price"] = self.beforeControlPrice!
        }
        if self.tax != nil {
            map["tax"] = self.tax!
        }
        if self.supplyPrice != nil {
            map["supply_price"] = self.supplyPrice!
        }
        if self.basicCabinPrice != nil {
            map["basic_cabin_price"] = self.basicCabinPrice!
        }
        if self.buildPrice != nil {
            map["build_price"] = self.buildPrice!
        }
        if self.oilPrice != nil {
            map["oil_price"] = self.oilPrice!
        }
        if self.firstStandardPrice != nil {
            map["first_standard_price"] = self.firstStandardPrice!
        }
        if self.businessStandardPrice != nil {
            map["business_standard_price"] = self.businessStandardPrice!
        }
        if self.commonStandardPrice != nil {
            map["common_standard_price"] = self.commonStandardPrice!
        }
        if self.interTicketPrice != nil {
            map["inter_ticket_price"] = self.interTicketPrice!
        }
        if self.subtractedPrice != nil {
            map["subtracted_price"] = self.subtractedPrice!
        }
        if self.originCommonPrice != nil {
            map["origin_common_price"] = self.originCommonPrice!
        }
        if self.dynamicPromotionPrice != nil {
            map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
        }
        if self.installmentNum != nil {
            map["installment_num"] = self.installmentNum!
        }
        if self.installmentPrice != nil {
            map["installment_price"] = self.installmentPrice!
        }
        if self.competitionDynamicPrice != nil {
            map["competition_dynamic_price"] = self.competitionDynamicPrice!
        }
        if self.competitionPromotionPrice != nil {
            map["competition_promotion_price"] = self.competitionPromotionPrice!
        }
        if self.minBeforeControlPriceOfNormal != nil {
            map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
        }
        if self.priceShowInfo != nil {
            map["price_show_info"] = self.priceShowInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
            self.floorPrice = dict["floor_price"] as! Int32
        }
        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
            self.ticketPrice = dict["ticket_price"] as! Int32
        }
        if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
            self.sellPrice = dict["sell_price"] as! Int32
        }
        if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
            self.originalSellPrice = dict["original_sell_price"] as! Int32
        }
        if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
            self.baseTotalPrice = dict["base_total_price"] as! Int32
        }
        if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
            self.beforeControlPrice = dict["before_control_price"] as! Int32
        }
        if dict.keys.contains("tax") && dict["tax"] != nil {
            self.tax = dict["tax"] as! Int32
        }
        if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
            self.supplyPrice = dict["supply_price"] as! Int32
        }
        if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
            self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
        }
        if dict.keys.contains("build_price") && dict["build_price"] != nil {
            self.buildPrice = dict["build_price"] as! Int32
        }
        if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
            self.oilPrice = dict["oil_price"] as! Int32
        }
        if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
            self.firstStandardPrice = dict["first_standard_price"] as! Int32
        }
        if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
            self.businessStandardPrice = dict["business_standard_price"] as! Int32
        }
        if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
            self.commonStandardPrice = dict["common_standard_price"] as! Int32
        }
        if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
            self.interTicketPrice = dict["inter_ticket_price"] as! Int32
        }
        if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
            self.subtractedPrice = dict["subtracted_price"] as! Int32
        }
        if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
            self.originCommonPrice = dict["origin_common_price"] as! Int32
        }
        if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
            self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
        }
        if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
            self.installmentNum = dict["installment_num"] as! Int32
        }
        if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
            self.installmentPrice = dict["installment_price"] as! Double
        }
        if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
            self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
        }
        if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
            self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
        }
        if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
            self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
        }
        if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
            var model = ModuleItemListShoppingItemMapValueSegmentPriceValue.PriceShowInfo()
            model.fromMap(dict["price_show_info"] as! [String: Any])
            self.priceShowInfo = model
        }
    }
}

public class ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue : Tea.TeaModel {
    public var cabin: String?

    public var cabinClass: String?

    public var cabinClassName: String?

    public var cabinClassMemo: String?

    public var specification: String?

    public var quantity: String?

    public var linkCabins: [String]?

    public var reshopChangeCabin: Bool?

    public var childCabinType: Int32?

    public var infantBasicCabin: String?

    public var innerCabinClass: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabin != nil {
            map["cabin"] = self.cabin!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.cabinClassName != nil {
            map["cabin_class_name"] = self.cabinClassName!
        }
        if self.cabinClassMemo != nil {
            map["cabin_class_memo"] = self.cabinClassMemo!
        }
        if self.specification != nil {
            map["specification"] = self.specification!
        }
        if self.quantity != nil {
            map["quantity"] = self.quantity!
        }
        if self.linkCabins != nil {
            map["link_cabins"] = self.linkCabins!
        }
        if self.reshopChangeCabin != nil {
            map["reshop_change_cabin"] = self.reshopChangeCabin!
        }
        if self.childCabinType != nil {
            map["child_cabin_type"] = self.childCabinType!
        }
        if self.infantBasicCabin != nil {
            map["infant_basic_cabin"] = self.infantBasicCabin!
        }
        if self.innerCabinClass != nil {
            map["inner_cabin_class"] = self.innerCabinClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin") && dict["cabin"] != nil {
            self.cabin = dict["cabin"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
            self.cabinClassName = dict["cabin_class_name"] as! String
        }
        if dict.keys.contains("cabin_class_memo") && dict["cabin_class_memo"] != nil {
            self.cabinClassMemo = dict["cabin_class_memo"] as! String
        }
        if dict.keys.contains("specification") && dict["specification"] != nil {
            self.specification = dict["specification"] as! String
        }
        if dict.keys.contains("quantity") && dict["quantity"] != nil {
            self.quantity = dict["quantity"] as! String
        }
        if dict.keys.contains("link_cabins") && dict["link_cabins"] != nil {
            self.linkCabins = dict["link_cabins"] as! [String]
        }
        if dict.keys.contains("reshop_change_cabin") && dict["reshop_change_cabin"] != nil {
            self.reshopChangeCabin = dict["reshop_change_cabin"] as! Bool
        }
        if dict.keys.contains("child_cabin_type") && dict["child_cabin_type"] != nil {
            self.childCabinType = dict["child_cabin_type"] as! Int32
        }
        if dict.keys.contains("infant_basic_cabin") && dict["infant_basic_cabin"] != nil {
            self.infantBasicCabin = dict["infant_basic_cabin"] as! String
        }
        if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
            self.innerCabinClass = dict["inner_cabin_class"] as! Int32
        }
    }
}

public class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue : Tea.TeaModel {
    public class PriceShowInfo : Tea.TeaModel {
        public var discountInfo: String?

        public var discountNum: Double?

        public var showTicketPrice: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.discountInfo != nil {
                map["discount_info"] = self.discountInfo!
            }
            if self.discountNum != nil {
                map["discount_num"] = self.discountNum!
            }
            if self.showTicketPrice != nil {
                map["show_ticket_price"] = self.showTicketPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("discount_info") && dict["discount_info"] != nil {
                self.discountInfo = dict["discount_info"] as! String
            }
            if dict.keys.contains("discount_num") && dict["discount_num"] != nil {
                self.discountNum = dict["discount_num"] as! Double
            }
            if dict.keys.contains("show_ticket_price") && dict["show_ticket_price"] != nil {
                self.showTicketPrice = dict["show_ticket_price"] as! Bool
            }
        }
    }
    public var floorPrice: Int32?

    public var ticketPrice: Int32?

    public var sellPrice: Int32?

    public var originalSellPrice: Int32?

    public var baseTotalPrice: Int32?

    public var beforeControlPrice: Int32?

    public var tax: Int32?

    public var supplyPrice: Int32?

    public var basicCabinPrice: Int32?

    public var buildPrice: Int32?

    public var oilPrice: Int32?

    public var firstStandardPrice: Int32?

    public var businessStandardPrice: Int32?

    public var commonStandardPrice: Int32?

    public var interTicketPrice: Int32?

    public var subtractedPrice: Int32?

    public var originCommonPrice: Int32?

    public var dynamicPromotionPrice: Int32?

    public var installmentNum: Int32?

    public var installmentPrice: Double?

    public var competitionDynamicPrice: Int32?

    public var competitionPromotionPrice: Int32?

    public var minBeforeControlPriceOfNormal: Int32?

    public var priceShowInfo: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue.PriceShowInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceShowInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.floorPrice != nil {
            map["floor_price"] = self.floorPrice!
        }
        if self.ticketPrice != nil {
            map["ticket_price"] = self.ticketPrice!
        }
        if self.sellPrice != nil {
            map["sell_price"] = self.sellPrice!
        }
        if self.originalSellPrice != nil {
            map["original_sell_price"] = self.originalSellPrice!
        }
        if self.baseTotalPrice != nil {
            map["base_total_price"] = self.baseTotalPrice!
        }
        if self.beforeControlPrice != nil {
            map["before_control_price"] = self.beforeControlPrice!
        }
        if self.tax != nil {
            map["tax"] = self.tax!
        }
        if self.supplyPrice != nil {
            map["supply_price"] = self.supplyPrice!
        }
        if self.basicCabinPrice != nil {
            map["basic_cabin_price"] = self.basicCabinPrice!
        }
        if self.buildPrice != nil {
            map["build_price"] = self.buildPrice!
        }
        if self.oilPrice != nil {
            map["oil_price"] = self.oilPrice!
        }
        if self.firstStandardPrice != nil {
            map["first_standard_price"] = self.firstStandardPrice!
        }
        if self.businessStandardPrice != nil {
            map["business_standard_price"] = self.businessStandardPrice!
        }
        if self.commonStandardPrice != nil {
            map["common_standard_price"] = self.commonStandardPrice!
        }
        if self.interTicketPrice != nil {
            map["inter_ticket_price"] = self.interTicketPrice!
        }
        if self.subtractedPrice != nil {
            map["subtracted_price"] = self.subtractedPrice!
        }
        if self.originCommonPrice != nil {
            map["origin_common_price"] = self.originCommonPrice!
        }
        if self.dynamicPromotionPrice != nil {
            map["dynamic_promotion_price"] = self.dynamicPromotionPrice!
        }
        if self.installmentNum != nil {
            map["installment_num"] = self.installmentNum!
        }
        if self.installmentPrice != nil {
            map["installment_price"] = self.installmentPrice!
        }
        if self.competitionDynamicPrice != nil {
            map["competition_dynamic_price"] = self.competitionDynamicPrice!
        }
        if self.competitionPromotionPrice != nil {
            map["competition_promotion_price"] = self.competitionPromotionPrice!
        }
        if self.minBeforeControlPriceOfNormal != nil {
            map["min_before_control_price_of_normal"] = self.minBeforeControlPriceOfNormal!
        }
        if self.priceShowInfo != nil {
            map["price_show_info"] = self.priceShowInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("floor_price") && dict["floor_price"] != nil {
            self.floorPrice = dict["floor_price"] as! Int32
        }
        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
            self.ticketPrice = dict["ticket_price"] as! Int32
        }
        if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
            self.sellPrice = dict["sell_price"] as! Int32
        }
        if dict.keys.contains("original_sell_price") && dict["original_sell_price"] != nil {
            self.originalSellPrice = dict["original_sell_price"] as! Int32
        }
        if dict.keys.contains("base_total_price") && dict["base_total_price"] != nil {
            self.baseTotalPrice = dict["base_total_price"] as! Int32
        }
        if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
            self.beforeControlPrice = dict["before_control_price"] as! Int32
        }
        if dict.keys.contains("tax") && dict["tax"] != nil {
            self.tax = dict["tax"] as! Int32
        }
        if dict.keys.contains("supply_price") && dict["supply_price"] != nil {
            self.supplyPrice = dict["supply_price"] as! Int32
        }
        if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
            self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
        }
        if dict.keys.contains("build_price") && dict["build_price"] != nil {
            self.buildPrice = dict["build_price"] as! Int32
        }
        if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
            self.oilPrice = dict["oil_price"] as! Int32
        }
        if dict.keys.contains("first_standard_price") && dict["first_standard_price"] != nil {
            self.firstStandardPrice = dict["first_standard_price"] as! Int32
        }
        if dict.keys.contains("business_standard_price") && dict["business_standard_price"] != nil {
            self.businessStandardPrice = dict["business_standard_price"] as! Int32
        }
        if dict.keys.contains("common_standard_price") && dict["common_standard_price"] != nil {
            self.commonStandardPrice = dict["common_standard_price"] as! Int32
        }
        if dict.keys.contains("inter_ticket_price") && dict["inter_ticket_price"] != nil {
            self.interTicketPrice = dict["inter_ticket_price"] as! Int32
        }
        if dict.keys.contains("subtracted_price") && dict["subtracted_price"] != nil {
            self.subtractedPrice = dict["subtracted_price"] as! Int32
        }
        if dict.keys.contains("origin_common_price") && dict["origin_common_price"] != nil {
            self.originCommonPrice = dict["origin_common_price"] as! Int32
        }
        if dict.keys.contains("dynamic_promotion_price") && dict["dynamic_promotion_price"] != nil {
            self.dynamicPromotionPrice = dict["dynamic_promotion_price"] as! Int32
        }
        if dict.keys.contains("installment_num") && dict["installment_num"] != nil {
            self.installmentNum = dict["installment_num"] as! Int32
        }
        if dict.keys.contains("installment_price") && dict["installment_price"] != nil {
            self.installmentPrice = dict["installment_price"] as! Double
        }
        if dict.keys.contains("competition_dynamic_price") && dict["competition_dynamic_price"] != nil {
            self.competitionDynamicPrice = dict["competition_dynamic_price"] as! Int32
        }
        if dict.keys.contains("competition_promotion_price") && dict["competition_promotion_price"] != nil {
            self.competitionPromotionPrice = dict["competition_promotion_price"] as! Int32
        }
        if dict.keys.contains("min_before_control_price_of_normal") && dict["min_before_control_price_of_normal"] != nil {
            self.minBeforeControlPriceOfNormal = dict["min_before_control_price_of_normal"] as! Int32
        }
        if dict.keys.contains("price_show_info") && dict["price_show_info"] != nil {
            var model = ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue.PriceShowInfo()
            model.fromMap(dict["price_show_info"] as! [String: Any])
            self.priceShowInfo = model
        }
    }
}

public class AccessTokenRequest : Tea.TeaModel {
    public var appSecret: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appSecret != nil {
            map["app_secret"] = self.appSecret!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("app_secret") && dict["app_secret"] != nil {
            self.appSecret = dict["app_secret"] as! String
        }
    }
}

public class AccessTokenResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var expire: Int64?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expire != nil {
                map["expire"] = self.expire!
            }
            if self.token != nil {
                map["token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("expire") && dict["expire"] != nil {
                self.expire = dict["expire"] as! Int64
            }
            if dict.keys.contains("token") && dict["token"] != nil {
                self.token = dict["token"] as! String
            }
        }
    }
    public class Module : Tea.TeaModel {
        public var expire: Int64?

        public var start: Int64?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expire != nil {
                map["expire"] = self.expire!
            }
            if self.start != nil {
                map["start"] = self.start!
            }
            if self.token != nil {
                map["token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("expire") && dict["expire"] != nil {
                self.expire = dict["expire"] as! Int64
            }
            if dict.keys.contains("start") && dict["start"] != nil {
                self.start = dict["start"] as! Int64
            }
            if dict.keys.contains("token") && dict["token"] != nil {
                self.token = dict["token"] as! String
            }
        }
    }
    public var code: String?

    public var data: AccessTokenResponseBody.Data?

    public var message: String?

    public var module: AccessTokenResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("data") && dict["data"] != nil {
            var model = AccessTokenResponseBody.Data()
            model.fromMap(dict["data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = AccessTokenResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class AccessTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AccessTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = AccessTokenResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AddInvoiceEntityHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class AddInvoiceEntityRequest : Tea.TeaModel {
    public class Entities : Tea.TeaModel {
        public var entityId: String?

        public var entityName: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityName != nil {
                map["entity_name"] = self.entityName!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_name") && dict["entity_name"] != nil {
                self.entityName = dict["entity_name"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var entities: [AddInvoiceEntityRequest.Entities]?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entities != nil {
            var tmp : [Any] = []
            for k in self.entities! {
                tmp.append(k.toMap())
            }
            map["entities"] = tmp
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entities") && dict["entities"] != nil {
            var tmp : [AddInvoiceEntityRequest.Entities] = []
            for v in dict["entities"] as! [Any] {
                var model = AddInvoiceEntityRequest.Entities()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entities = tmp
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class AddInvoiceEntityShrinkRequest : Tea.TeaModel {
    public var entitiesShrink: String?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entitiesShrink != nil {
            map["entities"] = self.entitiesShrink!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entities") && dict["entities"] != nil {
            self.entitiesShrink = dict["entities"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class AddInvoiceEntityResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var addNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addNum != nil {
                map["add_num"] = self.addNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("add_num") && dict["add_num"] != nil {
                self.addNum = dict["add_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: AddInvoiceEntityResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = AddInvoiceEntityResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class AddInvoiceEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddInvoiceEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = AddInvoiceEntityResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AddressGetHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class AddressGetRequest : Tea.TeaModel {
    public var actionType: Int32?

    public var arrCityCode: String?

    public var arrCityName: String?

    public var carScenesCode: String?

    public var depCityCode: String?

    public var depCityName: String?

    public var depDate: String?

    public var itineraryId: String?

    public var orderId: String?

    public var phone: String?

    public var subCorpId: String?

    public var taobaoCallbackUrl: String?

    public var type: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.actionType != nil {
            map["action_type"] = self.actionType!
        }
        if self.arrCityCode != nil {
            map["arr_city_code"] = self.arrCityCode!
        }
        if self.arrCityName != nil {
            map["arr_city_name"] = self.arrCityName!
        }
        if self.carScenesCode != nil {
            map["car_scenes_code"] = self.carScenesCode!
        }
        if self.depCityCode != nil {
            map["dep_city_code"] = self.depCityCode!
        }
        if self.depCityName != nil {
            map["dep_city_name"] = self.depCityName!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.itineraryId != nil {
            map["itinerary_id"] = self.itineraryId!
        }
        if self.orderId != nil {
            map["order_Id"] = self.orderId!
        }
        if self.phone != nil {
            map["phone"] = self.phone!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.taobaoCallbackUrl != nil {
            map["taobao_callback_url"] = self.taobaoCallbackUrl!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("action_type") && dict["action_type"] != nil {
            self.actionType = dict["action_type"] as! Int32
        }
        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
            self.arrCityCode = dict["arr_city_code"] as! String
        }
        if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
            self.arrCityName = dict["arr_city_name"] as! String
        }
        if dict.keys.contains("car_scenes_code") && dict["car_scenes_code"] != nil {
            self.carScenesCode = dict["car_scenes_code"] as! String
        }
        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
            self.depCityCode = dict["dep_city_code"] as! String
        }
        if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
            self.depCityName = dict["dep_city_name"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
            self.itineraryId = dict["itinerary_id"] as! String
        }
        if dict.keys.contains("order_Id") && dict["order_Id"] != nil {
            self.orderId = dict["order_Id"] as! String
        }
        if dict.keys.contains("phone") && dict["phone"] != nil {
            self.phone = dict["phone"] as! String
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("taobao_callback_url") && dict["taobao_callback_url"] != nil {
            self.taobaoCallbackUrl = dict["taobao_callback_url"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class AddressGetResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.url != nil {
                map["url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("url") && dict["url"] != nil {
                self.url = dict["url"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: AddressGetResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = AddressGetResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class AddressGetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddressGetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = AddressGetResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AirportSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class AirportSearchRequest : Tea.TeaModel {
    public var keyword: String?

    public var type: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["keyword"] = self.keyword!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("keyword") && dict["keyword"] != nil {
            self.keyword = dict["keyword"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
    }
}

public class AirportSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Cities : Tea.TeaModel {
            public var code: String?

            public var distance: Int32?

            public var name: String?

            public var travelName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.distance != nil {
                    map["distance"] = self.distance!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.travelName != nil {
                    map["travel_name"] = self.travelName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("code") && dict["code"] != nil {
                    self.code = dict["code"] as! String
                }
                if dict.keys.contains("distance") && dict["distance"] != nil {
                    self.distance = dict["distance"] as! Int32
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("travel_name") && dict["travel_name"] != nil {
                    self.travelName = dict["travel_name"] as! String
                }
            }
        }
        public var cities: [AirportSearchResponseBody.Module.Cities]?

        public var nearby: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cities != nil {
                var tmp : [Any] = []
                for k in self.cities! {
                    tmp.append(k.toMap())
                }
                map["cities"] = tmp
            }
            if self.nearby != nil {
                map["nearby"] = self.nearby!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cities") && dict["cities"] != nil {
                var tmp : [AirportSearchResponseBody.Module.Cities] = []
                for v in dict["cities"] as! [Any] {
                    var model = AirportSearchResponseBody.Module.Cities()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.cities = tmp
            }
            if dict.keys.contains("nearby") && dict["nearby"] != nil {
                self.nearby = dict["nearby"] as! Bool
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: AirportSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = AirportSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class AirportSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AirportSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = AirportSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AllBaseCityInfoQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripAccessToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripAccessToken != nil {
            map["x-acs-btrip-access-token"] = self.xAcsBtripAccessToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-access-token") && dict["x-acs-btrip-access-token"] != nil {
            self.xAcsBtripAccessToken = dict["x-acs-btrip-access-token"] as! String
        }
    }
}

public class AllBaseCityInfoQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class AllCityBaseInfoList : Tea.TeaModel {
            public var adcode: String?

            public var cityCode: String?

            public var cityLevel: String?

            public var cityName: String?

            public var cnNameTree: String?

            public var id: Int64?

            public var otherNameList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adcode != nil {
                    map["adcode"] = self.adcode!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityLevel != nil {
                    map["city_level"] = self.cityLevel!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.cnNameTree != nil {
                    map["cn_name_tree"] = self.cnNameTree!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.otherNameList != nil {
                    map["other_name_list"] = self.otherNameList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("adcode") && dict["adcode"] != nil {
                    self.adcode = dict["adcode"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_level") && dict["city_level"] != nil {
                    self.cityLevel = dict["city_level"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("cn_name_tree") && dict["cn_name_tree"] != nil {
                    self.cnNameTree = dict["cn_name_tree"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("other_name_list") && dict["other_name_list"] != nil {
                    self.otherNameList = dict["other_name_list"] as! [String]
                }
            }
        }
        public var allCityBaseInfoList: [AllBaseCityInfoQueryResponseBody.Module.AllCityBaseInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allCityBaseInfoList != nil {
                var tmp : [Any] = []
                for k in self.allCityBaseInfoList! {
                    tmp.append(k.toMap())
                }
                map["all_city_base_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("all_city_base_info_list") && dict["all_city_base_info_list"] != nil {
                var tmp : [AllBaseCityInfoQueryResponseBody.Module.AllCityBaseInfoList] = []
                for v in dict["all_city_base_info_list"] as! [Any] {
                    var model = AllBaseCityInfoQueryResponseBody.Module.AllCityBaseInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.allCityBaseInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: AllBaseCityInfoQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = AllBaseCityInfoQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class AllBaseCityInfoQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AllBaseCityInfoQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = AllBaseCityInfoQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyAddHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ApplyAddRequest : Tea.TeaModel {
    public class CarRule : Tea.TeaModel {
        public var scenarioTemplateId: String?

        public var scenarioTemplateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.scenarioTemplateId != nil {
                map["scenario_template_id"] = self.scenarioTemplateId!
            }
            if self.scenarioTemplateName != nil {
                map["scenario_template_name"] = self.scenarioTemplateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("scenario_template_id") && dict["scenario_template_id"] != nil {
                self.scenarioTemplateId = dict["scenario_template_id"] as! String
            }
            if dict.keys.contains("scenario_template_name") && dict["scenario_template_name"] != nil {
                self.scenarioTemplateName = dict["scenario_template_name"] as! String
            }
        }
    }
    public class ExternalTravelerList : Tea.TeaModel {
        public var userName: String?

        public var userNameEn: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            if self.userNameEn != nil {
                map["user_name_en"] = self.userNameEn!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
            if dict.keys.contains("user_name_en") && dict["user_name_en"] != nil {
                self.userNameEn = dict["user_name_en"] as! String
            }
        }
    }
    public class ExternalTravelerStandard : Tea.TeaModel {
        public class HotelCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public class HotelIntlCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public var businessDiscount: Int32?

        public var economyDiscount: Int32?

        public var firstDiscount: Int32?

        public var flightCabins: String?

        public var hotelCitys: [ApplyAddRequest.ExternalTravelerStandard.HotelCitys]?

        public var hotelIntlCitys: [ApplyAddRequest.ExternalTravelerStandard.HotelIntlCitys]?

        public var internationalFlightCabins: String?

        public var premiumEconomyDiscount: Int32?

        public var reserveType: Int32?

        public var trainSeats: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessDiscount != nil {
                map["business_discount"] = self.businessDiscount!
            }
            if self.economyDiscount != nil {
                map["economy_discount"] = self.economyDiscount!
            }
            if self.firstDiscount != nil {
                map["first_discount"] = self.firstDiscount!
            }
            if self.flightCabins != nil {
                map["flight_cabins"] = self.flightCabins!
            }
            if self.hotelCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_citys"] = tmp
            }
            if self.hotelIntlCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelIntlCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_intl_citys"] = tmp
            }
            if self.internationalFlightCabins != nil {
                map["international_flight_cabins"] = self.internationalFlightCabins!
            }
            if self.premiumEconomyDiscount != nil {
                map["premium_economy_discount"] = self.premiumEconomyDiscount!
            }
            if self.reserveType != nil {
                map["reserve_type"] = self.reserveType!
            }
            if self.trainSeats != nil {
                map["train_seats"] = self.trainSeats!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("business_discount") && dict["business_discount"] != nil {
                self.businessDiscount = dict["business_discount"] as! Int32
            }
            if dict.keys.contains("economy_discount") && dict["economy_discount"] != nil {
                self.economyDiscount = dict["economy_discount"] as! Int32
            }
            if dict.keys.contains("first_discount") && dict["first_discount"] != nil {
                self.firstDiscount = dict["first_discount"] as! Int32
            }
            if dict.keys.contains("flight_cabins") && dict["flight_cabins"] != nil {
                self.flightCabins = dict["flight_cabins"] as! String
            }
            if dict.keys.contains("hotel_citys") && dict["hotel_citys"] != nil {
                var tmp : [ApplyAddRequest.ExternalTravelerStandard.HotelCitys] = []
                for v in dict["hotel_citys"] as! [Any] {
                    var model = ApplyAddRequest.ExternalTravelerStandard.HotelCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelCitys = tmp
            }
            if dict.keys.contains("hotel_intl_citys") && dict["hotel_intl_citys"] != nil {
                var tmp : [ApplyAddRequest.ExternalTravelerStandard.HotelIntlCitys] = []
                for v in dict["hotel_intl_citys"] as! [Any] {
                    var model = ApplyAddRequest.ExternalTravelerStandard.HotelIntlCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelIntlCitys = tmp
            }
            if dict.keys.contains("international_flight_cabins") && dict["international_flight_cabins"] != nil {
                self.internationalFlightCabins = dict["international_flight_cabins"] as! String
            }
            if dict.keys.contains("premium_economy_discount") && dict["premium_economy_discount"] != nil {
                self.premiumEconomyDiscount = dict["premium_economy_discount"] as! Int32
            }
            if dict.keys.contains("reserve_type") && dict["reserve_type"] != nil {
                self.reserveType = dict["reserve_type"] as! Int32
            }
            if dict.keys.contains("train_seats") && dict["train_seats"] != nil {
                self.trainSeats = dict["train_seats"] as! String
            }
        }
    }
    public class HotelShare : Tea.TeaModel {
        public var param: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.param != nil {
                map["param"] = self.param!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("param") && dict["param"] != nil {
                self.param = dict["param"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! String
            }
        }
    }
    public class ItineraryList : Tea.TeaModel {
        public class ItineraryTravelStandard : Tea.TeaModel {
            public var hotelAvailableNightsPerDay: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hotelAvailableNightsPerDay != nil {
                    map["hotel_available_nights_per_day"] = self.hotelAvailableNightsPerDay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("hotel_available_nights_per_day") && dict["hotel_available_nights_per_day"] != nil {
                    self.hotelAvailableNightsPerDay = dict["hotel_available_nights_per_day"] as! Int32
                }
            }
        }
        public var arrCity: String?

        public var arrCityCode: String?

        public var arrDate: String?

        public var costCenterId: Int64?

        public var depCity: String?

        public var depCityCode: String?

        public var depDate: String?

        public var invoiceId: Int64?

        public var itineraryId: String?

        public var itineraryTravelStandard: ApplyAddRequest.ItineraryList.ItineraryTravelStandard?

        public var needHotel: Bool?

        public var needTraffic: Bool?

        public var projectCode: String?

        public var projectTitle: String?

        public var thirdPartInvoiceId: String?

        public var thirdpartCostCenterId: String?

        public var trafficType: Int32?

        public var tripWay: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.itineraryTravelStandard?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCity != nil {
                map["arr_city"] = self.arrCity!
            }
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.arrDate != nil {
                map["arr_date"] = self.arrDate!
            }
            if self.costCenterId != nil {
                map["cost_center_id"] = self.costCenterId!
            }
            if self.depCity != nil {
                map["dep_city"] = self.depCity!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.invoiceId != nil {
                map["invoice_id"] = self.invoiceId!
            }
            if self.itineraryId != nil {
                map["itinerary_id"] = self.itineraryId!
            }
            if self.itineraryTravelStandard != nil {
                map["itinerary_travel_standard"] = self.itineraryTravelStandard?.toMap()
            }
            if self.needHotel != nil {
                map["need_hotel"] = self.needHotel!
            }
            if self.needTraffic != nil {
                map["need_traffic"] = self.needTraffic!
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.thirdPartInvoiceId != nil {
                map["third_part_invoice_id"] = self.thirdPartInvoiceId!
            }
            if self.thirdpartCostCenterId != nil {
                map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
            }
            if self.trafficType != nil {
                map["traffic_type"] = self.trafficType!
            }
            if self.tripWay != nil {
                map["trip_way"] = self.tripWay!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                self.arrCity = dict["arr_city"] as! String
            }
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                self.arrDate = dict["arr_date"] as! String
            }
            if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                self.costCenterId = dict["cost_center_id"] as! Int64
            }
            if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                self.depCity = dict["dep_city"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("invoice_id") && dict["invoice_id"] != nil {
                self.invoiceId = dict["invoice_id"] as! Int64
            }
            if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                self.itineraryId = dict["itinerary_id"] as! String
            }
            if dict.keys.contains("itinerary_travel_standard") && dict["itinerary_travel_standard"] != nil {
                var model = ApplyAddRequest.ItineraryList.ItineraryTravelStandard()
                model.fromMap(dict["itinerary_travel_standard"] as! [String: Any])
                self.itineraryTravelStandard = model
            }
            if dict.keys.contains("need_hotel") && dict["need_hotel"] != nil {
                self.needHotel = dict["need_hotel"] as! Bool
            }
            if dict.keys.contains("need_traffic") && dict["need_traffic"] != nil {
                self.needTraffic = dict["need_traffic"] as! Bool
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
                self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
            }
            if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
            }
            if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                self.trafficType = dict["traffic_type"] as! Int32
            }
            if dict.keys.contains("trip_way") && dict["trip_way"] != nil {
                self.tripWay = dict["trip_way"] as! Int32
            }
        }
    }
    public class ItinerarySetList : Tea.TeaModel {
        public class ItineraryTravelStandard : Tea.TeaModel {
            public var hotelAvailableNightsPerDay: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hotelAvailableNightsPerDay != nil {
                    map["hotel_available_nights_per_day"] = self.hotelAvailableNightsPerDay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("hotel_available_nights_per_day") && dict["hotel_available_nights_per_day"] != nil {
                    self.hotelAvailableNightsPerDay = dict["hotel_available_nights_per_day"] as! Int32
                }
            }
        }
        public var arrDate: String?

        public var cityCodeSet: String?

        public var citySet: String?

        public var costCenterId: Int64?

        public var depDate: String?

        public var invoiceId: Int64?

        public var itineraryId: String?

        public var itineraryTravelStandard: ApplyAddRequest.ItinerarySetList.ItineraryTravelStandard?

        public var projectCode: String?

        public var projectTitle: String?

        public var thirdPartInvoiceId: String?

        public var thirdpartCostCenterId: String?

        public var trafficType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.itineraryTravelStandard?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrDate != nil {
                map["arr_date"] = self.arrDate!
            }
            if self.cityCodeSet != nil {
                map["city_code_set"] = self.cityCodeSet!
            }
            if self.citySet != nil {
                map["city_set"] = self.citySet!
            }
            if self.costCenterId != nil {
                map["cost_center_id"] = self.costCenterId!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.invoiceId != nil {
                map["invoice_id"] = self.invoiceId!
            }
            if self.itineraryId != nil {
                map["itinerary_id"] = self.itineraryId!
            }
            if self.itineraryTravelStandard != nil {
                map["itinerary_travel_standard"] = self.itineraryTravelStandard?.toMap()
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.thirdPartInvoiceId != nil {
                map["third_part_invoice_id"] = self.thirdPartInvoiceId!
            }
            if self.thirdpartCostCenterId != nil {
                map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
            }
            if self.trafficType != nil {
                map["traffic_type"] = self.trafficType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                self.arrDate = dict["arr_date"] as! String
            }
            if dict.keys.contains("city_code_set") && dict["city_code_set"] != nil {
                self.cityCodeSet = dict["city_code_set"] as! String
            }
            if dict.keys.contains("city_set") && dict["city_set"] != nil {
                self.citySet = dict["city_set"] as! String
            }
            if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                self.costCenterId = dict["cost_center_id"] as! Int64
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("invoice_id") && dict["invoice_id"] != nil {
                self.invoiceId = dict["invoice_id"] as! Int64
            }
            if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                self.itineraryId = dict["itinerary_id"] as! String
            }
            if dict.keys.contains("itinerary_travel_standard") && dict["itinerary_travel_standard"] != nil {
                var model = ApplyAddRequest.ItinerarySetList.ItineraryTravelStandard()
                model.fromMap(dict["itinerary_travel_standard"] as! [String: Any])
                self.itineraryTravelStandard = model
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
                self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
            }
            if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
            }
            if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                self.trafficType = dict["traffic_type"] as! Int32
            }
        }
    }
    public class TravelerList : Tea.TeaModel {
        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public class TravelerStandard : Tea.TeaModel {
        public class CarCitySet : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
            }
        }
        public class HotelCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public class HotelIntlCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public var businessDiscount: Int32?

        public var carCitySet: [ApplyAddRequest.TravelerStandard.CarCitySet]?

        public var economyDiscount: Int32?

        public var firstDiscount: Int32?

        public var flightCabins: String?

        public var hotelCitys: [ApplyAddRequest.TravelerStandard.HotelCitys]?

        public var hotelIntlCitys: [ApplyAddRequest.TravelerStandard.HotelIntlCitys]?

        public var internationalFlightCabins: String?

        public var premiumEconomyDiscount: Int32?

        public var reserveType: Int32?

        public var trainSeats: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessDiscount != nil {
                map["business_discount"] = self.businessDiscount!
            }
            if self.carCitySet != nil {
                var tmp : [Any] = []
                for k in self.carCitySet! {
                    tmp.append(k.toMap())
                }
                map["car_city_set"] = tmp
            }
            if self.economyDiscount != nil {
                map["economy_discount"] = self.economyDiscount!
            }
            if self.firstDiscount != nil {
                map["first_discount"] = self.firstDiscount!
            }
            if self.flightCabins != nil {
                map["flight_cabins"] = self.flightCabins!
            }
            if self.hotelCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_citys"] = tmp
            }
            if self.hotelIntlCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelIntlCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_intl_citys"] = tmp
            }
            if self.internationalFlightCabins != nil {
                map["international_flight_cabins"] = self.internationalFlightCabins!
            }
            if self.premiumEconomyDiscount != nil {
                map["premium_economy_discount"] = self.premiumEconomyDiscount!
            }
            if self.reserveType != nil {
                map["reserve_type"] = self.reserveType!
            }
            if self.trainSeats != nil {
                map["train_seats"] = self.trainSeats!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("business_discount") && dict["business_discount"] != nil {
                self.businessDiscount = dict["business_discount"] as! Int32
            }
            if dict.keys.contains("car_city_set") && dict["car_city_set"] != nil {
                var tmp : [ApplyAddRequest.TravelerStandard.CarCitySet] = []
                for v in dict["car_city_set"] as! [Any] {
                    var model = ApplyAddRequest.TravelerStandard.CarCitySet()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.carCitySet = tmp
            }
            if dict.keys.contains("economy_discount") && dict["economy_discount"] != nil {
                self.economyDiscount = dict["economy_discount"] as! Int32
            }
            if dict.keys.contains("first_discount") && dict["first_discount"] != nil {
                self.firstDiscount = dict["first_discount"] as! Int32
            }
            if dict.keys.contains("flight_cabins") && dict["flight_cabins"] != nil {
                self.flightCabins = dict["flight_cabins"] as! String
            }
            if dict.keys.contains("hotel_citys") && dict["hotel_citys"] != nil {
                var tmp : [ApplyAddRequest.TravelerStandard.HotelCitys] = []
                for v in dict["hotel_citys"] as! [Any] {
                    var model = ApplyAddRequest.TravelerStandard.HotelCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelCitys = tmp
            }
            if dict.keys.contains("hotel_intl_citys") && dict["hotel_intl_citys"] != nil {
                var tmp : [ApplyAddRequest.TravelerStandard.HotelIntlCitys] = []
                for v in dict["hotel_intl_citys"] as! [Any] {
                    var model = ApplyAddRequest.TravelerStandard.HotelIntlCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelIntlCitys = tmp
            }
            if dict.keys.contains("international_flight_cabins") && dict["international_flight_cabins"] != nil {
                self.internationalFlightCabins = dict["international_flight_cabins"] as! String
            }
            if dict.keys.contains("premium_economy_discount") && dict["premium_economy_discount"] != nil {
                self.premiumEconomyDiscount = dict["premium_economy_discount"] as! Int32
            }
            if dict.keys.contains("reserve_type") && dict["reserve_type"] != nil {
                self.reserveType = dict["reserve_type"] as! Int32
            }
            if dict.keys.contains("train_seats") && dict["train_seats"] != nil {
                self.trainSeats = dict["train_seats"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var budget: Int64?

    public var budgetMerge: Int32?

    public var carRule: ApplyAddRequest.CarRule?

    public var corpName: String?

    public var departId: String?

    public var departName: String?

    public var extendField: String?

    public var externalTravelerList: [ApplyAddRequest.ExternalTravelerList]?

    public var externalTravelerStandard: ApplyAddRequest.ExternalTravelerStandard?

    public var flightBudget: Int64?

    public var hotelBudget: Int64?

    public var hotelShare: ApplyAddRequest.HotelShare?

    public var internationalFlightCabins: String?

    public var itineraryList: [ApplyAddRequest.ItineraryList]?

    public var itineraryRule: Int32?

    public var itinerarySetList: [ApplyAddRequest.ItinerarySetList]?

    public var limitTraveler: Int32?

    public var status: Int32?

    public var subCorpId: String?

    public var thirdpartApplyId: String?

    public var thirdpartBusinessId: String?

    public var thirdpartDepartId: String?

    public var togetherBookRule: Int32?

    public var trainBudget: Int64?

    public var travelerList: [ApplyAddRequest.TravelerList]?

    public var travelerStandard: [ApplyAddRequest.TravelerStandard]?

    public var tripCause: String?

    public var tripDay: Int32?

    public var tripTitle: String?

    public var type: Int32?

    public var unionNo: String?

    public var userId: String?

    public var userName: String?

    public var vehicleBudget: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.carRule?.validate()
        try self.externalTravelerStandard?.validate()
        try self.hotelShare?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.budget != nil {
            map["budget"] = self.budget!
        }
        if self.budgetMerge != nil {
            map["budget_merge"] = self.budgetMerge!
        }
        if self.carRule != nil {
            map["car_rule"] = self.carRule?.toMap()
        }
        if self.corpName != nil {
            map["corp_name"] = self.corpName!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.departName != nil {
            map["depart_name"] = self.departName!
        }
        if self.extendField != nil {
            map["extend_field"] = self.extendField!
        }
        if self.externalTravelerList != nil {
            var tmp : [Any] = []
            for k in self.externalTravelerList! {
                tmp.append(k.toMap())
            }
            map["external_traveler_list"] = tmp
        }
        if self.externalTravelerStandard != nil {
            map["external_traveler_standard"] = self.externalTravelerStandard?.toMap()
        }
        if self.flightBudget != nil {
            map["flight_budget"] = self.flightBudget!
        }
        if self.hotelBudget != nil {
            map["hotel_budget"] = self.hotelBudget!
        }
        if self.hotelShare != nil {
            map["hotel_share"] = self.hotelShare?.toMap()
        }
        if self.internationalFlightCabins != nil {
            map["international_flight_cabins"] = self.internationalFlightCabins!
        }
        if self.itineraryList != nil {
            var tmp : [Any] = []
            for k in self.itineraryList! {
                tmp.append(k.toMap())
            }
            map["itinerary_list"] = tmp
        }
        if self.itineraryRule != nil {
            map["itinerary_rule"] = self.itineraryRule!
        }
        if self.itinerarySetList != nil {
            var tmp : [Any] = []
            for k in self.itinerarySetList! {
                tmp.append(k.toMap())
            }
            map["itinerary_set_list"] = tmp
        }
        if self.limitTraveler != nil {
            map["limit_traveler"] = self.limitTraveler!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.thirdpartBusinessId != nil {
            map["thirdpart_business_id"] = self.thirdpartBusinessId!
        }
        if self.thirdpartDepartId != nil {
            map["thirdpart_depart_id"] = self.thirdpartDepartId!
        }
        if self.togetherBookRule != nil {
            map["together_book_rule"] = self.togetherBookRule!
        }
        if self.trainBudget != nil {
            map["train_budget"] = self.trainBudget!
        }
        if self.travelerList != nil {
            var tmp : [Any] = []
            for k in self.travelerList! {
                tmp.append(k.toMap())
            }
            map["traveler_list"] = tmp
        }
        if self.travelerStandard != nil {
            var tmp : [Any] = []
            for k in self.travelerStandard! {
                tmp.append(k.toMap())
            }
            map["traveler_standard"] = tmp
        }
        if self.tripCause != nil {
            map["trip_cause"] = self.tripCause!
        }
        if self.tripDay != nil {
            map["trip_day"] = self.tripDay!
        }
        if self.tripTitle != nil {
            map["trip_title"] = self.tripTitle!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.unionNo != nil {
            map["union_no"] = self.unionNo!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        if self.vehicleBudget != nil {
            map["vehicle_budget"] = self.vehicleBudget!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("budget") && dict["budget"] != nil {
            self.budget = dict["budget"] as! Int64
        }
        if dict.keys.contains("budget_merge") && dict["budget_merge"] != nil {
            self.budgetMerge = dict["budget_merge"] as! Int32
        }
        if dict.keys.contains("car_rule") && dict["car_rule"] != nil {
            var model = ApplyAddRequest.CarRule()
            model.fromMap(dict["car_rule"] as! [String: Any])
            self.carRule = model
        }
        if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
            self.corpName = dict["corp_name"] as! String
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
            self.departName = dict["depart_name"] as! String
        }
        if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
            self.extendField = dict["extend_field"] as! String
        }
        if dict.keys.contains("external_traveler_list") && dict["external_traveler_list"] != nil {
            var tmp : [ApplyAddRequest.ExternalTravelerList] = []
            for v in dict["external_traveler_list"] as! [Any] {
                var model = ApplyAddRequest.ExternalTravelerList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.externalTravelerList = tmp
        }
        if dict.keys.contains("external_traveler_standard") && dict["external_traveler_standard"] != nil {
            var model = ApplyAddRequest.ExternalTravelerStandard()
            model.fromMap(dict["external_traveler_standard"] as! [String: Any])
            self.externalTravelerStandard = model
        }
        if dict.keys.contains("flight_budget") && dict["flight_budget"] != nil {
            self.flightBudget = dict["flight_budget"] as! Int64
        }
        if dict.keys.contains("hotel_budget") && dict["hotel_budget"] != nil {
            self.hotelBudget = dict["hotel_budget"] as! Int64
        }
        if dict.keys.contains("hotel_share") && dict["hotel_share"] != nil {
            var model = ApplyAddRequest.HotelShare()
            model.fromMap(dict["hotel_share"] as! [String: Any])
            self.hotelShare = model
        }
        if dict.keys.contains("international_flight_cabins") && dict["international_flight_cabins"] != nil {
            self.internationalFlightCabins = dict["international_flight_cabins"] as! String
        }
        if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
            var tmp : [ApplyAddRequest.ItineraryList] = []
            for v in dict["itinerary_list"] as! [Any] {
                var model = ApplyAddRequest.ItineraryList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.itineraryList = tmp
        }
        if dict.keys.contains("itinerary_rule") && dict["itinerary_rule"] != nil {
            self.itineraryRule = dict["itinerary_rule"] as! Int32
        }
        if dict.keys.contains("itinerary_set_list") && dict["itinerary_set_list"] != nil {
            var tmp : [ApplyAddRequest.ItinerarySetList] = []
            for v in dict["itinerary_set_list"] as! [Any] {
                var model = ApplyAddRequest.ItinerarySetList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.itinerarySetList = tmp
        }
        if dict.keys.contains("limit_traveler") && dict["limit_traveler"] != nil {
            self.limitTraveler = dict["limit_traveler"] as! Int32
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
            self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
        }
        if dict.keys.contains("thirdpart_depart_id") && dict["thirdpart_depart_id"] != nil {
            self.thirdpartDepartId = dict["thirdpart_depart_id"] as! String
        }
        if dict.keys.contains("together_book_rule") && dict["together_book_rule"] != nil {
            self.togetherBookRule = dict["together_book_rule"] as! Int32
        }
        if dict.keys.contains("train_budget") && dict["train_budget"] != nil {
            self.trainBudget = dict["train_budget"] as! Int64
        }
        if dict.keys.contains("traveler_list") && dict["traveler_list"] != nil {
            var tmp : [ApplyAddRequest.TravelerList] = []
            for v in dict["traveler_list"] as! [Any] {
                var model = ApplyAddRequest.TravelerList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerList = tmp
        }
        if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
            var tmp : [ApplyAddRequest.TravelerStandard] = []
            for v in dict["traveler_standard"] as! [Any] {
                var model = ApplyAddRequest.TravelerStandard()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerStandard = tmp
        }
        if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
            self.tripCause = dict["trip_cause"] as! String
        }
        if dict.keys.contains("trip_day") && dict["trip_day"] != nil {
            self.tripDay = dict["trip_day"] as! Int32
        }
        if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
            self.tripTitle = dict["trip_title"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
        if dict.keys.contains("union_no") && dict["union_no"] != nil {
            self.unionNo = dict["union_no"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
        if dict.keys.contains("vehicle_budget") && dict["vehicle_budget"] != nil {
            self.vehicleBudget = dict["vehicle_budget"] as! Int64
        }
    }
}

public class ApplyAddShrinkRequest : Tea.TeaModel {
    public var budget: Int64?

    public var budgetMerge: Int32?

    public var carRuleShrink: String?

    public var corpName: String?

    public var departId: String?

    public var departName: String?

    public var extendField: String?

    public var externalTravelerListShrink: String?

    public var externalTravelerStandardShrink: String?

    public var flightBudget: Int64?

    public var hotelBudget: Int64?

    public var hotelShareShrink: String?

    public var internationalFlightCabins: String?

    public var itineraryListShrink: String?

    public var itineraryRule: Int32?

    public var itinerarySetListShrink: String?

    public var limitTraveler: Int32?

    public var status: Int32?

    public var subCorpId: String?

    public var thirdpartApplyId: String?

    public var thirdpartBusinessId: String?

    public var thirdpartDepartId: String?

    public var togetherBookRule: Int32?

    public var trainBudget: Int64?

    public var travelerListShrink: String?

    public var travelerStandardShrink: String?

    public var tripCause: String?

    public var tripDay: Int32?

    public var tripTitle: String?

    public var type: Int32?

    public var unionNo: String?

    public var userId: String?

    public var userName: String?

    public var vehicleBudget: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.budget != nil {
            map["budget"] = self.budget!
        }
        if self.budgetMerge != nil {
            map["budget_merge"] = self.budgetMerge!
        }
        if self.carRuleShrink != nil {
            map["car_rule"] = self.carRuleShrink!
        }
        if self.corpName != nil {
            map["corp_name"] = self.corpName!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.departName != nil {
            map["depart_name"] = self.departName!
        }
        if self.extendField != nil {
            map["extend_field"] = self.extendField!
        }
        if self.externalTravelerListShrink != nil {
            map["external_traveler_list"] = self.externalTravelerListShrink!
        }
        if self.externalTravelerStandardShrink != nil {
            map["external_traveler_standard"] = self.externalTravelerStandardShrink!
        }
        if self.flightBudget != nil {
            map["flight_budget"] = self.flightBudget!
        }
        if self.hotelBudget != nil {
            map["hotel_budget"] = self.hotelBudget!
        }
        if self.hotelShareShrink != nil {
            map["hotel_share"] = self.hotelShareShrink!
        }
        if self.internationalFlightCabins != nil {
            map["international_flight_cabins"] = self.internationalFlightCabins!
        }
        if self.itineraryListShrink != nil {
            map["itinerary_list"] = self.itineraryListShrink!
        }
        if self.itineraryRule != nil {
            map["itinerary_rule"] = self.itineraryRule!
        }
        if self.itinerarySetListShrink != nil {
            map["itinerary_set_list"] = self.itinerarySetListShrink!
        }
        if self.limitTraveler != nil {
            map["limit_traveler"] = self.limitTraveler!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.thirdpartBusinessId != nil {
            map["thirdpart_business_id"] = self.thirdpartBusinessId!
        }
        if self.thirdpartDepartId != nil {
            map["thirdpart_depart_id"] = self.thirdpartDepartId!
        }
        if self.togetherBookRule != nil {
            map["together_book_rule"] = self.togetherBookRule!
        }
        if self.trainBudget != nil {
            map["train_budget"] = self.trainBudget!
        }
        if self.travelerListShrink != nil {
            map["traveler_list"] = self.travelerListShrink!
        }
        if self.travelerStandardShrink != nil {
            map["traveler_standard"] = self.travelerStandardShrink!
        }
        if self.tripCause != nil {
            map["trip_cause"] = self.tripCause!
        }
        if self.tripDay != nil {
            map["trip_day"] = self.tripDay!
        }
        if self.tripTitle != nil {
            map["trip_title"] = self.tripTitle!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.unionNo != nil {
            map["union_no"] = self.unionNo!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        if self.vehicleBudget != nil {
            map["vehicle_budget"] = self.vehicleBudget!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("budget") && dict["budget"] != nil {
            self.budget = dict["budget"] as! Int64
        }
        if dict.keys.contains("budget_merge") && dict["budget_merge"] != nil {
            self.budgetMerge = dict["budget_merge"] as! Int32
        }
        if dict.keys.contains("car_rule") && dict["car_rule"] != nil {
            self.carRuleShrink = dict["car_rule"] as! String
        }
        if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
            self.corpName = dict["corp_name"] as! String
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
            self.departName = dict["depart_name"] as! String
        }
        if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
            self.extendField = dict["extend_field"] as! String
        }
        if dict.keys.contains("external_traveler_list") && dict["external_traveler_list"] != nil {
            self.externalTravelerListShrink = dict["external_traveler_list"] as! String
        }
        if dict.keys.contains("external_traveler_standard") && dict["external_traveler_standard"] != nil {
            self.externalTravelerStandardShrink = dict["external_traveler_standard"] as! String
        }
        if dict.keys.contains("flight_budget") && dict["flight_budget"] != nil {
            self.flightBudget = dict["flight_budget"] as! Int64
        }
        if dict.keys.contains("hotel_budget") && dict["hotel_budget"] != nil {
            self.hotelBudget = dict["hotel_budget"] as! Int64
        }
        if dict.keys.contains("hotel_share") && dict["hotel_share"] != nil {
            self.hotelShareShrink = dict["hotel_share"] as! String
        }
        if dict.keys.contains("international_flight_cabins") && dict["international_flight_cabins"] != nil {
            self.internationalFlightCabins = dict["international_flight_cabins"] as! String
        }
        if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
            self.itineraryListShrink = dict["itinerary_list"] as! String
        }
        if dict.keys.contains("itinerary_rule") && dict["itinerary_rule"] != nil {
            self.itineraryRule = dict["itinerary_rule"] as! Int32
        }
        if dict.keys.contains("itinerary_set_list") && dict["itinerary_set_list"] != nil {
            self.itinerarySetListShrink = dict["itinerary_set_list"] as! String
        }
        if dict.keys.contains("limit_traveler") && dict["limit_traveler"] != nil {
            self.limitTraveler = dict["limit_traveler"] as! Int32
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
            self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
        }
        if dict.keys.contains("thirdpart_depart_id") && dict["thirdpart_depart_id"] != nil {
            self.thirdpartDepartId = dict["thirdpart_depart_id"] as! String
        }
        if dict.keys.contains("together_book_rule") && dict["together_book_rule"] != nil {
            self.togetherBookRule = dict["together_book_rule"] as! Int32
        }
        if dict.keys.contains("train_budget") && dict["train_budget"] != nil {
            self.trainBudget = dict["train_budget"] as! Int64
        }
        if dict.keys.contains("traveler_list") && dict["traveler_list"] != nil {
            self.travelerListShrink = dict["traveler_list"] as! String
        }
        if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
            self.travelerStandardShrink = dict["traveler_standard"] as! String
        }
        if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
            self.tripCause = dict["trip_cause"] as! String
        }
        if dict.keys.contains("trip_day") && dict["trip_day"] != nil {
            self.tripDay = dict["trip_day"] as! Int32
        }
        if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
            self.tripTitle = dict["trip_title"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
        if dict.keys.contains("union_no") && dict["union_no"] != nil {
            self.unionNo = dict["union_no"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
        if dict.keys.contains("vehicle_budget") && dict["vehicle_budget"] != nil {
            self.vehicleBudget = dict["vehicle_budget"] as! Int64
        }
    }
}

public class ApplyAddResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var applyId: Int64?

        public var thirdpartApplyId: String?

        public var thirdpartBusinessId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartBusinessId != nil {
                map["thirdpart_business_id"] = self.thirdpartBusinessId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
                self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: ApplyAddResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = ApplyAddResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyAddResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyAddResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyAddResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyApproveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ApplyApproveRequest : Tea.TeaModel {
    public var applyId: String?

    public var note: String?

    public var operateTime: String?

    public var status: Int32?

    public var subCorpId: String?

    public var userId: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.note != nil {
            map["note"] = self.note!
        }
        if self.operateTime != nil {
            map["operate_time"] = self.operateTime!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! String
        }
        if dict.keys.contains("note") && dict["note"] != nil {
            self.note = dict["note"] as! String
        }
        if dict.keys.contains("operate_time") && dict["operate_time"] != nil {
            self.operateTime = dict["operate_time"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
    }
}

public class ApplyApproveResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyApproveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyApproveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyApproveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyExternalNodeStatusUpdateHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class ApplyExternalNodeStatusUpdateRequest : Tea.TeaModel {
    public class OperationRecords : Tea.TeaModel {
        public var comment: String?

        public var operateTime: String?

        public var operatorName: String?

        public var result: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comment != nil {
                map["comment"] = self.comment!
            }
            if self.operateTime != nil {
                map["operate_time"] = self.operateTime!
            }
            if self.operatorName != nil {
                map["operator_name"] = self.operatorName!
            }
            if self.result != nil {
                map["result"] = self.result!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("comment") && dict["comment"] != nil {
                self.comment = dict["comment"] as! String
            }
            if dict.keys.contains("operate_time") && dict["operate_time"] != nil {
                self.operateTime = dict["operate_time"] as! String
            }
            if dict.keys.contains("operator_name") && dict["operator_name"] != nil {
                self.operatorName = dict["operator_name"] as! String
            }
            if dict.keys.contains("result") && dict["result"] != nil {
                self.result = dict["result"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! String
            }
        }
    }
    public var nodeId: String?

    public var operationRecords: [ApplyExternalNodeStatusUpdateRequest.OperationRecords]?

    public var processActionResult: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodeId != nil {
            map["node_id"] = self.nodeId!
        }
        if self.operationRecords != nil {
            var tmp : [Any] = []
            for k in self.operationRecords! {
                tmp.append(k.toMap())
            }
            map["operation_records"] = tmp
        }
        if self.processActionResult != nil {
            map["process_action_result"] = self.processActionResult!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("node_id") && dict["node_id"] != nil {
            self.nodeId = dict["node_id"] as! String
        }
        if dict.keys.contains("operation_records") && dict["operation_records"] != nil {
            var tmp : [ApplyExternalNodeStatusUpdateRequest.OperationRecords] = []
            for v in dict["operation_records"] as! [Any] {
                var model = ApplyExternalNodeStatusUpdateRequest.OperationRecords()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.operationRecords = tmp
        }
        if dict.keys.contains("process_action_result") && dict["process_action_result"] != nil {
            self.processActionResult = dict["process_action_result"] as! String
        }
    }
}

public class ApplyExternalNodeStatusUpdateShrinkRequest : Tea.TeaModel {
    public var nodeId: String?

    public var operationRecordsShrink: String?

    public var processActionResult: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodeId != nil {
            map["node_id"] = self.nodeId!
        }
        if self.operationRecordsShrink != nil {
            map["operation_records"] = self.operationRecordsShrink!
        }
        if self.processActionResult != nil {
            map["process_action_result"] = self.processActionResult!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("node_id") && dict["node_id"] != nil {
            self.nodeId = dict["node_id"] as! String
        }
        if dict.keys.contains("operation_records") && dict["operation_records"] != nil {
            self.operationRecordsShrink = dict["operation_records"] as! String
        }
        if dict.keys.contains("process_action_result") && dict["process_action_result"] != nil {
            self.processActionResult = dict["process_action_result"] as! String
        }
    }
}

public class ApplyExternalNodeStatusUpdateResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyExternalNodeStatusUpdateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyExternalNodeStatusUpdateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyExternalNodeStatusUpdateResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyInvoiceTaskHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ApplyInvoiceTaskRequest : Tea.TeaModel {
    public class InvoiceTaskList : Tea.TeaModel {
        public var contact: String?

        public var email: String?

        public var flightInvoiceFee: String?

        public var fuPointInvoiceFee: String?

        public var hotelNormalInvoiceFee: String?

        public var hotelSpecialInvoiceFee: String?

        public var internationalFlightInvoiceFee: String?

        public var internationalHotelInvoiceFee: String?

        public var invoiceThirdPartId: String?

        public var invoiceType: Int32?

        public var mailAddress: String?

        public var mailCity: String?

        public var mailFullAddress: String?

        public var mailProvince: String?

        public var penaltyFee: String?

        public var remark: String?

        public var serviceFee: String?

        public var telephone: String?

        public var trainInvoiceFee: String?

        public var vehicleInvoiceFee: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contact != nil {
                map["contact"] = self.contact!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.flightInvoiceFee != nil {
                map["flight_invoice_fee"] = self.flightInvoiceFee!
            }
            if self.fuPointInvoiceFee != nil {
                map["fu_point_invoice_fee"] = self.fuPointInvoiceFee!
            }
            if self.hotelNormalInvoiceFee != nil {
                map["hotel_normal_invoice_fee"] = self.hotelNormalInvoiceFee!
            }
            if self.hotelSpecialInvoiceFee != nil {
                map["hotel_special_invoice_fee"] = self.hotelSpecialInvoiceFee!
            }
            if self.internationalFlightInvoiceFee != nil {
                map["international_flight_invoice_fee"] = self.internationalFlightInvoiceFee!
            }
            if self.internationalHotelInvoiceFee != nil {
                map["international_hotel_invoice_fee"] = self.internationalHotelInvoiceFee!
            }
            if self.invoiceThirdPartId != nil {
                map["invoice_third_part_id"] = self.invoiceThirdPartId!
            }
            if self.invoiceType != nil {
                map["invoice_type"] = self.invoiceType!
            }
            if self.mailAddress != nil {
                map["mail_address"] = self.mailAddress!
            }
            if self.mailCity != nil {
                map["mail_city"] = self.mailCity!
            }
            if self.mailFullAddress != nil {
                map["mail_full_address"] = self.mailFullAddress!
            }
            if self.mailProvince != nil {
                map["mail_province"] = self.mailProvince!
            }
            if self.penaltyFee != nil {
                map["penalty_fee"] = self.penaltyFee!
            }
            if self.remark != nil {
                map["remark"] = self.remark!
            }
            if self.serviceFee != nil {
                map["service_fee"] = self.serviceFee!
            }
            if self.telephone != nil {
                map["telephone"] = self.telephone!
            }
            if self.trainInvoiceFee != nil {
                map["train_invoice_fee"] = self.trainInvoiceFee!
            }
            if self.vehicleInvoiceFee != nil {
                map["vehicle_invoice_fee"] = self.vehicleInvoiceFee!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("contact") && dict["contact"] != nil {
                self.contact = dict["contact"] as! String
            }
            if dict.keys.contains("email") && dict["email"] != nil {
                self.email = dict["email"] as! String
            }
            if dict.keys.contains("flight_invoice_fee") && dict["flight_invoice_fee"] != nil {
                self.flightInvoiceFee = dict["flight_invoice_fee"] as! String
            }
            if dict.keys.contains("fu_point_invoice_fee") && dict["fu_point_invoice_fee"] != nil {
                self.fuPointInvoiceFee = dict["fu_point_invoice_fee"] as! String
            }
            if dict.keys.contains("hotel_normal_invoice_fee") && dict["hotel_normal_invoice_fee"] != nil {
                self.hotelNormalInvoiceFee = dict["hotel_normal_invoice_fee"] as! String
            }
            if dict.keys.contains("hotel_special_invoice_fee") && dict["hotel_special_invoice_fee"] != nil {
                self.hotelSpecialInvoiceFee = dict["hotel_special_invoice_fee"] as! String
            }
            if dict.keys.contains("international_flight_invoice_fee") && dict["international_flight_invoice_fee"] != nil {
                self.internationalFlightInvoiceFee = dict["international_flight_invoice_fee"] as! String
            }
            if dict.keys.contains("international_hotel_invoice_fee") && dict["international_hotel_invoice_fee"] != nil {
                self.internationalHotelInvoiceFee = dict["international_hotel_invoice_fee"] as! String
            }
            if dict.keys.contains("invoice_third_part_id") && dict["invoice_third_part_id"] != nil {
                self.invoiceThirdPartId = dict["invoice_third_part_id"] as! String
            }
            if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                self.invoiceType = dict["invoice_type"] as! Int32
            }
            if dict.keys.contains("mail_address") && dict["mail_address"] != nil {
                self.mailAddress = dict["mail_address"] as! String
            }
            if dict.keys.contains("mail_city") && dict["mail_city"] != nil {
                self.mailCity = dict["mail_city"] as! String
            }
            if dict.keys.contains("mail_full_address") && dict["mail_full_address"] != nil {
                self.mailFullAddress = dict["mail_full_address"] as! String
            }
            if dict.keys.contains("mail_province") && dict["mail_province"] != nil {
                self.mailProvince = dict["mail_province"] as! String
            }
            if dict.keys.contains("penalty_fee") && dict["penalty_fee"] != nil {
                self.penaltyFee = dict["penalty_fee"] as! String
            }
            if dict.keys.contains("remark") && dict["remark"] != nil {
                self.remark = dict["remark"] as! String
            }
            if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                self.serviceFee = dict["service_fee"] as! String
            }
            if dict.keys.contains("telephone") && dict["telephone"] != nil {
                self.telephone = dict["telephone"] as! String
            }
            if dict.keys.contains("train_invoice_fee") && dict["train_invoice_fee"] != nil {
                self.trainInvoiceFee = dict["train_invoice_fee"] as! String
            }
            if dict.keys.contains("vehicle_invoice_fee") && dict["vehicle_invoice_fee"] != nil {
                self.vehicleInvoiceFee = dict["vehicle_invoice_fee"] as! String
            }
        }
    }
    public var billDate: String?

    public var invoiceTaskList: [ApplyInvoiceTaskRequest.InvoiceTaskList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        if self.invoiceTaskList != nil {
            var tmp : [Any] = []
            for k in self.invoiceTaskList! {
                tmp.append(k.toMap())
            }
            map["invoice_task_list"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
        if dict.keys.contains("invoice_task_list") && dict["invoice_task_list"] != nil {
            var tmp : [ApplyInvoiceTaskRequest.InvoiceTaskList] = []
            for v in dict["invoice_task_list"] as! [Any] {
                var model = ApplyInvoiceTaskRequest.InvoiceTaskList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.invoiceTaskList = tmp
        }
    }
}

public class ApplyInvoiceTaskShrinkRequest : Tea.TeaModel {
    public var billDate: String?

    public var invoiceTaskListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        if self.invoiceTaskListShrink != nil {
            map["invoice_task_list"] = self.invoiceTaskListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
        if dict.keys.contains("invoice_task_list") && dict["invoice_task_list"] != nil {
            self.invoiceTaskListShrink = dict["invoice_task_list"] as! String
        }
    }
}

public class ApplyInvoiceTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyInvoiceTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyInvoiceTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyInvoiceTaskResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyListQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ApplyListQueryRequest : Tea.TeaModel {
    public var allApply: Bool?

    public var departId: String?

    public var endTime: String?

    public var gmtModified: String?

    public var onlyShangLvApply: Bool?

    public var page: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var subCorpId: String?

    public var type: Int32?

    public var unionNo: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allApply != nil {
            map["all_apply"] = self.allApply!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.gmtModified != nil {
            map["gmt_modified"] = self.gmtModified!
        }
        if self.onlyShangLvApply != nil {
            map["only_shang_lv_apply"] = self.onlyShangLvApply!
        }
        if self.page != nil {
            map["page"] = self.page!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.unionNo != nil {
            map["union_no"] = self.unionNo!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_apply") && dict["all_apply"] != nil {
            self.allApply = dict["all_apply"] as! Bool
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! String
        }
        if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
            self.gmtModified = dict["gmt_modified"] as! String
        }
        if dict.keys.contains("only_shang_lv_apply") && dict["only_shang_lv_apply"] != nil {
            self.onlyShangLvApply = dict["only_shang_lv_apply"] as! Bool
        }
        if dict.keys.contains("page") && dict["page"] != nil {
            self.page = dict["page"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! String
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
        if dict.keys.contains("union_no") && dict["union_no"] != nil {
            self.unionNo = dict["union_no"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class ApplyListQueryResponseBody : Tea.TeaModel {
    public class ModuleList : Tea.TeaModel {
        public class ApproverList : Tea.TeaModel {
            public var note: String?

            public var operateTime: String?

            public var order: Int32?

            public var status: Int32?

            public var statusDesc: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.note != nil {
                    map["note"] = self.note!
                }
                if self.operateTime != nil {
                    map["operate_time"] = self.operateTime!
                }
                if self.order != nil {
                    map["order"] = self.order!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.statusDesc != nil {
                    map["status_desc"] = self.statusDesc!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("note") && dict["note"] != nil {
                    self.note = dict["note"] as! String
                }
                if dict.keys.contains("operate_time") && dict["operate_time"] != nil {
                    self.operateTime = dict["operate_time"] as! String
                }
                if dict.keys.contains("order") && dict["order"] != nil {
                    self.order = dict["order"] as! Int32
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("status_desc") && dict["status_desc"] != nil {
                    self.statusDesc = dict["status_desc"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class CarRule : Tea.TeaModel {
            public var scenarioTemplateId: String?

            public var scenarioTemplateName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.scenarioTemplateId != nil {
                    map["scenario_template_id"] = self.scenarioTemplateId!
                }
                if self.scenarioTemplateName != nil {
                    map["scenario_template_name"] = self.scenarioTemplateName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("scenario_template_id") && dict["scenario_template_id"] != nil {
                    self.scenarioTemplateId = dict["scenario_template_id"] as! String
                }
                if dict.keys.contains("scenario_template_name") && dict["scenario_template_name"] != nil {
                    self.scenarioTemplateName = dict["scenario_template_name"] as! String
                }
            }
        }
        public class ExternalTravelerList : Tea.TeaModel {
            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class ItineraryList : Tea.TeaModel {
            public var arrCity: String?

            public var arrDate: String?

            public var costCenterName: String?

            public var depCity: String?

            public var depDate: String?

            public var invoiceName: String?

            public var itineraryId: String?

            public var projectCode: String?

            public var projectTitle: String?

            public var thirdpartItineraryId: String?

            public var trafficType: Int32?

            public var tripWay: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.invoiceName != nil {
                    map["invoice_name"] = self.invoiceName!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.trafficType != nil {
                    map["traffic_type"] = self.trafficType!
                }
                if self.tripWay != nil {
                    map["trip_way"] = self.tripWay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("invoice_name") && dict["invoice_name"] != nil {
                    self.invoiceName = dict["invoice_name"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                    self.trafficType = dict["traffic_type"] as! Int32
                }
                if dict.keys.contains("trip_way") && dict["trip_way"] != nil {
                    self.tripWay = dict["trip_way"] as! Int32
                }
            }
        }
        public class ItinerarySetList : Tea.TeaModel {
            public var arrDate: String?

            public var cityCodeSet: String?

            public var citySet: String?

            public var costCenterName: String?

            public var depDate: String?

            public var invoiceName: String?

            public var itineraryId: String?

            public var projectCode: String?

            public var projectTitle: String?

            public var thirdpartItineraryId: String?

            public var trafficType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.cityCodeSet != nil {
                    map["city_code_set"] = self.cityCodeSet!
                }
                if self.citySet != nil {
                    map["city_set"] = self.citySet!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.invoiceName != nil {
                    map["invoice_name"] = self.invoiceName!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.trafficType != nil {
                    map["traffic_type"] = self.trafficType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("city_code_set") && dict["city_code_set"] != nil {
                    self.cityCodeSet = dict["city_code_set"] as! String
                }
                if dict.keys.contains("city_set") && dict["city_set"] != nil {
                    self.citySet = dict["city_set"] as! String
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("invoice_name") && dict["invoice_name"] != nil {
                    self.invoiceName = dict["invoice_name"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                    self.trafficType = dict["traffic_type"] as! Int32
                }
            }
        }
        public class TravelerList : Tea.TeaModel {
            public class CarCitySet : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                }
            }
            public var carCitySet: [ApplyListQueryResponseBody.ModuleList.TravelerList.CarCitySet]?

            public var jobNo: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.carCitySet != nil {
                    var tmp : [Any] = []
                    for k in self.carCitySet! {
                        tmp.append(k.toMap())
                    }
                    map["car_city_set"] = tmp
                }
                if self.jobNo != nil {
                    map["job_no"] = self.jobNo!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("car_city_set") && dict["car_city_set"] != nil {
                    var tmp : [ApplyListQueryResponseBody.ModuleList.TravelerList.CarCitySet] = []
                    for v in dict["car_city_set"] as! [Any] {
                        var model = ApplyListQueryResponseBody.ModuleList.TravelerList.CarCitySet()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.carCitySet = tmp
                }
                if dict.keys.contains("job_no") && dict["job_no"] != nil {
                    self.jobNo = dict["job_no"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public var applyShowId: String?

        public var approverList: [ApplyListQueryResponseBody.ModuleList.ApproverList]?

        public var carRule: ApplyListQueryResponseBody.ModuleList.CarRule?

        public var corpId: String?

        public var corpName: String?

        public var departId: String?

        public var departName: String?

        public var externalTravelerList: [ApplyListQueryResponseBody.ModuleList.ExternalTravelerList]?

        public var flowCode: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var itineraryList: [ApplyListQueryResponseBody.ModuleList.ItineraryList]?

        public var itineraryRule: Int32?

        public var itinerarySetList: [ApplyListQueryResponseBody.ModuleList.ItinerarySetList]?

        public var jobNo: String?

        public var status: Int32?

        public var statusDesc: String?

        public var thirdpartBusinessId: String?

        public var thirdpartId: String?

        public var travelerList: [ApplyListQueryResponseBody.ModuleList.TravelerList]?

        public var tripCause: String?

        public var tripDay: Int32?

        public var tripTitle: String?

        public var type: Int32?

        public var unionNo: String?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.carRule?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyShowId != nil {
                map["apply_show_id"] = self.applyShowId!
            }
            if self.approverList != nil {
                var tmp : [Any] = []
                for k in self.approverList! {
                    tmp.append(k.toMap())
                }
                map["approver_list"] = tmp
            }
            if self.carRule != nil {
                map["car_rule"] = self.carRule?.toMap()
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.corpName != nil {
                map["corp_name"] = self.corpName!
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.externalTravelerList != nil {
                var tmp : [Any] = []
                for k in self.externalTravelerList! {
                    tmp.append(k.toMap())
                }
                map["external_traveler_list"] = tmp
            }
            if self.flowCode != nil {
                map["flow_code"] = self.flowCode!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.itineraryList != nil {
                var tmp : [Any] = []
                for k in self.itineraryList! {
                    tmp.append(k.toMap())
                }
                map["itinerary_list"] = tmp
            }
            if self.itineraryRule != nil {
                map["itinerary_rule"] = self.itineraryRule!
            }
            if self.itinerarySetList != nil {
                var tmp : [Any] = []
                for k in self.itinerarySetList! {
                    tmp.append(k.toMap())
                }
                map["itinerary_set_list"] = tmp
            }
            if self.jobNo != nil {
                map["job_no"] = self.jobNo!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.statusDesc != nil {
                map["status_desc"] = self.statusDesc!
            }
            if self.thirdpartBusinessId != nil {
                map["thirdpart_business_id"] = self.thirdpartBusinessId!
            }
            if self.thirdpartId != nil {
                map["thirdpart_id"] = self.thirdpartId!
            }
            if self.travelerList != nil {
                var tmp : [Any] = []
                for k in self.travelerList! {
                    tmp.append(k.toMap())
                }
                map["traveler_list"] = tmp
            }
            if self.tripCause != nil {
                map["trip_cause"] = self.tripCause!
            }
            if self.tripDay != nil {
                map["trip_day"] = self.tripDay!
            }
            if self.tripTitle != nil {
                map["trip_title"] = self.tripTitle!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.unionNo != nil {
                map["union_no"] = self.unionNo!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_show_id") && dict["apply_show_id"] != nil {
                self.applyShowId = dict["apply_show_id"] as! String
            }
            if dict.keys.contains("approver_list") && dict["approver_list"] != nil {
                var tmp : [ApplyListQueryResponseBody.ModuleList.ApproverList] = []
                for v in dict["approver_list"] as! [Any] {
                    var model = ApplyListQueryResponseBody.ModuleList.ApproverList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.approverList = tmp
            }
            if dict.keys.contains("car_rule") && dict["car_rule"] != nil {
                var model = ApplyListQueryResponseBody.ModuleList.CarRule()
                model.fromMap(dict["car_rule"] as! [String: Any])
                self.carRule = model
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                self.corpName = dict["corp_name"] as! String
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! String
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("external_traveler_list") && dict["external_traveler_list"] != nil {
                var tmp : [ApplyListQueryResponseBody.ModuleList.ExternalTravelerList] = []
                for v in dict["external_traveler_list"] as! [Any] {
                    var model = ApplyListQueryResponseBody.ModuleList.ExternalTravelerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.externalTravelerList = tmp
            }
            if dict.keys.contains("flow_code") && dict["flow_code"] != nil {
                self.flowCode = dict["flow_code"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
                var tmp : [ApplyListQueryResponseBody.ModuleList.ItineraryList] = []
                for v in dict["itinerary_list"] as! [Any] {
                    var model = ApplyListQueryResponseBody.ModuleList.ItineraryList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itineraryList = tmp
            }
            if dict.keys.contains("itinerary_rule") && dict["itinerary_rule"] != nil {
                self.itineraryRule = dict["itinerary_rule"] as! Int32
            }
            if dict.keys.contains("itinerary_set_list") && dict["itinerary_set_list"] != nil {
                var tmp : [ApplyListQueryResponseBody.ModuleList.ItinerarySetList] = []
                for v in dict["itinerary_set_list"] as! [Any] {
                    var model = ApplyListQueryResponseBody.ModuleList.ItinerarySetList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itinerarySetList = tmp
            }
            if dict.keys.contains("job_no") && dict["job_no"] != nil {
                self.jobNo = dict["job_no"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("status_desc") && dict["status_desc"] != nil {
                self.statusDesc = dict["status_desc"] as! String
            }
            if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
                self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
            }
            if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
                self.thirdpartId = dict["thirdpart_id"] as! String
            }
            if dict.keys.contains("traveler_list") && dict["traveler_list"] != nil {
                var tmp : [ApplyListQueryResponseBody.ModuleList.TravelerList] = []
                for v in dict["traveler_list"] as! [Any] {
                    var model = ApplyListQueryResponseBody.ModuleList.TravelerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerList = tmp
            }
            if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
                self.tripCause = dict["trip_cause"] as! String
            }
            if dict.keys.contains("trip_day") && dict["trip_day"] != nil {
                self.tripDay = dict["trip_day"] as! Int32
            }
            if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
                self.tripTitle = dict["trip_title"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! Int32
            }
            if dict.keys.contains("union_no") && dict["union_no"] != nil {
                self.unionNo = dict["union_no"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var moduleList: [ApplyListQueryResponseBody.ModuleList]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.moduleList != nil {
            var tmp : [Any] = []
            for k in self.moduleList! {
                tmp.append(k.toMap())
            }
            map["module_list"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module_list") && dict["module_list"] != nil {
            var tmp : [ApplyListQueryResponseBody.ModuleList] = []
            for v in dict["module_list"] as! [Any] {
                var model = ApplyListQueryResponseBody.ModuleList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.moduleList = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyListQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyListQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyListQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyModifyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ApplyModifyRequest : Tea.TeaModel {
    public class CarRule : Tea.TeaModel {
        public var scenarioTemplateId: String?

        public var scenarioTemplateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.scenarioTemplateId != nil {
                map["scenario_template_id"] = self.scenarioTemplateId!
            }
            if self.scenarioTemplateName != nil {
                map["scenario_template_name"] = self.scenarioTemplateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("scenario_template_id") && dict["scenario_template_id"] != nil {
                self.scenarioTemplateId = dict["scenario_template_id"] as! String
            }
            if dict.keys.contains("scenario_template_name") && dict["scenario_template_name"] != nil {
                self.scenarioTemplateName = dict["scenario_template_name"] as! String
            }
        }
    }
    public class ExternalTravelerList : Tea.TeaModel {
        public var userName: String?

        public var userNameEn: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            if self.userNameEn != nil {
                map["user_name_en"] = self.userNameEn!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
            if dict.keys.contains("user_name_en") && dict["user_name_en"] != nil {
                self.userNameEn = dict["user_name_en"] as! String
            }
        }
    }
    public class ExternalTravelerStandard : Tea.TeaModel {
        public class HotelCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public class HotelIntlCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public var businessDiscount: Int32?

        public var economyDiscount: Int32?

        public var firstDiscount: Int32?

        public var flightCabins: String?

        public var hotelCitys: [ApplyModifyRequest.ExternalTravelerStandard.HotelCitys]?

        public var hotelIntlCitys: [ApplyModifyRequest.ExternalTravelerStandard.HotelIntlCitys]?

        public var premiumEconomyDiscount: Int32?

        public var reserveType: Int32?

        public var trainSeats: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessDiscount != nil {
                map["business_discount"] = self.businessDiscount!
            }
            if self.economyDiscount != nil {
                map["economy_discount"] = self.economyDiscount!
            }
            if self.firstDiscount != nil {
                map["first_discount"] = self.firstDiscount!
            }
            if self.flightCabins != nil {
                map["flight_cabins"] = self.flightCabins!
            }
            if self.hotelCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_citys"] = tmp
            }
            if self.hotelIntlCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelIntlCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_intl_citys"] = tmp
            }
            if self.premiumEconomyDiscount != nil {
                map["premium_economy_discount"] = self.premiumEconomyDiscount!
            }
            if self.reserveType != nil {
                map["reserve_type"] = self.reserveType!
            }
            if self.trainSeats != nil {
                map["train_seats"] = self.trainSeats!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("business_discount") && dict["business_discount"] != nil {
                self.businessDiscount = dict["business_discount"] as! Int32
            }
            if dict.keys.contains("economy_discount") && dict["economy_discount"] != nil {
                self.economyDiscount = dict["economy_discount"] as! Int32
            }
            if dict.keys.contains("first_discount") && dict["first_discount"] != nil {
                self.firstDiscount = dict["first_discount"] as! Int32
            }
            if dict.keys.contains("flight_cabins") && dict["flight_cabins"] != nil {
                self.flightCabins = dict["flight_cabins"] as! String
            }
            if dict.keys.contains("hotel_citys") && dict["hotel_citys"] != nil {
                var tmp : [ApplyModifyRequest.ExternalTravelerStandard.HotelCitys] = []
                for v in dict["hotel_citys"] as! [Any] {
                    var model = ApplyModifyRequest.ExternalTravelerStandard.HotelCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelCitys = tmp
            }
            if dict.keys.contains("hotel_intl_citys") && dict["hotel_intl_citys"] != nil {
                var tmp : [ApplyModifyRequest.ExternalTravelerStandard.HotelIntlCitys] = []
                for v in dict["hotel_intl_citys"] as! [Any] {
                    var model = ApplyModifyRequest.ExternalTravelerStandard.HotelIntlCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelIntlCitys = tmp
            }
            if dict.keys.contains("premium_economy_discount") && dict["premium_economy_discount"] != nil {
                self.premiumEconomyDiscount = dict["premium_economy_discount"] as! Int32
            }
            if dict.keys.contains("reserve_type") && dict["reserve_type"] != nil {
                self.reserveType = dict["reserve_type"] as! Int32
            }
            if dict.keys.contains("train_seats") && dict["train_seats"] != nil {
                self.trainSeats = dict["train_seats"] as! String
            }
        }
    }
    public class HotelShare : Tea.TeaModel {
        public var param: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.param != nil {
                map["param"] = self.param!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("param") && dict["param"] != nil {
                self.param = dict["param"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! String
            }
        }
    }
    public class ItineraryList : Tea.TeaModel {
        public class ItineraryTravelStandard : Tea.TeaModel {
            public var hotelAvailableNightsPerDay: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hotelAvailableNightsPerDay != nil {
                    map["hotel_available_nights_per_day"] = self.hotelAvailableNightsPerDay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("hotel_available_nights_per_day") && dict["hotel_available_nights_per_day"] != nil {
                    self.hotelAvailableNightsPerDay = dict["hotel_available_nights_per_day"] as! Int32
                }
            }
        }
        public var arrCity: String?

        public var arrCityCode: String?

        public var arrDate: String?

        public var costCenterId: Int64?

        public var depCity: String?

        public var depCityCode: String?

        public var depDate: String?

        public var invoiceId: Int64?

        public var itineraryId: String?

        public var itineraryTravelStandard: ApplyModifyRequest.ItineraryList.ItineraryTravelStandard?

        public var needHotel: Bool?

        public var needTraffic: Bool?

        public var projectCode: String?

        public var projectTitle: String?

        public var thirdPartInvoiceId: String?

        public var thirdpartCostCenterId: String?

        public var trafficType: Int32?

        public var tripWay: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.itineraryTravelStandard?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCity != nil {
                map["arr_city"] = self.arrCity!
            }
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.arrDate != nil {
                map["arr_date"] = self.arrDate!
            }
            if self.costCenterId != nil {
                map["cost_center_id"] = self.costCenterId!
            }
            if self.depCity != nil {
                map["dep_city"] = self.depCity!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.invoiceId != nil {
                map["invoice_id"] = self.invoiceId!
            }
            if self.itineraryId != nil {
                map["itinerary_id"] = self.itineraryId!
            }
            if self.itineraryTravelStandard != nil {
                map["itinerary_travel_standard"] = self.itineraryTravelStandard?.toMap()
            }
            if self.needHotel != nil {
                map["need_hotel"] = self.needHotel!
            }
            if self.needTraffic != nil {
                map["need_traffic"] = self.needTraffic!
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.thirdPartInvoiceId != nil {
                map["third_part_invoice_id"] = self.thirdPartInvoiceId!
            }
            if self.thirdpartCostCenterId != nil {
                map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
            }
            if self.trafficType != nil {
                map["traffic_type"] = self.trafficType!
            }
            if self.tripWay != nil {
                map["trip_way"] = self.tripWay!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                self.arrCity = dict["arr_city"] as! String
            }
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                self.arrDate = dict["arr_date"] as! String
            }
            if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                self.costCenterId = dict["cost_center_id"] as! Int64
            }
            if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                self.depCity = dict["dep_city"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("invoice_id") && dict["invoice_id"] != nil {
                self.invoiceId = dict["invoice_id"] as! Int64
            }
            if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                self.itineraryId = dict["itinerary_id"] as! String
            }
            if dict.keys.contains("itinerary_travel_standard") && dict["itinerary_travel_standard"] != nil {
                var model = ApplyModifyRequest.ItineraryList.ItineraryTravelStandard()
                model.fromMap(dict["itinerary_travel_standard"] as! [String: Any])
                self.itineraryTravelStandard = model
            }
            if dict.keys.contains("need_hotel") && dict["need_hotel"] != nil {
                self.needHotel = dict["need_hotel"] as! Bool
            }
            if dict.keys.contains("need_traffic") && dict["need_traffic"] != nil {
                self.needTraffic = dict["need_traffic"] as! Bool
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
                self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
            }
            if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
            }
            if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                self.trafficType = dict["traffic_type"] as! Int32
            }
            if dict.keys.contains("trip_way") && dict["trip_way"] != nil {
                self.tripWay = dict["trip_way"] as! Int32
            }
        }
    }
    public class ItinerarySetList : Tea.TeaModel {
        public class ItineraryTravelStandard : Tea.TeaModel {
            public var hotelAvailableNightsPerDay: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hotelAvailableNightsPerDay != nil {
                    map["hotel_available_nights_per_day"] = self.hotelAvailableNightsPerDay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("hotel_available_nights_per_day") && dict["hotel_available_nights_per_day"] != nil {
                    self.hotelAvailableNightsPerDay = dict["hotel_available_nights_per_day"] as! Int32
                }
            }
        }
        public var arrDate: String?

        public var cityCodeSet: String?

        public var citySet: String?

        public var costCenterId: Int64?

        public var depDate: String?

        public var invoiceId: Int64?

        public var itineraryId: String?

        public var itineraryTravelStandard: ApplyModifyRequest.ItinerarySetList.ItineraryTravelStandard?

        public var projectCode: String?

        public var projectTitle: String?

        public var thirdPartInvoiceId: String?

        public var thirdpartCostCenterId: String?

        public var trafficType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.itineraryTravelStandard?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrDate != nil {
                map["arr_date"] = self.arrDate!
            }
            if self.cityCodeSet != nil {
                map["city_code_set"] = self.cityCodeSet!
            }
            if self.citySet != nil {
                map["city_set"] = self.citySet!
            }
            if self.costCenterId != nil {
                map["cost_center_id"] = self.costCenterId!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.invoiceId != nil {
                map["invoice_id"] = self.invoiceId!
            }
            if self.itineraryId != nil {
                map["itinerary_id"] = self.itineraryId!
            }
            if self.itineraryTravelStandard != nil {
                map["itinerary_travel_standard"] = self.itineraryTravelStandard?.toMap()
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.thirdPartInvoiceId != nil {
                map["third_part_invoice_id"] = self.thirdPartInvoiceId!
            }
            if self.thirdpartCostCenterId != nil {
                map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
            }
            if self.trafficType != nil {
                map["traffic_type"] = self.trafficType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                self.arrDate = dict["arr_date"] as! String
            }
            if dict.keys.contains("city_code_set") && dict["city_code_set"] != nil {
                self.cityCodeSet = dict["city_code_set"] as! String
            }
            if dict.keys.contains("city_set") && dict["city_set"] != nil {
                self.citySet = dict["city_set"] as! String
            }
            if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                self.costCenterId = dict["cost_center_id"] as! Int64
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("invoice_id") && dict["invoice_id"] != nil {
                self.invoiceId = dict["invoice_id"] as! Int64
            }
            if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                self.itineraryId = dict["itinerary_id"] as! String
            }
            if dict.keys.contains("itinerary_travel_standard") && dict["itinerary_travel_standard"] != nil {
                var model = ApplyModifyRequest.ItinerarySetList.ItineraryTravelStandard()
                model.fromMap(dict["itinerary_travel_standard"] as! [String: Any])
                self.itineraryTravelStandard = model
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
                self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
            }
            if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
            }
            if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                self.trafficType = dict["traffic_type"] as! Int32
            }
        }
    }
    public class TravelerList : Tea.TeaModel {
        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public class TravelerStandard : Tea.TeaModel {
        public class CarCitySet : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
            }
        }
        public class HotelCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public class HotelIntlCitys : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public var fee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.fee != nil {
                    map["fee"] = self.fee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("fee") && dict["fee"] != nil {
                    self.fee = dict["fee"] as! Int64
                }
            }
        }
        public var businessDiscount: Int32?

        public var carCitySet: [ApplyModifyRequest.TravelerStandard.CarCitySet]?

        public var economyDiscount: Int32?

        public var firstDiscount: Int32?

        public var flightCabins: String?

        public var hotelCitys: [ApplyModifyRequest.TravelerStandard.HotelCitys]?

        public var hotelIntlCitys: [ApplyModifyRequest.TravelerStandard.HotelIntlCitys]?

        public var premiumEconomyDiscount: Int32?

        public var reserveType: Int32?

        public var trainSeats: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessDiscount != nil {
                map["business_discount"] = self.businessDiscount!
            }
            if self.carCitySet != nil {
                var tmp : [Any] = []
                for k in self.carCitySet! {
                    tmp.append(k.toMap())
                }
                map["car_city_set"] = tmp
            }
            if self.economyDiscount != nil {
                map["economy_discount"] = self.economyDiscount!
            }
            if self.firstDiscount != nil {
                map["first_discount"] = self.firstDiscount!
            }
            if self.flightCabins != nil {
                map["flight_cabins"] = self.flightCabins!
            }
            if self.hotelCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_citys"] = tmp
            }
            if self.hotelIntlCitys != nil {
                var tmp : [Any] = []
                for k in self.hotelIntlCitys! {
                    tmp.append(k.toMap())
                }
                map["hotel_intl_citys"] = tmp
            }
            if self.premiumEconomyDiscount != nil {
                map["premium_economy_discount"] = self.premiumEconomyDiscount!
            }
            if self.reserveType != nil {
                map["reserve_type"] = self.reserveType!
            }
            if self.trainSeats != nil {
                map["train_seats"] = self.trainSeats!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("business_discount") && dict["business_discount"] != nil {
                self.businessDiscount = dict["business_discount"] as! Int32
            }
            if dict.keys.contains("car_city_set") && dict["car_city_set"] != nil {
                var tmp : [ApplyModifyRequest.TravelerStandard.CarCitySet] = []
                for v in dict["car_city_set"] as! [Any] {
                    var model = ApplyModifyRequest.TravelerStandard.CarCitySet()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.carCitySet = tmp
            }
            if dict.keys.contains("economy_discount") && dict["economy_discount"] != nil {
                self.economyDiscount = dict["economy_discount"] as! Int32
            }
            if dict.keys.contains("first_discount") && dict["first_discount"] != nil {
                self.firstDiscount = dict["first_discount"] as! Int32
            }
            if dict.keys.contains("flight_cabins") && dict["flight_cabins"] != nil {
                self.flightCabins = dict["flight_cabins"] as! String
            }
            if dict.keys.contains("hotel_citys") && dict["hotel_citys"] != nil {
                var tmp : [ApplyModifyRequest.TravelerStandard.HotelCitys] = []
                for v in dict["hotel_citys"] as! [Any] {
                    var model = ApplyModifyRequest.TravelerStandard.HotelCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelCitys = tmp
            }
            if dict.keys.contains("hotel_intl_citys") && dict["hotel_intl_citys"] != nil {
                var tmp : [ApplyModifyRequest.TravelerStandard.HotelIntlCitys] = []
                for v in dict["hotel_intl_citys"] as! [Any] {
                    var model = ApplyModifyRequest.TravelerStandard.HotelIntlCitys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelIntlCitys = tmp
            }
            if dict.keys.contains("premium_economy_discount") && dict["premium_economy_discount"] != nil {
                self.premiumEconomyDiscount = dict["premium_economy_discount"] as! Int32
            }
            if dict.keys.contains("reserve_type") && dict["reserve_type"] != nil {
                self.reserveType = dict["reserve_type"] as! Int32
            }
            if dict.keys.contains("train_seats") && dict["train_seats"] != nil {
                self.trainSeats = dict["train_seats"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var budget: Int64?

    public var budgetMerge: Int32?

    public var carRule: ApplyModifyRequest.CarRule?

    public var corpName: String?

    public var departId: String?

    public var departName: String?

    public var extendField: String?

    public var externalTravelerList: [ApplyModifyRequest.ExternalTravelerList]?

    public var externalTravelerStandard: ApplyModifyRequest.ExternalTravelerStandard?

    public var flightBudget: Int64?

    public var hotelBudget: Int64?

    public var hotelShare: ApplyModifyRequest.HotelShare?

    public var itineraryList: [ApplyModifyRequest.ItineraryList]?

    public var itineraryRule: Int32?

    public var itinerarySetList: [ApplyModifyRequest.ItinerarySetList]?

    public var limitTraveler: Int32?

    public var status: Int32?

    public var subCorpId: String?

    public var thirdpartApplyId: String?

    public var thirdpartBusinessId: String?

    public var thirdpartDepartId: String?

    public var togetherBookRule: Int32?

    public var trainBudget: Int64?

    public var travelerList: [ApplyModifyRequest.TravelerList]?

    public var travelerStandard: [ApplyModifyRequest.TravelerStandard]?

    public var tripCause: String?

    public var tripDay: Int32?

    public var tripTitle: String?

    public var unionNo: String?

    public var userId: String?

    public var userName: String?

    public var vehicleBudget: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.carRule?.validate()
        try self.externalTravelerStandard?.validate()
        try self.hotelShare?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.budget != nil {
            map["budget"] = self.budget!
        }
        if self.budgetMerge != nil {
            map["budget_merge"] = self.budgetMerge!
        }
        if self.carRule != nil {
            map["car_rule"] = self.carRule?.toMap()
        }
        if self.corpName != nil {
            map["corp_name"] = self.corpName!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.departName != nil {
            map["depart_name"] = self.departName!
        }
        if self.extendField != nil {
            map["extend_field"] = self.extendField!
        }
        if self.externalTravelerList != nil {
            var tmp : [Any] = []
            for k in self.externalTravelerList! {
                tmp.append(k.toMap())
            }
            map["external_traveler_list"] = tmp
        }
        if self.externalTravelerStandard != nil {
            map["external_traveler_standard"] = self.externalTravelerStandard?.toMap()
        }
        if self.flightBudget != nil {
            map["flight_budget"] = self.flightBudget!
        }
        if self.hotelBudget != nil {
            map["hotel_budget"] = self.hotelBudget!
        }
        if self.hotelShare != nil {
            map["hotel_share"] = self.hotelShare?.toMap()
        }
        if self.itineraryList != nil {
            var tmp : [Any] = []
            for k in self.itineraryList! {
                tmp.append(k.toMap())
            }
            map["itinerary_list"] = tmp
        }
        if self.itineraryRule != nil {
            map["itinerary_rule"] = self.itineraryRule!
        }
        if self.itinerarySetList != nil {
            var tmp : [Any] = []
            for k in self.itinerarySetList! {
                tmp.append(k.toMap())
            }
            map["itinerary_set_list"] = tmp
        }
        if self.limitTraveler != nil {
            map["limit_traveler"] = self.limitTraveler!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.thirdpartBusinessId != nil {
            map["thirdpart_business_id"] = self.thirdpartBusinessId!
        }
        if self.thirdpartDepartId != nil {
            map["thirdpart_depart_id"] = self.thirdpartDepartId!
        }
        if self.togetherBookRule != nil {
            map["together_book_rule"] = self.togetherBookRule!
        }
        if self.trainBudget != nil {
            map["train_budget"] = self.trainBudget!
        }
        if self.travelerList != nil {
            var tmp : [Any] = []
            for k in self.travelerList! {
                tmp.append(k.toMap())
            }
            map["traveler_list"] = tmp
        }
        if self.travelerStandard != nil {
            var tmp : [Any] = []
            for k in self.travelerStandard! {
                tmp.append(k.toMap())
            }
            map["traveler_standard"] = tmp
        }
        if self.tripCause != nil {
            map["trip_cause"] = self.tripCause!
        }
        if self.tripDay != nil {
            map["trip_day"] = self.tripDay!
        }
        if self.tripTitle != nil {
            map["trip_title"] = self.tripTitle!
        }
        if self.unionNo != nil {
            map["union_no"] = self.unionNo!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        if self.vehicleBudget != nil {
            map["vehicle_budget"] = self.vehicleBudget!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("budget") && dict["budget"] != nil {
            self.budget = dict["budget"] as! Int64
        }
        if dict.keys.contains("budget_merge") && dict["budget_merge"] != nil {
            self.budgetMerge = dict["budget_merge"] as! Int32
        }
        if dict.keys.contains("car_rule") && dict["car_rule"] != nil {
            var model = ApplyModifyRequest.CarRule()
            model.fromMap(dict["car_rule"] as! [String: Any])
            self.carRule = model
        }
        if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
            self.corpName = dict["corp_name"] as! String
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
            self.departName = dict["depart_name"] as! String
        }
        if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
            self.extendField = dict["extend_field"] as! String
        }
        if dict.keys.contains("external_traveler_list") && dict["external_traveler_list"] != nil {
            var tmp : [ApplyModifyRequest.ExternalTravelerList] = []
            for v in dict["external_traveler_list"] as! [Any] {
                var model = ApplyModifyRequest.ExternalTravelerList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.externalTravelerList = tmp
        }
        if dict.keys.contains("external_traveler_standard") && dict["external_traveler_standard"] != nil {
            var model = ApplyModifyRequest.ExternalTravelerStandard()
            model.fromMap(dict["external_traveler_standard"] as! [String: Any])
            self.externalTravelerStandard = model
        }
        if dict.keys.contains("flight_budget") && dict["flight_budget"] != nil {
            self.flightBudget = dict["flight_budget"] as! Int64
        }
        if dict.keys.contains("hotel_budget") && dict["hotel_budget"] != nil {
            self.hotelBudget = dict["hotel_budget"] as! Int64
        }
        if dict.keys.contains("hotel_share") && dict["hotel_share"] != nil {
            var model = ApplyModifyRequest.HotelShare()
            model.fromMap(dict["hotel_share"] as! [String: Any])
            self.hotelShare = model
        }
        if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
            var tmp : [ApplyModifyRequest.ItineraryList] = []
            for v in dict["itinerary_list"] as! [Any] {
                var model = ApplyModifyRequest.ItineraryList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.itineraryList = tmp
        }
        if dict.keys.contains("itinerary_rule") && dict["itinerary_rule"] != nil {
            self.itineraryRule = dict["itinerary_rule"] as! Int32
        }
        if dict.keys.contains("itinerary_set_list") && dict["itinerary_set_list"] != nil {
            var tmp : [ApplyModifyRequest.ItinerarySetList] = []
            for v in dict["itinerary_set_list"] as! [Any] {
                var model = ApplyModifyRequest.ItinerarySetList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.itinerarySetList = tmp
        }
        if dict.keys.contains("limit_traveler") && dict["limit_traveler"] != nil {
            self.limitTraveler = dict["limit_traveler"] as! Int32
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
            self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
        }
        if dict.keys.contains("thirdpart_depart_id") && dict["thirdpart_depart_id"] != nil {
            self.thirdpartDepartId = dict["thirdpart_depart_id"] as! String
        }
        if dict.keys.contains("together_book_rule") && dict["together_book_rule"] != nil {
            self.togetherBookRule = dict["together_book_rule"] as! Int32
        }
        if dict.keys.contains("train_budget") && dict["train_budget"] != nil {
            self.trainBudget = dict["train_budget"] as! Int64
        }
        if dict.keys.contains("traveler_list") && dict["traveler_list"] != nil {
            var tmp : [ApplyModifyRequest.TravelerList] = []
            for v in dict["traveler_list"] as! [Any] {
                var model = ApplyModifyRequest.TravelerList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerList = tmp
        }
        if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
            var tmp : [ApplyModifyRequest.TravelerStandard] = []
            for v in dict["traveler_standard"] as! [Any] {
                var model = ApplyModifyRequest.TravelerStandard()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerStandard = tmp
        }
        if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
            self.tripCause = dict["trip_cause"] as! String
        }
        if dict.keys.contains("trip_day") && dict["trip_day"] != nil {
            self.tripDay = dict["trip_day"] as! Int32
        }
        if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
            self.tripTitle = dict["trip_title"] as! String
        }
        if dict.keys.contains("union_no") && dict["union_no"] != nil {
            self.unionNo = dict["union_no"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
        if dict.keys.contains("vehicle_budget") && dict["vehicle_budget"] != nil {
            self.vehicleBudget = dict["vehicle_budget"] as! Int64
        }
    }
}

public class ApplyModifyShrinkRequest : Tea.TeaModel {
    public var budget: Int64?

    public var budgetMerge: Int32?

    public var carRuleShrink: String?

    public var corpName: String?

    public var departId: String?

    public var departName: String?

    public var extendField: String?

    public var externalTravelerListShrink: String?

    public var externalTravelerStandardShrink: String?

    public var flightBudget: Int64?

    public var hotelBudget: Int64?

    public var hotelShareShrink: String?

    public var itineraryListShrink: String?

    public var itineraryRule: Int32?

    public var itinerarySetListShrink: String?

    public var limitTraveler: Int32?

    public var status: Int32?

    public var subCorpId: String?

    public var thirdpartApplyId: String?

    public var thirdpartBusinessId: String?

    public var thirdpartDepartId: String?

    public var togetherBookRule: Int32?

    public var trainBudget: Int64?

    public var travelerListShrink: String?

    public var travelerStandardShrink: String?

    public var tripCause: String?

    public var tripDay: Int32?

    public var tripTitle: String?

    public var unionNo: String?

    public var userId: String?

    public var userName: String?

    public var vehicleBudget: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.budget != nil {
            map["budget"] = self.budget!
        }
        if self.budgetMerge != nil {
            map["budget_merge"] = self.budgetMerge!
        }
        if self.carRuleShrink != nil {
            map["car_rule"] = self.carRuleShrink!
        }
        if self.corpName != nil {
            map["corp_name"] = self.corpName!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.departName != nil {
            map["depart_name"] = self.departName!
        }
        if self.extendField != nil {
            map["extend_field"] = self.extendField!
        }
        if self.externalTravelerListShrink != nil {
            map["external_traveler_list"] = self.externalTravelerListShrink!
        }
        if self.externalTravelerStandardShrink != nil {
            map["external_traveler_standard"] = self.externalTravelerStandardShrink!
        }
        if self.flightBudget != nil {
            map["flight_budget"] = self.flightBudget!
        }
        if self.hotelBudget != nil {
            map["hotel_budget"] = self.hotelBudget!
        }
        if self.hotelShareShrink != nil {
            map["hotel_share"] = self.hotelShareShrink!
        }
        if self.itineraryListShrink != nil {
            map["itinerary_list"] = self.itineraryListShrink!
        }
        if self.itineraryRule != nil {
            map["itinerary_rule"] = self.itineraryRule!
        }
        if self.itinerarySetListShrink != nil {
            map["itinerary_set_list"] = self.itinerarySetListShrink!
        }
        if self.limitTraveler != nil {
            map["limit_traveler"] = self.limitTraveler!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.thirdpartBusinessId != nil {
            map["thirdpart_business_id"] = self.thirdpartBusinessId!
        }
        if self.thirdpartDepartId != nil {
            map["thirdpart_depart_id"] = self.thirdpartDepartId!
        }
        if self.togetherBookRule != nil {
            map["together_book_rule"] = self.togetherBookRule!
        }
        if self.trainBudget != nil {
            map["train_budget"] = self.trainBudget!
        }
        if self.travelerListShrink != nil {
            map["traveler_list"] = self.travelerListShrink!
        }
        if self.travelerStandardShrink != nil {
            map["traveler_standard"] = self.travelerStandardShrink!
        }
        if self.tripCause != nil {
            map["trip_cause"] = self.tripCause!
        }
        if self.tripDay != nil {
            map["trip_day"] = self.tripDay!
        }
        if self.tripTitle != nil {
            map["trip_title"] = self.tripTitle!
        }
        if self.unionNo != nil {
            map["union_no"] = self.unionNo!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        if self.vehicleBudget != nil {
            map["vehicle_budget"] = self.vehicleBudget!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("budget") && dict["budget"] != nil {
            self.budget = dict["budget"] as! Int64
        }
        if dict.keys.contains("budget_merge") && dict["budget_merge"] != nil {
            self.budgetMerge = dict["budget_merge"] as! Int32
        }
        if dict.keys.contains("car_rule") && dict["car_rule"] != nil {
            self.carRuleShrink = dict["car_rule"] as! String
        }
        if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
            self.corpName = dict["corp_name"] as! String
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
            self.departName = dict["depart_name"] as! String
        }
        if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
            self.extendField = dict["extend_field"] as! String
        }
        if dict.keys.contains("external_traveler_list") && dict["external_traveler_list"] != nil {
            self.externalTravelerListShrink = dict["external_traveler_list"] as! String
        }
        if dict.keys.contains("external_traveler_standard") && dict["external_traveler_standard"] != nil {
            self.externalTravelerStandardShrink = dict["external_traveler_standard"] as! String
        }
        if dict.keys.contains("flight_budget") && dict["flight_budget"] != nil {
            self.flightBudget = dict["flight_budget"] as! Int64
        }
        if dict.keys.contains("hotel_budget") && dict["hotel_budget"] != nil {
            self.hotelBudget = dict["hotel_budget"] as! Int64
        }
        if dict.keys.contains("hotel_share") && dict["hotel_share"] != nil {
            self.hotelShareShrink = dict["hotel_share"] as! String
        }
        if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
            self.itineraryListShrink = dict["itinerary_list"] as! String
        }
        if dict.keys.contains("itinerary_rule") && dict["itinerary_rule"] != nil {
            self.itineraryRule = dict["itinerary_rule"] as! Int32
        }
        if dict.keys.contains("itinerary_set_list") && dict["itinerary_set_list"] != nil {
            self.itinerarySetListShrink = dict["itinerary_set_list"] as! String
        }
        if dict.keys.contains("limit_traveler") && dict["limit_traveler"] != nil {
            self.limitTraveler = dict["limit_traveler"] as! Int32
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
            self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
        }
        if dict.keys.contains("thirdpart_depart_id") && dict["thirdpart_depart_id"] != nil {
            self.thirdpartDepartId = dict["thirdpart_depart_id"] as! String
        }
        if dict.keys.contains("together_book_rule") && dict["together_book_rule"] != nil {
            self.togetherBookRule = dict["together_book_rule"] as! Int32
        }
        if dict.keys.contains("train_budget") && dict["train_budget"] != nil {
            self.trainBudget = dict["train_budget"] as! Int64
        }
        if dict.keys.contains("traveler_list") && dict["traveler_list"] != nil {
            self.travelerListShrink = dict["traveler_list"] as! String
        }
        if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
            self.travelerStandardShrink = dict["traveler_standard"] as! String
        }
        if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
            self.tripCause = dict["trip_cause"] as! String
        }
        if dict.keys.contains("trip_day") && dict["trip_day"] != nil {
            self.tripDay = dict["trip_day"] as! Int32
        }
        if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
            self.tripTitle = dict["trip_title"] as! String
        }
        if dict.keys.contains("union_no") && dict["union_no"] != nil {
            self.unionNo = dict["union_no"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
        if dict.keys.contains("vehicle_budget") && dict["vehicle_budget"] != nil {
            self.vehicleBudget = dict["vehicle_budget"] as! Int64
        }
    }
}

public class ApplyModifyResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var applyId: Int64?

        public var thirdpartApplyId: String?

        public var thirdpartBusinessId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartBusinessId != nil {
                map["thirdpart_business_id"] = self.thirdpartBusinessId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
                self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: ApplyModifyResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = ApplyModifyResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyModifyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyModifyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyModifyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ApplyQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ApplyQueryRequest : Tea.TeaModel {
    public var applyId: Int32?

    public var applyShowId: String?

    public var subCorpId: String?

    public var thirdpartApplyId: String?

    public var type: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.applyShowId != nil {
            map["apply_show_id"] = self.applyShowId!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int32
        }
        if dict.keys.contains("apply_show_id") && dict["apply_show_id"] != nil {
            self.applyShowId = dict["apply_show_id"] as! String
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
    }
}

public class ApplyQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ApproverList : Tea.TeaModel {
            public var note: String?

            public var operateTime: String?

            public var order: Int32?

            public var status: Int32?

            public var statusDesc: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.note != nil {
                    map["note"] = self.note!
                }
                if self.operateTime != nil {
                    map["operate_time"] = self.operateTime!
                }
                if self.order != nil {
                    map["order"] = self.order!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.statusDesc != nil {
                    map["status_desc"] = self.statusDesc!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("note") && dict["note"] != nil {
                    self.note = dict["note"] as! String
                }
                if dict.keys.contains("operate_time") && dict["operate_time"] != nil {
                    self.operateTime = dict["operate_time"] as! String
                }
                if dict.keys.contains("order") && dict["order"] != nil {
                    self.order = dict["order"] as! Int32
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("status_desc") && dict["status_desc"] != nil {
                    self.statusDesc = dict["status_desc"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class CarRule : Tea.TeaModel {
            public var scenarioTemplateId: String?

            public var scenarioTemplateName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.scenarioTemplateId != nil {
                    map["scenario_template_id"] = self.scenarioTemplateId!
                }
                if self.scenarioTemplateName != nil {
                    map["scenario_template_name"] = self.scenarioTemplateName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("scenario_template_id") && dict["scenario_template_id"] != nil {
                    self.scenarioTemplateId = dict["scenario_template_id"] as! String
                }
                if dict.keys.contains("scenario_template_name") && dict["scenario_template_name"] != nil {
                    self.scenarioTemplateName = dict["scenario_template_name"] as! String
                }
            }
        }
        public class ExternalTravelerList : Tea.TeaModel {
            public class HotelCitys : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public var fee: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.fee != nil {
                        map["fee"] = self.fee!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("fee") && dict["fee"] != nil {
                        self.fee = dict["fee"] as! Int64
                    }
                }
            }
            public class HotelIntlCitys : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public var fee: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.fee != nil {
                        map["fee"] = self.fee!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("fee") && dict["fee"] != nil {
                        self.fee = dict["fee"] as! Int64
                    }
                }
            }
            public var businessDiscount: Int32?

            public var economyDiscount: Int32?

            public var firstDiscount: Int32?

            public var flightCabins: String?

            public var hotelCitys: [ApplyQueryResponseBody.Module.ExternalTravelerList.HotelCitys]?

            public var hotelIntlCitys: [ApplyQueryResponseBody.Module.ExternalTravelerList.HotelIntlCitys]?

            public var premiumEconomyDiscount: Int32?

            public var reserveType: Int32?

            public var trainSeats: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.businessDiscount != nil {
                    map["business_discount"] = self.businessDiscount!
                }
                if self.economyDiscount != nil {
                    map["economy_discount"] = self.economyDiscount!
                }
                if self.firstDiscount != nil {
                    map["first_discount"] = self.firstDiscount!
                }
                if self.flightCabins != nil {
                    map["flight_cabins"] = self.flightCabins!
                }
                if self.hotelCitys != nil {
                    var tmp : [Any] = []
                    for k in self.hotelCitys! {
                        tmp.append(k.toMap())
                    }
                    map["hotel_citys"] = tmp
                }
                if self.hotelIntlCitys != nil {
                    var tmp : [Any] = []
                    for k in self.hotelIntlCitys! {
                        tmp.append(k.toMap())
                    }
                    map["hotel_intl_citys"] = tmp
                }
                if self.premiumEconomyDiscount != nil {
                    map["premium_economy_discount"] = self.premiumEconomyDiscount!
                }
                if self.reserveType != nil {
                    map["reserve_type"] = self.reserveType!
                }
                if self.trainSeats != nil {
                    map["train_seats"] = self.trainSeats!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("business_discount") && dict["business_discount"] != nil {
                    self.businessDiscount = dict["business_discount"] as! Int32
                }
                if dict.keys.contains("economy_discount") && dict["economy_discount"] != nil {
                    self.economyDiscount = dict["economy_discount"] as! Int32
                }
                if dict.keys.contains("first_discount") && dict["first_discount"] != nil {
                    self.firstDiscount = dict["first_discount"] as! Int32
                }
                if dict.keys.contains("flight_cabins") && dict["flight_cabins"] != nil {
                    self.flightCabins = dict["flight_cabins"] as! String
                }
                if dict.keys.contains("hotel_citys") && dict["hotel_citys"] != nil {
                    var tmp : [ApplyQueryResponseBody.Module.ExternalTravelerList.HotelCitys] = []
                    for v in dict["hotel_citys"] as! [Any] {
                        var model = ApplyQueryResponseBody.Module.ExternalTravelerList.HotelCitys()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.hotelCitys = tmp
                }
                if dict.keys.contains("hotel_intl_citys") && dict["hotel_intl_citys"] != nil {
                    var tmp : [ApplyQueryResponseBody.Module.ExternalTravelerList.HotelIntlCitys] = []
                    for v in dict["hotel_intl_citys"] as! [Any] {
                        var model = ApplyQueryResponseBody.Module.ExternalTravelerList.HotelIntlCitys()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.hotelIntlCitys = tmp
                }
                if dict.keys.contains("premium_economy_discount") && dict["premium_economy_discount"] != nil {
                    self.premiumEconomyDiscount = dict["premium_economy_discount"] as! Int32
                }
                if dict.keys.contains("reserve_type") && dict["reserve_type"] != nil {
                    self.reserveType = dict["reserve_type"] as! Int32
                }
                if dict.keys.contains("train_seats") && dict["train_seats"] != nil {
                    self.trainSeats = dict["train_seats"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class HotelShare : Tea.TeaModel {
            public var param: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.param != nil {
                    map["param"] = self.param!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("param") && dict["param"] != nil {
                    self.param = dict["param"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! String
                }
            }
        }
        public class ItineraryList : Tea.TeaModel {
            public class ItineraryTravelStandard : Tea.TeaModel {
                public var hotelAvailableNightsPerDay: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hotelAvailableNightsPerDay != nil {
                        map["hotel_available_nights_per_day"] = self.hotelAvailableNightsPerDay!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("hotel_available_nights_per_day") && dict["hotel_available_nights_per_day"] != nil {
                        self.hotelAvailableNightsPerDay = dict["hotel_available_nights_per_day"] as! Int32
                    }
                }
            }
            public var arrCity: String?

            public var arrCityCode: String?

            public var arrDate: String?

            public var costCenterName: String?

            public var depCity: String?

            public var depCityCode: String?

            public var depDate: String?

            public var invoiceName: String?

            public var itineraryId: String?

            public var itineraryTravelStandard: ApplyQueryResponseBody.Module.ItineraryList.ItineraryTravelStandard?

            public var projectCode: String?

            public var projectTitle: String?

            public var thirdpartItineraryId: String?

            public var trafficType: Int32?

            public var tripWay: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.itineraryTravelStandard?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.invoiceName != nil {
                    map["invoice_name"] = self.invoiceName!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.itineraryTravelStandard != nil {
                    map["itinerary_travel_standard"] = self.itineraryTravelStandard?.toMap()
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.trafficType != nil {
                    map["traffic_type"] = self.trafficType!
                }
                if self.tripWay != nil {
                    map["trip_way"] = self.tripWay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("invoice_name") && dict["invoice_name"] != nil {
                    self.invoiceName = dict["invoice_name"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("itinerary_travel_standard") && dict["itinerary_travel_standard"] != nil {
                    var model = ApplyQueryResponseBody.Module.ItineraryList.ItineraryTravelStandard()
                    model.fromMap(dict["itinerary_travel_standard"] as! [String: Any])
                    self.itineraryTravelStandard = model
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                    self.trafficType = dict["traffic_type"] as! Int32
                }
                if dict.keys.contains("trip_way") && dict["trip_way"] != nil {
                    self.tripWay = dict["trip_way"] as! Int32
                }
            }
        }
        public class ItinerarySetList : Tea.TeaModel {
            public class ItineraryTravelStandard : Tea.TeaModel {
                public var hotelAvailableNightsPerDay: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hotelAvailableNightsPerDay != nil {
                        map["hotel_available_nights_per_day"] = self.hotelAvailableNightsPerDay!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("hotel_available_nights_per_day") && dict["hotel_available_nights_per_day"] != nil {
                        self.hotelAvailableNightsPerDay = dict["hotel_available_nights_per_day"] as! Int32
                    }
                }
            }
            public var arrDate: String?

            public var cityCodeSet: String?

            public var citySet: String?

            public var costCenterName: String?

            public var depDate: String?

            public var invoiceName: String?

            public var itineraryId: String?

            public var itineraryTravelStandard: ApplyQueryResponseBody.Module.ItinerarySetList.ItineraryTravelStandard?

            public var projectCode: String?

            public var projectTitle: String?

            public var thirdpartItineraryId: String?

            public var trafficType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.itineraryTravelStandard?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.cityCodeSet != nil {
                    map["city_code_set"] = self.cityCodeSet!
                }
                if self.citySet != nil {
                    map["city_set"] = self.citySet!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.invoiceName != nil {
                    map["invoice_name"] = self.invoiceName!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.itineraryTravelStandard != nil {
                    map["itinerary_travel_standard"] = self.itineraryTravelStandard?.toMap()
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.trafficType != nil {
                    map["traffic_type"] = self.trafficType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("city_code_set") && dict["city_code_set"] != nil {
                    self.cityCodeSet = dict["city_code_set"] as! String
                }
                if dict.keys.contains("city_set") && dict["city_set"] != nil {
                    self.citySet = dict["city_set"] as! String
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("invoice_name") && dict["invoice_name"] != nil {
                    self.invoiceName = dict["invoice_name"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("itinerary_travel_standard") && dict["itinerary_travel_standard"] != nil {
                    var model = ApplyQueryResponseBody.Module.ItinerarySetList.ItineraryTravelStandard()
                    model.fromMap(dict["itinerary_travel_standard"] as! [String: Any])
                    self.itineraryTravelStandard = model
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                    self.trafficType = dict["traffic_type"] as! Int32
                }
            }
        }
        public class TravelerList : Tea.TeaModel {
            public class CarCitySet : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                }
            }
            public class HotelCitys : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public var fee: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.fee != nil {
                        map["fee"] = self.fee!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("fee") && dict["fee"] != nil {
                        self.fee = dict["fee"] as! Int64
                    }
                }
            }
            public class HotelIntlCitys : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public var fee: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.fee != nil {
                        map["fee"] = self.fee!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("fee") && dict["fee"] != nil {
                        self.fee = dict["fee"] as! Int64
                    }
                }
            }
            public var businessDiscount: Int32?

            public var carCitySet: [ApplyQueryResponseBody.Module.TravelerList.CarCitySet]?

            public var economyDiscount: Int32?

            public var firstDiscount: Int32?

            public var flightCabins: String?

            public var hotelCitys: [ApplyQueryResponseBody.Module.TravelerList.HotelCitys]?

            public var hotelIntlCitys: [ApplyQueryResponseBody.Module.TravelerList.HotelIntlCitys]?

            public var premiumEconomyDiscount: Int32?

            public var reserveType: Int32?

            public var trainSeats: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.businessDiscount != nil {
                    map["business_discount"] = self.businessDiscount!
                }
                if self.carCitySet != nil {
                    var tmp : [Any] = []
                    for k in self.carCitySet! {
                        tmp.append(k.toMap())
                    }
                    map["car_city_set"] = tmp
                }
                if self.economyDiscount != nil {
                    map["economy_discount"] = self.economyDiscount!
                }
                if self.firstDiscount != nil {
                    map["first_discount"] = self.firstDiscount!
                }
                if self.flightCabins != nil {
                    map["flight_cabins"] = self.flightCabins!
                }
                if self.hotelCitys != nil {
                    var tmp : [Any] = []
                    for k in self.hotelCitys! {
                        tmp.append(k.toMap())
                    }
                    map["hotel_citys"] = tmp
                }
                if self.hotelIntlCitys != nil {
                    var tmp : [Any] = []
                    for k in self.hotelIntlCitys! {
                        tmp.append(k.toMap())
                    }
                    map["hotel_intl_citys"] = tmp
                }
                if self.premiumEconomyDiscount != nil {
                    map["premium_economy_discount"] = self.premiumEconomyDiscount!
                }
                if self.reserveType != nil {
                    map["reserve_type"] = self.reserveType!
                }
                if self.trainSeats != nil {
                    map["train_seats"] = self.trainSeats!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("business_discount") && dict["business_discount"] != nil {
                    self.businessDiscount = dict["business_discount"] as! Int32
                }
                if dict.keys.contains("car_city_set") && dict["car_city_set"] != nil {
                    var tmp : [ApplyQueryResponseBody.Module.TravelerList.CarCitySet] = []
                    for v in dict["car_city_set"] as! [Any] {
                        var model = ApplyQueryResponseBody.Module.TravelerList.CarCitySet()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.carCitySet = tmp
                }
                if dict.keys.contains("economy_discount") && dict["economy_discount"] != nil {
                    self.economyDiscount = dict["economy_discount"] as! Int32
                }
                if dict.keys.contains("first_discount") && dict["first_discount"] != nil {
                    self.firstDiscount = dict["first_discount"] as! Int32
                }
                if dict.keys.contains("flight_cabins") && dict["flight_cabins"] != nil {
                    self.flightCabins = dict["flight_cabins"] as! String
                }
                if dict.keys.contains("hotel_citys") && dict["hotel_citys"] != nil {
                    var tmp : [ApplyQueryResponseBody.Module.TravelerList.HotelCitys] = []
                    for v in dict["hotel_citys"] as! [Any] {
                        var model = ApplyQueryResponseBody.Module.TravelerList.HotelCitys()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.hotelCitys = tmp
                }
                if dict.keys.contains("hotel_intl_citys") && dict["hotel_intl_citys"] != nil {
                    var tmp : [ApplyQueryResponseBody.Module.TravelerList.HotelIntlCitys] = []
                    for v in dict["hotel_intl_citys"] as! [Any] {
                        var model = ApplyQueryResponseBody.Module.TravelerList.HotelIntlCitys()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.hotelIntlCitys = tmp
                }
                if dict.keys.contains("premium_economy_discount") && dict["premium_economy_discount"] != nil {
                    self.premiumEconomyDiscount = dict["premium_economy_discount"] as! Int32
                }
                if dict.keys.contains("reserve_type") && dict["reserve_type"] != nil {
                    self.reserveType = dict["reserve_type"] as! Int32
                }
                if dict.keys.contains("train_seats") && dict["train_seats"] != nil {
                    self.trainSeats = dict["train_seats"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public var applyShowId: String?

        public var approverList: [ApplyQueryResponseBody.Module.ApproverList]?

        public var budget: Int64?

        public var budgetMerge: Int32?

        public var carRule: ApplyQueryResponseBody.Module.CarRule?

        public var corpId: String?

        public var corpName: String?

        public var departId: String?

        public var departName: String?

        public var extendField: String?

        public var externalTravelerList: [ApplyQueryResponseBody.Module.ExternalTravelerList]?

        public var flightBudget: Int64?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var hotelBudget: Int64?

        public var hotelShare: ApplyQueryResponseBody.Module.HotelShare?

        public var id: Int64?

        public var itineraryList: [ApplyQueryResponseBody.Module.ItineraryList]?

        public var itineraryRule: Int32?

        public var itinerarySetList: [ApplyQueryResponseBody.Module.ItinerarySetList]?

        public var limitTraveler: Int32?

        public var status: Int32?

        public var statusDesc: String?

        public var thirdpartBusinessId: String?

        public var thirdpartId: String?

        public var togetherBookRule: Int32?

        public var trainBudget: Int64?

        public var travelerList: [ApplyQueryResponseBody.Module.TravelerList]?

        public var tripCause: String?

        public var tripDay: Int32?

        public var tripTitle: String?

        public var type: Int32?

        public var unionNo: String?

        public var userId: String?

        public var userName: String?

        public var vehicleBudget: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.carRule?.validate()
            try self.hotelShare?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyShowId != nil {
                map["apply_show_id"] = self.applyShowId!
            }
            if self.approverList != nil {
                var tmp : [Any] = []
                for k in self.approverList! {
                    tmp.append(k.toMap())
                }
                map["approver_list"] = tmp
            }
            if self.budget != nil {
                map["budget"] = self.budget!
            }
            if self.budgetMerge != nil {
                map["budget_merge"] = self.budgetMerge!
            }
            if self.carRule != nil {
                map["car_rule"] = self.carRule?.toMap()
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.corpName != nil {
                map["corp_name"] = self.corpName!
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.extendField != nil {
                map["extend_field"] = self.extendField!
            }
            if self.externalTravelerList != nil {
                var tmp : [Any] = []
                for k in self.externalTravelerList! {
                    tmp.append(k.toMap())
                }
                map["external_traveler_list"] = tmp
            }
            if self.flightBudget != nil {
                map["flight_budget"] = self.flightBudget!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.hotelBudget != nil {
                map["hotel_budget"] = self.hotelBudget!
            }
            if self.hotelShare != nil {
                map["hotel_share"] = self.hotelShare?.toMap()
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.itineraryList != nil {
                var tmp : [Any] = []
                for k in self.itineraryList! {
                    tmp.append(k.toMap())
                }
                map["itinerary_list"] = tmp
            }
            if self.itineraryRule != nil {
                map["itinerary_rule"] = self.itineraryRule!
            }
            if self.itinerarySetList != nil {
                var tmp : [Any] = []
                for k in self.itinerarySetList! {
                    tmp.append(k.toMap())
                }
                map["itinerary_set_list"] = tmp
            }
            if self.limitTraveler != nil {
                map["limit_traveler"] = self.limitTraveler!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.statusDesc != nil {
                map["status_desc"] = self.statusDesc!
            }
            if self.thirdpartBusinessId != nil {
                map["thirdpart_business_id"] = self.thirdpartBusinessId!
            }
            if self.thirdpartId != nil {
                map["thirdpart_id"] = self.thirdpartId!
            }
            if self.togetherBookRule != nil {
                map["together_book_rule"] = self.togetherBookRule!
            }
            if self.trainBudget != nil {
                map["train_budget"] = self.trainBudget!
            }
            if self.travelerList != nil {
                var tmp : [Any] = []
                for k in self.travelerList! {
                    tmp.append(k.toMap())
                }
                map["traveler_list"] = tmp
            }
            if self.tripCause != nil {
                map["trip_cause"] = self.tripCause!
            }
            if self.tripDay != nil {
                map["trip_day"] = self.tripDay!
            }
            if self.tripTitle != nil {
                map["trip_title"] = self.tripTitle!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.unionNo != nil {
                map["union_no"] = self.unionNo!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            if self.vehicleBudget != nil {
                map["vehicle_budget"] = self.vehicleBudget!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_show_id") && dict["apply_show_id"] != nil {
                self.applyShowId = dict["apply_show_id"] as! String
            }
            if dict.keys.contains("approver_list") && dict["approver_list"] != nil {
                var tmp : [ApplyQueryResponseBody.Module.ApproverList] = []
                for v in dict["approver_list"] as! [Any] {
                    var model = ApplyQueryResponseBody.Module.ApproverList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.approverList = tmp
            }
            if dict.keys.contains("budget") && dict["budget"] != nil {
                self.budget = dict["budget"] as! Int64
            }
            if dict.keys.contains("budget_merge") && dict["budget_merge"] != nil {
                self.budgetMerge = dict["budget_merge"] as! Int32
            }
            if dict.keys.contains("car_rule") && dict["car_rule"] != nil {
                var model = ApplyQueryResponseBody.Module.CarRule()
                model.fromMap(dict["car_rule"] as! [String: Any])
                self.carRule = model
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                self.corpName = dict["corp_name"] as! String
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! String
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
                self.extendField = dict["extend_field"] as! String
            }
            if dict.keys.contains("external_traveler_list") && dict["external_traveler_list"] != nil {
                var tmp : [ApplyQueryResponseBody.Module.ExternalTravelerList] = []
                for v in dict["external_traveler_list"] as! [Any] {
                    var model = ApplyQueryResponseBody.Module.ExternalTravelerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.externalTravelerList = tmp
            }
            if dict.keys.contains("flight_budget") && dict["flight_budget"] != nil {
                self.flightBudget = dict["flight_budget"] as! Int64
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("hotel_budget") && dict["hotel_budget"] != nil {
                self.hotelBudget = dict["hotel_budget"] as! Int64
            }
            if dict.keys.contains("hotel_share") && dict["hotel_share"] != nil {
                var model = ApplyQueryResponseBody.Module.HotelShare()
                model.fromMap(dict["hotel_share"] as! [String: Any])
                self.hotelShare = model
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
                var tmp : [ApplyQueryResponseBody.Module.ItineraryList] = []
                for v in dict["itinerary_list"] as! [Any] {
                    var model = ApplyQueryResponseBody.Module.ItineraryList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itineraryList = tmp
            }
            if dict.keys.contains("itinerary_rule") && dict["itinerary_rule"] != nil {
                self.itineraryRule = dict["itinerary_rule"] as! Int32
            }
            if dict.keys.contains("itinerary_set_list") && dict["itinerary_set_list"] != nil {
                var tmp : [ApplyQueryResponseBody.Module.ItinerarySetList] = []
                for v in dict["itinerary_set_list"] as! [Any] {
                    var model = ApplyQueryResponseBody.Module.ItinerarySetList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itinerarySetList = tmp
            }
            if dict.keys.contains("limit_traveler") && dict["limit_traveler"] != nil {
                self.limitTraveler = dict["limit_traveler"] as! Int32
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("status_desc") && dict["status_desc"] != nil {
                self.statusDesc = dict["status_desc"] as! String
            }
            if dict.keys.contains("thirdpart_business_id") && dict["thirdpart_business_id"] != nil {
                self.thirdpartBusinessId = dict["thirdpart_business_id"] as! String
            }
            if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
                self.thirdpartId = dict["thirdpart_id"] as! String
            }
            if dict.keys.contains("together_book_rule") && dict["together_book_rule"] != nil {
                self.togetherBookRule = dict["together_book_rule"] as! Int32
            }
            if dict.keys.contains("train_budget") && dict["train_budget"] != nil {
                self.trainBudget = dict["train_budget"] as! Int64
            }
            if dict.keys.contains("traveler_list") && dict["traveler_list"] != nil {
                var tmp : [ApplyQueryResponseBody.Module.TravelerList] = []
                for v in dict["traveler_list"] as! [Any] {
                    var model = ApplyQueryResponseBody.Module.TravelerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerList = tmp
            }
            if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
                self.tripCause = dict["trip_cause"] as! String
            }
            if dict.keys.contains("trip_day") && dict["trip_day"] != nil {
                self.tripDay = dict["trip_day"] as! Int32
            }
            if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
                self.tripTitle = dict["trip_title"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! Int32
            }
            if dict.keys.contains("union_no") && dict["union_no"] != nil {
                self.unionNo = dict["union_no"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
            if dict.keys.contains("vehicle_budget") && dict["vehicle_budget"] != nil {
                self.vehicleBudget = dict["vehicle_budget"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: ApplyQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = ApplyQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ApplyQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ApplyQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class BaseCityInfoSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripAccessToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripAccessToken != nil {
            map["x-acs-btrip-access-token"] = self.xAcsBtripAccessToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-access-token") && dict["x-acs-btrip-access-token"] != nil {
            self.xAcsBtripAccessToken = dict["x-acs-btrip-access-token"] as! String
        }
    }
}

public class BaseCityInfoSearchRequest : Tea.TeaModel {
    public var keyword: String?

    public var region: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["keyword"] = self.keyword!
        }
        if self.region != nil {
            map["region"] = self.region!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("keyword") && dict["keyword"] != nil {
            self.keyword = dict["keyword"] as! String
        }
        if dict.keys.contains("region") && dict["region"] != nil {
            self.region = dict["region"] as! String
        }
    }
}

public class BaseCityInfoSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var code: String?

        public var name: String?

        public var nameTree: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["code"] = self.code!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.nameTree != nil {
                map["nameTree"] = self.nameTree!
            }
            if self.region != nil {
                map["region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("code") && dict["code"] != nil {
                self.code = dict["code"] as! String
            }
            if dict.keys.contains("name") && dict["name"] != nil {
                self.name = dict["name"] as! String
            }
            if dict.keys.contains("nameTree") && dict["nameTree"] != nil {
                self.nameTree = dict["nameTree"] as! String
            }
            if dict.keys.contains("region") && dict["region"] != nil {
                self.region = dict["region"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [BaseCityInfoSearchResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [BaseCityInfoSearchResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = BaseCityInfoSearchResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class BaseCityInfoSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BaseCityInfoSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = BaseCityInfoSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class BtripBillInfoAdjustHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class BtripBillInfoAdjustRequest : Tea.TeaModel {
    public var primaryId: Int64?

    public var thirdPartCostCenterId: String?

    public var thirdPartDepartmentId: String?

    public var thirdPartInvoiceId: String?

    public var thirdPartProjectId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.primaryId != nil {
            map["primary_id"] = self.primaryId!
        }
        if self.thirdPartCostCenterId != nil {
            map["third_part_cost_center_id"] = self.thirdPartCostCenterId!
        }
        if self.thirdPartDepartmentId != nil {
            map["third_part_department_id"] = self.thirdPartDepartmentId!
        }
        if self.thirdPartInvoiceId != nil {
            map["third_part_invoice_id"] = self.thirdPartInvoiceId!
        }
        if self.thirdPartProjectId != nil {
            map["third_part_project_id"] = self.thirdPartProjectId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
            self.primaryId = dict["primary_id"] as! Int64
        }
        if dict.keys.contains("third_part_cost_center_id") && dict["third_part_cost_center_id"] != nil {
            self.thirdPartCostCenterId = dict["third_part_cost_center_id"] as! String
        }
        if dict.keys.contains("third_part_department_id") && dict["third_part_department_id"] != nil {
            self.thirdPartDepartmentId = dict["third_part_department_id"] as! String
        }
        if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
            self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
        }
        if dict.keys.contains("third_part_project_id") && dict["third_part_project_id"] != nil {
            self.thirdPartProjectId = dict["third_part_project_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class BtripBillInfoAdjustResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class BtripBillInfoAdjustResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BtripBillInfoAdjustResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = BtripBillInfoAdjustResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarApplyAddHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CarApplyAddRequest : Tea.TeaModel {
    public class TravelerStandard : Tea.TeaModel {
        public class CarCitySet : Tea.TeaModel {
            public var cityCode: String?

            public var cityName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
            }
        }
        public var carCitySet: [CarApplyAddRequest.TravelerStandard.CarCitySet]?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.carCitySet != nil {
                var tmp : [Any] = []
                for k in self.carCitySet! {
                    tmp.append(k.toMap())
                }
                map["car_city_set"] = tmp
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("car_city_set") && dict["car_city_set"] != nil {
                var tmp : [CarApplyAddRequest.TravelerStandard.CarCitySet] = []
                for v in dict["car_city_set"] as! [Any] {
                    var model = CarApplyAddRequest.TravelerStandard.CarCitySet()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.carCitySet = tmp
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var cause: String?

    public var city: String?

    public var cityCodeSet: String?

    public var date: String?

    public var finishedDate: String?

    public var projectCode: String?

    public var projectName: String?

    public var status: Int32?

    public var thirdPartApplyId: String?

    public var thirdPartCostCenterId: String?

    public var thirdPartInvoiceId: String?

    public var timesTotal: Int32?

    public var timesType: Int32?

    public var timesUsed: Int32?

    public var title: String?

    public var travelerStandard: [CarApplyAddRequest.TravelerStandard]?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cause != nil {
            map["cause"] = self.cause!
        }
        if self.city != nil {
            map["city"] = self.city!
        }
        if self.cityCodeSet != nil {
            map["city_code_set"] = self.cityCodeSet!
        }
        if self.date != nil {
            map["date"] = self.date!
        }
        if self.finishedDate != nil {
            map["finished_date"] = self.finishedDate!
        }
        if self.projectCode != nil {
            map["project_code"] = self.projectCode!
        }
        if self.projectName != nil {
            map["project_name"] = self.projectName!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.thirdPartApplyId != nil {
            map["third_part_apply_id"] = self.thirdPartApplyId!
        }
        if self.thirdPartCostCenterId != nil {
            map["third_part_cost_center_id"] = self.thirdPartCostCenterId!
        }
        if self.thirdPartInvoiceId != nil {
            map["third_part_invoice_id"] = self.thirdPartInvoiceId!
        }
        if self.timesTotal != nil {
            map["times_total"] = self.timesTotal!
        }
        if self.timesType != nil {
            map["times_type"] = self.timesType!
        }
        if self.timesUsed != nil {
            map["times_used"] = self.timesUsed!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.travelerStandard != nil {
            var tmp : [Any] = []
            for k in self.travelerStandard! {
                tmp.append(k.toMap())
            }
            map["traveler_standard"] = tmp
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cause") && dict["cause"] != nil {
            self.cause = dict["cause"] as! String
        }
        if dict.keys.contains("city") && dict["city"] != nil {
            self.city = dict["city"] as! String
        }
        if dict.keys.contains("city_code_set") && dict["city_code_set"] != nil {
            self.cityCodeSet = dict["city_code_set"] as! String
        }
        if dict.keys.contains("date") && dict["date"] != nil {
            self.date = dict["date"] as! String
        }
        if dict.keys.contains("finished_date") && dict["finished_date"] != nil {
            self.finishedDate = dict["finished_date"] as! String
        }
        if dict.keys.contains("project_code") && dict["project_code"] != nil {
            self.projectCode = dict["project_code"] as! String
        }
        if dict.keys.contains("project_name") && dict["project_name"] != nil {
            self.projectName = dict["project_name"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("third_part_apply_id") && dict["third_part_apply_id"] != nil {
            self.thirdPartApplyId = dict["third_part_apply_id"] as! String
        }
        if dict.keys.contains("third_part_cost_center_id") && dict["third_part_cost_center_id"] != nil {
            self.thirdPartCostCenterId = dict["third_part_cost_center_id"] as! String
        }
        if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
            self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
        }
        if dict.keys.contains("times_total") && dict["times_total"] != nil {
            self.timesTotal = dict["times_total"] as! Int32
        }
        if dict.keys.contains("times_type") && dict["times_type"] != nil {
            self.timesType = dict["times_type"] as! Int32
        }
        if dict.keys.contains("times_used") && dict["times_used"] != nil {
            self.timesUsed = dict["times_used"] as! Int32
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
        if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
            var tmp : [CarApplyAddRequest.TravelerStandard] = []
            for v in dict["traveler_standard"] as! [Any] {
                var model = CarApplyAddRequest.TravelerStandard()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerStandard = tmp
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CarApplyAddShrinkRequest : Tea.TeaModel {
    public var cause: String?

    public var city: String?

    public var cityCodeSet: String?

    public var date: String?

    public var finishedDate: String?

    public var projectCode: String?

    public var projectName: String?

    public var status: Int32?

    public var thirdPartApplyId: String?

    public var thirdPartCostCenterId: String?

    public var thirdPartInvoiceId: String?

    public var timesTotal: Int32?

    public var timesType: Int32?

    public var timesUsed: Int32?

    public var title: String?

    public var travelerStandardShrink: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cause != nil {
            map["cause"] = self.cause!
        }
        if self.city != nil {
            map["city"] = self.city!
        }
        if self.cityCodeSet != nil {
            map["city_code_set"] = self.cityCodeSet!
        }
        if self.date != nil {
            map["date"] = self.date!
        }
        if self.finishedDate != nil {
            map["finished_date"] = self.finishedDate!
        }
        if self.projectCode != nil {
            map["project_code"] = self.projectCode!
        }
        if self.projectName != nil {
            map["project_name"] = self.projectName!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.thirdPartApplyId != nil {
            map["third_part_apply_id"] = self.thirdPartApplyId!
        }
        if self.thirdPartCostCenterId != nil {
            map["third_part_cost_center_id"] = self.thirdPartCostCenterId!
        }
        if self.thirdPartInvoiceId != nil {
            map["third_part_invoice_id"] = self.thirdPartInvoiceId!
        }
        if self.timesTotal != nil {
            map["times_total"] = self.timesTotal!
        }
        if self.timesType != nil {
            map["times_type"] = self.timesType!
        }
        if self.timesUsed != nil {
            map["times_used"] = self.timesUsed!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.travelerStandardShrink != nil {
            map["traveler_standard"] = self.travelerStandardShrink!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cause") && dict["cause"] != nil {
            self.cause = dict["cause"] as! String
        }
        if dict.keys.contains("city") && dict["city"] != nil {
            self.city = dict["city"] as! String
        }
        if dict.keys.contains("city_code_set") && dict["city_code_set"] != nil {
            self.cityCodeSet = dict["city_code_set"] as! String
        }
        if dict.keys.contains("date") && dict["date"] != nil {
            self.date = dict["date"] as! String
        }
        if dict.keys.contains("finished_date") && dict["finished_date"] != nil {
            self.finishedDate = dict["finished_date"] as! String
        }
        if dict.keys.contains("project_code") && dict["project_code"] != nil {
            self.projectCode = dict["project_code"] as! String
        }
        if dict.keys.contains("project_name") && dict["project_name"] != nil {
            self.projectName = dict["project_name"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("third_part_apply_id") && dict["third_part_apply_id"] != nil {
            self.thirdPartApplyId = dict["third_part_apply_id"] as! String
        }
        if dict.keys.contains("third_part_cost_center_id") && dict["third_part_cost_center_id"] != nil {
            self.thirdPartCostCenterId = dict["third_part_cost_center_id"] as! String
        }
        if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
            self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
        }
        if dict.keys.contains("times_total") && dict["times_total"] != nil {
            self.timesTotal = dict["times_total"] as! Int32
        }
        if dict.keys.contains("times_type") && dict["times_type"] != nil {
            self.timesType = dict["times_type"] as! Int32
        }
        if dict.keys.contains("times_used") && dict["times_used"] != nil {
            self.timesUsed = dict["times_used"] as! Int32
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
        if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
            self.travelerStandardShrink = dict["traveler_standard"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CarApplyAddResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Int64?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Int64
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarApplyAddResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarApplyAddResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarApplyAddResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarApplyModifyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CarApplyModifyRequest : Tea.TeaModel {
    public var operateTime: String?

    public var remark: String?

    public var status: Int32?

    public var thirdPartApplyId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operateTime != nil {
            map["operate_time"] = self.operateTime!
        }
        if self.remark != nil {
            map["remark"] = self.remark!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.thirdPartApplyId != nil {
            map["third_part_apply_id"] = self.thirdPartApplyId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("operate_time") && dict["operate_time"] != nil {
            self.operateTime = dict["operate_time"] as! String
        }
        if dict.keys.contains("remark") && dict["remark"] != nil {
            self.remark = dict["remark"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("third_part_apply_id") && dict["third_part_apply_id"] != nil {
            self.thirdPartApplyId = dict["third_part_apply_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CarApplyModifyResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarApplyModifyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarApplyModifyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarApplyModifyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarApplyQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CarApplyQueryRequest : Tea.TeaModel {
    public var createdEndAt: String?

    public var createdStartAt: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var thirdPartApplyId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createdEndAt != nil {
            map["created_end_at"] = self.createdEndAt!
        }
        if self.createdStartAt != nil {
            map["created_start_at"] = self.createdStartAt!
        }
        if self.pageNumber != nil {
            map["page_number"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.thirdPartApplyId != nil {
            map["third_part_apply_id"] = self.thirdPartApplyId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("created_end_at") && dict["created_end_at"] != nil {
            self.createdEndAt = dict["created_end_at"] as! String
        }
        if dict.keys.contains("created_start_at") && dict["created_start_at"] != nil {
            self.createdStartAt = dict["created_start_at"] as! String
        }
        if dict.keys.contains("page_number") && dict["page_number"] != nil {
            self.pageNumber = dict["page_number"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("third_part_apply_id") && dict["third_part_apply_id"] != nil {
            self.thirdPartApplyId = dict["third_part_apply_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CarApplyQueryResponseBody : Tea.TeaModel {
    public class ApplyList : Tea.TeaModel {
        public class ApproverList : Tea.TeaModel {
            public var note: String?

            public var operateTime: String?

            public var order: Int32?

            public var status: Int32?

            public var statusDesc: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.note != nil {
                    map["note"] = self.note!
                }
                if self.operateTime != nil {
                    map["operate_time"] = self.operateTime!
                }
                if self.order != nil {
                    map["order"] = self.order!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.statusDesc != nil {
                    map["status_desc"] = self.statusDesc!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("note") && dict["note"] != nil {
                    self.note = dict["note"] as! String
                }
                if dict.keys.contains("operate_time") && dict["operate_time"] != nil {
                    self.operateTime = dict["operate_time"] as! String
                }
                if dict.keys.contains("order") && dict["order"] != nil {
                    self.order = dict["order"] as! Int32
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("status_desc") && dict["status_desc"] != nil {
                    self.statusDesc = dict["status_desc"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class ItineraryList : Tea.TeaModel {
            public var arrCity: String?

            public var arrCityCode: String?

            public var arrDate: String?

            public var costCenterId: Int64?

            public var costCenterName: String?

            public var depCity: String?

            public var depCityCode: String?

            public var depDate: String?

            public var invoiceId: Int64?

            public var invoiceName: String?

            public var itineraryId: String?

            public var projectCode: String?

            public var projectTitle: String?

            public var trafficType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.costCenterId != nil {
                    map["cost_center_id"] = self.costCenterId!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.invoiceId != nil {
                    map["invoice_id"] = self.invoiceId!
                }
                if self.invoiceName != nil {
                    map["invoice_name"] = self.invoiceName!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.trafficType != nil {
                    map["traffic_type"] = self.trafficType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                    self.costCenterId = dict["cost_center_id"] as! Int64
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("invoice_id") && dict["invoice_id"] != nil {
                    self.invoiceId = dict["invoice_id"] as! Int64
                }
                if dict.keys.contains("invoice_name") && dict["invoice_name"] != nil {
                    self.invoiceName = dict["invoice_name"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("traffic_type") && dict["traffic_type"] != nil {
                    self.trafficType = dict["traffic_type"] as! Int32
                }
            }
        }
        public class TravelerStandard : Tea.TeaModel {
            public class CarCitySet : Tea.TeaModel {
                public var cityCode: String?

                public var cityName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                }
            }
            public var carCitySet: [CarApplyQueryResponseBody.ApplyList.TravelerStandard.CarCitySet]?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.carCitySet != nil {
                    var tmp : [Any] = []
                    for k in self.carCitySet! {
                        tmp.append(k.toMap())
                    }
                    map["car_city_set"] = tmp
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("car_city_set") && dict["car_city_set"] != nil {
                    var tmp : [CarApplyQueryResponseBody.ApplyList.TravelerStandard.CarCitySet] = []
                    for v in dict["car_city_set"] as! [Any] {
                        var model = CarApplyQueryResponseBody.ApplyList.TravelerStandard.CarCitySet()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.carCitySet = tmp
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public var approverList: [CarApplyQueryResponseBody.ApplyList.ApproverList]?

        public var departId: String?

        public var departName: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var itineraryList: [CarApplyQueryResponseBody.ApplyList.ItineraryList]?

        public var status: Int32?

        public var statusDesc: String?

        public var thirdpartId: String?

        public var travelerStandard: [CarApplyQueryResponseBody.ApplyList.TravelerStandard]?

        public var tripCause: String?

        public var tripTitle: String?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.approverList != nil {
                var tmp : [Any] = []
                for k in self.approverList! {
                    tmp.append(k.toMap())
                }
                map["approver_list"] = tmp
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.itineraryList != nil {
                var tmp : [Any] = []
                for k in self.itineraryList! {
                    tmp.append(k.toMap())
                }
                map["itinerary_list"] = tmp
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.statusDesc != nil {
                map["status_desc"] = self.statusDesc!
            }
            if self.thirdpartId != nil {
                map["thirdpart_id"] = self.thirdpartId!
            }
            if self.travelerStandard != nil {
                var tmp : [Any] = []
                for k in self.travelerStandard! {
                    tmp.append(k.toMap())
                }
                map["traveler_standard"] = tmp
            }
            if self.tripCause != nil {
                map["trip_cause"] = self.tripCause!
            }
            if self.tripTitle != nil {
                map["trip_title"] = self.tripTitle!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("approver_list") && dict["approver_list"] != nil {
                var tmp : [CarApplyQueryResponseBody.ApplyList.ApproverList] = []
                for v in dict["approver_list"] as! [Any] {
                    var model = CarApplyQueryResponseBody.ApplyList.ApproverList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.approverList = tmp
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! String
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("itinerary_list") && dict["itinerary_list"] != nil {
                var tmp : [CarApplyQueryResponseBody.ApplyList.ItineraryList] = []
                for v in dict["itinerary_list"] as! [Any] {
                    var model = CarApplyQueryResponseBody.ApplyList.ItineraryList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itineraryList = tmp
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("status_desc") && dict["status_desc"] != nil {
                self.statusDesc = dict["status_desc"] as! String
            }
            if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
                self.thirdpartId = dict["thirdpart_id"] as! String
            }
            if dict.keys.contains("traveler_standard") && dict["traveler_standard"] != nil {
                var tmp : [CarApplyQueryResponseBody.ApplyList.TravelerStandard] = []
                for v in dict["traveler_standard"] as! [Any] {
                    var model = CarApplyQueryResponseBody.ApplyList.TravelerStandard()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerStandard = tmp
            }
            if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
                self.tripCause = dict["trip_cause"] as! String
            }
            if dict.keys.contains("trip_title") && dict["trip_title"] != nil {
                self.tripTitle = dict["trip_title"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public var applyList: [CarApplyQueryResponseBody.ApplyList]?

    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var total: Int32?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyList != nil {
            var tmp : [Any] = []
            for k in self.applyList! {
                tmp.append(k.toMap())
            }
            map["apply_list"] = tmp
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.total != nil {
            map["total"] = self.total!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_list") && dict["apply_list"] != nil {
            var tmp : [CarApplyQueryResponseBody.ApplyList] = []
            for v in dict["apply_list"] as! [Any] {
                var model = CarApplyQueryResponseBody.ApplyList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.applyList = tmp
        }
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("total") && dict["total"] != nil {
            self.total = dict["total"] as! Int32
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarApplyQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarApplyQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarApplyQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CarBillSettlementQueryRequest : Tea.TeaModel {
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class CarBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrDate: String?

            public var arrLocation: String?

            public var arrTime: String?

            public var billRecordTime: String?

            public var bookModel: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var businessCategory: String?

            public var capitalDirection: String?

            public var carLevel: String?

            public var cascadeDepartment: String?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var coupon: Double?

            public var couponPrice: Double?

            public var depCityCode: String?

            public var department: String?

            public var departmentId: String?

            public var deptCity: String?

            public var deptDate: String?

            public var deptLocation: String?

            public var deptTime: String?

            public var driverAddDetail: String?

            public var driverAddFee: Double?

            public var estimateDriveDistance: String?

            public var estimatePrice: Double?

            public var feeType: String?

            public var index: String?

            public var invoiceTitle: String?

            public var levelName: String?

            public var memo: String?

            public var orderId: String?

            public var orderPrice: Double?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var personSettleFee: Double?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var providerName: String?

            public var realDriveDistance: String?

            public var realFromAddr: String?

            public var realToAddr: String?

            public var remark: String?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var specialOrder: String?

            public var specialReason: String?

            public var status: Int32?

            public var subOrderId: String?

            public var supplementApplyId: String?

            public var taxRate: String?

            public var thirdItineraryId: String?

            public var timeType: String?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberTypeName: String?

            public var travelerName: String?

            public var userConfirmDesc: String?

            public var voucherType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.arrLocation != nil {
                    map["arr_location"] = self.arrLocation!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookModel != nil {
                    map["book_model"] = self.bookModel!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.businessCategory != nil {
                    map["business_category"] = self.businessCategory!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.carLevel != nil {
                    map["car_level"] = self.carLevel!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.coupon != nil {
                    map["coupon"] = self.coupon!
                }
                if self.couponPrice != nil {
                    map["coupon_price"] = self.couponPrice!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.deptCity != nil {
                    map["dept_city"] = self.deptCity!
                }
                if self.deptDate != nil {
                    map["dept_date"] = self.deptDate!
                }
                if self.deptLocation != nil {
                    map["dept_location"] = self.deptLocation!
                }
                if self.deptTime != nil {
                    map["dept_time"] = self.deptTime!
                }
                if self.driverAddDetail != nil {
                    map["driver_add_detail"] = self.driverAddDetail!
                }
                if self.driverAddFee != nil {
                    map["driver_add_fee"] = self.driverAddFee!
                }
                if self.estimateDriveDistance != nil {
                    map["estimate_drive_distance"] = self.estimateDriveDistance!
                }
                if self.estimatePrice != nil {
                    map["estimate_price"] = self.estimatePrice!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.levelName != nil {
                    map["level_name"] = self.levelName!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderPrice != nil {
                    map["order_price"] = self.orderPrice!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.personSettleFee != nil {
                    map["person_settle_fee"] = self.personSettleFee!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.providerName != nil {
                    map["provider_name"] = self.providerName!
                }
                if self.realDriveDistance != nil {
                    map["real_drive_distance"] = self.realDriveDistance!
                }
                if self.realFromAddr != nil {
                    map["real_from_addr"] = self.realFromAddr!
                }
                if self.realToAddr != nil {
                    map["real_to_addr"] = self.realToAddr!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.specialOrder != nil {
                    map["special_order"] = self.specialOrder!
                }
                if self.specialReason != nil {
                    map["special_reason"] = self.specialReason!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subOrderId != nil {
                    map["sub_order_id"] = self.subOrderId!
                }
                if self.supplementApplyId != nil {
                    map["supplement_apply_id"] = self.supplementApplyId!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.timeType != nil {
                    map["time_type"] = self.timeType!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberTypeName != nil {
                    map["traveler_member_type_name"] = self.travelerMemberTypeName!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.userConfirmDesc != nil {
                    map["user_confirm_desc"] = self.userConfirmDesc!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("arr_location") && dict["arr_location"] != nil {
                    self.arrLocation = dict["arr_location"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_model") && dict["book_model"] != nil {
                    self.bookModel = dict["book_model"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("business_category") && dict["business_category"] != nil {
                    self.businessCategory = dict["business_category"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("car_level") && dict["car_level"] != nil {
                    self.carLevel = dict["car_level"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("coupon") && dict["coupon"] != nil {
                    self.coupon = dict["coupon"] as! Double
                }
                if dict.keys.contains("coupon_price") && dict["coupon_price"] != nil {
                    self.couponPrice = dict["coupon_price"] as! Double
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("dept_city") && dict["dept_city"] != nil {
                    self.deptCity = dict["dept_city"] as! String
                }
                if dict.keys.contains("dept_date") && dict["dept_date"] != nil {
                    self.deptDate = dict["dept_date"] as! String
                }
                if dict.keys.contains("dept_location") && dict["dept_location"] != nil {
                    self.deptLocation = dict["dept_location"] as! String
                }
                if dict.keys.contains("dept_time") && dict["dept_time"] != nil {
                    self.deptTime = dict["dept_time"] as! String
                }
                if dict.keys.contains("driver_add_detail") && dict["driver_add_detail"] != nil {
                    self.driverAddDetail = dict["driver_add_detail"] as! String
                }
                if dict.keys.contains("driver_add_fee") && dict["driver_add_fee"] != nil {
                    self.driverAddFee = dict["driver_add_fee"] as! Double
                }
                if dict.keys.contains("estimate_drive_distance") && dict["estimate_drive_distance"] != nil {
                    self.estimateDriveDistance = dict["estimate_drive_distance"] as! String
                }
                if dict.keys.contains("estimate_price") && dict["estimate_price"] != nil {
                    self.estimatePrice = dict["estimate_price"] as! Double
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("level_name") && dict["level_name"] != nil {
                    self.levelName = dict["level_name"] as! String
                }
                if dict.keys.contains("memo") && dict["memo"] != nil {
                    self.memo = dict["memo"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_price") && dict["order_price"] != nil {
                    self.orderPrice = dict["order_price"] as! Double
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("person_settle_fee") && dict["person_settle_fee"] != nil {
                    self.personSettleFee = dict["person_settle_fee"] as! Double
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("provider_name") && dict["provider_name"] != nil {
                    self.providerName = dict["provider_name"] as! String
                }
                if dict.keys.contains("real_drive_distance") && dict["real_drive_distance"] != nil {
                    self.realDriveDistance = dict["real_drive_distance"] as! String
                }
                if dict.keys.contains("real_from_addr") && dict["real_from_addr"] != nil {
                    self.realFromAddr = dict["real_from_addr"] as! String
                }
                if dict.keys.contains("real_to_addr") && dict["real_to_addr"] != nil {
                    self.realToAddr = dict["real_to_addr"] as! String
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("special_order") && dict["special_order"] != nil {
                    self.specialOrder = dict["special_order"] as! String
                }
                if dict.keys.contains("special_reason") && dict["special_reason"] != nil {
                    self.specialReason = dict["special_reason"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                    self.subOrderId = dict["sub_order_id"] as! String
                }
                if dict.keys.contains("supplement_apply_id") && dict["supplement_apply_id"] != nil {
                    self.supplementApplyId = dict["supplement_apply_id"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                    self.timeType = dict["time_type"] as! String
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type_name") && dict["traveler_member_type_name"] != nil {
                    self.travelerMemberTypeName = dict["traveler_member_type_name"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("user_confirm_desc") && dict["user_confirm_desc"] != nil {
                    self.userConfirmDesc = dict["user_confirm_desc"] as! String
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var dataList: [CarBillSettlementQueryResponseBody.Module.DataList]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["data_list"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalNum != nil {
                map["total_num"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("data_list") && dict["data_list"] != nil {
                var tmp : [CarBillSettlementQueryResponseBody.Module.DataList] = []
                for v in dict["data_list"] as! [Any] {
                    var model = CarBillSettlementQueryResponseBody.Module.DataList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.dataList = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_num") && dict["total_num"] != nil {
                self.totalNum = dict["total_num"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CarBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CarBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarOrderListQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CarOrderListQueryRequest : Tea.TeaModel {
    public var allApply: Bool?

    public var applyId: Int64?

    public var departId: String?

    public var endTime: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var thirdpartApplyId: String?

    public var updateEndTime: String?

    public var updateStartTime: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allApply != nil {
            map["all_apply"] = self.allApply!
        }
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.page != nil {
            map["page"] = self.page!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.updateEndTime != nil {
            map["update_end_time"] = self.updateEndTime!
        }
        if self.updateStartTime != nil {
            map["update_start_time"] = self.updateStartTime!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_apply") && dict["all_apply"] != nil {
            self.allApply = dict["all_apply"] as! Bool
        }
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! String
        }
        if dict.keys.contains("page") && dict["page"] != nil {
            self.page = dict["page"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("update_end_time") && dict["update_end_time"] != nil {
            self.updateEndTime = dict["update_end_time"] as! String
        }
        if dict.keys.contains("update_start_time") && dict["update_start_time"] != nil {
            self.updateStartTime = dict["update_start_time"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CarOrderListQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var categoryType: Int32?

            public var gmtCreate: String?

            public var passengerName: String?

            public var payType: Int32?

            public var personPrice: Double?

            public var price: Double?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.categoryType != nil {
                    map["category_type"] = self.categoryType!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.personPrice != nil {
                    map["person_price"] = self.personPrice!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("category_type") && dict["category_type"] != nil {
                    self.categoryType = dict["category_type"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("person_price") && dict["person_price"] != nil {
                    self.personPrice = dict["person_price"] as! Double
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class UserAffiliateList : Tea.TeaModel {
            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public var applyId: Int64?

        public var applyShowId: String?

        public var btripTitle: String?

        public var businessCategory: String?

        public var cancelTime: String?

        public var carInfo: String?

        public var carLevel: Int32?

        public var corpId: String?

        public var corpName: String?

        public var costCenterId: Int64?

        public var costCenterName: String?

        public var costCenterNumber: String?

        public var deptId: Int64?

        public var deptName: String?

        public var driverConfirmTime: String?

        public var estimatePrice: Double?

        public var fromAddress: String?

        public var fromCityAdCode: String?

        public var fromCityName: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var invoiceId: Int64?

        public var invoiceTitle: String?

        public var isSpecial: Bool?

        public var memo: String?

        public var orderStatus: Int32?

        public var passengerName: String?

        public var payTime: String?

        public var priceInfoList: [CarOrderListQueryResponseBody.Module.PriceInfoList]?

        public var projectCode: String?

        public var projectId: Int64?

        public var projectTitle: String?

        public var provider: Int32?

        public var publishTime: String?

        public var realFromAddress: String?

        public var realFromCityAdCode: String?

        public var realFromCityName: String?

        public var realToAddress: String?

        public var realToCityAdCode: String?

        public var realToCityName: String?

        public var serviceType: Int32?

        public var specialTypes: [String]?

        public var takenTime: String?

        public var thirdpartApplyId: String?

        public var thirdpartItineraryId: String?

        public var toAddress: String?

        public var toCityAdCode: String?

        public var toCityName: String?

        public var travelDistance: Double?

        public var userAffiliateList: [CarOrderListQueryResponseBody.Module.UserAffiliateList]?

        public var userConfirm: Int32?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.applyShowId != nil {
                map["apply_show_id"] = self.applyShowId!
            }
            if self.btripTitle != nil {
                map["btrip_title"] = self.btripTitle!
            }
            if self.businessCategory != nil {
                map["business_category"] = self.businessCategory!
            }
            if self.cancelTime != nil {
                map["cancel_time"] = self.cancelTime!
            }
            if self.carInfo != nil {
                map["car_info"] = self.carInfo!
            }
            if self.carLevel != nil {
                map["car_level"] = self.carLevel!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.corpName != nil {
                map["corp_name"] = self.corpName!
            }
            if self.costCenterId != nil {
                map["cost_center_id"] = self.costCenterId!
            }
            if self.costCenterName != nil {
                map["cost_center_name"] = self.costCenterName!
            }
            if self.costCenterNumber != nil {
                map["cost_center_number"] = self.costCenterNumber!
            }
            if self.deptId != nil {
                map["dept_id"] = self.deptId!
            }
            if self.deptName != nil {
                map["dept_name"] = self.deptName!
            }
            if self.driverConfirmTime != nil {
                map["driver_confirm_time"] = self.driverConfirmTime!
            }
            if self.estimatePrice != nil {
                map["estimate_price"] = self.estimatePrice!
            }
            if self.fromAddress != nil {
                map["from_address"] = self.fromAddress!
            }
            if self.fromCityAdCode != nil {
                map["from_city_ad_code"] = self.fromCityAdCode!
            }
            if self.fromCityName != nil {
                map["from_city_name"] = self.fromCityName!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.invoiceId != nil {
                map["invoice_id"] = self.invoiceId!
            }
            if self.invoiceTitle != nil {
                map["invoice_title"] = self.invoiceTitle!
            }
            if self.isSpecial != nil {
                map["is_special"] = self.isSpecial!
            }
            if self.memo != nil {
                map["memo"] = self.memo!
            }
            if self.orderStatus != nil {
                map["order_status"] = self.orderStatus!
            }
            if self.passengerName != nil {
                map["passenger_name"] = self.passengerName!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectId != nil {
                map["project_id"] = self.projectId!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.provider != nil {
                map["provider"] = self.provider!
            }
            if self.publishTime != nil {
                map["publish_time"] = self.publishTime!
            }
            if self.realFromAddress != nil {
                map["real_from_address"] = self.realFromAddress!
            }
            if self.realFromCityAdCode != nil {
                map["real_from_city_ad_code"] = self.realFromCityAdCode!
            }
            if self.realFromCityName != nil {
                map["real_from_city_name"] = self.realFromCityName!
            }
            if self.realToAddress != nil {
                map["real_to_address"] = self.realToAddress!
            }
            if self.realToCityAdCode != nil {
                map["real_to_city_ad_code"] = self.realToCityAdCode!
            }
            if self.realToCityName != nil {
                map["real_to_city_name"] = self.realToCityName!
            }
            if self.serviceType != nil {
                map["service_type"] = self.serviceType!
            }
            if self.specialTypes != nil {
                map["special_types"] = self.specialTypes!
            }
            if self.takenTime != nil {
                map["taken_time"] = self.takenTime!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartItineraryId != nil {
                map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
            }
            if self.toAddress != nil {
                map["to_address"] = self.toAddress!
            }
            if self.toCityAdCode != nil {
                map["to_city_ad_code"] = self.toCityAdCode!
            }
            if self.toCityName != nil {
                map["to_city_name"] = self.toCityName!
            }
            if self.travelDistance != nil {
                map["travel_distance"] = self.travelDistance!
            }
            if self.userAffiliateList != nil {
                var tmp : [Any] = []
                for k in self.userAffiliateList! {
                    tmp.append(k.toMap())
                }
                map["user_affiliate_list"] = tmp
            }
            if self.userConfirm != nil {
                map["user_confirm"] = self.userConfirm!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("apply_show_id") && dict["apply_show_id"] != nil {
                self.applyShowId = dict["apply_show_id"] as! String
            }
            if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                self.btripTitle = dict["btrip_title"] as! String
            }
            if dict.keys.contains("business_category") && dict["business_category"] != nil {
                self.businessCategory = dict["business_category"] as! String
            }
            if dict.keys.contains("cancel_time") && dict["cancel_time"] != nil {
                self.cancelTime = dict["cancel_time"] as! String
            }
            if dict.keys.contains("car_info") && dict["car_info"] != nil {
                self.carInfo = dict["car_info"] as! String
            }
            if dict.keys.contains("car_level") && dict["car_level"] != nil {
                self.carLevel = dict["car_level"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                self.corpName = dict["corp_name"] as! String
            }
            if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                self.costCenterId = dict["cost_center_id"] as! Int64
            }
            if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                self.costCenterName = dict["cost_center_name"] as! String
            }
            if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                self.costCenterNumber = dict["cost_center_number"] as! String
            }
            if dict.keys.contains("dept_id") && dict["dept_id"] != nil {
                self.deptId = dict["dept_id"] as! Int64
            }
            if dict.keys.contains("dept_name") && dict["dept_name"] != nil {
                self.deptName = dict["dept_name"] as! String
            }
            if dict.keys.contains("driver_confirm_time") && dict["driver_confirm_time"] != nil {
                self.driverConfirmTime = dict["driver_confirm_time"] as! String
            }
            if dict.keys.contains("estimate_price") && dict["estimate_price"] != nil {
                self.estimatePrice = dict["estimate_price"] as! Double
            }
            if dict.keys.contains("from_address") && dict["from_address"] != nil {
                self.fromAddress = dict["from_address"] as! String
            }
            if dict.keys.contains("from_city_ad_code") && dict["from_city_ad_code"] != nil {
                self.fromCityAdCode = dict["from_city_ad_code"] as! String
            }
            if dict.keys.contains("from_city_name") && dict["from_city_name"] != nil {
                self.fromCityName = dict["from_city_name"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("invoice_id") && dict["invoice_id"] != nil {
                self.invoiceId = dict["invoice_id"] as! Int64
            }
            if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                self.invoiceTitle = dict["invoice_title"] as! String
            }
            if dict.keys.contains("is_special") && dict["is_special"] != nil {
                self.isSpecial = dict["is_special"] as! Bool
            }
            if dict.keys.contains("memo") && dict["memo"] != nil {
                self.memo = dict["memo"] as! String
            }
            if dict.keys.contains("order_status") && dict["order_status"] != nil {
                self.orderStatus = dict["order_status"] as! Int32
            }
            if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                self.passengerName = dict["passenger_name"] as! String
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [CarOrderListQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = CarOrderListQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_id") && dict["project_id"] != nil {
                self.projectId = dict["project_id"] as! Int64
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("provider") && dict["provider"] != nil {
                self.provider = dict["provider"] as! Int32
            }
            if dict.keys.contains("publish_time") && dict["publish_time"] != nil {
                self.publishTime = dict["publish_time"] as! String
            }
            if dict.keys.contains("real_from_address") && dict["real_from_address"] != nil {
                self.realFromAddress = dict["real_from_address"] as! String
            }
            if dict.keys.contains("real_from_city_ad_code") && dict["real_from_city_ad_code"] != nil {
                self.realFromCityAdCode = dict["real_from_city_ad_code"] as! String
            }
            if dict.keys.contains("real_from_city_name") && dict["real_from_city_name"] != nil {
                self.realFromCityName = dict["real_from_city_name"] as! String
            }
            if dict.keys.contains("real_to_address") && dict["real_to_address"] != nil {
                self.realToAddress = dict["real_to_address"] as! String
            }
            if dict.keys.contains("real_to_city_ad_code") && dict["real_to_city_ad_code"] != nil {
                self.realToCityAdCode = dict["real_to_city_ad_code"] as! String
            }
            if dict.keys.contains("real_to_city_name") && dict["real_to_city_name"] != nil {
                self.realToCityName = dict["real_to_city_name"] as! String
            }
            if dict.keys.contains("service_type") && dict["service_type"] != nil {
                self.serviceType = dict["service_type"] as! Int32
            }
            if dict.keys.contains("special_types") && dict["special_types"] != nil {
                self.specialTypes = dict["special_types"] as! [String]
            }
            if dict.keys.contains("taken_time") && dict["taken_time"] != nil {
                self.takenTime = dict["taken_time"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
            }
            if dict.keys.contains("to_address") && dict["to_address"] != nil {
                self.toAddress = dict["to_address"] as! String
            }
            if dict.keys.contains("to_city_ad_code") && dict["to_city_ad_code"] != nil {
                self.toCityAdCode = dict["to_city_ad_code"] as! String
            }
            if dict.keys.contains("to_city_name") && dict["to_city_name"] != nil {
                self.toCityName = dict["to_city_name"] as! String
            }
            if dict.keys.contains("travel_distance") && dict["travel_distance"] != nil {
                self.travelDistance = dict["travel_distance"] as! Double
            }
            if dict.keys.contains("user_affiliate_list") && dict["user_affiliate_list"] != nil {
                var tmp : [CarOrderListQueryResponseBody.Module.UserAffiliateList] = []
                for v in dict["user_affiliate_list"] as! [Any] {
                    var model = CarOrderListQueryResponseBody.Module.UserAffiliateList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.userAffiliateList = tmp
            }
            if dict.keys.contains("user_confirm") && dict["user_confirm"] != nil {
                self.userConfirm = dict["user_confirm"] as! Int32
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public class PageInfo : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var totalNumber: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["page"] = self.page!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalNumber != nil {
                map["total_number"] = self.totalNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("page") && dict["page"] != nil {
                self.page = dict["page"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_number") && dict["total_number"] != nil {
                self.totalNumber = dict["total_number"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [CarOrderListQueryResponseBody.Module]?

    public var pageInfo: CarOrderListQueryResponseBody.PageInfo?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.pageInfo != nil {
            map["page_info"] = self.pageInfo?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [CarOrderListQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = CarOrderListQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("page_info") && dict["page_info"] != nil {
            var model = CarOrderListQueryResponseBody.PageInfo()
            model.fromMap(dict["page_info"] as! [String: Any])
            self.pageInfo = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarOrderListQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarOrderListQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarOrderListQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarOrderQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CarOrderQueryRequest : Tea.TeaModel {
    public var orderId: Int64?

    public var subOrderId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.subOrderId != nil {
            map["sub_order_id"] = self.subOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
            self.subOrderId = dict["sub_order_id"] as! Int64
        }
    }
}

public class CarOrderQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class CarInfo : Tea.TeaModel {
            public var businessCategory: String?

            public var cancelTime: Int64?

            public var carInfo: String?

            public var carLevel: Int32?

            public var driverCard: String?

            public var driverConfirmTime: Int64?

            public var driverName: String?

            public var estimatePrice: Int64?

            public var fromAddress: String?

            public var fromCityAdCode: String?

            public var fromCityName: String?

            public var isSpecial: Bool?

            public var memo: String?

            public var payTime: Int64?

            public var publishTime: Int64?

            public var realFromAddress: String?

            public var realFromCityAdCode: String?

            public var realFromCityName: String?

            public var realToAddress: String?

            public var realToCityAdCode: String?

            public var realToCityName: String?

            public var serviceType: Int32?

            public var specialTypes: String?

            public var takenTime: Int64?

            public var toAddress: String?

            public var toCityAdCode: String?

            public var toCityName: String?

            public var travelDistance: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.businessCategory != nil {
                    map["business_category"] = self.businessCategory!
                }
                if self.cancelTime != nil {
                    map["cancel_time"] = self.cancelTime!
                }
                if self.carInfo != nil {
                    map["car_info"] = self.carInfo!
                }
                if self.carLevel != nil {
                    map["car_level"] = self.carLevel!
                }
                if self.driverCard != nil {
                    map["driver_card"] = self.driverCard!
                }
                if self.driverConfirmTime != nil {
                    map["driver_confirm_time"] = self.driverConfirmTime!
                }
                if self.driverName != nil {
                    map["driver_name"] = self.driverName!
                }
                if self.estimatePrice != nil {
                    map["estimate_price"] = self.estimatePrice!
                }
                if self.fromAddress != nil {
                    map["from_address"] = self.fromAddress!
                }
                if self.fromCityAdCode != nil {
                    map["from_city_ad_code"] = self.fromCityAdCode!
                }
                if self.fromCityName != nil {
                    map["from_city_name"] = self.fromCityName!
                }
                if self.isSpecial != nil {
                    map["is_special"] = self.isSpecial!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.payTime != nil {
                    map["pay_time"] = self.payTime!
                }
                if self.publishTime != nil {
                    map["publish_time"] = self.publishTime!
                }
                if self.realFromAddress != nil {
                    map["real_from_address"] = self.realFromAddress!
                }
                if self.realFromCityAdCode != nil {
                    map["real_from_city_ad_code"] = self.realFromCityAdCode!
                }
                if self.realFromCityName != nil {
                    map["real_from_city_name"] = self.realFromCityName!
                }
                if self.realToAddress != nil {
                    map["real_to_address"] = self.realToAddress!
                }
                if self.realToCityAdCode != nil {
                    map["real_to_city_ad_code"] = self.realToCityAdCode!
                }
                if self.realToCityName != nil {
                    map["real_to_city_name"] = self.realToCityName!
                }
                if self.serviceType != nil {
                    map["service_type"] = self.serviceType!
                }
                if self.specialTypes != nil {
                    map["special_types"] = self.specialTypes!
                }
                if self.takenTime != nil {
                    map["taken_time"] = self.takenTime!
                }
                if self.toAddress != nil {
                    map["to_address"] = self.toAddress!
                }
                if self.toCityAdCode != nil {
                    map["to_city_ad_code"] = self.toCityAdCode!
                }
                if self.toCityName != nil {
                    map["to_city_name"] = self.toCityName!
                }
                if self.travelDistance != nil {
                    map["travel_distance"] = self.travelDistance!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("business_category") && dict["business_category"] != nil {
                    self.businessCategory = dict["business_category"] as! String
                }
                if dict.keys.contains("cancel_time") && dict["cancel_time"] != nil {
                    self.cancelTime = dict["cancel_time"] as! Int64
                }
                if dict.keys.contains("car_info") && dict["car_info"] != nil {
                    self.carInfo = dict["car_info"] as! String
                }
                if dict.keys.contains("car_level") && dict["car_level"] != nil {
                    self.carLevel = dict["car_level"] as! Int32
                }
                if dict.keys.contains("driver_card") && dict["driver_card"] != nil {
                    self.driverCard = dict["driver_card"] as! String
                }
                if dict.keys.contains("driver_confirm_time") && dict["driver_confirm_time"] != nil {
                    self.driverConfirmTime = dict["driver_confirm_time"] as! Int64
                }
                if dict.keys.contains("driver_name") && dict["driver_name"] != nil {
                    self.driverName = dict["driver_name"] as! String
                }
                if dict.keys.contains("estimate_price") && dict["estimate_price"] != nil {
                    self.estimatePrice = dict["estimate_price"] as! Int64
                }
                if dict.keys.contains("from_address") && dict["from_address"] != nil {
                    self.fromAddress = dict["from_address"] as! String
                }
                if dict.keys.contains("from_city_ad_code") && dict["from_city_ad_code"] != nil {
                    self.fromCityAdCode = dict["from_city_ad_code"] as! String
                }
                if dict.keys.contains("from_city_name") && dict["from_city_name"] != nil {
                    self.fromCityName = dict["from_city_name"] as! String
                }
                if dict.keys.contains("is_special") && dict["is_special"] != nil {
                    self.isSpecial = dict["is_special"] as! Bool
                }
                if dict.keys.contains("memo") && dict["memo"] != nil {
                    self.memo = dict["memo"] as! String
                }
                if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                    self.payTime = dict["pay_time"] as! Int64
                }
                if dict.keys.contains("publish_time") && dict["publish_time"] != nil {
                    self.publishTime = dict["publish_time"] as! Int64
                }
                if dict.keys.contains("real_from_address") && dict["real_from_address"] != nil {
                    self.realFromAddress = dict["real_from_address"] as! String
                }
                if dict.keys.contains("real_from_city_ad_code") && dict["real_from_city_ad_code"] != nil {
                    self.realFromCityAdCode = dict["real_from_city_ad_code"] as! String
                }
                if dict.keys.contains("real_from_city_name") && dict["real_from_city_name"] != nil {
                    self.realFromCityName = dict["real_from_city_name"] as! String
                }
                if dict.keys.contains("real_to_address") && dict["real_to_address"] != nil {
                    self.realToAddress = dict["real_to_address"] as! String
                }
                if dict.keys.contains("real_to_city_ad_code") && dict["real_to_city_ad_code"] != nil {
                    self.realToCityAdCode = dict["real_to_city_ad_code"] as! String
                }
                if dict.keys.contains("real_to_city_name") && dict["real_to_city_name"] != nil {
                    self.realToCityName = dict["real_to_city_name"] as! String
                }
                if dict.keys.contains("service_type") && dict["service_type"] != nil {
                    self.serviceType = dict["service_type"] as! Int32
                }
                if dict.keys.contains("special_types") && dict["special_types"] != nil {
                    self.specialTypes = dict["special_types"] as! String
                }
                if dict.keys.contains("taken_time") && dict["taken_time"] != nil {
                    self.takenTime = dict["taken_time"] as! Int64
                }
                if dict.keys.contains("to_address") && dict["to_address"] != nil {
                    self.toAddress = dict["to_address"] as! String
                }
                if dict.keys.contains("to_city_ad_code") && dict["to_city_ad_code"] != nil {
                    self.toCityAdCode = dict["to_city_ad_code"] as! String
                }
                if dict.keys.contains("to_city_name") && dict["to_city_name"] != nil {
                    self.toCityName = dict["to_city_name"] as! String
                }
                if dict.keys.contains("travel_distance") && dict["travel_distance"] != nil {
                    self.travelDistance = dict["travel_distance"] as! String
                }
            }
        }
        public class InvoiceInfo : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class OrderBaseInfo : Tea.TeaModel {
            public var applyId: String?

            public var btripCause: String?

            public var btripTitle: String?

            public var corpId: String?

            public var corpName: String?

            public var departId: String?

            public var departName: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var itineraryId: String?

            public var orderId: Int64?

            public var orderStatus: Int32?

            public var subOrderId: Int64?

            public var thirdDepartId: String?

            public var thirdpartApplyId: String?

            public var thirdpartItineraryId: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.btripCause != nil {
                    map["btrip_cause"] = self.btripCause!
                }
                if self.btripTitle != nil {
                    map["btrip_title"] = self.btripTitle!
                }
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.departId != nil {
                    map["depart_id"] = self.departId!
                }
                if self.departName != nil {
                    map["depart_name"] = self.departName!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["gmt_modified"] = self.gmtModified!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderStatus != nil {
                    map["order_status"] = self.orderStatus!
                }
                if self.subOrderId != nil {
                    map["sub_order_id"] = self.subOrderId!
                }
                if self.thirdDepartId != nil {
                    map["third_depart_id"] = self.thirdDepartId!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("btrip_cause") && dict["btrip_cause"] != nil {
                    self.btripCause = dict["btrip_cause"] as! String
                }
                if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                    self.btripTitle = dict["btrip_title"] as! String
                }
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                    self.departId = dict["depart_id"] as! String
                }
                if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                    self.departName = dict["depart_name"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! Int64
                }
                if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                    self.gmtModified = dict["gmt_modified"] as! Int64
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("order_status") && dict["order_status"] != nil {
                    self.orderStatus = dict["order_status"] as! Int32
                }
                if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                    self.subOrderId = dict["sub_order_id"] as! Int64
                }
                if dict.keys.contains("third_depart_id") && dict["third_depart_id"] != nil {
                    self.thirdDepartId = dict["third_depart_id"] as! String
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class PassengerList : Tea.TeaModel {
            public var costCenterId: Int64?

            public var costCenterName: String?

            public var costCenterNumber: String?

            public var projectCode: String?

            public var projectId: Int64?

            public var projectTitle: String?

            public var thirdpartCostCenterId: String?

            public var thirdpartProjectId: String?

            public var userId: String?

            public var userName: String?

            public var userType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.costCenterId != nil {
                    map["cost_center_id"] = self.costCenterId!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectId != nil {
                    map["project_id"] = self.projectId!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartCostCenterId != nil {
                    map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
                }
                if self.thirdpartProjectId != nil {
                    map["thirdpart_project_id"] = self.thirdpartProjectId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                if self.userType != nil {
                    map["user_type"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                    self.costCenterId = dict["cost_center_id"] as! Int64
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_id") && dict["project_id"] != nil {
                    self.projectId = dict["project_id"] as! Int64
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                    self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
                }
                if dict.keys.contains("thirdpart_project_id") && dict["thirdpart_project_id"] != nil {
                    self.thirdpartProjectId = dict["thirdpart_project_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
                if dict.keys.contains("user_type") && dict["user_type"] != nil {
                    self.userType = dict["user_type"] as! Int32
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var gmtCreate: Int64?

            public var payType: Int32?

            public var personPrice: Int64?

            public var price: Int64?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.personPrice != nil {
                    map["person_price"] = self.personPrice!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! Int64
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("person_price") && dict["person_price"] != nil {
                    self.personPrice = dict["person_price"] as! Int64
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public var carInfo: CarOrderQueryResponseBody.Module.CarInfo?

        public var invoiceInfo: CarOrderQueryResponseBody.Module.InvoiceInfo?

        public var orderBaseInfo: CarOrderQueryResponseBody.Module.OrderBaseInfo?

        public var passengerList: [CarOrderQueryResponseBody.Module.PassengerList]?

        public var priceInfoList: [CarOrderQueryResponseBody.Module.PriceInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.carInfo?.validate()
            try self.invoiceInfo?.validate()
            try self.orderBaseInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.carInfo != nil {
                map["car_info"] = self.carInfo?.toMap()
            }
            if self.invoiceInfo != nil {
                map["invoice_info"] = self.invoiceInfo?.toMap()
            }
            if self.orderBaseInfo != nil {
                map["order_base_info"] = self.orderBaseInfo?.toMap()
            }
            if self.passengerList != nil {
                var tmp : [Any] = []
                for k in self.passengerList! {
                    tmp.append(k.toMap())
                }
                map["passenger_list"] = tmp
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("car_info") && dict["car_info"] != nil {
                var model = CarOrderQueryResponseBody.Module.CarInfo()
                model.fromMap(dict["car_info"] as! [String: Any])
                self.carInfo = model
            }
            if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
                var model = CarOrderQueryResponseBody.Module.InvoiceInfo()
                model.fromMap(dict["invoice_info"] as! [String: Any])
                self.invoiceInfo = model
            }
            if dict.keys.contains("order_base_info") && dict["order_base_info"] != nil {
                var model = CarOrderQueryResponseBody.Module.OrderBaseInfo()
                model.fromMap(dict["order_base_info"] as! [String: Any])
                self.orderBaseInfo = model
            }
            if dict.keys.contains("passenger_list") && dict["passenger_list"] != nil {
                var tmp : [CarOrderQueryResponseBody.Module.PassengerList] = []
                for v in dict["passenger_list"] as! [Any] {
                    var model = CarOrderQueryResponseBody.Module.PassengerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerList = tmp
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [CarOrderQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = CarOrderQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CarOrderQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CarOrderQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarOrderQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarOrderQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarOrderQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CarSceneQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class CarSceneQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var scenarioTemplateId: String?

        public var scenarioTemplateName: String?

        public var state: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.scenarioTemplateId != nil {
                map["scenarioTemplateId"] = self.scenarioTemplateId!
            }
            if self.scenarioTemplateName != nil {
                map["scenarioTemplateName"] = self.scenarioTemplateName!
            }
            if self.state != nil {
                map["state"] = self.state!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("scenarioTemplateId") && dict["scenarioTemplateId"] != nil {
                self.scenarioTemplateId = dict["scenarioTemplateId"] as! String
            }
            if dict.keys.contains("scenarioTemplateName") && dict["scenarioTemplateName"] != nil {
                self.scenarioTemplateName = dict["scenarioTemplateName"] as! String
            }
            if dict.keys.contains("state") && dict["state"] != nil {
                self.state = dict["state"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [CarSceneQueryResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [CarSceneQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = CarSceneQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CarSceneQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CarSceneQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CarSceneQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CitySearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CitySearchRequest : Tea.TeaModel {
    public var keyword: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["keyword"] = self.keyword!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("keyword") && dict["keyword"] != nil {
            self.keyword = dict["keyword"] as! String
        }
    }
}

public class CitySearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Cities : Tea.TeaModel {
            public var code: String?

            public var name: String?

            public var region: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.region != nil {
                    map["region"] = self.region!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("code") && dict["code"] != nil {
                    self.code = dict["code"] as! String
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("region") && dict["region"] != nil {
                    self.region = dict["region"] as! Int32
                }
            }
        }
        public var cities: [CitySearchResponseBody.Module.Cities]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cities != nil {
                var tmp : [Any] = []
                for k in self.cities! {
                    tmp.append(k.toMap())
                }
                map["cities"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cities") && dict["cities"] != nil {
                var tmp : [CitySearchResponseBody.Module.Cities] = []
                for v in dict["cities"] as! [Any] {
                    var model = CitySearchResponseBody.Module.Cities()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.cities = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CitySearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CitySearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CitySearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CitySearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CitySearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CommonApplyQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CommonApplyQueryRequest : Tea.TeaModel {
    public var applyId: Int64?

    public var bizCategory: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.bizCategory != nil {
            map["biz_category"] = self.bizCategory!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("biz_category") && dict["biz_category"] != nil {
            self.bizCategory = dict["biz_category"] as! Int32
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CommonApplyQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var applyId: Int64?

        public var bizCategory: Int32?

        public var cause: String?

        public var corpId: String?

        public var extendValue: String?

        public var gmtCreate: String?

        public var status: Int32?

        public var thirdpartCorpId: String?

        public var thirdpartId: String?

        public var tripCause: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.bizCategory != nil {
                map["biz_category"] = self.bizCategory!
            }
            if self.cause != nil {
                map["cause"] = self.cause!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.extendValue != nil {
                map["extend_value"] = self.extendValue!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.thirdpartCorpId != nil {
                map["thirdpart_corp_id"] = self.thirdpartCorpId!
            }
            if self.thirdpartId != nil {
                map["thirdpart_id"] = self.thirdpartId!
            }
            if self.tripCause != nil {
                map["trip_cause"] = self.tripCause!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("biz_category") && dict["biz_category"] != nil {
                self.bizCategory = dict["biz_category"] as! Int32
            }
            if dict.keys.contains("cause") && dict["cause"] != nil {
                self.cause = dict["cause"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("extend_value") && dict["extend_value"] != nil {
                self.extendValue = dict["extend_value"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("thirdpart_corp_id") && dict["thirdpart_corp_id"] != nil {
                self.thirdpartCorpId = dict["thirdpart_corp_id"] as! String
            }
            if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
                self.thirdpartId = dict["thirdpart_id"] as! String
            }
            if dict.keys.contains("trip_cause") && dict["trip_cause"] != nil {
                self.tripCause = dict["trip_cause"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CommonApplyQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CommonApplyQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CommonApplyQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommonApplyQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CommonApplyQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CommonApplySyncHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CommonApplySyncRequest : Tea.TeaModel {
    public var applyId: Int64?

    public var bizCategory: Int32?

    public var remark: String?

    public var status: Int32?

    public var thirdpartyFlowId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.bizCategory != nil {
            map["biz_category"] = self.bizCategory!
        }
        if self.remark != nil {
            map["remark"] = self.remark!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.thirdpartyFlowId != nil {
            map["thirdparty_flow_id"] = self.thirdpartyFlowId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("biz_category") && dict["biz_category"] != nil {
            self.bizCategory = dict["biz_category"] as! Int32
        }
        if dict.keys.contains("remark") && dict["remark"] != nil {
            self.remark = dict["remark"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("thirdparty_flow_id") && dict["thirdparty_flow_id"] != nil {
            self.thirdpartyFlowId = dict["thirdparty_flow_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CommonApplySyncResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CommonApplySyncResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommonApplySyncResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CommonApplySyncResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CooperatorFlightBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class CooperatorFlightBillSettlementQueryRequest : Tea.TeaModel {
    public var cooperatorId: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cooperatorId != nil {
            map["cooperator_id"] = self.cooperatorId!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cooperator_id") && dict["cooperator_id"] != nil {
            self.cooperatorId = dict["cooperator_id"] as! String
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class CooperatorFlightBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var advanceDay: Int32?

            public var airlineCorpCode: String?

            public var airlineCorpName: String?

            public var alipayId: String?

            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var arrAirportCode: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrDate: String?

            public var arrStation: String?

            public var arrTime: String?

            public var billRecordTime: String?

            public var bookMode: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var btripCouponFee: Double?

            public var buildFee: Double?

            public var businessTripResult: String?

            public var cabin: String?

            public var cabinClass: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var changeFee: Double?

            public var changeResult: String?

            public var cooperatorBillCode: String?

            public var cooperatorName: String?

            public var cooperatorOrderId: String?

            public var corpPayOrderFee: Double?

            public var corpSettlePrice: Double?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var coupon: Double?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var department: String?

            public var departmentId: String?

            public var deptCity: String?

            public var deptDate: String?

            public var deptStation: String?

            public var deptTime: String?

            public var discount: String?

            public var exceedReason: String?

            public var feeType: String?

            public var flightNo: String?

            public var index: String?

            public var insOrderId: String?

            public var insuranceFee: Double?

            public var insuranceNumber: String?

            public var invoiceTitle: String?

            public var itemType: String?

            public var itineraryNum: String?

            public var itineraryPrice: Double?

            public var mileage: Int32?

            public var mostDifferenceDeptTime: String?

            public var mostDifferenceDiscount: String?

            public var mostDifferenceFlightNo: String?

            public var mostDifferencePrice: Double?

            public var mostDifferenceReason: String?

            public var mostPrice: Double?

            public var negotiationCouponFee: Double?

            public var oilFee: Double?

            public var orderId: String?

            public var orderStatusDesc: String?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var personSettlePrice: Double?

            public var preBookTip: String?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var refundFee: Double?

            public var refundResult: String?

            public var refundUpgradeCost: Double?

            public var remark: String?

            public var repeatRefund: String?

            public var sealPrice: Double?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var status: Int32?

            public var subOrderId: String?

            public var taxRate: String?

            public var thirdInvoiceId: String?

            public var thirdItineraryId: String?

            public var ticketId: String?

            public var trade: String?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberType: String?

            public var travelerMemberTypeName: String?

            public var travelerName: String?

            public var upgradeCost: Double?

            public var voucherType: Int32?

            public var voyageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.advanceDay != nil {
                    map["advance_day"] = self.advanceDay!
                }
                if self.airlineCorpCode != nil {
                    map["airline_corp_code"] = self.airlineCorpCode!
                }
                if self.airlineCorpName != nil {
                    map["airline_corp_name"] = self.airlineCorpName!
                }
                if self.alipayId != nil {
                    map["alipay_id"] = self.alipayId!
                }
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.arrStation != nil {
                    map["arr_station"] = self.arrStation!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookMode != nil {
                    map["book_mode"] = self.bookMode!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.btripCouponFee != nil {
                    map["btrip_coupon_fee"] = self.btripCouponFee!
                }
                if self.buildFee != nil {
                    map["build_fee"] = self.buildFee!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.changeFee != nil {
                    map["change_fee"] = self.changeFee!
                }
                if self.changeResult != nil {
                    map["change_result"] = self.changeResult!
                }
                if self.cooperatorBillCode != nil {
                    map["cooperator_bill_code"] = self.cooperatorBillCode!
                }
                if self.cooperatorName != nil {
                    map["cooperator_name"] = self.cooperatorName!
                }
                if self.cooperatorOrderId != nil {
                    map["cooperator_order_id"] = self.cooperatorOrderId!
                }
                if self.corpPayOrderFee != nil {
                    map["corp_pay_order_fee"] = self.corpPayOrderFee!
                }
                if self.corpSettlePrice != nil {
                    map["corp_settle_price"] = self.corpSettlePrice!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.coupon != nil {
                    map["coupon"] = self.coupon!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.deptCity != nil {
                    map["dept_city"] = self.deptCity!
                }
                if self.deptDate != nil {
                    map["dept_date"] = self.deptDate!
                }
                if self.deptStation != nil {
                    map["dept_station"] = self.deptStation!
                }
                if self.deptTime != nil {
                    map["dept_time"] = self.deptTime!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.insOrderId != nil {
                    map["ins_order_id"] = self.insOrderId!
                }
                if self.insuranceFee != nil {
                    map["insurance_fee"] = self.insuranceFee!
                }
                if self.insuranceNumber != nil {
                    map["insurance_number"] = self.insuranceNumber!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.itemType != nil {
                    map["item_type"] = self.itemType!
                }
                if self.itineraryNum != nil {
                    map["itinerary_num"] = self.itineraryNum!
                }
                if self.itineraryPrice != nil {
                    map["itinerary_price"] = self.itineraryPrice!
                }
                if self.mileage != nil {
                    map["mileage"] = self.mileage!
                }
                if self.mostDifferenceDeptTime != nil {
                    map["most_difference_dept_time"] = self.mostDifferenceDeptTime!
                }
                if self.mostDifferenceDiscount != nil {
                    map["most_difference_discount"] = self.mostDifferenceDiscount!
                }
                if self.mostDifferenceFlightNo != nil {
                    map["most_difference_flight_no"] = self.mostDifferenceFlightNo!
                }
                if self.mostDifferencePrice != nil {
                    map["most_difference_price"] = self.mostDifferencePrice!
                }
                if self.mostDifferenceReason != nil {
                    map["most_difference_reason"] = self.mostDifferenceReason!
                }
                if self.mostPrice != nil {
                    map["most_price"] = self.mostPrice!
                }
                if self.negotiationCouponFee != nil {
                    map["negotiation_coupon_fee"] = self.negotiationCouponFee!
                }
                if self.oilFee != nil {
                    map["oil_fee"] = self.oilFee!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderStatusDesc != nil {
                    map["order_status_desc"] = self.orderStatusDesc!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.personSettlePrice != nil {
                    map["person_settle_price"] = self.personSettlePrice!
                }
                if self.preBookTip != nil {
                    map["pre_book_tip"] = self.preBookTip!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundResult != nil {
                    map["refund_result"] = self.refundResult!
                }
                if self.refundUpgradeCost != nil {
                    map["refund_upgrade_cost"] = self.refundUpgradeCost!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.repeatRefund != nil {
                    map["repeat_refund"] = self.repeatRefund!
                }
                if self.sealPrice != nil {
                    map["seal_price"] = self.sealPrice!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subOrderId != nil {
                    map["sub_order_id"] = self.subOrderId!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdInvoiceId != nil {
                    map["third_invoice_id"] = self.thirdInvoiceId!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.ticketId != nil {
                    map["ticket_id"] = self.ticketId!
                }
                if self.trade != nil {
                    map["trade"] = self.trade!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberType != nil {
                    map["traveler_member_type"] = self.travelerMemberType!
                }
                if self.travelerMemberTypeName != nil {
                    map["traveler_member_type_name"] = self.travelerMemberTypeName!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.upgradeCost != nil {
                    map["upgrade_cost"] = self.upgradeCost!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                if self.voyageName != nil {
                    map["voyage_name"] = self.voyageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("advance_day") && dict["advance_day"] != nil {
                    self.advanceDay = dict["advance_day"] as! Int32
                }
                if dict.keys.contains("airline_corp_code") && dict["airline_corp_code"] != nil {
                    self.airlineCorpCode = dict["airline_corp_code"] as! String
                }
                if dict.keys.contains("airline_corp_name") && dict["airline_corp_name"] != nil {
                    self.airlineCorpName = dict["airline_corp_name"] as! String
                }
                if dict.keys.contains("alipay_id") && dict["alipay_id"] != nil {
                    self.alipayId = dict["alipay_id"] as! String
                }
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                    self.arrStation = dict["arr_station"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_mode") && dict["book_mode"] != nil {
                    self.bookMode = dict["book_mode"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("btrip_coupon_fee") && dict["btrip_coupon_fee"] != nil {
                    self.btripCouponFee = dict["btrip_coupon_fee"] as! Double
                }
                if dict.keys.contains("build_fee") && dict["build_fee"] != nil {
                    self.buildFee = dict["build_fee"] as! Double
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                    self.changeFee = dict["change_fee"] as! Double
                }
                if dict.keys.contains("change_result") && dict["change_result"] != nil {
                    self.changeResult = dict["change_result"] as! String
                }
                if dict.keys.contains("cooperator_bill_code") && dict["cooperator_bill_code"] != nil {
                    self.cooperatorBillCode = dict["cooperator_bill_code"] as! String
                }
                if dict.keys.contains("cooperator_name") && dict["cooperator_name"] != nil {
                    self.cooperatorName = dict["cooperator_name"] as! String
                }
                if dict.keys.contains("cooperator_order_id") && dict["cooperator_order_id"] != nil {
                    self.cooperatorOrderId = dict["cooperator_order_id"] as! String
                }
                if dict.keys.contains("corp_pay_order_fee") && dict["corp_pay_order_fee"] != nil {
                    self.corpPayOrderFee = dict["corp_pay_order_fee"] as! Double
                }
                if dict.keys.contains("corp_settle_price") && dict["corp_settle_price"] != nil {
                    self.corpSettlePrice = dict["corp_settle_price"] as! Double
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("coupon") && dict["coupon"] != nil {
                    self.coupon = dict["coupon"] as! Double
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("dept_city") && dict["dept_city"] != nil {
                    self.deptCity = dict["dept_city"] as! String
                }
                if dict.keys.contains("dept_date") && dict["dept_date"] != nil {
                    self.deptDate = dict["dept_date"] as! String
                }
                if dict.keys.contains("dept_station") && dict["dept_station"] != nil {
                    self.deptStation = dict["dept_station"] as! String
                }
                if dict.keys.contains("dept_time") && dict["dept_time"] != nil {
                    self.deptTime = dict["dept_time"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                    self.insOrderId = dict["ins_order_id"] as! String
                }
                if dict.keys.contains("insurance_fee") && dict["insurance_fee"] != nil {
                    self.insuranceFee = dict["insurance_fee"] as! Double
                }
                if dict.keys.contains("insurance_number") && dict["insurance_number"] != nil {
                    self.insuranceNumber = dict["insurance_number"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("item_type") && dict["item_type"] != nil {
                    self.itemType = dict["item_type"] as! String
                }
                if dict.keys.contains("itinerary_num") && dict["itinerary_num"] != nil {
                    self.itineraryNum = dict["itinerary_num"] as! String
                }
                if dict.keys.contains("itinerary_price") && dict["itinerary_price"] != nil {
                    self.itineraryPrice = dict["itinerary_price"] as! Double
                }
                if dict.keys.contains("mileage") && dict["mileage"] != nil {
                    self.mileage = dict["mileage"] as! Int32
                }
                if dict.keys.contains("most_difference_dept_time") && dict["most_difference_dept_time"] != nil {
                    self.mostDifferenceDeptTime = dict["most_difference_dept_time"] as! String
                }
                if dict.keys.contains("most_difference_discount") && dict["most_difference_discount"] != nil {
                    self.mostDifferenceDiscount = dict["most_difference_discount"] as! String
                }
                if dict.keys.contains("most_difference_flight_no") && dict["most_difference_flight_no"] != nil {
                    self.mostDifferenceFlightNo = dict["most_difference_flight_no"] as! String
                }
                if dict.keys.contains("most_difference_price") && dict["most_difference_price"] != nil {
                    self.mostDifferencePrice = dict["most_difference_price"] as! Double
                }
                if dict.keys.contains("most_difference_reason") && dict["most_difference_reason"] != nil {
                    self.mostDifferenceReason = dict["most_difference_reason"] as! String
                }
                if dict.keys.contains("most_price") && dict["most_price"] != nil {
                    self.mostPrice = dict["most_price"] as! Double
                }
                if dict.keys.contains("negotiation_coupon_fee") && dict["negotiation_coupon_fee"] != nil {
                    self.negotiationCouponFee = dict["negotiation_coupon_fee"] as! Double
                }
                if dict.keys.contains("oil_fee") && dict["oil_fee"] != nil {
                    self.oilFee = dict["oil_fee"] as! Double
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_status_desc") && dict["order_status_desc"] != nil {
                    self.orderStatusDesc = dict["order_status_desc"] as! String
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("person_settle_price") && dict["person_settle_price"] != nil {
                    self.personSettlePrice = dict["person_settle_price"] as! Double
                }
                if dict.keys.contains("pre_book_tip") && dict["pre_book_tip"] != nil {
                    self.preBookTip = dict["pre_book_tip"] as! String
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Double
                }
                if dict.keys.contains("refund_result") && dict["refund_result"] != nil {
                    self.refundResult = dict["refund_result"] as! String
                }
                if dict.keys.contains("refund_upgrade_cost") && dict["refund_upgrade_cost"] != nil {
                    self.refundUpgradeCost = dict["refund_upgrade_cost"] as! Double
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("repeat_refund") && dict["repeat_refund"] != nil {
                    self.repeatRefund = dict["repeat_refund"] as! String
                }
                if dict.keys.contains("seal_price") && dict["seal_price"] != nil {
                    self.sealPrice = dict["seal_price"] as! Double
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                    self.subOrderId = dict["sub_order_id"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_invoice_id") && dict["third_invoice_id"] != nil {
                    self.thirdInvoiceId = dict["third_invoice_id"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("ticket_id") && dict["ticket_id"] != nil {
                    self.ticketId = dict["ticket_id"] as! String
                }
                if dict.keys.contains("trade") && dict["trade"] != nil {
                    self.trade = dict["trade"] as! String
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type") && dict["traveler_member_type"] != nil {
                    self.travelerMemberType = dict["traveler_member_type"] as! String
                }
                if dict.keys.contains("traveler_member_type_name") && dict["traveler_member_type_name"] != nil {
                    self.travelerMemberTypeName = dict["traveler_member_type_name"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("upgrade_cost") && dict["upgrade_cost"] != nil {
                    self.upgradeCost = dict["upgrade_cost"] as! Double
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
                if dict.keys.contains("voyage_name") && dict["voyage_name"] != nil {
                    self.voyageName = dict["voyage_name"] as! String
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var items: [CooperatorFlightBillSettlementQueryResponseBody.Module.Items]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalSize: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [CooperatorFlightBillSettlementQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = CooperatorFlightBillSettlementQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CooperatorFlightBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CooperatorFlightBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CooperatorFlightBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CooperatorFlightBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CooperatorFlightBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CooperatorHotelBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class CooperatorHotelBillSettlementQueryRequest : Tea.TeaModel {
    public var cooperatorId: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cooperatorId != nil {
            map["cooperator_id"] = self.cooperatorId!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cooperator_id") && dict["cooperator_id"] != nil {
            self.cooperatorId = dict["cooperator_id"] as! String
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class CooperatorHotelBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var averageNights: Double?

            public var billRecordTime: String?

            public var bookMode: String?

            public var bookReason: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var brandGroup: String?

            public var brandName: String?

            public var businessTripResult: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var checkInDate: String?

            public var checkoutDate: String?

            public var city: String?

            public var cityCode: String?

            public var cityCounty: String?

            public var cityCountyCode: Int32?

            public var cooperatorBillCode: String?

            public var cooperatorName: String?

            public var cooperatorOrderId: String?

            public var corpRefundFee: Double?

            public var corpTotalFee: Double?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var department: String?

            public var departmentId: String?

            public var exceedReason: String?

            public var feeType: String?

            public var fees: Double?

            public var fines: Double?

            public var fuPointFee: Double?

            public var hotelName: String?

            public var index: String?

            public var invoiceTitle: String?

            public var isEarlyDeparture: String?

            public var isNegotiation: String?

            public var isShareStr: String?

            public var nights: Int32?

            public var orderId: String?

            public var orderPrice: Double?

            public var orderStatusDesc: String?

            public var orderType: String?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var personRefundFee: Double?

            public var personSettlePrice: Double?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var promotionFee: Double?

            public var remark: String?

            public var reserveRule: Int32?

            public var roomNo: String?

            public var roomNumber: Int32?

            public var roomPrice: Double?

            public var roomType: String?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var star: String?

            public var status: Int32?

            public var subOrderId: String?

            public var taxRate: String?

            public var thirdInvoiceId: String?

            public var thirdItineraryId: String?

            public var totalNights: Int32?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberType: String?

            public var travelerMemberTypeName: String?

            public var travelerName: String?

            public var voucherType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.averageNights != nil {
                    map["average_nights"] = self.averageNights!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookMode != nil {
                    map["book_mode"] = self.bookMode!
                }
                if self.bookReason != nil {
                    map["book_reason"] = self.bookReason!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.brandGroup != nil {
                    map["brand_group"] = self.brandGroup!
                }
                if self.brandName != nil {
                    map["brand_name"] = self.brandName!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.checkInDate != nil {
                    map["check_in_date"] = self.checkInDate!
                }
                if self.checkoutDate != nil {
                    map["checkout_date"] = self.checkoutDate!
                }
                if self.city != nil {
                    map["city"] = self.city!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityCounty != nil {
                    map["city_county"] = self.cityCounty!
                }
                if self.cityCountyCode != nil {
                    map["city_county_code"] = self.cityCountyCode!
                }
                if self.cooperatorBillCode != nil {
                    map["cooperator_bill_code"] = self.cooperatorBillCode!
                }
                if self.cooperatorName != nil {
                    map["cooperator_name"] = self.cooperatorName!
                }
                if self.cooperatorOrderId != nil {
                    map["cooperator_order_id"] = self.cooperatorOrderId!
                }
                if self.corpRefundFee != nil {
                    map["corp_refund_fee"] = self.corpRefundFee!
                }
                if self.corpTotalFee != nil {
                    map["corp_total_fee"] = self.corpTotalFee!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.fees != nil {
                    map["fees"] = self.fees!
                }
                if self.fines != nil {
                    map["fines"] = self.fines!
                }
                if self.fuPointFee != nil {
                    map["fu_point_fee"] = self.fuPointFee!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.isEarlyDeparture != nil {
                    map["is_early_departure"] = self.isEarlyDeparture!
                }
                if self.isNegotiation != nil {
                    map["is_negotiation"] = self.isNegotiation!
                }
                if self.isShareStr != nil {
                    map["is_share_str"] = self.isShareStr!
                }
                if self.nights != nil {
                    map["nights"] = self.nights!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderPrice != nil {
                    map["order_price"] = self.orderPrice!
                }
                if self.orderStatusDesc != nil {
                    map["order_status_desc"] = self.orderStatusDesc!
                }
                if self.orderType != nil {
                    map["order_type"] = self.orderType!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.personRefundFee != nil {
                    map["person_refund_fee"] = self.personRefundFee!
                }
                if self.personSettlePrice != nil {
                    map["person_settle_price"] = self.personSettlePrice!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.promotionFee != nil {
                    map["promotion_fee"] = self.promotionFee!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.reserveRule != nil {
                    map["reserve_rule"] = self.reserveRule!
                }
                if self.roomNo != nil {
                    map["room_no"] = self.roomNo!
                }
                if self.roomNumber != nil {
                    map["room_number"] = self.roomNumber!
                }
                if self.roomPrice != nil {
                    map["room_price"] = self.roomPrice!
                }
                if self.roomType != nil {
                    map["room_type"] = self.roomType!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.star != nil {
                    map["star"] = self.star!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subOrderId != nil {
                    map["sub_order_id"] = self.subOrderId!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdInvoiceId != nil {
                    map["third_invoice_id"] = self.thirdInvoiceId!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.totalNights != nil {
                    map["total_nights"] = self.totalNights!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberType != nil {
                    map["traveler_member_type"] = self.travelerMemberType!
                }
                if self.travelerMemberTypeName != nil {
                    map["traveler_member_type_name"] = self.travelerMemberTypeName!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("average_nights") && dict["average_nights"] != nil {
                    self.averageNights = dict["average_nights"] as! Double
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_mode") && dict["book_mode"] != nil {
                    self.bookMode = dict["book_mode"] as! String
                }
                if dict.keys.contains("book_reason") && dict["book_reason"] != nil {
                    self.bookReason = dict["book_reason"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("brand_group") && dict["brand_group"] != nil {
                    self.brandGroup = dict["brand_group"] as! String
                }
                if dict.keys.contains("brand_name") && dict["brand_name"] != nil {
                    self.brandName = dict["brand_name"] as! String
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
                    self.checkInDate = dict["check_in_date"] as! String
                }
                if dict.keys.contains("checkout_date") && dict["checkout_date"] != nil {
                    self.checkoutDate = dict["checkout_date"] as! String
                }
                if dict.keys.contains("city") && dict["city"] != nil {
                    self.city = dict["city"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_county") && dict["city_county"] != nil {
                    self.cityCounty = dict["city_county"] as! String
                }
                if dict.keys.contains("city_county_code") && dict["city_county_code"] != nil {
                    self.cityCountyCode = dict["city_county_code"] as! Int32
                }
                if dict.keys.contains("cooperator_bill_code") && dict["cooperator_bill_code"] != nil {
                    self.cooperatorBillCode = dict["cooperator_bill_code"] as! String
                }
                if dict.keys.contains("cooperator_name") && dict["cooperator_name"] != nil {
                    self.cooperatorName = dict["cooperator_name"] as! String
                }
                if dict.keys.contains("cooperator_order_id") && dict["cooperator_order_id"] != nil {
                    self.cooperatorOrderId = dict["cooperator_order_id"] as! String
                }
                if dict.keys.contains("corp_refund_fee") && dict["corp_refund_fee"] != nil {
                    self.corpRefundFee = dict["corp_refund_fee"] as! Double
                }
                if dict.keys.contains("corp_total_fee") && dict["corp_total_fee"] != nil {
                    self.corpTotalFee = dict["corp_total_fee"] as! Double
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("fees") && dict["fees"] != nil {
                    self.fees = dict["fees"] as! Double
                }
                if dict.keys.contains("fines") && dict["fines"] != nil {
                    self.fines = dict["fines"] as! Double
                }
                if dict.keys.contains("fu_point_fee") && dict["fu_point_fee"] != nil {
                    self.fuPointFee = dict["fu_point_fee"] as! Double
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("is_early_departure") && dict["is_early_departure"] != nil {
                    self.isEarlyDeparture = dict["is_early_departure"] as! String
                }
                if dict.keys.contains("is_negotiation") && dict["is_negotiation"] != nil {
                    self.isNegotiation = dict["is_negotiation"] as! String
                }
                if dict.keys.contains("is_share_str") && dict["is_share_str"] != nil {
                    self.isShareStr = dict["is_share_str"] as! String
                }
                if dict.keys.contains("nights") && dict["nights"] != nil {
                    self.nights = dict["nights"] as! Int32
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_price") && dict["order_price"] != nil {
                    self.orderPrice = dict["order_price"] as! Double
                }
                if dict.keys.contains("order_status_desc") && dict["order_status_desc"] != nil {
                    self.orderStatusDesc = dict["order_status_desc"] as! String
                }
                if dict.keys.contains("order_type") && dict["order_type"] != nil {
                    self.orderType = dict["order_type"] as! String
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("person_refund_fee") && dict["person_refund_fee"] != nil {
                    self.personRefundFee = dict["person_refund_fee"] as! Double
                }
                if dict.keys.contains("person_settle_price") && dict["person_settle_price"] != nil {
                    self.personSettlePrice = dict["person_settle_price"] as! Double
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("promotion_fee") && dict["promotion_fee"] != nil {
                    self.promotionFee = dict["promotion_fee"] as! Double
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("reserve_rule") && dict["reserve_rule"] != nil {
                    self.reserveRule = dict["reserve_rule"] as! Int32
                }
                if dict.keys.contains("room_no") && dict["room_no"] != nil {
                    self.roomNo = dict["room_no"] as! String
                }
                if dict.keys.contains("room_number") && dict["room_number"] != nil {
                    self.roomNumber = dict["room_number"] as! Int32
                }
                if dict.keys.contains("room_price") && dict["room_price"] != nil {
                    self.roomPrice = dict["room_price"] as! Double
                }
                if dict.keys.contains("room_type") && dict["room_type"] != nil {
                    self.roomType = dict["room_type"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("star") && dict["star"] != nil {
                    self.star = dict["star"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                    self.subOrderId = dict["sub_order_id"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_invoice_id") && dict["third_invoice_id"] != nil {
                    self.thirdInvoiceId = dict["third_invoice_id"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("total_nights") && dict["total_nights"] != nil {
                    self.totalNights = dict["total_nights"] as! Int32
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type") && dict["traveler_member_type"] != nil {
                    self.travelerMemberType = dict["traveler_member_type"] as! String
                }
                if dict.keys.contains("traveler_member_type_name") && dict["traveler_member_type_name"] != nil {
                    self.travelerMemberTypeName = dict["traveler_member_type_name"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var items: [CooperatorHotelBillSettlementQueryResponseBody.Module.Items]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalSize: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [CooperatorHotelBillSettlementQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = CooperatorHotelBillSettlementQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CooperatorHotelBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CooperatorHotelBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CooperatorHotelBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CooperatorHotelBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CooperatorHotelBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CorpAuthLinkInfoQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class LinkCorps : Tea.TeaModel {
            public var corpName: String?

            public var openCorpId: String?

            public var trueCorpId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.openCorpId != nil {
                    map["open_corp_id"] = self.openCorpId!
                }
                if self.trueCorpId != nil {
                    map["true_corp_id"] = self.trueCorpId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("open_corp_id") && dict["open_corp_id"] != nil {
                    self.openCorpId = dict["open_corp_id"] as! String
                }
                if dict.keys.contains("true_corp_id") && dict["true_corp_id"] != nil {
                    self.trueCorpId = dict["true_corp_id"] as! String
                }
            }
        }
        public class OrgCorp : Tea.TeaModel {
            public var corpName: String?

            public var openCorpId: String?

            public var trueCorpId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.openCorpId != nil {
                    map["open_corp_id"] = self.openCorpId!
                }
                if self.trueCorpId != nil {
                    map["true_corp_id"] = self.trueCorpId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("open_corp_id") && dict["open_corp_id"] != nil {
                    self.openCorpId = dict["open_corp_id"] as! String
                }
                if dict.keys.contains("true_corp_id") && dict["true_corp_id"] != nil {
                    self.trueCorpId = dict["true_corp_id"] as! String
                }
            }
        }
        public var linkCorps: [CorpAuthLinkInfoQueryResponseBody.Module.LinkCorps]?

        public var orgCorp: CorpAuthLinkInfoQueryResponseBody.Module.OrgCorp?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.orgCorp?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.linkCorps != nil {
                var tmp : [Any] = []
                for k in self.linkCorps! {
                    tmp.append(k.toMap())
                }
                map["link_corps"] = tmp
            }
            if self.orgCorp != nil {
                map["org_corp"] = self.orgCorp?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("link_corps") && dict["link_corps"] != nil {
                var tmp : [CorpAuthLinkInfoQueryResponseBody.Module.LinkCorps] = []
                for v in dict["link_corps"] as! [Any] {
                    var model = CorpAuthLinkInfoQueryResponseBody.Module.LinkCorps()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.linkCorps = tmp
            }
            if dict.keys.contains("org_corp") && dict["org_corp"] != nil {
                var model = CorpAuthLinkInfoQueryResponseBody.Module.OrgCorp()
                model.fromMap(dict["org_corp"] as! [String: Any])
                self.orgCorp = model
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CorpAuthLinkInfoQueryResponseBody.Module?

    public var requestId: String?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CorpAuthLinkInfoQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CorpAuthLinkInfoQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CorpAuthLinkInfoQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CorpAuthLinkInfoQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CorpTokenHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripAccessToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripAccessToken != nil {
            map["x-acs-btrip-access-token"] = self.xAcsBtripAccessToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-access-token") && dict["x-acs-btrip-access-token"] != nil {
            self.xAcsBtripAccessToken = dict["x-acs-btrip-access-token"] as! String
        }
    }
}

public class CorpTokenRequest : Tea.TeaModel {
    public var appSecret: String?

    public var corpId: String?

    public var type: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appSecret != nil {
            map["app_secret"] = self.appSecret!
        }
        if self.corpId != nil {
            map["corp_id"] = self.corpId!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("app_secret") && dict["app_secret"] != nil {
            self.appSecret = dict["app_secret"] as! String
        }
        if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
            self.corpId = dict["corp_id"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
    }
}

public class CorpTokenResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var expire: Int64?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expire != nil {
                map["expire"] = self.expire!
            }
            if self.token != nil {
                map["token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("expire") && dict["expire"] != nil {
                self.expire = dict["expire"] as! Int64
            }
            if dict.keys.contains("token") && dict["token"] != nil {
                self.token = dict["token"] as! String
            }
        }
    }
    public class Module : Tea.TeaModel {
        public var expire: Int64?

        public var start: Int64?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expire != nil {
                map["expire"] = self.expire!
            }
            if self.start != nil {
                map["start"] = self.start!
            }
            if self.token != nil {
                map["token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("expire") && dict["expire"] != nil {
                self.expire = dict["expire"] as! Int64
            }
            if dict.keys.contains("start") && dict["start"] != nil {
                self.start = dict["start"] as! Int64
            }
            if dict.keys.contains("token") && dict["token"] != nil {
                self.token = dict["token"] as! String
            }
        }
    }
    public var code: String?

    public var data: CorpTokenResponseBody.Data?

    public var message: String?

    public var module: CorpTokenResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("data") && dict["data"] != nil {
            var model = CorpTokenResponseBody.Data()
            model.fromMap(dict["data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CorpTokenResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CorpTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CorpTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CorpTokenResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CostCenterDeleteHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CostCenterDeleteRequest : Tea.TeaModel {
    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class CostCenterDeleteResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CostCenterDeleteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CostCenterDeleteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CostCenterDeleteResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CostCenterModifyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CostCenterModifyRequest : Tea.TeaModel {
    public var alipayNo: String?

    public var disable: Int64?

    public var number: String?

    public var scope: Int64?

    public var thirdpartId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alipayNo != nil {
            map["alipay_no"] = self.alipayNo!
        }
        if self.disable != nil {
            map["disable"] = self.disable!
        }
        if self.number != nil {
            map["number"] = self.number!
        }
        if self.scope != nil {
            map["scope"] = self.scope!
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("alipay_no") && dict["alipay_no"] != nil {
            self.alipayNo = dict["alipay_no"] as! String
        }
        if dict.keys.contains("disable") && dict["disable"] != nil {
            self.disable = dict["disable"] as! Int64
        }
        if dict.keys.contains("number") && dict["number"] != nil {
            self.number = dict["number"] as! String
        }
        if dict.keys.contains("scope") && dict["scope"] != nil {
            self.scope = dict["scope"] as! Int64
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
    }
}

public class CostCenterModifyResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CostCenterModifyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CostCenterModifyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CostCenterModifyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CostCenterQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CostCenterQueryRequest : Tea.TeaModel {
    public var disable: Int64?

    public var needOrgEntity: Bool?

    public var thirdpartId: String?

    public var title: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disable != nil {
            map["disable"] = self.disable!
        }
        if self.needOrgEntity != nil {
            map["need_org_entity"] = self.needOrgEntity!
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("disable") && dict["disable"] != nil {
            self.disable = dict["disable"] as! Int64
        }
        if dict.keys.contains("need_org_entity") && dict["need_org_entity"] != nil {
            self.needOrgEntity = dict["need_org_entity"] as! Bool
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CostCenterQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class EntityDOS : Tea.TeaModel {
            public var corpId: String?

            public var entityId: String?

            public var entityType: String?

            public var name: String?

            public var userNum: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.entityId != nil {
                    map["entity_id"] = self.entityId!
                }
                if self.entityType != nil {
                    map["entity_type"] = self.entityType!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.userNum != nil {
                    map["user_num"] = self.userNum!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                    self.entityId = dict["entity_id"] as! String
                }
                if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                    self.entityType = dict["entity_type"] as! String
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("user_num") && dict["user_num"] != nil {
                    self.userNum = dict["user_num"] as! Int32
                }
            }
        }
        public var alipayNo: String?

        public var corpId: String?

        public var disable: Int64?

        public var entityDOS: [CostCenterQueryResponseBody.Module.EntityDOS]?

        public var id: Int64?

        public var number: String?

        public var ruleCode: Int64?

        public var scope: Int64?

        public var thirdpartId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alipayNo != nil {
                map["alipay_no"] = self.alipayNo!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.disable != nil {
                map["disable"] = self.disable!
            }
            if self.entityDOS != nil {
                var tmp : [Any] = []
                for k in self.entityDOS! {
                    tmp.append(k.toMap())
                }
                map["entity_d_o_s"] = tmp
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.number != nil {
                map["number"] = self.number!
            }
            if self.ruleCode != nil {
                map["rule_code"] = self.ruleCode!
            }
            if self.scope != nil {
                map["scope"] = self.scope!
            }
            if self.thirdpartId != nil {
                map["thirdpart_id"] = self.thirdpartId!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("alipay_no") && dict["alipay_no"] != nil {
                self.alipayNo = dict["alipay_no"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("disable") && dict["disable"] != nil {
                self.disable = dict["disable"] as! Int64
            }
            if dict.keys.contains("entity_d_o_s") && dict["entity_d_o_s"] != nil {
                var tmp : [CostCenterQueryResponseBody.Module.EntityDOS] = []
                for v in dict["entity_d_o_s"] as! [Any] {
                    var model = CostCenterQueryResponseBody.Module.EntityDOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.entityDOS = tmp
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("number") && dict["number"] != nil {
                self.number = dict["number"] as! String
            }
            if dict.keys.contains("rule_code") && dict["rule_code"] != nil {
                self.ruleCode = dict["rule_code"] as! Int64
            }
            if dict.keys.contains("scope") && dict["scope"] != nil {
                self.scope = dict["scope"] as! Int64
            }
            if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
                self.thirdpartId = dict["thirdpart_id"] as! String
            }
            if dict.keys.contains("title") && dict["title"] != nil {
                self.title = dict["title"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [CostCenterQueryResponseBody.Module]?

    public var morePage: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.morePage != nil {
            map["more_page"] = self.morePage!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [CostCenterQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = CostCenterQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("more_page") && dict["more_page"] != nil {
            self.morePage = dict["more_page"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CostCenterQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CostCenterQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CostCenterQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CostCenterSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class CostCenterSaveRequest : Tea.TeaModel {
    public var alipayNo: String?

    public var disable: Int64?

    public var number: String?

    public var scope: Int64?

    public var thirdpartId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alipayNo != nil {
            map["alipay_no"] = self.alipayNo!
        }
        if self.disable != nil {
            map["disable"] = self.disable!
        }
        if self.number != nil {
            map["number"] = self.number!
        }
        if self.scope != nil {
            map["scope"] = self.scope!
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("alipay_no") && dict["alipay_no"] != nil {
            self.alipayNo = dict["alipay_no"] as! String
        }
        if dict.keys.contains("disable") && dict["disable"] != nil {
            self.disable = dict["disable"] as! Int64
        }
        if dict.keys.contains("number") && dict["number"] != nil {
            self.number = dict["number"] as! String
        }
        if dict.keys.contains("scope") && dict["scope"] != nil {
            self.scope = dict["scope"] as! Int64
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
    }
}

public class CostCenterSaveResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var id: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CostCenterSaveResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CostCenterSaveResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CostCenterSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CostCenterSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CostCenterSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateSubCorpHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class CreateSubCorpRequest : Tea.TeaModel {
    public var outerCorpId: String?

    public var outerCorpName: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.outerCorpId != nil {
            map["outer_corp_id"] = self.outerCorpId!
        }
        if self.outerCorpName != nil {
            map["outer_corp_name"] = self.outerCorpName!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("outer_corp_id") && dict["outer_corp_id"] != nil {
            self.outerCorpId = dict["outer_corp_id"] as! String
        }
        if dict.keys.contains("outer_corp_name") && dict["outer_corp_name"] != nil {
            self.outerCorpName = dict["outer_corp_name"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class CreateSubCorpResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var subCorpId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.subCorpId != nil {
                map["sub_corp_id"] = self.subCorpId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
                self.subCorpId = dict["sub_corp_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: CreateSubCorpResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = CreateSubCorpResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class CreateSubCorpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSubCorpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = CreateSubCorpResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DeleteInvoiceEntityHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class DeleteInvoiceEntityRequest : Tea.TeaModel {
    public class Entities : Tea.TeaModel {
        public var entityId: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var delAll: Bool?

    public var entities: [DeleteInvoiceEntityRequest.Entities]?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.delAll != nil {
            map["del_all"] = self.delAll!
        }
        if self.entities != nil {
            var tmp : [Any] = []
            for k in self.entities! {
                tmp.append(k.toMap())
            }
            map["entities"] = tmp
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("del_all") && dict["del_all"] != nil {
            self.delAll = dict["del_all"] as! Bool
        }
        if dict.keys.contains("entities") && dict["entities"] != nil {
            var tmp : [DeleteInvoiceEntityRequest.Entities] = []
            for v in dict["entities"] as! [Any] {
                var model = DeleteInvoiceEntityRequest.Entities()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entities = tmp
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class DeleteInvoiceEntityShrinkRequest : Tea.TeaModel {
    public var delAll: Bool?

    public var entitiesShrink: String?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.delAll != nil {
            map["del_all"] = self.delAll!
        }
        if self.entitiesShrink != nil {
            map["entities"] = self.entitiesShrink!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("del_all") && dict["del_all"] != nil {
            self.delAll = dict["del_all"] as! Bool
        }
        if dict.keys.contains("entities") && dict["entities"] != nil {
            self.entitiesShrink = dict["entities"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class DeleteInvoiceEntityResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var removeNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.removeNum != nil {
                map["remove_num"] = self.removeNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("remove_num") && dict["remove_num"] != nil {
                self.removeNum = dict["remove_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: DeleteInvoiceEntityResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = DeleteInvoiceEntityResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class DeleteInvoiceEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteInvoiceEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = DeleteInvoiceEntityResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DepartmentSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class DepartmentSaveRequest : Tea.TeaModel {
    public class DepartList : Tea.TeaModel {
        public var departId: Int64?

        public var departName: String?

        public var departPid: Int64?

        public var managerIds: String?

        public var status: Int32?

        public var thirdDepartId: String?

        public var thirdDepartPid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.departPid != nil {
                map["depart_pid"] = self.departPid!
            }
            if self.managerIds != nil {
                map["manager_ids"] = self.managerIds!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.thirdDepartId != nil {
                map["third_depart_id"] = self.thirdDepartId!
            }
            if self.thirdDepartPid != nil {
                map["third_depart_pid"] = self.thirdDepartPid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! Int64
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("depart_pid") && dict["depart_pid"] != nil {
                self.departPid = dict["depart_pid"] as! Int64
            }
            if dict.keys.contains("manager_ids") && dict["manager_ids"] != nil {
                self.managerIds = dict["manager_ids"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("third_depart_id") && dict["third_depart_id"] != nil {
                self.thirdDepartId = dict["third_depart_id"] as! String
            }
            if dict.keys.contains("third_depart_pid") && dict["third_depart_pid"] != nil {
                self.thirdDepartPid = dict["third_depart_pid"] as! String
            }
        }
    }
    public var departList: [DepartmentSaveRequest.DepartList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departList != nil {
            var tmp : [Any] = []
            for k in self.departList! {
                tmp.append(k.toMap())
            }
            map["depart_list"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("depart_list") && dict["depart_list"] != nil {
            var tmp : [DepartmentSaveRequest.DepartList] = []
            for v in dict["depart_list"] as! [Any] {
                var model = DepartmentSaveRequest.DepartList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.departList = tmp
        }
    }
}

public class DepartmentSaveShrinkRequest : Tea.TeaModel {
    public var departListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.departListShrink != nil {
            map["depart_list"] = self.departListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("depart_list") && dict["depart_list"] != nil {
            self.departListShrink = dict["depart_list"] as! String
        }
    }
}

public class DepartmentSaveResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class DepartmentSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DepartmentSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = DepartmentSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class EntityAddHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class EntityAddRequest : Tea.TeaModel {
    public class EntityDOList : Tea.TeaModel {
        public var entityId: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var entityDOList: [EntityAddRequest.EntityDOList]?

    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entityDOList != nil {
            var tmp : [Any] = []
            for k in self.entityDOList! {
                tmp.append(k.toMap())
            }
            map["entity_d_o_list"] = tmp
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entity_d_o_list") && dict["entity_d_o_list"] != nil {
            var tmp : [EntityAddRequest.EntityDOList] = []
            for v in dict["entity_d_o_list"] as! [Any] {
                var model = EntityAddRequest.EntityDOList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entityDOList = tmp
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class EntityAddShrinkRequest : Tea.TeaModel {
    public var entityDOListShrink: String?

    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entityDOListShrink != nil {
            map["entity_d_o_list"] = self.entityDOListShrink!
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entity_d_o_list") && dict["entity_d_o_list"] != nil {
            self.entityDOListShrink = dict["entity_d_o_list"] as! String
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class EntityAddResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var addNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addNum != nil {
                map["add_num"] = self.addNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("add_num") && dict["add_num"] != nil {
                self.addNum = dict["add_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: EntityAddResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = EntityAddResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class EntityAddResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EntityAddResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = EntityAddResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class EntityDeleteHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class EntityDeleteRequest : Tea.TeaModel {
    public class EntityDOList : Tea.TeaModel {
        public var entityId: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var delAll: Bool?

    public var entityDOList: [EntityDeleteRequest.EntityDOList]?

    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.delAll != nil {
            map["del_all"] = self.delAll!
        }
        if self.entityDOList != nil {
            var tmp : [Any] = []
            for k in self.entityDOList! {
                tmp.append(k.toMap())
            }
            map["entity_d_o_list"] = tmp
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("del_all") && dict["del_all"] != nil {
            self.delAll = dict["del_all"] as! Bool
        }
        if dict.keys.contains("entity_d_o_list") && dict["entity_d_o_list"] != nil {
            var tmp : [EntityDeleteRequest.EntityDOList] = []
            for v in dict["entity_d_o_list"] as! [Any] {
                var model = EntityDeleteRequest.EntityDOList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entityDOList = tmp
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class EntityDeleteShrinkRequest : Tea.TeaModel {
    public var delAll: Bool?

    public var entityDOListShrink: String?

    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.delAll != nil {
            map["del_all"] = self.delAll!
        }
        if self.entityDOListShrink != nil {
            map["entity_d_o_list"] = self.entityDOListShrink!
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("del_all") && dict["del_all"] != nil {
            self.delAll = dict["del_all"] as! Bool
        }
        if dict.keys.contains("entity_d_o_list") && dict["entity_d_o_list"] != nil {
            self.entityDOListShrink = dict["entity_d_o_list"] as! String
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class EntityDeleteResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var removeNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.removeNum != nil {
                map["remove_num"] = self.removeNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("remove_num") && dict["remove_num"] != nil {
                self.removeNum = dict["remove_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: EntityDeleteResponseBody.Module?

    public var morePage: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.morePage != nil {
            map["more_page"] = self.morePage!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = EntityDeleteResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("more_page") && dict["more_page"] != nil {
            self.morePage = dict["more_page"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class EntityDeleteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EntityDeleteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = EntityDeleteResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class EntitySetHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class EntitySetRequest : Tea.TeaModel {
    public class EntityDOList : Tea.TeaModel {
        public var entityId: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var entityDOList: [EntitySetRequest.EntityDOList]?

    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entityDOList != nil {
            var tmp : [Any] = []
            for k in self.entityDOList! {
                tmp.append(k.toMap())
            }
            map["entity_d_o_list"] = tmp
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entity_d_o_list") && dict["entity_d_o_list"] != nil {
            var tmp : [EntitySetRequest.EntityDOList] = []
            for v in dict["entity_d_o_list"] as! [Any] {
                var model = EntitySetRequest.EntityDOList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entityDOList = tmp
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class EntitySetShrinkRequest : Tea.TeaModel {
    public var entityDOListShrink: String?

    public var thirdpartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entityDOListShrink != nil {
            map["entity_d_o_list"] = self.entityDOListShrink!
        }
        if self.thirdpartId != nil {
            map["thirdpart_id"] = self.thirdpartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entity_d_o_list") && dict["entity_d_o_list"] != nil {
            self.entityDOListShrink = dict["entity_d_o_list"] as! String
        }
        if dict.keys.contains("thirdpart_id") && dict["thirdpart_id"] != nil {
            self.thirdpartId = dict["thirdpart_id"] as! String
        }
    }
}

public class EntitySetResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var addNum: Int32?

        public var removeNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addNum != nil {
                map["add_num"] = self.addNum!
            }
            if self.removeNum != nil {
                map["remove_num"] = self.removeNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("add_num") && dict["add_num"] != nil {
                self.addNum = dict["add_num"] as! Int32
            }
            if dict.keys.contains("remove_num") && dict["remove_num"] != nil {
                self.removeNum = dict["remove_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: EntitySetResponseBody.Module?

    public var morePage: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.morePage != nil {
            map["more_page"] = self.morePage!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = EntitySetResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("more_page") && dict["more_page"] != nil {
            self.morePage = dict["more_page"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class EntitySetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EntitySetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = EntitySetResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class EstimatedPriceQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class EstimatedPriceQueryRequest : Tea.TeaModel {
    public var arrCity: String?

    public var category: String?

    public var depCity: String?

    public var endTime: Int64?

    public var itineraryId: String?

    public var startTime: Int64?

    public var subCorpId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrCity != nil {
            map["arr_city"] = self.arrCity!
        }
        if self.category != nil {
            map["category"] = self.category!
        }
        if self.depCity != nil {
            map["dep_city"] = self.depCity!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.itineraryId != nil {
            map["itinerary_id"] = self.itineraryId!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
            self.arrCity = dict["arr_city"] as! String
        }
        if dict.keys.contains("category") && dict["category"] != nil {
            self.category = dict["category"] as! String
        }
        if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
            self.depCity = dict["dep_city"] as! String
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! Int64
        }
        if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
            self.itineraryId = dict["itinerary_id"] as! String
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! Int64
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class EstimatedPriceQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class HotelFeeDetail : Tea.TeaModel {
            public var city: String?

            public var criterion: Int64?

            public var itineraryId: String?

            public var total: Int64?

            public var tripDays: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["city"] = self.city!
                }
                if self.criterion != nil {
                    map["criterion"] = self.criterion!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.total != nil {
                    map["total"] = self.total!
                }
                if self.tripDays != nil {
                    map["trip_days"] = self.tripDays!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city") && dict["city"] != nil {
                    self.city = dict["city"] as! String
                }
                if dict.keys.contains("criterion") && dict["criterion"] != nil {
                    self.criterion = dict["criterion"] as! Int64
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("total") && dict["total"] != nil {
                    self.total = dict["total"] as! Int64
                }
                if dict.keys.contains("trip_days") && dict["trip_days"] != nil {
                    self.tripDays = dict["trip_days"] as! Int32
                }
            }
        }
        public class TrafficFee : Tea.TeaModel {
            public class BtripRoutes : Tea.TeaModel {
                public class Cheapest : Tea.TeaModel {
                    public var arrTime: String?

                    public var depTime: String?

                    public var fee: Int64?

                    public var seatGrade: String?

                    public var vehicleNo: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.arrTime != nil {
                            map["arr_time"] = self.arrTime!
                        }
                        if self.depTime != nil {
                            map["dep_time"] = self.depTime!
                        }
                        if self.fee != nil {
                            map["fee"] = self.fee!
                        }
                        if self.seatGrade != nil {
                            map["seat_grade"] = self.seatGrade!
                        }
                        if self.vehicleNo != nil {
                            map["vehicle_no"] = self.vehicleNo!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                            self.arrTime = dict["arr_time"] as! String
                        }
                        if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                            self.depTime = dict["dep_time"] as! String
                        }
                        if dict.keys.contains("fee") && dict["fee"] != nil {
                            self.fee = dict["fee"] as! Int64
                        }
                        if dict.keys.contains("seat_grade") && dict["seat_grade"] != nil {
                            self.seatGrade = dict["seat_grade"] as! String
                        }
                        if dict.keys.contains("vehicle_no") && dict["vehicle_no"] != nil {
                            self.vehicleNo = dict["vehicle_no"] as! String
                        }
                    }
                }
                public class MostExpensive : Tea.TeaModel {
                    public var arrTime: String?

                    public var depTime: String?

                    public var fee: Int64?

                    public var seatGrade: String?

                    public var vehicleNo: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.arrTime != nil {
                            map["arr_time"] = self.arrTime!
                        }
                        if self.depTime != nil {
                            map["dep_time"] = self.depTime!
                        }
                        if self.fee != nil {
                            map["fee"] = self.fee!
                        }
                        if self.seatGrade != nil {
                            map["seat_grade"] = self.seatGrade!
                        }
                        if self.vehicleNo != nil {
                            map["vehicle_no"] = self.vehicleNo!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                            self.arrTime = dict["arr_time"] as! String
                        }
                        if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                            self.depTime = dict["dep_time"] as! String
                        }
                        if dict.keys.contains("fee") && dict["fee"] != nil {
                            self.fee = dict["fee"] as! Int64
                        }
                        if dict.keys.contains("seat_grade") && dict["seat_grade"] != nil {
                            self.seatGrade = dict["seat_grade"] as! String
                        }
                        if dict.keys.contains("vehicle_no") && dict["vehicle_no"] != nil {
                            self.vehicleNo = dict["vehicle_no"] as! String
                        }
                    }
                }
                public var arrCity: String?

                public var arrDate: Int64?

                public var cheapest: EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes.Cheapest?

                public var depCity: String?

                public var depDate: Int64?

                public var errMsg: String?

                public var itineraryId: String?

                public var mostExpensive: EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes.MostExpensive?

                public var success: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.cheapest?.validate()
                    try self.mostExpensive?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrCity != nil {
                        map["arr_city"] = self.arrCity!
                    }
                    if self.arrDate != nil {
                        map["arr_date"] = self.arrDate!
                    }
                    if self.cheapest != nil {
                        map["cheapest"] = self.cheapest?.toMap()
                    }
                    if self.depCity != nil {
                        map["dep_city"] = self.depCity!
                    }
                    if self.depDate != nil {
                        map["dep_date"] = self.depDate!
                    }
                    if self.errMsg != nil {
                        map["err_msg"] = self.errMsg!
                    }
                    if self.itineraryId != nil {
                        map["itinerary_id"] = self.itineraryId!
                    }
                    if self.mostExpensive != nil {
                        map["most_expensive"] = self.mostExpensive?.toMap()
                    }
                    if self.success != nil {
                        map["success"] = self.success!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                        self.arrCity = dict["arr_city"] as! String
                    }
                    if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                        self.arrDate = dict["arr_date"] as! Int64
                    }
                    if dict.keys.contains("cheapest") && dict["cheapest"] != nil {
                        var model = EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes.Cheapest()
                        model.fromMap(dict["cheapest"] as! [String: Any])
                        self.cheapest = model
                    }
                    if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                        self.depCity = dict["dep_city"] as! String
                    }
                    if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                        self.depDate = dict["dep_date"] as! Int64
                    }
                    if dict.keys.contains("err_msg") && dict["err_msg"] != nil {
                        self.errMsg = dict["err_msg"] as! String
                    }
                    if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                        self.itineraryId = dict["itinerary_id"] as! String
                    }
                    if dict.keys.contains("most_expensive") && dict["most_expensive"] != nil {
                        var model = EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes.MostExpensive()
                        model.fromMap(dict["most_expensive"] as! [String: Any])
                        self.mostExpensive = model
                    }
                    if dict.keys.contains("success") && dict["success"] != nil {
                        self.success = dict["success"] as! Bool
                    }
                }
            }
            public var btripRoutes: [EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes]?

            public var errMsg: String?

            public var maxFee: Int64?

            public var minFee: Int64?

            public var success: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.btripRoutes != nil {
                    var tmp : [Any] = []
                    for k in self.btripRoutes! {
                        tmp.append(k.toMap())
                    }
                    map["btrip_routes"] = tmp
                }
                if self.errMsg != nil {
                    map["err_msg"] = self.errMsg!
                }
                if self.maxFee != nil {
                    map["max_fee"] = self.maxFee!
                }
                if self.minFee != nil {
                    map["min_fee"] = self.minFee!
                }
                if self.success != nil {
                    map["success"] = self.success!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("btrip_routes") && dict["btrip_routes"] != nil {
                    var tmp : [EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes] = []
                    for v in dict["btrip_routes"] as! [Any] {
                        var model = EstimatedPriceQueryResponseBody.Module.TrafficFee.BtripRoutes()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.btripRoutes = tmp
                }
                if dict.keys.contains("err_msg") && dict["err_msg"] != nil {
                    self.errMsg = dict["err_msg"] as! String
                }
                if dict.keys.contains("max_fee") && dict["max_fee"] != nil {
                    self.maxFee = dict["max_fee"] as! Int64
                }
                if dict.keys.contains("min_fee") && dict["min_fee"] != nil {
                    self.minFee = dict["min_fee"] as! Int64
                }
                if dict.keys.contains("success") && dict["success"] != nil {
                    self.success = dict["success"] as! Bool
                }
            }
        }
        public var hotelFeeDetail: [EstimatedPriceQueryResponseBody.Module.HotelFeeDetail]?

        public var totalHotelFee: Int64?

        public var trafficFee: EstimatedPriceQueryResponseBody.Module.TrafficFee?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.trafficFee?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hotelFeeDetail != nil {
                var tmp : [Any] = []
                for k in self.hotelFeeDetail! {
                    tmp.append(k.toMap())
                }
                map["hotel_fee_detail"] = tmp
            }
            if self.totalHotelFee != nil {
                map["total_hotel_fee"] = self.totalHotelFee!
            }
            if self.trafficFee != nil {
                map["traffic_fee"] = self.trafficFee?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("hotel_fee_detail") && dict["hotel_fee_detail"] != nil {
                var tmp : [EstimatedPriceQueryResponseBody.Module.HotelFeeDetail] = []
                for v in dict["hotel_fee_detail"] as! [Any] {
                    var model = EstimatedPriceQueryResponseBody.Module.HotelFeeDetail()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelFeeDetail = tmp
            }
            if dict.keys.contains("total_hotel_fee") && dict["total_hotel_fee"] != nil {
                self.totalHotelFee = dict["total_hotel_fee"] as! Int64
            }
            if dict.keys.contains("traffic_fee") && dict["traffic_fee"] != nil {
                var model = EstimatedPriceQueryResponseBody.Module.TrafficFee()
                model.fromMap(dict["traffic_fee"] as! [String: Any])
                self.trafficFee = model
            }
        }
    }
    public var code: Int32?

    public var message: String?

    public var module: EstimatedPriceQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! Int32
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = EstimatedPriceQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class EstimatedPriceQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EstimatedPriceQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = EstimatedPriceQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ExceedApplySyncHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ExceedApplySyncRequest : Tea.TeaModel {
    public var applyId: Int64?

    public var bizCategory: Int32?

    public var remark: String?

    public var status: Int32?

    public var thirdpartyFlowId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.bizCategory != nil {
            map["biz_category"] = self.bizCategory!
        }
        if self.remark != nil {
            map["remark"] = self.remark!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.thirdpartyFlowId != nil {
            map["thirdparty_flow_id"] = self.thirdpartyFlowId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("biz_category") && dict["biz_category"] != nil {
            self.bizCategory = dict["biz_category"] as! Int32
        }
        if dict.keys.contains("remark") && dict["remark"] != nil {
            self.remark = dict["remark"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("thirdparty_flow_id") && dict["thirdparty_flow_id"] != nil {
            self.thirdpartyFlowId = dict["thirdparty_flow_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class ExceedApplySyncResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ExceedApplySyncResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExceedApplySyncResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ExceedApplySyncResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class FlightBillSettlementQueryRequest : Tea.TeaModel {
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class FlightBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var advanceDay: Int32?

            public var airlineCorpCode: String?

            public var airlineCorpName: String?

            public var alipayId: String?

            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var arrAirportCode: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrDate: String?

            public var arrStation: String?

            public var arrTime: String?

            public var billRecordTime: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var btripCouponFee: Double?

            public var buildFee: Double?

            public var businessTripResult: String?

            public var cabin: String?

            public var cabinClass: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var changeFee: Double?

            public var changeResult: String?

            public var corpPayOrderFee: Double?

            public var corpSettlePrice: Double?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var coupon: Double?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var department: String?

            public var departmentId: String?

            public var deptCity: String?

            public var deptDate: String?

            public var deptStation: String?

            public var deptTime: String?

            public var discount: String?

            public var exceedReason: String?

            public var feeType: String?

            public var flightNo: String?

            public var index: String?

            public var insOrderId: String?

            public var insuranceFee: Double?

            public var insuranceNumber: String?

            public var invoiceTitle: String?

            public var itemType: String?

            public var itineraryNum: String?

            public var itineraryPrice: Double?

            public var mileage: String?

            public var mostDifferenceDeptTime: String?

            public var mostDifferenceDiscount: String?

            public var mostDifferenceFlightNo: String?

            public var mostDifferencePrice: Double?

            public var mostDifferenceReason: String?

            public var mostPrice: Double?

            public var negotiationCouponFee: Double?

            public var oilFee: Double?

            public var orderId: String?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var personSettlePrice: Double?

            public var preBookTip: String?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var refundFee: Double?

            public var refundResult: String?

            public var refundUpgradeCost: Double?

            public var remark: String?

            public var repeatRefund: String?

            public var sealPrice: Double?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var status: Int32?

            public var taxRate: String?

            public var thirdItineraryId: String?

            public var ticketId: String?

            public var trade: String?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberTypeName: String?

            public var travelerName: String?

            public var upgradeCost: Double?

            public var voucherType: Int32?

            public var voyageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.advanceDay != nil {
                    map["advance_day"] = self.advanceDay!
                }
                if self.airlineCorpCode != nil {
                    map["airline_corp_code"] = self.airlineCorpCode!
                }
                if self.airlineCorpName != nil {
                    map["airline_corp_name"] = self.airlineCorpName!
                }
                if self.alipayId != nil {
                    map["alipay_id"] = self.alipayId!
                }
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.arrStation != nil {
                    map["arr_station"] = self.arrStation!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.btripCouponFee != nil {
                    map["btrip_coupon_fee"] = self.btripCouponFee!
                }
                if self.buildFee != nil {
                    map["build_fee"] = self.buildFee!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.changeFee != nil {
                    map["change_fee"] = self.changeFee!
                }
                if self.changeResult != nil {
                    map["change_result"] = self.changeResult!
                }
                if self.corpPayOrderFee != nil {
                    map["corp_pay_order_fee"] = self.corpPayOrderFee!
                }
                if self.corpSettlePrice != nil {
                    map["corp_settle_price"] = self.corpSettlePrice!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.coupon != nil {
                    map["coupon"] = self.coupon!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.deptCity != nil {
                    map["dept_city"] = self.deptCity!
                }
                if self.deptDate != nil {
                    map["dept_date"] = self.deptDate!
                }
                if self.deptStation != nil {
                    map["dept_station"] = self.deptStation!
                }
                if self.deptTime != nil {
                    map["dept_time"] = self.deptTime!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.insOrderId != nil {
                    map["ins_order_id"] = self.insOrderId!
                }
                if self.insuranceFee != nil {
                    map["insurance_fee"] = self.insuranceFee!
                }
                if self.insuranceNumber != nil {
                    map["insurance_number"] = self.insuranceNumber!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.itemType != nil {
                    map["item_type"] = self.itemType!
                }
                if self.itineraryNum != nil {
                    map["itinerary_num"] = self.itineraryNum!
                }
                if self.itineraryPrice != nil {
                    map["itinerary_price"] = self.itineraryPrice!
                }
                if self.mileage != nil {
                    map["mileage"] = self.mileage!
                }
                if self.mostDifferenceDeptTime != nil {
                    map["most_difference_dept_time"] = self.mostDifferenceDeptTime!
                }
                if self.mostDifferenceDiscount != nil {
                    map["most_difference_discount"] = self.mostDifferenceDiscount!
                }
                if self.mostDifferenceFlightNo != nil {
                    map["most_difference_flight_no"] = self.mostDifferenceFlightNo!
                }
                if self.mostDifferencePrice != nil {
                    map["most_difference_price"] = self.mostDifferencePrice!
                }
                if self.mostDifferenceReason != nil {
                    map["most_difference_reason"] = self.mostDifferenceReason!
                }
                if self.mostPrice != nil {
                    map["most_price"] = self.mostPrice!
                }
                if self.negotiationCouponFee != nil {
                    map["negotiation_coupon_fee"] = self.negotiationCouponFee!
                }
                if self.oilFee != nil {
                    map["oil_fee"] = self.oilFee!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.personSettlePrice != nil {
                    map["person_settle_price"] = self.personSettlePrice!
                }
                if self.preBookTip != nil {
                    map["pre_book_tip"] = self.preBookTip!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundResult != nil {
                    map["refund_result"] = self.refundResult!
                }
                if self.refundUpgradeCost != nil {
                    map["refund_upgrade_cost"] = self.refundUpgradeCost!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.repeatRefund != nil {
                    map["repeat_refund"] = self.repeatRefund!
                }
                if self.sealPrice != nil {
                    map["seal_price"] = self.sealPrice!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.ticketId != nil {
                    map["ticket_id"] = self.ticketId!
                }
                if self.trade != nil {
                    map["trade"] = self.trade!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberTypeName != nil {
                    map["traveler_member_type_name"] = self.travelerMemberTypeName!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.upgradeCost != nil {
                    map["upgrade_cost"] = self.upgradeCost!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                if self.voyageName != nil {
                    map["voyage_name"] = self.voyageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("advance_day") && dict["advance_day"] != nil {
                    self.advanceDay = dict["advance_day"] as! Int32
                }
                if dict.keys.contains("airline_corp_code") && dict["airline_corp_code"] != nil {
                    self.airlineCorpCode = dict["airline_corp_code"] as! String
                }
                if dict.keys.contains("airline_corp_name") && dict["airline_corp_name"] != nil {
                    self.airlineCorpName = dict["airline_corp_name"] as! String
                }
                if dict.keys.contains("alipay_id") && dict["alipay_id"] != nil {
                    self.alipayId = dict["alipay_id"] as! String
                }
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                    self.arrStation = dict["arr_station"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("btrip_coupon_fee") && dict["btrip_coupon_fee"] != nil {
                    self.btripCouponFee = dict["btrip_coupon_fee"] as! Double
                }
                if dict.keys.contains("build_fee") && dict["build_fee"] != nil {
                    self.buildFee = dict["build_fee"] as! Double
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                    self.changeFee = dict["change_fee"] as! Double
                }
                if dict.keys.contains("change_result") && dict["change_result"] != nil {
                    self.changeResult = dict["change_result"] as! String
                }
                if dict.keys.contains("corp_pay_order_fee") && dict["corp_pay_order_fee"] != nil {
                    self.corpPayOrderFee = dict["corp_pay_order_fee"] as! Double
                }
                if dict.keys.contains("corp_settle_price") && dict["corp_settle_price"] != nil {
                    self.corpSettlePrice = dict["corp_settle_price"] as! Double
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("coupon") && dict["coupon"] != nil {
                    self.coupon = dict["coupon"] as! Double
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("dept_city") && dict["dept_city"] != nil {
                    self.deptCity = dict["dept_city"] as! String
                }
                if dict.keys.contains("dept_date") && dict["dept_date"] != nil {
                    self.deptDate = dict["dept_date"] as! String
                }
                if dict.keys.contains("dept_station") && dict["dept_station"] != nil {
                    self.deptStation = dict["dept_station"] as! String
                }
                if dict.keys.contains("dept_time") && dict["dept_time"] != nil {
                    self.deptTime = dict["dept_time"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                    self.insOrderId = dict["ins_order_id"] as! String
                }
                if dict.keys.contains("insurance_fee") && dict["insurance_fee"] != nil {
                    self.insuranceFee = dict["insurance_fee"] as! Double
                }
                if dict.keys.contains("insurance_number") && dict["insurance_number"] != nil {
                    self.insuranceNumber = dict["insurance_number"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("item_type") && dict["item_type"] != nil {
                    self.itemType = dict["item_type"] as! String
                }
                if dict.keys.contains("itinerary_num") && dict["itinerary_num"] != nil {
                    self.itineraryNum = dict["itinerary_num"] as! String
                }
                if dict.keys.contains("itinerary_price") && dict["itinerary_price"] != nil {
                    self.itineraryPrice = dict["itinerary_price"] as! Double
                }
                if dict.keys.contains("mileage") && dict["mileage"] != nil {
                    self.mileage = dict["mileage"] as! String
                }
                if dict.keys.contains("most_difference_dept_time") && dict["most_difference_dept_time"] != nil {
                    self.mostDifferenceDeptTime = dict["most_difference_dept_time"] as! String
                }
                if dict.keys.contains("most_difference_discount") && dict["most_difference_discount"] != nil {
                    self.mostDifferenceDiscount = dict["most_difference_discount"] as! String
                }
                if dict.keys.contains("most_difference_flight_no") && dict["most_difference_flight_no"] != nil {
                    self.mostDifferenceFlightNo = dict["most_difference_flight_no"] as! String
                }
                if dict.keys.contains("most_difference_price") && dict["most_difference_price"] != nil {
                    self.mostDifferencePrice = dict["most_difference_price"] as! Double
                }
                if dict.keys.contains("most_difference_reason") && dict["most_difference_reason"] != nil {
                    self.mostDifferenceReason = dict["most_difference_reason"] as! String
                }
                if dict.keys.contains("most_price") && dict["most_price"] != nil {
                    self.mostPrice = dict["most_price"] as! Double
                }
                if dict.keys.contains("negotiation_coupon_fee") && dict["negotiation_coupon_fee"] != nil {
                    self.negotiationCouponFee = dict["negotiation_coupon_fee"] as! Double
                }
                if dict.keys.contains("oil_fee") && dict["oil_fee"] != nil {
                    self.oilFee = dict["oil_fee"] as! Double
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("person_settle_price") && dict["person_settle_price"] != nil {
                    self.personSettlePrice = dict["person_settle_price"] as! Double
                }
                if dict.keys.contains("pre_book_tip") && dict["pre_book_tip"] != nil {
                    self.preBookTip = dict["pre_book_tip"] as! String
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Double
                }
                if dict.keys.contains("refund_result") && dict["refund_result"] != nil {
                    self.refundResult = dict["refund_result"] as! String
                }
                if dict.keys.contains("refund_upgrade_cost") && dict["refund_upgrade_cost"] != nil {
                    self.refundUpgradeCost = dict["refund_upgrade_cost"] as! Double
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("repeat_refund") && dict["repeat_refund"] != nil {
                    self.repeatRefund = dict["repeat_refund"] as! String
                }
                if dict.keys.contains("seal_price") && dict["seal_price"] != nil {
                    self.sealPrice = dict["seal_price"] as! Double
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("ticket_id") && dict["ticket_id"] != nil {
                    self.ticketId = dict["ticket_id"] as! String
                }
                if dict.keys.contains("trade") && dict["trade"] != nil {
                    self.trade = dict["trade"] as! String
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type_name") && dict["traveler_member_type_name"] != nil {
                    self.travelerMemberTypeName = dict["traveler_member_type_name"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("upgrade_cost") && dict["upgrade_cost"] != nil {
                    self.upgradeCost = dict["upgrade_cost"] as! Double
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
                if dict.keys.contains("voyage_name") && dict["voyage_name"] != nil {
                    self.voyageName = dict["voyage_name"] as! String
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var dataList: [FlightBillSettlementQueryResponseBody.Module.DataList]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["data_list"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalNum != nil {
                map["total_num"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("data_list") && dict["data_list"] != nil {
                var tmp : [FlightBillSettlementQueryResponseBody.Module.DataList] = []
                for v in dict["data_list"] as! [Any] {
                    var model = FlightBillSettlementQueryResponseBody.Module.DataList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.dataList = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_num") && dict["total_num"] != nil {
                self.totalNum = dict["total_num"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightCancelOrderHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightCancelOrderRequest : Tea.TeaModel {
    public var disOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
    }
}

public class FlightCancelOrderResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var cancelTime: String?

        public var failCode: String?

        public var failReason: String?

        public var orderStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cancelTime != nil {
                map["cancel_time"] = self.cancelTime!
            }
            if self.failCode != nil {
                map["fail_code"] = self.failCode!
            }
            if self.failReason != nil {
                map["fail_reason"] = self.failReason!
            }
            if self.orderStatus != nil {
                map["order_status"] = self.orderStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cancel_time") && dict["cancel_time"] != nil {
                self.cancelTime = dict["cancel_time"] as! String
            }
            if dict.keys.contains("fail_code") && dict["fail_code"] != nil {
                self.failCode = dict["fail_code"] as! String
            }
            if dict.keys.contains("fail_reason") && dict["fail_reason"] != nil {
                self.failReason = dict["fail_reason"] as! String
            }
            if dict.keys.contains("order_status") && dict["order_status"] != nil {
                self.orderStatus = dict["order_status"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightCancelOrderResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightCancelOrderResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightCancelOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightCancelOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightCancelOrderResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightCancelOrderV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightCancelOrderV2Request : Tea.TeaModel {
    public var isvName: String?

    public var orderId: String?

    public var outOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
    }
}

public class FlightCancelOrderV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var cancelTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cancelTime != nil {
                map["cancel_time"] = self.cancelTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cancel_time") && dict["cancel_time"] != nil {
                self.cancelTime = dict["cancel_time"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightCancelOrderV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightCancelOrderV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightCancelOrderV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightCancelOrderV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightCancelOrderV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightCreateOrderHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightCreateOrderRequest : Tea.TeaModel {
    public class ContactInfo : Tea.TeaModel {
        public var contactEmail: String?

        public var contactName: String?

        public var contactPhone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactEmail != nil {
                map["contact_email"] = self.contactEmail!
            }
            if self.contactName != nil {
                map["contact_name"] = self.contactName!
            }
            if self.contactPhone != nil {
                map["contact_phone"] = self.contactPhone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("contact_email") && dict["contact_email"] != nil {
                self.contactEmail = dict["contact_email"] as! String
            }
            if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                self.contactName = dict["contact_name"] as! String
            }
            if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                self.contactPhone = dict["contact_phone"] as! String
            }
        }
    }
    public class TravelerInfoList : Tea.TeaModel {
        public var birthday: String?

        public var certNation: String?

        public var certNo: String?

        public var certType: String?

        public var certValidDate: String?

        public var name: String?

        public var nationality: String?

        public var nationalityCode: String?

        public var outUserId: String?

        public var phone: String?

        public var sex: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.birthday != nil {
                map["birthday"] = self.birthday!
            }
            if self.certNation != nil {
                map["cert_nation"] = self.certNation!
            }
            if self.certNo != nil {
                map["cert_no"] = self.certNo!
            }
            if self.certType != nil {
                map["cert_type"] = self.certType!
            }
            if self.certValidDate != nil {
                map["cert_valid_date"] = self.certValidDate!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.nationality != nil {
                map["nationality"] = self.nationality!
            }
            if self.nationalityCode != nil {
                map["nationality_code"] = self.nationalityCode!
            }
            if self.outUserId != nil {
                map["out_user_id"] = self.outUserId!
            }
            if self.phone != nil {
                map["phone"] = self.phone!
            }
            if self.sex != nil {
                map["sex"] = self.sex!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("birthday") && dict["birthday"] != nil {
                self.birthday = dict["birthday"] as! String
            }
            if dict.keys.contains("cert_nation") && dict["cert_nation"] != nil {
                self.certNation = dict["cert_nation"] as! String
            }
            if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                self.certNo = dict["cert_no"] as! String
            }
            if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                self.certType = dict["cert_type"] as! String
            }
            if dict.keys.contains("cert_valid_date") && dict["cert_valid_date"] != nil {
                self.certValidDate = dict["cert_valid_date"] as! String
            }
            if dict.keys.contains("name") && dict["name"] != nil {
                self.name = dict["name"] as! String
            }
            if dict.keys.contains("nationality") && dict["nationality"] != nil {
                self.nationality = dict["nationality"] as! String
            }
            if dict.keys.contains("nationality_code") && dict["nationality_code"] != nil {
                self.nationalityCode = dict["nationality_code"] as! String
            }
            if dict.keys.contains("out_user_id") && dict["out_user_id"] != nil {
                self.outUserId = dict["out_user_id"] as! String
            }
            if dict.keys.contains("phone") && dict["phone"] != nil {
                self.phone = dict["phone"] as! String
            }
            if dict.keys.contains("sex") && dict["sex"] != nil {
                self.sex = dict["sex"] as! Int32
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! String
            }
        }
    }
    public var arrAirportCode: String?

    public var arrCityCode: String?

    public var autoPay: Int32?

    public var buyerName: String?

    public var buyerUniqueKey: String?

    public var contactInfo: FlightCreateOrderRequest.ContactInfo?

    public var depAirportCode: String?

    public var depCityCode: String?

    public var depDate: String?

    public var disOrderId: String?

    public var orderAttr: [String: Any]?

    public var orderParams: String?

    public var otaItemId: String?

    public var price: Int64?

    public var receiptAddress: String?

    public var receiptTarget: Int32?

    public var receiptTitle: String?

    public var travelerInfoList: [FlightCreateOrderRequest.TravelerInfoList]?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrAirportCode != nil {
            map["arr_airport_code"] = self.arrAirportCode!
        }
        if self.arrCityCode != nil {
            map["arr_city_code"] = self.arrCityCode!
        }
        if self.autoPay != nil {
            map["auto_pay"] = self.autoPay!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.buyerUniqueKey != nil {
            map["buyer_unique_key"] = self.buyerUniqueKey!
        }
        if self.contactInfo != nil {
            map["contact_info"] = self.contactInfo?.toMap()
        }
        if self.depAirportCode != nil {
            map["dep_airport_code"] = self.depAirportCode!
        }
        if self.depCityCode != nil {
            map["dep_city_code"] = self.depCityCode!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.orderAttr != nil {
            map["order_attr"] = self.orderAttr!
        }
        if self.orderParams != nil {
            map["order_params"] = self.orderParams!
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        if self.price != nil {
            map["price"] = self.price!
        }
        if self.receiptAddress != nil {
            map["receipt_address"] = self.receiptAddress!
        }
        if self.receiptTarget != nil {
            map["receipt_target"] = self.receiptTarget!
        }
        if self.receiptTitle != nil {
            map["receipt_title"] = self.receiptTitle!
        }
        if self.travelerInfoList != nil {
            var tmp : [Any] = []
            for k in self.travelerInfoList! {
                tmp.append(k.toMap())
            }
            map["traveler_info_list"] = tmp
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
            self.arrAirportCode = dict["arr_airport_code"] as! String
        }
        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
            self.arrCityCode = dict["arr_city_code"] as! String
        }
        if dict.keys.contains("auto_pay") && dict["auto_pay"] != nil {
            self.autoPay = dict["auto_pay"] as! Int32
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("buyer_unique_key") && dict["buyer_unique_key"] != nil {
            self.buyerUniqueKey = dict["buyer_unique_key"] as! String
        }
        if dict.keys.contains("contact_info") && dict["contact_info"] != nil {
            var model = FlightCreateOrderRequest.ContactInfo()
            model.fromMap(dict["contact_info"] as! [String: Any])
            self.contactInfo = model
        }
        if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
            self.depAirportCode = dict["dep_airport_code"] as! String
        }
        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
            self.depCityCode = dict["dep_city_code"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("order_attr") && dict["order_attr"] != nil {
            self.orderAttr = dict["order_attr"] as! [String: Any]
        }
        if dict.keys.contains("order_params") && dict["order_params"] != nil {
            self.orderParams = dict["order_params"] as! String
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
        if dict.keys.contains("price") && dict["price"] != nil {
            self.price = dict["price"] as! Int64
        }
        if dict.keys.contains("receipt_address") && dict["receipt_address"] != nil {
            self.receiptAddress = dict["receipt_address"] as! String
        }
        if dict.keys.contains("receipt_target") && dict["receipt_target"] != nil {
            self.receiptTarget = dict["receipt_target"] as! Int32
        }
        if dict.keys.contains("receipt_title") && dict["receipt_title"] != nil {
            self.receiptTitle = dict["receipt_title"] as! String
        }
        if dict.keys.contains("traveler_info_list") && dict["traveler_info_list"] != nil {
            var tmp : [FlightCreateOrderRequest.TravelerInfoList] = []
            for v in dict["traveler_info_list"] as! [Any] {
                var model = FlightCreateOrderRequest.TravelerInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerInfoList = tmp
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class FlightCreateOrderShrinkRequest : Tea.TeaModel {
    public var arrAirportCode: String?

    public var arrCityCode: String?

    public var autoPay: Int32?

    public var buyerName: String?

    public var buyerUniqueKey: String?

    public var contactInfoShrink: String?

    public var depAirportCode: String?

    public var depCityCode: String?

    public var depDate: String?

    public var disOrderId: String?

    public var orderAttrShrink: String?

    public var orderParams: String?

    public var otaItemId: String?

    public var price: Int64?

    public var receiptAddress: String?

    public var receiptTarget: Int32?

    public var receiptTitle: String?

    public var travelerInfoListShrink: String?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrAirportCode != nil {
            map["arr_airport_code"] = self.arrAirportCode!
        }
        if self.arrCityCode != nil {
            map["arr_city_code"] = self.arrCityCode!
        }
        if self.autoPay != nil {
            map["auto_pay"] = self.autoPay!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.buyerUniqueKey != nil {
            map["buyer_unique_key"] = self.buyerUniqueKey!
        }
        if self.contactInfoShrink != nil {
            map["contact_info"] = self.contactInfoShrink!
        }
        if self.depAirportCode != nil {
            map["dep_airport_code"] = self.depAirportCode!
        }
        if self.depCityCode != nil {
            map["dep_city_code"] = self.depCityCode!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.orderAttrShrink != nil {
            map["order_attr"] = self.orderAttrShrink!
        }
        if self.orderParams != nil {
            map["order_params"] = self.orderParams!
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        if self.price != nil {
            map["price"] = self.price!
        }
        if self.receiptAddress != nil {
            map["receipt_address"] = self.receiptAddress!
        }
        if self.receiptTarget != nil {
            map["receipt_target"] = self.receiptTarget!
        }
        if self.receiptTitle != nil {
            map["receipt_title"] = self.receiptTitle!
        }
        if self.travelerInfoListShrink != nil {
            map["traveler_info_list"] = self.travelerInfoListShrink!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
            self.arrAirportCode = dict["arr_airport_code"] as! String
        }
        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
            self.arrCityCode = dict["arr_city_code"] as! String
        }
        if dict.keys.contains("auto_pay") && dict["auto_pay"] != nil {
            self.autoPay = dict["auto_pay"] as! Int32
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("buyer_unique_key") && dict["buyer_unique_key"] != nil {
            self.buyerUniqueKey = dict["buyer_unique_key"] as! String
        }
        if dict.keys.contains("contact_info") && dict["contact_info"] != nil {
            self.contactInfoShrink = dict["contact_info"] as! String
        }
        if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
            self.depAirportCode = dict["dep_airport_code"] as! String
        }
        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
            self.depCityCode = dict["dep_city_code"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("order_attr") && dict["order_attr"] != nil {
            self.orderAttrShrink = dict["order_attr"] as! String
        }
        if dict.keys.contains("order_params") && dict["order_params"] != nil {
            self.orderParams = dict["order_params"] as! String
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
        if dict.keys.contains("price") && dict["price"] != nil {
            self.price = dict["price"] as! Int64
        }
        if dict.keys.contains("receipt_address") && dict["receipt_address"] != nil {
            self.receiptAddress = dict["receipt_address"] as! String
        }
        if dict.keys.contains("receipt_target") && dict["receipt_target"] != nil {
            self.receiptTarget = dict["receipt_target"] as! Int32
        }
        if dict.keys.contains("receipt_title") && dict["receipt_title"] != nil {
            self.receiptTitle = dict["receipt_title"] as! String
        }
        if dict.keys.contains("traveler_info_list") && dict["traveler_info_list"] != nil {
            self.travelerInfoListShrink = dict["traveler_info_list"] as! String
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class FlightCreateOrderResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var alipayTradeNo: String?

        public var btripOrderId: Int64?

        public var disOrderId: String?

        public var lastPayTime: String?

        public var orderStatus: Int32?

        public var payStatus: Int32?

        public var paymentPrice: Int64?

        public var totalPrice: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alipayTradeNo != nil {
                map["alipay_trade_no"] = self.alipayTradeNo!
            }
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.disOrderId != nil {
                map["dis_order_id"] = self.disOrderId!
            }
            if self.lastPayTime != nil {
                map["last_pay_time"] = self.lastPayTime!
            }
            if self.orderStatus != nil {
                map["order_status"] = self.orderStatus!
            }
            if self.payStatus != nil {
                map["pay_status"] = self.payStatus!
            }
            if self.paymentPrice != nil {
                map["payment_price"] = self.paymentPrice!
            }
            if self.totalPrice != nil {
                map["total_price"] = self.totalPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                self.alipayTradeNo = dict["alipay_trade_no"] as! String
            }
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! Int64
            }
            if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
                self.disOrderId = dict["dis_order_id"] as! String
            }
            if dict.keys.contains("last_pay_time") && dict["last_pay_time"] != nil {
                self.lastPayTime = dict["last_pay_time"] as! String
            }
            if dict.keys.contains("order_status") && dict["order_status"] != nil {
                self.orderStatus = dict["order_status"] as! Int32
            }
            if dict.keys.contains("pay_status") && dict["pay_status"] != nil {
                self.payStatus = dict["pay_status"] as! Int32
            }
            if dict.keys.contains("payment_price") && dict["payment_price"] != nil {
                self.paymentPrice = dict["payment_price"] as! Int64
            }
            if dict.keys.contains("total_price") && dict["total_price"] != nil {
                self.totalPrice = dict["total_price"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightCreateOrderResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightCreateOrderResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightCreateOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightCreateOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightCreateOrderResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightCreateOrderV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightCreateOrderV2Request : Tea.TeaModel {
    public class ContactInfo : Tea.TeaModel {
        public var contactEmail: String?

        public var contactName: String?

        public var contactPhone: String?

        public var sendMsgToPassenger: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactEmail != nil {
                map["contact_email"] = self.contactEmail!
            }
            if self.contactName != nil {
                map["contact_name"] = self.contactName!
            }
            if self.contactPhone != nil {
                map["contact_phone"] = self.contactPhone!
            }
            if self.sendMsgToPassenger != nil {
                map["send_msg_to_passenger"] = self.sendMsgToPassenger!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("contact_email") && dict["contact_email"] != nil {
                self.contactEmail = dict["contact_email"] as! String
            }
            if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                self.contactName = dict["contact_name"] as! String
            }
            if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                self.contactPhone = dict["contact_phone"] as! String
            }
            if dict.keys.contains("send_msg_to_passenger") && dict["send_msg_to_passenger"] != nil {
                self.sendMsgToPassenger = dict["send_msg_to_passenger"] as! Bool
            }
        }
    }
    public class Travelers : Tea.TeaModel {
        public var birthday: String?

        public var certNation: String?

        public var certNo: String?

        public var certType: Int32?

        public var certValidDate: String?

        public var costCenterName: String?

        public var costCenterNumber: String?

        public var deptId: String?

        public var deptName: String?

        public var gender: Int32?

        public var invoiceTitle: String?

        public var nationality: String?

        public var nationalityCode: String?

        public var passengerName: String?

        public var passengerType: Int32?

        public var phone: String?

        public var projectCode: String?

        public var projectTitle: String?

        public var userId: String?

        public var userType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.birthday != nil {
                map["birthday"] = self.birthday!
            }
            if self.certNation != nil {
                map["cert_nation"] = self.certNation!
            }
            if self.certNo != nil {
                map["cert_no"] = self.certNo!
            }
            if self.certType != nil {
                map["cert_type"] = self.certType!
            }
            if self.certValidDate != nil {
                map["cert_valid_date"] = self.certValidDate!
            }
            if self.costCenterName != nil {
                map["cost_center_name"] = self.costCenterName!
            }
            if self.costCenterNumber != nil {
                map["cost_center_number"] = self.costCenterNumber!
            }
            if self.deptId != nil {
                map["dept_id"] = self.deptId!
            }
            if self.deptName != nil {
                map["dept_name"] = self.deptName!
            }
            if self.gender != nil {
                map["gender"] = self.gender!
            }
            if self.invoiceTitle != nil {
                map["invoice_title"] = self.invoiceTitle!
            }
            if self.nationality != nil {
                map["nationality"] = self.nationality!
            }
            if self.nationalityCode != nil {
                map["nationality_code"] = self.nationalityCode!
            }
            if self.passengerName != nil {
                map["passenger_name"] = self.passengerName!
            }
            if self.passengerType != nil {
                map["passenger_type"] = self.passengerType!
            }
            if self.phone != nil {
                map["phone"] = self.phone!
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userType != nil {
                map["user_type"] = self.userType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("birthday") && dict["birthday"] != nil {
                self.birthday = dict["birthday"] as! String
            }
            if dict.keys.contains("cert_nation") && dict["cert_nation"] != nil {
                self.certNation = dict["cert_nation"] as! String
            }
            if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                self.certNo = dict["cert_no"] as! String
            }
            if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                self.certType = dict["cert_type"] as! Int32
            }
            if dict.keys.contains("cert_valid_date") && dict["cert_valid_date"] != nil {
                self.certValidDate = dict["cert_valid_date"] as! String
            }
            if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                self.costCenterName = dict["cost_center_name"] as! String
            }
            if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                self.costCenterNumber = dict["cost_center_number"] as! String
            }
            if dict.keys.contains("dept_id") && dict["dept_id"] != nil {
                self.deptId = dict["dept_id"] as! String
            }
            if dict.keys.contains("dept_name") && dict["dept_name"] != nil {
                self.deptName = dict["dept_name"] as! String
            }
            if dict.keys.contains("gender") && dict["gender"] != nil {
                self.gender = dict["gender"] as! Int32
            }
            if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                self.invoiceTitle = dict["invoice_title"] as! String
            }
            if dict.keys.contains("nationality") && dict["nationality"] != nil {
                self.nationality = dict["nationality"] as! String
            }
            if dict.keys.contains("nationality_code") && dict["nationality_code"] != nil {
                self.nationalityCode = dict["nationality_code"] as! String
            }
            if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                self.passengerName = dict["passenger_name"] as! String
            }
            if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                self.passengerType = dict["passenger_type"] as! Int32
            }
            if dict.keys.contains("phone") && dict["phone"] != nil {
                self.phone = dict["phone"] as! String
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_type") && dict["user_type"] != nil {
                self.userType = dict["user_type"] as! Int32
            }
        }
    }
    public var asyncCreateOrderKey: String?

    public var asyncCreateOrderMode: Bool?

    public var btripUserId: String?

    public var buyerName: String?

    public var contactInfo: FlightCreateOrderV2Request.ContactInfo?

    public var isvName: String?

    public var otaItemId: String?

    public var outOrderId: String?

    public var totalPriceCent: Int64?

    public var travelers: [FlightCreateOrderV2Request.Travelers]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.asyncCreateOrderKey != nil {
            map["async_create_order_key"] = self.asyncCreateOrderKey!
        }
        if self.asyncCreateOrderMode != nil {
            map["async_create_order_mode"] = self.asyncCreateOrderMode!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.contactInfo != nil {
            map["contact_info"] = self.contactInfo?.toMap()
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.totalPriceCent != nil {
            map["total_price_cent"] = self.totalPriceCent!
        }
        if self.travelers != nil {
            var tmp : [Any] = []
            for k in self.travelers! {
                tmp.append(k.toMap())
            }
            map["travelers"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("async_create_order_key") && dict["async_create_order_key"] != nil {
            self.asyncCreateOrderKey = dict["async_create_order_key"] as! String
        }
        if dict.keys.contains("async_create_order_mode") && dict["async_create_order_mode"] != nil {
            self.asyncCreateOrderMode = dict["async_create_order_mode"] as! Bool
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("contact_info") && dict["contact_info"] != nil {
            var model = FlightCreateOrderV2Request.ContactInfo()
            model.fromMap(dict["contact_info"] as! [String: Any])
            self.contactInfo = model
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("total_price_cent") && dict["total_price_cent"] != nil {
            self.totalPriceCent = dict["total_price_cent"] as! Int64
        }
        if dict.keys.contains("travelers") && dict["travelers"] != nil {
            var tmp : [FlightCreateOrderV2Request.Travelers] = []
            for v in dict["travelers"] as! [Any] {
                var model = FlightCreateOrderV2Request.Travelers()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelers = tmp
        }
    }
}

public class FlightCreateOrderV2ShrinkRequest : Tea.TeaModel {
    public var asyncCreateOrderKey: String?

    public var asyncCreateOrderMode: Bool?

    public var btripUserId: String?

    public var buyerName: String?

    public var contactInfoShrink: String?

    public var isvName: String?

    public var otaItemId: String?

    public var outOrderId: String?

    public var totalPriceCent: Int64?

    public var travelersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.asyncCreateOrderKey != nil {
            map["async_create_order_key"] = self.asyncCreateOrderKey!
        }
        if self.asyncCreateOrderMode != nil {
            map["async_create_order_mode"] = self.asyncCreateOrderMode!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.contactInfoShrink != nil {
            map["contact_info"] = self.contactInfoShrink!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.totalPriceCent != nil {
            map["total_price_cent"] = self.totalPriceCent!
        }
        if self.travelersShrink != nil {
            map["travelers"] = self.travelersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("async_create_order_key") && dict["async_create_order_key"] != nil {
            self.asyncCreateOrderKey = dict["async_create_order_key"] as! String
        }
        if dict.keys.contains("async_create_order_mode") && dict["async_create_order_mode"] != nil {
            self.asyncCreateOrderMode = dict["async_create_order_mode"] as! Bool
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("contact_info") && dict["contact_info"] != nil {
            self.contactInfoShrink = dict["contact_info"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("total_price_cent") && dict["total_price_cent"] != nil {
            self.totalPriceCent = dict["total_price_cent"] as! Int64
        }
        if dict.keys.contains("travelers") && dict["travelers"] != nil {
            self.travelersShrink = dict["travelers"] as! String
        }
    }
}

public class FlightCreateOrderV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var asyncCreateOrderKey: String?

        public var latestPayTime: String?

        public var orderId: Int64?

        public var outOrderId: String?

        public var status: Int32?

        public var totalPrice: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncCreateOrderKey != nil {
                map["async_create_order_key"] = self.asyncCreateOrderKey!
            }
            if self.latestPayTime != nil {
                map["latest_pay_time"] = self.latestPayTime!
            }
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.outOrderId != nil {
                map["out_order_id"] = self.outOrderId!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.totalPrice != nil {
                map["total_price"] = self.totalPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("async_create_order_key") && dict["async_create_order_key"] != nil {
                self.asyncCreateOrderKey = dict["async_create_order_key"] as! String
            }
            if dict.keys.contains("latest_pay_time") && dict["latest_pay_time"] != nil {
                self.latestPayTime = dict["latest_pay_time"] as! String
            }
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! Int64
            }
            if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
                self.outOrderId = dict["out_order_id"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("total_price") && dict["total_price"] != nil {
                self.totalPrice = dict["total_price"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightCreateOrderV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightCreateOrderV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightCreateOrderV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightCreateOrderV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightCreateOrderV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightExceedApplyQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class FlightExceedApplyQueryRequest : Tea.TeaModel {
    public var applyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
    }
}

public class FlightExceedApplyQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ApplyIntentionInfoDo : Tea.TeaModel {
            public var arrAirportName: String?

            public var arrCity: String?

            public var arrCityName: String?

            public var arrTime: String?

            public var cabin: String?

            public var cabinClass: Int32?

            public var cabinClassStr: String?

            public var depAirportName: String?

            public var depCity: String?

            public var depCityName: String?

            public var depTime: String?

            public var discount: String?

            public var flightNo: String?

            public var price: Int64?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportName != nil {
                    map["arr_airport_name"] = self.arrAirportName!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassStr != nil {
                    map["cabin_class_str"] = self.cabinClassStr!
                }
                if self.depAirportName != nil {
                    map["dep_airport_name"] = self.depAirportName!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_name") && dict["arr_airport_name"] != nil {
                    self.arrAirportName = dict["arr_airport_name"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! Int32
                }
                if dict.keys.contains("cabin_class_str") && dict["cabin_class_str"] != nil {
                    self.cabinClassStr = dict["cabin_class_str"] as! String
                }
                if dict.keys.contains("dep_airport_name") && dict["dep_airport_name"] != nil {
                    self.depAirportName = dict["dep_airport_name"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class ApplyRecommendFlights : Tea.TeaModel {
            public var arrAirportName: String?

            public var arrCityName: String?

            public var arrTime: String?

            public var cabin: String?

            public var cabinClass: Int32?

            public var cabinClassStr: String?

            public var depAirportName: String?

            public var depCityName: String?

            public var depTime: String?

            public var discount: String?

            public var flightNo: String?

            public var price: Int64?

            public var transferAirportName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportName != nil {
                    map["arr_airport_name"] = self.arrAirportName!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassStr != nil {
                    map["cabin_class_str"] = self.cabinClassStr!
                }
                if self.depAirportName != nil {
                    map["dep_airport_name"] = self.depAirportName!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.transferAirportName != nil {
                    map["transfer_airport_name"] = self.transferAirportName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_name") && dict["arr_airport_name"] != nil {
                    self.arrAirportName = dict["arr_airport_name"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! Int32
                }
                if dict.keys.contains("cabin_class_str") && dict["cabin_class_str"] != nil {
                    self.cabinClassStr = dict["cabin_class_str"] as! String
                }
                if dict.keys.contains("dep_airport_name") && dict["dep_airport_name"] != nil {
                    self.depAirportName = dict["dep_airport_name"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("transfer_airport_name") && dict["transfer_airport_name"] != nil {
                    self.transferAirportName = dict["transfer_airport_name"] as! String
                }
            }
        }
        public var applyId: Int64?

        public var applyIntentionInfoDo: FlightExceedApplyQueryResponseBody.Module.ApplyIntentionInfoDo?

        public var applyRecommendFlights: FlightExceedApplyQueryResponseBody.Module.ApplyRecommendFlights?

        public var btripCause: String?

        public var corpId: String?

        public var exceedReason: String?

        public var exceedType: Int32?

        public var originStandard: String?

        public var status: Int32?

        public var submitTime: String?

        public var thirdpartApplyId: String?

        public var thirdpartCorpId: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.applyIntentionInfoDo?.validate()
            try self.applyRecommendFlights?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.applyIntentionInfoDo != nil {
                map["apply_intention_info_do"] = self.applyIntentionInfoDo?.toMap()
            }
            if self.applyRecommendFlights != nil {
                map["apply_recommend_flights"] = self.applyRecommendFlights?.toMap()
            }
            if self.btripCause != nil {
                map["btrip_cause"] = self.btripCause!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.exceedReason != nil {
                map["exceed_reason"] = self.exceedReason!
            }
            if self.exceedType != nil {
                map["exceed_type"] = self.exceedType!
            }
            if self.originStandard != nil {
                map["origin_standard"] = self.originStandard!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.submitTime != nil {
                map["submit_time"] = self.submitTime!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartCorpId != nil {
                map["thirdpart_corp_id"] = self.thirdpartCorpId!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("apply_intention_info_do") && dict["apply_intention_info_do"] != nil {
                var model = FlightExceedApplyQueryResponseBody.Module.ApplyIntentionInfoDo()
                model.fromMap(dict["apply_intention_info_do"] as! [String: Any])
                self.applyIntentionInfoDo = model
            }
            if dict.keys.contains("apply_recommend_flights") && dict["apply_recommend_flights"] != nil {
                var model = FlightExceedApplyQueryResponseBody.Module.ApplyRecommendFlights()
                model.fromMap(dict["apply_recommend_flights"] as! [String: Any])
                self.applyRecommendFlights = model
            }
            if dict.keys.contains("btrip_cause") && dict["btrip_cause"] != nil {
                self.btripCause = dict["btrip_cause"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                self.exceedReason = dict["exceed_reason"] as! String
            }
            if dict.keys.contains("exceed_type") && dict["exceed_type"] != nil {
                self.exceedType = dict["exceed_type"] as! Int32
            }
            if dict.keys.contains("origin_standard") && dict["origin_standard"] != nil {
                self.originStandard = dict["origin_standard"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("submit_time") && dict["submit_time"] != nil {
                self.submitTime = dict["submit_time"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_corp_id") && dict["thirdpart_corp_id"] != nil {
                self.thirdpartCorpId = dict["thirdpart_corp_id"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightExceedApplyQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightExceedApplyQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightExceedApplyQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightExceedApplyQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightExceedApplyQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightItineraryScanQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class FlightItineraryScanQueryRequest : Tea.TeaModel {
    public var billDate: String?

    public var billId: Int64?

    public var invoiceSubTaskId: Int64?

    public var itineraryNum: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var ticketNo: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        if self.billId != nil {
            map["bill_id"] = self.billId!
        }
        if self.invoiceSubTaskId != nil {
            map["invoice_sub_task_id"] = self.invoiceSubTaskId!
        }
        if self.itineraryNum != nil {
            map["itinerary_num"] = self.itineraryNum!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.ticketNo != nil {
            map["ticket_no"] = self.ticketNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
        if dict.keys.contains("bill_id") && dict["bill_id"] != nil {
            self.billId = dict["bill_id"] as! Int64
        }
        if dict.keys.contains("invoice_sub_task_id") && dict["invoice_sub_task_id"] != nil {
            self.invoiceSubTaskId = dict["invoice_sub_task_id"] as! Int64
        }
        if dict.keys.contains("itinerary_num") && dict["itinerary_num"] != nil {
            self.itineraryNum = dict["itinerary_num"] as! String
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
            self.ticketNo = dict["ticket_no"] as! String
        }
    }
}

public class FlightItineraryScanQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class Flights : Tea.TeaModel {
                public var arrivalStation: String?

                public var cabinClass: String?

                public var carrier: String?

                public var departureStation: String?

                public var flightDate: String?

                public var flightNumber: String?

                public var flightTime: String?

                public var freeBaggageAllowance: String?

                public var index: String?

                public var seatClass: String?

                public var validFromDate: String?

                public var validToDate: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrivalStation != nil {
                        map["arrival_station"] = self.arrivalStation!
                    }
                    if self.cabinClass != nil {
                        map["cabin_class"] = self.cabinClass!
                    }
                    if self.carrier != nil {
                        map["carrier"] = self.carrier!
                    }
                    if self.departureStation != nil {
                        map["departure_station"] = self.departureStation!
                    }
                    if self.flightDate != nil {
                        map["flight_date"] = self.flightDate!
                    }
                    if self.flightNumber != nil {
                        map["flight_number"] = self.flightNumber!
                    }
                    if self.flightTime != nil {
                        map["flight_time"] = self.flightTime!
                    }
                    if self.freeBaggageAllowance != nil {
                        map["free_baggage_allowance"] = self.freeBaggageAllowance!
                    }
                    if self.index != nil {
                        map["index"] = self.index!
                    }
                    if self.seatClass != nil {
                        map["seat_class"] = self.seatClass!
                    }
                    if self.validFromDate != nil {
                        map["valid_from_date"] = self.validFromDate!
                    }
                    if self.validToDate != nil {
                        map["valid_to_date"] = self.validToDate!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arrival_station") && dict["arrival_station"] != nil {
                        self.arrivalStation = dict["arrival_station"] as! String
                    }
                    if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                        self.cabinClass = dict["cabin_class"] as! String
                    }
                    if dict.keys.contains("carrier") && dict["carrier"] != nil {
                        self.carrier = dict["carrier"] as! String
                    }
                    if dict.keys.contains("departure_station") && dict["departure_station"] != nil {
                        self.departureStation = dict["departure_station"] as! String
                    }
                    if dict.keys.contains("flight_date") && dict["flight_date"] != nil {
                        self.flightDate = dict["flight_date"] as! String
                    }
                    if dict.keys.contains("flight_number") && dict["flight_number"] != nil {
                        self.flightNumber = dict["flight_number"] as! String
                    }
                    if dict.keys.contains("flight_time") && dict["flight_time"] != nil {
                        self.flightTime = dict["flight_time"] as! String
                    }
                    if dict.keys.contains("free_baggage_allowance") && dict["free_baggage_allowance"] != nil {
                        self.freeBaggageAllowance = dict["free_baggage_allowance"] as! String
                    }
                    if dict.keys.contains("index") && dict["index"] != nil {
                        self.index = dict["index"] as! String
                    }
                    if dict.keys.contains("seat_class") && dict["seat_class"] != nil {
                        self.seatClass = dict["seat_class"] as! String
                    }
                    if dict.keys.contains("valid_from_date") && dict["valid_from_date"] != nil {
                        self.validFromDate = dict["valid_from_date"] as! String
                    }
                    if dict.keys.contains("valid_to_date") && dict["valid_to_date"] != nil {
                        self.validToDate = dict["valid_to_date"] as! String
                    }
                }
            }
            public var agentCode: String?

            public var applyId: String?

            public var billDate: String?

            public var build: String?

            public var costCenter: String?

            public var department: String?

            public var flights: [FlightItineraryScanQueryResponseBody.Module.Items.Flights]?

            public var fuelSurcharge: String?

            public var id: String?

            public var insurance: String?

            public var invoiceTitle: String?

            public var issueCompany: String?

            public var issueDate: String?

            public var itineraryNum: String?

            public var orderId: Int64?

            public var ossUrl: String?

            public var passengerName: String?

            public var project: String?

            public var promptMessage: String?

            public var taxAmount: String?

            public var taxRate: String?

            public var ticketNo: String?

            public var ticketPrice: String?

            public var totalPrice: String?

            public var validationCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentCode != nil {
                    map["agent_code"] = self.agentCode!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.billDate != nil {
                    map["bill_date"] = self.billDate!
                }
                if self.build != nil {
                    map["build"] = self.build!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.flights != nil {
                    var tmp : [Any] = []
                    for k in self.flights! {
                        tmp.append(k.toMap())
                    }
                    map["flights"] = tmp
                }
                if self.fuelSurcharge != nil {
                    map["fuel_surcharge"] = self.fuelSurcharge!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.insurance != nil {
                    map["insurance"] = self.insurance!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.issueCompany != nil {
                    map["issue_company"] = self.issueCompany!
                }
                if self.issueDate != nil {
                    map["issue_date"] = self.issueDate!
                }
                if self.itineraryNum != nil {
                    map["itinerary_num"] = self.itineraryNum!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.ossUrl != nil {
                    map["oss_url"] = self.ossUrl!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.project != nil {
                    map["project"] = self.project!
                }
                if self.promptMessage != nil {
                    map["prompt_message"] = self.promptMessage!
                }
                if self.taxAmount != nil {
                    map["tax_amount"] = self.taxAmount!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.totalPrice != nil {
                    map["total_price"] = self.totalPrice!
                }
                if self.validationCode != nil {
                    map["validation_code"] = self.validationCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("agent_code") && dict["agent_code"] != nil {
                    self.agentCode = dict["agent_code"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
                    self.billDate = dict["bill_date"] as! String
                }
                if dict.keys.contains("build") && dict["build"] != nil {
                    self.build = dict["build"] as! String
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("flights") && dict["flights"] != nil {
                    var tmp : [FlightItineraryScanQueryResponseBody.Module.Items.Flights] = []
                    for v in dict["flights"] as! [Any] {
                        var model = FlightItineraryScanQueryResponseBody.Module.Items.Flights()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flights = tmp
                }
                if dict.keys.contains("fuel_surcharge") && dict["fuel_surcharge"] != nil {
                    self.fuelSurcharge = dict["fuel_surcharge"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! String
                }
                if dict.keys.contains("insurance") && dict["insurance"] != nil {
                    self.insurance = dict["insurance"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("issue_company") && dict["issue_company"] != nil {
                    self.issueCompany = dict["issue_company"] as! String
                }
                if dict.keys.contains("issue_date") && dict["issue_date"] != nil {
                    self.issueDate = dict["issue_date"] as! String
                }
                if dict.keys.contains("itinerary_num") && dict["itinerary_num"] != nil {
                    self.itineraryNum = dict["itinerary_num"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("oss_url") && dict["oss_url"] != nil {
                    self.ossUrl = dict["oss_url"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("project") && dict["project"] != nil {
                    self.project = dict["project"] as! String
                }
                if dict.keys.contains("prompt_message") && dict["prompt_message"] != nil {
                    self.promptMessage = dict["prompt_message"] as! String
                }
                if dict.keys.contains("tax_amount") && dict["tax_amount"] != nil {
                    self.taxAmount = dict["tax_amount"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! String
                }
                if dict.keys.contains("total_price") && dict["total_price"] != nil {
                    self.totalPrice = dict["total_price"] as! String
                }
                if dict.keys.contains("validation_code") && dict["validation_code"] != nil {
                    self.validationCode = dict["validation_code"] as! String
                }
            }
        }
        public var items: [FlightItineraryScanQueryResponseBody.Module.Items]?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var totalPage: Int32?

        public var totalSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.pageNo != nil {
                map["page_no"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalPage != nil {
                map["total_page"] = self.totalPage!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [FlightItineraryScanQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = FlightItineraryScanQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("page_no") && dict["page_no"] != nil {
                self.pageNo = dict["page_no"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_page") && dict["total_page"] != nil {
                self.totalPage = dict["total_page"] as! Int32
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightItineraryScanQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightItineraryScanQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightItineraryScanQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightItineraryScanQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightItineraryScanQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightListingSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightListingSearchRequest : Tea.TeaModel {
    public var airlineCode: String?

    public var arrCityCode: String?

    public var cabinClass: String?

    public var depCityCode: String?

    public var depDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.airlineCode != nil {
            map["airline_code"] = self.airlineCode!
        }
        if self.arrCityCode != nil {
            map["arr_city_code"] = self.arrCityCode!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.depCityCode != nil {
            map["dep_city_code"] = self.depCityCode!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
            self.airlineCode = dict["airline_code"] as! String
        }
        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
            self.arrCityCode = dict["arr_city_code"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
            self.depCityCode = dict["dep_city_code"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
    }
}

public class FlightListingSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineCode: String?

                public var airlineName: String?

                public var airlineSimpleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineName != nil {
                        map["airline_name"] = self.airlineName!
                    }
                    if self.airlineSimpleName != nil {
                        map["airline_simple_name"] = self.airlineSimpleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                        self.airlineName = dict["airline_name"] as! String
                    }
                    if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                        self.airlineSimpleName = dict["airline_simple_name"] as! String
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class FlightRuleList : Tea.TeaModel {
                public class BaggageItem : Tea.TeaModel {
                    public class BaggageSubItems : Tea.TeaModel {
                        public class BaggageSubContentVisualizes : Tea.TeaModel {
                            public class Description_ : Tea.TeaModel {
                                public var desc: String?

                                public var icon: String?

                                public var image: String?

                                public var title: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.desc != nil {
                                        map["desc"] = self.desc!
                                    }
                                    if self.icon != nil {
                                        map["icon"] = self.icon!
                                    }
                                    if self.image != nil {
                                        map["image"] = self.image!
                                    }
                                    if self.title != nil {
                                        map["title"] = self.title!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("desc") && dict["desc"] != nil {
                                        self.desc = dict["desc"] as! String
                                    }
                                    if dict.keys.contains("icon") && dict["icon"] != nil {
                                        self.icon = dict["icon"] as! String
                                    }
                                    if dict.keys.contains("image") && dict["image"] != nil {
                                        self.image = dict["image"] as! String
                                    }
                                    if dict.keys.contains("title") && dict["title"] != nil {
                                        self.title = dict["title"] as! String
                                    }
                                }
                            }
                            public class ImageDO : Tea.TeaModel {
                                public var image: String?

                                public var largest: String?

                                public var middle: String?

                                public var smallest: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.image != nil {
                                        map["image"] = self.image!
                                    }
                                    if self.largest != nil {
                                        map["largest"] = self.largest!
                                    }
                                    if self.middle != nil {
                                        map["middle"] = self.middle!
                                    }
                                    if self.smallest != nil {
                                        map["smallest"] = self.smallest!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("image") && dict["image"] != nil {
                                        self.image = dict["image"] as! String
                                    }
                                    if dict.keys.contains("largest") && dict["largest"] != nil {
                                        self.largest = dict["largest"] as! String
                                    }
                                    if dict.keys.contains("middle") && dict["middle"] != nil {
                                        self.middle = dict["middle"] as! String
                                    }
                                    if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                        self.smallest = dict["smallest"] as! String
                                    }
                                }
                            }
                            public var baggageDesc: [String]?

                            public var baggageSubContentType: Int32?

                            public var description_: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                            public var imageDO: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                            public var isHighlight: Bool?

                            public var subTitle: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.description_?.validate()
                                try self.imageDO?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.baggageDesc != nil {
                                    map["baggage_desc"] = self.baggageDesc!
                                }
                                if self.baggageSubContentType != nil {
                                    map["baggage_sub_content_type"] = self.baggageSubContentType!
                                }
                                if self.description_ != nil {
                                    map["description"] = self.description_?.toMap()
                                }
                                if self.imageDO != nil {
                                    map["image_d_o"] = self.imageDO?.toMap()
                                }
                                if self.isHighlight != nil {
                                    map["is_highlight"] = self.isHighlight!
                                }
                                if self.subTitle != nil {
                                    map["sub_title"] = self.subTitle!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                    self.baggageDesc = dict["baggage_desc"] as! [String]
                                }
                                if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                    self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                }
                                if dict.keys.contains("description") && dict["description"] != nil {
                                    var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                    model.fromMap(dict["description"] as! [String: Any])
                                    self.description_ = model
                                }
                                if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                                    var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                    model.fromMap(dict["image_d_o"] as! [String: Any])
                                    self.imageDO = model
                                }
                                if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                    self.isHighlight = dict["is_highlight"] as! Bool
                                }
                                if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                    self.subTitle = dict["sub_title"] as! String
                                }
                            }
                        }
                        public var baggageSubContentVisualizes: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes]?

                        public var extraContentVisualizes: [Any]?

                        public var isStruct: Bool?

                        public var ptc: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubContentVisualizes != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubContentVisualizes! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_content_visualizes"] = tmp
                            }
                            if self.extraContentVisualizes != nil {
                                map["extra_content_visualizes"] = self.extraContentVisualizes!
                            }
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes] = []
                                for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                    var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubContentVisualizes = tmp
                            }
                            if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                                self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                            }
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class Tips : Tea.TeaModel {
                        public var logo: String?

                        public var tipsDesc: String?

                        public var tipsImage: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.logo != nil {
                                map["logo"] = self.logo!
                            }
                            if self.tipsDesc != nil {
                                map["tips_desc"] = self.tipsDesc!
                            }
                            if self.tipsImage != nil {
                                map["tips_image"] = self.tipsImage!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("logo") && dict["logo"] != nil {
                                self.logo = dict["logo"] as! String
                            }
                            if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                self.tipsDesc = dict["tips_desc"] as! String
                            }
                            if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                self.tipsImage = dict["tips_image"] as! String
                            }
                        }
                    }
                    public var baggageSubItems: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems]?

                    public var index: Int32?

                    public var tableHead: String?

                    public var tips: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.Tips?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.tips?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.baggageSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["baggage_sub_items"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.tips != nil {
                            map["tips"] = self.tips?.toMap()
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems] = []
                            for v in dict["baggage_sub_items"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.baggageSubItems = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("tips") && dict["tips"] != nil {
                            var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.Tips()
                            model.fromMap(dict["tips"] as! [String: Any])
                            self.tips = model
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class ChangeRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class ChangeRuleItem : Tea.TeaModel {
                    public class ExtraContents : Tea.TeaModel {
                        public var content: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class RefundSubItems : Tea.TeaModel {
                        public class RefundSubContents : Tea.TeaModel {
                            public var feeDesc: String?

                            public var feeRange: String?

                            public var style: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.feeDesc != nil {
                                    map["fee_desc"] = self.feeDesc!
                                }
                                if self.feeRange != nil {
                                    map["fee_range"] = self.feeRange!
                                }
                                if self.style != nil {
                                    map["style"] = self.style!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                    self.feeDesc = dict["fee_desc"] as! String
                                }
                                if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                    self.feeRange = dict["fee_range"] as! String
                                }
                                if dict.keys.contains("style") && dict["style"] != nil {
                                    self.style = dict["style"] as! Int32
                                }
                            }
                        }
                        public var isStruct: Bool?

                        public var ptc: String?

                        public var refundSubContents: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents]?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.refundSubContents != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubContents! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_contents"] = tmp
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents] = []
                                for v in dict["refund_sub_contents"] as! [Any] {
                                    var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubContents = tmp
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var extraContents: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents]?

                    public var index: Int32?

                    public var refundSubItems: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems]?

                    public var subTableHead: [String]?

                    public var tableHead: String?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extraContents != nil {
                            var tmp : [Any] = []
                            for k in self.extraContents! {
                                tmp.append(k.toMap())
                            }
                            map["extra_contents"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.refundSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.refundSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["refund_sub_items"] = tmp
                        }
                        if self.subTableHead != nil {
                            map["sub_table_head"] = self.subTableHead!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents] = []
                            for v in dict["extra_contents"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.extraContents = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems] = []
                            for v in dict["refund_sub_items"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundSubItems = tmp
                        }
                        if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                            self.subTableHead = dict["sub_table_head"] as! [String]
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class RefundRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class RefundRuleItem : Tea.TeaModel {
                    public class ExtraContents : Tea.TeaModel {
                        public var content: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class RefundSubItems : Tea.TeaModel {
                        public class RefundSubContents : Tea.TeaModel {
                            public var feeDesc: String?

                            public var feeRange: String?

                            public var style: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.feeDesc != nil {
                                    map["fee_desc"] = self.feeDesc!
                                }
                                if self.feeRange != nil {
                                    map["fee_range"] = self.feeRange!
                                }
                                if self.style != nil {
                                    map["style"] = self.style!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                    self.feeDesc = dict["fee_desc"] as! String
                                }
                                if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                    self.feeRange = dict["fee_range"] as! String
                                }
                                if dict.keys.contains("style") && dict["style"] != nil {
                                    self.style = dict["style"] as! Int32
                                }
                            }
                        }
                        public var isStruct: Bool?

                        public var ptc: String?

                        public var refundSubContents: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents]?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.refundSubContents != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubContents! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_contents"] = tmp
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents] = []
                                for v in dict["refund_sub_contents"] as! [Any] {
                                    var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubContents = tmp
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var extraContents: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents]?

                    public var index: Int32?

                    public var refundSubItems: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems]?

                    public var subTableHead: [String]?

                    public var tableHead: String?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extraContents != nil {
                            var tmp : [Any] = []
                            for k in self.extraContents! {
                                tmp.append(k.toMap())
                            }
                            map["extra_contents"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.refundSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.refundSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["refund_sub_items"] = tmp
                        }
                        if self.subTableHead != nil {
                            map["sub_table_head"] = self.subTableHead!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents] = []
                            for v in dict["extra_contents"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.extraContents = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems] = []
                            for v in dict["refund_sub_items"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundSubItems = tmp
                        }
                        if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                            self.subTableHead = dict["sub_table_head"] as! [String]
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class SignRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.SignRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.SignRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.SignRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class UpgradeRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public var baggageInfo: String?

                public var baggageItem: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem?

                public var changeRule: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule?

                public var changeRuleItem: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem?

                public var extra: String?

                public var refundRule: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule?

                public var refundRuleItem: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem?

                public var signRule: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.SignRule?

                public var tuigaiqianInfo: String?

                public var upgradeRule: FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.baggageItem?.validate()
                    try self.changeRule?.validate()
                    try self.changeRuleItem?.validate()
                    try self.refundRule?.validate()
                    try self.refundRuleItem?.validate()
                    try self.signRule?.validate()
                    try self.upgradeRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.baggageInfo != nil {
                        map["baggage_info"] = self.baggageInfo!
                    }
                    if self.baggageItem != nil {
                        map["baggage_item"] = self.baggageItem?.toMap()
                    }
                    if self.changeRule != nil {
                        map["change_rule"] = self.changeRule?.toMap()
                    }
                    if self.changeRuleItem != nil {
                        map["change_rule_item"] = self.changeRuleItem?.toMap()
                    }
                    if self.extra != nil {
                        map["extra"] = self.extra!
                    }
                    if self.refundRule != nil {
                        map["refund_rule"] = self.refundRule?.toMap()
                    }
                    if self.refundRuleItem != nil {
                        map["refund_rule_item"] = self.refundRuleItem?.toMap()
                    }
                    if self.signRule != nil {
                        map["sign_rule"] = self.signRule?.toMap()
                    }
                    if self.tuigaiqianInfo != nil {
                        map["tuigaiqian_info"] = self.tuigaiqianInfo!
                    }
                    if self.upgradeRule != nil {
                        map["upgrade_rule"] = self.upgradeRule?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("baggage_info") && dict["baggage_info"] != nil {
                        self.baggageInfo = dict["baggage_info"] as! String
                    }
                    if dict.keys.contains("baggage_item") && dict["baggage_item"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem()
                        model.fromMap(dict["baggage_item"] as! [String: Any])
                        self.baggageItem = model
                    }
                    if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule()
                        model.fromMap(dict["change_rule"] as! [String: Any])
                        self.changeRule = model
                    }
                    if dict.keys.contains("change_rule_item") && dict["change_rule_item"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem()
                        model.fromMap(dict["change_rule_item"] as! [String: Any])
                        self.changeRuleItem = model
                    }
                    if dict.keys.contains("extra") && dict["extra"] != nil {
                        self.extra = dict["extra"] as! String
                    }
                    if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule()
                        model.fromMap(dict["refund_rule"] as! [String: Any])
                        self.refundRule = model
                    }
                    if dict.keys.contains("refund_rule_item") && dict["refund_rule_item"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem()
                        model.fromMap(dict["refund_rule_item"] as! [String: Any])
                        self.refundRuleItem = model
                    }
                    if dict.keys.contains("sign_rule") && dict["sign_rule"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.SignRule()
                        model.fromMap(dict["sign_rule"] as! [String: Any])
                        self.signRule = model
                    }
                    if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                        self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                    }
                    if dict.keys.contains("upgrade_rule") && dict["upgrade_rule"] != nil {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule()
                        model.fromMap(dict["upgrade_rule"] as! [String: Any])
                        self.upgradeRule = model
                    }
                }
            }
            public var airlineInfo: FlightListingSearchResponseBody.Module.FlightList.AirlineInfo?

            public var arrAirportInfo: FlightListingSearchResponseBody.Module.FlightList.ArrAirportInfo?

            public var arrDate: String?

            public var basicCabinPrice: Int32?

            public var buildPrice: Int32?

            public var cabin: String?

            public var cabinClass: String?

            public var carrierAirline: String?

            public var carrierNo: String?

            public var depAirportInfo: FlightListingSearchResponseBody.Module.FlightList.DepAirportInfo?

            public var depCityCode: String?

            public var depDate: String?

            public var discount: Int32?

            public var flightNo: String?

            public var flightRuleList: [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList]?

            public var flightRuleListStr: String?

            public var flightSize: String?

            public var flightType: String?

            public var invoiceType: Int32?

            public var isProtocol: Bool?

            public var isShare: Bool?

            public var isStop: Bool?

            public var isTransfer: Bool?

            public var mealDesc: String?

            public var oilPrice: Int32?

            public var otaItemId: String?

            public var price: Int32?

            public var productType: Int64?

            public var productTypeDesc: String?

            public var promotionPrice: String?

            public var remainedSeatCount: String?

            public var secretParams: String?

            public var segmentNumber: String?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public var ticketPrice: Int32?

            public var totalPrice: String?

            public var tripType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.basicCabinPrice != nil {
                    map["basic_cabin_price"] = self.basicCabinPrice!
                }
                if self.buildPrice != nil {
                    map["build_price"] = self.buildPrice!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.carrierAirline != nil {
                    map["carrier_airline"] = self.carrierAirline!
                }
                if self.carrierNo != nil {
                    map["carrier_no"] = self.carrierNo!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightRuleList != nil {
                    var tmp : [Any] = []
                    for k in self.flightRuleList! {
                        tmp.append(k.toMap())
                    }
                    map["flight_rule_list"] = tmp
                }
                if self.flightRuleListStr != nil {
                    map["flight_rule_list_str"] = self.flightRuleListStr!
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.invoiceType != nil {
                    map["invoice_type"] = self.invoiceType!
                }
                if self.isProtocol != nil {
                    map["is_protocol"] = self.isProtocol!
                }
                if self.isShare != nil {
                    map["is_share"] = self.isShare!
                }
                if self.isStop != nil {
                    map["is_stop"] = self.isStop!
                }
                if self.isTransfer != nil {
                    map["is_transfer"] = self.isTransfer!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.oilPrice != nil {
                    map["oil_price"] = self.oilPrice!
                }
                if self.otaItemId != nil {
                    map["ota_item_id"] = self.otaItemId!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.productType != nil {
                    map["product_type"] = self.productType!
                }
                if self.productTypeDesc != nil {
                    map["product_type_desc"] = self.productTypeDesc!
                }
                if self.promotionPrice != nil {
                    map["promotion_price"] = self.promotionPrice!
                }
                if self.remainedSeatCount != nil {
                    map["remained_seat_count"] = self.remainedSeatCount!
                }
                if self.secretParams != nil {
                    map["secret_params"] = self.secretParams!
                }
                if self.segmentNumber != nil {
                    map["segment_number"] = self.segmentNumber!
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.totalPrice != nil {
                    map["total_price"] = self.totalPrice!
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = FlightListingSearchResponseBody.Module.FlightList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = FlightListingSearchResponseBody.Module.FlightList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                    self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
                }
                if dict.keys.contains("build_price") && dict["build_price"] != nil {
                    self.buildPrice = dict["build_price"] as! Int32
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("carrier_airline") && dict["carrier_airline"] != nil {
                    self.carrierAirline = dict["carrier_airline"] as! String
                }
                if dict.keys.contains("carrier_no") && dict["carrier_no"] != nil {
                    self.carrierNo = dict["carrier_no"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = FlightListingSearchResponseBody.Module.FlightList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_rule_list") && dict["flight_rule_list"] != nil {
                    var tmp : [FlightListingSearchResponseBody.Module.FlightList.FlightRuleList] = []
                    for v in dict["flight_rule_list"] as! [Any] {
                        var model = FlightListingSearchResponseBody.Module.FlightList.FlightRuleList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightRuleList = tmp
                }
                if dict.keys.contains("flight_rule_list_str") && dict["flight_rule_list_str"] != nil {
                    self.flightRuleListStr = dict["flight_rule_list_str"] as! String
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                    self.invoiceType = dict["invoice_type"] as! Int32
                }
                if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                    self.isProtocol = dict["is_protocol"] as! Bool
                }
                if dict.keys.contains("is_share") && dict["is_share"] != nil {
                    self.isShare = dict["is_share"] as! Bool
                }
                if dict.keys.contains("is_stop") && dict["is_stop"] != nil {
                    self.isStop = dict["is_stop"] as! Bool
                }
                if dict.keys.contains("is_transfer") && dict["is_transfer"] != nil {
                    self.isTransfer = dict["is_transfer"] as! Bool
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                    self.oilPrice = dict["oil_price"] as! Int32
                }
                if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
                    self.otaItemId = dict["ota_item_id"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int32
                }
                if dict.keys.contains("product_type") && dict["product_type"] != nil {
                    self.productType = dict["product_type"] as! Int64
                }
                if dict.keys.contains("product_type_desc") && dict["product_type_desc"] != nil {
                    self.productTypeDesc = dict["product_type_desc"] as! String
                }
                if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                    self.promotionPrice = dict["promotion_price"] as! String
                }
                if dict.keys.contains("remained_seat_count") && dict["remained_seat_count"] != nil {
                    self.remainedSeatCount = dict["remained_seat_count"] as! String
                }
                if dict.keys.contains("secret_params") && dict["secret_params"] != nil {
                    self.secretParams = dict["secret_params"] as! String
                }
                if dict.keys.contains("segment_number") && dict["segment_number"] != nil {
                    self.segmentNumber = dict["segment_number"] as! String
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int32
                }
                if dict.keys.contains("total_price") && dict["total_price"] != nil {
                    self.totalPrice = dict["total_price"] as! String
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! Int32
                }
            }
        }
        public var flightList: [FlightListingSearchResponseBody.Module.FlightList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightList != nil {
                var tmp : [Any] = []
                for k in self.flightList! {
                    tmp.append(k.toMap())
                }
                map["flight_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_list") && dict["flight_list"] != nil {
                var tmp : [FlightListingSearchResponseBody.Module.FlightList] = []
                for v in dict["flight_list"] as! [Any] {
                    var model = FlightListingSearchResponseBody.Module.FlightList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightListingSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightListingSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightListingSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightListingSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightListingSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightListingSearchV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightListingSearchV2Request : Tea.TeaModel {
    public class SearchJourneys : Tea.TeaModel {
        public class SelectedFlights : Tea.TeaModel {
            public var arrAirportCode: String?

            public var arrCityCode: String?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var flightTime: String?

            public var marketFlightNo: String?

            public var operateFlightNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.flightTime != nil {
                    map["flight_time"] = self.flightTime!
                }
                if self.marketFlightNo != nil {
                    map["market_flight_no"] = self.marketFlightNo!
                }
                if self.operateFlightNo != nil {
                    map["operate_flight_no"] = self.operateFlightNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("flight_time") && dict["flight_time"] != nil {
                    self.flightTime = dict["flight_time"] as! String
                }
                if dict.keys.contains("market_flight_no") && dict["market_flight_no"] != nil {
                    self.marketFlightNo = dict["market_flight_no"] as! String
                }
                if dict.keys.contains("operate_flight_no") && dict["operate_flight_no"] != nil {
                    self.operateFlightNo = dict["operate_flight_no"] as! String
                }
            }
        }
        public var arrCityCode: String?

        public var depCityCode: String?

        public var depDate: String?

        public var selectedFlights: [FlightListingSearchV2Request.SearchJourneys.SelectedFlights]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.selectedFlights != nil {
                var tmp : [Any] = []
                for k in self.selectedFlights! {
                    tmp.append(k.toMap())
                }
                map["selected_flights"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("selected_flights") && dict["selected_flights"] != nil {
                var tmp : [FlightListingSearchV2Request.SearchJourneys.SelectedFlights] = []
                for v in dict["selected_flights"] as! [Any] {
                    var model = FlightListingSearchV2Request.SearchJourneys.SelectedFlights()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.selectedFlights = tmp
            }
        }
    }
    public var airlineCode: String?

    public var cabinTypeList: [Int32]?

    public var directOnly: Bool?

    public var isvName: String?

    public var needMultiClassPrice: Bool?

    public var needQueryServiceFee: Bool?

    public var needShareFlight: Bool?

    public var needYCBestPrice: Bool?

    public var searchJourneys: [FlightListingSearchV2Request.SearchJourneys]?

    public var searchMode: Int32?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.airlineCode != nil {
            map["airline_code"] = self.airlineCode!
        }
        if self.cabinTypeList != nil {
            map["cabin_type_list"] = self.cabinTypeList!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needMultiClassPrice != nil {
            map["need_multi_class_price"] = self.needMultiClassPrice!
        }
        if self.needQueryServiceFee != nil {
            map["need_query_service_fee"] = self.needQueryServiceFee!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.needYCBestPrice != nil {
            map["need_y_c_best_price"] = self.needYCBestPrice!
        }
        if self.searchJourneys != nil {
            var tmp : [Any] = []
            for k in self.searchJourneys! {
                tmp.append(k.toMap())
            }
            map["search_journeys"] = tmp
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
            self.airlineCode = dict["airline_code"] as! String
        }
        if dict.keys.contains("cabin_type_list") && dict["cabin_type_list"] != nil {
            self.cabinTypeList = dict["cabin_type_list"] as! [Int32]
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_multi_class_price") && dict["need_multi_class_price"] != nil {
            self.needMultiClassPrice = dict["need_multi_class_price"] as! Bool
        }
        if dict.keys.contains("need_query_service_fee") && dict["need_query_service_fee"] != nil {
            self.needQueryServiceFee = dict["need_query_service_fee"] as! Bool
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("need_y_c_best_price") && dict["need_y_c_best_price"] != nil {
            self.needYCBestPrice = dict["need_y_c_best_price"] as! Bool
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            var tmp : [FlightListingSearchV2Request.SearchJourneys] = []
            for v in dict["search_journeys"] as! [Any] {
                var model = FlightListingSearchV2Request.SearchJourneys()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.searchJourneys = tmp
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class FlightListingSearchV2ShrinkRequest : Tea.TeaModel {
    public var airlineCode: String?

    public var cabinTypeListShrink: String?

    public var directOnly: Bool?

    public var isvName: String?

    public var needMultiClassPrice: Bool?

    public var needQueryServiceFee: Bool?

    public var needShareFlight: Bool?

    public var needYCBestPrice: Bool?

    public var searchJourneysShrink: String?

    public var searchMode: Int32?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.airlineCode != nil {
            map["airline_code"] = self.airlineCode!
        }
        if self.cabinTypeListShrink != nil {
            map["cabin_type_list"] = self.cabinTypeListShrink!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needMultiClassPrice != nil {
            map["need_multi_class_price"] = self.needMultiClassPrice!
        }
        if self.needQueryServiceFee != nil {
            map["need_query_service_fee"] = self.needQueryServiceFee!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.needYCBestPrice != nil {
            map["need_y_c_best_price"] = self.needYCBestPrice!
        }
        if self.searchJourneysShrink != nil {
            map["search_journeys"] = self.searchJourneysShrink!
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
            self.airlineCode = dict["airline_code"] as! String
        }
        if dict.keys.contains("cabin_type_list") && dict["cabin_type_list"] != nil {
            self.cabinTypeListShrink = dict["cabin_type_list"] as! String
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_multi_class_price") && dict["need_multi_class_price"] != nil {
            self.needMultiClassPrice = dict["need_multi_class_price"] as! Bool
        }
        if dict.keys.contains("need_query_service_fee") && dict["need_query_service_fee"] != nil {
            self.needQueryServiceFee = dict["need_query_service_fee"] as! Bool
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("need_y_c_best_price") && dict["need_y_c_best_price"] != nil {
            self.needYCBestPrice = dict["need_y_c_best_price"] as! Bool
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            self.searchJourneysShrink = dict["search_journeys"] as! String
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class FlightListingSearchV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightItemList : Tea.TeaModel {
            public class BestPriceItem : Tea.TeaModel {
                public class SubItems : Tea.TeaModel {
                    public var shoppingItemMap: [String: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue]?

                    public var uniqKey: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.shoppingItemMap != nil {
                            var tmp : [String: Any] = [:]
                            for (k, v) in self.shoppingItemMap! {
                                tmp[k] = v.toMap()
                            }
                            map["shopping_item_map"] = tmp
                        }
                        if self.uniqKey != nil {
                            map["uniq_key"] = self.uniqKey!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                            var tmp : [String: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue] = [:]
                            for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                                if v != nil {
                                    var model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue()
                                    model.fromMap(v as! [String: Any])
                                    tmp[k] = model
                                }
                            }
                            self.shoppingItemMap = tmp
                        }
                        if dict.keys.contains("uniq_key") && dict["uniq_key"] != nil {
                            self.uniqKey = dict["uniq_key"] as! String
                        }
                    }
                }
                public var flightRuleInfos: [String: ModuleFlightItemListBestPriceItemFlightRuleInfosValue]?

                public var itemId: String?

                public var shoppingItemMap: [String: ModuleFlightItemListBestPriceItemShoppingItemMapValue]?

                public var subItemPositionMap: [String: [ModuleFlightItemListBestPriceItemSubItemPositionMapValue]]?

                public var subItems: [FlightListingSearchV2ResponseBody.Module.FlightItemList.BestPriceItem.SubItems]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.flightRuleInfos != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.flightRuleInfos! {
                            tmp[k] = v.toMap()
                        }
                        map["flight_rule_infos"] = tmp
                    }
                    if self.itemId != nil {
                        map["item_id"] = self.itemId!
                    }
                    if self.shoppingItemMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.shoppingItemMap! {
                            tmp[k] = v.toMap()
                        }
                        map["shopping_item_map"] = tmp
                    }
                    if self.subItemPositionMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.subItemPositionMap! {
                            var l1 : [Any] = []
                            for k1 in v {
                                l1.append(k1.toMap())
                            }
                            tmp[k] = l1
                        }
                        map["sub_item_position_map"] = tmp
                    }
                    if self.subItems != nil {
                        var tmp : [Any] = []
                        for k in self.subItems! {
                            tmp.append(k.toMap())
                        }
                        map["sub_items"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("flight_rule_infos") && dict["flight_rule_infos"] != nil {
                        var tmp : [String: ModuleFlightItemListBestPriceItemFlightRuleInfosValue] = [:]
                        for (k, v) in dict["flight_rule_infos"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleFlightItemListBestPriceItemFlightRuleInfosValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.flightRuleInfos = tmp
                    }
                    if dict.keys.contains("item_id") && dict["item_id"] != nil {
                        self.itemId = dict["item_id"] as! String
                    }
                    if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                        var tmp : [String: ModuleFlightItemListBestPriceItemShoppingItemMapValue] = [:]
                        for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.shoppingItemMap = tmp
                    }
                    if dict.keys.contains("sub_item_position_map") && dict["sub_item_position_map"] != nil {
                        var tmp : [String: [ModuleFlightItemListBestPriceItemSubItemPositionMapValue]] = [:]
                        for (k, v) in dict["sub_item_position_map"] as! [String: Any] {
                            var l1 : [ModuleFlightItemListBestPriceItemSubItemPositionMapValue] = []
                            for v1 in v as! [Any] {
                                var model = ModuleFlightItemListBestPriceItemSubItemPositionMapValue()
                                if v1 != nil {
                                    model.fromMap(v1 as! [String: Any])
                                }
                                l1.append(model)
                            }
                            tmp[k] = l1
                        }
                        self.subItemPositionMap = tmp
                    }
                    if dict.keys.contains("sub_items") && dict["sub_items"] != nil {
                        var tmp : [FlightListingSearchV2ResponseBody.Module.FlightItemList.BestPriceItem.SubItems] = []
                        for v in dict["sub_items"] as! [Any] {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.BestPriceItem.SubItems()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.subItems = tmp
                    }
                }
            }
            public class FlightJourneyInfos : Tea.TeaModel {
                public class FlightSegmentInfos : Tea.TeaModel {
                    public class AirlineInfo : Tea.TeaModel {
                        public var airlineChineseName: String?

                        public var airlineChineseShortName: String?

                        public var airlineCode: String?

                        public var airlineIcon: String?

                        public var cheapFlight: Bool?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airlineChineseName != nil {
                                map["airline_chinese_name"] = self.airlineChineseName!
                            }
                            if self.airlineChineseShortName != nil {
                                map["airline_chinese_short_name"] = self.airlineChineseShortName!
                            }
                            if self.airlineCode != nil {
                                map["airline_code"] = self.airlineCode!
                            }
                            if self.airlineIcon != nil {
                                map["airline_icon"] = self.airlineIcon!
                            }
                            if self.cheapFlight != nil {
                                map["cheap_flight"] = self.cheapFlight!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                self.airlineChineseName = dict["airline_chinese_name"] as! String
                            }
                            if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                            }
                            if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                self.airlineCode = dict["airline_code"] as! String
                            }
                            if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                self.airlineIcon = dict["airline_icon"] as! String
                            }
                            if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                self.cheapFlight = dict["cheap_flight"] as! Bool
                            }
                        }
                    }
                    public class ArrAirportInfo : Tea.TeaModel {
                        public var airportCode: String?

                        public var airportName: String?

                        public var airportNameColor: String?

                        public var airportShortName: String?

                        public var terminal: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airportCode != nil {
                                map["airport_code"] = self.airportCode!
                            }
                            if self.airportName != nil {
                                map["airport_name"] = self.airportName!
                            }
                            if self.airportNameColor != nil {
                                map["airport_name_color"] = self.airportNameColor!
                            }
                            if self.airportShortName != nil {
                                map["airport_short_name"] = self.airportShortName!
                            }
                            if self.terminal != nil {
                                map["terminal"] = self.terminal!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                                self.airportCode = dict["airport_code"] as! String
                            }
                            if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                                self.airportName = dict["airport_name"] as! String
                            }
                            if dict.keys.contains("airport_name_color") && dict["airport_name_color"] != nil {
                                self.airportNameColor = dict["airport_name_color"] as! String
                            }
                            if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                                self.airportShortName = dict["airport_short_name"] as! String
                            }
                            if dict.keys.contains("terminal") && dict["terminal"] != nil {
                                self.terminal = dict["terminal"] as! String
                            }
                        }
                    }
                    public class DepAirportInfo : Tea.TeaModel {
                        public var airportCode: String?

                        public var airportName: String?

                        public var airportNameColor: String?

                        public var airportShortName: String?

                        public var terminal: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airportCode != nil {
                                map["airport_code"] = self.airportCode!
                            }
                            if self.airportName != nil {
                                map["airport_name"] = self.airportName!
                            }
                            if self.airportNameColor != nil {
                                map["airport_name_color"] = self.airportNameColor!
                            }
                            if self.airportShortName != nil {
                                map["airport_short_name"] = self.airportShortName!
                            }
                            if self.terminal != nil {
                                map["terminal"] = self.terminal!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                                self.airportCode = dict["airport_code"] as! String
                            }
                            if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                                self.airportName = dict["airport_name"] as! String
                            }
                            if dict.keys.contains("airport_name_color") && dict["airport_name_color"] != nil {
                                self.airportNameColor = dict["airport_name_color"] as! String
                            }
                            if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                                self.airportShortName = dict["airport_short_name"] as! String
                            }
                            if dict.keys.contains("terminal") && dict["terminal"] != nil {
                                self.terminal = dict["terminal"] as! String
                            }
                        }
                    }
                    public class FlightShareInfo : Tea.TeaModel {
                        public class OperatingAirlineInfo : Tea.TeaModel {
                            public var airlineChineseName: String?

                            public var airlineChineseShortName: String?

                            public var airlineCode: String?

                            public var airlineIcon: String?

                            public var cheapFlight: Bool?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.airlineChineseName != nil {
                                    map["airline_chinese_name"] = self.airlineChineseName!
                                }
                                if self.airlineChineseShortName != nil {
                                    map["airline_chinese_short_name"] = self.airlineChineseShortName!
                                }
                                if self.airlineCode != nil {
                                    map["airline_code"] = self.airlineCode!
                                }
                                if self.airlineIcon != nil {
                                    map["airline_icon"] = self.airlineIcon!
                                }
                                if self.cheapFlight != nil {
                                    map["cheap_flight"] = self.cheapFlight!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                    self.airlineChineseName = dict["airline_chinese_name"] as! String
                                }
                                if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                    self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                                }
                                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                    self.airlineCode = dict["airline_code"] as! String
                                }
                                if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                    self.airlineIcon = dict["airline_icon"] as! String
                                }
                                if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                    self.cheapFlight = dict["cheap_flight"] as! Bool
                                }
                            }
                        }
                        public var operatingAirlineInfo: FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo?

                        public var operatingFlightNo: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.operatingAirlineInfo?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.operatingAirlineInfo != nil {
                                map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                            }
                            if self.operatingFlightNo != nil {
                                map["operating_flight_no"] = self.operatingFlightNo!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                                var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo()
                                model.fromMap(dict["operating_airline_info"] as! [String: Any])
                                self.operatingAirlineInfo = model
                            }
                            if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                                self.operatingFlightNo = dict["operating_flight_no"] as! String
                            }
                        }
                    }
                    public class FlightStopInfo : Tea.TeaModel {
                        public var stopAirport: String?

                        public var stopAirportName: String?

                        public var stopArrTerm: String?

                        public var stopArrTime: String?

                        public var stopCityCode: String?

                        public var stopCityName: String?

                        public var stopCityNames: [String]?

                        public var stopDepTerm: String?

                        public var stopDepTime: String?

                        public var stopTime: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.stopAirport != nil {
                                map["stop_airport"] = self.stopAirport!
                            }
                            if self.stopAirportName != nil {
                                map["stop_airport_name"] = self.stopAirportName!
                            }
                            if self.stopArrTerm != nil {
                                map["stop_arr_term"] = self.stopArrTerm!
                            }
                            if self.stopArrTime != nil {
                                map["stop_arr_time"] = self.stopArrTime!
                            }
                            if self.stopCityCode != nil {
                                map["stop_city_code"] = self.stopCityCode!
                            }
                            if self.stopCityName != nil {
                                map["stop_city_name"] = self.stopCityName!
                            }
                            if self.stopCityNames != nil {
                                map["stop_city_names"] = self.stopCityNames!
                            }
                            if self.stopDepTerm != nil {
                                map["stop_dep_term"] = self.stopDepTerm!
                            }
                            if self.stopDepTime != nil {
                                map["stop_dep_time"] = self.stopDepTime!
                            }
                            if self.stopTime != nil {
                                map["stop_time"] = self.stopTime!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                                self.stopAirport = dict["stop_airport"] as! String
                            }
                            if dict.keys.contains("stop_airport_name") && dict["stop_airport_name"] != nil {
                                self.stopAirportName = dict["stop_airport_name"] as! String
                            }
                            if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                                self.stopArrTerm = dict["stop_arr_term"] as! String
                            }
                            if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                                self.stopArrTime = dict["stop_arr_time"] as! String
                            }
                            if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                                self.stopCityCode = dict["stop_city_code"] as! String
                            }
                            if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                                self.stopCityName = dict["stop_city_name"] as! String
                            }
                            if dict.keys.contains("stop_city_names") && dict["stop_city_names"] != nil {
                                self.stopCityNames = dict["stop_city_names"] as! [String]
                            }
                            if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                                self.stopDepTerm = dict["stop_dep_term"] as! String
                            }
                            if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                                self.stopDepTime = dict["stop_dep_time"] as! String
                            }
                            if dict.keys.contains("stop_time") && dict["stop_time"] != nil {
                                self.stopTime = dict["stop_time"] as! String
                            }
                        }
                    }
                    public var airlineInfo: FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo?

                    public var arrAirportInfo: FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo?

                    public var arrCityCode: String?

                    public var arrCityName: String?

                    public var arrTime: String?

                    public var baggageDesc: String?

                    public var depAirportInfo: FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo?

                    public var depCityCode: String?

                    public var depCityName: String?

                    public var depTime: String?

                    public var duration: Int32?

                    public var extraInfo: [String: Any]?

                    public var flightNo: String?

                    public var flightShareInfo: FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo?

                    public var flightSize: String?

                    public var flightStopInfo: FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo?

                    public var flightType: String?

                    public var manufacturer: String?

                    public var mealDesc: String?

                    public var miles: Int32?

                    public var onTimeRate: String?

                    public var oneMore: Int32?

                    public var oneMoreShow: String?

                    public var segmentIndex: Int32?

                    public var share: Bool?

                    public var shortFlightSize: String?

                    public var stop: Bool?

                    public var totalTime: String?

                    public var transferTime: String?

                    public var transferTimeNumber: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.airlineInfo?.validate()
                        try self.arrAirportInfo?.validate()
                        try self.depAirportInfo?.validate()
                        try self.flightShareInfo?.validate()
                        try self.flightStopInfo?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineInfo != nil {
                            map["airline_info"] = self.airlineInfo?.toMap()
                        }
                        if self.arrAirportInfo != nil {
                            map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                        }
                        if self.arrCityCode != nil {
                            map["arr_city_code"] = self.arrCityCode!
                        }
                        if self.arrCityName != nil {
                            map["arr_city_name"] = self.arrCityName!
                        }
                        if self.arrTime != nil {
                            map["arr_time"] = self.arrTime!
                        }
                        if self.baggageDesc != nil {
                            map["baggage_desc"] = self.baggageDesc!
                        }
                        if self.depAirportInfo != nil {
                            map["dep_airport_info"] = self.depAirportInfo?.toMap()
                        }
                        if self.depCityCode != nil {
                            map["dep_city_code"] = self.depCityCode!
                        }
                        if self.depCityName != nil {
                            map["dep_city_name"] = self.depCityName!
                        }
                        if self.depTime != nil {
                            map["dep_time"] = self.depTime!
                        }
                        if self.duration != nil {
                            map["duration"] = self.duration!
                        }
                        if self.extraInfo != nil {
                            map["extra_info"] = self.extraInfo!
                        }
                        if self.flightNo != nil {
                            map["flight_no"] = self.flightNo!
                        }
                        if self.flightShareInfo != nil {
                            map["flight_share_info"] = self.flightShareInfo?.toMap()
                        }
                        if self.flightSize != nil {
                            map["flight_size"] = self.flightSize!
                        }
                        if self.flightStopInfo != nil {
                            map["flight_stop_info"] = self.flightStopInfo?.toMap()
                        }
                        if self.flightType != nil {
                            map["flight_type"] = self.flightType!
                        }
                        if self.manufacturer != nil {
                            map["manufacturer"] = self.manufacturer!
                        }
                        if self.mealDesc != nil {
                            map["meal_desc"] = self.mealDesc!
                        }
                        if self.miles != nil {
                            map["miles"] = self.miles!
                        }
                        if self.onTimeRate != nil {
                            map["on_time_rate"] = self.onTimeRate!
                        }
                        if self.oneMore != nil {
                            map["one_more"] = self.oneMore!
                        }
                        if self.oneMoreShow != nil {
                            map["one_more_show"] = self.oneMoreShow!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        if self.share != nil {
                            map["share"] = self.share!
                        }
                        if self.shortFlightSize != nil {
                            map["short_flight_size"] = self.shortFlightSize!
                        }
                        if self.stop != nil {
                            map["stop"] = self.stop!
                        }
                        if self.totalTime != nil {
                            map["total_time"] = self.totalTime!
                        }
                        if self.transferTime != nil {
                            map["transfer_time"] = self.transferTime!
                        }
                        if self.transferTimeNumber != nil {
                            map["transfer_time_number"] = self.transferTimeNumber!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo()
                            model.fromMap(dict["airline_info"] as! [String: Any])
                            self.airlineInfo = model
                        }
                        if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo()
                            model.fromMap(dict["arr_airport_info"] as! [String: Any])
                            self.arrAirportInfo = model
                        }
                        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                            self.arrCityCode = dict["arr_city_code"] as! String
                        }
                        if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                            self.arrCityName = dict["arr_city_name"] as! String
                        }
                        if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                            self.arrTime = dict["arr_time"] as! String
                        }
                        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                            self.baggageDesc = dict["baggage_desc"] as! String
                        }
                        if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo()
                            model.fromMap(dict["dep_airport_info"] as! [String: Any])
                            self.depAirportInfo = model
                        }
                        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                            self.depCityCode = dict["dep_city_code"] as! String
                        }
                        if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                            self.depCityName = dict["dep_city_name"] as! String
                        }
                        if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                            self.depTime = dict["dep_time"] as! String
                        }
                        if dict.keys.contains("duration") && dict["duration"] != nil {
                            self.duration = dict["duration"] as! Int32
                        }
                        if dict.keys.contains("extra_info") && dict["extra_info"] != nil {
                            self.extraInfo = dict["extra_info"] as! [String: Any]
                        }
                        if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                            self.flightNo = dict["flight_no"] as! String
                        }
                        if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo()
                            model.fromMap(dict["flight_share_info"] as! [String: Any])
                            self.flightShareInfo = model
                        }
                        if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                            self.flightSize = dict["flight_size"] as! String
                        }
                        if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo()
                            model.fromMap(dict["flight_stop_info"] as! [String: Any])
                            self.flightStopInfo = model
                        }
                        if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                            self.flightType = dict["flight_type"] as! String
                        }
                        if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                            self.manufacturer = dict["manufacturer"] as! String
                        }
                        if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                            self.mealDesc = dict["meal_desc"] as! String
                        }
                        if dict.keys.contains("miles") && dict["miles"] != nil {
                            self.miles = dict["miles"] as! Int32
                        }
                        if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                            self.onTimeRate = dict["on_time_rate"] as! String
                        }
                        if dict.keys.contains("one_more") && dict["one_more"] != nil {
                            self.oneMore = dict["one_more"] as! Int32
                        }
                        if dict.keys.contains("one_more_show") && dict["one_more_show"] != nil {
                            self.oneMoreShow = dict["one_more_show"] as! String
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                        if dict.keys.contains("share") && dict["share"] != nil {
                            self.share = dict["share"] as! Bool
                        }
                        if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                            self.shortFlightSize = dict["short_flight_size"] as! String
                        }
                        if dict.keys.contains("stop") && dict["stop"] != nil {
                            self.stop = dict["stop"] as! Bool
                        }
                        if dict.keys.contains("total_time") && dict["total_time"] != nil {
                            self.totalTime = dict["total_time"] as! String
                        }
                        if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                            self.transferTime = dict["transfer_time"] as! String
                        }
                        if dict.keys.contains("transfer_time_number") && dict["transfer_time_number"] != nil {
                            self.transferTimeNumber = dict["transfer_time_number"] as! Int32
                        }
                    }
                }
                public var arrCityCode: String?

                public var arrCityName: String?

                public var arrTime: String?

                public var depCityCode: String?

                public var depCityName: String?

                public var depTime: String?

                public var duration: Int32?

                public var extensions: [String: String]?

                public var flightSegmentInfos: [FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos]?

                public var journeyIndex: Int32?

                public var transferTime: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrCityName != nil {
                        map["arr_city_name"] = self.arrCityName!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depCityName != nil {
                        map["dep_city_name"] = self.depCityName!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.duration != nil {
                        map["duration"] = self.duration!
                    }
                    if self.extensions != nil {
                        map["extensions"] = self.extensions!
                    }
                    if self.flightSegmentInfos != nil {
                        var tmp : [Any] = []
                        for k in self.flightSegmentInfos! {
                            tmp.append(k.toMap())
                        }
                        map["flight_segment_infos"] = tmp
                    }
                    if self.journeyIndex != nil {
                        map["journey_index"] = self.journeyIndex!
                    }
                    if self.transferTime != nil {
                        map["transfer_time"] = self.transferTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                        self.arrCityName = dict["arr_city_name"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                        self.depCityName = dict["dep_city_name"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("duration") && dict["duration"] != nil {
                        self.duration = dict["duration"] as! Int32
                    }
                    if dict.keys.contains("extensions") && dict["extensions"] != nil {
                        self.extensions = dict["extensions"] as! [String: String]
                    }
                    if dict.keys.contains("flight_segment_infos") && dict["flight_segment_infos"] != nil {
                        var tmp : [FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos] = []
                        for v in dict["flight_segment_infos"] as! [Any] {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.flightSegmentInfos = tmp
                    }
                    if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                        self.journeyIndex = dict["journey_index"] as! Int32
                    }
                    if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                        self.transferTime = dict["transfer_time"] as! Int32
                    }
                }
            }
            public class ItemList : Tea.TeaModel {
                public class SubItems : Tea.TeaModel {
                    public var shoppingItemMap: [String: ModuleFlightItemListItemListSubItemsShoppingItemMapValue]?

                    public var uniqKey: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.shoppingItemMap != nil {
                            var tmp : [String: Any] = [:]
                            for (k, v) in self.shoppingItemMap! {
                                tmp[k] = v.toMap()
                            }
                            map["shopping_item_map"] = tmp
                        }
                        if self.uniqKey != nil {
                            map["uniq_key"] = self.uniqKey!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                            var tmp : [String: ModuleFlightItemListItemListSubItemsShoppingItemMapValue] = [:]
                            for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                                if v != nil {
                                    var model = ModuleFlightItemListItemListSubItemsShoppingItemMapValue()
                                    model.fromMap(v as! [String: Any])
                                    tmp[k] = model
                                }
                            }
                            self.shoppingItemMap = tmp
                        }
                        if dict.keys.contains("uniq_key") && dict["uniq_key"] != nil {
                            self.uniqKey = dict["uniq_key"] as! String
                        }
                    }
                }
                public var flightRuleInfos: [String: ModuleFlightItemListItemListFlightRuleInfosValue]?

                public var itemId: String?

                public var shoppingItemMap: [String: ModuleFlightItemListItemListShoppingItemMapValue]?

                public var subItemPositionMap: [String: [ModuleFlightItemListItemListSubItemPositionMapValue]]?

                public var subItems: [FlightListingSearchV2ResponseBody.Module.FlightItemList.ItemList.SubItems]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.flightRuleInfos != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.flightRuleInfos! {
                            tmp[k] = v.toMap()
                        }
                        map["flight_rule_infos"] = tmp
                    }
                    if self.itemId != nil {
                        map["item_id"] = self.itemId!
                    }
                    if self.shoppingItemMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.shoppingItemMap! {
                            tmp[k] = v.toMap()
                        }
                        map["shopping_item_map"] = tmp
                    }
                    if self.subItemPositionMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.subItemPositionMap! {
                            var l1 : [Any] = []
                            for k1 in v {
                                l1.append(k1.toMap())
                            }
                            tmp[k] = l1
                        }
                        map["sub_item_position_map"] = tmp
                    }
                    if self.subItems != nil {
                        var tmp : [Any] = []
                        for k in self.subItems! {
                            tmp.append(k.toMap())
                        }
                        map["sub_items"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("flight_rule_infos") && dict["flight_rule_infos"] != nil {
                        var tmp : [String: ModuleFlightItemListItemListFlightRuleInfosValue] = [:]
                        for (k, v) in dict["flight_rule_infos"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleFlightItemListItemListFlightRuleInfosValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.flightRuleInfos = tmp
                    }
                    if dict.keys.contains("item_id") && dict["item_id"] != nil {
                        self.itemId = dict["item_id"] as! String
                    }
                    if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                        var tmp : [String: ModuleFlightItemListItemListShoppingItemMapValue] = [:]
                        for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleFlightItemListItemListShoppingItemMapValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.shoppingItemMap = tmp
                    }
                    if dict.keys.contains("sub_item_position_map") && dict["sub_item_position_map"] != nil {
                        var tmp : [String: [ModuleFlightItemListItemListSubItemPositionMapValue]] = [:]
                        for (k, v) in dict["sub_item_position_map"] as! [String: Any] {
                            var l1 : [ModuleFlightItemListItemListSubItemPositionMapValue] = []
                            for v1 in v as! [Any] {
                                var model = ModuleFlightItemListItemListSubItemPositionMapValue()
                                if v1 != nil {
                                    model.fromMap(v1 as! [String: Any])
                                }
                                l1.append(model)
                            }
                            tmp[k] = l1
                        }
                        self.subItemPositionMap = tmp
                    }
                    if dict.keys.contains("sub_items") && dict["sub_items"] != nil {
                        var tmp : [FlightListingSearchV2ResponseBody.Module.FlightItemList.ItemList.SubItems] = []
                        for v in dict["sub_items"] as! [Any] {
                            var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.ItemList.SubItems()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.subItems = tmp
                    }
                }
            }
            public var bestPriceItem: FlightListingSearchV2ResponseBody.Module.FlightItemList.BestPriceItem?

            public var flightJourneyInfos: [FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos]?

            public var itemList: [FlightListingSearchV2ResponseBody.Module.FlightItemList.ItemList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.bestPriceItem?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bestPriceItem != nil {
                    map["best_price_item"] = self.bestPriceItem?.toMap()
                }
                if self.flightJourneyInfos != nil {
                    var tmp : [Any] = []
                    for k in self.flightJourneyInfos! {
                        tmp.append(k.toMap())
                    }
                    map["flight_journey_infos"] = tmp
                }
                if self.itemList != nil {
                    var tmp : [Any] = []
                    for k in self.itemList! {
                        tmp.append(k.toMap())
                    }
                    map["item_list"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("best_price_item") && dict["best_price_item"] != nil {
                    var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.BestPriceItem()
                    model.fromMap(dict["best_price_item"] as! [String: Any])
                    self.bestPriceItem = model
                }
                if dict.keys.contains("flight_journey_infos") && dict["flight_journey_infos"] != nil {
                    var tmp : [FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos] = []
                    for v in dict["flight_journey_infos"] as! [Any] {
                        var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.FlightJourneyInfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightJourneyInfos = tmp
                }
                if dict.keys.contains("item_list") && dict["item_list"] != nil {
                    var tmp : [FlightListingSearchV2ResponseBody.Module.FlightItemList.ItemList] = []
                    for v in dict["item_list"] as! [Any] {
                        var model = FlightListingSearchV2ResponseBody.Module.FlightItemList.ItemList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.itemList = tmp
                }
            }
        }
        public var flightItemList: [FlightListingSearchV2ResponseBody.Module.FlightItemList]?

        public var searchMode: Int32?

        public var tripType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightItemList != nil {
                var tmp : [Any] = []
                for k in self.flightItemList! {
                    tmp.append(k.toMap())
                }
                map["flight_item_list"] = tmp
            }
            if self.searchMode != nil {
                map["search_mode"] = self.searchMode!
            }
            if self.tripType != nil {
                map["trip_type"] = self.tripType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_item_list") && dict["flight_item_list"] != nil {
                var tmp : [FlightListingSearchV2ResponseBody.Module.FlightItemList] = []
                for v in dict["flight_item_list"] as! [Any] {
                    var model = FlightListingSearchV2ResponseBody.Module.FlightItemList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightItemList = tmp
            }
            if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
                self.searchMode = dict["search_mode"] as! Int32
            }
            if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                self.tripType = dict["trip_type"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightListingSearchV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightListingSearchV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightListingSearchV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightListingSearchV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightListingSearchV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightModifyApplyV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightModifyApplyV2Request : Tea.TeaModel {
    public class PassengerSegmentRelations : Tea.TeaModel {
        public var passengerId: String?

        public var segmentIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.passengerId != nil {
                map["passenger_id"] = self.passengerId!
            }
            if self.segmentIdList != nil {
                map["segment_id_list"] = self.segmentIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                self.passengerId = dict["passenger_id"] as! String
            }
            if dict.keys.contains("segment_id_list") && dict["segment_id_list"] != nil {
                self.segmentIdList = dict["segment_id_list"] as! [String]
            }
        }
    }
    public var cacheKey: String?

    public var contactPhone: String?

    public var isvName: String?

    public var itemId: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var passengerSegmentRelations: [FlightModifyApplyV2Request.PassengerSegmentRelations]?

    public var reason: String?

    public var sessionId: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cacheKey != nil {
            map["cache_key"] = self.cacheKey!
        }
        if self.contactPhone != nil {
            map["contact_phone"] = self.contactPhone!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.itemId != nil {
            map["item_id"] = self.itemId!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.passengerSegmentRelations != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentRelations! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_relations"] = tmp
        }
        if self.reason != nil {
            map["reason"] = self.reason!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cache_key") && dict["cache_key"] != nil {
            self.cacheKey = dict["cache_key"] as! String
        }
        if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
            self.contactPhone = dict["contact_phone"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("item_id") && dict["item_id"] != nil {
            self.itemId = dict["item_id"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            var tmp : [FlightModifyApplyV2Request.PassengerSegmentRelations] = []
            for v in dict["passenger_segment_relations"] as! [Any] {
                var model = FlightModifyApplyV2Request.PassengerSegmentRelations()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentRelations = tmp
        }
        if dict.keys.contains("reason") && dict["reason"] != nil {
            self.reason = dict["reason"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightModifyApplyV2ShrinkRequest : Tea.TeaModel {
    public var cacheKey: String?

    public var contactPhone: String?

    public var isvName: String?

    public var itemId: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var passengerSegmentRelationsShrink: String?

    public var reason: String?

    public var sessionId: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cacheKey != nil {
            map["cache_key"] = self.cacheKey!
        }
        if self.contactPhone != nil {
            map["contact_phone"] = self.contactPhone!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.itemId != nil {
            map["item_id"] = self.itemId!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.passengerSegmentRelationsShrink != nil {
            map["passenger_segment_relations"] = self.passengerSegmentRelationsShrink!
        }
        if self.reason != nil {
            map["reason"] = self.reason!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cache_key") && dict["cache_key"] != nil {
            self.cacheKey = dict["cache_key"] as! String
        }
        if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
            self.contactPhone = dict["contact_phone"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("item_id") && dict["item_id"] != nil {
            self.itemId = dict["item_id"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            self.passengerSegmentRelationsShrink = dict["passenger_segment_relations"] as! String
        }
        if dict.keys.contains("reason") && dict["reason"] != nil {
            self.reason = dict["reason"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightModifyApplyV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var orderId: String?

        public var outOrderId: String?

        public var outSubOrderId: String?

        public var subOrderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.outOrderId != nil {
                map["out_order_id"] = self.outOrderId!
            }
            if self.outSubOrderId != nil {
                map["out_sub_order_id"] = self.outSubOrderId!
            }
            if self.subOrderId != nil {
                map["sub_order_id"] = self.subOrderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! String
            }
            if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
                self.outOrderId = dict["out_order_id"] as! String
            }
            if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
                self.outSubOrderId = dict["out_sub_order_id"] as! String
            }
            if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                self.subOrderId = dict["sub_order_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightModifyApplyV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightModifyApplyV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightModifyApplyV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightModifyApplyV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightModifyApplyV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightModifyCancelV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightModifyCancelV2Request : Tea.TeaModel {
    public var isvName: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var subOrderId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.subOrderId != nil {
            map["sub_order_id"] = self.subOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
            self.subOrderId = dict["sub_order_id"] as! Int64
        }
    }
}

public class FlightModifyCancelV2ResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: [String: Any]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! [String: Any]
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightModifyCancelV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightModifyCancelV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightModifyCancelV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightModifyListingSearchV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightModifyListingSearchV2Request : Tea.TeaModel {
    public class PassengerSegmentRelations : Tea.TeaModel {
        public var passengerId: String?

        public var segmentIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.passengerId != nil {
                map["passenger_id"] = self.passengerId!
            }
            if self.segmentIdList != nil {
                map["segment_id_list"] = self.segmentIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                self.passengerId = dict["passenger_id"] as! String
            }
            if dict.keys.contains("segment_id_list") && dict["segment_id_list"] != nil {
                self.segmentIdList = dict["segment_id_list"] as! [String]
            }
        }
    }
    public class SelectedSegments : Tea.TeaModel {
        public var arrCityCode: String?

        public var depCityCode: String?

        public var depDateTime: String?

        public var journeySeq: Int32?

        public var marketingFlightNo: String?

        public var operatingFlightNo: String?

        public var segmentSeq: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDateTime != nil {
                map["dep_date_time"] = self.depDateTime!
            }
            if self.journeySeq != nil {
                map["journey_seq"] = self.journeySeq!
            }
            if self.marketingFlightNo != nil {
                map["marketing_flight_no"] = self.marketingFlightNo!
            }
            if self.operatingFlightNo != nil {
                map["operating_flight_no"] = self.operatingFlightNo!
            }
            if self.segmentSeq != nil {
                map["segment_seq"] = self.segmentSeq!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date_time") && dict["dep_date_time"] != nil {
                self.depDateTime = dict["dep_date_time"] as! String
            }
            if dict.keys.contains("journey_seq") && dict["journey_seq"] != nil {
                self.journeySeq = dict["journey_seq"] as! Int32
            }
            if dict.keys.contains("marketing_flight_no") && dict["marketing_flight_no"] != nil {
                self.marketingFlightNo = dict["marketing_flight_no"] as! String
            }
            if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                self.operatingFlightNo = dict["operating_flight_no"] as! String
            }
            if dict.keys.contains("segment_seq") && dict["segment_seq"] != nil {
                self.segmentSeq = dict["segment_seq"] as! Int32
            }
        }
    }
    public var cabinClass: [Int32]?

    public var depDate: [String]?

    public var isvName: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var passengerSegmentRelations: [FlightModifyListingSearchV2Request.PassengerSegmentRelations]?

    public var searchMode: Int32?

    public var selectedSegments: [FlightModifyListingSearchV2Request.SelectedSegments]?

    public var sessionId: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.passengerSegmentRelations != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentRelations! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_relations"] = tmp
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.selectedSegments != nil {
            var tmp : [Any] = []
            for k in self.selectedSegments! {
                tmp.append(k.toMap())
            }
            map["selected_segments"] = tmp
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! [Int32]
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! [String]
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            var tmp : [FlightModifyListingSearchV2Request.PassengerSegmentRelations] = []
            for v in dict["passenger_segment_relations"] as! [Any] {
                var model = FlightModifyListingSearchV2Request.PassengerSegmentRelations()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentRelations = tmp
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("selected_segments") && dict["selected_segments"] != nil {
            var tmp : [FlightModifyListingSearchV2Request.SelectedSegments] = []
            for v in dict["selected_segments"] as! [Any] {
                var model = FlightModifyListingSearchV2Request.SelectedSegments()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.selectedSegments = tmp
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightModifyListingSearchV2ShrinkRequest : Tea.TeaModel {
    public var cabinClassShrink: String?

    public var depDateShrink: String?

    public var isvName: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var passengerSegmentRelationsShrink: String?

    public var searchMode: Int32?

    public var selectedSegmentsShrink: String?

    public var sessionId: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinClassShrink != nil {
            map["cabin_class"] = self.cabinClassShrink!
        }
        if self.depDateShrink != nil {
            map["dep_date"] = self.depDateShrink!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.passengerSegmentRelationsShrink != nil {
            map["passenger_segment_relations"] = self.passengerSegmentRelationsShrink!
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.selectedSegmentsShrink != nil {
            map["selected_segments"] = self.selectedSegmentsShrink!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClassShrink = dict["cabin_class"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDateShrink = dict["dep_date"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            self.passengerSegmentRelationsShrink = dict["passenger_segment_relations"] as! String
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("selected_segments") && dict["selected_segments"] != nil {
            self.selectedSegmentsShrink = dict["selected_segments"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightModifyListingSearchV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DirectFlightList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineChineseName: String?

                public var airlineChineseShortName: String?

                public var airlineCode: String?

                public var airlineIcon: String?

                public var cheapFlight: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineChineseName != nil {
                        map["airline_chinese_name"] = self.airlineChineseName!
                    }
                    if self.airlineChineseShortName != nil {
                        map["airline_chinese_short_name"] = self.airlineChineseShortName!
                    }
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineIcon != nil {
                        map["airline_icon"] = self.airlineIcon!
                    }
                    if self.cheapFlight != nil {
                        map["cheap_flight"] = self.cheapFlight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                        self.airlineChineseName = dict["airline_chinese_name"] as! String
                    }
                    if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                        self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                    }
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                        self.airlineIcon = dict["airline_icon"] as! String
                    }
                    if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                        self.cheapFlight = dict["cheap_flight"] as! Bool
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var airportShortName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.airportShortName != nil {
                        map["airport_short_name"] = self.airportShortName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                        self.airportShortName = dict["airport_short_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var airportShortName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.airportShortName != nil {
                        map["airport_short_name"] = self.airportShortName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                        self.airportShortName = dict["airport_short_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class FlightShareInfo : Tea.TeaModel {
                public class OperatingAirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public var operatingAirlineInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightShareInfo.OperatingAirlineInfo?

                public var operatingFlightNo: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.operatingAirlineInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.operatingAirlineInfo != nil {
                        map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                    }
                    if self.operatingFlightNo != nil {
                        map["operating_flight_no"] = self.operatingFlightNo!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                        var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightShareInfo.OperatingAirlineInfo()
                        model.fromMap(dict["operating_airline_info"] as! [String: Any])
                        self.operatingAirlineInfo = model
                    }
                    if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                        self.operatingFlightNo = dict["operating_flight_no"] as! String
                    }
                }
            }
            public class FlightStopInfo : Tea.TeaModel {
                public var stopAirport: String?

                public var stopArrTerm: String?

                public var stopArrTime: String?

                public var stopCityCode: String?

                public var stopCityName: String?

                public var stopDepTerm: String?

                public var stopDepTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.stopAirport != nil {
                        map["stop_airport"] = self.stopAirport!
                    }
                    if self.stopArrTerm != nil {
                        map["stop_arr_term"] = self.stopArrTerm!
                    }
                    if self.stopArrTime != nil {
                        map["stop_arr_time"] = self.stopArrTime!
                    }
                    if self.stopCityCode != nil {
                        map["stop_city_code"] = self.stopCityCode!
                    }
                    if self.stopCityName != nil {
                        map["stop_city_name"] = self.stopCityName!
                    }
                    if self.stopDepTerm != nil {
                        map["stop_dep_term"] = self.stopDepTerm!
                    }
                    if self.stopDepTime != nil {
                        map["stop_dep_time"] = self.stopDepTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                        self.stopAirport = dict["stop_airport"] as! String
                    }
                    if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                        self.stopArrTerm = dict["stop_arr_term"] as! String
                    }
                    if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                        self.stopArrTime = dict["stop_arr_time"] as! String
                    }
                    if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                        self.stopCityCode = dict["stop_city_code"] as! String
                    }
                    if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                        self.stopCityName = dict["stop_city_name"] as! String
                    }
                    if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                        self.stopDepTerm = dict["stop_dep_term"] as! String
                    }
                    if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                        self.stopDepTime = dict["stop_dep_time"] as! String
                    }
                }
            }
            public class FlightTransferInfo : Tea.TeaModel {
                public class TransferAirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public var transferAirlineInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightTransferInfo.TransferAirlineInfo?

                public var transferCityCode: String?

                public var transferCityName: String?

                public var transferDepTime: String?

                public var transferFlightNo: String?

                public var transferFlightSize: String?

                public var transferShare: Bool?

                public var transferStopTime: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.transferAirlineInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.transferAirlineInfo != nil {
                        map["transfer_airline_info"] = self.transferAirlineInfo?.toMap()
                    }
                    if self.transferCityCode != nil {
                        map["transfer_city_code"] = self.transferCityCode!
                    }
                    if self.transferCityName != nil {
                        map["transfer_city_name"] = self.transferCityName!
                    }
                    if self.transferDepTime != nil {
                        map["transfer_dep_time"] = self.transferDepTime!
                    }
                    if self.transferFlightNo != nil {
                        map["transfer_flight_no"] = self.transferFlightNo!
                    }
                    if self.transferFlightSize != nil {
                        map["transfer_flight_size"] = self.transferFlightSize!
                    }
                    if self.transferShare != nil {
                        map["transfer_share"] = self.transferShare!
                    }
                    if self.transferStopTime != nil {
                        map["transfer_stop_time"] = self.transferStopTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("transfer_airline_info") && dict["transfer_airline_info"] != nil {
                        var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightTransferInfo.TransferAirlineInfo()
                        model.fromMap(dict["transfer_airline_info"] as! [String: Any])
                        self.transferAirlineInfo = model
                    }
                    if dict.keys.contains("transfer_city_code") && dict["transfer_city_code"] != nil {
                        self.transferCityCode = dict["transfer_city_code"] as! String
                    }
                    if dict.keys.contains("transfer_city_name") && dict["transfer_city_name"] != nil {
                        self.transferCityName = dict["transfer_city_name"] as! String
                    }
                    if dict.keys.contains("transfer_dep_time") && dict["transfer_dep_time"] != nil {
                        self.transferDepTime = dict["transfer_dep_time"] as! String
                    }
                    if dict.keys.contains("transfer_flight_no") && dict["transfer_flight_no"] != nil {
                        self.transferFlightNo = dict["transfer_flight_no"] as! String
                    }
                    if dict.keys.contains("transfer_flight_size") && dict["transfer_flight_size"] != nil {
                        self.transferFlightSize = dict["transfer_flight_size"] as! String
                    }
                    if dict.keys.contains("transfer_share") && dict["transfer_share"] != nil {
                        self.transferShare = dict["transfer_share"] as! Bool
                    }
                    if dict.keys.contains("transfer_stop_time") && dict["transfer_stop_time"] != nil {
                        self.transferStopTime = dict["transfer_stop_time"] as! Int32
                    }
                }
            }
            public class PriceInfoDTO : Tea.TeaModel {
                public class ReShopPriceInfoDTO : Tea.TeaModel {
                    public var reShopAdultChangeFee: Int32?

                    public var reShopAdultPrice: Int32?

                    public var reShopAdultPriceGap: Int32?

                    public var reShopChildChangeFee: Int32?

                    public var reShopChildPrice: Int32?

                    public var reShopChildPriceGap: Int32?

                    public var reShopInfChangeFee: Int32?

                    public var reShopInfPrice: Int32?

                    public var reShopInfPriceGap: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reShopAdultChangeFee != nil {
                            map["re_shop_adult_change_fee"] = self.reShopAdultChangeFee!
                        }
                        if self.reShopAdultPrice != nil {
                            map["re_shop_adult_price"] = self.reShopAdultPrice!
                        }
                        if self.reShopAdultPriceGap != nil {
                            map["re_shop_adult_price_gap"] = self.reShopAdultPriceGap!
                        }
                        if self.reShopChildChangeFee != nil {
                            map["re_shop_child_change_fee"] = self.reShopChildChangeFee!
                        }
                        if self.reShopChildPrice != nil {
                            map["re_shop_child_price"] = self.reShopChildPrice!
                        }
                        if self.reShopChildPriceGap != nil {
                            map["re_shop_child_price_gap"] = self.reShopChildPriceGap!
                        }
                        if self.reShopInfChangeFee != nil {
                            map["re_shop_inf_change_fee"] = self.reShopInfChangeFee!
                        }
                        if self.reShopInfPrice != nil {
                            map["re_shop_inf_price"] = self.reShopInfPrice!
                        }
                        if self.reShopInfPriceGap != nil {
                            map["re_shop_inf_price_gap"] = self.reShopInfPriceGap!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("re_shop_adult_change_fee") && dict["re_shop_adult_change_fee"] != nil {
                            self.reShopAdultChangeFee = dict["re_shop_adult_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_adult_price") && dict["re_shop_adult_price"] != nil {
                            self.reShopAdultPrice = dict["re_shop_adult_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_adult_price_gap") && dict["re_shop_adult_price_gap"] != nil {
                            self.reShopAdultPriceGap = dict["re_shop_adult_price_gap"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_change_fee") && dict["re_shop_child_change_fee"] != nil {
                            self.reShopChildChangeFee = dict["re_shop_child_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_price") && dict["re_shop_child_price"] != nil {
                            self.reShopChildPrice = dict["re_shop_child_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_price_gap") && dict["re_shop_child_price_gap"] != nil {
                            self.reShopChildPriceGap = dict["re_shop_child_price_gap"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_change_fee") && dict["re_shop_inf_change_fee"] != nil {
                            self.reShopInfChangeFee = dict["re_shop_inf_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_price") && dict["re_shop_inf_price"] != nil {
                            self.reShopInfPrice = dict["re_shop_inf_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_price_gap") && dict["re_shop_inf_price_gap"] != nil {
                            self.reShopInfPriceGap = dict["re_shop_inf_price_gap"] as! Int32
                        }
                    }
                }
                public var adultPrice: Int32?

                public var adultTax: Int32?

                public var adultTotalPrice: Int32?

                public var beforeControlPrice: Int32?

                public var childPrice: Int32?

                public var childTax: Int32?

                public var childTotalPrice: Int32?

                public var infantPrice: Int32?

                public var infantTax: Int32?

                public var infantTotalPrice: Int32?

                public var originalAdultPrice: Int32?

                public var originalAdultTotalPrice: Int32?

                public var reShopPriceInfoDTO: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.PriceInfoDTO.ReShopPriceInfoDTO?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.reShopPriceInfoDTO?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adultPrice != nil {
                        map["adult_price"] = self.adultPrice!
                    }
                    if self.adultTax != nil {
                        map["adult_tax"] = self.adultTax!
                    }
                    if self.adultTotalPrice != nil {
                        map["adult_total_price"] = self.adultTotalPrice!
                    }
                    if self.beforeControlPrice != nil {
                        map["before_control_price"] = self.beforeControlPrice!
                    }
                    if self.childPrice != nil {
                        map["child_price"] = self.childPrice!
                    }
                    if self.childTax != nil {
                        map["child_tax"] = self.childTax!
                    }
                    if self.childTotalPrice != nil {
                        map["child_total_price"] = self.childTotalPrice!
                    }
                    if self.infantPrice != nil {
                        map["infant_price"] = self.infantPrice!
                    }
                    if self.infantTax != nil {
                        map["infant_tax"] = self.infantTax!
                    }
                    if self.infantTotalPrice != nil {
                        map["infant_total_price"] = self.infantTotalPrice!
                    }
                    if self.originalAdultPrice != nil {
                        map["original_adult_price"] = self.originalAdultPrice!
                    }
                    if self.originalAdultTotalPrice != nil {
                        map["original_adult_total_price"] = self.originalAdultTotalPrice!
                    }
                    if self.reShopPriceInfoDTO != nil {
                        map["re_shop_price_info_d_t_o"] = self.reShopPriceInfoDTO?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("adult_price") && dict["adult_price"] != nil {
                        self.adultPrice = dict["adult_price"] as! Int32
                    }
                    if dict.keys.contains("adult_tax") && dict["adult_tax"] != nil {
                        self.adultTax = dict["adult_tax"] as! Int32
                    }
                    if dict.keys.contains("adult_total_price") && dict["adult_total_price"] != nil {
                        self.adultTotalPrice = dict["adult_total_price"] as! Int32
                    }
                    if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                        self.beforeControlPrice = dict["before_control_price"] as! Int32
                    }
                    if dict.keys.contains("child_price") && dict["child_price"] != nil {
                        self.childPrice = dict["child_price"] as! Int32
                    }
                    if dict.keys.contains("child_tax") && dict["child_tax"] != nil {
                        self.childTax = dict["child_tax"] as! Int32
                    }
                    if dict.keys.contains("child_total_price") && dict["child_total_price"] != nil {
                        self.childTotalPrice = dict["child_total_price"] as! Int32
                    }
                    if dict.keys.contains("infant_price") && dict["infant_price"] != nil {
                        self.infantPrice = dict["infant_price"] as! Int32
                    }
                    if dict.keys.contains("infant_tax") && dict["infant_tax"] != nil {
                        self.infantTax = dict["infant_tax"] as! Int32
                    }
                    if dict.keys.contains("infant_total_price") && dict["infant_total_price"] != nil {
                        self.infantTotalPrice = dict["infant_total_price"] as! Int32
                    }
                    if dict.keys.contains("original_adult_price") && dict["original_adult_price"] != nil {
                        self.originalAdultPrice = dict["original_adult_price"] as! Int32
                    }
                    if dict.keys.contains("original_adult_total_price") && dict["original_adult_total_price"] != nil {
                        self.originalAdultTotalPrice = dict["original_adult_total_price"] as! Int32
                    }
                    if dict.keys.contains("re_shop_price_info_d_t_o") && dict["re_shop_price_info_d_t_o"] != nil {
                        var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.PriceInfoDTO.ReShopPriceInfoDTO()
                        model.fromMap(dict["re_shop_price_info_d_t_o"] as! [String: Any])
                        self.reShopPriceInfoDTO = model
                    }
                }
            }
            public var airlineInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.AirlineInfo?

            public var arrAirportInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.ArrAirportInfo?

            public var arrCityCode: String?

            public var arrTime: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var depAirportInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.DepAirportInfo?

            public var depCityCode: String?

            public var depTime: String?

            public var duration: Int32?

            public var flightNo: String?

            public var flightShareInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightShareInfo?

            public var flightSize: String?

            public var flightStopInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightStopInfo?

            public var flightTransferInfo: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightTransferInfo?

            public var flightType: String?

            public var journeySeq: Int32?

            public var leftNum: String?

            public var manufacturer: String?

            public var mealDesc: String?

            public var priceInfoDTO: FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.PriceInfoDTO?

            public var segmentSeq: Int32?

            public var share: Bool?

            public var shortFlightSize: String?

            public var spanDay: String?

            public var stop: Bool?

            public var transfer: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
                try self.flightShareInfo?.validate()
                try self.flightStopInfo?.validate()
                try self.flightTransferInfo?.validate()
                try self.priceInfoDTO?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabinClass != nil {
                    map["cabinClass"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabinClassName"] = self.cabinClassName!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.duration != nil {
                    map["duration"] = self.duration!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightShareInfo != nil {
                    map["flight_share_info"] = self.flightShareInfo?.toMap()
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.flightStopInfo != nil {
                    map["flight_stop_info"] = self.flightStopInfo?.toMap()
                }
                if self.flightTransferInfo != nil {
                    map["flight_transfer_info"] = self.flightTransferInfo?.toMap()
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.journeySeq != nil {
                    map["journey_seq"] = self.journeySeq!
                }
                if self.leftNum != nil {
                    map["left_num"] = self.leftNum!
                }
                if self.manufacturer != nil {
                    map["manufacturer"] = self.manufacturer!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.priceInfoDTO != nil {
                    map["price_info_d_t_o"] = self.priceInfoDTO?.toMap()
                }
                if self.segmentSeq != nil {
                    map["segment_seq"] = self.segmentSeq!
                }
                if self.share != nil {
                    map["share"] = self.share!
                }
                if self.shortFlightSize != nil {
                    map["short_flight_size"] = self.shortFlightSize!
                }
                if self.spanDay != nil {
                    map["span_day"] = self.spanDay!
                }
                if self.stop != nil {
                    map["stop"] = self.stop!
                }
                if self.transfer != nil {
                    map["transfer"] = self.transfer!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabinClass") && dict["cabinClass"] != nil {
                    self.cabinClass = dict["cabinClass"] as! String
                }
                if dict.keys.contains("cabinClassName") && dict["cabinClassName"] != nil {
                    self.cabinClassName = dict["cabinClassName"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("duration") && dict["duration"] != nil {
                    self.duration = dict["duration"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightShareInfo()
                    model.fromMap(dict["flight_share_info"] as! [String: Any])
                    self.flightShareInfo = model
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightStopInfo()
                    model.fromMap(dict["flight_stop_info"] as! [String: Any])
                    self.flightStopInfo = model
                }
                if dict.keys.contains("flight_transfer_info") && dict["flight_transfer_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.FlightTransferInfo()
                    model.fromMap(dict["flight_transfer_info"] as! [String: Any])
                    self.flightTransferInfo = model
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("journey_seq") && dict["journey_seq"] != nil {
                    self.journeySeq = dict["journey_seq"] as! Int32
                }
                if dict.keys.contains("left_num") && dict["left_num"] != nil {
                    self.leftNum = dict["left_num"] as! String
                }
                if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                    self.manufacturer = dict["manufacturer"] as! String
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("price_info_d_t_o") && dict["price_info_d_t_o"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList.PriceInfoDTO()
                    model.fromMap(dict["price_info_d_t_o"] as! [String: Any])
                    self.priceInfoDTO = model
                }
                if dict.keys.contains("segment_seq") && dict["segment_seq"] != nil {
                    self.segmentSeq = dict["segment_seq"] as! Int32
                }
                if dict.keys.contains("share") && dict["share"] != nil {
                    self.share = dict["share"] as! Bool
                }
                if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                    self.shortFlightSize = dict["short_flight_size"] as! String
                }
                if dict.keys.contains("span_day") && dict["span_day"] != nil {
                    self.spanDay = dict["span_day"] as! String
                }
                if dict.keys.contains("stop") && dict["stop"] != nil {
                    self.stop = dict["stop"] as! Bool
                }
                if dict.keys.contains("transfer") && dict["transfer"] != nil {
                    self.transfer = dict["transfer"] as! Bool
                }
            }
        }
        public class TransferFlightList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineChineseName: String?

                public var airlineChineseShortName: String?

                public var airlineCode: String?

                public var airlineIcon: String?

                public var cheapFlight: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineChineseName != nil {
                        map["airline_chinese_name"] = self.airlineChineseName!
                    }
                    if self.airlineChineseShortName != nil {
                        map["airline_chinese_short_name"] = self.airlineChineseShortName!
                    }
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineIcon != nil {
                        map["airline_icon"] = self.airlineIcon!
                    }
                    if self.cheapFlight != nil {
                        map["cheap_flight"] = self.cheapFlight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                        self.airlineChineseName = dict["airline_chinese_name"] as! String
                    }
                    if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                        self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                    }
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                        self.airlineIcon = dict["airline_icon"] as! String
                    }
                    if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                        self.cheapFlight = dict["cheap_flight"] as! Bool
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var airportShortName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.airportShortName != nil {
                        map["airport_short_name"] = self.airportShortName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                        self.airportShortName = dict["airport_short_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var airportShortName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.airportShortName != nil {
                        map["airport_short_name"] = self.airportShortName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                        self.airportShortName = dict["airport_short_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class FlightShareInfo : Tea.TeaModel {
                public class OperatingAirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public var operatingAirlineInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightShareInfo.OperatingAirlineInfo?

                public var operatingFlightNo: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.operatingAirlineInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.operatingAirlineInfo != nil {
                        map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                    }
                    if self.operatingFlightNo != nil {
                        map["operating_flight_no"] = self.operatingFlightNo!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                        var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightShareInfo.OperatingAirlineInfo()
                        model.fromMap(dict["operating_airline_info"] as! [String: Any])
                        self.operatingAirlineInfo = model
                    }
                    if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                        self.operatingFlightNo = dict["operating_flight_no"] as! String
                    }
                }
            }
            public class FlightStopInfo : Tea.TeaModel {
                public var stopAirport: String?

                public var stopArrTerm: String?

                public var stopArrTime: String?

                public var stopCityCode: String?

                public var stopCityName: String?

                public var stopDepTerm: String?

                public var stopDepTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.stopAirport != nil {
                        map["stop_airport"] = self.stopAirport!
                    }
                    if self.stopArrTerm != nil {
                        map["stop_arr_term"] = self.stopArrTerm!
                    }
                    if self.stopArrTime != nil {
                        map["stop_arr_time"] = self.stopArrTime!
                    }
                    if self.stopCityCode != nil {
                        map["stop_city_code"] = self.stopCityCode!
                    }
                    if self.stopCityName != nil {
                        map["stop_city_name"] = self.stopCityName!
                    }
                    if self.stopDepTerm != nil {
                        map["stop_dep_term"] = self.stopDepTerm!
                    }
                    if self.stopDepTime != nil {
                        map["stop_dep_time"] = self.stopDepTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                        self.stopAirport = dict["stop_airport"] as! String
                    }
                    if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                        self.stopArrTerm = dict["stop_arr_term"] as! String
                    }
                    if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                        self.stopArrTime = dict["stop_arr_time"] as! String
                    }
                    if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                        self.stopCityCode = dict["stop_city_code"] as! String
                    }
                    if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                        self.stopCityName = dict["stop_city_name"] as! String
                    }
                    if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                        self.stopDepTerm = dict["stop_dep_term"] as! String
                    }
                    if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                        self.stopDepTime = dict["stop_dep_time"] as! String
                    }
                }
            }
            public class FlightTransferInfo : Tea.TeaModel {
                public class TransferAirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public var transferAirlineInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightTransferInfo.TransferAirlineInfo?

                public var transferCityCode: String?

                public var transferCityName: String?

                public var transferDepTime: String?

                public var transferFlightNo: String?

                public var transferFlightSize: String?

                public var transferShare: Bool?

                public var transferStopTime: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.transferAirlineInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.transferAirlineInfo != nil {
                        map["transfer_airline_info"] = self.transferAirlineInfo?.toMap()
                    }
                    if self.transferCityCode != nil {
                        map["transfer_city_code"] = self.transferCityCode!
                    }
                    if self.transferCityName != nil {
                        map["transfer_city_name"] = self.transferCityName!
                    }
                    if self.transferDepTime != nil {
                        map["transfer_dep_time"] = self.transferDepTime!
                    }
                    if self.transferFlightNo != nil {
                        map["transfer_flight_no"] = self.transferFlightNo!
                    }
                    if self.transferFlightSize != nil {
                        map["transfer_flight_size"] = self.transferFlightSize!
                    }
                    if self.transferShare != nil {
                        map["transfer_share"] = self.transferShare!
                    }
                    if self.transferStopTime != nil {
                        map["transfer_stop_time"] = self.transferStopTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("transfer_airline_info") && dict["transfer_airline_info"] != nil {
                        var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightTransferInfo.TransferAirlineInfo()
                        model.fromMap(dict["transfer_airline_info"] as! [String: Any])
                        self.transferAirlineInfo = model
                    }
                    if dict.keys.contains("transfer_city_code") && dict["transfer_city_code"] != nil {
                        self.transferCityCode = dict["transfer_city_code"] as! String
                    }
                    if dict.keys.contains("transfer_city_name") && dict["transfer_city_name"] != nil {
                        self.transferCityName = dict["transfer_city_name"] as! String
                    }
                    if dict.keys.contains("transfer_dep_time") && dict["transfer_dep_time"] != nil {
                        self.transferDepTime = dict["transfer_dep_time"] as! String
                    }
                    if dict.keys.contains("transfer_flight_no") && dict["transfer_flight_no"] != nil {
                        self.transferFlightNo = dict["transfer_flight_no"] as! String
                    }
                    if dict.keys.contains("transfer_flight_size") && dict["transfer_flight_size"] != nil {
                        self.transferFlightSize = dict["transfer_flight_size"] as! String
                    }
                    if dict.keys.contains("transfer_share") && dict["transfer_share"] != nil {
                        self.transferShare = dict["transfer_share"] as! Bool
                    }
                    if dict.keys.contains("transfer_stop_time") && dict["transfer_stop_time"] != nil {
                        self.transferStopTime = dict["transfer_stop_time"] as! Int32
                    }
                }
            }
            public class PriceInfoDTO : Tea.TeaModel {
                public class ReShopPriceInfoDTO : Tea.TeaModel {
                    public var reShopAdultChangeFee: Int32?

                    public var reShopAdultPrice: Int32?

                    public var reShopAdultPriceGap: Int32?

                    public var reShopChildChangeFee: Int32?

                    public var reShopChildPrice: Int32?

                    public var reShopChildPriceGap: Int32?

                    public var reShopInfChangeFee: Int32?

                    public var reShopInfPrice: Int32?

                    public var reShopInfPriceGap: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reShopAdultChangeFee != nil {
                            map["re_shop_adult_change_fee"] = self.reShopAdultChangeFee!
                        }
                        if self.reShopAdultPrice != nil {
                            map["re_shop_adult_price"] = self.reShopAdultPrice!
                        }
                        if self.reShopAdultPriceGap != nil {
                            map["re_shop_adult_price_gap"] = self.reShopAdultPriceGap!
                        }
                        if self.reShopChildChangeFee != nil {
                            map["re_shop_child_change_fee"] = self.reShopChildChangeFee!
                        }
                        if self.reShopChildPrice != nil {
                            map["re_shop_child_price"] = self.reShopChildPrice!
                        }
                        if self.reShopChildPriceGap != nil {
                            map["re_shop_child_price_gap"] = self.reShopChildPriceGap!
                        }
                        if self.reShopInfChangeFee != nil {
                            map["re_shop_inf_change_fee"] = self.reShopInfChangeFee!
                        }
                        if self.reShopInfPrice != nil {
                            map["re_shop_inf_price"] = self.reShopInfPrice!
                        }
                        if self.reShopInfPriceGap != nil {
                            map["re_shop_inf_price_gap"] = self.reShopInfPriceGap!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("re_shop_adult_change_fee") && dict["re_shop_adult_change_fee"] != nil {
                            self.reShopAdultChangeFee = dict["re_shop_adult_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_adult_price") && dict["re_shop_adult_price"] != nil {
                            self.reShopAdultPrice = dict["re_shop_adult_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_adult_price_gap") && dict["re_shop_adult_price_gap"] != nil {
                            self.reShopAdultPriceGap = dict["re_shop_adult_price_gap"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_change_fee") && dict["re_shop_child_change_fee"] != nil {
                            self.reShopChildChangeFee = dict["re_shop_child_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_price") && dict["re_shop_child_price"] != nil {
                            self.reShopChildPrice = dict["re_shop_child_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_price_gap") && dict["re_shop_child_price_gap"] != nil {
                            self.reShopChildPriceGap = dict["re_shop_child_price_gap"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_change_fee") && dict["re_shop_inf_change_fee"] != nil {
                            self.reShopInfChangeFee = dict["re_shop_inf_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_price") && dict["re_shop_inf_price"] != nil {
                            self.reShopInfPrice = dict["re_shop_inf_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_price_gap") && dict["re_shop_inf_price_gap"] != nil {
                            self.reShopInfPriceGap = dict["re_shop_inf_price_gap"] as! Int32
                        }
                    }
                }
                public var adultPrice: Int32?

                public var adultTax: Int32?

                public var adultTotalPrice: Int32?

                public var beforeControlPrice: Int32?

                public var childPrice: Int32?

                public var childTax: Int32?

                public var childTotalPrice: Int32?

                public var infantPrice: Int32?

                public var infantTax: Int32?

                public var infantTotalPrice: Int32?

                public var originalAdultPrice: Int32?

                public var originalAdultTotalPrice: Int32?

                public var reShopPriceInfoDTO: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.PriceInfoDTO.ReShopPriceInfoDTO?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.reShopPriceInfoDTO?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adultPrice != nil {
                        map["adult_price"] = self.adultPrice!
                    }
                    if self.adultTax != nil {
                        map["adult_tax"] = self.adultTax!
                    }
                    if self.adultTotalPrice != nil {
                        map["adult_total_price"] = self.adultTotalPrice!
                    }
                    if self.beforeControlPrice != nil {
                        map["before_control_price"] = self.beforeControlPrice!
                    }
                    if self.childPrice != nil {
                        map["child_price"] = self.childPrice!
                    }
                    if self.childTax != nil {
                        map["child_tax"] = self.childTax!
                    }
                    if self.childTotalPrice != nil {
                        map["child_total_price"] = self.childTotalPrice!
                    }
                    if self.infantPrice != nil {
                        map["infant_price"] = self.infantPrice!
                    }
                    if self.infantTax != nil {
                        map["infant_tax"] = self.infantTax!
                    }
                    if self.infantTotalPrice != nil {
                        map["infant_total_price"] = self.infantTotalPrice!
                    }
                    if self.originalAdultPrice != nil {
                        map["original_adult_price"] = self.originalAdultPrice!
                    }
                    if self.originalAdultTotalPrice != nil {
                        map["original_adult_total_price"] = self.originalAdultTotalPrice!
                    }
                    if self.reShopPriceInfoDTO != nil {
                        map["re_shop_price_info_d_t_o"] = self.reShopPriceInfoDTO?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("adult_price") && dict["adult_price"] != nil {
                        self.adultPrice = dict["adult_price"] as! Int32
                    }
                    if dict.keys.contains("adult_tax") && dict["adult_tax"] != nil {
                        self.adultTax = dict["adult_tax"] as! Int32
                    }
                    if dict.keys.contains("adult_total_price") && dict["adult_total_price"] != nil {
                        self.adultTotalPrice = dict["adult_total_price"] as! Int32
                    }
                    if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                        self.beforeControlPrice = dict["before_control_price"] as! Int32
                    }
                    if dict.keys.contains("child_price") && dict["child_price"] != nil {
                        self.childPrice = dict["child_price"] as! Int32
                    }
                    if dict.keys.contains("child_tax") && dict["child_tax"] != nil {
                        self.childTax = dict["child_tax"] as! Int32
                    }
                    if dict.keys.contains("child_total_price") && dict["child_total_price"] != nil {
                        self.childTotalPrice = dict["child_total_price"] as! Int32
                    }
                    if dict.keys.contains("infant_price") && dict["infant_price"] != nil {
                        self.infantPrice = dict["infant_price"] as! Int32
                    }
                    if dict.keys.contains("infant_tax") && dict["infant_tax"] != nil {
                        self.infantTax = dict["infant_tax"] as! Int32
                    }
                    if dict.keys.contains("infant_total_price") && dict["infant_total_price"] != nil {
                        self.infantTotalPrice = dict["infant_total_price"] as! Int32
                    }
                    if dict.keys.contains("original_adult_price") && dict["original_adult_price"] != nil {
                        self.originalAdultPrice = dict["original_adult_price"] as! Int32
                    }
                    if dict.keys.contains("original_adult_total_price") && dict["original_adult_total_price"] != nil {
                        self.originalAdultTotalPrice = dict["original_adult_total_price"] as! Int32
                    }
                    if dict.keys.contains("re_shop_price_info_d_t_o") && dict["re_shop_price_info_d_t_o"] != nil {
                        var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.PriceInfoDTO.ReShopPriceInfoDTO()
                        model.fromMap(dict["re_shop_price_info_d_t_o"] as! [String: Any])
                        self.reShopPriceInfoDTO = model
                    }
                }
            }
            public var airlineInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.AirlineInfo?

            public var arrAirportInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.ArrAirportInfo?

            public var arrCityCode: String?

            public var arrTime: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var depAirportInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.DepAirportInfo?

            public var depCityCode: String?

            public var depTime: String?

            public var duration: Int32?

            public var flightNo: String?

            public var flightShareInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightShareInfo?

            public var flightSize: String?

            public var flightStopInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightStopInfo?

            public var flightTransferInfo: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightTransferInfo?

            public var flightType: String?

            public var journeySeq: Int32?

            public var leftNum: String?

            public var manufacturer: String?

            public var mealDesc: String?

            public var priceInfoDTO: FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.PriceInfoDTO?

            public var segmentSeq: Int32?

            public var share: Bool?

            public var shortFlightSize: String?

            public var spanDay: String?

            public var stop: Bool?

            public var transfer: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
                try self.flightShareInfo?.validate()
                try self.flightStopInfo?.validate()
                try self.flightTransferInfo?.validate()
                try self.priceInfoDTO?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabinClass != nil {
                    map["cabinClass"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabinClassName"] = self.cabinClassName!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.duration != nil {
                    map["duration"] = self.duration!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightShareInfo != nil {
                    map["flight_share_info"] = self.flightShareInfo?.toMap()
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.flightStopInfo != nil {
                    map["flight_stop_info"] = self.flightStopInfo?.toMap()
                }
                if self.flightTransferInfo != nil {
                    map["flight_transfer_info"] = self.flightTransferInfo?.toMap()
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.journeySeq != nil {
                    map["journey_seq"] = self.journeySeq!
                }
                if self.leftNum != nil {
                    map["left_num"] = self.leftNum!
                }
                if self.manufacturer != nil {
                    map["manufacturer"] = self.manufacturer!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.priceInfoDTO != nil {
                    map["price_info_d_t_o"] = self.priceInfoDTO?.toMap()
                }
                if self.segmentSeq != nil {
                    map["segment_seq"] = self.segmentSeq!
                }
                if self.share != nil {
                    map["share"] = self.share!
                }
                if self.shortFlightSize != nil {
                    map["short_flight_size"] = self.shortFlightSize!
                }
                if self.spanDay != nil {
                    map["span_day"] = self.spanDay!
                }
                if self.stop != nil {
                    map["stop"] = self.stop!
                }
                if self.transfer != nil {
                    map["transfer"] = self.transfer!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabinClass") && dict["cabinClass"] != nil {
                    self.cabinClass = dict["cabinClass"] as! String
                }
                if dict.keys.contains("cabinClassName") && dict["cabinClassName"] != nil {
                    self.cabinClassName = dict["cabinClassName"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("duration") && dict["duration"] != nil {
                    self.duration = dict["duration"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightShareInfo()
                    model.fromMap(dict["flight_share_info"] as! [String: Any])
                    self.flightShareInfo = model
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightStopInfo()
                    model.fromMap(dict["flight_stop_info"] as! [String: Any])
                    self.flightStopInfo = model
                }
                if dict.keys.contains("flight_transfer_info") && dict["flight_transfer_info"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.FlightTransferInfo()
                    model.fromMap(dict["flight_transfer_info"] as! [String: Any])
                    self.flightTransferInfo = model
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("journey_seq") && dict["journey_seq"] != nil {
                    self.journeySeq = dict["journey_seq"] as! Int32
                }
                if dict.keys.contains("left_num") && dict["left_num"] != nil {
                    self.leftNum = dict["left_num"] as! String
                }
                if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                    self.manufacturer = dict["manufacturer"] as! String
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("price_info_d_t_o") && dict["price_info_d_t_o"] != nil {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList.PriceInfoDTO()
                    model.fromMap(dict["price_info_d_t_o"] as! [String: Any])
                    self.priceInfoDTO = model
                }
                if dict.keys.contains("segment_seq") && dict["segment_seq"] != nil {
                    self.segmentSeq = dict["segment_seq"] as! Int32
                }
                if dict.keys.contains("share") && dict["share"] != nil {
                    self.share = dict["share"] as! Bool
                }
                if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                    self.shortFlightSize = dict["short_flight_size"] as! String
                }
                if dict.keys.contains("span_day") && dict["span_day"] != nil {
                    self.spanDay = dict["span_day"] as! String
                }
                if dict.keys.contains("stop") && dict["stop"] != nil {
                    self.stop = dict["stop"] as! Bool
                }
                if dict.keys.contains("transfer") && dict["transfer"] != nil {
                    self.transfer = dict["transfer"] as! Bool
                }
            }
        }
        public var directFlightList: [FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList]?

        public var sessionId: String?

        public var transferFlightList: [FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList]?

        public var transferTitle: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.directFlightList != nil {
                var tmp : [Any] = []
                for k in self.directFlightList! {
                    tmp.append(k.toMap())
                }
                map["direct_flight_list"] = tmp
            }
            if self.sessionId != nil {
                map["session_id"] = self.sessionId!
            }
            if self.transferFlightList != nil {
                var tmp : [Any] = []
                for k in self.transferFlightList! {
                    tmp.append(k.toMap())
                }
                map["transfer_flight_list"] = tmp
            }
            if self.transferTitle != nil {
                map["transfer_title"] = self.transferTitle!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("direct_flight_list") && dict["direct_flight_list"] != nil {
                var tmp : [FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList] = []
                for v in dict["direct_flight_list"] as! [Any] {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.DirectFlightList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.directFlightList = tmp
            }
            if dict.keys.contains("session_id") && dict["session_id"] != nil {
                self.sessionId = dict["session_id"] as! String
            }
            if dict.keys.contains("transfer_flight_list") && dict["transfer_flight_list"] != nil {
                var tmp : [FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList] = []
                for v in dict["transfer_flight_list"] as! [Any] {
                    var model = FlightModifyListingSearchV2ResponseBody.Module.TransferFlightList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.transferFlightList = tmp
            }
            if dict.keys.contains("transfer_title") && dict["transfer_title"] != nil {
                self.transferTitle = dict["transfer_title"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightModifyListingSearchV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightModifyListingSearchV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightModifyListingSearchV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightModifyListingSearchV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightModifyListingSearchV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightModifyOrderDetailV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightModifyOrderDetailV2Request : Tea.TeaModel {
    public var isvName: String?

    public var modifyApplyId: String?

    public var needQueryServiceFee: Bool?

    public var orderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.modifyApplyId != nil {
            map["modify_apply_id"] = self.modifyApplyId!
        }
        if self.needQueryServiceFee != nil {
            map["need_query_service_fee"] = self.needQueryServiceFee!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("modify_apply_id") && dict["modify_apply_id"] != nil {
            self.modifyApplyId = dict["modify_apply_id"] as! String
        }
        if dict.keys.contains("need_query_service_fee") && dict["need_query_service_fee"] != nil {
            self.needQueryServiceFee = dict["need_query_service_fee"] as! Bool
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
    }
}

public class FlightModifyOrderDetailV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ContactInfoDTO : Tea.TeaModel {
            public var contactEmail: String?

            public var contactName: String?

            public var contactPhone: String?

            public var sendMsgToPassenger: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactEmail != nil {
                    map["contact_email"] = self.contactEmail!
                }
                if self.contactName != nil {
                    map["contact_name"] = self.contactName!
                }
                if self.contactPhone != nil {
                    map["contact_phone"] = self.contactPhone!
                }
                if self.sendMsgToPassenger != nil {
                    map["send_msg_to_passenger"] = self.sendMsgToPassenger!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("contact_email") && dict["contact_email"] != nil {
                    self.contactEmail = dict["contact_email"] as! String
                }
                if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                    self.contactName = dict["contact_name"] as! String
                }
                if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                    self.contactPhone = dict["contact_phone"] as! String
                }
                if dict.keys.contains("send_msg_to_passenger") && dict["send_msg_to_passenger"] != nil {
                    self.sendMsgToPassenger = dict["send_msg_to_passenger"] as! Bool
                }
            }
        }
        public class DestFlightInfoDTOS : Tea.TeaModel {
            public class SegmentPosition : Tea.TeaModel {
                public var journeyIndex: Int32?

                public var segmentIndex: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.journeyIndex != nil {
                        map["journey_index"] = self.journeyIndex!
                    }
                    if self.segmentIndex != nil {
                        map["segment_index"] = self.segmentIndex!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                        self.journeyIndex = dict["journey_index"] as! Int32
                    }
                    if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                        self.segmentIndex = dict["segment_index"] as! Int32
                    }
                }
            }
            public var airlineCode: String?

            public var airlineIconUrl: String?

            public var airlineName: String?

            public var arrAirportCode: String?

            public var arrAirportName: String?

            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrTerminal: String?

            public var arrTime: String?

            public var cabin: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var cabinDiscount: Int64?

            public var carrierAirlineCode: String?

            public var carrierAirlineIconUrl: String?

            public var carrierAirlineName: String?

            public var carrierFlightNo: String?

            public var depAirportCode: String?

            public var depAirportName: String?

            public var depCityCode: String?

            public var depCityName: String?

            public var depTerminal: String?

            public var depTime: String?

            public var flightNo: String?

            public var flightType: String?

            public var mealDesc: String?

            public var segmentIId: String?

            public var segmentPosition: FlightModifyOrderDetailV2ResponseBody.Module.DestFlightInfoDTOS.SegmentPosition?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.segmentPosition?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineCode != nil {
                    map["airline_code"] = self.airlineCode!
                }
                if self.airlineIconUrl != nil {
                    map["airline_icon_url"] = self.airlineIconUrl!
                }
                if self.airlineName != nil {
                    map["airline_name"] = self.airlineName!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrAirportName != nil {
                    map["arr_airport_name"] = self.arrAirportName!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTerminal != nil {
                    map["arr_terminal"] = self.arrTerminal!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabin_class_name"] = self.cabinClassName!
                }
                if self.cabinDiscount != nil {
                    map["cabin_discount"] = self.cabinDiscount!
                }
                if self.carrierAirlineCode != nil {
                    map["carrier_airline_code"] = self.carrierAirlineCode!
                }
                if self.carrierAirlineIconUrl != nil {
                    map["carrier_airline_icon_url"] = self.carrierAirlineIconUrl!
                }
                if self.carrierAirlineName != nil {
                    map["carrier_airline_name"] = self.carrierAirlineName!
                }
                if self.carrierFlightNo != nil {
                    map["carrier_flight_no"] = self.carrierFlightNo!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depAirportName != nil {
                    map["dep_airport_name"] = self.depAirportName!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTerminal != nil {
                    map["dep_terminal"] = self.depTerminal!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.segmentIId != nil {
                    map["segmentI_id"] = self.segmentIId!
                }
                if self.segmentPosition != nil {
                    map["segment_position"] = self.segmentPosition?.toMap()
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                    self.airlineCode = dict["airline_code"] as! String
                }
                if dict.keys.contains("airline_icon_url") && dict["airline_icon_url"] != nil {
                    self.airlineIconUrl = dict["airline_icon_url"] as! String
                }
                if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                    self.airlineName = dict["airline_name"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_airport_name") && dict["arr_airport_name"] != nil {
                    self.arrAirportName = dict["arr_airport_name"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_terminal") && dict["arr_terminal"] != nil {
                    self.arrTerminal = dict["arr_terminal"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                    self.cabinClassName = dict["cabin_class_name"] as! String
                }
                if dict.keys.contains("cabin_discount") && dict["cabin_discount"] != nil {
                    self.cabinDiscount = dict["cabin_discount"] as! Int64
                }
                if dict.keys.contains("carrier_airline_code") && dict["carrier_airline_code"] != nil {
                    self.carrierAirlineCode = dict["carrier_airline_code"] as! String
                }
                if dict.keys.contains("carrier_airline_icon_url") && dict["carrier_airline_icon_url"] != nil {
                    self.carrierAirlineIconUrl = dict["carrier_airline_icon_url"] as! String
                }
                if dict.keys.contains("carrier_airline_name") && dict["carrier_airline_name"] != nil {
                    self.carrierAirlineName = dict["carrier_airline_name"] as! String
                }
                if dict.keys.contains("carrier_flight_no") && dict["carrier_flight_no"] != nil {
                    self.carrierFlightNo = dict["carrier_flight_no"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_airport_name") && dict["dep_airport_name"] != nil {
                    self.depAirportName = dict["dep_airport_name"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_terminal") && dict["dep_terminal"] != nil {
                    self.depTerminal = dict["dep_terminal"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("segmentI_id") && dict["segmentI_id"] != nil {
                    self.segmentIId = dict["segmentI_id"] as! String
                }
                if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                    var model = FlightModifyOrderDetailV2ResponseBody.Module.DestFlightInfoDTOS.SegmentPosition()
                    model.fromMap(dict["segment_position"] as! [String: Any])
                    self.segmentPosition = model
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
            }
        }
        public class TravelerInfoDTOS : Tea.TeaModel {
            public class ChangeFee : Tea.TeaModel {
                public var changeFee: Int64?

                public var serviceFee: Int64?

                public var upgradePrice: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.changeFee != nil {
                        map["change_fee"] = self.changeFee!
                    }
                    if self.serviceFee != nil {
                        map["service_fee"] = self.serviceFee!
                    }
                    if self.upgradePrice != nil {
                        map["upgrade_price"] = self.upgradePrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                        self.changeFee = dict["change_fee"] as! Int64
                    }
                    if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                        self.serviceFee = dict["service_fee"] as! Int64
                    }
                    if dict.keys.contains("upgrade_price") && dict["upgrade_price"] != nil {
                        self.upgradePrice = dict["upgrade_price"] as! Int64
                    }
                }
            }
            public var birthDate: String?

            public var certNo: String?

            public var certType: Int32?

            public var changeFee: FlightModifyOrderDetailV2ResponseBody.Module.TravelerInfoDTOS.ChangeFee?

            public var gender: Int32?

            public var originTicketNos: [String]?

            public var passengerId: String?

            public var passengerName: String?

            public var passengerType: Int32?

            public var phone: String?

            public var pid: Int64?

            public var ticketNos: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.changeFee?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.birthDate != nil {
                    map["birth_date"] = self.birthDate!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.changeFee != nil {
                    map["change_fee"] = self.changeFee?.toMap()
                }
                if self.gender != nil {
                    map["gender"] = self.gender!
                }
                if self.originTicketNos != nil {
                    map["origin_ticket_nos"] = self.originTicketNos!
                }
                if self.passengerId != nil {
                    map["passenger_id"] = self.passengerId!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.passengerType != nil {
                    map["passenger_type"] = self.passengerType!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                if self.pid != nil {
                    map["pid"] = self.pid!
                }
                if self.ticketNos != nil {
                    map["ticket_nos"] = self.ticketNos!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("birth_date") && dict["birth_date"] != nil {
                    self.birthDate = dict["birth_date"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! Int32
                }
                if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                    var model = FlightModifyOrderDetailV2ResponseBody.Module.TravelerInfoDTOS.ChangeFee()
                    model.fromMap(dict["change_fee"] as! [String: Any])
                    self.changeFee = model
                }
                if dict.keys.contains("gender") && dict["gender"] != nil {
                    self.gender = dict["gender"] as! Int32
                }
                if dict.keys.contains("origin_ticket_nos") && dict["origin_ticket_nos"] != nil {
                    self.originTicketNos = dict["origin_ticket_nos"] as! [String]
                }
                if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                    self.passengerId = dict["passenger_id"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                    self.passengerType = dict["passenger_type"] as! Int32
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
                if dict.keys.contains("pid") && dict["pid"] != nil {
                    self.pid = dict["pid"] as! Int64
                }
                if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
                    self.ticketNos = dict["ticket_nos"] as! [String]
                }
            }
        }
        public var applyTime: String?

        public var bookUserEmail: String?

        public var bookUserName: String?

        public var bookuserPhone: String?

        public var changeFailReason: String?

        public var contactInfoDTO: FlightModifyOrderDetailV2ResponseBody.Module.ContactInfoDTO?

        public var destFlightInfoDTOS: [FlightModifyOrderDetailV2ResponseBody.Module.DestFlightInfoDTOS]?

        public var lastPayTime: String?

        public var orderId: Int64?

        public var outOrderId: String?

        public var outSubOrderId: String?

        public var payTime: String?

        public var reason: String?

        public var status: Int32?

        public var subOrderId: Int64?

        public var ticketTime: String?

        public var totalPrice: Int64?

        public var totalServiceFeePrice: Int64?

        public var travelerInfoDTOS: [FlightModifyOrderDetailV2ResponseBody.Module.TravelerInfoDTOS]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactInfoDTO?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyTime != nil {
                map["apply_time"] = self.applyTime!
            }
            if self.bookUserEmail != nil {
                map["book_user_email"] = self.bookUserEmail!
            }
            if self.bookUserName != nil {
                map["book_user_name"] = self.bookUserName!
            }
            if self.bookuserPhone != nil {
                map["bookuser_phone"] = self.bookuserPhone!
            }
            if self.changeFailReason != nil {
                map["change_fail_reason"] = self.changeFailReason!
            }
            if self.contactInfoDTO != nil {
                map["contact_info_d_t_o"] = self.contactInfoDTO?.toMap()
            }
            if self.destFlightInfoDTOS != nil {
                var tmp : [Any] = []
                for k in self.destFlightInfoDTOS! {
                    tmp.append(k.toMap())
                }
                map["dest_flight_info_d_t_o_s"] = tmp
            }
            if self.lastPayTime != nil {
                map["last_pay_time"] = self.lastPayTime!
            }
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.outOrderId != nil {
                map["out_order_id"] = self.outOrderId!
            }
            if self.outSubOrderId != nil {
                map["out_sub_order_id"] = self.outSubOrderId!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.reason != nil {
                map["reason"] = self.reason!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.subOrderId != nil {
                map["sub_order_id"] = self.subOrderId!
            }
            if self.ticketTime != nil {
                map["ticket_time"] = self.ticketTime!
            }
            if self.totalPrice != nil {
                map["total_price"] = self.totalPrice!
            }
            if self.totalServiceFeePrice != nil {
                map["total_service_fee_price"] = self.totalServiceFeePrice!
            }
            if self.travelerInfoDTOS != nil {
                var tmp : [Any] = []
                for k in self.travelerInfoDTOS! {
                    tmp.append(k.toMap())
                }
                map["traveler_info_d_t_o_s"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_time") && dict["apply_time"] != nil {
                self.applyTime = dict["apply_time"] as! String
            }
            if dict.keys.contains("book_user_email") && dict["book_user_email"] != nil {
                self.bookUserEmail = dict["book_user_email"] as! String
            }
            if dict.keys.contains("book_user_name") && dict["book_user_name"] != nil {
                self.bookUserName = dict["book_user_name"] as! String
            }
            if dict.keys.contains("bookuser_phone") && dict["bookuser_phone"] != nil {
                self.bookuserPhone = dict["bookuser_phone"] as! String
            }
            if dict.keys.contains("change_fail_reason") && dict["change_fail_reason"] != nil {
                self.changeFailReason = dict["change_fail_reason"] as! String
            }
            if dict.keys.contains("contact_info_d_t_o") && dict["contact_info_d_t_o"] != nil {
                var model = FlightModifyOrderDetailV2ResponseBody.Module.ContactInfoDTO()
                model.fromMap(dict["contact_info_d_t_o"] as! [String: Any])
                self.contactInfoDTO = model
            }
            if dict.keys.contains("dest_flight_info_d_t_o_s") && dict["dest_flight_info_d_t_o_s"] != nil {
                var tmp : [FlightModifyOrderDetailV2ResponseBody.Module.DestFlightInfoDTOS] = []
                for v in dict["dest_flight_info_d_t_o_s"] as! [Any] {
                    var model = FlightModifyOrderDetailV2ResponseBody.Module.DestFlightInfoDTOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.destFlightInfoDTOS = tmp
            }
            if dict.keys.contains("last_pay_time") && dict["last_pay_time"] != nil {
                self.lastPayTime = dict["last_pay_time"] as! String
            }
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! Int64
            }
            if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
                self.outOrderId = dict["out_order_id"] as! String
            }
            if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
                self.outSubOrderId = dict["out_sub_order_id"] as! String
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("reason") && dict["reason"] != nil {
                self.reason = dict["reason"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                self.subOrderId = dict["sub_order_id"] as! Int64
            }
            if dict.keys.contains("ticket_time") && dict["ticket_time"] != nil {
                self.ticketTime = dict["ticket_time"] as! String
            }
            if dict.keys.contains("total_price") && dict["total_price"] != nil {
                self.totalPrice = dict["total_price"] as! Int64
            }
            if dict.keys.contains("total_service_fee_price") && dict["total_service_fee_price"] != nil {
                self.totalServiceFeePrice = dict["total_service_fee_price"] as! Int64
            }
            if dict.keys.contains("traveler_info_d_t_o_s") && dict["traveler_info_d_t_o_s"] != nil {
                var tmp : [FlightModifyOrderDetailV2ResponseBody.Module.TravelerInfoDTOS] = []
                for v in dict["traveler_info_d_t_o_s"] as! [Any] {
                    var model = FlightModifyOrderDetailV2ResponseBody.Module.TravelerInfoDTOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerInfoDTOS = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightModifyOrderDetailV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightModifyOrderDetailV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightModifyOrderDetailV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightModifyOrderDetailV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightModifyOrderDetailV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightModifyOtaSearchV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightModifyOtaSearchV2Request : Tea.TeaModel {
    public class PassengerSegmentRelations : Tea.TeaModel {
        public var passengerId: String?

        public var segmentIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.passengerId != nil {
                map["passenger_id"] = self.passengerId!
            }
            if self.segmentIdList != nil {
                map["segment_id_list"] = self.segmentIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                self.passengerId = dict["passenger_id"] as! String
            }
            if dict.keys.contains("segment_id_list") && dict["segment_id_list"] != nil {
                self.segmentIdList = dict["segment_id_list"] as! [String]
            }
        }
    }
    public class SelectedSegments : Tea.TeaModel {
        public var arrCityCode: String?

        public var depCityCode: String?

        public var depDateTime: String?

        public var journeySeq: Int32?

        public var marketingFlightNo: String?

        public var operatingFlightNo: String?

        public var segmentSeq: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDateTime != nil {
                map["dep_date_time"] = self.depDateTime!
            }
            if self.journeySeq != nil {
                map["journey_seq"] = self.journeySeq!
            }
            if self.marketingFlightNo != nil {
                map["marketing_flight_no"] = self.marketingFlightNo!
            }
            if self.operatingFlightNo != nil {
                map["operating_flight_no"] = self.operatingFlightNo!
            }
            if self.segmentSeq != nil {
                map["segment_seq"] = self.segmentSeq!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date_time") && dict["dep_date_time"] != nil {
                self.depDateTime = dict["dep_date_time"] as! String
            }
            if dict.keys.contains("journey_seq") && dict["journey_seq"] != nil {
                self.journeySeq = dict["journey_seq"] as! Int32
            }
            if dict.keys.contains("marketing_flight_no") && dict["marketing_flight_no"] != nil {
                self.marketingFlightNo = dict["marketing_flight_no"] as! String
            }
            if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                self.operatingFlightNo = dict["operating_flight_no"] as! String
            }
            if dict.keys.contains("segment_seq") && dict["segment_seq"] != nil {
                self.segmentSeq = dict["segment_seq"] as! Int32
            }
        }
    }
    public var cabinClass: [Int32]?

    public var depDate: [String]?

    public var isvName: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var passengerSegmentRelations: [FlightModifyOtaSearchV2Request.PassengerSegmentRelations]?

    public var selectedSegments: [FlightModifyOtaSearchV2Request.SelectedSegments]?

    public var sessionId: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.passengerSegmentRelations != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentRelations! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_relations"] = tmp
        }
        if self.selectedSegments != nil {
            var tmp : [Any] = []
            for k in self.selectedSegments! {
                tmp.append(k.toMap())
            }
            map["selected_segments"] = tmp
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! [Int32]
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! [String]
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            var tmp : [FlightModifyOtaSearchV2Request.PassengerSegmentRelations] = []
            for v in dict["passenger_segment_relations"] as! [Any] {
                var model = FlightModifyOtaSearchV2Request.PassengerSegmentRelations()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentRelations = tmp
        }
        if dict.keys.contains("selected_segments") && dict["selected_segments"] != nil {
            var tmp : [FlightModifyOtaSearchV2Request.SelectedSegments] = []
            for v in dict["selected_segments"] as! [Any] {
                var model = FlightModifyOtaSearchV2Request.SelectedSegments()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.selectedSegments = tmp
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightModifyOtaSearchV2ShrinkRequest : Tea.TeaModel {
    public var cabinClassShrink: String?

    public var depDateShrink: String?

    public var isvName: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public var passengerSegmentRelationsShrink: String?

    public var selectedSegmentsShrink: String?

    public var sessionId: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinClassShrink != nil {
            map["cabin_class"] = self.cabinClassShrink!
        }
        if self.depDateShrink != nil {
            map["dep_date"] = self.depDateShrink!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.passengerSegmentRelationsShrink != nil {
            map["passenger_segment_relations"] = self.passengerSegmentRelationsShrink!
        }
        if self.selectedSegmentsShrink != nil {
            map["selected_segments"] = self.selectedSegmentsShrink!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClassShrink = dict["cabin_class"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDateShrink = dict["dep_date"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            self.passengerSegmentRelationsShrink = dict["passenger_segment_relations"] as! String
        }
        if dict.keys.contains("selected_segments") && dict["selected_segments"] != nil {
            self.selectedSegmentsShrink = dict["selected_segments"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightModifyOtaSearchV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class AgentInfo : Tea.TeaModel {
            public class CabinClassInfo : Tea.TeaModel {
                public var cabinClass: String?

                public var className: String?

                public var innerCabinClass: Int32?

                public var quantity: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cabinClass != nil {
                        map["cabin_class"] = self.cabinClass!
                    }
                    if self.className != nil {
                        map["class_name"] = self.className!
                    }
                    if self.innerCabinClass != nil {
                        map["inner_cabin_class"] = self.innerCabinClass!
                    }
                    if self.quantity != nil {
                        map["quantity"] = self.quantity!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                        self.cabinClass = dict["cabin_class"] as! String
                    }
                    if dict.keys.contains("class_name") && dict["class_name"] != nil {
                        self.className = dict["class_name"] as! String
                    }
                    if dict.keys.contains("inner_cabin_class") && dict["inner_cabin_class"] != nil {
                        self.innerCabinClass = dict["inner_cabin_class"] as! Int32
                    }
                    if dict.keys.contains("quantity") && dict["quantity"] != nil {
                        self.quantity = dict["quantity"] as! String
                    }
                }
            }
            public class PriceInfoDTO : Tea.TeaModel {
                public class ReShopPriceInfoDTO : Tea.TeaModel {
                    public var reShopAdultChangeFee: Int32?

                    public var reShopAdultPrice: Int32?

                    public var reShopAdultPriceGap: Int32?

                    public var reShopChildChangeFee: Int32?

                    public var reShopChildPrice: Int32?

                    public var reShopChildPriceGap: Int32?

                    public var reShopInfChangeFee: Int32?

                    public var reShopInfPrice: Int32?

                    public var reShopInfPriceGap: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.reShopAdultChangeFee != nil {
                            map["re_shop_adult_change_fee"] = self.reShopAdultChangeFee!
                        }
                        if self.reShopAdultPrice != nil {
                            map["re_shop_adult_price"] = self.reShopAdultPrice!
                        }
                        if self.reShopAdultPriceGap != nil {
                            map["re_shop_adult_price_gap"] = self.reShopAdultPriceGap!
                        }
                        if self.reShopChildChangeFee != nil {
                            map["re_shop_child_change_fee"] = self.reShopChildChangeFee!
                        }
                        if self.reShopChildPrice != nil {
                            map["re_shop_child_price"] = self.reShopChildPrice!
                        }
                        if self.reShopChildPriceGap != nil {
                            map["re_shop_child_price_gap"] = self.reShopChildPriceGap!
                        }
                        if self.reShopInfChangeFee != nil {
                            map["re_shop_inf_change_fee"] = self.reShopInfChangeFee!
                        }
                        if self.reShopInfPrice != nil {
                            map["re_shop_inf_price"] = self.reShopInfPrice!
                        }
                        if self.reShopInfPriceGap != nil {
                            map["re_shop_inf_price_gap"] = self.reShopInfPriceGap!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("re_shop_adult_change_fee") && dict["re_shop_adult_change_fee"] != nil {
                            self.reShopAdultChangeFee = dict["re_shop_adult_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_adult_price") && dict["re_shop_adult_price"] != nil {
                            self.reShopAdultPrice = dict["re_shop_adult_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_adult_price_gap") && dict["re_shop_adult_price_gap"] != nil {
                            self.reShopAdultPriceGap = dict["re_shop_adult_price_gap"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_change_fee") && dict["re_shop_child_change_fee"] != nil {
                            self.reShopChildChangeFee = dict["re_shop_child_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_price") && dict["re_shop_child_price"] != nil {
                            self.reShopChildPrice = dict["re_shop_child_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_child_price_gap") && dict["re_shop_child_price_gap"] != nil {
                            self.reShopChildPriceGap = dict["re_shop_child_price_gap"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_change_fee") && dict["re_shop_inf_change_fee"] != nil {
                            self.reShopInfChangeFee = dict["re_shop_inf_change_fee"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_price") && dict["re_shop_inf_price"] != nil {
                            self.reShopInfPrice = dict["re_shop_inf_price"] as! Int32
                        }
                        if dict.keys.contains("re_shop_inf_price_gap") && dict["re_shop_inf_price_gap"] != nil {
                            self.reShopInfPriceGap = dict["re_shop_inf_price_gap"] as! Int32
                        }
                    }
                }
                public var adultPrice: Int32?

                public var adultTax: Int32?

                public var adultTotalPrice: Int32?

                public var beforeControlPrice: Int32?

                public var childPrice: Int32?

                public var childTax: Int32?

                public var childTotalPrice: Int32?

                public var infantPrice: Int32?

                public var infantTax: Int32?

                public var infantTotalPrice: Int32?

                public var originalAdultPrice: Int32?

                public var originalAdultTotalPrice: Int32?

                public var reShopPriceInfoDTO: FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo.PriceInfoDTO.ReShopPriceInfoDTO?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.reShopPriceInfoDTO?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adultPrice != nil {
                        map["adult_price"] = self.adultPrice!
                    }
                    if self.adultTax != nil {
                        map["adult_tax"] = self.adultTax!
                    }
                    if self.adultTotalPrice != nil {
                        map["adult_total_price"] = self.adultTotalPrice!
                    }
                    if self.beforeControlPrice != nil {
                        map["before_control_price"] = self.beforeControlPrice!
                    }
                    if self.childPrice != nil {
                        map["child_price"] = self.childPrice!
                    }
                    if self.childTax != nil {
                        map["child_tax"] = self.childTax!
                    }
                    if self.childTotalPrice != nil {
                        map["child_total_price"] = self.childTotalPrice!
                    }
                    if self.infantPrice != nil {
                        map["infant_price"] = self.infantPrice!
                    }
                    if self.infantTax != nil {
                        map["infant_tax"] = self.infantTax!
                    }
                    if self.infantTotalPrice != nil {
                        map["infant_total_price"] = self.infantTotalPrice!
                    }
                    if self.originalAdultPrice != nil {
                        map["original_adult_price"] = self.originalAdultPrice!
                    }
                    if self.originalAdultTotalPrice != nil {
                        map["original_adult_total_price"] = self.originalAdultTotalPrice!
                    }
                    if self.reShopPriceInfoDTO != nil {
                        map["re_shop_price_info_d_t_o"] = self.reShopPriceInfoDTO?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("adult_price") && dict["adult_price"] != nil {
                        self.adultPrice = dict["adult_price"] as! Int32
                    }
                    if dict.keys.contains("adult_tax") && dict["adult_tax"] != nil {
                        self.adultTax = dict["adult_tax"] as! Int32
                    }
                    if dict.keys.contains("adult_total_price") && dict["adult_total_price"] != nil {
                        self.adultTotalPrice = dict["adult_total_price"] as! Int32
                    }
                    if dict.keys.contains("before_control_price") && dict["before_control_price"] != nil {
                        self.beforeControlPrice = dict["before_control_price"] as! Int32
                    }
                    if dict.keys.contains("child_price") && dict["child_price"] != nil {
                        self.childPrice = dict["child_price"] as! Int32
                    }
                    if dict.keys.contains("child_tax") && dict["child_tax"] != nil {
                        self.childTax = dict["child_tax"] as! Int32
                    }
                    if dict.keys.contains("child_total_price") && dict["child_total_price"] != nil {
                        self.childTotalPrice = dict["child_total_price"] as! Int32
                    }
                    if dict.keys.contains("infant_price") && dict["infant_price"] != nil {
                        self.infantPrice = dict["infant_price"] as! Int32
                    }
                    if dict.keys.contains("infant_tax") && dict["infant_tax"] != nil {
                        self.infantTax = dict["infant_tax"] as! Int32
                    }
                    if dict.keys.contains("infant_total_price") && dict["infant_total_price"] != nil {
                        self.infantTotalPrice = dict["infant_total_price"] as! Int32
                    }
                    if dict.keys.contains("original_adult_price") && dict["original_adult_price"] != nil {
                        self.originalAdultPrice = dict["original_adult_price"] as! Int32
                    }
                    if dict.keys.contains("original_adult_total_price") && dict["original_adult_total_price"] != nil {
                        self.originalAdultTotalPrice = dict["original_adult_total_price"] as! Int32
                    }
                    if dict.keys.contains("re_shop_price_info_d_t_o") && dict["re_shop_price_info_d_t_o"] != nil {
                        var model = FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo.PriceInfoDTO.ReShopPriceInfoDTO()
                        model.fromMap(dict["re_shop_price_info_d_t_o"] as! [String: Any])
                        self.reShopPriceInfoDTO = model
                    }
                }
            }
            public var attributeShowInfoMap: [String: [ModuleAgentInfoAttributeShowInfoMapValue]]?

            public var bestDiscount: Double?

            public var cabinClassInfo: FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo.CabinClassInfo?

            public var cabinCode: Int32?

            public var cabinName: String?

            public var itemId: String?

            public var modifyTypeDesc: String?

            public var modifyTypeName: String?

            public var priceInfoDTO: FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo.PriceInfoDTO?

            public var quantity: Int32?

            public var supportChildTicket: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.cabinClassInfo?.validate()
                try self.priceInfoDTO?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attributeShowInfoMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.attributeShowInfoMap! {
                        var l1 : [Any] = []
                        for k1 in v {
                            l1.append(k1.toMap())
                        }
                        tmp[k] = l1
                    }
                    map["attribute_show_info_map"] = tmp
                }
                if self.bestDiscount != nil {
                    map["best_discount"] = self.bestDiscount!
                }
                if self.cabinClassInfo != nil {
                    map["cabin_class_info"] = self.cabinClassInfo?.toMap()
                }
                if self.cabinCode != nil {
                    map["cabin_code"] = self.cabinCode!
                }
                if self.cabinName != nil {
                    map["cabin_name"] = self.cabinName!
                }
                if self.itemId != nil {
                    map["item_id"] = self.itemId!
                }
                if self.modifyTypeDesc != nil {
                    map["modify_type_desc"] = self.modifyTypeDesc!
                }
                if self.modifyTypeName != nil {
                    map["modify_type_name"] = self.modifyTypeName!
                }
                if self.priceInfoDTO != nil {
                    map["price_info_d_t_o"] = self.priceInfoDTO?.toMap()
                }
                if self.quantity != nil {
                    map["quantity"] = self.quantity!
                }
                if self.supportChildTicket != nil {
                    map["support_child_ticket"] = self.supportChildTicket!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("attribute_show_info_map") && dict["attribute_show_info_map"] != nil {
                    var tmp : [String: [ModuleAgentInfoAttributeShowInfoMapValue]] = [:]
                    for (k, v) in dict["attribute_show_info_map"] as! [String: Any] {
                        var l1 : [ModuleAgentInfoAttributeShowInfoMapValue] = []
                        for v1 in v as! [Any] {
                            var model = ModuleAgentInfoAttributeShowInfoMapValue()
                            if v1 != nil {
                                model.fromMap(v1 as! [String: Any])
                            }
                            l1.append(model)
                        }
                        tmp[k] = l1
                    }
                    self.attributeShowInfoMap = tmp
                }
                if dict.keys.contains("best_discount") && dict["best_discount"] != nil {
                    self.bestDiscount = dict["best_discount"] as! Double
                }
                if dict.keys.contains("cabin_class_info") && dict["cabin_class_info"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo.CabinClassInfo()
                    model.fromMap(dict["cabin_class_info"] as! [String: Any])
                    self.cabinClassInfo = model
                }
                if dict.keys.contains("cabin_code") && dict["cabin_code"] != nil {
                    self.cabinCode = dict["cabin_code"] as! Int32
                }
                if dict.keys.contains("cabin_name") && dict["cabin_name"] != nil {
                    self.cabinName = dict["cabin_name"] as! String
                }
                if dict.keys.contains("item_id") && dict["item_id"] != nil {
                    self.itemId = dict["item_id"] as! String
                }
                if dict.keys.contains("modify_type_desc") && dict["modify_type_desc"] != nil {
                    self.modifyTypeDesc = dict["modify_type_desc"] as! String
                }
                if dict.keys.contains("modify_type_name") && dict["modify_type_name"] != nil {
                    self.modifyTypeName = dict["modify_type_name"] as! String
                }
                if dict.keys.contains("price_info_d_t_o") && dict["price_info_d_t_o"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo.PriceInfoDTO()
                    model.fromMap(dict["price_info_d_t_o"] as! [String: Any])
                    self.priceInfoDTO = model
                }
                if dict.keys.contains("quantity") && dict["quantity"] != nil {
                    self.quantity = dict["quantity"] as! Int32
                }
                if dict.keys.contains("support_child_ticket") && dict["support_child_ticket"] != nil {
                    self.supportChildTicket = dict["support_child_ticket"] as! Bool
                }
            }
        }
        public class FlightSegmentInfos : Tea.TeaModel {
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var airportShortName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.airportShortName != nil {
                        map["airport_short_name"] = self.airportShortName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                        self.airportShortName = dict["airport_short_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var airportShortName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.airportShortName != nil {
                        map["airport_short_name"] = self.airportShortName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                        self.airportShortName = dict["airport_short_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class AirlineInfo : Tea.TeaModel {
                public var airlineCode: String?

                public var airlineChineseName: String?

                public var airlineChineseShortName: String?

                public var airlineIcon: String?

                public var cheapFlight: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineChineseName != nil {
                        map["airline_chinese_name"] = self.airlineChineseName!
                    }
                    if self.airlineChineseShortName != nil {
                        map["airline_chinese_short_name"] = self.airlineChineseShortName!
                    }
                    if self.airlineIcon != nil {
                        map["airline_icon"] = self.airlineIcon!
                    }
                    if self.cheapFlight != nil {
                        map["cheap_flight"] = self.cheapFlight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                        self.airlineChineseName = dict["airline_chinese_name"] as! String
                    }
                    if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                        self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                    }
                    if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                        self.airlineIcon = dict["airline_icon"] as! String
                    }
                    if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                        self.cheapFlight = dict["cheap_flight"] as! Bool
                    }
                }
            }
            public class FlightSharedInfo : Tea.TeaModel {
                public class OperatingAirlineInfo : Tea.TeaModel {
                    public var airlineCode: String?

                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public var operatingFlightNo: String?

                public var operatingAirlineInfo: FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.FlightSharedInfo.OperatingAirlineInfo?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.operatingAirlineInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.operatingFlightNo != nil {
                        map["operating_flight_no"] = self.operatingFlightNo!
                    }
                    if self.operatingAirlineInfo != nil {
                        map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                        self.operatingFlightNo = dict["operating_flight_no"] as! String
                    }
                    if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                        var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.FlightSharedInfo.OperatingAirlineInfo()
                        model.fromMap(dict["operating_airline_info"] as! [String: Any])
                        self.operatingAirlineInfo = model
                    }
                }
            }
            public class FlightStopInfo : Tea.TeaModel {
                public var stopCityName: String?

                public var stopArrTime: String?

                public var stopDepTime: String?

                public var stopCityCode: String?

                public var stopAirport: String?

                public var stopArrTerm: String?

                public var stopDepTerm: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.stopCityName != nil {
                        map["stop_city_name"] = self.stopCityName!
                    }
                    if self.stopArrTime != nil {
                        map["stop_arr_time"] = self.stopArrTime!
                    }
                    if self.stopDepTime != nil {
                        map["stop_dep_time"] = self.stopDepTime!
                    }
                    if self.stopCityCode != nil {
                        map["stop_city_code"] = self.stopCityCode!
                    }
                    if self.stopAirport != nil {
                        map["stop_airport"] = self.stopAirport!
                    }
                    if self.stopArrTerm != nil {
                        map["stop_arr_term"] = self.stopArrTerm!
                    }
                    if self.stopDepTerm != nil {
                        map["stop_dep_term"] = self.stopDepTerm!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                        self.stopCityName = dict["stop_city_name"] as! String
                    }
                    if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                        self.stopArrTime = dict["stop_arr_time"] as! String
                    }
                    if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                        self.stopDepTime = dict["stop_dep_time"] as! String
                    }
                    if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                        self.stopCityCode = dict["stop_city_code"] as! String
                    }
                    if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                        self.stopAirport = dict["stop_airport"] as! String
                    }
                    if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                        self.stopArrTerm = dict["stop_arr_term"] as! String
                    }
                    if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                        self.stopDepTerm = dict["stop_dep_term"] as! String
                    }
                }
            }
            public var journeySeq: Int32?

            public var segmentSeq: Int32?

            public var flightNo: String?

            public var depCityCode: String?

            public var arrCityCode: String?

            public var depCityName: String?

            public var arrCityName: String?

            public var depAirportInfo: FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.DepAirportInfo?

            public var arrAirportInfo: FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.ArrAirportInfo?

            public var depTime: String?

            public var arrTime: String?

            public var airlineInfo: FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.AirlineInfo?

            public var share: Bool?

            public var flightSharedInfo: FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.FlightSharedInfo?

            public var stop: Bool?

            public var flightStopInfo: FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.FlightStopInfo?

            public var transferTime: Int32?

            public var duration: Int32?

            public var manufacturer: String?

            public var flightType: String?

            public var flightSize: String?

            public var mealDesc: String?

            public var onTimeRate: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.depAirportInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.airlineInfo?.validate()
                try self.flightSharedInfo?.validate()
                try self.flightStopInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeySeq != nil {
                    map["journey_seq"] = self.journeySeq!
                }
                if self.segmentSeq != nil {
                    map["segment_seq"] = self.segmentSeq!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.share != nil {
                    map["share"] = self.share!
                }
                if self.flightSharedInfo != nil {
                    map["flight_shared_info"] = self.flightSharedInfo?.toMap()
                }
                if self.stop != nil {
                    map["stop"] = self.stop!
                }
                if self.flightStopInfo != nil {
                    map["flight_stop_info"] = self.flightStopInfo?.toMap()
                }
                if self.transferTime != nil {
                    map["transfer_time"] = self.transferTime!
                }
                if self.duration != nil {
                    map["duration"] = self.duration!
                }
                if self.manufacturer != nil {
                    map["manufacturer"] = self.manufacturer!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.onTimeRate != nil {
                    map["on_time_rate"] = self.onTimeRate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journey_seq") && dict["journey_seq"] != nil {
                    self.journeySeq = dict["journey_seq"] as! Int32
                }
                if dict.keys.contains("segment_seq") && dict["segment_seq"] != nil {
                    self.segmentSeq = dict["segment_seq"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("share") && dict["share"] != nil {
                    self.share = dict["share"] as! Bool
                }
                if dict.keys.contains("flight_shared_info") && dict["flight_shared_info"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.FlightSharedInfo()
                    model.fromMap(dict["flight_shared_info"] as! [String: Any])
                    self.flightSharedInfo = model
                }
                if dict.keys.contains("stop") && dict["stop"] != nil {
                    self.stop = dict["stop"] as! Bool
                }
                if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                    var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos.FlightStopInfo()
                    model.fromMap(dict["flight_stop_info"] as! [String: Any])
                    self.flightStopInfo = model
                }
                if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                    self.transferTime = dict["transfer_time"] as! Int32
                }
                if dict.keys.contains("duration") && dict["duration"] != nil {
                    self.duration = dict["duration"] as! Int32
                }
                if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                    self.manufacturer = dict["manufacturer"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                    self.onTimeRate = dict["on_time_rate"] as! String
                }
            }
        }
        public class PassengerCount : Tea.TeaModel {
            public var adultPassengerNum: Int32?

            public var childPassengerNum: Int32?

            public var infantPassengerNum: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adultPassengerNum != nil {
                    map["adult_passenger_num"] = self.adultPassengerNum!
                }
                if self.childPassengerNum != nil {
                    map["child_passenger_num"] = self.childPassengerNum!
                }
                if self.infantPassengerNum != nil {
                    map["infant_passenger_num"] = self.infantPassengerNum!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("adult_passenger_num") && dict["adult_passenger_num"] != nil {
                    self.adultPassengerNum = dict["adult_passenger_num"] as! Int32
                }
                if dict.keys.contains("child_passenger_num") && dict["child_passenger_num"] != nil {
                    self.childPassengerNum = dict["child_passenger_num"] as! Int32
                }
                if dict.keys.contains("infant_passenger_num") && dict["infant_passenger_num"] != nil {
                    self.infantPassengerNum = dict["infant_passenger_num"] as! Int32
                }
            }
        }
        public var agentInfo: FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo?

        public var cacheKey: String?

        public var flightSegmentInfos: [[FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos]]?

        public var passengerCount: FlightModifyOtaSearchV2ResponseBody.Module.PassengerCount?

        public var sessionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.agentInfo?.validate()
            try self.passengerCount?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentInfo != nil {
                map["agent_info"] = self.agentInfo?.toMap()
            }
            if self.cacheKey != nil {
                map["cache_key"] = self.cacheKey!
            }
            if self.flightSegmentInfos != nil {
                var tmp : [Any] = []
                for k in self.flightSegmentInfos! {
                    var l1 : [Any] = []
                    for k1 in k {
                        l1.append(k1.toMap())
                    }
                    tmp.append(l1)
                }
                map["flight_segment_infos"] = tmp
            }
            if self.passengerCount != nil {
                map["passenger_count"] = self.passengerCount?.toMap()
            }
            if self.sessionId != nil {
                map["session_id"] = self.sessionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("agent_info") && dict["agent_info"] != nil {
                var model = FlightModifyOtaSearchV2ResponseBody.Module.AgentInfo()
                model.fromMap(dict["agent_info"] as! [String: Any])
                self.agentInfo = model
            }
            if dict.keys.contains("cache_key") && dict["cache_key"] != nil {
                self.cacheKey = dict["cache_key"] as! String
            }
            if dict.keys.contains("flight_segment_infos") && dict["flight_segment_infos"] != nil {
                var tmp : [[FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos]] = []
                for v in dict["flight_segment_infos"] as! [Any] {
                    var l1 : [FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos] = []
                    for v1 in v as! [Any] {
                        var model = FlightModifyOtaSearchV2ResponseBody.Module.FlightSegmentInfos()
                        if v1 != nil {
                            model.fromMap(v1 as! [String: Any])
                        }
                        l1.append(model)
                    }
                    tmp.append(l1)
                }
                self.flightSegmentInfos = tmp
            }
            if dict.keys.contains("passenger_count") && dict["passenger_count"] != nil {
                var model = FlightModifyOtaSearchV2ResponseBody.Module.PassengerCount()
                model.fromMap(dict["passenger_count"] as! [String: Any])
                self.passengerCount = model
            }
            if dict.keys.contains("session_id") && dict["session_id"] != nil {
                self.sessionId = dict["session_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightModifyOtaSearchV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightModifyOtaSearchV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightModifyOtaSearchV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightModifyOtaSearchV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightModifyOtaSearchV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightModifyPayV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightModifyPayV2Request : Tea.TeaModel {
    public var extParams: [String: Any]?

    public var isvName: String?

    public var modifyPayAmount: Int64?

    public var orderId: Int64?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var subOrderId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extParams != nil {
            map["ext_params"] = self.extParams!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.modifyPayAmount != nil {
            map["modify_pay_amount"] = self.modifyPayAmount!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.subOrderId != nil {
            map["sub_order_id"] = self.subOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ext_params") && dict["ext_params"] != nil {
            self.extParams = dict["ext_params"] as! [String: Any]
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("modify_pay_amount") && dict["modify_pay_amount"] != nil {
            self.modifyPayAmount = dict["modify_pay_amount"] as! Int64
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
            self.subOrderId = dict["sub_order_id"] as! Int64
        }
    }
}

public class FlightModifyPayV2ShrinkRequest : Tea.TeaModel {
    public var extParamsShrink: String?

    public var isvName: String?

    public var modifyPayAmount: Int64?

    public var orderId: Int64?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var subOrderId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extParamsShrink != nil {
            map["ext_params"] = self.extParamsShrink!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.modifyPayAmount != nil {
            map["modify_pay_amount"] = self.modifyPayAmount!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.subOrderId != nil {
            map["sub_order_id"] = self.subOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ext_params") && dict["ext_params"] != nil {
            self.extParamsShrink = dict["ext_params"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("modify_pay_amount") && dict["modify_pay_amount"] != nil {
            self.modifyPayAmount = dict["modify_pay_amount"] as! Int64
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
            self.subOrderId = dict["sub_order_id"] as! Int64
        }
    }
}

public class FlightModifyPayV2ResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: [String: Any]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! [String: Any]
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightModifyPayV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightModifyPayV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightModifyPayV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOrderDetailInfoHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightOrderDetailInfoRequest : Tea.TeaModel {
    public var disOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
    }
}

public class FlightOrderDetailInfoResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightInfoList : Tea.TeaModel {
            public var airlineCode: String?

            public var airlineName: String?

            public var airlineSimpleName: String?

            public var arrAirport: String?

            public var arrAirportCode: String?

            public var arrAirportCodeName: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrTerminal: String?

            public var arrTime: String?

            public var baggage: String?

            public var buildPrice: Int64?

            public var cabin: String?

            public var cabinClass: String?

            public var carrier: String?

            public var depAirport: String?

            public var depAirportCode: String?

            public var depAirportCodeName: String?

            public var depCity: String?

            public var depCityCode: String?

            public var depTerminal: String?

            public var depTime: String?

            public var flightNo: String?

            public var lastCabin: String?

            public var lastFlightNo: String?

            public var meal: String?

            public var oilPrice: Int64?

            public var segmentType: Int32?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public var ticketPrice: Int64?

            public var tuigaiqianInfo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineCode != nil {
                    map["airline_code"] = self.airlineCode!
                }
                if self.airlineName != nil {
                    map["airline_name"] = self.airlineName!
                }
                if self.airlineSimpleName != nil {
                    map["airline_simple_name"] = self.airlineSimpleName!
                }
                if self.arrAirport != nil {
                    map["arr_airport"] = self.arrAirport!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrAirportCodeName != nil {
                    map["arr_airport_code_name"] = self.arrAirportCodeName!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrTerminal != nil {
                    map["arr_terminal"] = self.arrTerminal!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.baggage != nil {
                    map["baggage"] = self.baggage!
                }
                if self.buildPrice != nil {
                    map["build_price"] = self.buildPrice!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.carrier != nil {
                    map["carrier"] = self.carrier!
                }
                if self.depAirport != nil {
                    map["dep_airport"] = self.depAirport!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depAirportCodeName != nil {
                    map["dep_airport_code_name"] = self.depAirportCodeName!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depTerminal != nil {
                    map["dep_terminal"] = self.depTerminal!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.lastCabin != nil {
                    map["last_cabin"] = self.lastCabin!
                }
                if self.lastFlightNo != nil {
                    map["last_flight_no"] = self.lastFlightNo!
                }
                if self.meal != nil {
                    map["meal"] = self.meal!
                }
                if self.oilPrice != nil {
                    map["oil_price"] = self.oilPrice!
                }
                if self.segmentType != nil {
                    map["segment_type"] = self.segmentType!
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.tuigaiqianInfo != nil {
                    map["tuigaiqian_info"] = self.tuigaiqianInfo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                    self.airlineCode = dict["airline_code"] as! String
                }
                if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                    self.airlineName = dict["airline_name"] as! String
                }
                if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                    self.airlineSimpleName = dict["airline_simple_name"] as! String
                }
                if dict.keys.contains("arr_airport") && dict["arr_airport"] != nil {
                    self.arrAirport = dict["arr_airport"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_airport_code_name") && dict["arr_airport_code_name"] != nil {
                    self.arrAirportCodeName = dict["arr_airport_code_name"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_terminal") && dict["arr_terminal"] != nil {
                    self.arrTerminal = dict["arr_terminal"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("baggage") && dict["baggage"] != nil {
                    self.baggage = dict["baggage"] as! String
                }
                if dict.keys.contains("build_price") && dict["build_price"] != nil {
                    self.buildPrice = dict["build_price"] as! Int64
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("carrier") && dict["carrier"] != nil {
                    self.carrier = dict["carrier"] as! String
                }
                if dict.keys.contains("dep_airport") && dict["dep_airport"] != nil {
                    self.depAirport = dict["dep_airport"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_airport_code_name") && dict["dep_airport_code_name"] != nil {
                    self.depAirportCodeName = dict["dep_airport_code_name"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_terminal") && dict["dep_terminal"] != nil {
                    self.depTerminal = dict["dep_terminal"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("last_cabin") && dict["last_cabin"] != nil {
                    self.lastCabin = dict["last_cabin"] as! String
                }
                if dict.keys.contains("last_flight_no") && dict["last_flight_no"] != nil {
                    self.lastFlightNo = dict["last_flight_no"] as! String
                }
                if dict.keys.contains("meal") && dict["meal"] != nil {
                    self.meal = dict["meal"] as! String
                }
                if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                    self.oilPrice = dict["oil_price"] as! Int64
                }
                if dict.keys.contains("segment_type") && dict["segment_type"] != nil {
                    self.segmentType = dict["segment_type"] as! Int32
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int64
                }
                if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                    self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                }
            }
        }
        public class TicketInfoList : Tea.TeaModel {
            public var openTicketStatus: String?

            public var pnrCode: String?

            public var ticketNo: String?

            public var ticketStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.openTicketStatus != nil {
                    map["open_ticket_status"] = self.openTicketStatus!
                }
                if self.pnrCode != nil {
                    map["pnr_code"] = self.pnrCode!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketStatus != nil {
                    map["ticket_status"] = self.ticketStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("open_ticket_status") && dict["open_ticket_status"] != nil {
                    self.openTicketStatus = dict["open_ticket_status"] as! String
                }
                if dict.keys.contains("pnr_code") && dict["pnr_code"] != nil {
                    self.pnrCode = dict["pnr_code"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                    self.ticketStatus = dict["ticket_status"] as! String
                }
            }
        }
        public class TravelerInfoList : Tea.TeaModel {
            public var birthDate: String?

            public var certNo: String?

            public var certType: String?

            public var openTicketStatus: Int32?

            public var passengerName: String?

            public var passengerType: String?

            public var phone: String?

            public var ticketNo: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.birthDate != nil {
                    map["birth_date"] = self.birthDate!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.openTicketStatus != nil {
                    map["open_ticket_status"] = self.openTicketStatus!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.passengerType != nil {
                    map["passenger_type"] = self.passengerType!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("birth_date") && dict["birth_date"] != nil {
                    self.birthDate = dict["birth_date"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! String
                }
                if dict.keys.contains("open_ticket_status") && dict["open_ticket_status"] != nil {
                    self.openTicketStatus = dict["open_ticket_status"] as! Int32
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                    self.passengerType = dict["passenger_type"] as! String
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public var alipayTradeNo: String?

        public var bookUserId: String?

        public var btripOrderId: Int64?

        public var contactName: String?

        public var contactPhone: String?

        public var disOrderId: String?

        public var extra: String?

        public var flightInfoList: [FlightOrderDetailInfoResponseBody.Module.FlightInfoList]?

        public var lastPayTime: String?

        public var payStatus: Int32?

        public var payTime: String?

        public var promotionPrice: Int64?

        public var settleAmount: Int64?

        public var settleType: Int32?

        public var status: Int32?

        public var ticketInfoList: [FlightOrderDetailInfoResponseBody.Module.TicketInfoList]?

        public var totalBuildPrice: Int64?

        public var totalOilPrice: Int64?

        public var totalOrderPrice: Int64?

        public var travelerInfoList: [FlightOrderDetailInfoResponseBody.Module.TravelerInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alipayTradeNo != nil {
                map["alipay_trade_no"] = self.alipayTradeNo!
            }
            if self.bookUserId != nil {
                map["book_user_id"] = self.bookUserId!
            }
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.contactName != nil {
                map["contact_name"] = self.contactName!
            }
            if self.contactPhone != nil {
                map["contact_phone"] = self.contactPhone!
            }
            if self.disOrderId != nil {
                map["dis_order_id"] = self.disOrderId!
            }
            if self.extra != nil {
                map["extra"] = self.extra!
            }
            if self.flightInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_info_list"] = tmp
            }
            if self.lastPayTime != nil {
                map["last_pay_time"] = self.lastPayTime!
            }
            if self.payStatus != nil {
                map["pay_status"] = self.payStatus!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.promotionPrice != nil {
                map["promotion_price"] = self.promotionPrice!
            }
            if self.settleAmount != nil {
                map["settle_amount"] = self.settleAmount!
            }
            if self.settleType != nil {
                map["settle_type"] = self.settleType!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.ticketInfoList != nil {
                var tmp : [Any] = []
                for k in self.ticketInfoList! {
                    tmp.append(k.toMap())
                }
                map["ticket_info_list"] = tmp
            }
            if self.totalBuildPrice != nil {
                map["total_build_price"] = self.totalBuildPrice!
            }
            if self.totalOilPrice != nil {
                map["total_oil_price"] = self.totalOilPrice!
            }
            if self.totalOrderPrice != nil {
                map["total_order_price"] = self.totalOrderPrice!
            }
            if self.travelerInfoList != nil {
                var tmp : [Any] = []
                for k in self.travelerInfoList! {
                    tmp.append(k.toMap())
                }
                map["traveler_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                self.alipayTradeNo = dict["alipay_trade_no"] as! String
            }
            if dict.keys.contains("book_user_id") && dict["book_user_id"] != nil {
                self.bookUserId = dict["book_user_id"] as! String
            }
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! Int64
            }
            if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                self.contactName = dict["contact_name"] as! String
            }
            if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                self.contactPhone = dict["contact_phone"] as! String
            }
            if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
                self.disOrderId = dict["dis_order_id"] as! String
            }
            if dict.keys.contains("extra") && dict["extra"] != nil {
                self.extra = dict["extra"] as! String
            }
            if dict.keys.contains("flight_info_list") && dict["flight_info_list"] != nil {
                var tmp : [FlightOrderDetailInfoResponseBody.Module.FlightInfoList] = []
                for v in dict["flight_info_list"] as! [Any] {
                    var model = FlightOrderDetailInfoResponseBody.Module.FlightInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightInfoList = tmp
            }
            if dict.keys.contains("last_pay_time") && dict["last_pay_time"] != nil {
                self.lastPayTime = dict["last_pay_time"] as! String
            }
            if dict.keys.contains("pay_status") && dict["pay_status"] != nil {
                self.payStatus = dict["pay_status"] as! Int32
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                self.promotionPrice = dict["promotion_price"] as! Int64
            }
            if dict.keys.contains("settle_amount") && dict["settle_amount"] != nil {
                self.settleAmount = dict["settle_amount"] as! Int64
            }
            if dict.keys.contains("settle_type") && dict["settle_type"] != nil {
                self.settleType = dict["settle_type"] as! Int32
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("ticket_info_list") && dict["ticket_info_list"] != nil {
                var tmp : [FlightOrderDetailInfoResponseBody.Module.TicketInfoList] = []
                for v in dict["ticket_info_list"] as! [Any] {
                    var model = FlightOrderDetailInfoResponseBody.Module.TicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.ticketInfoList = tmp
            }
            if dict.keys.contains("total_build_price") && dict["total_build_price"] != nil {
                self.totalBuildPrice = dict["total_build_price"] as! Int64
            }
            if dict.keys.contains("total_oil_price") && dict["total_oil_price"] != nil {
                self.totalOilPrice = dict["total_oil_price"] as! Int64
            }
            if dict.keys.contains("total_order_price") && dict["total_order_price"] != nil {
                self.totalOrderPrice = dict["total_order_price"] as! Int64
            }
            if dict.keys.contains("traveler_info_list") && dict["traveler_info_list"] != nil {
                var tmp : [FlightOrderDetailInfoResponseBody.Module.TravelerInfoList] = []
                for v in dict["traveler_info_list"] as! [Any] {
                    var model = FlightOrderDetailInfoResponseBody.Module.TravelerInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightOrderDetailInfoResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightOrderDetailInfoResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOrderDetailInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOrderDetailInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOrderDetailInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOrderDetailV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightOrderDetailV2Request : Tea.TeaModel {
    public var isvName: String?

    public var orderId: Int64?

    public var outOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
    }
}

public class FlightOrderDetailV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ContactInfoDTO : Tea.TeaModel {
            public var contactEmail: String?

            public var contactName: String?

            public var contactPhone: String?

            public var sendMsgToPassenger: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactEmail != nil {
                    map["contact_email"] = self.contactEmail!
                }
                if self.contactName != nil {
                    map["contact_name"] = self.contactName!
                }
                if self.contactPhone != nil {
                    map["contact_phone"] = self.contactPhone!
                }
                if self.sendMsgToPassenger != nil {
                    map["send_msg_to_passenger"] = self.sendMsgToPassenger!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("contact_email") && dict["contact_email"] != nil {
                    self.contactEmail = dict["contact_email"] as! String
                }
                if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                    self.contactName = dict["contact_name"] as! String
                }
                if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                    self.contactPhone = dict["contact_phone"] as! String
                }
                if dict.keys.contains("send_msg_to_passenger") && dict["send_msg_to_passenger"] != nil {
                    self.sendMsgToPassenger = dict["send_msg_to_passenger"] as! Bool
                }
            }
        }
        public class FlightTaleInfoDTO : Tea.TeaModel {
            public class Journeys : Tea.TeaModel {
                public class SegmentList : Tea.TeaModel {
                    public class FlightChange : Tea.TeaModel {
                        public var changeDesc: String?

                        public var changeStatus: String?

                        public var changeStatusCode: String?

                        public var newSegment: Any?

                        public var passengerNames: [String]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.changeDesc != nil {
                                map["change_desc"] = self.changeDesc!
                            }
                            if self.changeStatus != nil {
                                map["change_status"] = self.changeStatus!
                            }
                            if self.changeStatusCode != nil {
                                map["change_status_code"] = self.changeStatusCode!
                            }
                            if self.newSegment != nil {
                                map["new_segment"] = self.newSegment!
                            }
                            if self.passengerNames != nil {
                                map["passenger_names"] = self.passengerNames!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("change_desc") && dict["change_desc"] != nil {
                                self.changeDesc = dict["change_desc"] as! String
                            }
                            if dict.keys.contains("change_status") && dict["change_status"] != nil {
                                self.changeStatus = dict["change_status"] as! String
                            }
                            if dict.keys.contains("change_status_code") && dict["change_status_code"] != nil {
                                self.changeStatusCode = dict["change_status_code"] as! String
                            }
                            if dict.keys.contains("new_segment") && dict["new_segment"] != nil {
                                self.newSegment = dict["new_segment"] as! Any
                            }
                            if dict.keys.contains("passenger_names") && dict["passenger_names"] != nil {
                                self.passengerNames = dict["passenger_names"] as! [String]
                            }
                        }
                    }
                    public class SegmentPosition : Tea.TeaModel {
                        public var journeyIndex: Int32?

                        public var segmentIndex: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.journeyIndex != nil {
                                map["journey_index"] = self.journeyIndex!
                            }
                            if self.segmentIndex != nil {
                                map["segment_index"] = self.segmentIndex!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                                self.journeyIndex = dict["journey_index"] as! Int32
                            }
                            if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                                self.segmentIndex = dict["segment_index"] as! Int32
                            }
                        }
                    }
                    public var airLineCode: String?

                    public var airLineEnglishName: String?

                    public var airLineName: String?

                    public var airLinePhone: String?

                    public var airlineIconUrl: String?

                    public var airlineShortName: String?

                    public var arrAirportCode: String?

                    public var arrAirportName: String?

                    public var arrCityCode: String?

                    public var arrCityName: String?

                    public var arrTime: String?

                    public var arriveTerminal: String?

                    public var cabin: String?

                    public var cabinAndDiscount: String?

                    public var cabinClass: String?

                    public var cabinClassName: String?

                    public var codeShare: Bool?

                    public var deadlineText: String?

                    public var depAirportCode: String?

                    public var depAirportName: String?

                    public var depCityCode: String?

                    public var depCityName: String?

                    public var depDate: String?

                    public var depTime: String?

                    public var departTerminal: String?

                    public var discount: Double?

                    public var flightChange: FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList.FlightChange?

                    public var flightNo: String?

                    public var flightType: String?

                    public var flyDuration: Int32?

                    public var manufacturer: String?

                    public var mealDesc: String?

                    public var onTimeRate: String?

                    public var operatingAirShortName: String?

                    public var operatingAirlineCode: String?

                    public var operatingAirlineEnglishName: String?

                    public var operatingAirlineIconUrl: String?

                    public var operatingAirlineName: String?

                    public var operatingAirlinePhone: String?

                    public var operatingFlightNo: String?

                    public var planeType: String?

                    public var raisePrice: Int64?

                    public var segmentId: String?

                    public var segmentIndex: Int32?

                    public var segmentPosition: FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList.SegmentPosition?

                    public var stopAirport: String?

                    public var stopArrTime: String?

                    public var stopCity: String?

                    public var stopCityName: String?

                    public var stopDepTime: String?

                    public var stopQuantity: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.flightChange?.validate()
                        try self.segmentPosition?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airLineCode != nil {
                            map["air_line_code"] = self.airLineCode!
                        }
                        if self.airLineEnglishName != nil {
                            map["air_line_english_name"] = self.airLineEnglishName!
                        }
                        if self.airLineName != nil {
                            map["air_line_name"] = self.airLineName!
                        }
                        if self.airLinePhone != nil {
                            map["air_line_phone"] = self.airLinePhone!
                        }
                        if self.airlineIconUrl != nil {
                            map["airline_icon_url"] = self.airlineIconUrl!
                        }
                        if self.airlineShortName != nil {
                            map["airline_short_name"] = self.airlineShortName!
                        }
                        if self.arrAirportCode != nil {
                            map["arr_airport_code"] = self.arrAirportCode!
                        }
                        if self.arrAirportName != nil {
                            map["arr_airport_name"] = self.arrAirportName!
                        }
                        if self.arrCityCode != nil {
                            map["arr_city_code"] = self.arrCityCode!
                        }
                        if self.arrCityName != nil {
                            map["arr_city_name"] = self.arrCityName!
                        }
                        if self.arrTime != nil {
                            map["arr_time"] = self.arrTime!
                        }
                        if self.arriveTerminal != nil {
                            map["arrive_terminal"] = self.arriveTerminal!
                        }
                        if self.cabin != nil {
                            map["cabin"] = self.cabin!
                        }
                        if self.cabinAndDiscount != nil {
                            map["cabin_and_discount"] = self.cabinAndDiscount!
                        }
                        if self.cabinClass != nil {
                            map["cabin_class"] = self.cabinClass!
                        }
                        if self.cabinClassName != nil {
                            map["cabin_class_name"] = self.cabinClassName!
                        }
                        if self.codeShare != nil {
                            map["code_share"] = self.codeShare!
                        }
                        if self.deadlineText != nil {
                            map["deadline_text"] = self.deadlineText!
                        }
                        if self.depAirportCode != nil {
                            map["dep_airport_code"] = self.depAirportCode!
                        }
                        if self.depAirportName != nil {
                            map["dep_airport_name"] = self.depAirportName!
                        }
                        if self.depCityCode != nil {
                            map["dep_city_code"] = self.depCityCode!
                        }
                        if self.depCityName != nil {
                            map["dep_city_name"] = self.depCityName!
                        }
                        if self.depDate != nil {
                            map["dep_date"] = self.depDate!
                        }
                        if self.depTime != nil {
                            map["dep_time"] = self.depTime!
                        }
                        if self.departTerminal != nil {
                            map["depart_terminal"] = self.departTerminal!
                        }
                        if self.discount != nil {
                            map["discount"] = self.discount!
                        }
                        if self.flightChange != nil {
                            map["flight_change"] = self.flightChange?.toMap()
                        }
                        if self.flightNo != nil {
                            map["flight_no"] = self.flightNo!
                        }
                        if self.flightType != nil {
                            map["flight_type"] = self.flightType!
                        }
                        if self.flyDuration != nil {
                            map["fly_duration"] = self.flyDuration!
                        }
                        if self.manufacturer != nil {
                            map["manufacturer"] = self.manufacturer!
                        }
                        if self.mealDesc != nil {
                            map["meal_desc"] = self.mealDesc!
                        }
                        if self.onTimeRate != nil {
                            map["on_time_rate"] = self.onTimeRate!
                        }
                        if self.operatingAirShortName != nil {
                            map["operating_air_short_name"] = self.operatingAirShortName!
                        }
                        if self.operatingAirlineCode != nil {
                            map["operating_airline_code"] = self.operatingAirlineCode!
                        }
                        if self.operatingAirlineEnglishName != nil {
                            map["operating_airline_english_name"] = self.operatingAirlineEnglishName!
                        }
                        if self.operatingAirlineIconUrl != nil {
                            map["operating_airline_icon_url"] = self.operatingAirlineIconUrl!
                        }
                        if self.operatingAirlineName != nil {
                            map["operating_airline_name"] = self.operatingAirlineName!
                        }
                        if self.operatingAirlinePhone != nil {
                            map["operating_airline_phone"] = self.operatingAirlinePhone!
                        }
                        if self.operatingFlightNo != nil {
                            map["operating_flight_no"] = self.operatingFlightNo!
                        }
                        if self.planeType != nil {
                            map["plane_type"] = self.planeType!
                        }
                        if self.raisePrice != nil {
                            map["raise_price"] = self.raisePrice!
                        }
                        if self.segmentId != nil {
                            map["segment_id"] = self.segmentId!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        if self.segmentPosition != nil {
                            map["segment_position"] = self.segmentPosition?.toMap()
                        }
                        if self.stopAirport != nil {
                            map["stop_airport"] = self.stopAirport!
                        }
                        if self.stopArrTime != nil {
                            map["stop_arr_time"] = self.stopArrTime!
                        }
                        if self.stopCity != nil {
                            map["stop_city"] = self.stopCity!
                        }
                        if self.stopCityName != nil {
                            map["stop_city_name"] = self.stopCityName!
                        }
                        if self.stopDepTime != nil {
                            map["stop_dep_time"] = self.stopDepTime!
                        }
                        if self.stopQuantity != nil {
                            map["stop_quantity"] = self.stopQuantity!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("air_line_code") && dict["air_line_code"] != nil {
                            self.airLineCode = dict["air_line_code"] as! String
                        }
                        if dict.keys.contains("air_line_english_name") && dict["air_line_english_name"] != nil {
                            self.airLineEnglishName = dict["air_line_english_name"] as! String
                        }
                        if dict.keys.contains("air_line_name") && dict["air_line_name"] != nil {
                            self.airLineName = dict["air_line_name"] as! String
                        }
                        if dict.keys.contains("air_line_phone") && dict["air_line_phone"] != nil {
                            self.airLinePhone = dict["air_line_phone"] as! String
                        }
                        if dict.keys.contains("airline_icon_url") && dict["airline_icon_url"] != nil {
                            self.airlineIconUrl = dict["airline_icon_url"] as! String
                        }
                        if dict.keys.contains("airline_short_name") && dict["airline_short_name"] != nil {
                            self.airlineShortName = dict["airline_short_name"] as! String
                        }
                        if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                            self.arrAirportCode = dict["arr_airport_code"] as! String
                        }
                        if dict.keys.contains("arr_airport_name") && dict["arr_airport_name"] != nil {
                            self.arrAirportName = dict["arr_airport_name"] as! String
                        }
                        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                            self.arrCityCode = dict["arr_city_code"] as! String
                        }
                        if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                            self.arrCityName = dict["arr_city_name"] as! String
                        }
                        if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                            self.arrTime = dict["arr_time"] as! String
                        }
                        if dict.keys.contains("arrive_terminal") && dict["arrive_terminal"] != nil {
                            self.arriveTerminal = dict["arrive_terminal"] as! String
                        }
                        if dict.keys.contains("cabin") && dict["cabin"] != nil {
                            self.cabin = dict["cabin"] as! String
                        }
                        if dict.keys.contains("cabin_and_discount") && dict["cabin_and_discount"] != nil {
                            self.cabinAndDiscount = dict["cabin_and_discount"] as! String
                        }
                        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                            self.cabinClass = dict["cabin_class"] as! String
                        }
                        if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                            self.cabinClassName = dict["cabin_class_name"] as! String
                        }
                        if dict.keys.contains("code_share") && dict["code_share"] != nil {
                            self.codeShare = dict["code_share"] as! Bool
                        }
                        if dict.keys.contains("deadline_text") && dict["deadline_text"] != nil {
                            self.deadlineText = dict["deadline_text"] as! String
                        }
                        if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                            self.depAirportCode = dict["dep_airport_code"] as! String
                        }
                        if dict.keys.contains("dep_airport_name") && dict["dep_airport_name"] != nil {
                            self.depAirportName = dict["dep_airport_name"] as! String
                        }
                        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                            self.depCityCode = dict["dep_city_code"] as! String
                        }
                        if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                            self.depCityName = dict["dep_city_name"] as! String
                        }
                        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                            self.depDate = dict["dep_date"] as! String
                        }
                        if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                            self.depTime = dict["dep_time"] as! String
                        }
                        if dict.keys.contains("depart_terminal") && dict["depart_terminal"] != nil {
                            self.departTerminal = dict["depart_terminal"] as! String
                        }
                        if dict.keys.contains("discount") && dict["discount"] != nil {
                            self.discount = dict["discount"] as! Double
                        }
                        if dict.keys.contains("flight_change") && dict["flight_change"] != nil {
                            var model = FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList.FlightChange()
                            model.fromMap(dict["flight_change"] as! [String: Any])
                            self.flightChange = model
                        }
                        if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                            self.flightNo = dict["flight_no"] as! String
                        }
                        if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                            self.flightType = dict["flight_type"] as! String
                        }
                        if dict.keys.contains("fly_duration") && dict["fly_duration"] != nil {
                            self.flyDuration = dict["fly_duration"] as! Int32
                        }
                        if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                            self.manufacturer = dict["manufacturer"] as! String
                        }
                        if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                            self.mealDesc = dict["meal_desc"] as! String
                        }
                        if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                            self.onTimeRate = dict["on_time_rate"] as! String
                        }
                        if dict.keys.contains("operating_air_short_name") && dict["operating_air_short_name"] != nil {
                            self.operatingAirShortName = dict["operating_air_short_name"] as! String
                        }
                        if dict.keys.contains("operating_airline_code") && dict["operating_airline_code"] != nil {
                            self.operatingAirlineCode = dict["operating_airline_code"] as! String
                        }
                        if dict.keys.contains("operating_airline_english_name") && dict["operating_airline_english_name"] != nil {
                            self.operatingAirlineEnglishName = dict["operating_airline_english_name"] as! String
                        }
                        if dict.keys.contains("operating_airline_icon_url") && dict["operating_airline_icon_url"] != nil {
                            self.operatingAirlineIconUrl = dict["operating_airline_icon_url"] as! String
                        }
                        if dict.keys.contains("operating_airline_name") && dict["operating_airline_name"] != nil {
                            self.operatingAirlineName = dict["operating_airline_name"] as! String
                        }
                        if dict.keys.contains("operating_airline_phone") && dict["operating_airline_phone"] != nil {
                            self.operatingAirlinePhone = dict["operating_airline_phone"] as! String
                        }
                        if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                            self.operatingFlightNo = dict["operating_flight_no"] as! String
                        }
                        if dict.keys.contains("plane_type") && dict["plane_type"] != nil {
                            self.planeType = dict["plane_type"] as! String
                        }
                        if dict.keys.contains("raise_price") && dict["raise_price"] != nil {
                            self.raisePrice = dict["raise_price"] as! Int64
                        }
                        if dict.keys.contains("segment_id") && dict["segment_id"] != nil {
                            self.segmentId = dict["segment_id"] as! String
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                        if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                            var model = FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList.SegmentPosition()
                            model.fromMap(dict["segment_position"] as! [String: Any])
                            self.segmentPosition = model
                        }
                        if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                            self.stopAirport = dict["stop_airport"] as! String
                        }
                        if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                            self.stopArrTime = dict["stop_arr_time"] as! String
                        }
                        if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                            self.stopCity = dict["stop_city"] as! String
                        }
                        if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                            self.stopCityName = dict["stop_city_name"] as! String
                        }
                        if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                            self.stopDepTime = dict["stop_dep_time"] as! String
                        }
                        if dict.keys.contains("stop_quantity") && dict["stop_quantity"] != nil {
                            self.stopQuantity = dict["stop_quantity"] as! Int32
                        }
                    }
                }
                public var allFlyDuration: Int64?

                public var allFlyDurationAfterChange: Int64?

                public var applyId: Int64?

                public var arrCityCode: String?

                public var arrCityName: String?

                public var arrTime: String?

                public var baggageDetails: String?

                public var depCityCode: String?

                public var depCityName: String?

                public var depTime: String?

                public var flightStatus: String?

                public var iataNo: String?

                public var isReshopJourney: Bool?

                public var isTransfer: Bool?

                public var journeyTitle: String?

                public var refundChangeDetails: String?

                public var segmentList: [FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.allFlyDuration != nil {
                        map["all_fly_duration"] = self.allFlyDuration!
                    }
                    if self.allFlyDurationAfterChange != nil {
                        map["all_fly_duration_after_change"] = self.allFlyDurationAfterChange!
                    }
                    if self.applyId != nil {
                        map["apply_id"] = self.applyId!
                    }
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrCityName != nil {
                        map["arr_city_name"] = self.arrCityName!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.baggageDetails != nil {
                        map["baggage_details"] = self.baggageDetails!
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depCityName != nil {
                        map["dep_city_name"] = self.depCityName!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.flightStatus != nil {
                        map["flight_status"] = self.flightStatus!
                    }
                    if self.iataNo != nil {
                        map["iata_no"] = self.iataNo!
                    }
                    if self.isReshopJourney != nil {
                        map["is_reshop_journey"] = self.isReshopJourney!
                    }
                    if self.isTransfer != nil {
                        map["is_transfer"] = self.isTransfer!
                    }
                    if self.journeyTitle != nil {
                        map["journey_title"] = self.journeyTitle!
                    }
                    if self.refundChangeDetails != nil {
                        map["refund_change_details"] = self.refundChangeDetails!
                    }
                    if self.segmentList != nil {
                        var tmp : [Any] = []
                        for k in self.segmentList! {
                            tmp.append(k.toMap())
                        }
                        map["segment_list"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("all_fly_duration") && dict["all_fly_duration"] != nil {
                        self.allFlyDuration = dict["all_fly_duration"] as! Int64
                    }
                    if dict.keys.contains("all_fly_duration_after_change") && dict["all_fly_duration_after_change"] != nil {
                        self.allFlyDurationAfterChange = dict["all_fly_duration_after_change"] as! Int64
                    }
                    if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                        self.applyId = dict["apply_id"] as! Int64
                    }
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                        self.arrCityName = dict["arr_city_name"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("baggage_details") && dict["baggage_details"] != nil {
                        self.baggageDetails = dict["baggage_details"] as! String
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                        self.depCityName = dict["dep_city_name"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("flight_status") && dict["flight_status"] != nil {
                        self.flightStatus = dict["flight_status"] as! String
                    }
                    if dict.keys.contains("iata_no") && dict["iata_no"] != nil {
                        self.iataNo = dict["iata_no"] as! String
                    }
                    if dict.keys.contains("is_reshop_journey") && dict["is_reshop_journey"] != nil {
                        self.isReshopJourney = dict["is_reshop_journey"] as! Bool
                    }
                    if dict.keys.contains("is_transfer") && dict["is_transfer"] != nil {
                        self.isTransfer = dict["is_transfer"] as! Bool
                    }
                    if dict.keys.contains("journey_title") && dict["journey_title"] != nil {
                        self.journeyTitle = dict["journey_title"] as! String
                    }
                    if dict.keys.contains("refund_change_details") && dict["refund_change_details"] != nil {
                        self.refundChangeDetails = dict["refund_change_details"] as! String
                    }
                    if dict.keys.contains("segment_list") && dict["segment_list"] != nil {
                        var tmp : [FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList] = []
                        for v in dict["segment_list"] as! [Any] {
                            var model = FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys.SegmentList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.segmentList = tmp
                    }
                }
            }
            public var journeys: [FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys]?

            public var noticeTips: String?

            public var tripType: String?

            public var tripTypeCode: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.journeys != nil {
                    var tmp : [Any] = []
                    for k in self.journeys! {
                        tmp.append(k.toMap())
                    }
                    map["journeys"] = tmp
                }
                if self.noticeTips != nil {
                    map["notice_tips"] = self.noticeTips!
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                if self.tripTypeCode != nil {
                    map["trip_type_code"] = self.tripTypeCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("journeys") && dict["journeys"] != nil {
                    var tmp : [FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys] = []
                    for v in dict["journeys"] as! [Any] {
                        var model = FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO.Journeys()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.journeys = tmp
                }
                if dict.keys.contains("notice_tips") && dict["notice_tips"] != nil {
                    self.noticeTips = dict["notice_tips"] as! String
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! String
                }
                if dict.keys.contains("trip_type_code") && dict["trip_type_code"] != nil {
                    self.tripTypeCode = dict["trip_type_code"] as! Int32
                }
            }
        }
        public class PassengerList : Tea.TeaModel {
            public class Credential : Tea.TeaModel {
                public var birthDate: String?

                public var certIssueDate: String?

                public var certIssuePlace: String?

                public var credentialNo: String?

                public var driveLicenceFirst: String?

                public var driveLicenceType: String?

                public var expireDate: String?

                public var holderNationality: String?

                public var id: Int64?

                public var idCheckCode: String?

                public var issueCountry: String?

                public var type: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.birthDate != nil {
                        map["birth_date"] = self.birthDate!
                    }
                    if self.certIssueDate != nil {
                        map["cert_issue_date"] = self.certIssueDate!
                    }
                    if self.certIssuePlace != nil {
                        map["cert_issue_place"] = self.certIssuePlace!
                    }
                    if self.credentialNo != nil {
                        map["credential_no"] = self.credentialNo!
                    }
                    if self.driveLicenceFirst != nil {
                        map["drive_licence_first"] = self.driveLicenceFirst!
                    }
                    if self.driveLicenceType != nil {
                        map["drive_licence_type"] = self.driveLicenceType!
                    }
                    if self.expireDate != nil {
                        map["expire_date"] = self.expireDate!
                    }
                    if self.holderNationality != nil {
                        map["holder_nationality"] = self.holderNationality!
                    }
                    if self.id != nil {
                        map["id"] = self.id!
                    }
                    if self.idCheckCode != nil {
                        map["id_check_code"] = self.idCheckCode!
                    }
                    if self.issueCountry != nil {
                        map["issue_country"] = self.issueCountry!
                    }
                    if self.type != nil {
                        map["type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("birth_date") && dict["birth_date"] != nil {
                        self.birthDate = dict["birth_date"] as! String
                    }
                    if dict.keys.contains("cert_issue_date") && dict["cert_issue_date"] != nil {
                        self.certIssueDate = dict["cert_issue_date"] as! String
                    }
                    if dict.keys.contains("cert_issue_place") && dict["cert_issue_place"] != nil {
                        self.certIssuePlace = dict["cert_issue_place"] as! String
                    }
                    if dict.keys.contains("credential_no") && dict["credential_no"] != nil {
                        self.credentialNo = dict["credential_no"] as! String
                    }
                    if dict.keys.contains("drive_licence_first") && dict["drive_licence_first"] != nil {
                        self.driveLicenceFirst = dict["drive_licence_first"] as! String
                    }
                    if dict.keys.contains("drive_licence_type") && dict["drive_licence_type"] != nil {
                        self.driveLicenceType = dict["drive_licence_type"] as! String
                    }
                    if dict.keys.contains("expire_date") && dict["expire_date"] != nil {
                        self.expireDate = dict["expire_date"] as! String
                    }
                    if dict.keys.contains("holder_nationality") && dict["holder_nationality"] != nil {
                        self.holderNationality = dict["holder_nationality"] as! String
                    }
                    if dict.keys.contains("id") && dict["id"] != nil {
                        self.id = dict["id"] as! Int64
                    }
                    if dict.keys.contains("id_check_code") && dict["id_check_code"] != nil {
                        self.idCheckCode = dict["id_check_code"] as! String
                    }
                    if dict.keys.contains("issue_country") && dict["issue_country"] != nil {
                        self.issueCountry = dict["issue_country"] as! String
                    }
                    if dict.keys.contains("type") && dict["type"] != nil {
                        self.type = dict["type"] as! Int32
                    }
                }
            }
            public class Credentials : Tea.TeaModel {
                public var birthDate: String?

                public var certIssueDate: String?

                public var certIssuePlace: String?

                public var credentialNo: String?

                public var driveLicenceFirst: String?

                public var driveLicenceType: String?

                public var expireDate: String?

                public var holderNationality: String?

                public var id: Int64?

                public var idCheckCode: String?

                public var issueCountry: String?

                public var type: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.birthDate != nil {
                        map["birth_date"] = self.birthDate!
                    }
                    if self.certIssueDate != nil {
                        map["cert_issue_date"] = self.certIssueDate!
                    }
                    if self.certIssuePlace != nil {
                        map["cert_issue_place"] = self.certIssuePlace!
                    }
                    if self.credentialNo != nil {
                        map["credential_no"] = self.credentialNo!
                    }
                    if self.driveLicenceFirst != nil {
                        map["drive_licence_first"] = self.driveLicenceFirst!
                    }
                    if self.driveLicenceType != nil {
                        map["drive_licence_type"] = self.driveLicenceType!
                    }
                    if self.expireDate != nil {
                        map["expire_date"] = self.expireDate!
                    }
                    if self.holderNationality != nil {
                        map["holder_nationality"] = self.holderNationality!
                    }
                    if self.id != nil {
                        map["id"] = self.id!
                    }
                    if self.idCheckCode != nil {
                        map["id_check_code"] = self.idCheckCode!
                    }
                    if self.issueCountry != nil {
                        map["issue_country"] = self.issueCountry!
                    }
                    if self.type != nil {
                        map["type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("birth_date") && dict["birth_date"] != nil {
                        self.birthDate = dict["birth_date"] as! String
                    }
                    if dict.keys.contains("cert_issue_date") && dict["cert_issue_date"] != nil {
                        self.certIssueDate = dict["cert_issue_date"] as! String
                    }
                    if dict.keys.contains("cert_issue_place") && dict["cert_issue_place"] != nil {
                        self.certIssuePlace = dict["cert_issue_place"] as! String
                    }
                    if dict.keys.contains("credential_no") && dict["credential_no"] != nil {
                        self.credentialNo = dict["credential_no"] as! String
                    }
                    if dict.keys.contains("drive_licence_first") && dict["drive_licence_first"] != nil {
                        self.driveLicenceFirst = dict["drive_licence_first"] as! String
                    }
                    if dict.keys.contains("drive_licence_type") && dict["drive_licence_type"] != nil {
                        self.driveLicenceType = dict["drive_licence_type"] as! String
                    }
                    if dict.keys.contains("expire_date") && dict["expire_date"] != nil {
                        self.expireDate = dict["expire_date"] as! String
                    }
                    if dict.keys.contains("holder_nationality") && dict["holder_nationality"] != nil {
                        self.holderNationality = dict["holder_nationality"] as! String
                    }
                    if dict.keys.contains("id") && dict["id"] != nil {
                        self.id = dict["id"] as! Int64
                    }
                    if dict.keys.contains("id_check_code") && dict["id_check_code"] != nil {
                        self.idCheckCode = dict["id_check_code"] as! String
                    }
                    if dict.keys.contains("issue_country") && dict["issue_country"] != nil {
                        self.issueCountry = dict["issue_country"] as! String
                    }
                    if dict.keys.contains("type") && dict["type"] != nil {
                        self.type = dict["type"] as! Int32
                    }
                }
            }
            public class Tickets : Tea.TeaModel {
                public class SegmentOpenTicketList : Tea.TeaModel {
                    public var journeyIndex: Int32?

                    public var openTicketStatus: Int32?

                    public var segmentIndex: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.journeyIndex != nil {
                            map["journey_index"] = self.journeyIndex!
                        }
                        if self.openTicketStatus != nil {
                            map["open_ticket_status"] = self.openTicketStatus!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                            self.journeyIndex = dict["journey_index"] as! Int32
                        }
                        if dict.keys.contains("open_ticket_status") && dict["open_ticket_status"] != nil {
                            self.openTicketStatus = dict["open_ticket_status"] as! Int32
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                    }
                }
                public var channel: String?

                public var journeyTitle: String?

                public var openTicketStatus: String?

                public var pcc: String?

                public var segmentOpenTicketList: [FlightOrderDetailV2ResponseBody.Module.PassengerList.Tickets.SegmentOpenTicketList]?

                public var ticketAuthMemo: String?

                public var ticketAuthStatus: Int32?

                public var ticketNo: String?

                public var ticketPrice: Int64?

                public var ticketStatus: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.channel != nil {
                        map["channel"] = self.channel!
                    }
                    if self.journeyTitle != nil {
                        map["journey_title"] = self.journeyTitle!
                    }
                    if self.openTicketStatus != nil {
                        map["open_ticket_status"] = self.openTicketStatus!
                    }
                    if self.pcc != nil {
                        map["pcc"] = self.pcc!
                    }
                    if self.segmentOpenTicketList != nil {
                        var tmp : [Any] = []
                        for k in self.segmentOpenTicketList! {
                            tmp.append(k.toMap())
                        }
                        map["segment_open_ticket_list"] = tmp
                    }
                    if self.ticketAuthMemo != nil {
                        map["ticket_auth_memo"] = self.ticketAuthMemo!
                    }
                    if self.ticketAuthStatus != nil {
                        map["ticket_auth_status"] = self.ticketAuthStatus!
                    }
                    if self.ticketNo != nil {
                        map["ticket_no"] = self.ticketNo!
                    }
                    if self.ticketPrice != nil {
                        map["ticket_price"] = self.ticketPrice!
                    }
                    if self.ticketStatus != nil {
                        map["ticket_status"] = self.ticketStatus!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("channel") && dict["channel"] != nil {
                        self.channel = dict["channel"] as! String
                    }
                    if dict.keys.contains("journey_title") && dict["journey_title"] != nil {
                        self.journeyTitle = dict["journey_title"] as! String
                    }
                    if dict.keys.contains("open_ticket_status") && dict["open_ticket_status"] != nil {
                        self.openTicketStatus = dict["open_ticket_status"] as! String
                    }
                    if dict.keys.contains("pcc") && dict["pcc"] != nil {
                        self.pcc = dict["pcc"] as! String
                    }
                    if dict.keys.contains("segment_open_ticket_list") && dict["segment_open_ticket_list"] != nil {
                        var tmp : [FlightOrderDetailV2ResponseBody.Module.PassengerList.Tickets.SegmentOpenTicketList] = []
                        for v in dict["segment_open_ticket_list"] as! [Any] {
                            var model = FlightOrderDetailV2ResponseBody.Module.PassengerList.Tickets.SegmentOpenTicketList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.segmentOpenTicketList = tmp
                    }
                    if dict.keys.contains("ticket_auth_memo") && dict["ticket_auth_memo"] != nil {
                        self.ticketAuthMemo = dict["ticket_auth_memo"] as! String
                    }
                    if dict.keys.contains("ticket_auth_status") && dict["ticket_auth_status"] != nil {
                        self.ticketAuthStatus = dict["ticket_auth_status"] as! Int32
                    }
                    if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                        self.ticketNo = dict["ticket_no"] as! String
                    }
                    if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                        self.ticketPrice = dict["ticket_price"] as! Int64
                    }
                    if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                        self.ticketStatus = dict["ticket_status"] as! String
                    }
                }
            }
            public var birthday: String?

            public var btripUserId: String?

            public var code: Int32?

            public var country: String?

            public var countryCode: String?

            public var credential: FlightOrderDetailV2ResponseBody.Module.PassengerList.Credential?

            public var credentials: [FlightOrderDetailV2ResponseBody.Module.PassengerList.Credentials]?

            public var email: String?

            public var enFirstName: String?

            public var enLastName: String?

            public var englishName: String?

            public var gender: Int32?

            public var id: String?

            public var isComplete: Bool?

            public var isFrequently: Bool?

            public var memo: String?

            public var mobileCountryCode: String?

            public var mobilePhoneNumber: String?

            public var name: String?

            public var oneself: Bool?

            public var orderName: String?

            public var outPassengerId: String?

            public var phone: String?

            public var shengPiPinyin: String?

            public var ticketNos: [String]?

            public var tickets: [FlightOrderDetailV2ResponseBody.Module.PassengerList.Tickets]?

            public var type: Int32?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.credential?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.birthday != nil {
                    map["birthday"] = self.birthday!
                }
                if self.btripUserId != nil {
                    map["btrip_user_id"] = self.btripUserId!
                }
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.country != nil {
                    map["country"] = self.country!
                }
                if self.countryCode != nil {
                    map["country_code"] = self.countryCode!
                }
                if self.credential != nil {
                    map["credential"] = self.credential?.toMap()
                }
                if self.credentials != nil {
                    var tmp : [Any] = []
                    for k in self.credentials! {
                        tmp.append(k.toMap())
                    }
                    map["credentials"] = tmp
                }
                if self.email != nil {
                    map["email"] = self.email!
                }
                if self.enFirstName != nil {
                    map["en_first_name"] = self.enFirstName!
                }
                if self.enLastName != nil {
                    map["en_last_name"] = self.enLastName!
                }
                if self.englishName != nil {
                    map["english_name"] = self.englishName!
                }
                if self.gender != nil {
                    map["gender"] = self.gender!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.isComplete != nil {
                    map["is_complete"] = self.isComplete!
                }
                if self.isFrequently != nil {
                    map["is_frequently"] = self.isFrequently!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.mobileCountryCode != nil {
                    map["mobile_country_code"] = self.mobileCountryCode!
                }
                if self.mobilePhoneNumber != nil {
                    map["mobile_phone_number"] = self.mobilePhoneNumber!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.oneself != nil {
                    map["oneself"] = self.oneself!
                }
                if self.orderName != nil {
                    map["order_name"] = self.orderName!
                }
                if self.outPassengerId != nil {
                    map["out_passenger_id"] = self.outPassengerId!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                if self.shengPiPinyin != nil {
                    map["sheng_pi_pinyin"] = self.shengPiPinyin!
                }
                if self.ticketNos != nil {
                    map["ticket_nos"] = self.ticketNos!
                }
                if self.tickets != nil {
                    var tmp : [Any] = []
                    for k in self.tickets! {
                        tmp.append(k.toMap())
                    }
                    map["tickets"] = tmp
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("birthday") && dict["birthday"] != nil {
                    self.birthday = dict["birthday"] as! String
                }
                if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
                    self.btripUserId = dict["btrip_user_id"] as! String
                }
                if dict.keys.contains("code") && dict["code"] != nil {
                    self.code = dict["code"] as! Int32
                }
                if dict.keys.contains("country") && dict["country"] != nil {
                    self.country = dict["country"] as! String
                }
                if dict.keys.contains("country_code") && dict["country_code"] != nil {
                    self.countryCode = dict["country_code"] as! String
                }
                if dict.keys.contains("credential") && dict["credential"] != nil {
                    var model = FlightOrderDetailV2ResponseBody.Module.PassengerList.Credential()
                    model.fromMap(dict["credential"] as! [String: Any])
                    self.credential = model
                }
                if dict.keys.contains("credentials") && dict["credentials"] != nil {
                    var tmp : [FlightOrderDetailV2ResponseBody.Module.PassengerList.Credentials] = []
                    for v in dict["credentials"] as! [Any] {
                        var model = FlightOrderDetailV2ResponseBody.Module.PassengerList.Credentials()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.credentials = tmp
                }
                if dict.keys.contains("email") && dict["email"] != nil {
                    self.email = dict["email"] as! String
                }
                if dict.keys.contains("en_first_name") && dict["en_first_name"] != nil {
                    self.enFirstName = dict["en_first_name"] as! String
                }
                if dict.keys.contains("en_last_name") && dict["en_last_name"] != nil {
                    self.enLastName = dict["en_last_name"] as! String
                }
                if dict.keys.contains("english_name") && dict["english_name"] != nil {
                    self.englishName = dict["english_name"] as! String
                }
                if dict.keys.contains("gender") && dict["gender"] != nil {
                    self.gender = dict["gender"] as! Int32
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! String
                }
                if dict.keys.contains("is_complete") && dict["is_complete"] != nil {
                    self.isComplete = dict["is_complete"] as! Bool
                }
                if dict.keys.contains("is_frequently") && dict["is_frequently"] != nil {
                    self.isFrequently = dict["is_frequently"] as! Bool
                }
                if dict.keys.contains("memo") && dict["memo"] != nil {
                    self.memo = dict["memo"] as! String
                }
                if dict.keys.contains("mobile_country_code") && dict["mobile_country_code"] != nil {
                    self.mobileCountryCode = dict["mobile_country_code"] as! String
                }
                if dict.keys.contains("mobile_phone_number") && dict["mobile_phone_number"] != nil {
                    self.mobilePhoneNumber = dict["mobile_phone_number"] as! String
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("oneself") && dict["oneself"] != nil {
                    self.oneself = dict["oneself"] as! Bool
                }
                if dict.keys.contains("order_name") && dict["order_name"] != nil {
                    self.orderName = dict["order_name"] as! String
                }
                if dict.keys.contains("out_passenger_id") && dict["out_passenger_id"] != nil {
                    self.outPassengerId = dict["out_passenger_id"] as! String
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
                if dict.keys.contains("sheng_pi_pinyin") && dict["sheng_pi_pinyin"] != nil {
                    self.shengPiPinyin = dict["sheng_pi_pinyin"] as! String
                }
                if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
                    self.ticketNos = dict["ticket_nos"] as! [String]
                }
                if dict.keys.contains("tickets") && dict["tickets"] != nil {
                    var tmp : [FlightOrderDetailV2ResponseBody.Module.PassengerList.Tickets] = []
                    for v in dict["tickets"] as! [Any] {
                        var model = FlightOrderDetailV2ResponseBody.Module.PassengerList.Tickets()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.tickets = tmp
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public var b2gVipCode: String?

        public var bookSuccTime: String?

        public var bookUserId: String?

        public var bookUserName: String?

        public var buildPrice: Int64?

        public var contactInfoDTO: FlightOrderDetailV2ResponseBody.Module.ContactInfoDTO?

        public var createTime: String?

        public var facevalue: Int64?

        public var flightTaleInfoDTO: FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO?

        public var isProtocol: Bool?

        public var isemergency: Bool?

        public var issendmessage: Bool?

        public var oilPrice: Int64?

        public var orderId: Int64?

        public var orderPrice: Int64?

        public var outOrderId: String?

        public var passengerList: [FlightOrderDetailV2ResponseBody.Module.PassengerList]?

        public var passengerSegmentMap: [String: String]?

        public var payTime: String?

        public var saleprice: Int64?

        public var sendcpsms: Bool?

        public var status: Int32?

        public var totalServiceFeePrice: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactInfoDTO?.validate()
            try self.flightTaleInfoDTO?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.b2gVipCode != nil {
                map["b2g_vip_code"] = self.b2gVipCode!
            }
            if self.bookSuccTime != nil {
                map["book_succ_time"] = self.bookSuccTime!
            }
            if self.bookUserId != nil {
                map["book_user_id"] = self.bookUserId!
            }
            if self.bookUserName != nil {
                map["book_user_name"] = self.bookUserName!
            }
            if self.buildPrice != nil {
                map["build_price"] = self.buildPrice!
            }
            if self.contactInfoDTO != nil {
                map["contact_info_d_t_o"] = self.contactInfoDTO?.toMap()
            }
            if self.createTime != nil {
                map["create_time"] = self.createTime!
            }
            if self.facevalue != nil {
                map["facevalue"] = self.facevalue!
            }
            if self.flightTaleInfoDTO != nil {
                map["flight_tale_info_d_t_o"] = self.flightTaleInfoDTO?.toMap()
            }
            if self.isProtocol != nil {
                map["is_protocol"] = self.isProtocol!
            }
            if self.isemergency != nil {
                map["isemergency"] = self.isemergency!
            }
            if self.issendmessage != nil {
                map["issendmessage"] = self.issendmessage!
            }
            if self.oilPrice != nil {
                map["oil_price"] = self.oilPrice!
            }
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.orderPrice != nil {
                map["order_price"] = self.orderPrice!
            }
            if self.outOrderId != nil {
                map["out_order_id"] = self.outOrderId!
            }
            if self.passengerList != nil {
                var tmp : [Any] = []
                for k in self.passengerList! {
                    tmp.append(k.toMap())
                }
                map["passenger_list"] = tmp
            }
            if self.passengerSegmentMap != nil {
                map["passenger_segment_map"] = self.passengerSegmentMap!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.saleprice != nil {
                map["saleprice"] = self.saleprice!
            }
            if self.sendcpsms != nil {
                map["sendcpsms"] = self.sendcpsms!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.totalServiceFeePrice != nil {
                map["total_service_fee_price"] = self.totalServiceFeePrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("b2g_vip_code") && dict["b2g_vip_code"] != nil {
                self.b2gVipCode = dict["b2g_vip_code"] as! String
            }
            if dict.keys.contains("book_succ_time") && dict["book_succ_time"] != nil {
                self.bookSuccTime = dict["book_succ_time"] as! String
            }
            if dict.keys.contains("book_user_id") && dict["book_user_id"] != nil {
                self.bookUserId = dict["book_user_id"] as! String
            }
            if dict.keys.contains("book_user_name") && dict["book_user_name"] != nil {
                self.bookUserName = dict["book_user_name"] as! String
            }
            if dict.keys.contains("build_price") && dict["build_price"] != nil {
                self.buildPrice = dict["build_price"] as! Int64
            }
            if dict.keys.contains("contact_info_d_t_o") && dict["contact_info_d_t_o"] != nil {
                var model = FlightOrderDetailV2ResponseBody.Module.ContactInfoDTO()
                model.fromMap(dict["contact_info_d_t_o"] as! [String: Any])
                self.contactInfoDTO = model
            }
            if dict.keys.contains("create_time") && dict["create_time"] != nil {
                self.createTime = dict["create_time"] as! String
            }
            if dict.keys.contains("facevalue") && dict["facevalue"] != nil {
                self.facevalue = dict["facevalue"] as! Int64
            }
            if dict.keys.contains("flight_tale_info_d_t_o") && dict["flight_tale_info_d_t_o"] != nil {
                var model = FlightOrderDetailV2ResponseBody.Module.FlightTaleInfoDTO()
                model.fromMap(dict["flight_tale_info_d_t_o"] as! [String: Any])
                self.flightTaleInfoDTO = model
            }
            if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                self.isProtocol = dict["is_protocol"] as! Bool
            }
            if dict.keys.contains("isemergency") && dict["isemergency"] != nil {
                self.isemergency = dict["isemergency"] as! Bool
            }
            if dict.keys.contains("issendmessage") && dict["issendmessage"] != nil {
                self.issendmessage = dict["issendmessage"] as! Bool
            }
            if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                self.oilPrice = dict["oil_price"] as! Int64
            }
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! Int64
            }
            if dict.keys.contains("order_price") && dict["order_price"] != nil {
                self.orderPrice = dict["order_price"] as! Int64
            }
            if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
                self.outOrderId = dict["out_order_id"] as! String
            }
            if dict.keys.contains("passenger_list") && dict["passenger_list"] != nil {
                var tmp : [FlightOrderDetailV2ResponseBody.Module.PassengerList] = []
                for v in dict["passenger_list"] as! [Any] {
                    var model = FlightOrderDetailV2ResponseBody.Module.PassengerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerList = tmp
            }
            if dict.keys.contains("passenger_segment_map") && dict["passenger_segment_map"] != nil {
                self.passengerSegmentMap = dict["passenger_segment_map"] as! [String: String]
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("saleprice") && dict["saleprice"] != nil {
                self.saleprice = dict["saleprice"] as! Int64
            }
            if dict.keys.contains("sendcpsms") && dict["sendcpsms"] != nil {
                self.sendcpsms = dict["sendcpsms"] as! Bool
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("total_service_fee_price") && dict["total_service_fee_price"] != nil {
                self.totalServiceFeePrice = dict["total_service_fee_price"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightOrderDetailV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightOrderDetailV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOrderDetailV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOrderDetailV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOrderDetailV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOrderListQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class FlightOrderListQueryRequest : Tea.TeaModel {
    public var allApply: Bool?

    public var applyId: Int64?

    public var departId: String?

    public var endTime: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var thirdpartApplyId: String?

    public var updateEndTime: String?

    public var updateStartTime: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allApply != nil {
            map["all_apply"] = self.allApply!
        }
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.page != nil {
            map["page"] = self.page!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.updateEndTime != nil {
            map["update_end_time"] = self.updateEndTime!
        }
        if self.updateStartTime != nil {
            map["update_start_time"] = self.updateStartTime!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_apply") && dict["all_apply"] != nil {
            self.allApply = dict["all_apply"] as! Bool
        }
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! String
        }
        if dict.keys.contains("page") && dict["page"] != nil {
            self.page = dict["page"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("update_end_time") && dict["update_end_time"] != nil {
            self.updateEndTime = dict["update_end_time"] as! String
        }
        if dict.keys.contains("update_start_time") && dict["update_start_time"] != nil {
            self.updateStartTime = dict["update_start_time"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class FlightOrderListQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class CostCenter : Tea.TeaModel {
            public var corpId: String?

            public var id: Int64?

            public var name: String?

            public var number: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.number != nil {
                    map["number"] = self.number!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("number") && dict["number"] != nil {
                    self.number = dict["number"] as! String
                }
            }
        }
        public class InsureInfoList : Tea.TeaModel {
            public var insureNo: String?

            public var name: String?

            public var status: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.insureNo != nil {
                    map["insure_no"] = self.insureNo!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("insure_no") && dict["insure_no"] != nil {
                    self.insureNo = dict["insure_no"] as! String
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
            }
        }
        public class Invoice : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var categoryType: Int32?

            public var changeFlightNo: String?

            public var discount: String?

            public var endTime: String?

            public var gmtCreate: String?

            public var originalTicketNo: String?

            public var passengerName: String?

            public var payType: Int32?

            public var price: Double?

            public var startTime: String?

            public var ticketNo: String?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.categoryType != nil {
                    map["category_type"] = self.categoryType!
                }
                if self.changeFlightNo != nil {
                    map["change_flight_no"] = self.changeFlightNo!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.endTime != nil {
                    map["end_time"] = self.endTime!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.originalTicketNo != nil {
                    map["original_ticket_no"] = self.originalTicketNo!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.startTime != nil {
                    map["start_time"] = self.startTime!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("category_type") && dict["category_type"] != nil {
                    self.categoryType = dict["category_type"] as! Int32
                }
                if dict.keys.contains("change_flight_no") && dict["change_flight_no"] != nil {
                    self.changeFlightNo = dict["change_flight_no"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("end_time") && dict["end_time"] != nil {
                    self.endTime = dict["end_time"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("original_ticket_no") && dict["original_ticket_no"] != nil {
                    self.originalTicketNo = dict["original_ticket_no"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("start_time") && dict["start_time"] != nil {
                    self.startTime = dict["start_time"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class UserAffiliateList : Tea.TeaModel {
            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public var applyId: Int64?

        public var arrAirport: String?

        public var arrCity: String?

        public var arrCityAdCode: String?

        public var btripTitle: String?

        public var cabinClass: String?

        public var contactName: String?

        public var corpId: String?

        public var corpName: String?

        public var costCenter: FlightOrderListQueryResponseBody.Module.CostCenter?

        public var depAirport: String?

        public var depCity: String?

        public var depCityAdCode: String?

        public var depDate: String?

        public var departId: String?

        public var departName: String?

        public var discount: String?

        public var flightNo: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var insureInfoList: [FlightOrderListQueryResponseBody.Module.InsureInfoList]?

        public var invoice: FlightOrderListQueryResponseBody.Module.Invoice?

        public var passengerCount: Int32?

        public var passengerName: String?

        public var priceInfoList: [FlightOrderListQueryResponseBody.Module.PriceInfoList]?

        public var projectCode: String?

        public var projectId: Int64?

        public var projectTitle: String?

        public var retDate: String?

        public var status: Int32?

        public var thirdPartProjectId: String?

        public var thirdpartApplyId: String?

        public var thirdpartItineraryId: String?

        public var tripType: Int32?

        public var userAffiliateList: [FlightOrderListQueryResponseBody.Module.UserAffiliateList]?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.costCenter?.validate()
            try self.invoice?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.arrAirport != nil {
                map["arr_airport"] = self.arrAirport!
            }
            if self.arrCity != nil {
                map["arr_city"] = self.arrCity!
            }
            if self.arrCityAdCode != nil {
                map["arr_city_ad_code"] = self.arrCityAdCode!
            }
            if self.btripTitle != nil {
                map["btrip_title"] = self.btripTitle!
            }
            if self.cabinClass != nil {
                map["cabin_class"] = self.cabinClass!
            }
            if self.contactName != nil {
                map["contact_name"] = self.contactName!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.corpName != nil {
                map["corp_name"] = self.corpName!
            }
            if self.costCenter != nil {
                map["cost_center"] = self.costCenter?.toMap()
            }
            if self.depAirport != nil {
                map["dep_airport"] = self.depAirport!
            }
            if self.depCity != nil {
                map["dep_city"] = self.depCity!
            }
            if self.depCityAdCode != nil {
                map["dep_city_ad_code"] = self.depCityAdCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.discount != nil {
                map["discount"] = self.discount!
            }
            if self.flightNo != nil {
                map["flight_no"] = self.flightNo!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.insureInfoList != nil {
                var tmp : [Any] = []
                for k in self.insureInfoList! {
                    tmp.append(k.toMap())
                }
                map["insure_info_list"] = tmp
            }
            if self.invoice != nil {
                map["invoice"] = self.invoice?.toMap()
            }
            if self.passengerCount != nil {
                map["passenger_count"] = self.passengerCount!
            }
            if self.passengerName != nil {
                map["passenger_name"] = self.passengerName!
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectId != nil {
                map["project_id"] = self.projectId!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.retDate != nil {
                map["ret_date"] = self.retDate!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.thirdPartProjectId != nil {
                map["third_part_project_id"] = self.thirdPartProjectId!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartItineraryId != nil {
                map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
            }
            if self.tripType != nil {
                map["trip_type"] = self.tripType!
            }
            if self.userAffiliateList != nil {
                var tmp : [Any] = []
                for k in self.userAffiliateList! {
                    tmp.append(k.toMap())
                }
                map["user_affiliate_list"] = tmp
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("arr_airport") && dict["arr_airport"] != nil {
                self.arrAirport = dict["arr_airport"] as! String
            }
            if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                self.arrCity = dict["arr_city"] as! String
            }
            if dict.keys.contains("arr_city_ad_code") && dict["arr_city_ad_code"] != nil {
                self.arrCityAdCode = dict["arr_city_ad_code"] as! String
            }
            if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                self.btripTitle = dict["btrip_title"] as! String
            }
            if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                self.cabinClass = dict["cabin_class"] as! String
            }
            if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                self.contactName = dict["contact_name"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                self.corpName = dict["corp_name"] as! String
            }
            if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                var model = FlightOrderListQueryResponseBody.Module.CostCenter()
                model.fromMap(dict["cost_center"] as! [String: Any])
                self.costCenter = model
            }
            if dict.keys.contains("dep_airport") && dict["dep_airport"] != nil {
                self.depAirport = dict["dep_airport"] as! String
            }
            if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                self.depCity = dict["dep_city"] as! String
            }
            if dict.keys.contains("dep_city_ad_code") && dict["dep_city_ad_code"] != nil {
                self.depCityAdCode = dict["dep_city_ad_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! String
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("discount") && dict["discount"] != nil {
                self.discount = dict["discount"] as! String
            }
            if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                self.flightNo = dict["flight_no"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("insure_info_list") && dict["insure_info_list"] != nil {
                var tmp : [FlightOrderListQueryResponseBody.Module.InsureInfoList] = []
                for v in dict["insure_info_list"] as! [Any] {
                    var model = FlightOrderListQueryResponseBody.Module.InsureInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.insureInfoList = tmp
            }
            if dict.keys.contains("invoice") && dict["invoice"] != nil {
                var model = FlightOrderListQueryResponseBody.Module.Invoice()
                model.fromMap(dict["invoice"] as! [String: Any])
                self.invoice = model
            }
            if dict.keys.contains("passenger_count") && dict["passenger_count"] != nil {
                self.passengerCount = dict["passenger_count"] as! Int32
            }
            if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                self.passengerName = dict["passenger_name"] as! String
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [FlightOrderListQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = FlightOrderListQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_id") && dict["project_id"] != nil {
                self.projectId = dict["project_id"] as! Int64
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("ret_date") && dict["ret_date"] != nil {
                self.retDate = dict["ret_date"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("third_part_project_id") && dict["third_part_project_id"] != nil {
                self.thirdPartProjectId = dict["third_part_project_id"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
            }
            if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                self.tripType = dict["trip_type"] as! Int32
            }
            if dict.keys.contains("user_affiliate_list") && dict["user_affiliate_list"] != nil {
                var tmp : [FlightOrderListQueryResponseBody.Module.UserAffiliateList] = []
                for v in dict["user_affiliate_list"] as! [Any] {
                    var model = FlightOrderListQueryResponseBody.Module.UserAffiliateList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.userAffiliateList = tmp
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public class PageInfo : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var totalNumber: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["page"] = self.page!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalNumber != nil {
                map["total_number"] = self.totalNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("page") && dict["page"] != nil {
                self.page = dict["page"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_number") && dict["total_number"] != nil {
                self.totalNumber = dict["total_number"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [FlightOrderListQueryResponseBody.Module]?

    public var pageInfo: FlightOrderListQueryResponseBody.PageInfo?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.pageInfo != nil {
            map["page_info"] = self.pageInfo?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [FlightOrderListQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = FlightOrderListQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("page_info") && dict["page_info"] != nil {
            var model = FlightOrderListQueryResponseBody.PageInfo()
            model.fromMap(dict["page_info"] as! [String: Any])
            self.pageInfo = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOrderListQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOrderListQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOrderListQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOrderQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class FlightOrderQueryRequest : Tea.TeaModel {
    public var orderId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class FlightOrderQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightChangeTicketInfoList : Tea.TeaModel {
            public var applyId: String?

            public var arrAirport: String?

            public var arrCity: String?

            public var arrTime: String?

            public var changeCabin: String?

            public var changeCabinLevel: String?

            public var changeFee: Double?

            public var changeFlightNo: String?

            public var changeOrderId: Int64?

            public var changeReason: String?

            public var changeType: Int32?

            public var depAirport: String?

            public var depCity: String?

            public var depTime: String?

            public var discount: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var originTicketNo: String?

            public var outApplyId: String?

            public var stopCity: String?

            public var ticketNo: String?

            public var ticketStatus: String?

            public var ticketStatusCode: Int32?

            public var upgradeFee: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrAirport != nil {
                    map["arr_airport"] = self.arrAirport!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.changeCabin != nil {
                    map["change_cabin"] = self.changeCabin!
                }
                if self.changeCabinLevel != nil {
                    map["change_cabin_level"] = self.changeCabinLevel!
                }
                if self.changeFee != nil {
                    map["change_fee"] = self.changeFee!
                }
                if self.changeFlightNo != nil {
                    map["change_flight_no"] = self.changeFlightNo!
                }
                if self.changeOrderId != nil {
                    map["change_order_id"] = self.changeOrderId!
                }
                if self.changeReason != nil {
                    map["change_reason"] = self.changeReason!
                }
                if self.changeType != nil {
                    map["change_type"] = self.changeType!
                }
                if self.depAirport != nil {
                    map["dep_airport"] = self.depAirport!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.originTicketNo != nil {
                    map["origin_ticket_no"] = self.originTicketNo!
                }
                if self.outApplyId != nil {
                    map["out_apply_id"] = self.outApplyId!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketStatus != nil {
                    map["ticket_status"] = self.ticketStatus!
                }
                if self.ticketStatusCode != nil {
                    map["ticket_status_code"] = self.ticketStatusCode!
                }
                if self.upgradeFee != nil {
                    map["upgrade_fee"] = self.upgradeFee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_airport") && dict["arr_airport"] != nil {
                    self.arrAirport = dict["arr_airport"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("change_cabin") && dict["change_cabin"] != nil {
                    self.changeCabin = dict["change_cabin"] as! String
                }
                if dict.keys.contains("change_cabin_level") && dict["change_cabin_level"] != nil {
                    self.changeCabinLevel = dict["change_cabin_level"] as! String
                }
                if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                    self.changeFee = dict["change_fee"] as! Double
                }
                if dict.keys.contains("change_flight_no") && dict["change_flight_no"] != nil {
                    self.changeFlightNo = dict["change_flight_no"] as! String
                }
                if dict.keys.contains("change_order_id") && dict["change_order_id"] != nil {
                    self.changeOrderId = dict["change_order_id"] as! Int64
                }
                if dict.keys.contains("change_reason") && dict["change_reason"] != nil {
                    self.changeReason = dict["change_reason"] as! String
                }
                if dict.keys.contains("change_type") && dict["change_type"] != nil {
                    self.changeType = dict["change_type"] as! Int32
                }
                if dict.keys.contains("dep_airport") && dict["dep_airport"] != nil {
                    self.depAirport = dict["dep_airport"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("origin_ticket_no") && dict["origin_ticket_no"] != nil {
                    self.originTicketNo = dict["origin_ticket_no"] as! String
                }
                if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
                    self.outApplyId = dict["out_apply_id"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                    self.ticketStatus = dict["ticket_status"] as! String
                }
                if dict.keys.contains("ticket_status_code") && dict["ticket_status_code"] != nil {
                    self.ticketStatusCode = dict["ticket_status_code"] as! Int32
                }
                if dict.keys.contains("upgrade_fee") && dict["upgrade_fee"] != nil {
                    self.upgradeFee = dict["upgrade_fee"] as! Double
                }
            }
        }
        public class FlightInfoList : Tea.TeaModel {
            public var airlineCode: String?

            public var airlineName: String?

            public var arrAirportCode: String?

            public var arrAirportName: String?

            public var arrCityAdCode: String?

            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrTime: String?

            public var cabin: String?

            public var cabinLevel: String?

            public var depAirportCode: String?

            public var depAirportName: String?

            public var depCityAdCode: String?

            public var depCityCode: String?

            public var depCityName: String?

            public var depTime: String?

            public var flightMile: Int32?

            public var flightNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineCode != nil {
                    map["airline_code"] = self.airlineCode!
                }
                if self.airlineName != nil {
                    map["airline_name"] = self.airlineName!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrAirportName != nil {
                    map["arr_airport_name"] = self.arrAirportName!
                }
                if self.arrCityAdCode != nil {
                    map["arr_city_ad_code"] = self.arrCityAdCode!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinLevel != nil {
                    map["cabin_level"] = self.cabinLevel!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depAirportName != nil {
                    map["dep_airport_name"] = self.depAirportName!
                }
                if self.depCityAdCode != nil {
                    map["dep_city_ad_code"] = self.depCityAdCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.flightMile != nil {
                    map["flight_mile"] = self.flightMile!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                    self.airlineCode = dict["airline_code"] as! String
                }
                if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                    self.airlineName = dict["airline_name"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_airport_name") && dict["arr_airport_name"] != nil {
                    self.arrAirportName = dict["arr_airport_name"] as! String
                }
                if dict.keys.contains("arr_city_ad_code") && dict["arr_city_ad_code"] != nil {
                    self.arrCityAdCode = dict["arr_city_ad_code"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_level") && dict["cabin_level"] != nil {
                    self.cabinLevel = dict["cabin_level"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_airport_name") && dict["dep_airport_name"] != nil {
                    self.depAirportName = dict["dep_airport_name"] as! String
                }
                if dict.keys.contains("dep_city_ad_code") && dict["dep_city_ad_code"] != nil {
                    self.depCityAdCode = dict["dep_city_ad_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("flight_mile") && dict["flight_mile"] != nil {
                    self.flightMile = dict["flight_mile"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
            }
        }
        public class FlightRefundTicketInfoList : Tea.TeaModel {
            public var applyId: String?

            public var arrAirport: String?

            public var arrCity: String?

            public var depAirport: String?

            public var depCity: String?

            public var flightNo: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var outApplyId: String?

            public var refundOrderId: Int64?

            public var refundReason: String?

            public var refundTicketFee: Double?

            public var refundType: Int32?

            public var ticketNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrAirport != nil {
                    map["arr_airport"] = self.arrAirport!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.depAirport != nil {
                    map["dep_airport"] = self.depAirport!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.outApplyId != nil {
                    map["out_apply_id"] = self.outApplyId!
                }
                if self.refundOrderId != nil {
                    map["refund_order_id"] = self.refundOrderId!
                }
                if self.refundReason != nil {
                    map["refund_reason"] = self.refundReason!
                }
                if self.refundTicketFee != nil {
                    map["refund_ticket_fee"] = self.refundTicketFee!
                }
                if self.refundType != nil {
                    map["refund_type"] = self.refundType!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_airport") && dict["arr_airport"] != nil {
                    self.arrAirport = dict["arr_airport"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("dep_airport") && dict["dep_airport"] != nil {
                    self.depAirport = dict["dep_airport"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
                    self.outApplyId = dict["out_apply_id"] as! String
                }
                if dict.keys.contains("refund_order_id") && dict["refund_order_id"] != nil {
                    self.refundOrderId = dict["refund_order_id"] as! Int64
                }
                if dict.keys.contains("refund_reason") && dict["refund_reason"] != nil {
                    self.refundReason = dict["refund_reason"] as! String
                }
                if dict.keys.contains("refund_ticket_fee") && dict["refund_ticket_fee"] != nil {
                    self.refundTicketFee = dict["refund_ticket_fee"] as! Double
                }
                if dict.keys.contains("refund_type") && dict["refund_type"] != nil {
                    self.refundType = dict["refund_type"] as! Int32
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
            }
        }
        public class FlightTicketInfoList : Tea.TeaModel {
            public var buildPrice: Double?

            public var changed: Bool?

            public var discount: Int32?

            public var flightNo: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var oilPrice: Double?

            public var payType: Int32?

            public var settlePrice: Double?

            public var ticketNo: String?

            public var ticketPrice: Double?

            public var ticketStatus: String?

            public var ticketStatusCode: Int32?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.buildPrice != nil {
                    map["build_price"] = self.buildPrice!
                }
                if self.changed != nil {
                    map["changed"] = self.changed!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.oilPrice != nil {
                    map["oil_price"] = self.oilPrice!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.settlePrice != nil {
                    map["settle_price"] = self.settlePrice!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.ticketStatus != nil {
                    map["ticket_status"] = self.ticketStatus!
                }
                if self.ticketStatusCode != nil {
                    map["ticket_status_code"] = self.ticketStatusCode!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("build_price") && dict["build_price"] != nil {
                    self.buildPrice = dict["build_price"] as! Double
                }
                if dict.keys.contains("changed") && dict["changed"] != nil {
                    self.changed = dict["changed"] as! Bool
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                    self.oilPrice = dict["oil_price"] as! Double
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("settle_price") && dict["settle_price"] != nil {
                    self.settlePrice = dict["settle_price"] as! Double
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Double
                }
                if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                    self.ticketStatus = dict["ticket_status"] as! String
                }
                if dict.keys.contains("ticket_status_code") && dict["ticket_status_code"] != nil {
                    self.ticketStatusCode = dict["ticket_status_code"] as! Int32
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class InsuranceInfoList : Tea.TeaModel {
            public var amount: Double?

            public var insuranceNo: String?

            public var status: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amount != nil {
                    map["amount"] = self.amount!
                }
                if self.insuranceNo != nil {
                    map["insurance_no"] = self.insuranceNo!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("amount") && dict["amount"] != nil {
                    self.amount = dict["amount"] as! Double
                }
                if dict.keys.contains("insurance_no") && dict["insurance_no"] != nil {
                    self.insuranceNo = dict["insurance_no"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! String
                }
            }
        }
        public class InvoiceInfo : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class OrderBaseInfo : Tea.TeaModel {
            public var applyId: String?

            public var btripTitle: String?

            public var contactName: String?

            public var corpId: String?

            public var corpName: String?

            public var departId: String?

            public var departName: String?

            public var exceedApplyId: String?

            public var exceedThirdPartApplyId: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var itineraryId: String?

            public var orderId: Int64?

            public var orderStatus: Int32?

            public var thirdpartApplyId: String?

            public var thirdpartCorpId: String?

            public var thirdpartItineraryId: String?

            public var tripType: Int32?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.btripTitle != nil {
                    map["btrip_title"] = self.btripTitle!
                }
                if self.contactName != nil {
                    map["contact_name"] = self.contactName!
                }
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.departId != nil {
                    map["depart_id"] = self.departId!
                }
                if self.departName != nil {
                    map["depart_name"] = self.departName!
                }
                if self.exceedApplyId != nil {
                    map["exceed_apply_id"] = self.exceedApplyId!
                }
                if self.exceedThirdPartApplyId != nil {
                    map["exceed_third_part_apply_id"] = self.exceedThirdPartApplyId!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderStatus != nil {
                    map["order_status"] = self.orderStatus!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.thirdpartCorpId != nil {
                    map["thirdpart_corp_id"] = self.thirdpartCorpId!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                    self.btripTitle = dict["btrip_title"] as! String
                }
                if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                    self.contactName = dict["contact_name"] as! String
                }
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                    self.departId = dict["depart_id"] as! String
                }
                if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                    self.departName = dict["depart_name"] as! String
                }
                if dict.keys.contains("exceed_apply_id") && dict["exceed_apply_id"] != nil {
                    self.exceedApplyId = dict["exceed_apply_id"] as! String
                }
                if dict.keys.contains("exceed_third_part_apply_id") && dict["exceed_third_part_apply_id"] != nil {
                    self.exceedThirdPartApplyId = dict["exceed_third_part_apply_id"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("order_status") && dict["order_status"] != nil {
                    self.orderStatus = dict["order_status"] as! Int32
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("thirdpart_corp_id") && dict["thirdpart_corp_id"] != nil {
                    self.thirdpartCorpId = dict["thirdpart_corp_id"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! Int32
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class PassengerInfoList : Tea.TeaModel {
            public var costCenterId: Int64?

            public var costCenterName: String?

            public var costCenterNumber: String?

            public var projectCode: String?

            public var projectId: Int64?

            public var projectTitle: String?

            public var thirdpartProjectId: String?

            public var userId: String?

            public var userName: String?

            public var userType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.costCenterId != nil {
                    map["cost_center_id"] = self.costCenterId!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectId != nil {
                    map["project_id"] = self.projectId!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartProjectId != nil {
                    map["thirdpart_project_id"] = self.thirdpartProjectId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                if self.userType != nil {
                    map["user_type"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                    self.costCenterId = dict["cost_center_id"] as! Int64
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_id") && dict["project_id"] != nil {
                    self.projectId = dict["project_id"] as! Int64
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_project_id") && dict["thirdpart_project_id"] != nil {
                    self.thirdpartProjectId = dict["thirdpart_project_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
                if dict.keys.contains("user_type") && dict["user_type"] != nil {
                    self.userType = dict["user_type"] as! Int32
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var gmtCreate: String?

            public var passengerName: String?

            public var payType: Int32?

            public var price: Double?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public var flightChangeTicketInfoList: [FlightOrderQueryResponseBody.Module.FlightChangeTicketInfoList]?

        public var flightInfoList: [FlightOrderQueryResponseBody.Module.FlightInfoList]?

        public var flightRefundTicketInfoList: [FlightOrderQueryResponseBody.Module.FlightRefundTicketInfoList]?

        public var flightTicketInfoList: [FlightOrderQueryResponseBody.Module.FlightTicketInfoList]?

        public var insuranceInfoList: [FlightOrderQueryResponseBody.Module.InsuranceInfoList]?

        public var invoiceInfo: FlightOrderQueryResponseBody.Module.InvoiceInfo?

        public var orderBaseInfo: FlightOrderQueryResponseBody.Module.OrderBaseInfo?

        public var passengerInfoList: [FlightOrderQueryResponseBody.Module.PassengerInfoList]?

        public var priceInfoList: [FlightOrderQueryResponseBody.Module.PriceInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.invoiceInfo?.validate()
            try self.orderBaseInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightChangeTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightChangeTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_change_ticket_info_list"] = tmp
            }
            if self.flightInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_info_list"] = tmp
            }
            if self.flightRefundTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightRefundTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_refund_ticket_info_list"] = tmp
            }
            if self.flightTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_ticket_info_list"] = tmp
            }
            if self.insuranceInfoList != nil {
                var tmp : [Any] = []
                for k in self.insuranceInfoList! {
                    tmp.append(k.toMap())
                }
                map["insurance_info_list"] = tmp
            }
            if self.invoiceInfo != nil {
                map["invoice_info"] = self.invoiceInfo?.toMap()
            }
            if self.orderBaseInfo != nil {
                map["order_base_info"] = self.orderBaseInfo?.toMap()
            }
            if self.passengerInfoList != nil {
                var tmp : [Any] = []
                for k in self.passengerInfoList! {
                    tmp.append(k.toMap())
                }
                map["passenger_info_list"] = tmp
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_change_ticket_info_list") && dict["flight_change_ticket_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.FlightChangeTicketInfoList] = []
                for v in dict["flight_change_ticket_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.FlightChangeTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightChangeTicketInfoList = tmp
            }
            if dict.keys.contains("flight_info_list") && dict["flight_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.FlightInfoList] = []
                for v in dict["flight_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.FlightInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightInfoList = tmp
            }
            if dict.keys.contains("flight_refund_ticket_info_list") && dict["flight_refund_ticket_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.FlightRefundTicketInfoList] = []
                for v in dict["flight_refund_ticket_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.FlightRefundTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightRefundTicketInfoList = tmp
            }
            if dict.keys.contains("flight_ticket_info_list") && dict["flight_ticket_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.FlightTicketInfoList] = []
                for v in dict["flight_ticket_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.FlightTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightTicketInfoList = tmp
            }
            if dict.keys.contains("insurance_info_list") && dict["insurance_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.InsuranceInfoList] = []
                for v in dict["insurance_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.InsuranceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.insuranceInfoList = tmp
            }
            if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
                var model = FlightOrderQueryResponseBody.Module.InvoiceInfo()
                model.fromMap(dict["invoice_info"] as! [String: Any])
                self.invoiceInfo = model
            }
            if dict.keys.contains("order_base_info") && dict["order_base_info"] != nil {
                var model = FlightOrderQueryResponseBody.Module.OrderBaseInfo()
                model.fromMap(dict["order_base_info"] as! [String: Any])
                self.orderBaseInfo = model
            }
            if dict.keys.contains("passenger_info_list") && dict["passenger_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.PassengerInfoList] = []
                for v in dict["passenger_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.PassengerInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerInfoList = tmp
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [FlightOrderQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = FlightOrderQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightOrderQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightOrderQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOrderQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOrderQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOrderQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOtaItemDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightOtaItemDetailRequest : Tea.TeaModel {
    public var isvName: String?

    public var otaItemId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
    }
}

public class FlightOtaItemDetailResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class BaggageRule : Tea.TeaModel {
            public class BaggageSubItems : Tea.TeaModel {
                public class BaggageSubContentVisualizes : Tea.TeaModel {
                    public class Description_ : Tea.TeaModel {
                        public var desc: String?

                        public var icon: String?

                        public var image: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.desc != nil {
                                map["desc"] = self.desc!
                            }
                            if self.icon != nil {
                                map["icon"] = self.icon!
                            }
                            if self.image != nil {
                                map["image"] = self.image!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("desc") && dict["desc"] != nil {
                                self.desc = dict["desc"] as! String
                            }
                            if dict.keys.contains("icon") && dict["icon"] != nil {
                                self.icon = dict["icon"] as! String
                            }
                            if dict.keys.contains("image") && dict["image"] != nil {
                                self.image = dict["image"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class ImageDO : Tea.TeaModel {
                        public var image: String?

                        public var largest: String?

                        public var middle: String?

                        public var smallest: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.image != nil {
                                map["image"] = self.image!
                            }
                            if self.largest != nil {
                                map["largest"] = self.largest!
                            }
                            if self.middle != nil {
                                map["middle"] = self.middle!
                            }
                            if self.smallest != nil {
                                map["smallest"] = self.smallest!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("image") && dict["image"] != nil {
                                self.image = dict["image"] as! String
                            }
                            if dict.keys.contains("largest") && dict["largest"] != nil {
                                self.largest = dict["largest"] as! String
                            }
                            if dict.keys.contains("middle") && dict["middle"] != nil {
                                self.middle = dict["middle"] as! String
                            }
                            if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                self.smallest = dict["smallest"] as! String
                            }
                        }
                    }
                    public var baggageDesc: [String]?

                    public var baggageSubContentType: Int32?

                    public var description_: FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                    public var imageDO: FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                    public var isHighlight: Bool?

                    public var subTitle: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.description_?.validate()
                        try self.imageDO?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageDesc != nil {
                            map["baggage_desc"] = self.baggageDesc!
                        }
                        if self.baggageSubContentType != nil {
                            map["baggage_sub_content_type"] = self.baggageSubContentType!
                        }
                        if self.description_ != nil {
                            map["description"] = self.description_?.toMap()
                        }
                        if self.imageDO != nil {
                            map["image_d_o"] = self.imageDO?.toMap()
                        }
                        if self.isHighlight != nil {
                            map["is_highlight"] = self.isHighlight!
                        }
                        if self.subTitle != nil {
                            map["sub_title"] = self.subTitle!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                            self.baggageDesc = dict["baggage_desc"] as! [String]
                        }
                        if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                            self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                        }
                        if dict.keys.contains("description") && dict["description"] != nil {
                            var model = FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                            model.fromMap(dict["description"] as! [String: Any])
                            self.description_ = model
                        }
                        if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                            var model = FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                            model.fromMap(dict["image_d_o"] as! [String: Any])
                            self.imageDO = model
                        }
                        if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                            self.isHighlight = dict["is_highlight"] as! Bool
                        }
                        if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                            self.subTitle = dict["sub_title"] as! String
                        }
                    }
                }
                public var baggageSubContentVisualizes: [FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes]?

                public var extraContentVisualizes: [Any]?

                public var isStruct: Bool?

                public var ptc: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.baggageSubContentVisualizes != nil {
                        var tmp : [Any] = []
                        for k in self.baggageSubContentVisualizes! {
                            tmp.append(k.toMap())
                        }
                        map["baggage_sub_content_visualizes"] = tmp
                    }
                    if self.extraContentVisualizes != nil {
                        map["extra_content_visualizes"] = self.extraContentVisualizes!
                    }
                    if self.isStruct != nil {
                        map["is_struct"] = self.isStruct!
                    }
                    if self.ptc != nil {
                        map["ptc"] = self.ptc!
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                        var tmp : [FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes] = []
                        for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                            var model = FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems.BaggageSubContentVisualizes()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.baggageSubContentVisualizes = tmp
                    }
                    if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                        self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                    }
                    if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                        self.isStruct = dict["is_struct"] as! Bool
                    }
                    if dict.keys.contains("ptc") && dict["ptc"] != nil {
                        self.ptc = dict["ptc"] as! String
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public class Tips : Tea.TeaModel {
                public var logo: String?

                public var tipsDesc: String?

                public var tipsImage: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.logo != nil {
                        map["logo"] = self.logo!
                    }
                    if self.tipsDesc != nil {
                        map["tips_desc"] = self.tipsDesc!
                    }
                    if self.tipsImage != nil {
                        map["tips_image"] = self.tipsImage!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("logo") && dict["logo"] != nil {
                        self.logo = dict["logo"] as! String
                    }
                    if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                        self.tipsDesc = dict["tips_desc"] as! String
                    }
                    if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                        self.tipsImage = dict["tips_image"] as! String
                    }
                }
            }
            public var baggageSubItems: [FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems]?

            public var index: Int32?

            public var tableHead: String?

            public var tips: FlightOtaItemDetailResponseBody.Module.BaggageRule.Tips?

            public var title: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tips?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.baggageSubItems != nil {
                    var tmp : [Any] = []
                    for k in self.baggageSubItems! {
                        tmp.append(k.toMap())
                    }
                    map["baggage_sub_items"] = tmp
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.tableHead != nil {
                    map["table_head"] = self.tableHead!
                }
                if self.tips != nil {
                    map["tips"] = self.tips?.toMap()
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                    var tmp : [FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems] = []
                    for v in dict["baggage_sub_items"] as! [Any] {
                        var model = FlightOtaItemDetailResponseBody.Module.BaggageRule.BaggageSubItems()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.baggageSubItems = tmp
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! Int32
                }
                if dict.keys.contains("table_head") && dict["table_head"] != nil {
                    self.tableHead = dict["table_head"] as! String
                }
                if dict.keys.contains("tips") && dict["tips"] != nil {
                    var model = FlightOtaItemDetailResponseBody.Module.BaggageRule.Tips()
                    model.fromMap(dict["tips"] as! [String: Any])
                    self.tips = model
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class ChangeRule : Tea.TeaModel {
            public class ExtraContents : Tea.TeaModel {
                public var content: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("content") && dict["content"] != nil {
                        self.content = dict["content"] as! String
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public class RefundSubItems : Tea.TeaModel {
                public class RefundSubContents : Tea.TeaModel {
                    public var feeDesc: String?

                    public var feeRange: String?

                    public var style: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.feeDesc != nil {
                            map["fee_desc"] = self.feeDesc!
                        }
                        if self.feeRange != nil {
                            map["fee_range"] = self.feeRange!
                        }
                        if self.style != nil {
                            map["style"] = self.style!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                            self.feeDesc = dict["fee_desc"] as! String
                        }
                        if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                            self.feeRange = dict["fee_range"] as! String
                        }
                        if dict.keys.contains("style") && dict["style"] != nil {
                            self.style = dict["style"] as! Int32
                        }
                    }
                }
                public var isStruct: Bool?

                public var ptc: String?

                public var refundSubContents: [FlightOtaItemDetailResponseBody.Module.ChangeRule.RefundSubItems.RefundSubContents]?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.isStruct != nil {
                        map["is_struct"] = self.isStruct!
                    }
                    if self.ptc != nil {
                        map["ptc"] = self.ptc!
                    }
                    if self.refundSubContents != nil {
                        var tmp : [Any] = []
                        for k in self.refundSubContents! {
                            tmp.append(k.toMap())
                        }
                        map["refund_sub_contents"] = tmp
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                        self.isStruct = dict["is_struct"] as! Bool
                    }
                    if dict.keys.contains("ptc") && dict["ptc"] != nil {
                        self.ptc = dict["ptc"] as! String
                    }
                    if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                        var tmp : [FlightOtaItemDetailResponseBody.Module.ChangeRule.RefundSubItems.RefundSubContents] = []
                        for v in dict["refund_sub_contents"] as! [Any] {
                            var model = FlightOtaItemDetailResponseBody.Module.ChangeRule.RefundSubItems.RefundSubContents()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.refundSubContents = tmp
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public var extraContents: [FlightOtaItemDetailResponseBody.Module.ChangeRule.ExtraContents]?

            public var flightNo: String?

            public var freeBaggage: Int32?

            public var index: Int32?

            public var level: Int32?

            public var refundSubItems: [FlightOtaItemDetailResponseBody.Module.ChangeRule.RefundSubItems]?

            public var subTableHead: [String]?

            public var tableHead: String?

            public var title: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.extraContents != nil {
                    var tmp : [Any] = []
                    for k in self.extraContents! {
                        tmp.append(k.toMap())
                    }
                    map["extra_contents"] = tmp
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.freeBaggage != nil {
                    map["free_baggage"] = self.freeBaggage!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.level != nil {
                    map["level"] = self.level!
                }
                if self.refundSubItems != nil {
                    var tmp : [Any] = []
                    for k in self.refundSubItems! {
                        tmp.append(k.toMap())
                    }
                    map["refund_sub_items"] = tmp
                }
                if self.subTableHead != nil {
                    map["sub_table_head"] = self.subTableHead!
                }
                if self.tableHead != nil {
                    map["table_head"] = self.tableHead!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                    var tmp : [FlightOtaItemDetailResponseBody.Module.ChangeRule.ExtraContents] = []
                    for v in dict["extra_contents"] as! [Any] {
                        var model = FlightOtaItemDetailResponseBody.Module.ChangeRule.ExtraContents()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.extraContents = tmp
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("free_baggage") && dict["free_baggage"] != nil {
                    self.freeBaggage = dict["free_baggage"] as! Int32
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! Int32
                }
                if dict.keys.contains("level") && dict["level"] != nil {
                    self.level = dict["level"] as! Int32
                }
                if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                    var tmp : [FlightOtaItemDetailResponseBody.Module.ChangeRule.RefundSubItems] = []
                    for v in dict["refund_sub_items"] as! [Any] {
                        var model = FlightOtaItemDetailResponseBody.Module.ChangeRule.RefundSubItems()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.refundSubItems = tmp
                }
                if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                    self.subTableHead = dict["sub_table_head"] as! [String]
                }
                if dict.keys.contains("table_head") && dict["table_head"] != nil {
                    self.tableHead = dict["table_head"] as! String
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class RefundRule : Tea.TeaModel {
            public class ExtraContents : Tea.TeaModel {
                public var content: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("content") && dict["content"] != nil {
                        self.content = dict["content"] as! String
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public class RefundSubItems : Tea.TeaModel {
                public class RefundSubContents : Tea.TeaModel {
                    public var feeDesc: String?

                    public var feeRange: String?

                    public var style: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.feeDesc != nil {
                            map["fee_desc"] = self.feeDesc!
                        }
                        if self.feeRange != nil {
                            map["fee_range"] = self.feeRange!
                        }
                        if self.style != nil {
                            map["style"] = self.style!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                            self.feeDesc = dict["fee_desc"] as! String
                        }
                        if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                            self.feeRange = dict["fee_range"] as! String
                        }
                        if dict.keys.contains("style") && dict["style"] != nil {
                            self.style = dict["style"] as! Int32
                        }
                    }
                }
                public var isStruct: Bool?

                public var ptc: String?

                public var refundSubContents: [FlightOtaItemDetailResponseBody.Module.RefundRule.RefundSubItems.RefundSubContents]?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.isStruct != nil {
                        map["is_struct"] = self.isStruct!
                    }
                    if self.ptc != nil {
                        map["ptc"] = self.ptc!
                    }
                    if self.refundSubContents != nil {
                        var tmp : [Any] = []
                        for k in self.refundSubContents! {
                            tmp.append(k.toMap())
                        }
                        map["refund_sub_contents"] = tmp
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                        self.isStruct = dict["is_struct"] as! Bool
                    }
                    if dict.keys.contains("ptc") && dict["ptc"] != nil {
                        self.ptc = dict["ptc"] as! String
                    }
                    if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                        var tmp : [FlightOtaItemDetailResponseBody.Module.RefundRule.RefundSubItems.RefundSubContents] = []
                        for v in dict["refund_sub_contents"] as! [Any] {
                            var model = FlightOtaItemDetailResponseBody.Module.RefundRule.RefundSubItems.RefundSubContents()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.refundSubContents = tmp
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public var extraContents: [FlightOtaItemDetailResponseBody.Module.RefundRule.ExtraContents]?

            public var flightNo: String?

            public var freeBaggage: Int32?

            public var index: Int32?

            public var level: Int32?

            public var refundSubItems: [FlightOtaItemDetailResponseBody.Module.RefundRule.RefundSubItems]?

            public var subTableHead: [String]?

            public var tableHead: String?

            public var title: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.extraContents != nil {
                    var tmp : [Any] = []
                    for k in self.extraContents! {
                        tmp.append(k.toMap())
                    }
                    map["extra_contents"] = tmp
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.freeBaggage != nil {
                    map["free_baggage"] = self.freeBaggage!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.level != nil {
                    map["level"] = self.level!
                }
                if self.refundSubItems != nil {
                    var tmp : [Any] = []
                    for k in self.refundSubItems! {
                        tmp.append(k.toMap())
                    }
                    map["refund_sub_items"] = tmp
                }
                if self.subTableHead != nil {
                    map["sub_table_head"] = self.subTableHead!
                }
                if self.tableHead != nil {
                    map["table_head"] = self.tableHead!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                    var tmp : [FlightOtaItemDetailResponseBody.Module.RefundRule.ExtraContents] = []
                    for v in dict["extra_contents"] as! [Any] {
                        var model = FlightOtaItemDetailResponseBody.Module.RefundRule.ExtraContents()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.extraContents = tmp
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("free_baggage") && dict["free_baggage"] != nil {
                    self.freeBaggage = dict["free_baggage"] as! Int32
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! Int32
                }
                if dict.keys.contains("level") && dict["level"] != nil {
                    self.level = dict["level"] as! Int32
                }
                if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                    var tmp : [FlightOtaItemDetailResponseBody.Module.RefundRule.RefundSubItems] = []
                    for v in dict["refund_sub_items"] as! [Any] {
                        var model = FlightOtaItemDetailResponseBody.Module.RefundRule.RefundSubItems()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.refundSubItems = tmp
                }
                if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                    self.subTableHead = dict["sub_table_head"] as! [String]
                }
                if dict.keys.contains("table_head") && dict["table_head"] != nil {
                    self.tableHead = dict["table_head"] as! String
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public var baggageRule: [FlightOtaItemDetailResponseBody.Module.BaggageRule]?

        public var changeRule: [FlightOtaItemDetailResponseBody.Module.ChangeRule]?

        public var refundRule: [FlightOtaItemDetailResponseBody.Module.RefundRule]?

        public var sellPrice: Int32?

        public var sellPriceList: [Int32]?

        public var tripType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.baggageRule != nil {
                var tmp : [Any] = []
                for k in self.baggageRule! {
                    tmp.append(k.toMap())
                }
                map["baggage_rule"] = tmp
            }
            if self.changeRule != nil {
                var tmp : [Any] = []
                for k in self.changeRule! {
                    tmp.append(k.toMap())
                }
                map["change_rule"] = tmp
            }
            if self.refundRule != nil {
                var tmp : [Any] = []
                for k in self.refundRule! {
                    tmp.append(k.toMap())
                }
                map["refund_rule"] = tmp
            }
            if self.sellPrice != nil {
                map["sell_price"] = self.sellPrice!
            }
            if self.sellPriceList != nil {
                map["sell_price_list"] = self.sellPriceList!
            }
            if self.tripType != nil {
                map["trip_type"] = self.tripType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("baggage_rule") && dict["baggage_rule"] != nil {
                var tmp : [FlightOtaItemDetailResponseBody.Module.BaggageRule] = []
                for v in dict["baggage_rule"] as! [Any] {
                    var model = FlightOtaItemDetailResponseBody.Module.BaggageRule()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.baggageRule = tmp
            }
            if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                var tmp : [FlightOtaItemDetailResponseBody.Module.ChangeRule] = []
                for v in dict["change_rule"] as! [Any] {
                    var model = FlightOtaItemDetailResponseBody.Module.ChangeRule()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.changeRule = tmp
            }
            if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                var tmp : [FlightOtaItemDetailResponseBody.Module.RefundRule] = []
                for v in dict["refund_rule"] as! [Any] {
                    var model = FlightOtaItemDetailResponseBody.Module.RefundRule()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.refundRule = tmp
            }
            if dict.keys.contains("sell_price") && dict["sell_price"] != nil {
                self.sellPrice = dict["sell_price"] as! Int32
            }
            if dict.keys.contains("sell_price_list") && dict["sell_price_list"] != nil {
                self.sellPriceList = dict["sell_price_list"] as! [Int32]
            }
            if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                self.tripType = dict["trip_type"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightOtaItemDetailResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightOtaItemDetailResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOtaItemDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOtaItemDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOtaItemDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOtaSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightOtaSearchRequest : Tea.TeaModel {
    public var airlineCode: String?

    public var arrCityCode: String?

    public var cabinClass: String?

    public var carrierFlightNo: String?

    public var depCityCode: String?

    public var depDate: String?

    public var flightNo: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.airlineCode != nil {
            map["airline_code"] = self.airlineCode!
        }
        if self.arrCityCode != nil {
            map["arr_city_code"] = self.arrCityCode!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.carrierFlightNo != nil {
            map["carrier_flight_no"] = self.carrierFlightNo!
        }
        if self.depCityCode != nil {
            map["dep_city_code"] = self.depCityCode!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.flightNo != nil {
            map["flight_no"] = self.flightNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
            self.airlineCode = dict["airline_code"] as! String
        }
        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
            self.arrCityCode = dict["arr_city_code"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("carrier_flight_no") && dict["carrier_flight_no"] != nil {
            self.carrierFlightNo = dict["carrier_flight_no"] as! String
        }
        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
            self.depCityCode = dict["dep_city_code"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
            self.flightNo = dict["flight_no"] as! String
        }
    }
}

public class FlightOtaSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineCode: String?

                public var airlineName: String?

                public var airlineSimpleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineName != nil {
                        map["airline_name"] = self.airlineName!
                    }
                    if self.airlineSimpleName != nil {
                        map["airline_simple_name"] = self.airlineSimpleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                        self.airlineName = dict["airline_name"] as! String
                    }
                    if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                        self.airlineSimpleName = dict["airline_simple_name"] as! String
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class CabinInfoList : Tea.TeaModel {
                public class FlightRuleList : Tea.TeaModel {
                    public class BaggageItem : Tea.TeaModel {
                        public class BaggageSubItems : Tea.TeaModel {
                            public class BaggageSubContentVisualizes : Tea.TeaModel {
                                public class Description_ : Tea.TeaModel {
                                    public var desc: String?

                                    public var icon: String?

                                    public var image: String?

                                    public var title: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.desc != nil {
                                            map["desc"] = self.desc!
                                        }
                                        if self.icon != nil {
                                            map["icon"] = self.icon!
                                        }
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.title != nil {
                                            map["title"] = self.title!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("desc") && dict["desc"] != nil {
                                            self.desc = dict["desc"] as! String
                                        }
                                        if dict.keys.contains("icon") && dict["icon"] != nil {
                                            self.icon = dict["icon"] as! String
                                        }
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("title") && dict["title"] != nil {
                                            self.title = dict["title"] as! String
                                        }
                                    }
                                }
                                public class ImageDO : Tea.TeaModel {
                                    public var image: String?

                                    public var largest: String?

                                    public var middle: String?

                                    public var smallest: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.largest != nil {
                                            map["largest"] = self.largest!
                                        }
                                        if self.middle != nil {
                                            map["middle"] = self.middle!
                                        }
                                        if self.smallest != nil {
                                            map["smallest"] = self.smallest!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("largest") && dict["largest"] != nil {
                                            self.largest = dict["largest"] as! String
                                        }
                                        if dict.keys.contains("middle") && dict["middle"] != nil {
                                            self.middle = dict["middle"] as! String
                                        }
                                        if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                            self.smallest = dict["smallest"] as! String
                                        }
                                    }
                                }
                                public var baggageDesc: [String]?

                                public var baggageSubContentType: Int32?

                                public var description_: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                                public var imageDO: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                                public var isHighlight: Bool?

                                public var subTitle: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.description_?.validate()
                                    try self.imageDO?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.baggageDesc != nil {
                                        map["baggage_desc"] = self.baggageDesc!
                                    }
                                    if self.baggageSubContentType != nil {
                                        map["baggage_sub_content_type"] = self.baggageSubContentType!
                                    }
                                    if self.description_ != nil {
                                        map["description"] = self.description_?.toMap()
                                    }
                                    if self.imageDO != nil {
                                        map["image_d_o"] = self.imageDO?.toMap()
                                    }
                                    if self.isHighlight != nil {
                                        map["is_highlight"] = self.isHighlight!
                                    }
                                    if self.subTitle != nil {
                                        map["sub_title"] = self.subTitle!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                        self.baggageDesc = dict["baggage_desc"] as! [String]
                                    }
                                    if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                        self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                    }
                                    if dict.keys.contains("description") && dict["description"] != nil {
                                        var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                        model.fromMap(dict["description"] as! [String: Any])
                                        self.description_ = model
                                    }
                                    if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                                        var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                        model.fromMap(dict["image_d_o"] as! [String: Any])
                                        self.imageDO = model
                                    }
                                    if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                        self.isHighlight = dict["is_highlight"] as! Bool
                                    }
                                    if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                        self.subTitle = dict["sub_title"] as! String
                                    }
                                }
                            }
                            public var baggageSubContentVisualizes: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes]?

                            public var extraContentVisualizes: [Any]?

                            public var isStruct: Bool?

                            public var ptc: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.baggageSubContentVisualizes != nil {
                                    var tmp : [Any] = []
                                    for k in self.baggageSubContentVisualizes! {
                                        tmp.append(k.toMap())
                                    }
                                    map["baggage_sub_content_visualizes"] = tmp
                                }
                                if self.extraContentVisualizes != nil {
                                    map["extra_content_visualizes"] = self.extraContentVisualizes!
                                }
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                    var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes] = []
                                    for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                        var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.baggageSubContentVisualizes = tmp
                                }
                                if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                                    self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                                }
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class Tips : Tea.TeaModel {
                            public var logo: String?

                            public var tipsDesc: String?

                            public var tipsImage: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.logo != nil {
                                    map["logo"] = self.logo!
                                }
                                if self.tipsDesc != nil {
                                    map["tips_desc"] = self.tipsDesc!
                                }
                                if self.tipsImage != nil {
                                    map["tips_image"] = self.tipsImage!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("logo") && dict["logo"] != nil {
                                    self.logo = dict["logo"] as! String
                                }
                                if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                    self.tipsDesc = dict["tips_desc"] as! String
                                }
                                if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                    self.tipsImage = dict["tips_image"] as! String
                                }
                            }
                        }
                        public var baggageSubItems: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems]?

                        public var index: Int32?

                        public var tableHead: String?

                        public var tips: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.Tips?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.tips?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_items"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.tips != nil {
                                map["tips"] = self.tips?.toMap()
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems] = []
                                for v in dict["baggage_sub_items"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubItems = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("tips") && dict["tips"] != nil {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.Tips()
                                model.fromMap(dict["tips"] as! [String: Any])
                                self.tips = model
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class ChangeRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class ChangeRuleItem : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                }
                            }
                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems]?

                        public var subTableHead: [String]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.subTableHead != nil {
                                map["sub_table_head"] = self.subTableHead!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                                self.subTableHead = dict["sub_table_head"] as! [String]
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class RefundRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class RefundRuleItem : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                }
                            }
                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems]?

                        public var subTableHead: [String]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.subTableHead != nil {
                                map["sub_table_head"] = self.subTableHead!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                                self.subTableHead = dict["sub_table_head"] as! [String]
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class SignRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class UpgradeRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public var baggageInfo: String?

                    public var baggageItem: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem?

                    public var changeRule: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule?

                    public var changeRuleItem: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem?

                    public var extra: String?

                    public var refundRule: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule?

                    public var refundRuleItem: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem?

                    public var signRule: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule?

                    public var tuigaiqianInfo: String?

                    public var upgradeRule: FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.baggageItem?.validate()
                        try self.changeRule?.validate()
                        try self.changeRuleItem?.validate()
                        try self.refundRule?.validate()
                        try self.refundRuleItem?.validate()
                        try self.signRule?.validate()
                        try self.upgradeRule?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageInfo != nil {
                            map["baggage_info"] = self.baggageInfo!
                        }
                        if self.baggageItem != nil {
                            map["baggage_item"] = self.baggageItem?.toMap()
                        }
                        if self.changeRule != nil {
                            map["change_rule"] = self.changeRule?.toMap()
                        }
                        if self.changeRuleItem != nil {
                            map["change_rule_item"] = self.changeRuleItem?.toMap()
                        }
                        if self.extra != nil {
                            map["extra"] = self.extra!
                        }
                        if self.refundRule != nil {
                            map["refund_rule"] = self.refundRule?.toMap()
                        }
                        if self.refundRuleItem != nil {
                            map["refund_rule_item"] = self.refundRuleItem?.toMap()
                        }
                        if self.signRule != nil {
                            map["sign_rule"] = self.signRule?.toMap()
                        }
                        if self.tuigaiqianInfo != nil {
                            map["tuigaiqian_info"] = self.tuigaiqianInfo!
                        }
                        if self.upgradeRule != nil {
                            map["upgrade_rule"] = self.upgradeRule?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_info") && dict["baggage_info"] != nil {
                            self.baggageInfo = dict["baggage_info"] as! String
                        }
                        if dict.keys.contains("baggage_item") && dict["baggage_item"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem()
                            model.fromMap(dict["baggage_item"] as! [String: Any])
                            self.baggageItem = model
                        }
                        if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule()
                            model.fromMap(dict["change_rule"] as! [String: Any])
                            self.changeRule = model
                        }
                        if dict.keys.contains("change_rule_item") && dict["change_rule_item"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem()
                            model.fromMap(dict["change_rule_item"] as! [String: Any])
                            self.changeRuleItem = model
                        }
                        if dict.keys.contains("extra") && dict["extra"] != nil {
                            self.extra = dict["extra"] as! String
                        }
                        if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule()
                            model.fromMap(dict["refund_rule"] as! [String: Any])
                            self.refundRule = model
                        }
                        if dict.keys.contains("refund_rule_item") && dict["refund_rule_item"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem()
                            model.fromMap(dict["refund_rule_item"] as! [String: Any])
                            self.refundRuleItem = model
                        }
                        if dict.keys.contains("sign_rule") && dict["sign_rule"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule()
                            model.fromMap(dict["sign_rule"] as! [String: Any])
                            self.signRule = model
                        }
                        if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                            self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                        }
                        if dict.keys.contains("upgrade_rule") && dict["upgrade_rule"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule()
                            model.fromMap(dict["upgrade_rule"] as! [String: Any])
                            self.upgradeRule = model
                        }
                    }
                }
                public var agentId: Int64?

                public var basicCabinPrice: Int32?

                public var buildPrice: Int32?

                public var cabin: String?

                public var cabinClass: String?

                public var cabinClassName: String?

                public var childCabin: String?

                public var className: String?

                public var classRule: String?

                public var discount: String?

                public var flightRuleList: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList]?

                public var flightRuleListStr: String?

                public var invoiceType: Int32?

                public var isProtocol: Bool?

                public var oilPrice: Int32?

                public var orderParams: String?

                public var otaItemId: String?

                public var price: Int32?

                public var productType: Int64?

                public var productTypeDesc: String?

                public var promotionPrice: String?

                public var remainedSeatCount: String?

                public var ticketPrice: Int32?

                public var totalPrice: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["agent_id"] = self.agentId!
                    }
                    if self.basicCabinPrice != nil {
                        map["basic_cabin_price"] = self.basicCabinPrice!
                    }
                    if self.buildPrice != nil {
                        map["build_price"] = self.buildPrice!
                    }
                    if self.cabin != nil {
                        map["cabin"] = self.cabin!
                    }
                    if self.cabinClass != nil {
                        map["cabin_class"] = self.cabinClass!
                    }
                    if self.cabinClassName != nil {
                        map["cabin_class_name"] = self.cabinClassName!
                    }
                    if self.childCabin != nil {
                        map["child_cabin"] = self.childCabin!
                    }
                    if self.className != nil {
                        map["class_name"] = self.className!
                    }
                    if self.classRule != nil {
                        map["class_rule"] = self.classRule!
                    }
                    if self.discount != nil {
                        map["discount"] = self.discount!
                    }
                    if self.flightRuleList != nil {
                        var tmp : [Any] = []
                        for k in self.flightRuleList! {
                            tmp.append(k.toMap())
                        }
                        map["flight_rule_list"] = tmp
                    }
                    if self.flightRuleListStr != nil {
                        map["flight_rule_list_str"] = self.flightRuleListStr!
                    }
                    if self.invoiceType != nil {
                        map["invoice_type"] = self.invoiceType!
                    }
                    if self.isProtocol != nil {
                        map["is_protocol"] = self.isProtocol!
                    }
                    if self.oilPrice != nil {
                        map["oil_price"] = self.oilPrice!
                    }
                    if self.orderParams != nil {
                        map["order_params"] = self.orderParams!
                    }
                    if self.otaItemId != nil {
                        map["ota_item_id"] = self.otaItemId!
                    }
                    if self.price != nil {
                        map["price"] = self.price!
                    }
                    if self.productType != nil {
                        map["product_type"] = self.productType!
                    }
                    if self.productTypeDesc != nil {
                        map["product_type_desc"] = self.productTypeDesc!
                    }
                    if self.promotionPrice != nil {
                        map["promotion_price"] = self.promotionPrice!
                    }
                    if self.remainedSeatCount != nil {
                        map["remained_seat_count"] = self.remainedSeatCount!
                    }
                    if self.ticketPrice != nil {
                        map["ticket_price"] = self.ticketPrice!
                    }
                    if self.totalPrice != nil {
                        map["total_price"] = self.totalPrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("agent_id") && dict["agent_id"] != nil {
                        self.agentId = dict["agent_id"] as! Int64
                    }
                    if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                        self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
                    }
                    if dict.keys.contains("build_price") && dict["build_price"] != nil {
                        self.buildPrice = dict["build_price"] as! Int32
                    }
                    if dict.keys.contains("cabin") && dict["cabin"] != nil {
                        self.cabin = dict["cabin"] as! String
                    }
                    if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                        self.cabinClass = dict["cabin_class"] as! String
                    }
                    if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                        self.cabinClassName = dict["cabin_class_name"] as! String
                    }
                    if dict.keys.contains("child_cabin") && dict["child_cabin"] != nil {
                        self.childCabin = dict["child_cabin"] as! String
                    }
                    if dict.keys.contains("class_name") && dict["class_name"] != nil {
                        self.className = dict["class_name"] as! String
                    }
                    if dict.keys.contains("class_rule") && dict["class_rule"] != nil {
                        self.classRule = dict["class_rule"] as! String
                    }
                    if dict.keys.contains("discount") && dict["discount"] != nil {
                        self.discount = dict["discount"] as! String
                    }
                    if dict.keys.contains("flight_rule_list") && dict["flight_rule_list"] != nil {
                        var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList] = []
                        for v in dict["flight_rule_list"] as! [Any] {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList.FlightRuleList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.flightRuleList = tmp
                    }
                    if dict.keys.contains("flight_rule_list_str") && dict["flight_rule_list_str"] != nil {
                        self.flightRuleListStr = dict["flight_rule_list_str"] as! String
                    }
                    if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                        self.invoiceType = dict["invoice_type"] as! Int32
                    }
                    if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                        self.isProtocol = dict["is_protocol"] as! Bool
                    }
                    if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                        self.oilPrice = dict["oil_price"] as! Int32
                    }
                    if dict.keys.contains("order_params") && dict["order_params"] != nil {
                        self.orderParams = dict["order_params"] as! String
                    }
                    if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
                        self.otaItemId = dict["ota_item_id"] as! String
                    }
                    if dict.keys.contains("price") && dict["price"] != nil {
                        self.price = dict["price"] as! Int32
                    }
                    if dict.keys.contains("product_type") && dict["product_type"] != nil {
                        self.productType = dict["product_type"] as! Int64
                    }
                    if dict.keys.contains("product_type_desc") && dict["product_type_desc"] != nil {
                        self.productTypeDesc = dict["product_type_desc"] as! String
                    }
                    if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                        self.promotionPrice = dict["promotion_price"] as! String
                    }
                    if dict.keys.contains("remained_seat_count") && dict["remained_seat_count"] != nil {
                        self.remainedSeatCount = dict["remained_seat_count"] as! String
                    }
                    if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                        self.ticketPrice = dict["ticket_price"] as! Int32
                    }
                    if dict.keys.contains("total_price") && dict["total_price"] != nil {
                        self.totalPrice = dict["total_price"] as! Int32
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class FlightRuleList : Tea.TeaModel {
                public class BaggageItem : Tea.TeaModel {
                    public class BaggageSubItems : Tea.TeaModel {
                        public class BaggageSubContentVisualizes : Tea.TeaModel {
                            public class Description_ : Tea.TeaModel {
                                public var desc: String?

                                public var icon: String?

                                public var image: String?

                                public var title: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.desc != nil {
                                        map["desc"] = self.desc!
                                    }
                                    if self.icon != nil {
                                        map["icon"] = self.icon!
                                    }
                                    if self.image != nil {
                                        map["image"] = self.image!
                                    }
                                    if self.title != nil {
                                        map["title"] = self.title!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("desc") && dict["desc"] != nil {
                                        self.desc = dict["desc"] as! String
                                    }
                                    if dict.keys.contains("icon") && dict["icon"] != nil {
                                        self.icon = dict["icon"] as! String
                                    }
                                    if dict.keys.contains("image") && dict["image"] != nil {
                                        self.image = dict["image"] as! String
                                    }
                                    if dict.keys.contains("title") && dict["title"] != nil {
                                        self.title = dict["title"] as! String
                                    }
                                }
                            }
                            public class ImageDO : Tea.TeaModel {
                                public var image: String?

                                public var largest: String?

                                public var middle: String?

                                public var smallest: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.image != nil {
                                        map["image"] = self.image!
                                    }
                                    if self.largest != nil {
                                        map["largest"] = self.largest!
                                    }
                                    if self.middle != nil {
                                        map["middle"] = self.middle!
                                    }
                                    if self.smallest != nil {
                                        map["smallest"] = self.smallest!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("image") && dict["image"] != nil {
                                        self.image = dict["image"] as! String
                                    }
                                    if dict.keys.contains("largest") && dict["largest"] != nil {
                                        self.largest = dict["largest"] as! String
                                    }
                                    if dict.keys.contains("middle") && dict["middle"] != nil {
                                        self.middle = dict["middle"] as! String
                                    }
                                    if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                        self.smallest = dict["smallest"] as! String
                                    }
                                }
                            }
                            public var baggageDesc: [String]?

                            public var baggageSubContentType: Int32?

                            public var description_: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                            public var imageDO: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                            public var isHighlight: Bool?

                            public var subTitle: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.description_?.validate()
                                try self.imageDO?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.baggageDesc != nil {
                                    map["baggage_desc"] = self.baggageDesc!
                                }
                                if self.baggageSubContentType != nil {
                                    map["baggage_sub_content_type"] = self.baggageSubContentType!
                                }
                                if self.description_ != nil {
                                    map["description"] = self.description_?.toMap()
                                }
                                if self.imageDO != nil {
                                    map["image_d_o"] = self.imageDO?.toMap()
                                }
                                if self.isHighlight != nil {
                                    map["is_highlight"] = self.isHighlight!
                                }
                                if self.subTitle != nil {
                                    map["sub_title"] = self.subTitle!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                    self.baggageDesc = dict["baggage_desc"] as! [String]
                                }
                                if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                    self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                }
                                if dict.keys.contains("description") && dict["description"] != nil {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                    model.fromMap(dict["description"] as! [String: Any])
                                    self.description_ = model
                                }
                                if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                    model.fromMap(dict["image_d_o"] as! [String: Any])
                                    self.imageDO = model
                                }
                                if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                    self.isHighlight = dict["is_highlight"] as! Bool
                                }
                                if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                    self.subTitle = dict["sub_title"] as! String
                                }
                            }
                        }
                        public var baggageSubContentVisualizes: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes]?

                        public var extraContentVisualizes: [Any]?

                        public var isStruct: Bool?

                        public var ptc: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubContentVisualizes != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubContentVisualizes! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_content_visualizes"] = tmp
                            }
                            if self.extraContentVisualizes != nil {
                                map["extra_content_visualizes"] = self.extraContentVisualizes!
                            }
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes] = []
                                for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubContentVisualizes = tmp
                            }
                            if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                                self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                            }
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class Tips : Tea.TeaModel {
                        public var logo: String?

                        public var tipsDesc: String?

                        public var tipsImage: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.logo != nil {
                                map["logo"] = self.logo!
                            }
                            if self.tipsDesc != nil {
                                map["tips_desc"] = self.tipsDesc!
                            }
                            if self.tipsImage != nil {
                                map["tips_image"] = self.tipsImage!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("logo") && dict["logo"] != nil {
                                self.logo = dict["logo"] as! String
                            }
                            if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                self.tipsDesc = dict["tips_desc"] as! String
                            }
                            if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                self.tipsImage = dict["tips_image"] as! String
                            }
                        }
                    }
                    public var baggageSubItems: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems]?

                    public var index: Int32?

                    public var tableHead: String?

                    public var tips: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.Tips?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.tips?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.baggageSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["baggage_sub_items"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.tips != nil {
                            map["tips"] = self.tips?.toMap()
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems] = []
                            for v in dict["baggage_sub_items"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.baggageSubItems = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("tips") && dict["tips"] != nil {
                            var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem.Tips()
                            model.fromMap(dict["tips"] as! [String: Any])
                            self.tips = model
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class ChangeRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class ChangeRuleItem : Tea.TeaModel {
                    public class ExtraContents : Tea.TeaModel {
                        public var content: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class RefundSubItems : Tea.TeaModel {
                        public class RefundSubContents : Tea.TeaModel {
                            public var feeDesc: String?

                            public var feeRange: String?

                            public var style: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.feeDesc != nil {
                                    map["fee_desc"] = self.feeDesc!
                                }
                                if self.feeRange != nil {
                                    map["fee_range"] = self.feeRange!
                                }
                                if self.style != nil {
                                    map["style"] = self.style!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                    self.feeDesc = dict["fee_desc"] as! String
                                }
                                if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                    self.feeRange = dict["fee_range"] as! String
                                }
                                if dict.keys.contains("style") && dict["style"] != nil {
                                    self.style = dict["style"] as! Int32
                                }
                            }
                        }
                        public var isStruct: Bool?

                        public var ptc: String?

                        public var refundSubContents: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents]?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.refundSubContents != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubContents! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_contents"] = tmp
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents] = []
                                for v in dict["refund_sub_contents"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubContents = tmp
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var extraContents: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents]?

                    public var index: Int32?

                    public var refundSubItems: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems]?

                    public var subTableHead: [String]?

                    public var tableHead: String?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extraContents != nil {
                            var tmp : [Any] = []
                            for k in self.extraContents! {
                                tmp.append(k.toMap())
                            }
                            map["extra_contents"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.refundSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.refundSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["refund_sub_items"] = tmp
                        }
                        if self.subTableHead != nil {
                            map["sub_table_head"] = self.subTableHead!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents] = []
                            for v in dict["extra_contents"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.extraContents = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems] = []
                            for v in dict["refund_sub_items"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundSubItems = tmp
                        }
                        if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                            self.subTableHead = dict["sub_table_head"] as! [String]
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class RefundRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class RefundRuleItem : Tea.TeaModel {
                    public class ExtraContents : Tea.TeaModel {
                        public var content: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class RefundSubItems : Tea.TeaModel {
                        public class RefundSubContents : Tea.TeaModel {
                            public var feeDesc: String?

                            public var feeRange: String?

                            public var style: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.feeDesc != nil {
                                    map["fee_desc"] = self.feeDesc!
                                }
                                if self.feeRange != nil {
                                    map["fee_range"] = self.feeRange!
                                }
                                if self.style != nil {
                                    map["style"] = self.style!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                    self.feeDesc = dict["fee_desc"] as! String
                                }
                                if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                    self.feeRange = dict["fee_range"] as! String
                                }
                                if dict.keys.contains("style") && dict["style"] != nil {
                                    self.style = dict["style"] as! Int32
                                }
                            }
                        }
                        public var isStruct: Bool?

                        public var ptc: String?

                        public var refundSubContents: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents]?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.refundSubContents != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubContents! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_contents"] = tmp
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents] = []
                                for v in dict["refund_sub_contents"] as! [Any] {
                                    var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubContents = tmp
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var extraContents: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents]?

                    public var index: Int32?

                    public var refundSubItems: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems]?

                    public var subTableHead: [String]?

                    public var tableHead: String?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extraContents != nil {
                            var tmp : [Any] = []
                            for k in self.extraContents! {
                                tmp.append(k.toMap())
                            }
                            map["extra_contents"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.refundSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.refundSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["refund_sub_items"] = tmp
                        }
                        if self.subTableHead != nil {
                            map["sub_table_head"] = self.subTableHead!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents] = []
                            for v in dict["extra_contents"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.extraContents = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems] = []
                            for v in dict["refund_sub_items"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundSubItems = tmp
                        }
                        if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                            self.subTableHead = dict["sub_table_head"] as! [String]
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class SignRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.SignRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.SignRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.SignRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class UpgradeRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public var baggageInfo: String?

                public var baggageItem: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem?

                public var changeRule: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule?

                public var changeRuleItem: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem?

                public var extra: String?

                public var refundRule: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule?

                public var refundRuleItem: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem?

                public var signRule: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.SignRule?

                public var tuigaiqianInfo: String?

                public var upgradeRule: FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.baggageItem?.validate()
                    try self.changeRule?.validate()
                    try self.changeRuleItem?.validate()
                    try self.refundRule?.validate()
                    try self.refundRuleItem?.validate()
                    try self.signRule?.validate()
                    try self.upgradeRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.baggageInfo != nil {
                        map["baggage_info"] = self.baggageInfo!
                    }
                    if self.baggageItem != nil {
                        map["baggage_item"] = self.baggageItem?.toMap()
                    }
                    if self.changeRule != nil {
                        map["change_rule"] = self.changeRule?.toMap()
                    }
                    if self.changeRuleItem != nil {
                        map["change_rule_item"] = self.changeRuleItem?.toMap()
                    }
                    if self.extra != nil {
                        map["extra"] = self.extra!
                    }
                    if self.refundRule != nil {
                        map["refund_rule"] = self.refundRule?.toMap()
                    }
                    if self.refundRuleItem != nil {
                        map["refund_rule_item"] = self.refundRuleItem?.toMap()
                    }
                    if self.signRule != nil {
                        map["sign_rule"] = self.signRule?.toMap()
                    }
                    if self.tuigaiqianInfo != nil {
                        map["tuigaiqian_info"] = self.tuigaiqianInfo!
                    }
                    if self.upgradeRule != nil {
                        map["upgrade_rule"] = self.upgradeRule?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("baggage_info") && dict["baggage_info"] != nil {
                        self.baggageInfo = dict["baggage_info"] as! String
                    }
                    if dict.keys.contains("baggage_item") && dict["baggage_item"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.BaggageItem()
                        model.fromMap(dict["baggage_item"] as! [String: Any])
                        self.baggageItem = model
                    }
                    if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRule()
                        model.fromMap(dict["change_rule"] as! [String: Any])
                        self.changeRule = model
                    }
                    if dict.keys.contains("change_rule_item") && dict["change_rule_item"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem()
                        model.fromMap(dict["change_rule_item"] as! [String: Any])
                        self.changeRuleItem = model
                    }
                    if dict.keys.contains("extra") && dict["extra"] != nil {
                        self.extra = dict["extra"] as! String
                    }
                    if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRule()
                        model.fromMap(dict["refund_rule"] as! [String: Any])
                        self.refundRule = model
                    }
                    if dict.keys.contains("refund_rule_item") && dict["refund_rule_item"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem()
                        model.fromMap(dict["refund_rule_item"] as! [String: Any])
                        self.refundRuleItem = model
                    }
                    if dict.keys.contains("sign_rule") && dict["sign_rule"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.SignRule()
                        model.fromMap(dict["sign_rule"] as! [String: Any])
                        self.signRule = model
                    }
                    if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                        self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                    }
                    if dict.keys.contains("upgrade_rule") && dict["upgrade_rule"] != nil {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList.UpgradeRule()
                        model.fromMap(dict["upgrade_rule"] as! [String: Any])
                        self.upgradeRule = model
                    }
                }
            }
            public var airlineInfo: FlightOtaSearchResponseBody.Module.FlightList.AirlineInfo?

            public var arrAirportInfo: FlightOtaSearchResponseBody.Module.FlightList.ArrAirportInfo?

            public var arrDate: String?

            public var buildPrice: Int32?

            public var cabin: String?

            public var cabinClass: String?

            public var cabinInfoList: [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList]?

            public var carrierAirline: String?

            public var carrierNo: String?

            public var depAirportInfo: FlightOtaSearchResponseBody.Module.FlightList.DepAirportInfo?

            public var depCityCode: String?

            public var depDate: String?

            public var discount: Int32?

            public var flightNo: String?

            public var flightRuleList: [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList]?

            public var flightRuleListStr: String?

            public var flightSize: String?

            public var flightType: String?

            public var invoiceType: Int32?

            public var isProtocol: Bool?

            public var isShare: Bool?

            public var isStop: Bool?

            public var isTransfer: Bool?

            public var mealDesc: String?

            public var oilPrice: Int32?

            public var otaItemId: String?

            public var price: Int32?

            public var productType: Int64?

            public var productTypeDesc: String?

            public var promotionPrice: String?

            public var remainedSeatCount: String?

            public var secretParams: String?

            public var segmentNumber: String?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public var ticketPrice: Int32?

            public var totalPrice: String?

            public var tripType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.buildPrice != nil {
                    map["build_price"] = self.buildPrice!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.cabinInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["cabin_info_list"] = tmp
                }
                if self.carrierAirline != nil {
                    map["carrier_airline"] = self.carrierAirline!
                }
                if self.carrierNo != nil {
                    map["carrier_no"] = self.carrierNo!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightRuleList != nil {
                    var tmp : [Any] = []
                    for k in self.flightRuleList! {
                        tmp.append(k.toMap())
                    }
                    map["flight_rule_list"] = tmp
                }
                if self.flightRuleListStr != nil {
                    map["flight_rule_list_str"] = self.flightRuleListStr!
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.invoiceType != nil {
                    map["invoice_type"] = self.invoiceType!
                }
                if self.isProtocol != nil {
                    map["is_protocol"] = self.isProtocol!
                }
                if self.isShare != nil {
                    map["is_share"] = self.isShare!
                }
                if self.isStop != nil {
                    map["is_stop"] = self.isStop!
                }
                if self.isTransfer != nil {
                    map["is_transfer"] = self.isTransfer!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.oilPrice != nil {
                    map["oil_price"] = self.oilPrice!
                }
                if self.otaItemId != nil {
                    map["ota_item_id"] = self.otaItemId!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.productType != nil {
                    map["product_type"] = self.productType!
                }
                if self.productTypeDesc != nil {
                    map["product_type_desc"] = self.productTypeDesc!
                }
                if self.promotionPrice != nil {
                    map["promotion_price"] = self.promotionPrice!
                }
                if self.remainedSeatCount != nil {
                    map["remained_seat_count"] = self.remainedSeatCount!
                }
                if self.secretParams != nil {
                    map["secret_params"] = self.secretParams!
                }
                if self.segmentNumber != nil {
                    map["segment_number"] = self.segmentNumber!
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.totalPrice != nil {
                    map["total_price"] = self.totalPrice!
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = FlightOtaSearchResponseBody.Module.FlightList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = FlightOtaSearchResponseBody.Module.FlightList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("build_price") && dict["build_price"] != nil {
                    self.buildPrice = dict["build_price"] as! Int32
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_info_list") && dict["cabin_info_list"] != nil {
                    var tmp : [FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList] = []
                    for v in dict["cabin_info_list"] as! [Any] {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.CabinInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.cabinInfoList = tmp
                }
                if dict.keys.contains("carrier_airline") && dict["carrier_airline"] != nil {
                    self.carrierAirline = dict["carrier_airline"] as! String
                }
                if dict.keys.contains("carrier_no") && dict["carrier_no"] != nil {
                    self.carrierNo = dict["carrier_no"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = FlightOtaSearchResponseBody.Module.FlightList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_rule_list") && dict["flight_rule_list"] != nil {
                    var tmp : [FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList] = []
                    for v in dict["flight_rule_list"] as! [Any] {
                        var model = FlightOtaSearchResponseBody.Module.FlightList.FlightRuleList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightRuleList = tmp
                }
                if dict.keys.contains("flight_rule_list_str") && dict["flight_rule_list_str"] != nil {
                    self.flightRuleListStr = dict["flight_rule_list_str"] as! String
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                    self.invoiceType = dict["invoice_type"] as! Int32
                }
                if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                    self.isProtocol = dict["is_protocol"] as! Bool
                }
                if dict.keys.contains("is_share") && dict["is_share"] != nil {
                    self.isShare = dict["is_share"] as! Bool
                }
                if dict.keys.contains("is_stop") && dict["is_stop"] != nil {
                    self.isStop = dict["is_stop"] as! Bool
                }
                if dict.keys.contains("is_transfer") && dict["is_transfer"] != nil {
                    self.isTransfer = dict["is_transfer"] as! Bool
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                    self.oilPrice = dict["oil_price"] as! Int32
                }
                if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
                    self.otaItemId = dict["ota_item_id"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int32
                }
                if dict.keys.contains("product_type") && dict["product_type"] != nil {
                    self.productType = dict["product_type"] as! Int64
                }
                if dict.keys.contains("product_type_desc") && dict["product_type_desc"] != nil {
                    self.productTypeDesc = dict["product_type_desc"] as! String
                }
                if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                    self.promotionPrice = dict["promotion_price"] as! String
                }
                if dict.keys.contains("remained_seat_count") && dict["remained_seat_count"] != nil {
                    self.remainedSeatCount = dict["remained_seat_count"] as! String
                }
                if dict.keys.contains("secret_params") && dict["secret_params"] != nil {
                    self.secretParams = dict["secret_params"] as! String
                }
                if dict.keys.contains("segment_number") && dict["segment_number"] != nil {
                    self.segmentNumber = dict["segment_number"] as! String
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int32
                }
                if dict.keys.contains("total_price") && dict["total_price"] != nil {
                    self.totalPrice = dict["total_price"] as! String
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! Int32
                }
            }
        }
        public var flightList: [FlightOtaSearchResponseBody.Module.FlightList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightList != nil {
                var tmp : [Any] = []
                for k in self.flightList! {
                    tmp.append(k.toMap())
                }
                map["flight_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_list") && dict["flight_list"] != nil {
                var tmp : [FlightOtaSearchResponseBody.Module.FlightList] = []
                for v in dict["flight_list"] as! [Any] {
                    var model = FlightOtaSearchResponseBody.Module.FlightList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightOtaSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightOtaSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOtaSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOtaSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOtaSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightOtaSearchV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightOtaSearchV2Request : Tea.TeaModel {
    public class SearchJourneys : Tea.TeaModel {
        public class SelectedFlights : Tea.TeaModel {
            public var arrAirportCode: String?

            public var arrCityCode: String?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var flightTime: String?

            public var marketFlightNo: String?

            public var operateFlightNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.flightTime != nil {
                    map["flight_time"] = self.flightTime!
                }
                if self.marketFlightNo != nil {
                    map["market_flight_no"] = self.marketFlightNo!
                }
                if self.operateFlightNo != nil {
                    map["operate_flight_no"] = self.operateFlightNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("flight_time") && dict["flight_time"] != nil {
                    self.flightTime = dict["flight_time"] as! String
                }
                if dict.keys.contains("market_flight_no") && dict["market_flight_no"] != nil {
                    self.marketFlightNo = dict["market_flight_no"] as! String
                }
                if dict.keys.contains("operate_flight_no") && dict["operate_flight_no"] != nil {
                    self.operateFlightNo = dict["operate_flight_no"] as! String
                }
            }
        }
        public var arrCityCode: String?

        public var depCityCode: String?

        public var depDate: String?

        public var selectedFlights: [FlightOtaSearchV2Request.SearchJourneys.SelectedFlights]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.selectedFlights != nil {
                var tmp : [Any] = []
                for k in self.selectedFlights! {
                    tmp.append(k.toMap())
                }
                map["selected_flights"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("selected_flights") && dict["selected_flights"] != nil {
                var tmp : [FlightOtaSearchV2Request.SearchJourneys.SelectedFlights] = []
                for v in dict["selected_flights"] as! [Any] {
                    var model = FlightOtaSearchV2Request.SearchJourneys.SelectedFlights()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.selectedFlights = tmp
            }
        }
    }
    public var cabinTypeList: [Int32]?

    public var directOnly: Bool?

    public var isvName: String?

    public var needShareFlight: Bool?

    public var searchJourneys: [FlightOtaSearchV2Request.SearchJourneys]?

    public var searchMode: Int32?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinTypeList != nil {
            map["cabin_type_list"] = self.cabinTypeList!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.searchJourneys != nil {
            var tmp : [Any] = []
            for k in self.searchJourneys! {
                tmp.append(k.toMap())
            }
            map["search_journeys"] = tmp
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_type_list") && dict["cabin_type_list"] != nil {
            self.cabinTypeList = dict["cabin_type_list"] as! [Int32]
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            var tmp : [FlightOtaSearchV2Request.SearchJourneys] = []
            for v in dict["search_journeys"] as! [Any] {
                var model = FlightOtaSearchV2Request.SearchJourneys()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.searchJourneys = tmp
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class FlightOtaSearchV2ShrinkRequest : Tea.TeaModel {
    public var cabinTypeListShrink: String?

    public var directOnly: Bool?

    public var isvName: String?

    public var needShareFlight: Bool?

    public var searchJourneysShrink: String?

    public var searchMode: Int32?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cabinTypeListShrink != nil {
            map["cabin_type_list"] = self.cabinTypeListShrink!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.searchJourneysShrink != nil {
            map["search_journeys"] = self.searchJourneysShrink!
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("cabin_type_list") && dict["cabin_type_list"] != nil {
            self.cabinTypeListShrink = dict["cabin_type_list"] as! String
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            self.searchJourneysShrink = dict["search_journeys"] as! String
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class FlightOtaSearchV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightJourneyInfos : Tea.TeaModel {
            public class FlightSegmentInfos : Tea.TeaModel {
                public class AirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public class ArrAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var airportNameColor: String?

                    public var airportShortName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.airportNameColor != nil {
                            map["airport_name_color"] = self.airportNameColor!
                        }
                        if self.airportShortName != nil {
                            map["airport_short_name"] = self.airportShortName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("airport_name_color") && dict["airport_name_color"] != nil {
                            self.airportNameColor = dict["airport_name_color"] as! String
                        }
                        if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                            self.airportShortName = dict["airport_short_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class DepAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var airportNameColor: String?

                    public var airportShortName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.airportNameColor != nil {
                            map["airport_name_color"] = self.airportNameColor!
                        }
                        if self.airportShortName != nil {
                            map["airport_short_name"] = self.airportShortName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("airport_name_color") && dict["airport_name_color"] != nil {
                            self.airportNameColor = dict["airport_name_color"] as! String
                        }
                        if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                            self.airportShortName = dict["airport_short_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class FlightShareInfo : Tea.TeaModel {
                    public class OperatingAirlineInfo : Tea.TeaModel {
                        public var airlineChineseName: String?

                        public var airlineChineseShortName: String?

                        public var airlineCode: String?

                        public var airlineIcon: String?

                        public var cheapFlight: Bool?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airlineChineseName != nil {
                                map["airline_chinese_name"] = self.airlineChineseName!
                            }
                            if self.airlineChineseShortName != nil {
                                map["airline_chinese_short_name"] = self.airlineChineseShortName!
                            }
                            if self.airlineCode != nil {
                                map["airline_code"] = self.airlineCode!
                            }
                            if self.airlineIcon != nil {
                                map["airline_icon"] = self.airlineIcon!
                            }
                            if self.cheapFlight != nil {
                                map["cheap_flight"] = self.cheapFlight!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                self.airlineChineseName = dict["airline_chinese_name"] as! String
                            }
                            if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                            }
                            if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                self.airlineCode = dict["airline_code"] as! String
                            }
                            if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                self.airlineIcon = dict["airline_icon"] as! String
                            }
                            if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                self.cheapFlight = dict["cheap_flight"] as! Bool
                            }
                        }
                    }
                    public var operatingAirlineInfo: FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo?

                    public var operatingFlightNo: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.operatingAirlineInfo?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.operatingAirlineInfo != nil {
                            map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                        }
                        if self.operatingFlightNo != nil {
                            map["operating_flight_no"] = self.operatingFlightNo!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                            var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo()
                            model.fromMap(dict["operating_airline_info"] as! [String: Any])
                            self.operatingAirlineInfo = model
                        }
                        if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                            self.operatingFlightNo = dict["operating_flight_no"] as! String
                        }
                    }
                }
                public class FlightStopInfo : Tea.TeaModel {
                    public var stopAirport: String?

                    public var stopAirportName: String?

                    public var stopArrTerm: String?

                    public var stopArrTime: String?

                    public var stopCityCode: String?

                    public var stopCityName: String?

                    public var stopCityNames: [String]?

                    public var stopDepTerm: String?

                    public var stopDepTime: String?

                    public var stopTime: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.stopAirport != nil {
                            map["stop_airport"] = self.stopAirport!
                        }
                        if self.stopAirportName != nil {
                            map["stop_airport_name"] = self.stopAirportName!
                        }
                        if self.stopArrTerm != nil {
                            map["stop_arr_term"] = self.stopArrTerm!
                        }
                        if self.stopArrTime != nil {
                            map["stop_arr_time"] = self.stopArrTime!
                        }
                        if self.stopCityCode != nil {
                            map["stop_city_code"] = self.stopCityCode!
                        }
                        if self.stopCityName != nil {
                            map["stop_city_name"] = self.stopCityName!
                        }
                        if self.stopCityNames != nil {
                            map["stop_city_names"] = self.stopCityNames!
                        }
                        if self.stopDepTerm != nil {
                            map["stop_dep_term"] = self.stopDepTerm!
                        }
                        if self.stopDepTime != nil {
                            map["stop_dep_time"] = self.stopDepTime!
                        }
                        if self.stopTime != nil {
                            map["stop_time"] = self.stopTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                            self.stopAirport = dict["stop_airport"] as! String
                        }
                        if dict.keys.contains("stop_airport_name") && dict["stop_airport_name"] != nil {
                            self.stopAirportName = dict["stop_airport_name"] as! String
                        }
                        if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                            self.stopArrTerm = dict["stop_arr_term"] as! String
                        }
                        if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                            self.stopArrTime = dict["stop_arr_time"] as! String
                        }
                        if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                            self.stopCityCode = dict["stop_city_code"] as! String
                        }
                        if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                            self.stopCityName = dict["stop_city_name"] as! String
                        }
                        if dict.keys.contains("stop_city_names") && dict["stop_city_names"] != nil {
                            self.stopCityNames = dict["stop_city_names"] as! [String]
                        }
                        if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                            self.stopDepTerm = dict["stop_dep_term"] as! String
                        }
                        if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                            self.stopDepTime = dict["stop_dep_time"] as! String
                        }
                        if dict.keys.contains("stop_time") && dict["stop_time"] != nil {
                            self.stopTime = dict["stop_time"] as! String
                        }
                    }
                }
                public var airlineInfo: FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo?

                public var arrAirportInfo: FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo?

                public var arrCityCode: String?

                public var arrCityName: String?

                public var arrTime: String?

                public var baggageDesc: String?

                public var depAirportInfo: FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo?

                public var depCityCode: String?

                public var depCityName: String?

                public var depTime: String?

                public var duration: Int32?

                public var extraInfo: [String: Any]?

                public var flightNo: String?

                public var flightShareInfo: FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo?

                public var flightSize: String?

                public var flightStopInfo: FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo?

                public var flightType: String?

                public var manufacturer: String?

                public var mealDesc: String?

                public var miles: Int32?

                public var onTimeRate: String?

                public var oneMore: Int32?

                public var oneMoreShow: String?

                public var segmentIndex: Int32?

                public var share: Bool?

                public var shortFlightSize: String?

                public var stop: Bool?

                public var totalTime: String?

                public var transferTime: String?

                public var transferTimeNumber: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.airlineInfo?.validate()
                    try self.arrAirportInfo?.validate()
                    try self.depAirportInfo?.validate()
                    try self.flightShareInfo?.validate()
                    try self.flightStopInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineInfo != nil {
                        map["airline_info"] = self.airlineInfo?.toMap()
                    }
                    if self.arrAirportInfo != nil {
                        map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                    }
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrCityName != nil {
                        map["arr_city_name"] = self.arrCityName!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.baggageDesc != nil {
                        map["baggage_desc"] = self.baggageDesc!
                    }
                    if self.depAirportInfo != nil {
                        map["dep_airport_info"] = self.depAirportInfo?.toMap()
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depCityName != nil {
                        map["dep_city_name"] = self.depCityName!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.duration != nil {
                        map["duration"] = self.duration!
                    }
                    if self.extraInfo != nil {
                        map["extra_info"] = self.extraInfo!
                    }
                    if self.flightNo != nil {
                        map["flight_no"] = self.flightNo!
                    }
                    if self.flightShareInfo != nil {
                        map["flight_share_info"] = self.flightShareInfo?.toMap()
                    }
                    if self.flightSize != nil {
                        map["flight_size"] = self.flightSize!
                    }
                    if self.flightStopInfo != nil {
                        map["flight_stop_info"] = self.flightStopInfo?.toMap()
                    }
                    if self.flightType != nil {
                        map["flight_type"] = self.flightType!
                    }
                    if self.manufacturer != nil {
                        map["manufacturer"] = self.manufacturer!
                    }
                    if self.mealDesc != nil {
                        map["meal_desc"] = self.mealDesc!
                    }
                    if self.miles != nil {
                        map["miles"] = self.miles!
                    }
                    if self.onTimeRate != nil {
                        map["on_time_rate"] = self.onTimeRate!
                    }
                    if self.oneMore != nil {
                        map["one_more"] = self.oneMore!
                    }
                    if self.oneMoreShow != nil {
                        map["one_more_show"] = self.oneMoreShow!
                    }
                    if self.segmentIndex != nil {
                        map["segment_index"] = self.segmentIndex!
                    }
                    if self.share != nil {
                        map["share"] = self.share!
                    }
                    if self.shortFlightSize != nil {
                        map["short_flight_size"] = self.shortFlightSize!
                    }
                    if self.stop != nil {
                        map["stop"] = self.stop!
                    }
                    if self.totalTime != nil {
                        map["total_time"] = self.totalTime!
                    }
                    if self.transferTime != nil {
                        map["transfer_time"] = self.transferTime!
                    }
                    if self.transferTimeNumber != nil {
                        map["transfer_time_number"] = self.transferTimeNumber!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                        var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo()
                        model.fromMap(dict["airline_info"] as! [String: Any])
                        self.airlineInfo = model
                    }
                    if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                        var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo()
                        model.fromMap(dict["arr_airport_info"] as! [String: Any])
                        self.arrAirportInfo = model
                    }
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                        self.arrCityName = dict["arr_city_name"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                        self.baggageDesc = dict["baggage_desc"] as! String
                    }
                    if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                        var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo()
                        model.fromMap(dict["dep_airport_info"] as! [String: Any])
                        self.depAirportInfo = model
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                        self.depCityName = dict["dep_city_name"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("duration") && dict["duration"] != nil {
                        self.duration = dict["duration"] as! Int32
                    }
                    if dict.keys.contains("extra_info") && dict["extra_info"] != nil {
                        self.extraInfo = dict["extra_info"] as! [String: Any]
                    }
                    if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                        self.flightNo = dict["flight_no"] as! String
                    }
                    if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                        var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo()
                        model.fromMap(dict["flight_share_info"] as! [String: Any])
                        self.flightShareInfo = model
                    }
                    if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                        self.flightSize = dict["flight_size"] as! String
                    }
                    if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                        var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo()
                        model.fromMap(dict["flight_stop_info"] as! [String: Any])
                        self.flightStopInfo = model
                    }
                    if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                        self.flightType = dict["flight_type"] as! String
                    }
                    if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                        self.manufacturer = dict["manufacturer"] as! String
                    }
                    if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                        self.mealDesc = dict["meal_desc"] as! String
                    }
                    if dict.keys.contains("miles") && dict["miles"] != nil {
                        self.miles = dict["miles"] as! Int32
                    }
                    if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                        self.onTimeRate = dict["on_time_rate"] as! String
                    }
                    if dict.keys.contains("one_more") && dict["one_more"] != nil {
                        self.oneMore = dict["one_more"] as! Int32
                    }
                    if dict.keys.contains("one_more_show") && dict["one_more_show"] != nil {
                        self.oneMoreShow = dict["one_more_show"] as! String
                    }
                    if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                        self.segmentIndex = dict["segment_index"] as! Int32
                    }
                    if dict.keys.contains("share") && dict["share"] != nil {
                        self.share = dict["share"] as! Bool
                    }
                    if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                        self.shortFlightSize = dict["short_flight_size"] as! String
                    }
                    if dict.keys.contains("stop") && dict["stop"] != nil {
                        self.stop = dict["stop"] as! Bool
                    }
                    if dict.keys.contains("total_time") && dict["total_time"] != nil {
                        self.totalTime = dict["total_time"] as! String
                    }
                    if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                        self.transferTime = dict["transfer_time"] as! String
                    }
                    if dict.keys.contains("transfer_time_number") && dict["transfer_time_number"] != nil {
                        self.transferTimeNumber = dict["transfer_time_number"] as! Int32
                    }
                }
            }
            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrTime: String?

            public var depCityCode: String?

            public var depCityName: String?

            public var depTime: String?

            public var duration: Int32?

            public var extensions: [String: String]?

            public var flightSegmentInfos: [FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos]?

            public var journeyIndex: Int32?

            public var transferTime: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.duration != nil {
                    map["duration"] = self.duration!
                }
                if self.extensions != nil {
                    map["extensions"] = self.extensions!
                }
                if self.flightSegmentInfos != nil {
                    var tmp : [Any] = []
                    for k in self.flightSegmentInfos! {
                        tmp.append(k.toMap())
                    }
                    map["flight_segment_infos"] = tmp
                }
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.transferTime != nil {
                    map["transfer_time"] = self.transferTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("duration") && dict["duration"] != nil {
                    self.duration = dict["duration"] as! Int32
                }
                if dict.keys.contains("extensions") && dict["extensions"] != nil {
                    self.extensions = dict["extensions"] as! [String: String]
                }
                if dict.keys.contains("flight_segment_infos") && dict["flight_segment_infos"] != nil {
                    var tmp : [FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos] = []
                    for v in dict["flight_segment_infos"] as! [Any] {
                        var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightSegmentInfos = tmp
                }
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                    self.transferTime = dict["transfer_time"] as! Int32
                }
            }
        }
        public class ItemList : Tea.TeaModel {
            public class SubItems : Tea.TeaModel {
                public var shoppingItemMap: [String: ModuleItemListSubItemsShoppingItemMapValue]?

                public var uniqKey: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.shoppingItemMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.shoppingItemMap! {
                            tmp[k] = v.toMap()
                        }
                        map["shopping_item_map"] = tmp
                    }
                    if self.uniqKey != nil {
                        map["uniq_key"] = self.uniqKey!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                        var tmp : [String: ModuleItemListSubItemsShoppingItemMapValue] = [:]
                        for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleItemListSubItemsShoppingItemMapValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.shoppingItemMap = tmp
                    }
                    if dict.keys.contains("uniq_key") && dict["uniq_key"] != nil {
                        self.uniqKey = dict["uniq_key"] as! String
                    }
                }
            }
            public var flightRuleInfos: [String: ModuleItemListFlightRuleInfosValue]?

            public var itemId: String?

            public var shoppingItemMap: [String: ModuleItemListShoppingItemMapValue]?

            public var subItemPositionMap: [String: [ModuleItemListSubItemPositionMapValue]]?

            public var subItems: [FlightOtaSearchV2ResponseBody.Module.ItemList.SubItems]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.flightRuleInfos != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.flightRuleInfos! {
                        tmp[k] = v.toMap()
                    }
                    map["flight_rule_infos"] = tmp
                }
                if self.itemId != nil {
                    map["item_id"] = self.itemId!
                }
                if self.shoppingItemMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.shoppingItemMap! {
                        tmp[k] = v.toMap()
                    }
                    map["shopping_item_map"] = tmp
                }
                if self.subItemPositionMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.subItemPositionMap! {
                        var l1 : [Any] = []
                        for k1 in v {
                            l1.append(k1.toMap())
                        }
                        tmp[k] = l1
                    }
                    map["sub_item_position_map"] = tmp
                }
                if self.subItems != nil {
                    var tmp : [Any] = []
                    for k in self.subItems! {
                        tmp.append(k.toMap())
                    }
                    map["sub_items"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("flight_rule_infos") && dict["flight_rule_infos"] != nil {
                    var tmp : [String: ModuleItemListFlightRuleInfosValue] = [:]
                    for (k, v) in dict["flight_rule_infos"] as! [String: Any] {
                        if v != nil {
                            var model = ModuleItemListFlightRuleInfosValue()
                            model.fromMap(v as! [String: Any])
                            tmp[k] = model
                        }
                    }
                    self.flightRuleInfos = tmp
                }
                if dict.keys.contains("item_id") && dict["item_id"] != nil {
                    self.itemId = dict["item_id"] as! String
                }
                if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                    var tmp : [String: ModuleItemListShoppingItemMapValue] = [:]
                    for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                        if v != nil {
                            var model = ModuleItemListShoppingItemMapValue()
                            model.fromMap(v as! [String: Any])
                            tmp[k] = model
                        }
                    }
                    self.shoppingItemMap = tmp
                }
                if dict.keys.contains("sub_item_position_map") && dict["sub_item_position_map"] != nil {
                    var tmp : [String: [ModuleItemListSubItemPositionMapValue]] = [:]
                    for (k, v) in dict["sub_item_position_map"] as! [String: Any] {
                        var l1 : [ModuleItemListSubItemPositionMapValue] = []
                        for v1 in v as! [Any] {
                            var model = ModuleItemListSubItemPositionMapValue()
                            if v1 != nil {
                                model.fromMap(v1 as! [String: Any])
                            }
                            l1.append(model)
                        }
                        tmp[k] = l1
                    }
                    self.subItemPositionMap = tmp
                }
                if dict.keys.contains("sub_items") && dict["sub_items"] != nil {
                    var tmp : [FlightOtaSearchV2ResponseBody.Module.ItemList.SubItems] = []
                    for v in dict["sub_items"] as! [Any] {
                        var model = FlightOtaSearchV2ResponseBody.Module.ItemList.SubItems()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.subItems = tmp
                }
            }
        }
        public var flightJourneyInfos: [FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos]?

        public var itemList: [FlightOtaSearchV2ResponseBody.Module.ItemList]?

        public var searchMode: Int32?

        public var tripType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightJourneyInfos != nil {
                var tmp : [Any] = []
                for k in self.flightJourneyInfos! {
                    tmp.append(k.toMap())
                }
                map["flight_journey_infos"] = tmp
            }
            if self.itemList != nil {
                var tmp : [Any] = []
                for k in self.itemList! {
                    tmp.append(k.toMap())
                }
                map["item_list"] = tmp
            }
            if self.searchMode != nil {
                map["search_mode"] = self.searchMode!
            }
            if self.tripType != nil {
                map["trip_type"] = self.tripType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_journey_infos") && dict["flight_journey_infos"] != nil {
                var tmp : [FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos] = []
                for v in dict["flight_journey_infos"] as! [Any] {
                    var model = FlightOtaSearchV2ResponseBody.Module.FlightJourneyInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightJourneyInfos = tmp
            }
            if dict.keys.contains("item_list") && dict["item_list"] != nil {
                var tmp : [FlightOtaSearchV2ResponseBody.Module.ItemList] = []
                for v in dict["item_list"] as! [Any] {
                    var model = FlightOtaSearchV2ResponseBody.Module.ItemList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itemList = tmp
            }
            if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
                self.searchMode = dict["search_mode"] as! Int32
            }
            if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                self.tripType = dict["trip_type"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightOtaSearchV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightOtaSearchV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightOtaSearchV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightOtaSearchV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightOtaSearchV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightPayOrderHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightPayOrderRequest : Tea.TeaModel {
    public var corpPayPrice: Int64?

    public var disOrderId: String?

    public var extra: [String: String]?

    public var personalPayPrice: Int64?

    public var totalPayPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpPayPrice != nil {
            map["corp_pay_price"] = self.corpPayPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.extra != nil {
            map["extra"] = self.extra!
        }
        if self.personalPayPrice != nil {
            map["personal_pay_price"] = self.personalPayPrice!
        }
        if self.totalPayPrice != nil {
            map["total_pay_price"] = self.totalPayPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("corp_pay_price") && dict["corp_pay_price"] != nil {
            self.corpPayPrice = dict["corp_pay_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extra = dict["extra"] as! [String: String]
        }
        if dict.keys.contains("personal_pay_price") && dict["personal_pay_price"] != nil {
            self.personalPayPrice = dict["personal_pay_price"] as! Int64
        }
        if dict.keys.contains("total_pay_price") && dict["total_pay_price"] != nil {
            self.totalPayPrice = dict["total_pay_price"] as! Int64
        }
    }
}

public class FlightPayOrderShrinkRequest : Tea.TeaModel {
    public var corpPayPrice: Int64?

    public var disOrderId: String?

    public var extraShrink: String?

    public var personalPayPrice: Int64?

    public var totalPayPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpPayPrice != nil {
            map["corp_pay_price"] = self.corpPayPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.extraShrink != nil {
            map["extra"] = self.extraShrink!
        }
        if self.personalPayPrice != nil {
            map["personal_pay_price"] = self.personalPayPrice!
        }
        if self.totalPayPrice != nil {
            map["total_pay_price"] = self.totalPayPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("corp_pay_price") && dict["corp_pay_price"] != nil {
            self.corpPayPrice = dict["corp_pay_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extraShrink = dict["extra"] as! String
        }
        if dict.keys.contains("personal_pay_price") && dict["personal_pay_price"] != nil {
            self.personalPayPrice = dict["personal_pay_price"] as! Int64
        }
        if dict.keys.contains("total_pay_price") && dict["total_pay_price"] != nil {
            self.totalPayPrice = dict["total_pay_price"] as! Int64
        }
    }
}

public class FlightPayOrderResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var actualPayPrice: Int64?

        public var alipayTradeNo: String?

        public var lastPayTime: String?

        public var payStatus: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actualPayPrice != nil {
                map["actual_pay_price"] = self.actualPayPrice!
            }
            if self.alipayTradeNo != nil {
                map["alipay_trade_no"] = self.alipayTradeNo!
            }
            if self.lastPayTime != nil {
                map["last_pay_time"] = self.lastPayTime!
            }
            if self.payStatus != nil {
                map["pay_status"] = self.payStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("actual_pay_price") && dict["actual_pay_price"] != nil {
                self.actualPayPrice = dict["actual_pay_price"] as! Int64
            }
            if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                self.alipayTradeNo = dict["alipay_trade_no"] as! String
            }
            if dict.keys.contains("last_pay_time") && dict["last_pay_time"] != nil {
                self.lastPayTime = dict["last_pay_time"] as! String
            }
            if dict.keys.contains("pay_status") && dict["pay_status"] != nil {
                self.payStatus = dict["pay_status"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightPayOrderResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightPayOrderResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightPayOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightPayOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightPayOrderResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightPayOrderV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightPayOrderV2Request : Tea.TeaModel {
    public var isvName: String?

    public var orderId: String?

    public var outOrderId: String?

    public var totalPrice: Int64?

    public var totalServiceFeePrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.totalPrice != nil {
            map["total_price"] = self.totalPrice!
        }
        if self.totalServiceFeePrice != nil {
            map["total_service_fee_price"] = self.totalServiceFeePrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("total_price") && dict["total_price"] != nil {
            self.totalPrice = dict["total_price"] as! Int64
        }
        if dict.keys.contains("total_service_fee_price") && dict["total_service_fee_price"] != nil {
            self.totalServiceFeePrice = dict["total_service_fee_price"] as! Int64
        }
    }
}

public class FlightPayOrderV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var price: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.price != nil {
                map["price"] = self.price!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("price") && dict["price"] != nil {
                self.price = dict["price"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightPayOrderV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightPayOrderV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightPayOrderV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightPayOrderV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightPayOrderV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightRefundApplyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightRefundApplyRequest : Tea.TeaModel {
    public class PassengerSegmentInfoList : Tea.TeaModel {
        public var flightNo: String?

        public var passengerName: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightNo != nil {
                map["flight_no"] = self.flightNo!
            }
            if self.passengerName != nil {
                map["passenger_name"] = self.passengerName!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                self.flightNo = dict["flight_no"] as! String
            }
            if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                self.passengerName = dict["passenger_name"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var corpRefundPrice: Int64?

    public var disOrderId: String?

    public var disSubOrderId: String?

    public var displayRefundMoney: String?

    public var extra: [String: String]?

    public var isVoluntary: Int32?

    public var itemUnitIds: String?

    public var passengerSegmentInfoList: [FlightRefundApplyRequest.PassengerSegmentInfoList]?

    public var personalRefundPrice: Int64?

    public var reasonDetail: String?

    public var reasonType: Int32?

    public var refundVoucherInfo: [String]?

    public var sessionId: String?

    public var totalRefundPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpRefundPrice != nil {
            map["corp_refund_price"] = self.corpRefundPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        if self.displayRefundMoney != nil {
            map["display_refund_money"] = self.displayRefundMoney!
        }
        if self.extra != nil {
            map["extra"] = self.extra!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.itemUnitIds != nil {
            map["item_unit_ids"] = self.itemUnitIds!
        }
        if self.passengerSegmentInfoList != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentInfoList! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_info_list"] = tmp
        }
        if self.personalRefundPrice != nil {
            map["personal_refund_price"] = self.personalRefundPrice!
        }
        if self.reasonDetail != nil {
            map["reason_detail"] = self.reasonDetail!
        }
        if self.reasonType != nil {
            map["reason_type"] = self.reasonType!
        }
        if self.refundVoucherInfo != nil {
            map["refund_voucher_info"] = self.refundVoucherInfo!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.totalRefundPrice != nil {
            map["total_refund_price"] = self.totalRefundPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("corp_refund_price") && dict["corp_refund_price"] != nil {
            self.corpRefundPrice = dict["corp_refund_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
        if dict.keys.contains("display_refund_money") && dict["display_refund_money"] != nil {
            self.displayRefundMoney = dict["display_refund_money"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extra = dict["extra"] as! [String: String]
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("item_unit_ids") && dict["item_unit_ids"] != nil {
            self.itemUnitIds = dict["item_unit_ids"] as! String
        }
        if dict.keys.contains("passenger_segment_info_list") && dict["passenger_segment_info_list"] != nil {
            var tmp : [FlightRefundApplyRequest.PassengerSegmentInfoList] = []
            for v in dict["passenger_segment_info_list"] as! [Any] {
                var model = FlightRefundApplyRequest.PassengerSegmentInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentInfoList = tmp
        }
        if dict.keys.contains("personal_refund_price") && dict["personal_refund_price"] != nil {
            self.personalRefundPrice = dict["personal_refund_price"] as! Int64
        }
        if dict.keys.contains("reason_detail") && dict["reason_detail"] != nil {
            self.reasonDetail = dict["reason_detail"] as! String
        }
        if dict.keys.contains("reason_type") && dict["reason_type"] != nil {
            self.reasonType = dict["reason_type"] as! Int32
        }
        if dict.keys.contains("refund_voucher_info") && dict["refund_voucher_info"] != nil {
            self.refundVoucherInfo = dict["refund_voucher_info"] as! [String]
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("total_refund_price") && dict["total_refund_price"] != nil {
            self.totalRefundPrice = dict["total_refund_price"] as! Int64
        }
    }
}

public class FlightRefundApplyShrinkRequest : Tea.TeaModel {
    public var corpRefundPrice: Int64?

    public var disOrderId: String?

    public var disSubOrderId: String?

    public var displayRefundMoney: String?

    public var extraShrink: String?

    public var isVoluntary: Int32?

    public var itemUnitIds: String?

    public var passengerSegmentInfoListShrink: String?

    public var personalRefundPrice: Int64?

    public var reasonDetail: String?

    public var reasonType: Int32?

    public var refundVoucherInfoShrink: String?

    public var sessionId: String?

    public var totalRefundPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpRefundPrice != nil {
            map["corp_refund_price"] = self.corpRefundPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        if self.displayRefundMoney != nil {
            map["display_refund_money"] = self.displayRefundMoney!
        }
        if self.extraShrink != nil {
            map["extra"] = self.extraShrink!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.itemUnitIds != nil {
            map["item_unit_ids"] = self.itemUnitIds!
        }
        if self.passengerSegmentInfoListShrink != nil {
            map["passenger_segment_info_list"] = self.passengerSegmentInfoListShrink!
        }
        if self.personalRefundPrice != nil {
            map["personal_refund_price"] = self.personalRefundPrice!
        }
        if self.reasonDetail != nil {
            map["reason_detail"] = self.reasonDetail!
        }
        if self.reasonType != nil {
            map["reason_type"] = self.reasonType!
        }
        if self.refundVoucherInfoShrink != nil {
            map["refund_voucher_info"] = self.refundVoucherInfoShrink!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.totalRefundPrice != nil {
            map["total_refund_price"] = self.totalRefundPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("corp_refund_price") && dict["corp_refund_price"] != nil {
            self.corpRefundPrice = dict["corp_refund_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
        if dict.keys.contains("display_refund_money") && dict["display_refund_money"] != nil {
            self.displayRefundMoney = dict["display_refund_money"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extraShrink = dict["extra"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("item_unit_ids") && dict["item_unit_ids"] != nil {
            self.itemUnitIds = dict["item_unit_ids"] as! String
        }
        if dict.keys.contains("passenger_segment_info_list") && dict["passenger_segment_info_list"] != nil {
            self.passengerSegmentInfoListShrink = dict["passenger_segment_info_list"] as! String
        }
        if dict.keys.contains("personal_refund_price") && dict["personal_refund_price"] != nil {
            self.personalRefundPrice = dict["personal_refund_price"] as! Int64
        }
        if dict.keys.contains("reason_detail") && dict["reason_detail"] != nil {
            self.reasonDetail = dict["reason_detail"] as! String
        }
        if dict.keys.contains("reason_type") && dict["reason_type"] != nil {
            self.reasonType = dict["reason_type"] as! Int32
        }
        if dict.keys.contains("refund_voucher_info") && dict["refund_voucher_info"] != nil {
            self.refundVoucherInfoShrink = dict["refund_voucher_info"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("total_refund_price") && dict["total_refund_price"] != nil {
            self.totalRefundPrice = dict["total_refund_price"] as! Int64
        }
    }
}

public class FlightRefundApplyResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var disOrderId: String?

        public var disSubOrderId: String?

        public var refundApplyId: Int64?

        public var refundFee: Int64?

        public var refundMoney: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.disOrderId != nil {
                map["dis_order_id"] = self.disOrderId!
            }
            if self.disSubOrderId != nil {
                map["dis_sub_order_id"] = self.disSubOrderId!
            }
            if self.refundApplyId != nil {
                map["refund_apply_id"] = self.refundApplyId!
            }
            if self.refundFee != nil {
                map["refund_fee"] = self.refundFee!
            }
            if self.refundMoney != nil {
                map["refund_money"] = self.refundMoney!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
                self.disOrderId = dict["dis_order_id"] as! String
            }
            if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
                self.disSubOrderId = dict["dis_sub_order_id"] as! String
            }
            if dict.keys.contains("refund_apply_id") && dict["refund_apply_id"] != nil {
                self.refundApplyId = dict["refund_apply_id"] as! Int64
            }
            if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                self.refundFee = dict["refund_fee"] as! Int64
            }
            if dict.keys.contains("refund_money") && dict["refund_money"] != nil {
                self.refundMoney = dict["refund_money"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightRefundApplyResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightRefundApplyResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightRefundApplyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightRefundApplyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightRefundApplyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightRefundApplyV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightRefundApplyV2Request : Tea.TeaModel {
    public class PassengerSegmentRelations : Tea.TeaModel {
        public var passengerId: String?

        public var segmentIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.passengerId != nil {
                map["passenger_id"] = self.passengerId!
            }
            if self.segmentIdList != nil {
                map["segment_id_list"] = self.segmentIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                self.passengerId = dict["passenger_id"] as! String
            }
            if dict.keys.contains("segment_id_list") && dict["segment_id_list"] != nil {
                self.segmentIdList = dict["segment_id_list"] as! [String]
            }
        }
    }
    public var isvName: String?

    public var orderId: String?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var passengerSegmentRelations: [FlightRefundApplyV2Request.PassengerSegmentRelations]?

    public var preCalType: Int32?

    public var refundReason: String?

    public var refundReasonType: Int32?

    public var ticketNos: [String]?

    public var totalRefundPrice: Int64?

    public var uploadPictUrls: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.passengerSegmentRelations != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentRelations! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_relations"] = tmp
        }
        if self.preCalType != nil {
            map["pre_cal_type"] = self.preCalType!
        }
        if self.refundReason != nil {
            map["refund_reason"] = self.refundReason!
        }
        if self.refundReasonType != nil {
            map["refund_reason_type"] = self.refundReasonType!
        }
        if self.ticketNos != nil {
            map["ticket_nos"] = self.ticketNos!
        }
        if self.totalRefundPrice != nil {
            map["total_refund_price"] = self.totalRefundPrice!
        }
        if self.uploadPictUrls != nil {
            map["upload_pict_urls"] = self.uploadPictUrls!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            var tmp : [FlightRefundApplyV2Request.PassengerSegmentRelations] = []
            for v in dict["passenger_segment_relations"] as! [Any] {
                var model = FlightRefundApplyV2Request.PassengerSegmentRelations()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentRelations = tmp
        }
        if dict.keys.contains("pre_cal_type") && dict["pre_cal_type"] != nil {
            self.preCalType = dict["pre_cal_type"] as! Int32
        }
        if dict.keys.contains("refund_reason") && dict["refund_reason"] != nil {
            self.refundReason = dict["refund_reason"] as! String
        }
        if dict.keys.contains("refund_reason_type") && dict["refund_reason_type"] != nil {
            self.refundReasonType = dict["refund_reason_type"] as! Int32
        }
        if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
            self.ticketNos = dict["ticket_nos"] as! [String]
        }
        if dict.keys.contains("total_refund_price") && dict["total_refund_price"] != nil {
            self.totalRefundPrice = dict["total_refund_price"] as! Int64
        }
        if dict.keys.contains("upload_pict_urls") && dict["upload_pict_urls"] != nil {
            self.uploadPictUrls = dict["upload_pict_urls"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightRefundApplyV2ShrinkRequest : Tea.TeaModel {
    public var isvName: String?

    public var orderId: String?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var passengerSegmentRelationsShrink: String?

    public var preCalType: Int32?

    public var refundReason: String?

    public var refundReasonType: Int32?

    public var ticketNosShrink: String?

    public var totalRefundPrice: Int64?

    public var uploadPictUrls: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.passengerSegmentRelationsShrink != nil {
            map["passenger_segment_relations"] = self.passengerSegmentRelationsShrink!
        }
        if self.preCalType != nil {
            map["pre_cal_type"] = self.preCalType!
        }
        if self.refundReason != nil {
            map["refund_reason"] = self.refundReason!
        }
        if self.refundReasonType != nil {
            map["refund_reason_type"] = self.refundReasonType!
        }
        if self.ticketNosShrink != nil {
            map["ticket_nos"] = self.ticketNosShrink!
        }
        if self.totalRefundPrice != nil {
            map["total_refund_price"] = self.totalRefundPrice!
        }
        if self.uploadPictUrls != nil {
            map["upload_pict_urls"] = self.uploadPictUrls!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            self.passengerSegmentRelationsShrink = dict["passenger_segment_relations"] as! String
        }
        if dict.keys.contains("pre_cal_type") && dict["pre_cal_type"] != nil {
            self.preCalType = dict["pre_cal_type"] as! Int32
        }
        if dict.keys.contains("refund_reason") && dict["refund_reason"] != nil {
            self.refundReason = dict["refund_reason"] as! String
        }
        if dict.keys.contains("refund_reason_type") && dict["refund_reason_type"] != nil {
            self.refundReasonType = dict["refund_reason_type"] as! Int32
        }
        if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
            self.ticketNosShrink = dict["ticket_nos"] as! String
        }
        if dict.keys.contains("total_refund_price") && dict["total_refund_price"] != nil {
            self.totalRefundPrice = dict["total_refund_price"] as! Int64
        }
        if dict.keys.contains("upload_pict_urls") && dict["upload_pict_urls"] != nil {
            self.uploadPictUrls = dict["upload_pict_urls"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightRefundApplyV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var orderId: String?

        public var outOrderId: String?

        public var outSubOrderId: String?

        public var subOrderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.outOrderId != nil {
                map["out_order_id"] = self.outOrderId!
            }
            if self.outSubOrderId != nil {
                map["out_sub_order_id"] = self.outSubOrderId!
            }
            if self.subOrderId != nil {
                map["sub_order_id"] = self.subOrderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! String
            }
            if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
                self.outOrderId = dict["out_order_id"] as! String
            }
            if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
                self.outSubOrderId = dict["out_sub_order_id"] as! String
            }
            if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                self.subOrderId = dict["sub_order_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightRefundApplyV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightRefundApplyV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightRefundApplyV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightRefundApplyV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightRefundApplyV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightRefundDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightRefundDetailRequest : Tea.TeaModel {
    public var disOrderId: String?

    public var disSubOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
    }
}

public class FlightRefundDetailResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class RefundFeeList : Tea.TeaModel {
            public var alipayTradeNo: String?

            public var refundFee: Int64?

            public var refundPrice: Int64?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundPrice != nil {
                    map["refund_price"] = self.refundPrice!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Int64
                }
                if dict.keys.contains("refund_price") && dict["refund_price"] != nil {
                    self.refundPrice = dict["refund_price"] as! Int64
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
            }
        }
        public var btripOrderId: Int64?

        public var btripSubOrderId: Int64?

        public var disOrderId: String?

        public var disSubOrderId: String?

        public var isVoluntary: Int32?

        public var reason: String?

        public var refundFee: Int64?

        public var refundFeeList: [FlightRefundDetailResponseBody.Module.RefundFeeList]?

        public var refundPrice: Int64?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.btripSubOrderId != nil {
                map["btrip_sub_order_id"] = self.btripSubOrderId!
            }
            if self.disOrderId != nil {
                map["dis_order_id"] = self.disOrderId!
            }
            if self.disSubOrderId != nil {
                map["dis_sub_order_id"] = self.disSubOrderId!
            }
            if self.isVoluntary != nil {
                map["is_voluntary"] = self.isVoluntary!
            }
            if self.reason != nil {
                map["reason"] = self.reason!
            }
            if self.refundFee != nil {
                map["refund_fee"] = self.refundFee!
            }
            if self.refundFeeList != nil {
                var tmp : [Any] = []
                for k in self.refundFeeList! {
                    tmp.append(k.toMap())
                }
                map["refund_fee_list"] = tmp
            }
            if self.refundPrice != nil {
                map["refund_price"] = self.refundPrice!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! Int64
            }
            if dict.keys.contains("btrip_sub_order_id") && dict["btrip_sub_order_id"] != nil {
                self.btripSubOrderId = dict["btrip_sub_order_id"] as! Int64
            }
            if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
                self.disOrderId = dict["dis_order_id"] as! String
            }
            if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
                self.disSubOrderId = dict["dis_sub_order_id"] as! String
            }
            if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
                self.isVoluntary = dict["is_voluntary"] as! Int32
            }
            if dict.keys.contains("reason") && dict["reason"] != nil {
                self.reason = dict["reason"] as! String
            }
            if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                self.refundFee = dict["refund_fee"] as! Int64
            }
            if dict.keys.contains("refund_fee_list") && dict["refund_fee_list"] != nil {
                var tmp : [FlightRefundDetailResponseBody.Module.RefundFeeList] = []
                for v in dict["refund_fee_list"] as! [Any] {
                    var model = FlightRefundDetailResponseBody.Module.RefundFeeList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.refundFeeList = tmp
            }
            if dict.keys.contains("refund_price") && dict["refund_price"] != nil {
                self.refundPrice = dict["refund_price"] as! Int64
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightRefundDetailResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightRefundDetailResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightRefundDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightRefundDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightRefundDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightRefundDetailV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightRefundDetailV2Request : Tea.TeaModel {
    public var isvName: String?

    public var orderId: String?

    public var refundApplyId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.refundApplyId != nil {
            map["refund_apply_id"] = self.refundApplyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("refund_apply_id") && dict["refund_apply_id"] != nil {
            self.refundApplyId = dict["refund_apply_id"] as! String
        }
    }
}

public class FlightRefundDetailV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ContactInfoDTO : Tea.TeaModel {
            public var contactEmail: String?

            public var contactName: String?

            public var contactPhone: String?

            public var sendMsgToPassenger: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactEmail != nil {
                    map["contact_email"] = self.contactEmail!
                }
                if self.contactName != nil {
                    map["contact_name"] = self.contactName!
                }
                if self.contactPhone != nil {
                    map["contact_phone"] = self.contactPhone!
                }
                if self.sendMsgToPassenger != nil {
                    map["send_msg_to_passenger"] = self.sendMsgToPassenger!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("contact_email") && dict["contact_email"] != nil {
                    self.contactEmail = dict["contact_email"] as! String
                }
                if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                    self.contactName = dict["contact_name"] as! String
                }
                if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                    self.contactPhone = dict["contact_phone"] as! String
                }
                if dict.keys.contains("send_msg_to_passenger") && dict["send_msg_to_passenger"] != nil {
                    self.sendMsgToPassenger = dict["send_msg_to_passenger"] as! Bool
                }
            }
        }
        public class FlightInfoDTOS : Tea.TeaModel {
            public class SegmentPosition : Tea.TeaModel {
                public var journeyIndex: Int32?

                public var segmentIndex: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.journeyIndex != nil {
                        map["journey_index"] = self.journeyIndex!
                    }
                    if self.segmentIndex != nil {
                        map["segment_index"] = self.segmentIndex!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                        self.journeyIndex = dict["journey_index"] as! Int32
                    }
                    if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                        self.segmentIndex = dict["segment_index"] as! Int32
                    }
                }
            }
            public var airlineCode: String?

            public var airlineIconUrl: String?

            public var airlineName: String?

            public var arrAirportCode: String?

            public var arrAirportName: String?

            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrTerminal: String?

            public var arrTime: String?

            public var cabin: String?

            public var cabinClass: String?

            public var cabinClassName: String?

            public var cabinDiscount: Int64?

            public var carrierAirlineCode: String?

            public var carrierAirlineIconUrl: String?

            public var carrierAirlineName: String?

            public var carrierFlightNo: String?

            public var depAirportCode: String?

            public var depAirportName: String?

            public var depCityCode: String?

            public var depCityName: String?

            public var depTerminal: String?

            public var depTime: String?

            public var flightNo: String?

            public var flightType: String?

            public var mealDesc: String?

            public var segmentId: String?

            public var segmentPosition: FlightRefundDetailV2ResponseBody.Module.FlightInfoDTOS.SegmentPosition?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.segmentPosition?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineCode != nil {
                    map["airline_code"] = self.airlineCode!
                }
                if self.airlineIconUrl != nil {
                    map["airline_icon_url"] = self.airlineIconUrl!
                }
                if self.airlineName != nil {
                    map["airline_name"] = self.airlineName!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrAirportName != nil {
                    map["arr_airport_name"] = self.arrAirportName!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTerminal != nil {
                    map["arr_terminal"] = self.arrTerminal!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinClassName != nil {
                    map["cabin_class_name"] = self.cabinClassName!
                }
                if self.cabinDiscount != nil {
                    map["cabin_discount"] = self.cabinDiscount!
                }
                if self.carrierAirlineCode != nil {
                    map["carrier_airline_code"] = self.carrierAirlineCode!
                }
                if self.carrierAirlineIconUrl != nil {
                    map["carrier_airline_icon_url"] = self.carrierAirlineIconUrl!
                }
                if self.carrierAirlineName != nil {
                    map["carrier_airline_name"] = self.carrierAirlineName!
                }
                if self.carrierFlightNo != nil {
                    map["carrier_flight_no"] = self.carrierFlightNo!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depAirportName != nil {
                    map["dep_airport_name"] = self.depAirportName!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTerminal != nil {
                    map["dep_terminal"] = self.depTerminal!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.segmentId != nil {
                    map["segment_id"] = self.segmentId!
                }
                if self.segmentPosition != nil {
                    map["segment_position"] = self.segmentPosition?.toMap()
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                    self.airlineCode = dict["airline_code"] as! String
                }
                if dict.keys.contains("airline_icon_url") && dict["airline_icon_url"] != nil {
                    self.airlineIconUrl = dict["airline_icon_url"] as! String
                }
                if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                    self.airlineName = dict["airline_name"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_airport_name") && dict["arr_airport_name"] != nil {
                    self.arrAirportName = dict["arr_airport_name"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_terminal") && dict["arr_terminal"] != nil {
                    self.arrTerminal = dict["arr_terminal"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                    self.cabinClassName = dict["cabin_class_name"] as! String
                }
                if dict.keys.contains("cabin_discount") && dict["cabin_discount"] != nil {
                    self.cabinDiscount = dict["cabin_discount"] as! Int64
                }
                if dict.keys.contains("carrier_airline_code") && dict["carrier_airline_code"] != nil {
                    self.carrierAirlineCode = dict["carrier_airline_code"] as! String
                }
                if dict.keys.contains("carrier_airline_icon_url") && dict["carrier_airline_icon_url"] != nil {
                    self.carrierAirlineIconUrl = dict["carrier_airline_icon_url"] as! String
                }
                if dict.keys.contains("carrier_airline_name") && dict["carrier_airline_name"] != nil {
                    self.carrierAirlineName = dict["carrier_airline_name"] as! String
                }
                if dict.keys.contains("carrier_flight_no") && dict["carrier_flight_no"] != nil {
                    self.carrierFlightNo = dict["carrier_flight_no"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_airport_name") && dict["dep_airport_name"] != nil {
                    self.depAirportName = dict["dep_airport_name"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_terminal") && dict["dep_terminal"] != nil {
                    self.depTerminal = dict["dep_terminal"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("segment_id") && dict["segment_id"] != nil {
                    self.segmentId = dict["segment_id"] as! String
                }
                if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                    var model = FlightRefundDetailV2ResponseBody.Module.FlightInfoDTOS.SegmentPosition()
                    model.fromMap(dict["segment_position"] as! [String: Any])
                    self.segmentPosition = model
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
            }
        }
        public class TravelerInfoDTOS : Tea.TeaModel {
            public var birthDate: String?

            public var certNo: String?

            public var certType: Int32?

            public var gender: Int32?

            public var originTicketNos: [String]?

            public var passengerId: String?

            public var passengerName: String?

            public var passengerType: Int32?

            public var phone: String?

            public var pid: Int64?

            public var ticketNos: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.birthDate != nil {
                    map["birth_date"] = self.birthDate!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.gender != nil {
                    map["gender"] = self.gender!
                }
                if self.originTicketNos != nil {
                    map["origin_ticket_nos"] = self.originTicketNos!
                }
                if self.passengerId != nil {
                    map["passenger_id"] = self.passengerId!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.passengerType != nil {
                    map["passenger_type"] = self.passengerType!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                if self.pid != nil {
                    map["pid"] = self.pid!
                }
                if self.ticketNos != nil {
                    map["ticket_nos"] = self.ticketNos!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("birth_date") && dict["birth_date"] != nil {
                    self.birthDate = dict["birth_date"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! Int32
                }
                if dict.keys.contains("gender") && dict["gender"] != nil {
                    self.gender = dict["gender"] as! Int32
                }
                if dict.keys.contains("origin_ticket_nos") && dict["origin_ticket_nos"] != nil {
                    self.originTicketNos = dict["origin_ticket_nos"] as! [String]
                }
                if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                    self.passengerId = dict["passenger_id"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                    self.passengerType = dict["passenger_type"] as! Int32
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
                if dict.keys.contains("pid") && dict["pid"] != nil {
                    self.pid = dict["pid"] as! Int64
                }
                if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
                    self.ticketNos = dict["ticket_nos"] as! [String]
                }
            }
        }
        public var applyTime: String?

        public var contactInfoDTO: FlightRefundDetailV2ResponseBody.Module.ContactInfoDTO?

        public var flightInfoDTOS: [FlightRefundDetailV2ResponseBody.Module.FlightInfoDTOS]?

        public var orderId: Int64?

        public var outOrderId: String?

        public var outSubOrderId: String?

        public var reason: String?

        public var reasonCode: String?

        public var refundFailReason: String?

        public var refundHandlingFee: Int64?

        public var refundMoney: Int64?

        public var status: Int32?

        public var subOrderId: Int64?

        public var travelerInfoDTOS: [FlightRefundDetailV2ResponseBody.Module.TravelerInfoDTOS]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactInfoDTO?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyTime != nil {
                map["apply_time"] = self.applyTime!
            }
            if self.contactInfoDTO != nil {
                map["contact_info_d_t_o"] = self.contactInfoDTO?.toMap()
            }
            if self.flightInfoDTOS != nil {
                var tmp : [Any] = []
                for k in self.flightInfoDTOS! {
                    tmp.append(k.toMap())
                }
                map["flight_info_d_t_o_s"] = tmp
            }
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.outOrderId != nil {
                map["out_order_id"] = self.outOrderId!
            }
            if self.outSubOrderId != nil {
                map["out_sub_order_id"] = self.outSubOrderId!
            }
            if self.reason != nil {
                map["reason"] = self.reason!
            }
            if self.reasonCode != nil {
                map["reason_code"] = self.reasonCode!
            }
            if self.refundFailReason != nil {
                map["refund_fail_reason"] = self.refundFailReason!
            }
            if self.refundHandlingFee != nil {
                map["refund_handling_fee"] = self.refundHandlingFee!
            }
            if self.refundMoney != nil {
                map["refund_money"] = self.refundMoney!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.subOrderId != nil {
                map["sub_order_id"] = self.subOrderId!
            }
            if self.travelerInfoDTOS != nil {
                var tmp : [Any] = []
                for k in self.travelerInfoDTOS! {
                    tmp.append(k.toMap())
                }
                map["traveler_info_d_t_o_s"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_time") && dict["apply_time"] != nil {
                self.applyTime = dict["apply_time"] as! String
            }
            if dict.keys.contains("contact_info_d_t_o") && dict["contact_info_d_t_o"] != nil {
                var model = FlightRefundDetailV2ResponseBody.Module.ContactInfoDTO()
                model.fromMap(dict["contact_info_d_t_o"] as! [String: Any])
                self.contactInfoDTO = model
            }
            if dict.keys.contains("flight_info_d_t_o_s") && dict["flight_info_d_t_o_s"] != nil {
                var tmp : [FlightRefundDetailV2ResponseBody.Module.FlightInfoDTOS] = []
                for v in dict["flight_info_d_t_o_s"] as! [Any] {
                    var model = FlightRefundDetailV2ResponseBody.Module.FlightInfoDTOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightInfoDTOS = tmp
            }
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! Int64
            }
            if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
                self.outOrderId = dict["out_order_id"] as! String
            }
            if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
                self.outSubOrderId = dict["out_sub_order_id"] as! String
            }
            if dict.keys.contains("reason") && dict["reason"] != nil {
                self.reason = dict["reason"] as! String
            }
            if dict.keys.contains("reason_code") && dict["reason_code"] != nil {
                self.reasonCode = dict["reason_code"] as! String
            }
            if dict.keys.contains("refund_fail_reason") && dict["refund_fail_reason"] != nil {
                self.refundFailReason = dict["refund_fail_reason"] as! String
            }
            if dict.keys.contains("refund_handling_fee") && dict["refund_handling_fee"] != nil {
                self.refundHandlingFee = dict["refund_handling_fee"] as! Int64
            }
            if dict.keys.contains("refund_money") && dict["refund_money"] != nil {
                self.refundMoney = dict["refund_money"] as! Int64
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                self.subOrderId = dict["sub_order_id"] as! Int64
            }
            if dict.keys.contains("traveler_info_d_t_o_s") && dict["traveler_info_d_t_o_s"] != nil {
                var tmp : [FlightRefundDetailV2ResponseBody.Module.TravelerInfoDTOS] = []
                for v in dict["traveler_info_d_t_o_s"] as! [Any] {
                    var model = FlightRefundDetailV2ResponseBody.Module.TravelerInfoDTOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerInfoDTOS = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightRefundDetailV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightRefundDetailV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightRefundDetailV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightRefundDetailV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightRefundDetailV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightRefundPreCalHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightRefundPreCalRequest : Tea.TeaModel {
    public class PassengerSegmentInfoList : Tea.TeaModel {
        public var flightNo: String?

        public var passengerName: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightNo != nil {
                map["flight_no"] = self.flightNo!
            }
            if self.passengerName != nil {
                map["passenger_name"] = self.passengerName!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                self.flightNo = dict["flight_no"] as! String
            }
            if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                self.passengerName = dict["passenger_name"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var disOrderId: String?

    public var isVoluntary: String?

    public var passengerSegmentInfoList: [FlightRefundPreCalRequest.PassengerSegmentInfoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.passengerSegmentInfoList != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentInfoList! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_info_list"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! String
        }
        if dict.keys.contains("passenger_segment_info_list") && dict["passenger_segment_info_list"] != nil {
            var tmp : [FlightRefundPreCalRequest.PassengerSegmentInfoList] = []
            for v in dict["passenger_segment_info_list"] as! [Any] {
                var model = FlightRefundPreCalRequest.PassengerSegmentInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentInfoList = tmp
        }
    }
}

public class FlightRefundPreCalShrinkRequest : Tea.TeaModel {
    public var disOrderId: String?

    public var isVoluntary: String?

    public var passengerSegmentInfoListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.passengerSegmentInfoListShrink != nil {
            map["passenger_segment_info_list"] = self.passengerSegmentInfoListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! String
        }
        if dict.keys.contains("passenger_segment_info_list") && dict["passenger_segment_info_list"] != nil {
            self.passengerSegmentInfoListShrink = dict["passenger_segment_info_list"] as! String
        }
    }
}

public class FlightRefundPreCalResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class MultiRefundCalList : Tea.TeaModel {
            public var canApplyRefund: Bool?

            public var name: String?

            public var preRefundMoney: Int64?

            public var refundFee: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.canApplyRefund != nil {
                    map["can_apply_refund"] = self.canApplyRefund!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.preRefundMoney != nil {
                    map["pre_refund_money"] = self.preRefundMoney!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("can_apply_refund") && dict["can_apply_refund"] != nil {
                    self.canApplyRefund = dict["can_apply_refund"] as! Bool
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("pre_refund_money") && dict["pre_refund_money"] != nil {
                    self.preRefundMoney = dict["pre_refund_money"] as! Int64
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Int64
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class ReturnReason : Tea.TeaModel {
            public var extendDesc: String?

            public var person: Int32?

            public var reasonCode: Int32?

            public var reasonShow: String?

            public var reasonType: Int32?

            public var volunteer: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.extendDesc != nil {
                    map["extend_desc"] = self.extendDesc!
                }
                if self.person != nil {
                    map["person"] = self.person!
                }
                if self.reasonCode != nil {
                    map["reason_code"] = self.reasonCode!
                }
                if self.reasonShow != nil {
                    map["reason_show"] = self.reasonShow!
                }
                if self.reasonType != nil {
                    map["reason_type"] = self.reasonType!
                }
                if self.volunteer != nil {
                    map["volunteer"] = self.volunteer!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("extend_desc") && dict["extend_desc"] != nil {
                    self.extendDesc = dict["extend_desc"] as! String
                }
                if dict.keys.contains("person") && dict["person"] != nil {
                    self.person = dict["person"] as! Int32
                }
                if dict.keys.contains("reason_code") && dict["reason_code"] != nil {
                    self.reasonCode = dict["reason_code"] as! Int32
                }
                if dict.keys.contains("reason_show") && dict["reason_show"] != nil {
                    self.reasonShow = dict["reason_show"] as! String
                }
                if dict.keys.contains("reason_type") && dict["reason_type"] != nil {
                    self.reasonType = dict["reason_type"] as! Int32
                }
                if dict.keys.contains("volunteer") && dict["volunteer"] != nil {
                    self.volunteer = dict["volunteer"] as! Int32
                }
            }
        }
        public var flightChange: Bool?

        public var itemUnitId: String?

        public var multiRefundCalList: [FlightRefundPreCalResponseBody.Module.MultiRefundCalList]?

        public var preRefundMoney: Int64?

        public var refundFee: Int64?

        public var returnReason: [FlightRefundPreCalResponseBody.Module.ReturnReason]?

        public var sessionId: String?

        public var tips: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightChange != nil {
                map["flight_change"] = self.flightChange!
            }
            if self.itemUnitId != nil {
                map["item_unit_id"] = self.itemUnitId!
            }
            if self.multiRefundCalList != nil {
                var tmp : [Any] = []
                for k in self.multiRefundCalList! {
                    tmp.append(k.toMap())
                }
                map["multi_refund_cal_list"] = tmp
            }
            if self.preRefundMoney != nil {
                map["pre_refund_money"] = self.preRefundMoney!
            }
            if self.refundFee != nil {
                map["refund_fee"] = self.refundFee!
            }
            if self.returnReason != nil {
                var tmp : [Any] = []
                for k in self.returnReason! {
                    tmp.append(k.toMap())
                }
                map["return_reason"] = tmp
            }
            if self.sessionId != nil {
                map["session_id"] = self.sessionId!
            }
            if self.tips != nil {
                map["tips"] = self.tips!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_change") && dict["flight_change"] != nil {
                self.flightChange = dict["flight_change"] as! Bool
            }
            if dict.keys.contains("item_unit_id") && dict["item_unit_id"] != nil {
                self.itemUnitId = dict["item_unit_id"] as! String
            }
            if dict.keys.contains("multi_refund_cal_list") && dict["multi_refund_cal_list"] != nil {
                var tmp : [FlightRefundPreCalResponseBody.Module.MultiRefundCalList] = []
                for v in dict["multi_refund_cal_list"] as! [Any] {
                    var model = FlightRefundPreCalResponseBody.Module.MultiRefundCalList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.multiRefundCalList = tmp
            }
            if dict.keys.contains("pre_refund_money") && dict["pre_refund_money"] != nil {
                self.preRefundMoney = dict["pre_refund_money"] as! Int64
            }
            if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                self.refundFee = dict["refund_fee"] as! Int64
            }
            if dict.keys.contains("return_reason") && dict["return_reason"] != nil {
                var tmp : [FlightRefundPreCalResponseBody.Module.ReturnReason] = []
                for v in dict["return_reason"] as! [Any] {
                    var model = FlightRefundPreCalResponseBody.Module.ReturnReason()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.returnReason = tmp
            }
            if dict.keys.contains("session_id") && dict["session_id"] != nil {
                self.sessionId = dict["session_id"] as! String
            }
            if dict.keys.contains("tips") && dict["tips"] != nil {
                self.tips = dict["tips"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightRefundPreCalResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightRefundPreCalResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightRefundPreCalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightRefundPreCalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightRefundPreCalResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightRefundPreCalV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightRefundPreCalV2Request : Tea.TeaModel {
    public class PassengerSegmentRelations : Tea.TeaModel {
        public var passengerId: String?

        public var segmentIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.passengerId != nil {
                map["passenger_id"] = self.passengerId!
            }
            if self.segmentIdList != nil {
                map["segment_id_list"] = self.segmentIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                self.passengerId = dict["passenger_id"] as! String
            }
            if dict.keys.contains("segment_id_list") && dict["segment_id_list"] != nil {
                self.segmentIdList = dict["segment_id_list"] as! [String]
            }
        }
    }
    public var isvName: String?

    public var orderId: String?

    public var outOrderId: String?

    public var passengerSegmentRelations: [FlightRefundPreCalV2Request.PassengerSegmentRelations]?

    public var preCalType: Int32?

    public var ticketNos: [String]?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.passengerSegmentRelations != nil {
            var tmp : [Any] = []
            for k in self.passengerSegmentRelations! {
                tmp.append(k.toMap())
            }
            map["passenger_segment_relations"] = tmp
        }
        if self.preCalType != nil {
            map["pre_cal_type"] = self.preCalType!
        }
        if self.ticketNos != nil {
            map["ticket_nos"] = self.ticketNos!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            var tmp : [FlightRefundPreCalV2Request.PassengerSegmentRelations] = []
            for v in dict["passenger_segment_relations"] as! [Any] {
                var model = FlightRefundPreCalV2Request.PassengerSegmentRelations()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.passengerSegmentRelations = tmp
        }
        if dict.keys.contains("pre_cal_type") && dict["pre_cal_type"] != nil {
            self.preCalType = dict["pre_cal_type"] as! Int32
        }
        if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
            self.ticketNos = dict["ticket_nos"] as! [String]
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightRefundPreCalV2ShrinkRequest : Tea.TeaModel {
    public var isvName: String?

    public var orderId: String?

    public var outOrderId: String?

    public var passengerSegmentRelationsShrink: String?

    public var preCalType: Int32?

    public var ticketNosShrink: String?

    public var voluntary: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.passengerSegmentRelationsShrink != nil {
            map["passenger_segment_relations"] = self.passengerSegmentRelationsShrink!
        }
        if self.preCalType != nil {
            map["pre_cal_type"] = self.preCalType!
        }
        if self.ticketNosShrink != nil {
            map["ticket_nos"] = self.ticketNosShrink!
        }
        if self.voluntary != nil {
            map["voluntary"] = self.voluntary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("passenger_segment_relations") && dict["passenger_segment_relations"] != nil {
            self.passengerSegmentRelationsShrink = dict["passenger_segment_relations"] as! String
        }
        if dict.keys.contains("pre_cal_type") && dict["pre_cal_type"] != nil {
            self.preCalType = dict["pre_cal_type"] as! Int32
        }
        if dict.keys.contains("ticket_nos") && dict["ticket_nos"] != nil {
            self.ticketNosShrink = dict["ticket_nos"] as! String
        }
        if dict.keys.contains("voluntary") && dict["voluntary"] != nil {
            self.voluntary = dict["voluntary"] as! Bool
        }
    }
}

public class FlightRefundPreCalV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class MultiRefundFeeDTOS : Tea.TeaModel {
            public var passengerId: String?

            public var passengerName: String?

            public var preRefundMoney: Int64?

            public var refundChargeFee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.passengerId != nil {
                    map["passenger_id"] = self.passengerId!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.preRefundMoney != nil {
                    map["pre_refund_money"] = self.preRefundMoney!
                }
                if self.refundChargeFee != nil {
                    map["refund_charge_fee"] = self.refundChargeFee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("passenger_id") && dict["passenger_id"] != nil {
                    self.passengerId = dict["passenger_id"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pre_refund_money") && dict["pre_refund_money"] != nil {
                    self.preRefundMoney = dict["pre_refund_money"] as! Int64
                }
                if dict.keys.contains("refund_charge_fee") && dict["refund_charge_fee"] != nil {
                    self.refundChargeFee = dict["refund_charge_fee"] as! Int64
                }
            }
        }
        public class RefundReasonOptionDTOS : Tea.TeaModel {
            public var reason: String?

            public var reasonType: Int32?

            public var volunteer: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.reason != nil {
                    map["reason"] = self.reason!
                }
                if self.reasonType != nil {
                    map["reason_type"] = self.reasonType!
                }
                if self.volunteer != nil {
                    map["volunteer"] = self.volunteer!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("reason") && dict["reason"] != nil {
                    self.reason = dict["reason"] as! String
                }
                if dict.keys.contains("reason_type") && dict["reason_type"] != nil {
                    self.reasonType = dict["reason_type"] as! Int32
                }
                if dict.keys.contains("volunteer") && dict["volunteer"] != nil {
                    self.volunteer = dict["volunteer"] as! Bool
                }
            }
        }
        public var multiRefundFeeDTOS: [FlightRefundPreCalV2ResponseBody.Module.MultiRefundFeeDTOS]?

        public var preRefundMoney: Int64?

        public var refundChargeFee: Int64?

        public var refundReasonOptionDTOS: [FlightRefundPreCalV2ResponseBody.Module.RefundReasonOptionDTOS]?

        public var serviceChargeFee: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.multiRefundFeeDTOS != nil {
                var tmp : [Any] = []
                for k in self.multiRefundFeeDTOS! {
                    tmp.append(k.toMap())
                }
                map["multi_refund_fee_d_t_o_s"] = tmp
            }
            if self.preRefundMoney != nil {
                map["pre_refund_money"] = self.preRefundMoney!
            }
            if self.refundChargeFee != nil {
                map["refund_charge_fee"] = self.refundChargeFee!
            }
            if self.refundReasonOptionDTOS != nil {
                var tmp : [Any] = []
                for k in self.refundReasonOptionDTOS! {
                    tmp.append(k.toMap())
                }
                map["refund_reason_option_d_t_o_s"] = tmp
            }
            if self.serviceChargeFee != nil {
                map["service_charge_fee"] = self.serviceChargeFee!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("multi_refund_fee_d_t_o_s") && dict["multi_refund_fee_d_t_o_s"] != nil {
                var tmp : [FlightRefundPreCalV2ResponseBody.Module.MultiRefundFeeDTOS] = []
                for v in dict["multi_refund_fee_d_t_o_s"] as! [Any] {
                    var model = FlightRefundPreCalV2ResponseBody.Module.MultiRefundFeeDTOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.multiRefundFeeDTOS = tmp
            }
            if dict.keys.contains("pre_refund_money") && dict["pre_refund_money"] != nil {
                self.preRefundMoney = dict["pre_refund_money"] as! Int64
            }
            if dict.keys.contains("refund_charge_fee") && dict["refund_charge_fee"] != nil {
                self.refundChargeFee = dict["refund_charge_fee"] as! Int64
            }
            if dict.keys.contains("refund_reason_option_d_t_o_s") && dict["refund_reason_option_d_t_o_s"] != nil {
                var tmp : [FlightRefundPreCalV2ResponseBody.Module.RefundReasonOptionDTOS] = []
                for v in dict["refund_reason_option_d_t_o_s"] as! [Any] {
                    var model = FlightRefundPreCalV2ResponseBody.Module.RefundReasonOptionDTOS()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.refundReasonOptionDTOS = tmp
            }
            if dict.keys.contains("service_charge_fee") && dict["service_charge_fee"] != nil {
                self.serviceChargeFee = dict["service_charge_fee"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightRefundPreCalV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightRefundPreCalV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightRefundPreCalV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightRefundPreCalV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightRefundPreCalV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FlightSearchListHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class FlightSearchListRequest : Tea.TeaModel {
    public var airlineCode: String?

    public var arrCityCode: String?

    public var arrCityName: String?

    public var arrDate: String?

    public var cabinClass: String?

    public var depCityCode: String?

    public var depCityName: String?

    public var depDate: String?

    public var flightNo: String?

    public var needMultiClassPrice: Bool?

    public var transferCityCode: String?

    public var transferFlightNo: String?

    public var transferLeaveDate: String?

    public var tripType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.airlineCode != nil {
            map["airline_code"] = self.airlineCode!
        }
        if self.arrCityCode != nil {
            map["arr_city_code"] = self.arrCityCode!
        }
        if self.arrCityName != nil {
            map["arr_city_name"] = self.arrCityName!
        }
        if self.arrDate != nil {
            map["arr_date"] = self.arrDate!
        }
        if self.cabinClass != nil {
            map["cabin_class"] = self.cabinClass!
        }
        if self.depCityCode != nil {
            map["dep_city_code"] = self.depCityCode!
        }
        if self.depCityName != nil {
            map["dep_city_name"] = self.depCityName!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.flightNo != nil {
            map["flight_no"] = self.flightNo!
        }
        if self.needMultiClassPrice != nil {
            map["need_multi_class_price"] = self.needMultiClassPrice!
        }
        if self.transferCityCode != nil {
            map["transfer_city_code"] = self.transferCityCode!
        }
        if self.transferFlightNo != nil {
            map["transfer_flight_no"] = self.transferFlightNo!
        }
        if self.transferLeaveDate != nil {
            map["transfer_leave_date"] = self.transferLeaveDate!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
            self.airlineCode = dict["airline_code"] as! String
        }
        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
            self.arrCityCode = dict["arr_city_code"] as! String
        }
        if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
            self.arrCityName = dict["arr_city_name"] as! String
        }
        if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
            self.arrDate = dict["arr_date"] as! String
        }
        if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
            self.cabinClass = dict["cabin_class"] as! String
        }
        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
            self.depCityCode = dict["dep_city_code"] as! String
        }
        if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
            self.depCityName = dict["dep_city_name"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
            self.flightNo = dict["flight_no"] as! String
        }
        if dict.keys.contains("need_multi_class_price") && dict["need_multi_class_price"] != nil {
            self.needMultiClassPrice = dict["need_multi_class_price"] as! Bool
        }
        if dict.keys.contains("transfer_city_code") && dict["transfer_city_code"] != nil {
            self.transferCityCode = dict["transfer_city_code"] as! String
        }
        if dict.keys.contains("transfer_flight_no") && dict["transfer_flight_no"] != nil {
            self.transferFlightNo = dict["transfer_flight_no"] as! String
        }
        if dict.keys.contains("transfer_leave_date") && dict["transfer_leave_date"] != nil {
            self.transferLeaveDate = dict["transfer_leave_date"] as! String
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! String
        }
    }
}

public class FlightSearchListResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineCode: String?

                public var airlineName: String?

                public var airlineSimpleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineName != nil {
                        map["airline_name"] = self.airlineName!
                    }
                    if self.airlineSimpleName != nil {
                        map["airline_simple_name"] = self.airlineSimpleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                        self.airlineName = dict["airline_name"] as! String
                    }
                    if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                        self.airlineSimpleName = dict["airline_simple_name"] as! String
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class CabinInfoList : Tea.TeaModel {
                public class FlightRuleList : Tea.TeaModel {
                    public class BaggageItem : Tea.TeaModel {
                        public class BaggageSubItems : Tea.TeaModel {
                            public class BaggageSubContentVisualizes : Tea.TeaModel {
                                public class Description_ : Tea.TeaModel {
                                    public var desc: String?

                                    public var icon: String?

                                    public var image: String?

                                    public var title: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.desc != nil {
                                            map["desc"] = self.desc!
                                        }
                                        if self.icon != nil {
                                            map["icon"] = self.icon!
                                        }
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.title != nil {
                                            map["title"] = self.title!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("desc") && dict["desc"] != nil {
                                            self.desc = dict["desc"] as! String
                                        }
                                        if dict.keys.contains("icon") && dict["icon"] != nil {
                                            self.icon = dict["icon"] as! String
                                        }
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("title") && dict["title"] != nil {
                                            self.title = dict["title"] as! String
                                        }
                                    }
                                }
                                public class ImageDO : Tea.TeaModel {
                                    public var image: String?

                                    public var largest: String?

                                    public var middle: String?

                                    public var smallest: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.largest != nil {
                                            map["largest"] = self.largest!
                                        }
                                        if self.middle != nil {
                                            map["middle"] = self.middle!
                                        }
                                        if self.smallest != nil {
                                            map["smallest"] = self.smallest!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("largest") && dict["largest"] != nil {
                                            self.largest = dict["largest"] as! String
                                        }
                                        if dict.keys.contains("middle") && dict["middle"] != nil {
                                            self.middle = dict["middle"] as! String
                                        }
                                        if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                            self.smallest = dict["smallest"] as! String
                                        }
                                    }
                                }
                                public var baggageDesc: [String]?

                                public var baggageSubContentType: Int32?

                                public var description_: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                                public var imageDO: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                                public var isHighlight: Bool?

                                public var subTitle: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.description_?.validate()
                                    try self.imageDO?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.baggageDesc != nil {
                                        map["baggage_desc"] = self.baggageDesc!
                                    }
                                    if self.baggageSubContentType != nil {
                                        map["baggage_sub_content_type"] = self.baggageSubContentType!
                                    }
                                    if self.description_ != nil {
                                        map["description"] = self.description_?.toMap()
                                    }
                                    if self.imageDO != nil {
                                        map["image_d_o"] = self.imageDO?.toMap()
                                    }
                                    if self.isHighlight != nil {
                                        map["is_highlight"] = self.isHighlight!
                                    }
                                    if self.subTitle != nil {
                                        map["sub_title"] = self.subTitle!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                        self.baggageDesc = dict["baggage_desc"] as! [String]
                                    }
                                    if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                        self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                    }
                                    if dict.keys.contains("description") && dict["description"] != nil {
                                        var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                        model.fromMap(dict["description"] as! [String: Any])
                                        self.description_ = model
                                    }
                                    if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                                        var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                        model.fromMap(dict["image_d_o"] as! [String: Any])
                                        self.imageDO = model
                                    }
                                    if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                        self.isHighlight = dict["is_highlight"] as! Bool
                                    }
                                    if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                        self.subTitle = dict["sub_title"] as! String
                                    }
                                }
                            }
                            public var baggageSubContentVisualizes: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes]?

                            public var extraContentVisualizes: [Any]?

                            public var isStruct: Bool?

                            public var ptc: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.baggageSubContentVisualizes != nil {
                                    var tmp : [Any] = []
                                    for k in self.baggageSubContentVisualizes! {
                                        tmp.append(k.toMap())
                                    }
                                    map["baggage_sub_content_visualizes"] = tmp
                                }
                                if self.extraContentVisualizes != nil {
                                    map["extra_content_visualizes"] = self.extraContentVisualizes!
                                }
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                    var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes] = []
                                    for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                        var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.baggageSubContentVisualizes = tmp
                                }
                                if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                                    self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                                }
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class Tips : Tea.TeaModel {
                            public var logo: String?

                            public var tipsDesc: String?

                            public var tipsImage: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.logo != nil {
                                    map["logo"] = self.logo!
                                }
                                if self.tipsDesc != nil {
                                    map["tips_desc"] = self.tipsDesc!
                                }
                                if self.tipsImage != nil {
                                    map["tips_image"] = self.tipsImage!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("logo") && dict["logo"] != nil {
                                    self.logo = dict["logo"] as! String
                                }
                                if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                    self.tipsDesc = dict["tips_desc"] as! String
                                }
                                if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                    self.tipsImage = dict["tips_image"] as! String
                                }
                            }
                        }
                        public var baggageSubItems: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems]?

                        public var index: Int32?

                        public var tableHead: String?

                        public var tips: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.Tips?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.tips?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_items"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.tips != nil {
                                map["tips"] = self.tips?.toMap()
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems] = []
                                for v in dict["baggage_sub_items"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.BaggageSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubItems = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("tips") && dict["tips"] != nil {
                                var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem.Tips()
                                model.fromMap(dict["tips"] as! [String: Any])
                                self.tips = model
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class ChangeRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class ChangeRuleItem : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                }
                            }
                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems]?

                        public var subTableHead: [String]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.subTableHead != nil {
                                map["sub_table_head"] = self.subTableHead!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                                self.subTableHead = dict["sub_table_head"] as! [String]
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class RefundRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class RefundRuleItem : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                }
                            }
                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems]?

                        public var subTableHead: [String]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.subTableHead != nil {
                                map["sub_table_head"] = self.subTableHead!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                                self.subTableHead = dict["sub_table_head"] as! [String]
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class SignRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class UpgradeRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public var baggageInfo: String?

                    public var baggageItem: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem?

                    public var changeRule: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule?

                    public var changeRuleItem: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem?

                    public var extra: String?

                    public var refundRule: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule?

                    public var refundRuleItem: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem?

                    public var signRule: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule?

                    public var tuigaiqianInfo: String?

                    public var upgradeRule: FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.baggageItem?.validate()
                        try self.changeRule?.validate()
                        try self.changeRuleItem?.validate()
                        try self.refundRule?.validate()
                        try self.refundRuleItem?.validate()
                        try self.signRule?.validate()
                        try self.upgradeRule?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageInfo != nil {
                            map["baggage_info"] = self.baggageInfo!
                        }
                        if self.baggageItem != nil {
                            map["baggage_item"] = self.baggageItem?.toMap()
                        }
                        if self.changeRule != nil {
                            map["change_rule"] = self.changeRule?.toMap()
                        }
                        if self.changeRuleItem != nil {
                            map["change_rule_item"] = self.changeRuleItem?.toMap()
                        }
                        if self.extra != nil {
                            map["extra"] = self.extra!
                        }
                        if self.refundRule != nil {
                            map["refund_rule"] = self.refundRule?.toMap()
                        }
                        if self.refundRuleItem != nil {
                            map["refund_rule_item"] = self.refundRuleItem?.toMap()
                        }
                        if self.signRule != nil {
                            map["sign_rule"] = self.signRule?.toMap()
                        }
                        if self.tuigaiqianInfo != nil {
                            map["tuigaiqian_info"] = self.tuigaiqianInfo!
                        }
                        if self.upgradeRule != nil {
                            map["upgrade_rule"] = self.upgradeRule?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_info") && dict["baggage_info"] != nil {
                            self.baggageInfo = dict["baggage_info"] as! String
                        }
                        if dict.keys.contains("baggage_item") && dict["baggage_item"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.BaggageItem()
                            model.fromMap(dict["baggage_item"] as! [String: Any])
                            self.baggageItem = model
                        }
                        if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRule()
                            model.fromMap(dict["change_rule"] as! [String: Any])
                            self.changeRule = model
                        }
                        if dict.keys.contains("change_rule_item") && dict["change_rule_item"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.ChangeRuleItem()
                            model.fromMap(dict["change_rule_item"] as! [String: Any])
                            self.changeRuleItem = model
                        }
                        if dict.keys.contains("extra") && dict["extra"] != nil {
                            self.extra = dict["extra"] as! String
                        }
                        if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRule()
                            model.fromMap(dict["refund_rule"] as! [String: Any])
                            self.refundRule = model
                        }
                        if dict.keys.contains("refund_rule_item") && dict["refund_rule_item"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.RefundRuleItem()
                            model.fromMap(dict["refund_rule_item"] as! [String: Any])
                            self.refundRuleItem = model
                        }
                        if dict.keys.contains("sign_rule") && dict["sign_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.SignRule()
                            model.fromMap(dict["sign_rule"] as! [String: Any])
                            self.signRule = model
                        }
                        if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                            self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                        }
                        if dict.keys.contains("upgrade_rule") && dict["upgrade_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList.UpgradeRule()
                            model.fromMap(dict["upgrade_rule"] as! [String: Any])
                            self.upgradeRule = model
                        }
                    }
                }
                public var agentId: Int64?

                public var basicCabinPrice: Int32?

                public var buildPrice: Int32?

                public var cabin: String?

                public var cabinClass: String?

                public var cabinClassName: String?

                public var childCabin: String?

                public var className: String?

                public var classRule: String?

                public var discount: String?

                public var flightRuleList: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList]?

                public var flightRuleListStr: String?

                public var invoiceType: Int32?

                public var isProtocol: Bool?

                public var memo: String?

                public var oilPrice: Int32?

                public var orderParams: String?

                public var otaItemId: String?

                public var price: Int32?

                public var productType: Int64?

                public var productTypeDesc: String?

                public var promotionPrice: String?

                public var remainedSeatCount: String?

                public var ticketPrice: Int32?

                public var totalPrice: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["agent_id"] = self.agentId!
                    }
                    if self.basicCabinPrice != nil {
                        map["basic_cabin_price"] = self.basicCabinPrice!
                    }
                    if self.buildPrice != nil {
                        map["build_price"] = self.buildPrice!
                    }
                    if self.cabin != nil {
                        map["cabin"] = self.cabin!
                    }
                    if self.cabinClass != nil {
                        map["cabin_class"] = self.cabinClass!
                    }
                    if self.cabinClassName != nil {
                        map["cabin_class_name"] = self.cabinClassName!
                    }
                    if self.childCabin != nil {
                        map["child_cabin"] = self.childCabin!
                    }
                    if self.className != nil {
                        map["class_name"] = self.className!
                    }
                    if self.classRule != nil {
                        map["class_rule"] = self.classRule!
                    }
                    if self.discount != nil {
                        map["discount"] = self.discount!
                    }
                    if self.flightRuleList != nil {
                        var tmp : [Any] = []
                        for k in self.flightRuleList! {
                            tmp.append(k.toMap())
                        }
                        map["flight_rule_list"] = tmp
                    }
                    if self.flightRuleListStr != nil {
                        map["flight_rule_list_str"] = self.flightRuleListStr!
                    }
                    if self.invoiceType != nil {
                        map["invoice_type"] = self.invoiceType!
                    }
                    if self.isProtocol != nil {
                        map["is_protocol"] = self.isProtocol!
                    }
                    if self.memo != nil {
                        map["memo"] = self.memo!
                    }
                    if self.oilPrice != nil {
                        map["oil_price"] = self.oilPrice!
                    }
                    if self.orderParams != nil {
                        map["order_params"] = self.orderParams!
                    }
                    if self.otaItemId != nil {
                        map["ota_item_id"] = self.otaItemId!
                    }
                    if self.price != nil {
                        map["price"] = self.price!
                    }
                    if self.productType != nil {
                        map["product_type"] = self.productType!
                    }
                    if self.productTypeDesc != nil {
                        map["product_type_desc"] = self.productTypeDesc!
                    }
                    if self.promotionPrice != nil {
                        map["promotion_price"] = self.promotionPrice!
                    }
                    if self.remainedSeatCount != nil {
                        map["remained_seat_count"] = self.remainedSeatCount!
                    }
                    if self.ticketPrice != nil {
                        map["ticket_price"] = self.ticketPrice!
                    }
                    if self.totalPrice != nil {
                        map["total_price"] = self.totalPrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("agent_id") && dict["agent_id"] != nil {
                        self.agentId = dict["agent_id"] as! Int64
                    }
                    if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                        self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
                    }
                    if dict.keys.contains("build_price") && dict["build_price"] != nil {
                        self.buildPrice = dict["build_price"] as! Int32
                    }
                    if dict.keys.contains("cabin") && dict["cabin"] != nil {
                        self.cabin = dict["cabin"] as! String
                    }
                    if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                        self.cabinClass = dict["cabin_class"] as! String
                    }
                    if dict.keys.contains("cabin_class_name") && dict["cabin_class_name"] != nil {
                        self.cabinClassName = dict["cabin_class_name"] as! String
                    }
                    if dict.keys.contains("child_cabin") && dict["child_cabin"] != nil {
                        self.childCabin = dict["child_cabin"] as! String
                    }
                    if dict.keys.contains("class_name") && dict["class_name"] != nil {
                        self.className = dict["class_name"] as! String
                    }
                    if dict.keys.contains("class_rule") && dict["class_rule"] != nil {
                        self.classRule = dict["class_rule"] as! String
                    }
                    if dict.keys.contains("discount") && dict["discount"] != nil {
                        self.discount = dict["discount"] as! String
                    }
                    if dict.keys.contains("flight_rule_list") && dict["flight_rule_list"] != nil {
                        var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList] = []
                        for v in dict["flight_rule_list"] as! [Any] {
                            var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList.FlightRuleList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.flightRuleList = tmp
                    }
                    if dict.keys.contains("flight_rule_list_str") && dict["flight_rule_list_str"] != nil {
                        self.flightRuleListStr = dict["flight_rule_list_str"] as! String
                    }
                    if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                        self.invoiceType = dict["invoice_type"] as! Int32
                    }
                    if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                        self.isProtocol = dict["is_protocol"] as! Bool
                    }
                    if dict.keys.contains("memo") && dict["memo"] != nil {
                        self.memo = dict["memo"] as! String
                    }
                    if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                        self.oilPrice = dict["oil_price"] as! Int32
                    }
                    if dict.keys.contains("order_params") && dict["order_params"] != nil {
                        self.orderParams = dict["order_params"] as! String
                    }
                    if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
                        self.otaItemId = dict["ota_item_id"] as! String
                    }
                    if dict.keys.contains("price") && dict["price"] != nil {
                        self.price = dict["price"] as! Int32
                    }
                    if dict.keys.contains("product_type") && dict["product_type"] != nil {
                        self.productType = dict["product_type"] as! Int64
                    }
                    if dict.keys.contains("product_type_desc") && dict["product_type_desc"] != nil {
                        self.productTypeDesc = dict["product_type_desc"] as! String
                    }
                    if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                        self.promotionPrice = dict["promotion_price"] as! String
                    }
                    if dict.keys.contains("remained_seat_count") && dict["remained_seat_count"] != nil {
                        self.remainedSeatCount = dict["remained_seat_count"] as! String
                    }
                    if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                        self.ticketPrice = dict["ticket_price"] as! Int32
                    }
                    if dict.keys.contains("total_price") && dict["total_price"] != nil {
                        self.totalPrice = dict["total_price"] as! Int32
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class FlightRuleList : Tea.TeaModel {
                public class BaggageItem : Tea.TeaModel {
                    public class BaggageSubItems : Tea.TeaModel {
                        public class BaggageSubContentVisualizes : Tea.TeaModel {
                            public class Description_ : Tea.TeaModel {
                                public var desc: String?

                                public var icon: String?

                                public var image: String?

                                public var title: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.desc != nil {
                                        map["desc"] = self.desc!
                                    }
                                    if self.icon != nil {
                                        map["icon"] = self.icon!
                                    }
                                    if self.image != nil {
                                        map["image"] = self.image!
                                    }
                                    if self.title != nil {
                                        map["title"] = self.title!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("desc") && dict["desc"] != nil {
                                        self.desc = dict["desc"] as! String
                                    }
                                    if dict.keys.contains("icon") && dict["icon"] != nil {
                                        self.icon = dict["icon"] as! String
                                    }
                                    if dict.keys.contains("image") && dict["image"] != nil {
                                        self.image = dict["image"] as! String
                                    }
                                    if dict.keys.contains("title") && dict["title"] != nil {
                                        self.title = dict["title"] as! String
                                    }
                                }
                            }
                            public class ImageDO : Tea.TeaModel {
                                public var image: String?

                                public var largest: String?

                                public var middle: String?

                                public var smallest: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.image != nil {
                                        map["image"] = self.image!
                                    }
                                    if self.largest != nil {
                                        map["largest"] = self.largest!
                                    }
                                    if self.middle != nil {
                                        map["middle"] = self.middle!
                                    }
                                    if self.smallest != nil {
                                        map["smallest"] = self.smallest!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("image") && dict["image"] != nil {
                                        self.image = dict["image"] as! String
                                    }
                                    if dict.keys.contains("largest") && dict["largest"] != nil {
                                        self.largest = dict["largest"] as! String
                                    }
                                    if dict.keys.contains("middle") && dict["middle"] != nil {
                                        self.middle = dict["middle"] as! String
                                    }
                                    if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                        self.smallest = dict["smallest"] as! String
                                    }
                                }
                            }
                            public var baggageDesc: [String]?

                            public var baggageSubContentType: Int32?

                            public var description_: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                            public var imageDO: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                            public var isHighlight: Bool?

                            public var subTitle: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.description_?.validate()
                                try self.imageDO?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.baggageDesc != nil {
                                    map["baggage_desc"] = self.baggageDesc!
                                }
                                if self.baggageSubContentType != nil {
                                    map["baggage_sub_content_type"] = self.baggageSubContentType!
                                }
                                if self.description_ != nil {
                                    map["description"] = self.description_?.toMap()
                                }
                                if self.imageDO != nil {
                                    map["image_d_o"] = self.imageDO?.toMap()
                                }
                                if self.isHighlight != nil {
                                    map["is_highlight"] = self.isHighlight!
                                }
                                if self.subTitle != nil {
                                    map["sub_title"] = self.subTitle!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                    self.baggageDesc = dict["baggage_desc"] as! [String]
                                }
                                if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                    self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                }
                                if dict.keys.contains("description") && dict["description"] != nil {
                                    var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                    model.fromMap(dict["description"] as! [String: Any])
                                    self.description_ = model
                                }
                                if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                                    var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                    model.fromMap(dict["image_d_o"] as! [String: Any])
                                    self.imageDO = model
                                }
                                if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                    self.isHighlight = dict["is_highlight"] as! Bool
                                }
                                if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                    self.subTitle = dict["sub_title"] as! String
                                }
                            }
                        }
                        public var baggageSubContentVisualizes: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes]?

                        public var extraContentVisualizes: [Any]?

                        public var isStruct: Bool?

                        public var ptc: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubContentVisualizes != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubContentVisualizes! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_content_visualizes"] = tmp
                            }
                            if self.extraContentVisualizes != nil {
                                map["extra_content_visualizes"] = self.extraContentVisualizes!
                            }
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes] = []
                                for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubContentVisualizes = tmp
                            }
                            if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                                self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                            }
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class Tips : Tea.TeaModel {
                        public var logo: String?

                        public var tipsDesc: String?

                        public var tipsImage: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.logo != nil {
                                map["logo"] = self.logo!
                            }
                            if self.tipsDesc != nil {
                                map["tips_desc"] = self.tipsDesc!
                            }
                            if self.tipsImage != nil {
                                map["tips_image"] = self.tipsImage!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("logo") && dict["logo"] != nil {
                                self.logo = dict["logo"] as! String
                            }
                            if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                self.tipsDesc = dict["tips_desc"] as! String
                            }
                            if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                self.tipsImage = dict["tips_image"] as! String
                            }
                        }
                    }
                    public var baggageSubItems: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems]?

                    public var index: Int32?

                    public var tableHead: String?

                    public var tips: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.Tips?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.tips?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.baggageSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["baggage_sub_items"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.tips != nil {
                            map["tips"] = self.tips?.toMap()
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems] = []
                            for v in dict["baggage_sub_items"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.BaggageSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.baggageSubItems = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("tips") && dict["tips"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem.Tips()
                            model.fromMap(dict["tips"] as! [String: Any])
                            self.tips = model
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class ChangeRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class ChangeRuleItem : Tea.TeaModel {
                    public class ExtraContents : Tea.TeaModel {
                        public var content: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class RefundSubItems : Tea.TeaModel {
                        public class RefundSubContents : Tea.TeaModel {
                            public var feeDesc: String?

                            public var feeRange: String?

                            public var style: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.feeDesc != nil {
                                    map["fee_desc"] = self.feeDesc!
                                }
                                if self.feeRange != nil {
                                    map["fee_range"] = self.feeRange!
                                }
                                if self.style != nil {
                                    map["style"] = self.style!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                    self.feeDesc = dict["fee_desc"] as! String
                                }
                                if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                    self.feeRange = dict["fee_range"] as! String
                                }
                                if dict.keys.contains("style") && dict["style"] != nil {
                                    self.style = dict["style"] as! Int32
                                }
                            }
                        }
                        public var isStruct: Bool?

                        public var ptc: String?

                        public var refundSubContents: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents]?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.refundSubContents != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubContents! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_contents"] = tmp
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents] = []
                                for v in dict["refund_sub_contents"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubContents = tmp
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var extraContents: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents]?

                    public var index: Int32?

                    public var refundSubItems: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems]?

                    public var subTableHead: [String]?

                    public var tableHead: String?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extraContents != nil {
                            var tmp : [Any] = []
                            for k in self.extraContents! {
                                tmp.append(k.toMap())
                            }
                            map["extra_contents"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.refundSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.refundSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["refund_sub_items"] = tmp
                        }
                        if self.subTableHead != nil {
                            map["sub_table_head"] = self.subTableHead!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents] = []
                            for v in dict["extra_contents"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.ExtraContents()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.extraContents = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems] = []
                            for v in dict["refund_sub_items"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem.RefundSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundSubItems = tmp
                        }
                        if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                            self.subTableHead = dict["sub_table_head"] as! [String]
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class RefundRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class RefundRuleItem : Tea.TeaModel {
                    public class ExtraContents : Tea.TeaModel {
                        public var content: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public class RefundSubItems : Tea.TeaModel {
                        public class RefundSubContents : Tea.TeaModel {
                            public var feeDesc: String?

                            public var feeRange: String?

                            public var style: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.feeDesc != nil {
                                    map["fee_desc"] = self.feeDesc!
                                }
                                if self.feeRange != nil {
                                    map["fee_range"] = self.feeRange!
                                }
                                if self.style != nil {
                                    map["style"] = self.style!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                    self.feeDesc = dict["fee_desc"] as! String
                                }
                                if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                    self.feeRange = dict["fee_range"] as! String
                                }
                                if dict.keys.contains("style") && dict["style"] != nil {
                                    self.style = dict["style"] as! Int32
                                }
                            }
                        }
                        public var isStruct: Bool?

                        public var ptc: String?

                        public var refundSubContents: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents]?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.isStruct != nil {
                                map["is_struct"] = self.isStruct!
                            }
                            if self.ptc != nil {
                                map["ptc"] = self.ptc!
                            }
                            if self.refundSubContents != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubContents! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_contents"] = tmp
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                self.isStruct = dict["is_struct"] as! Bool
                            }
                            if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                self.ptc = dict["ptc"] as! String
                            }
                            if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents] = []
                                for v in dict["refund_sub_contents"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubContents = tmp
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var extraContents: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents]?

                    public var index: Int32?

                    public var refundSubItems: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems]?

                    public var subTableHead: [String]?

                    public var tableHead: String?

                    public var title: String?

                    public var type: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extraContents != nil {
                            var tmp : [Any] = []
                            for k in self.extraContents! {
                                tmp.append(k.toMap())
                            }
                            map["extra_contents"] = tmp
                        }
                        if self.index != nil {
                            map["index"] = self.index!
                        }
                        if self.refundSubItems != nil {
                            var tmp : [Any] = []
                            for k in self.refundSubItems! {
                                tmp.append(k.toMap())
                            }
                            map["refund_sub_items"] = tmp
                        }
                        if self.subTableHead != nil {
                            map["sub_table_head"] = self.subTableHead!
                        }
                        if self.tableHead != nil {
                            map["table_head"] = self.tableHead!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        if self.type != nil {
                            map["type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents] = []
                            for v in dict["extra_contents"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.ExtraContents()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.extraContents = tmp
                        }
                        if dict.keys.contains("index") && dict["index"] != nil {
                            self.index = dict["index"] as! Int32
                        }
                        if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems] = []
                            for v in dict["refund_sub_items"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem.RefundSubItems()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundSubItems = tmp
                        }
                        if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                            self.subTableHead = dict["sub_table_head"] as! [String]
                        }
                        if dict.keys.contains("table_head") && dict["table_head"] != nil {
                            self.tableHead = dict["table_head"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                        if dict.keys.contains("type") && dict["type"] != nil {
                            self.type = dict["type"] as! Int32
                        }
                    }
                }
                public class SignRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.SignRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.SignRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.SignRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public class UpgradeRule : Tea.TeaModel {
                    public class Info : Tea.TeaModel {
                        public var content: String?

                        public var cost: Int32?

                        public var costPercent: Int32?

                        public var timeStamp: Int32?

                        public var timeType: String?

                        public var title: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.content != nil {
                                map["content"] = self.content!
                            }
                            if self.cost != nil {
                                map["cost"] = self.cost!
                            }
                            if self.costPercent != nil {
                                map["cost_percent"] = self.costPercent!
                            }
                            if self.timeStamp != nil {
                                map["time_stamp"] = self.timeStamp!
                            }
                            if self.timeType != nil {
                                map["time_type"] = self.timeType!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("content") && dict["content"] != nil {
                                self.content = dict["content"] as! String
                            }
                            if dict.keys.contains("cost") && dict["cost"] != nil {
                                self.cost = dict["cost"] as! Int32
                            }
                            if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                self.costPercent = dict["cost_percent"] as! Int32
                            }
                            if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                self.timeStamp = dict["time_stamp"] as! Int32
                            }
                            if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                self.timeType = dict["time_type"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                        }
                    }
                    public var able: Bool?

                    public var info: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.able != nil {
                            map["able"] = self.able!
                        }
                        if self.info != nil {
                            var tmp : [Any] = []
                            for k in self.info! {
                                tmp.append(k.toMap())
                            }
                            map["info"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("able") && dict["able"] != nil {
                            self.able = dict["able"] as! Bool
                        }
                        if dict.keys.contains("info") && dict["info"] != nil {
                            var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info] = []
                            for v in dict["info"] as! [Any] {
                                var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.UpgradeRule.Info()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.info = tmp
                        }
                    }
                }
                public var baggageInfo: String?

                public var baggageItem: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem?

                public var changeRule: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRule?

                public var changeRuleItem: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem?

                public var extra: String?

                public var refundRule: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRule?

                public var refundRuleItem: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem?

                public var signRule: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.SignRule?

                public var tuigaiqianInfo: String?

                public var upgradeRule: FlightSearchListResponseBody.Module.FlightList.FlightRuleList.UpgradeRule?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.baggageItem?.validate()
                    try self.changeRule?.validate()
                    try self.changeRuleItem?.validate()
                    try self.refundRule?.validate()
                    try self.refundRuleItem?.validate()
                    try self.signRule?.validate()
                    try self.upgradeRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.baggageInfo != nil {
                        map["baggage_info"] = self.baggageInfo!
                    }
                    if self.baggageItem != nil {
                        map["baggage_item"] = self.baggageItem?.toMap()
                    }
                    if self.changeRule != nil {
                        map["change_rule"] = self.changeRule?.toMap()
                    }
                    if self.changeRuleItem != nil {
                        map["change_rule_item"] = self.changeRuleItem?.toMap()
                    }
                    if self.extra != nil {
                        map["extra"] = self.extra!
                    }
                    if self.refundRule != nil {
                        map["refund_rule"] = self.refundRule?.toMap()
                    }
                    if self.refundRuleItem != nil {
                        map["refund_rule_item"] = self.refundRuleItem?.toMap()
                    }
                    if self.signRule != nil {
                        map["sign_rule"] = self.signRule?.toMap()
                    }
                    if self.tuigaiqianInfo != nil {
                        map["tuigaiqian_info"] = self.tuigaiqianInfo!
                    }
                    if self.upgradeRule != nil {
                        map["upgrade_rule"] = self.upgradeRule?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("baggage_info") && dict["baggage_info"] != nil {
                        self.baggageInfo = dict["baggage_info"] as! String
                    }
                    if dict.keys.contains("baggage_item") && dict["baggage_item"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.BaggageItem()
                        model.fromMap(dict["baggage_item"] as! [String: Any])
                        self.baggageItem = model
                    }
                    if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRule()
                        model.fromMap(dict["change_rule"] as! [String: Any])
                        self.changeRule = model
                    }
                    if dict.keys.contains("change_rule_item") && dict["change_rule_item"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.ChangeRuleItem()
                        model.fromMap(dict["change_rule_item"] as! [String: Any])
                        self.changeRuleItem = model
                    }
                    if dict.keys.contains("extra") && dict["extra"] != nil {
                        self.extra = dict["extra"] as! String
                    }
                    if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRule()
                        model.fromMap(dict["refund_rule"] as! [String: Any])
                        self.refundRule = model
                    }
                    if dict.keys.contains("refund_rule_item") && dict["refund_rule_item"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.RefundRuleItem()
                        model.fromMap(dict["refund_rule_item"] as! [String: Any])
                        self.refundRuleItem = model
                    }
                    if dict.keys.contains("sign_rule") && dict["sign_rule"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.SignRule()
                        model.fromMap(dict["sign_rule"] as! [String: Any])
                        self.signRule = model
                    }
                    if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                        self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                    }
                    if dict.keys.contains("upgrade_rule") && dict["upgrade_rule"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList.UpgradeRule()
                        model.fromMap(dict["upgrade_rule"] as! [String: Any])
                        self.upgradeRule = model
                    }
                }
            }
            public class TransferInfo : Tea.TeaModel {
                public class TransferAirlineInfo : Tea.TeaModel {
                    public var airlineCode: String?

                    public var airlineName: String?

                    public var airlineSimpleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineName != nil {
                            map["airline_name"] = self.airlineName!
                        }
                        if self.airlineSimpleName != nil {
                            map["airline_simple_name"] = self.airlineSimpleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                            self.airlineName = dict["airline_name"] as! String
                        }
                        if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                            self.airlineSimpleName = dict["airline_simple_name"] as! String
                        }
                    }
                }
                public class TransferArrAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var cityCode: String?

                    public var cityName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.cityCode != nil {
                            map["city_code"] = self.cityCode!
                        }
                        if self.cityName != nil {
                            map["city_name"] = self.cityName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("city_code") && dict["city_code"] != nil {
                            self.cityCode = dict["city_code"] as! String
                        }
                        if dict.keys.contains("city_name") && dict["city_name"] != nil {
                            self.cityName = dict["city_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class TransferDepAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var cityCode: String?

                    public var cityName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.cityCode != nil {
                            map["city_code"] = self.cityCode!
                        }
                        if self.cityName != nil {
                            map["city_name"] = self.cityName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("city_code") && dict["city_code"] != nil {
                            self.cityCode = dict["city_code"] as! String
                        }
                        if dict.keys.contains("city_name") && dict["city_name"] != nil {
                            self.cityName = dict["city_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class TransferFlightRuleList : Tea.TeaModel {
                    public class BaggageItem : Tea.TeaModel {
                        public class BaggageSubItems : Tea.TeaModel {
                            public class BaggageSubContentVisualizes : Tea.TeaModel {
                                public class Description_ : Tea.TeaModel {
                                    public var desc: String?

                                    public var icon: String?

                                    public var image: String?

                                    public var title: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.desc != nil {
                                            map["desc"] = self.desc!
                                        }
                                        if self.icon != nil {
                                            map["icon"] = self.icon!
                                        }
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.title != nil {
                                            map["title"] = self.title!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("desc") && dict["desc"] != nil {
                                            self.desc = dict["desc"] as! String
                                        }
                                        if dict.keys.contains("icon") && dict["icon"] != nil {
                                            self.icon = dict["icon"] as! String
                                        }
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("title") && dict["title"] != nil {
                                            self.title = dict["title"] as! String
                                        }
                                    }
                                }
                                public class ImageDO : Tea.TeaModel {
                                    public var image: String?

                                    public var largest: String?

                                    public var middle: String?

                                    public var smallest: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.largest != nil {
                                            map["largest"] = self.largest!
                                        }
                                        if self.middle != nil {
                                            map["middle"] = self.middle!
                                        }
                                        if self.smallest != nil {
                                            map["smallest"] = self.smallest!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("largest") && dict["largest"] != nil {
                                            self.largest = dict["largest"] as! String
                                        }
                                        if dict.keys.contains("middle") && dict["middle"] != nil {
                                            self.middle = dict["middle"] as! String
                                        }
                                        if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                            self.smallest = dict["smallest"] as! String
                                        }
                                    }
                                }
                                public var baggageDesc: [String]?

                                public var baggageSubContentType: Int32?

                                public var description_: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                                public var imageDO: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                                public var isHighlight: Bool?

                                public var subTitle: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.description_?.validate()
                                    try self.imageDO?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.baggageDesc != nil {
                                        map["baggage_desc"] = self.baggageDesc!
                                    }
                                    if self.baggageSubContentType != nil {
                                        map["baggage_sub_content_type"] = self.baggageSubContentType!
                                    }
                                    if self.description_ != nil {
                                        map["description"] = self.description_?.toMap()
                                    }
                                    if self.imageDO != nil {
                                        map["image_d_o"] = self.imageDO?.toMap()
                                    }
                                    if self.isHighlight != nil {
                                        map["is_highlight"] = self.isHighlight!
                                    }
                                    if self.subTitle != nil {
                                        map["sub_title"] = self.subTitle!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                        self.baggageDesc = dict["baggage_desc"] as! [String]
                                    }
                                    if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                        self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                    }
                                    if dict.keys.contains("description") && dict["description"] != nil {
                                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                        model.fromMap(dict["description"] as! [String: Any])
                                        self.description_ = model
                                    }
                                    if dict.keys.contains("image_d_o") && dict["image_d_o"] != nil {
                                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                        model.fromMap(dict["image_d_o"] as! [String: Any])
                                        self.imageDO = model
                                    }
                                    if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                        self.isHighlight = dict["is_highlight"] as! Bool
                                    }
                                    if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                        self.subTitle = dict["sub_title"] as! String
                                    }
                                }
                            }
                            public var baggageSubContentVisualizes: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes]?

                            public var extraContentVisualizes: [Any]?

                            public var isStruct: Bool?

                            public var ptc: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.baggageSubContentVisualizes != nil {
                                    var tmp : [Any] = []
                                    for k in self.baggageSubContentVisualizes! {
                                        tmp.append(k.toMap())
                                    }
                                    map["baggage_sub_content_visualizes"] = tmp
                                }
                                if self.extraContentVisualizes != nil {
                                    map["extra_content_visualizes"] = self.extraContentVisualizes!
                                }
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                    var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes] = []
                                    for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems.BaggageSubContentVisualizes()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.baggageSubContentVisualizes = tmp
                                }
                                if dict.keys.contains("extra_content_visualizes") && dict["extra_content_visualizes"] != nil {
                                    self.extraContentVisualizes = dict["extra_content_visualizes"] as! [Any]
                                }
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class Tips : Tea.TeaModel {
                            public var logo: String?

                            public var tipsDesc: String?

                            public var tipsImage: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.logo != nil {
                                    map["logo"] = self.logo!
                                }
                                if self.tipsDesc != nil {
                                    map["tips_desc"] = self.tipsDesc!
                                }
                                if self.tipsImage != nil {
                                    map["tips_image"] = self.tipsImage!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("logo") && dict["logo"] != nil {
                                    self.logo = dict["logo"] as! String
                                }
                                if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                    self.tipsDesc = dict["tips_desc"] as! String
                                }
                                if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                    self.tipsImage = dict["tips_image"] as! String
                                }
                            }
                        }
                        public var baggageSubItems: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems]?

                        public var index: Int32?

                        public var tableHead: String?

                        public var tips: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.Tips?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.tips?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_items"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.tips != nil {
                                map["tips"] = self.tips?.toMap()
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems] = []
                                for v in dict["baggage_sub_items"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.BaggageSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubItems = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("tips") && dict["tips"] != nil {
                                var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem.Tips()
                                model.fromMap(dict["tips"] as! [String: Any])
                                self.tips = model
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class ChangeRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class ChangeRuleItem : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                }
                            }
                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.RefundSubItems]?

                        public var subTableHead: [String]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.subTableHead != nil {
                                map["sub_table_head"] = self.subTableHead!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                                self.subTableHead = dict["sub_table_head"] as! [String]
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class RefundRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class RefundRuleItem : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                }
                            }
                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.RefundSubItems]?

                        public var subTableHead: [String]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.subTableHead != nil {
                                map["sub_table_head"] = self.subTableHead!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("sub_table_head") && dict["sub_table_head"] != nil {
                                self.subTableHead = dict["sub_table_head"] as! [String]
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class SignRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.SignRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.SignRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.SignRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public class UpgradeRule : Tea.TeaModel {
                        public class Info : Tea.TeaModel {
                            public var content: String?

                            public var cost: Int32?

                            public var costPercent: Int32?

                            public var timeStamp: Int32?

                            public var timeType: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.cost != nil {
                                    map["cost"] = self.cost!
                                }
                                if self.costPercent != nil {
                                    map["cost_percent"] = self.costPercent!
                                }
                                if self.timeStamp != nil {
                                    map["time_stamp"] = self.timeStamp!
                                }
                                if self.timeType != nil {
                                    map["time_type"] = self.timeType!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("cost") && dict["cost"] != nil {
                                    self.cost = dict["cost"] as! Int32
                                }
                                if dict.keys.contains("cost_percent") && dict["cost_percent"] != nil {
                                    self.costPercent = dict["cost_percent"] as! Int32
                                }
                                if dict.keys.contains("time_stamp") && dict["time_stamp"] != nil {
                                    self.timeStamp = dict["time_stamp"] as! Int32
                                }
                                if dict.keys.contains("time_type") && dict["time_type"] != nil {
                                    self.timeType = dict["time_type"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var able: Bool?

                        public var info: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.UpgradeRule.Info]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.able != nil {
                                map["able"] = self.able!
                            }
                            if self.info != nil {
                                var tmp : [Any] = []
                                for k in self.info! {
                                    tmp.append(k.toMap())
                                }
                                map["info"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("able") && dict["able"] != nil {
                                self.able = dict["able"] as! Bool
                            }
                            if dict.keys.contains("info") && dict["info"] != nil {
                                var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.UpgradeRule.Info] = []
                                for v in dict["info"] as! [Any] {
                                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.UpgradeRule.Info()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.info = tmp
                            }
                        }
                    }
                    public var baggageInfo: String?

                    public var baggageItem: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem?

                    public var changeRule: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRule?

                    public var changeRuleItem: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem?

                    public var extra: String?

                    public var refundRule: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRule?

                    public var refundRuleItem: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem?

                    public var signRule: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.SignRule?

                    public var tuigaiqianInfo: String?

                    public var upgradeRule: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.UpgradeRule?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.baggageItem?.validate()
                        try self.changeRule?.validate()
                        try self.changeRuleItem?.validate()
                        try self.refundRule?.validate()
                        try self.refundRuleItem?.validate()
                        try self.signRule?.validate()
                        try self.upgradeRule?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageInfo != nil {
                            map["baggage_info"] = self.baggageInfo!
                        }
                        if self.baggageItem != nil {
                            map["baggage_item"] = self.baggageItem?.toMap()
                        }
                        if self.changeRule != nil {
                            map["change_rule"] = self.changeRule?.toMap()
                        }
                        if self.changeRuleItem != nil {
                            map["change_rule_item"] = self.changeRuleItem?.toMap()
                        }
                        if self.extra != nil {
                            map["extra"] = self.extra!
                        }
                        if self.refundRule != nil {
                            map["refund_rule"] = self.refundRule?.toMap()
                        }
                        if self.refundRuleItem != nil {
                            map["refund_rule_item"] = self.refundRuleItem?.toMap()
                        }
                        if self.signRule != nil {
                            map["sign_rule"] = self.signRule?.toMap()
                        }
                        if self.tuigaiqianInfo != nil {
                            map["tuigaiqian_info"] = self.tuigaiqianInfo!
                        }
                        if self.upgradeRule != nil {
                            map["upgrade_rule"] = self.upgradeRule?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_info") && dict["baggage_info"] != nil {
                            self.baggageInfo = dict["baggage_info"] as! String
                        }
                        if dict.keys.contains("baggage_item") && dict["baggage_item"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.BaggageItem()
                            model.fromMap(dict["baggage_item"] as! [String: Any])
                            self.baggageItem = model
                        }
                        if dict.keys.contains("change_rule") && dict["change_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRule()
                            model.fromMap(dict["change_rule"] as! [String: Any])
                            self.changeRule = model
                        }
                        if dict.keys.contains("change_rule_item") && dict["change_rule_item"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.ChangeRuleItem()
                            model.fromMap(dict["change_rule_item"] as! [String: Any])
                            self.changeRuleItem = model
                        }
                        if dict.keys.contains("extra") && dict["extra"] != nil {
                            self.extra = dict["extra"] as! String
                        }
                        if dict.keys.contains("refund_rule") && dict["refund_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRule()
                            model.fromMap(dict["refund_rule"] as! [String: Any])
                            self.refundRule = model
                        }
                        if dict.keys.contains("refund_rule_item") && dict["refund_rule_item"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.RefundRuleItem()
                            model.fromMap(dict["refund_rule_item"] as! [String: Any])
                            self.refundRuleItem = model
                        }
                        if dict.keys.contains("sign_rule") && dict["sign_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.SignRule()
                            model.fromMap(dict["sign_rule"] as! [String: Any])
                            self.signRule = model
                        }
                        if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                            self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                        }
                        if dict.keys.contains("upgrade_rule") && dict["upgrade_rule"] != nil {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList.UpgradeRule()
                            model.fromMap(dict["upgrade_rule"] as! [String: Any])
                            self.upgradeRule = model
                        }
                    }
                }
                public var flightSize: String?

                public var flightType: String?

                public var transferAirlineInfo: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferAirlineInfo?

                public var transferArrAirportInfo: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferArrAirportInfo?

                public var transferArrDate: String?

                public var transferDepAirportInfo: FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferDepAirportInfo?

                public var transferDepDate: String?

                public var transferFlightNo: String?

                public var transferFlightRuleList: [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.transferAirlineInfo?.validate()
                    try self.transferArrAirportInfo?.validate()
                    try self.transferDepAirportInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.flightSize != nil {
                        map["flight_size"] = self.flightSize!
                    }
                    if self.flightType != nil {
                        map["flight_type"] = self.flightType!
                    }
                    if self.transferAirlineInfo != nil {
                        map["transfer_airline_info"] = self.transferAirlineInfo?.toMap()
                    }
                    if self.transferArrAirportInfo != nil {
                        map["transfer_arr_airport_info"] = self.transferArrAirportInfo?.toMap()
                    }
                    if self.transferArrDate != nil {
                        map["transfer_arr_date"] = self.transferArrDate!
                    }
                    if self.transferDepAirportInfo != nil {
                        map["transfer_dep_airport_info"] = self.transferDepAirportInfo?.toMap()
                    }
                    if self.transferDepDate != nil {
                        map["transfer_dep_date"] = self.transferDepDate!
                    }
                    if self.transferFlightNo != nil {
                        map["transfer_flight_no"] = self.transferFlightNo!
                    }
                    if self.transferFlightRuleList != nil {
                        var tmp : [Any] = []
                        for k in self.transferFlightRuleList! {
                            tmp.append(k.toMap())
                        }
                        map["transfer_flight_rule_list"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                        self.flightSize = dict["flight_size"] as! String
                    }
                    if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                        self.flightType = dict["flight_type"] as! String
                    }
                    if dict.keys.contains("transfer_airline_info") && dict["transfer_airline_info"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferAirlineInfo()
                        model.fromMap(dict["transfer_airline_info"] as! [String: Any])
                        self.transferAirlineInfo = model
                    }
                    if dict.keys.contains("transfer_arr_airport_info") && dict["transfer_arr_airport_info"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferArrAirportInfo()
                        model.fromMap(dict["transfer_arr_airport_info"] as! [String: Any])
                        self.transferArrAirportInfo = model
                    }
                    if dict.keys.contains("transfer_arr_date") && dict["transfer_arr_date"] != nil {
                        self.transferArrDate = dict["transfer_arr_date"] as! String
                    }
                    if dict.keys.contains("transfer_dep_airport_info") && dict["transfer_dep_airport_info"] != nil {
                        var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferDepAirportInfo()
                        model.fromMap(dict["transfer_dep_airport_info"] as! [String: Any])
                        self.transferDepAirportInfo = model
                    }
                    if dict.keys.contains("transfer_dep_date") && dict["transfer_dep_date"] != nil {
                        self.transferDepDate = dict["transfer_dep_date"] as! String
                    }
                    if dict.keys.contains("transfer_flight_no") && dict["transfer_flight_no"] != nil {
                        self.transferFlightNo = dict["transfer_flight_no"] as! String
                    }
                    if dict.keys.contains("transfer_flight_rule_list") && dict["transfer_flight_rule_list"] != nil {
                        var tmp : [FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList] = []
                        for v in dict["transfer_flight_rule_list"] as! [Any] {
                            var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo.TransferFlightRuleList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.transferFlightRuleList = tmp
                    }
                }
            }
            public var airlineInfo: FlightSearchListResponseBody.Module.FlightList.AirlineInfo?

            public var arrAirportInfo: FlightSearchListResponseBody.Module.FlightList.ArrAirportInfo?

            public var arrDate: String?

            public var basicCabinPrice: Int32?

            public var buildPrice: Int32?

            public var cabin: String?

            public var cabinClass: String?

            public var cabinInfoList: [FlightSearchListResponseBody.Module.FlightList.CabinInfoList]?

            public var carrierAirline: String?

            public var carrierNo: String?

            public var classRule: String?

            public var depAirportInfo: FlightSearchListResponseBody.Module.FlightList.DepAirportInfo?

            public var depCityCode: String?

            public var depDate: String?

            public var discount: Int32?

            public var flightNo: String?

            public var flightRuleList: [FlightSearchListResponseBody.Module.FlightList.FlightRuleList]?

            public var flightRuleListStr: String?

            public var flightSize: String?

            public var flightType: String?

            public var invoiceType: Int32?

            public var isProtocol: Bool?

            public var isShare: Bool?

            public var isStop: Bool?

            public var isTransfer: Bool?

            public var mealDesc: String?

            public var memo: String?

            public var oilPrice: Int32?

            public var otaItemId: String?

            public var price: Int32?

            public var productType: Int64?

            public var productTypeDesc: String?

            public var promotionPrice: String?

            public var remainedSeatCount: String?

            public var secretParams: String?

            public var segmentNumber: String?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public var ticketPrice: Int32?

            public var totalPrice: String?

            public var transferInfo: FlightSearchListResponseBody.Module.FlightList.TransferInfo?

            public var tripType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
                try self.transferInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.basicCabinPrice != nil {
                    map["basic_cabin_price"] = self.basicCabinPrice!
                }
                if self.buildPrice != nil {
                    map["build_price"] = self.buildPrice!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.cabinInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.cabinInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["cabin_info_list"] = tmp
                }
                if self.carrierAirline != nil {
                    map["carrier_airline"] = self.carrierAirline!
                }
                if self.carrierNo != nil {
                    map["carrier_no"] = self.carrierNo!
                }
                if self.classRule != nil {
                    map["class_rule"] = self.classRule!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightRuleList != nil {
                    var tmp : [Any] = []
                    for k in self.flightRuleList! {
                        tmp.append(k.toMap())
                    }
                    map["flight_rule_list"] = tmp
                }
                if self.flightRuleListStr != nil {
                    map["flight_rule_list_str"] = self.flightRuleListStr!
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.invoiceType != nil {
                    map["invoice_type"] = self.invoiceType!
                }
                if self.isProtocol != nil {
                    map["is_protocol"] = self.isProtocol!
                }
                if self.isShare != nil {
                    map["is_share"] = self.isShare!
                }
                if self.isStop != nil {
                    map["is_stop"] = self.isStop!
                }
                if self.isTransfer != nil {
                    map["is_transfer"] = self.isTransfer!
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.memo != nil {
                    map["memo"] = self.memo!
                }
                if self.oilPrice != nil {
                    map["oil_price"] = self.oilPrice!
                }
                if self.otaItemId != nil {
                    map["ota_item_id"] = self.otaItemId!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.productType != nil {
                    map["product_type"] = self.productType!
                }
                if self.productTypeDesc != nil {
                    map["product_type_desc"] = self.productTypeDesc!
                }
                if self.promotionPrice != nil {
                    map["promotion_price"] = self.promotionPrice!
                }
                if self.remainedSeatCount != nil {
                    map["remained_seat_count"] = self.remainedSeatCount!
                }
                if self.secretParams != nil {
                    map["secret_params"] = self.secretParams!
                }
                if self.segmentNumber != nil {
                    map["segment_number"] = self.segmentNumber!
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.totalPrice != nil {
                    map["total_price"] = self.totalPrice!
                }
                if self.transferInfo != nil {
                    map["transfer_info"] = self.transferInfo?.toMap()
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = FlightSearchListResponseBody.Module.FlightList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = FlightSearchListResponseBody.Module.FlightList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("basic_cabin_price") && dict["basic_cabin_price"] != nil {
                    self.basicCabinPrice = dict["basic_cabin_price"] as! Int32
                }
                if dict.keys.contains("build_price") && dict["build_price"] != nil {
                    self.buildPrice = dict["build_price"] as! Int32
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("cabin_info_list") && dict["cabin_info_list"] != nil {
                    var tmp : [FlightSearchListResponseBody.Module.FlightList.CabinInfoList] = []
                    for v in dict["cabin_info_list"] as! [Any] {
                        var model = FlightSearchListResponseBody.Module.FlightList.CabinInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.cabinInfoList = tmp
                }
                if dict.keys.contains("carrier_airline") && dict["carrier_airline"] != nil {
                    self.carrierAirline = dict["carrier_airline"] as! String
                }
                if dict.keys.contains("carrier_no") && dict["carrier_no"] != nil {
                    self.carrierNo = dict["carrier_no"] as! String
                }
                if dict.keys.contains("class_rule") && dict["class_rule"] != nil {
                    self.classRule = dict["class_rule"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = FlightSearchListResponseBody.Module.FlightList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! Int32
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_rule_list") && dict["flight_rule_list"] != nil {
                    var tmp : [FlightSearchListResponseBody.Module.FlightList.FlightRuleList] = []
                    for v in dict["flight_rule_list"] as! [Any] {
                        var model = FlightSearchListResponseBody.Module.FlightList.FlightRuleList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightRuleList = tmp
                }
                if dict.keys.contains("flight_rule_list_str") && dict["flight_rule_list_str"] != nil {
                    self.flightRuleListStr = dict["flight_rule_list_str"] as! String
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                    self.invoiceType = dict["invoice_type"] as! Int32
                }
                if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                    self.isProtocol = dict["is_protocol"] as! Bool
                }
                if dict.keys.contains("is_share") && dict["is_share"] != nil {
                    self.isShare = dict["is_share"] as! Bool
                }
                if dict.keys.contains("is_stop") && dict["is_stop"] != nil {
                    self.isStop = dict["is_stop"] as! Bool
                }
                if dict.keys.contains("is_transfer") && dict["is_transfer"] != nil {
                    self.isTransfer = dict["is_transfer"] as! Bool
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("memo") && dict["memo"] != nil {
                    self.memo = dict["memo"] as! String
                }
                if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                    self.oilPrice = dict["oil_price"] as! Int32
                }
                if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
                    self.otaItemId = dict["ota_item_id"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int32
                }
                if dict.keys.contains("product_type") && dict["product_type"] != nil {
                    self.productType = dict["product_type"] as! Int64
                }
                if dict.keys.contains("product_type_desc") && dict["product_type_desc"] != nil {
                    self.productTypeDesc = dict["product_type_desc"] as! String
                }
                if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                    self.promotionPrice = dict["promotion_price"] as! String
                }
                if dict.keys.contains("remained_seat_count") && dict["remained_seat_count"] != nil {
                    self.remainedSeatCount = dict["remained_seat_count"] as! String
                }
                if dict.keys.contains("secret_params") && dict["secret_params"] != nil {
                    self.secretParams = dict["secret_params"] as! String
                }
                if dict.keys.contains("segment_number") && dict["segment_number"] != nil {
                    self.segmentNumber = dict["segment_number"] as! String
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int32
                }
                if dict.keys.contains("total_price") && dict["total_price"] != nil {
                    self.totalPrice = dict["total_price"] as! String
                }
                if dict.keys.contains("transfer_info") && dict["transfer_info"] != nil {
                    var model = FlightSearchListResponseBody.Module.FlightList.TransferInfo()
                    model.fromMap(dict["transfer_info"] as! [String: Any])
                    self.transferInfo = model
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! Int32
                }
            }
        }
        public var flightList: [FlightSearchListResponseBody.Module.FlightList]?

        public var isReplacePnr: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightList != nil {
                var tmp : [Any] = []
                for k in self.flightList! {
                    tmp.append(k.toMap())
                }
                map["flight_list"] = tmp
            }
            if self.isReplacePnr != nil {
                map["is_replace_pnr"] = self.isReplacePnr!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_list") && dict["flight_list"] != nil {
                var tmp : [FlightSearchListResponseBody.Module.FlightList] = []
                for v in dict["flight_list"] as! [Any] {
                    var model = FlightSearchListResponseBody.Module.FlightList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightList = tmp
            }
            if dict.keys.contains("is_replace_pnr") && dict["is_replace_pnr"] != nil {
                self.isReplacePnr = dict["is_replace_pnr"] as! Bool
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: FlightSearchListResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = FlightSearchListResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class FlightSearchListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FlightSearchListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = FlightSearchListResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GroupCorpTokenHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripAccessToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripAccessToken != nil {
            map["x-acs-btrip-access-token"] = self.xAcsBtripAccessToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-access-token") && dict["x-acs-btrip-access-token"] != nil {
            self.xAcsBtripAccessToken = dict["x-acs-btrip-access-token"] as! String
        }
    }
}

public class GroupCorpTokenRequest : Tea.TeaModel {
    public var appSecret: String?

    public var corpId: String?

    public var subCorpId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appSecret != nil {
            map["app_secret"] = self.appSecret!
        }
        if self.corpId != nil {
            map["corp_id"] = self.corpId!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("app_secret") && dict["app_secret"] != nil {
            self.appSecret = dict["app_secret"] as! String
        }
        if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
            self.corpId = dict["corp_id"] as! String
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
    }
}

public class GroupCorpTokenResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var expire: Int64?

        public var start: Int64?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expire != nil {
                map["expire"] = self.expire!
            }
            if self.start != nil {
                map["start"] = self.start!
            }
            if self.token != nil {
                map["token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("expire") && dict["expire"] != nil {
                self.expire = dict["expire"] as! Int64
            }
            if dict.keys.contains("start") && dict["start"] != nil {
                self.start = dict["start"] as! Int64
            }
            if dict.keys.contains("token") && dict["token"] != nil {
                self.token = dict["token"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: GroupCorpTokenResponseBody.Module?

    public var requestId: String?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = GroupCorpTokenResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class GroupCorpTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GroupCorpTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = GroupCorpTokenResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GroupDepartSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class GroupDepartSaveRequest : Tea.TeaModel {
    public var deptName: String?

    public var managerIds: String?

    public var outerDeptId: String?

    public var outerDeptPid: String?

    public var status: Int32?

    public var subCorpIdList: [String]?

    public var syncGroup: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deptName != nil {
            map["dept_name"] = self.deptName!
        }
        if self.managerIds != nil {
            map["manager_ids"] = self.managerIds!
        }
        if self.outerDeptId != nil {
            map["outer_dept_id"] = self.outerDeptId!
        }
        if self.outerDeptPid != nil {
            map["outer_dept_pid"] = self.outerDeptPid!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpIdList != nil {
            map["sub_corp_id_list"] = self.subCorpIdList!
        }
        if self.syncGroup != nil {
            map["sync_group"] = self.syncGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dept_name") && dict["dept_name"] != nil {
            self.deptName = dict["dept_name"] as! String
        }
        if dict.keys.contains("manager_ids") && dict["manager_ids"] != nil {
            self.managerIds = dict["manager_ids"] as! String
        }
        if dict.keys.contains("outer_dept_id") && dict["outer_dept_id"] != nil {
            self.outerDeptId = dict["outer_dept_id"] as! String
        }
        if dict.keys.contains("outer_dept_pid") && dict["outer_dept_pid"] != nil {
            self.outerDeptPid = dict["outer_dept_pid"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id_list") && dict["sub_corp_id_list"] != nil {
            self.subCorpIdList = dict["sub_corp_id_list"] as! [String]
        }
        if dict.keys.contains("sync_group") && dict["sync_group"] != nil {
            self.syncGroup = dict["sync_group"] as! Bool
        }
    }
}

public class GroupDepartSaveShrinkRequest : Tea.TeaModel {
    public var deptName: String?

    public var managerIds: String?

    public var outerDeptId: String?

    public var outerDeptPid: String?

    public var status: Int32?

    public var subCorpIdListShrink: String?

    public var syncGroup: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deptName != nil {
            map["dept_name"] = self.deptName!
        }
        if self.managerIds != nil {
            map["manager_ids"] = self.managerIds!
        }
        if self.outerDeptId != nil {
            map["outer_dept_id"] = self.outerDeptId!
        }
        if self.outerDeptPid != nil {
            map["outer_dept_pid"] = self.outerDeptPid!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.subCorpIdListShrink != nil {
            map["sub_corp_id_list"] = self.subCorpIdListShrink!
        }
        if self.syncGroup != nil {
            map["sync_group"] = self.syncGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dept_name") && dict["dept_name"] != nil {
            self.deptName = dict["dept_name"] as! String
        }
        if dict.keys.contains("manager_ids") && dict["manager_ids"] != nil {
            self.managerIds = dict["manager_ids"] as! String
        }
        if dict.keys.contains("outer_dept_id") && dict["outer_dept_id"] != nil {
            self.outerDeptId = dict["outer_dept_id"] as! String
        }
        if dict.keys.contains("outer_dept_pid") && dict["outer_dept_pid"] != nil {
            self.outerDeptPid = dict["outer_dept_pid"] as! String
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("sub_corp_id_list") && dict["sub_corp_id_list"] != nil {
            self.subCorpIdListShrink = dict["sub_corp_id_list"] as! String
        }
        if dict.keys.contains("sync_group") && dict["sync_group"] != nil {
            self.syncGroup = dict["sync_group"] as! Bool
        }
    }
}

public class GroupDepartSaveResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class GroupDepartSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GroupDepartSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = GroupDepartSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GroupUserSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class GroupUserSaveRequest : Tea.TeaModel {
    public class CertList : Tea.TeaModel {
        public var certExpiredTime: String?

        public var certNation: String?

        public var certNo: String?

        public var certType: Int32?

        public var nationality: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certExpiredTime != nil {
                map["cert_expired_time"] = self.certExpiredTime!
            }
            if self.certNation != nil {
                map["cert_nation"] = self.certNation!
            }
            if self.certNo != nil {
                map["cert_no"] = self.certNo!
            }
            if self.certType != nil {
                map["cert_type"] = self.certType!
            }
            if self.nationality != nil {
                map["nationality"] = self.nationality!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cert_expired_time") && dict["cert_expired_time"] != nil {
                self.certExpiredTime = dict["cert_expired_time"] as! String
            }
            if dict.keys.contains("cert_nation") && dict["cert_nation"] != nil {
                self.certNation = dict["cert_nation"] as! String
            }
            if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                self.certNo = dict["cert_no"] as! String
            }
            if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                self.certType = dict["cert_type"] as! Int32
            }
            if dict.keys.contains("nationality") && dict["nationality"] != nil {
                self.nationality = dict["nationality"] as! String
            }
        }
    }
    public class SubCorpIdList : Tea.TeaModel {
        public var departIds: [String]?

        public var email: String?

        public var leaveStatus: Int32?

        public var managerUserId: String?

        public var positionLevel: String?

        public var subCorpId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.departIds != nil {
                map["depart_ids"] = self.departIds!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.leaveStatus != nil {
                map["leave_status"] = self.leaveStatus!
            }
            if self.managerUserId != nil {
                map["manager_user_id"] = self.managerUserId!
            }
            if self.positionLevel != nil {
                map["position_level"] = self.positionLevel!
            }
            if self.subCorpId != nil {
                map["sub_corp_id"] = self.subCorpId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("depart_ids") && dict["depart_ids"] != nil {
                self.departIds = dict["depart_ids"] as! [String]
            }
            if dict.keys.contains("email") && dict["email"] != nil {
                self.email = dict["email"] as! String
            }
            if dict.keys.contains("leave_status") && dict["leave_status"] != nil {
                self.leaveStatus = dict["leave_status"] as! Int32
            }
            if dict.keys.contains("manager_user_id") && dict["manager_user_id"] != nil {
                self.managerUserId = dict["manager_user_id"] as! String
            }
            if dict.keys.contains("position_level") && dict["position_level"] != nil {
                self.positionLevel = dict["position_level"] as! String
            }
            if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
                self.subCorpId = dict["sub_corp_id"] as! String
            }
        }
    }
    public var baseCityCode: String?

    public var birthday: String?

    public var certList: [GroupUserSaveRequest.CertList]?

    public var gender: String?

    public var jobNo: String?

    public var phone: String?

    public var realNameEn: String?

    public var subCorpIdList: [GroupUserSaveRequest.SubCorpIdList]?

    public var userId: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseCityCode != nil {
            map["base_city_code"] = self.baseCityCode!
        }
        if self.birthday != nil {
            map["birthday"] = self.birthday!
        }
        if self.certList != nil {
            var tmp : [Any] = []
            for k in self.certList! {
                tmp.append(k.toMap())
            }
            map["cert_list"] = tmp
        }
        if self.gender != nil {
            map["gender"] = self.gender!
        }
        if self.jobNo != nil {
            map["job_no"] = self.jobNo!
        }
        if self.phone != nil {
            map["phone"] = self.phone!
        }
        if self.realNameEn != nil {
            map["real_name_en"] = self.realNameEn!
        }
        if self.subCorpIdList != nil {
            var tmp : [Any] = []
            for k in self.subCorpIdList! {
                tmp.append(k.toMap())
            }
            map["sub_corp_id_list"] = tmp
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("base_city_code") && dict["base_city_code"] != nil {
            self.baseCityCode = dict["base_city_code"] as! String
        }
        if dict.keys.contains("birthday") && dict["birthday"] != nil {
            self.birthday = dict["birthday"] as! String
        }
        if dict.keys.contains("cert_list") && dict["cert_list"] != nil {
            var tmp : [GroupUserSaveRequest.CertList] = []
            for v in dict["cert_list"] as! [Any] {
                var model = GroupUserSaveRequest.CertList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.certList = tmp
        }
        if dict.keys.contains("gender") && dict["gender"] != nil {
            self.gender = dict["gender"] as! String
        }
        if dict.keys.contains("job_no") && dict["job_no"] != nil {
            self.jobNo = dict["job_no"] as! String
        }
        if dict.keys.contains("phone") && dict["phone"] != nil {
            self.phone = dict["phone"] as! String
        }
        if dict.keys.contains("real_name_en") && dict["real_name_en"] != nil {
            self.realNameEn = dict["real_name_en"] as! String
        }
        if dict.keys.contains("sub_corp_id_list") && dict["sub_corp_id_list"] != nil {
            var tmp : [GroupUserSaveRequest.SubCorpIdList] = []
            for v in dict["sub_corp_id_list"] as! [Any] {
                var model = GroupUserSaveRequest.SubCorpIdList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.subCorpIdList = tmp
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
    }
}

public class GroupUserSaveShrinkRequest : Tea.TeaModel {
    public var baseCityCode: String?

    public var birthday: String?

    public var certListShrink: String?

    public var gender: String?

    public var jobNo: String?

    public var phone: String?

    public var realNameEn: String?

    public var subCorpIdListShrink: String?

    public var userId: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseCityCode != nil {
            map["base_city_code"] = self.baseCityCode!
        }
        if self.birthday != nil {
            map["birthday"] = self.birthday!
        }
        if self.certListShrink != nil {
            map["cert_list"] = self.certListShrink!
        }
        if self.gender != nil {
            map["gender"] = self.gender!
        }
        if self.jobNo != nil {
            map["job_no"] = self.jobNo!
        }
        if self.phone != nil {
            map["phone"] = self.phone!
        }
        if self.realNameEn != nil {
            map["real_name_en"] = self.realNameEn!
        }
        if self.subCorpIdListShrink != nil {
            map["sub_corp_id_list"] = self.subCorpIdListShrink!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("base_city_code") && dict["base_city_code"] != nil {
            self.baseCityCode = dict["base_city_code"] as! String
        }
        if dict.keys.contains("birthday") && dict["birthday"] != nil {
            self.birthday = dict["birthday"] as! String
        }
        if dict.keys.contains("cert_list") && dict["cert_list"] != nil {
            self.certListShrink = dict["cert_list"] as! String
        }
        if dict.keys.contains("gender") && dict["gender"] != nil {
            self.gender = dict["gender"] as! String
        }
        if dict.keys.contains("job_no") && dict["job_no"] != nil {
            self.jobNo = dict["job_no"] as! String
        }
        if dict.keys.contains("phone") && dict["phone"] != nil {
            self.phone = dict["phone"] as! String
        }
        if dict.keys.contains("real_name_en") && dict["real_name_en"] != nil {
            self.realNameEn = dict["real_name_en"] as! String
        }
        if dict.keys.contains("sub_corp_id_list") && dict["sub_corp_id_list"] != nil {
            self.subCorpIdListShrink = dict["sub_corp_id_list"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
    }
}

public class GroupUserSaveResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class GroupUserSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GroupUserSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = GroupUserSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelAskingPriceHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelAskingPriceRequest : Tea.TeaModel {
    public var adultNum: String?

    public var btripUserId: String?

    public var checkInDate: String?

    public var checkOutDate: String?

    public var cityCode: String?

    public var cityName: String?

    public var dir: Int32?

    public var hotelStar: String?

    public var isProtocol: Bool?

    public var paymentType: Int32?

    public var shids: [Int64]?

    public var sortCode: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adultNum != nil {
            map["adult_num"] = self.adultNum!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkInDate != nil {
            map["check_in_date"] = self.checkInDate!
        }
        if self.checkOutDate != nil {
            map["check_out_date"] = self.checkOutDate!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.cityName != nil {
            map["city_name"] = self.cityName!
        }
        if self.dir != nil {
            map["dir"] = self.dir!
        }
        if self.hotelStar != nil {
            map["hotel_star"] = self.hotelStar!
        }
        if self.isProtocol != nil {
            map["is_protocol"] = self.isProtocol!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        if self.shids != nil {
            map["shids"] = self.shids!
        }
        if self.sortCode != nil {
            map["sort_code"] = self.sortCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("adult_num") && dict["adult_num"] != nil {
            self.adultNum = dict["adult_num"] as! String
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
            self.checkInDate = dict["check_in_date"] as! String
        }
        if dict.keys.contains("check_out_date") && dict["check_out_date"] != nil {
            self.checkOutDate = dict["check_out_date"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! String
        }
        if dict.keys.contains("city_name") && dict["city_name"] != nil {
            self.cityName = dict["city_name"] as! String
        }
        if dict.keys.contains("dir") && dict["dir"] != nil {
            self.dir = dict["dir"] as! Int32
        }
        if dict.keys.contains("hotel_star") && dict["hotel_star"] != nil {
            self.hotelStar = dict["hotel_star"] as! String
        }
        if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
            self.isProtocol = dict["is_protocol"] as! Bool
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
        if dict.keys.contains("shids") && dict["shids"] != nil {
            self.shids = dict["shids"] as! [Int64]
        }
        if dict.keys.contains("sort_code") && dict["sort_code"] != nil {
            self.sortCode = dict["sort_code"] as! Int32
        }
    }
}

public class HotelAskingPriceShrinkRequest : Tea.TeaModel {
    public var adultNum: String?

    public var btripUserId: String?

    public var checkInDate: String?

    public var checkOutDate: String?

    public var cityCode: String?

    public var cityName: String?

    public var dir: Int32?

    public var hotelStar: String?

    public var isProtocol: Bool?

    public var paymentType: Int32?

    public var shidsShrink: String?

    public var sortCode: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adultNum != nil {
            map["adult_num"] = self.adultNum!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkInDate != nil {
            map["check_in_date"] = self.checkInDate!
        }
        if self.checkOutDate != nil {
            map["check_out_date"] = self.checkOutDate!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.cityName != nil {
            map["city_name"] = self.cityName!
        }
        if self.dir != nil {
            map["dir"] = self.dir!
        }
        if self.hotelStar != nil {
            map["hotel_star"] = self.hotelStar!
        }
        if self.isProtocol != nil {
            map["is_protocol"] = self.isProtocol!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        if self.shidsShrink != nil {
            map["shids"] = self.shidsShrink!
        }
        if self.sortCode != nil {
            map["sort_code"] = self.sortCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("adult_num") && dict["adult_num"] != nil {
            self.adultNum = dict["adult_num"] as! String
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
            self.checkInDate = dict["check_in_date"] as! String
        }
        if dict.keys.contains("check_out_date") && dict["check_out_date"] != nil {
            self.checkOutDate = dict["check_out_date"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! String
        }
        if dict.keys.contains("city_name") && dict["city_name"] != nil {
            self.cityName = dict["city_name"] as! String
        }
        if dict.keys.contains("dir") && dict["dir"] != nil {
            self.dir = dict["dir"] as! Int32
        }
        if dict.keys.contains("hotel_star") && dict["hotel_star"] != nil {
            self.hotelStar = dict["hotel_star"] as! String
        }
        if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
            self.isProtocol = dict["is_protocol"] as! Bool
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
        if dict.keys.contains("shids") && dict["shids"] != nil {
            self.shidsShrink = dict["shids"] as! String
        }
        if dict.keys.contains("sort_code") && dict["sort_code"] != nil {
            self.sortCode = dict["sort_code"] as! Int32
        }
    }
}

public class HotelAskingPriceResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class HotelAskingPriceDetails : Tea.TeaModel {
            public var cityCode: String?

            public var hotelAddress: String?

            public var hotelCode: String?

            public var hotelName: String?

            public var isProtocol: Bool?

            public var minPrice: Double?

            public var originalMinPrice: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.hotelAddress != nil {
                    map["hotel_address"] = self.hotelAddress!
                }
                if self.hotelCode != nil {
                    map["hotel_code"] = self.hotelCode!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.isProtocol != nil {
                    map["is_protocol"] = self.isProtocol!
                }
                if self.minPrice != nil {
                    map["min_price"] = self.minPrice!
                }
                if self.originalMinPrice != nil {
                    map["original_min_price"] = self.originalMinPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("hotel_address") && dict["hotel_address"] != nil {
                    self.hotelAddress = dict["hotel_address"] as! String
                }
                if dict.keys.contains("hotel_code") && dict["hotel_code"] != nil {
                    self.hotelCode = dict["hotel_code"] as! String
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                    self.isProtocol = dict["is_protocol"] as! Bool
                }
                if dict.keys.contains("min_price") && dict["min_price"] != nil {
                    self.minPrice = dict["min_price"] as! Double
                }
                if dict.keys.contains("original_min_price") && dict["original_min_price"] != nil {
                    self.originalMinPrice = dict["original_min_price"] as! Double
                }
            }
        }
        public var hotelAskingPriceDetails: [HotelAskingPriceResponseBody.Module.HotelAskingPriceDetails]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hotelAskingPriceDetails != nil {
                var tmp : [Any] = []
                for k in self.hotelAskingPriceDetails! {
                    tmp.append(k.toMap())
                }
                map["hotel_asking_price_details"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("hotel_asking_price_details") && dict["hotel_asking_price_details"] != nil {
                var tmp : [HotelAskingPriceResponseBody.Module.HotelAskingPriceDetails] = []
                for v in dict["hotel_asking_price_details"] as! [Any] {
                    var model = HotelAskingPriceResponseBody.Module.HotelAskingPriceDetails()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelAskingPriceDetails = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelAskingPriceResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelAskingPriceResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelAskingPriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelAskingPriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelAskingPriceResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class HotelBillSettlementQueryRequest : Tea.TeaModel {
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class HotelBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var averageNights: String?

            public var billRecordTime: String?

            public var bookReason: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var brandGroup: String?

            public var brandName: String?

            public var businessTripResult: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var checkInDate: String?

            public var checkoutDate: String?

            public var city: String?

            public var cityCode: String?

            public var cityCounty: String?

            public var cityCountyCode: String?

            public var corpRefundFee: Double?

            public var corpTotalFee: Double?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var department: String?

            public var departmentId: String?

            public var exceedReason: String?

            public var feeType: String?

            public var fees: Double?

            public var fines: Double?

            public var fuPointFee: Double?

            public var hotelName: String?

            public var index: String?

            public var invoiceTitle: String?

            public var isEarlyDeparture: String?

            public var isNegotiation: String?

            public var isShareStr: String?

            public var nights: Int32?

            public var orderId: String?

            public var orderPrice: Double?

            public var orderType: String?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var personRefundFee: Double?

            public var personSettlePrice: Double?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var promotionFee: Double?

            public var remark: String?

            public var reserveRule: String?

            public var roomNo: String?

            public var roomNumber: Int32?

            public var roomPrice: Double?

            public var roomType: String?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var star: String?

            public var status: Int32?

            public var taxRate: String?

            public var thirdItineraryId: String?

            public var totalNights: Int32?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberTypeName: String?

            public var travelerName: String?

            public var voucherType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.averageNights != nil {
                    map["average_nights"] = self.averageNights!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookReason != nil {
                    map["book_reason"] = self.bookReason!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.brandGroup != nil {
                    map["brand_group"] = self.brandGroup!
                }
                if self.brandName != nil {
                    map["brand_name"] = self.brandName!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.checkInDate != nil {
                    map["check_in_date"] = self.checkInDate!
                }
                if self.checkoutDate != nil {
                    map["checkout_date"] = self.checkoutDate!
                }
                if self.city != nil {
                    map["city"] = self.city!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityCounty != nil {
                    map["city_county"] = self.cityCounty!
                }
                if self.cityCountyCode != nil {
                    map["city_county_code"] = self.cityCountyCode!
                }
                if self.corpRefundFee != nil {
                    map["corp_refund_fee"] = self.corpRefundFee!
                }
                if self.corpTotalFee != nil {
                    map["corp_total_fee"] = self.corpTotalFee!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.fees != nil {
                    map["fees"] = self.fees!
                }
                if self.fines != nil {
                    map["fines"] = self.fines!
                }
                if self.fuPointFee != nil {
                    map["fu_point_fee"] = self.fuPointFee!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.isEarlyDeparture != nil {
                    map["is_early_departure"] = self.isEarlyDeparture!
                }
                if self.isNegotiation != nil {
                    map["is_negotiation"] = self.isNegotiation!
                }
                if self.isShareStr != nil {
                    map["is_share_str"] = self.isShareStr!
                }
                if self.nights != nil {
                    map["nights"] = self.nights!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderPrice != nil {
                    map["order_price"] = self.orderPrice!
                }
                if self.orderType != nil {
                    map["order_type"] = self.orderType!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.personRefundFee != nil {
                    map["person_refund_fee"] = self.personRefundFee!
                }
                if self.personSettlePrice != nil {
                    map["person_settle_price"] = self.personSettlePrice!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.promotionFee != nil {
                    map["promotion_fee"] = self.promotionFee!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.reserveRule != nil {
                    map["reserve_rule"] = self.reserveRule!
                }
                if self.roomNo != nil {
                    map["room_no"] = self.roomNo!
                }
                if self.roomNumber != nil {
                    map["room_number"] = self.roomNumber!
                }
                if self.roomPrice != nil {
                    map["room_price"] = self.roomPrice!
                }
                if self.roomType != nil {
                    map["room_type"] = self.roomType!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.star != nil {
                    map["star"] = self.star!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.totalNights != nil {
                    map["total_nights"] = self.totalNights!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberTypeName != nil {
                    map["traveler_member_type_name"] = self.travelerMemberTypeName!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("average_nights") && dict["average_nights"] != nil {
                    self.averageNights = dict["average_nights"] as! String
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_reason") && dict["book_reason"] != nil {
                    self.bookReason = dict["book_reason"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("brand_group") && dict["brand_group"] != nil {
                    self.brandGroup = dict["brand_group"] as! String
                }
                if dict.keys.contains("brand_name") && dict["brand_name"] != nil {
                    self.brandName = dict["brand_name"] as! String
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
                    self.checkInDate = dict["check_in_date"] as! String
                }
                if dict.keys.contains("checkout_date") && dict["checkout_date"] != nil {
                    self.checkoutDate = dict["checkout_date"] as! String
                }
                if dict.keys.contains("city") && dict["city"] != nil {
                    self.city = dict["city"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_county") && dict["city_county"] != nil {
                    self.cityCounty = dict["city_county"] as! String
                }
                if dict.keys.contains("city_county_code") && dict["city_county_code"] != nil {
                    self.cityCountyCode = dict["city_county_code"] as! String
                }
                if dict.keys.contains("corp_refund_fee") && dict["corp_refund_fee"] != nil {
                    self.corpRefundFee = dict["corp_refund_fee"] as! Double
                }
                if dict.keys.contains("corp_total_fee") && dict["corp_total_fee"] != nil {
                    self.corpTotalFee = dict["corp_total_fee"] as! Double
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("fees") && dict["fees"] != nil {
                    self.fees = dict["fees"] as! Double
                }
                if dict.keys.contains("fines") && dict["fines"] != nil {
                    self.fines = dict["fines"] as! Double
                }
                if dict.keys.contains("fu_point_fee") && dict["fu_point_fee"] != nil {
                    self.fuPointFee = dict["fu_point_fee"] as! Double
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("is_early_departure") && dict["is_early_departure"] != nil {
                    self.isEarlyDeparture = dict["is_early_departure"] as! String
                }
                if dict.keys.contains("is_negotiation") && dict["is_negotiation"] != nil {
                    self.isNegotiation = dict["is_negotiation"] as! String
                }
                if dict.keys.contains("is_share_str") && dict["is_share_str"] != nil {
                    self.isShareStr = dict["is_share_str"] as! String
                }
                if dict.keys.contains("nights") && dict["nights"] != nil {
                    self.nights = dict["nights"] as! Int32
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_price") && dict["order_price"] != nil {
                    self.orderPrice = dict["order_price"] as! Double
                }
                if dict.keys.contains("order_type") && dict["order_type"] != nil {
                    self.orderType = dict["order_type"] as! String
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("person_refund_fee") && dict["person_refund_fee"] != nil {
                    self.personRefundFee = dict["person_refund_fee"] as! Double
                }
                if dict.keys.contains("person_settle_price") && dict["person_settle_price"] != nil {
                    self.personSettlePrice = dict["person_settle_price"] as! Double
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("promotion_fee") && dict["promotion_fee"] != nil {
                    self.promotionFee = dict["promotion_fee"] as! Double
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("reserve_rule") && dict["reserve_rule"] != nil {
                    self.reserveRule = dict["reserve_rule"] as! String
                }
                if dict.keys.contains("room_no") && dict["room_no"] != nil {
                    self.roomNo = dict["room_no"] as! String
                }
                if dict.keys.contains("room_number") && dict["room_number"] != nil {
                    self.roomNumber = dict["room_number"] as! Int32
                }
                if dict.keys.contains("room_price") && dict["room_price"] != nil {
                    self.roomPrice = dict["room_price"] as! Double
                }
                if dict.keys.contains("room_type") && dict["room_type"] != nil {
                    self.roomType = dict["room_type"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("star") && dict["star"] != nil {
                    self.star = dict["star"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("total_nights") && dict["total_nights"] != nil {
                    self.totalNights = dict["total_nights"] as! Int32
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type_name") && dict["traveler_member_type_name"] != nil {
                    self.travelerMemberTypeName = dict["traveler_member_type_name"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var dataList: [HotelBillSettlementQueryResponseBody.Module.DataList]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["data_list"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalNum != nil {
                map["total_num"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("data_list") && dict["data_list"] != nil {
                var tmp : [HotelBillSettlementQueryResponseBody.Module.DataList] = []
                for v in dict["data_list"] as! [Any] {
                    var model = HotelBillSettlementQueryResponseBody.Module.DataList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.dataList = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_num") && dict["total_num"] != nil {
                self.totalNum = dict["total_num"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelCityCodeListHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelCityCodeListRequest : Tea.TeaModel {
    public var countryCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.countryCode != nil {
            map["country_code"] = self.countryCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("country_code") && dict["country_code"] != nil {
            self.countryCode = dict["country_code"] as! String
        }
    }
}

public class HotelCityCodeListResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Citys : Tea.TeaModel {
            public class Districts : Tea.TeaModel {
                public var districtCode: String?

                public var districtName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.districtCode != nil {
                        map["district_code"] = self.districtCode!
                    }
                    if self.districtName != nil {
                        map["district_name"] = self.districtName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("district_code") && dict["district_code"] != nil {
                        self.districtCode = dict["district_code"] as! String
                    }
                    if dict.keys.contains("district_name") && dict["district_name"] != nil {
                        self.districtName = dict["district_name"] as! String
                    }
                }
            }
            public var cityCode: String?

            public var cityName: String?

            public var districts: [HotelCityCodeListResponseBody.Module.Citys.Districts]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.districts != nil {
                    var tmp : [Any] = []
                    for k in self.districts! {
                        tmp.append(k.toMap())
                    }
                    map["districts"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("districts") && dict["districts"] != nil {
                    var tmp : [HotelCityCodeListResponseBody.Module.Citys.Districts] = []
                    for v in dict["districts"] as! [Any] {
                        var model = HotelCityCodeListResponseBody.Module.Citys.Districts()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.districts = tmp
                }
            }
        }
        public var citys: [HotelCityCodeListResponseBody.Module.Citys]?

        public var proviceCode: String?

        public var provinceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.citys != nil {
                var tmp : [Any] = []
                for k in self.citys! {
                    tmp.append(k.toMap())
                }
                map["citys"] = tmp
            }
            if self.proviceCode != nil {
                map["provice_code"] = self.proviceCode!
            }
            if self.provinceName != nil {
                map["province_name"] = self.provinceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("citys") && dict["citys"] != nil {
                var tmp : [HotelCityCodeListResponseBody.Module.Citys] = []
                for v in dict["citys"] as! [Any] {
                    var model = HotelCityCodeListResponseBody.Module.Citys()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.citys = tmp
            }
            if dict.keys.contains("provice_code") && dict["provice_code"] != nil {
                self.proviceCode = dict["provice_code"] as! String
            }
            if dict.keys.contains("province_name") && dict["province_name"] != nil {
                self.provinceName = dict["province_name"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [HotelCityCodeListResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [HotelCityCodeListResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = HotelCityCodeListResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelCityCodeListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelCityCodeListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelCityCodeListResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelExceedApplyQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class HotelExceedApplyQueryRequest : Tea.TeaModel {
    public var applyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
    }
}

public class HotelExceedApplyQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ApplyIntentionInfoDo : Tea.TeaModel {
            public var checkIn: String?

            public var checkOut: String?

            public var cityCode: String?

            public var cityName: String?

            public var price: Int64?

            public var together: Bool?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkIn != nil {
                    map["check_in"] = self.checkIn!
                }
                if self.checkOut != nil {
                    map["check_out"] = self.checkOut!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.together != nil {
                    map["together"] = self.together!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("check_in") && dict["check_in"] != nil {
                    self.checkIn = dict["check_in"] as! String
                }
                if dict.keys.contains("check_out") && dict["check_out"] != nil {
                    self.checkOut = dict["check_out"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("together") && dict["together"] != nil {
                    self.together = dict["together"] as! Bool
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public var applyId: Int64?

        public var applyIntentionInfoDo: HotelExceedApplyQueryResponseBody.Module.ApplyIntentionInfoDo?

        public var btripCause: String?

        public var corpId: String?

        public var exceedReason: String?

        public var exceedType: Int32?

        public var originStandard: String?

        public var status: Int32?

        public var submitTime: String?

        public var thirdpartApplyId: String?

        public var thirdpartCorpId: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.applyIntentionInfoDo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.applyIntentionInfoDo != nil {
                map["apply_intention_info_do"] = self.applyIntentionInfoDo?.toMap()
            }
            if self.btripCause != nil {
                map["btrip_cause"] = self.btripCause!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.exceedReason != nil {
                map["exceed_reason"] = self.exceedReason!
            }
            if self.exceedType != nil {
                map["exceed_type"] = self.exceedType!
            }
            if self.originStandard != nil {
                map["origin_standard"] = self.originStandard!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.submitTime != nil {
                map["submit_time"] = self.submitTime!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartCorpId != nil {
                map["thirdpart_corp_id"] = self.thirdpartCorpId!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("apply_intention_info_do") && dict["apply_intention_info_do"] != nil {
                var model = HotelExceedApplyQueryResponseBody.Module.ApplyIntentionInfoDo()
                model.fromMap(dict["apply_intention_info_do"] as! [String: Any])
                self.applyIntentionInfoDo = model
            }
            if dict.keys.contains("btrip_cause") && dict["btrip_cause"] != nil {
                self.btripCause = dict["btrip_cause"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                self.exceedReason = dict["exceed_reason"] as! String
            }
            if dict.keys.contains("exceed_type") && dict["exceed_type"] != nil {
                self.exceedType = dict["exceed_type"] as! Int32
            }
            if dict.keys.contains("origin_standard") && dict["origin_standard"] != nil {
                self.originStandard = dict["origin_standard"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("submit_time") && dict["submit_time"] != nil {
                self.submitTime = dict["submit_time"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_corp_id") && dict["thirdpart_corp_id"] != nil {
                self.thirdpartCorpId = dict["thirdpart_corp_id"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelExceedApplyQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelExceedApplyQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelExceedApplyQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelExceedApplyQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelExceedApplyQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelGoodsQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelGoodsQueryRequest : Tea.TeaModel {
    public var adultNum: String?

    public var agreementPrice: Bool?

    public var beginDate: String?

    public var breakfastIncluded: Bool?

    public var btripUserId: String?

    public var cityCode: String?

    public var endDate: String?

    public var hotelId: String?

    public var payOverType: Int32?

    public var paymentType: Int32?

    public var specialInvoice: Bool?

    public var superMan: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adultNum != nil {
            map["adult_num"] = self.adultNum!
        }
        if self.agreementPrice != nil {
            map["agreement_price"] = self.agreementPrice!
        }
        if self.beginDate != nil {
            map["begin_date"] = self.beginDate!
        }
        if self.breakfastIncluded != nil {
            map["breakfast_included"] = self.breakfastIncluded!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.endDate != nil {
            map["end_date"] = self.endDate!
        }
        if self.hotelId != nil {
            map["hotel_id"] = self.hotelId!
        }
        if self.payOverType != nil {
            map["pay_over_type"] = self.payOverType!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        if self.specialInvoice != nil {
            map["special_invoice"] = self.specialInvoice!
        }
        if self.superMan != nil {
            map["super_man"] = self.superMan!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("adult_num") && dict["adult_num"] != nil {
            self.adultNum = dict["adult_num"] as! String
        }
        if dict.keys.contains("agreement_price") && dict["agreement_price"] != nil {
            self.agreementPrice = dict["agreement_price"] as! Bool
        }
        if dict.keys.contains("begin_date") && dict["begin_date"] != nil {
            self.beginDate = dict["begin_date"] as! String
        }
        if dict.keys.contains("breakfast_included") && dict["breakfast_included"] != nil {
            self.breakfastIncluded = dict["breakfast_included"] as! Bool
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! String
        }
        if dict.keys.contains("end_date") && dict["end_date"] != nil {
            self.endDate = dict["end_date"] as! String
        }
        if dict.keys.contains("hotel_id") && dict["hotel_id"] != nil {
            self.hotelId = dict["hotel_id"] as! String
        }
        if dict.keys.contains("pay_over_type") && dict["pay_over_type"] != nil {
            self.payOverType = dict["pay_over_type"] as! Int32
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
        if dict.keys.contains("special_invoice") && dict["special_invoice"] != nil {
            self.specialInvoice = dict["special_invoice"] as! Bool
        }
        if dict.keys.contains("super_man") && dict["super_man"] != nil {
            self.superMan = dict["super_man"] as! Int32
        }
    }
}

public class HotelGoodsQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Rooms : Tea.TeaModel {
            public class Rates : Tea.TeaModel {
                public class BtripCancelRule : Tea.TeaModel {
                    public class BtripHotelCancelPolicyDTO : Tea.TeaModel {
                        public class BtripHotelCancelPolicyInfoDTOList : Tea.TeaModel {
                            public var hour: Int64?

                            public var value: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.hour != nil {
                                    map["hour"] = self.hour!
                                }
                                if self.value != nil {
                                    map["value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("hour") && dict["hour"] != nil {
                                    self.hour = dict["hour"] as! Int64
                                }
                                if dict.keys.contains("value") && dict["value"] != nil {
                                    self.value = dict["value"] as! Int64
                                }
                            }
                        }
                        public var btripHotelCancelPolicyInfoDTOList: [HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList]?

                        public var cancelPolicyType: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.btripHotelCancelPolicyInfoDTOList != nil {
                                var tmp : [Any] = []
                                for k in self.btripHotelCancelPolicyInfoDTOList! {
                                    tmp.append(k.toMap())
                                }
                                map["btrip_hotel_cancel_policy_info_d_t_o_list"] = tmp
                            }
                            if self.cancelPolicyType != nil {
                                map["cancel_policy_type"] = self.cancelPolicyType!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("btrip_hotel_cancel_policy_info_d_t_o_list") && dict["btrip_hotel_cancel_policy_info_d_t_o_list"] != nil {
                                var tmp : [HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList] = []
                                for v in dict["btrip_hotel_cancel_policy_info_d_t_o_list"] as! [Any] {
                                    var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.btripHotelCancelPolicyInfoDTOList = tmp
                            }
                            if dict.keys.contains("cancel_policy_type") && dict["cancel_policy_type"] != nil {
                                self.cancelPolicyType = dict["cancel_policy_type"] as! Int32
                            }
                        }
                    }
                    public var btripHotelCancelPolicyDTO: HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule.BtripHotelCancelPolicyDTO?

                    public var cancelPolicyTitle: String?

                    public var checkIn: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.btripHotelCancelPolicyDTO?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.btripHotelCancelPolicyDTO != nil {
                            map["btrip_hotel_cancel_policy_d_t_o"] = self.btripHotelCancelPolicyDTO?.toMap()
                        }
                        if self.cancelPolicyTitle != nil {
                            map["cancel_policy_title"] = self.cancelPolicyTitle!
                        }
                        if self.checkIn != nil {
                            map["check_in"] = self.checkIn!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("btrip_hotel_cancel_policy_d_t_o") && dict["btrip_hotel_cancel_policy_d_t_o"] != nil {
                            var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule.BtripHotelCancelPolicyDTO()
                            model.fromMap(dict["btrip_hotel_cancel_policy_d_t_o"] as! [String: Any])
                            self.btripHotelCancelPolicyDTO = model
                        }
                        if dict.keys.contains("cancel_policy_title") && dict["cancel_policy_title"] != nil {
                            self.cancelPolicyTitle = dict["cancel_policy_title"] as! String
                        }
                        if dict.keys.contains("check_in") && dict["check_in"] != nil {
                            self.checkIn = dict["check_in"] as! String
                        }
                    }
                }
                public class BtripHotelCancelDesc : Tea.TeaModel {
                    public var desc: String?

                    public var title: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.desc != nil {
                            map["desc"] = self.desc!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("desc") && dict["desc"] != nil {
                            self.desc = dict["desc"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                    }
                }
                public class DiscountDesc : Tea.TeaModel {
                    public class DiscountDetail : Tea.TeaModel {
                        public var labelName: [String]?

                        public var moneyDesc: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.labelName != nil {
                                map["label_name"] = self.labelName!
                            }
                            if self.moneyDesc != nil {
                                map["money_desc"] = self.moneyDesc!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("label_name") && dict["label_name"] != nil {
                                self.labelName = dict["label_name"] as! [String]
                            }
                            if dict.keys.contains("money_desc") && dict["money_desc"] != nil {
                                self.moneyDesc = dict["money_desc"] as! String
                            }
                        }
                    }
                    public var cashReduceTotal: String?

                    public var dinamicLabel: String?

                    public var discountDetail: [HotelGoodsQueryResponseBody.Module.Rooms.Rates.DiscountDesc.DiscountDetail]?

                    public var subTitle: String?

                    public var title: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cashReduceTotal != nil {
                            map["cash_reduce_total"] = self.cashReduceTotal!
                        }
                        if self.dinamicLabel != nil {
                            map["dinamic_label"] = self.dinamicLabel!
                        }
                        if self.discountDetail != nil {
                            var tmp : [Any] = []
                            for k in self.discountDetail! {
                                tmp.append(k.toMap())
                            }
                            map["discount_detail"] = tmp
                        }
                        if self.subTitle != nil {
                            map["sub_title"] = self.subTitle!
                        }
                        if self.title != nil {
                            map["title"] = self.title!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("cash_reduce_total") && dict["cash_reduce_total"] != nil {
                            self.cashReduceTotal = dict["cash_reduce_total"] as! String
                        }
                        if dict.keys.contains("dinamic_label") && dict["dinamic_label"] != nil {
                            self.dinamicLabel = dict["dinamic_label"] as! String
                        }
                        if dict.keys.contains("discount_detail") && dict["discount_detail"] != nil {
                            var tmp : [HotelGoodsQueryResponseBody.Module.Rooms.Rates.DiscountDesc.DiscountDetail] = []
                            for v in dict["discount_detail"] as! [Any] {
                                var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.DiscountDesc.DiscountDetail()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.discountDetail = tmp
                        }
                        if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                            self.subTitle = dict["sub_title"] as! String
                        }
                        if dict.keys.contains("title") && dict["title"] != nil {
                            self.title = dict["title"] as! String
                        }
                    }
                }
                public class HotelDetailRatePriceDTO : Tea.TeaModel {
                    public var beforeDiscountPrice: Int64?

                    public var breakfast: String?

                    public var discountPrice: Int64?

                    public var lastDiscountsPrice: Int64?

                    public var lastDiscountsRoundingPrice: Int64?

                    public var lastNum: Int32?

                    public var rateStartTime: String?

                    public var status: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.beforeDiscountPrice != nil {
                            map["before_discount_price"] = self.beforeDiscountPrice!
                        }
                        if self.breakfast != nil {
                            map["breakfast"] = self.breakfast!
                        }
                        if self.discountPrice != nil {
                            map["discount_price"] = self.discountPrice!
                        }
                        if self.lastDiscountsPrice != nil {
                            map["last_discounts_price"] = self.lastDiscountsPrice!
                        }
                        if self.lastDiscountsRoundingPrice != nil {
                            map["last_discounts_rounding_price"] = self.lastDiscountsRoundingPrice!
                        }
                        if self.lastNum != nil {
                            map["last_num"] = self.lastNum!
                        }
                        if self.rateStartTime != nil {
                            map["rate_start_time"] = self.rateStartTime!
                        }
                        if self.status != nil {
                            map["status"] = self.status!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("before_discount_price") && dict["before_discount_price"] != nil {
                            self.beforeDiscountPrice = dict["before_discount_price"] as! Int64
                        }
                        if dict.keys.contains("breakfast") && dict["breakfast"] != nil {
                            self.breakfast = dict["breakfast"] as! String
                        }
                        if dict.keys.contains("discount_price") && dict["discount_price"] != nil {
                            self.discountPrice = dict["discount_price"] as! Int64
                        }
                        if dict.keys.contains("last_discounts_price") && dict["last_discounts_price"] != nil {
                            self.lastDiscountsPrice = dict["last_discounts_price"] as! Int64
                        }
                        if dict.keys.contains("last_discounts_rounding_price") && dict["last_discounts_rounding_price"] != nil {
                            self.lastDiscountsRoundingPrice = dict["last_discounts_rounding_price"] as! Int64
                        }
                        if dict.keys.contains("last_num") && dict["last_num"] != nil {
                            self.lastNum = dict["last_num"] as! Int32
                        }
                        if dict.keys.contains("rate_start_time") && dict["rate_start_time"] != nil {
                            self.rateStartTime = dict["rate_start_time"] as! String
                        }
                        if dict.keys.contains("status") && dict["status"] != nil {
                            self.status = dict["status"] as! Int32
                        }
                    }
                }
                public var bedDesc: String?

                public var bedType: String?

                public var breakfast: String?

                public var btripCancelRule: HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule?

                public var btripHotelCancelDesc: [HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripHotelCancelDesc]?

                public var canSmoking: Bool?

                public var cancelPolicyDesc: String?

                public var cancelPolicyType: Int32?

                public var companyAassist: String?

                public var confirmType: Int32?

                public var currencyCode: String?

                public var dailyPriceFormatYuan: String?

                public var dailyPriceView: String?

                public var discountDesc: HotelGoodsQueryResponseBody.Module.Rooms.Rates.DiscountDesc?

                public var endTimeDaily: String?

                public var hotelDetailRatePriceDTO: [HotelGoodsQueryResponseBody.Module.Rooms.Rates.HotelDetailRatePriceDTO]?

                public var instantConfirm: Bool?

                public var inventoryPrice: String?

                public var isBusinessPay4Goods: Bool?

                public var isGuarantee: Int32?

                public var isNeedEmail: Bool?

                public var itemId: Int64?

                public var lastCancelTime: String?

                public var maxOccupancy: Int32?

                public var minAdvHours: Int32?

                public var minDays: Int32?

                public var nod: Int32?

                public var nop: Int32?

                public var orderShipTime: Int32?

                public var paymentType: Int32?

                public var priceType: Int32?

                public var promotionInfo: String?

                public var rateId: Int64?

                public var ratePlanName: String?

                public var rpId: Int64?

                public var sellerId: Int64?

                public var startTimeDaily: String?

                public var status: Int32?

                public var supplierCode: String?

                public var supplierName: String?

                public var supportSpecialInvoice: Bool?

                public var unroundingDailyPriceFormatYuan: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.btripCancelRule?.validate()
                    try self.discountDesc?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bedDesc != nil {
                        map["bed_desc"] = self.bedDesc!
                    }
                    if self.bedType != nil {
                        map["bed_type"] = self.bedType!
                    }
                    if self.breakfast != nil {
                        map["breakfast"] = self.breakfast!
                    }
                    if self.btripCancelRule != nil {
                        map["btrip_cancel_rule"] = self.btripCancelRule?.toMap()
                    }
                    if self.btripHotelCancelDesc != nil {
                        var tmp : [Any] = []
                        for k in self.btripHotelCancelDesc! {
                            tmp.append(k.toMap())
                        }
                        map["btrip_hotel_cancel_desc"] = tmp
                    }
                    if self.canSmoking != nil {
                        map["can_smoking"] = self.canSmoking!
                    }
                    if self.cancelPolicyDesc != nil {
                        map["cancel_policy_desc"] = self.cancelPolicyDesc!
                    }
                    if self.cancelPolicyType != nil {
                        map["cancel_policy_type"] = self.cancelPolicyType!
                    }
                    if self.companyAassist != nil {
                        map["company_aassist"] = self.companyAassist!
                    }
                    if self.confirmType != nil {
                        map["confirm_type"] = self.confirmType!
                    }
                    if self.currencyCode != nil {
                        map["currency_code"] = self.currencyCode!
                    }
                    if self.dailyPriceFormatYuan != nil {
                        map["daily_price_format_yuan"] = self.dailyPriceFormatYuan!
                    }
                    if self.dailyPriceView != nil {
                        map["daily_price_view"] = self.dailyPriceView!
                    }
                    if self.discountDesc != nil {
                        map["discount_desc"] = self.discountDesc?.toMap()
                    }
                    if self.endTimeDaily != nil {
                        map["end_time_daily"] = self.endTimeDaily!
                    }
                    if self.hotelDetailRatePriceDTO != nil {
                        var tmp : [Any] = []
                        for k in self.hotelDetailRatePriceDTO! {
                            tmp.append(k.toMap())
                        }
                        map["hotel_detail_rate_price_d_t_o"] = tmp
                    }
                    if self.instantConfirm != nil {
                        map["instant_confirm"] = self.instantConfirm!
                    }
                    if self.inventoryPrice != nil {
                        map["inventory_price"] = self.inventoryPrice!
                    }
                    if self.isBusinessPay4Goods != nil {
                        map["is_business_pay4_goods"] = self.isBusinessPay4Goods!
                    }
                    if self.isGuarantee != nil {
                        map["is_guarantee"] = self.isGuarantee!
                    }
                    if self.isNeedEmail != nil {
                        map["is_need_email"] = self.isNeedEmail!
                    }
                    if self.itemId != nil {
                        map["item_id"] = self.itemId!
                    }
                    if self.lastCancelTime != nil {
                        map["last_cancel_time"] = self.lastCancelTime!
                    }
                    if self.maxOccupancy != nil {
                        map["max_occupancy"] = self.maxOccupancy!
                    }
                    if self.minAdvHours != nil {
                        map["min_adv_hours"] = self.minAdvHours!
                    }
                    if self.minDays != nil {
                        map["min_days"] = self.minDays!
                    }
                    if self.nod != nil {
                        map["nod"] = self.nod!
                    }
                    if self.nop != nil {
                        map["nop"] = self.nop!
                    }
                    if self.orderShipTime != nil {
                        map["order_ship_time"] = self.orderShipTime!
                    }
                    if self.paymentType != nil {
                        map["payment_type"] = self.paymentType!
                    }
                    if self.priceType != nil {
                        map["price_type"] = self.priceType!
                    }
                    if self.promotionInfo != nil {
                        map["promotion_info"] = self.promotionInfo!
                    }
                    if self.rateId != nil {
                        map["rate_id"] = self.rateId!
                    }
                    if self.ratePlanName != nil {
                        map["rate_plan_name"] = self.ratePlanName!
                    }
                    if self.rpId != nil {
                        map["rp_id"] = self.rpId!
                    }
                    if self.sellerId != nil {
                        map["seller_id"] = self.sellerId!
                    }
                    if self.startTimeDaily != nil {
                        map["start_time_daily"] = self.startTimeDaily!
                    }
                    if self.status != nil {
                        map["status"] = self.status!
                    }
                    if self.supplierCode != nil {
                        map["supplier_code"] = self.supplierCode!
                    }
                    if self.supplierName != nil {
                        map["supplier_name"] = self.supplierName!
                    }
                    if self.supportSpecialInvoice != nil {
                        map["support_special_invoice"] = self.supportSpecialInvoice!
                    }
                    if self.unroundingDailyPriceFormatYuan != nil {
                        map["unrounding_daily_price_format_yuan"] = self.unroundingDailyPriceFormatYuan!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("bed_desc") && dict["bed_desc"] != nil {
                        self.bedDesc = dict["bed_desc"] as! String
                    }
                    if dict.keys.contains("bed_type") && dict["bed_type"] != nil {
                        self.bedType = dict["bed_type"] as! String
                    }
                    if dict.keys.contains("breakfast") && dict["breakfast"] != nil {
                        self.breakfast = dict["breakfast"] as! String
                    }
                    if dict.keys.contains("btrip_cancel_rule") && dict["btrip_cancel_rule"] != nil {
                        var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripCancelRule()
                        model.fromMap(dict["btrip_cancel_rule"] as! [String: Any])
                        self.btripCancelRule = model
                    }
                    if dict.keys.contains("btrip_hotel_cancel_desc") && dict["btrip_hotel_cancel_desc"] != nil {
                        var tmp : [HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripHotelCancelDesc] = []
                        for v in dict["btrip_hotel_cancel_desc"] as! [Any] {
                            var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.BtripHotelCancelDesc()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.btripHotelCancelDesc = tmp
                    }
                    if dict.keys.contains("can_smoking") && dict["can_smoking"] != nil {
                        self.canSmoking = dict["can_smoking"] as! Bool
                    }
                    if dict.keys.contains("cancel_policy_desc") && dict["cancel_policy_desc"] != nil {
                        self.cancelPolicyDesc = dict["cancel_policy_desc"] as! String
                    }
                    if dict.keys.contains("cancel_policy_type") && dict["cancel_policy_type"] != nil {
                        self.cancelPolicyType = dict["cancel_policy_type"] as! Int32
                    }
                    if dict.keys.contains("company_aassist") && dict["company_aassist"] != nil {
                        self.companyAassist = dict["company_aassist"] as! String
                    }
                    if dict.keys.contains("confirm_type") && dict["confirm_type"] != nil {
                        self.confirmType = dict["confirm_type"] as! Int32
                    }
                    if dict.keys.contains("currency_code") && dict["currency_code"] != nil {
                        self.currencyCode = dict["currency_code"] as! String
                    }
                    if dict.keys.contains("daily_price_format_yuan") && dict["daily_price_format_yuan"] != nil {
                        self.dailyPriceFormatYuan = dict["daily_price_format_yuan"] as! String
                    }
                    if dict.keys.contains("daily_price_view") && dict["daily_price_view"] != nil {
                        self.dailyPriceView = dict["daily_price_view"] as! String
                    }
                    if dict.keys.contains("discount_desc") && dict["discount_desc"] != nil {
                        var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.DiscountDesc()
                        model.fromMap(dict["discount_desc"] as! [String: Any])
                        self.discountDesc = model
                    }
                    if dict.keys.contains("end_time_daily") && dict["end_time_daily"] != nil {
                        self.endTimeDaily = dict["end_time_daily"] as! String
                    }
                    if dict.keys.contains("hotel_detail_rate_price_d_t_o") && dict["hotel_detail_rate_price_d_t_o"] != nil {
                        var tmp : [HotelGoodsQueryResponseBody.Module.Rooms.Rates.HotelDetailRatePriceDTO] = []
                        for v in dict["hotel_detail_rate_price_d_t_o"] as! [Any] {
                            var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates.HotelDetailRatePriceDTO()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.hotelDetailRatePriceDTO = tmp
                    }
                    if dict.keys.contains("instant_confirm") && dict["instant_confirm"] != nil {
                        self.instantConfirm = dict["instant_confirm"] as! Bool
                    }
                    if dict.keys.contains("inventory_price") && dict["inventory_price"] != nil {
                        self.inventoryPrice = dict["inventory_price"] as! String
                    }
                    if dict.keys.contains("is_business_pay4_goods") && dict["is_business_pay4_goods"] != nil {
                        self.isBusinessPay4Goods = dict["is_business_pay4_goods"] as! Bool
                    }
                    if dict.keys.contains("is_guarantee") && dict["is_guarantee"] != nil {
                        self.isGuarantee = dict["is_guarantee"] as! Int32
                    }
                    if dict.keys.contains("is_need_email") && dict["is_need_email"] != nil {
                        self.isNeedEmail = dict["is_need_email"] as! Bool
                    }
                    if dict.keys.contains("item_id") && dict["item_id"] != nil {
                        self.itemId = dict["item_id"] as! Int64
                    }
                    if dict.keys.contains("last_cancel_time") && dict["last_cancel_time"] != nil {
                        self.lastCancelTime = dict["last_cancel_time"] as! String
                    }
                    if dict.keys.contains("max_occupancy") && dict["max_occupancy"] != nil {
                        self.maxOccupancy = dict["max_occupancy"] as! Int32
                    }
                    if dict.keys.contains("min_adv_hours") && dict["min_adv_hours"] != nil {
                        self.minAdvHours = dict["min_adv_hours"] as! Int32
                    }
                    if dict.keys.contains("min_days") && dict["min_days"] != nil {
                        self.minDays = dict["min_days"] as! Int32
                    }
                    if dict.keys.contains("nod") && dict["nod"] != nil {
                        self.nod = dict["nod"] as! Int32
                    }
                    if dict.keys.contains("nop") && dict["nop"] != nil {
                        self.nop = dict["nop"] as! Int32
                    }
                    if dict.keys.contains("order_ship_time") && dict["order_ship_time"] != nil {
                        self.orderShipTime = dict["order_ship_time"] as! Int32
                    }
                    if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
                        self.paymentType = dict["payment_type"] as! Int32
                    }
                    if dict.keys.contains("price_type") && dict["price_type"] != nil {
                        self.priceType = dict["price_type"] as! Int32
                    }
                    if dict.keys.contains("promotion_info") && dict["promotion_info"] != nil {
                        self.promotionInfo = dict["promotion_info"] as! String
                    }
                    if dict.keys.contains("rate_id") && dict["rate_id"] != nil {
                        self.rateId = dict["rate_id"] as! Int64
                    }
                    if dict.keys.contains("rate_plan_name") && dict["rate_plan_name"] != nil {
                        self.ratePlanName = dict["rate_plan_name"] as! String
                    }
                    if dict.keys.contains("rp_id") && dict["rp_id"] != nil {
                        self.rpId = dict["rp_id"] as! Int64
                    }
                    if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
                        self.sellerId = dict["seller_id"] as! Int64
                    }
                    if dict.keys.contains("start_time_daily") && dict["start_time_daily"] != nil {
                        self.startTimeDaily = dict["start_time_daily"] as! String
                    }
                    if dict.keys.contains("status") && dict["status"] != nil {
                        self.status = dict["status"] as! Int32
                    }
                    if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
                        self.supplierCode = dict["supplier_code"] as! String
                    }
                    if dict.keys.contains("supplier_name") && dict["supplier_name"] != nil {
                        self.supplierName = dict["supplier_name"] as! String
                    }
                    if dict.keys.contains("support_special_invoice") && dict["support_special_invoice"] != nil {
                        self.supportSpecialInvoice = dict["support_special_invoice"] as! Bool
                    }
                    if dict.keys.contains("unrounding_daily_price_format_yuan") && dict["unrounding_daily_price_format_yuan"] != nil {
                        self.unroundingDailyPriceFormatYuan = dict["unrounding_daily_price_format_yuan"] as! String
                    }
                }
            }
            public class RoomService : Tea.TeaModel {
                public var color: String?

                public var desc: String?

                public var highlightColorColor: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.color != nil {
                        map["color"] = self.color!
                    }
                    if self.desc != nil {
                        map["desc"] = self.desc!
                    }
                    if self.highlightColorColor != nil {
                        map["highlight_color_color"] = self.highlightColorColor!
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("color") && dict["color"] != nil {
                        self.color = dict["color"] as! String
                    }
                    if dict.keys.contains("desc") && dict["desc"] != nil {
                        self.desc = dict["desc"] as! String
                    }
                    if dict.keys.contains("highlight_color_color") && dict["highlight_color_color"] != nil {
                        self.highlightColorColor = dict["highlight_color_color"] as! String
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public var area: String?

            public var bedTypeString: String?

            public var extraBed: Bool?

            public var facility: String?

            public var floor: String?

            public var maxOccupancy: Int32?

            public var name: String?

            public var networkService: String?

            public var pics: String?

            public var rates: [HotelGoodsQueryResponseBody.Module.Rooms.Rates]?

            public var roomDasc: String?

            public var roomFacility: [String]?

            public var roomService: [HotelGoodsQueryResponseBody.Module.Rooms.RoomService]?

            public var srid: Int64?

            public var status: Int32?

            public var windowType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.area != nil {
                    map["area"] = self.area!
                }
                if self.bedTypeString != nil {
                    map["bed_type_string"] = self.bedTypeString!
                }
                if self.extraBed != nil {
                    map["extra_bed"] = self.extraBed!
                }
                if self.facility != nil {
                    map["facility"] = self.facility!
                }
                if self.floor != nil {
                    map["floor"] = self.floor!
                }
                if self.maxOccupancy != nil {
                    map["max_occupancy"] = self.maxOccupancy!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.networkService != nil {
                    map["network_service"] = self.networkService!
                }
                if self.pics != nil {
                    map["pics"] = self.pics!
                }
                if self.rates != nil {
                    var tmp : [Any] = []
                    for k in self.rates! {
                        tmp.append(k.toMap())
                    }
                    map["rates"] = tmp
                }
                if self.roomDasc != nil {
                    map["room_dasc"] = self.roomDasc!
                }
                if self.roomFacility != nil {
                    map["room_facility"] = self.roomFacility!
                }
                if self.roomService != nil {
                    var tmp : [Any] = []
                    for k in self.roomService! {
                        tmp.append(k.toMap())
                    }
                    map["room_service"] = tmp
                }
                if self.srid != nil {
                    map["srid"] = self.srid!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.windowType != nil {
                    map["window_type"] = self.windowType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("area") && dict["area"] != nil {
                    self.area = dict["area"] as! String
                }
                if dict.keys.contains("bed_type_string") && dict["bed_type_string"] != nil {
                    self.bedTypeString = dict["bed_type_string"] as! String
                }
                if dict.keys.contains("extra_bed") && dict["extra_bed"] != nil {
                    self.extraBed = dict["extra_bed"] as! Bool
                }
                if dict.keys.contains("facility") && dict["facility"] != nil {
                    self.facility = dict["facility"] as! String
                }
                if dict.keys.contains("floor") && dict["floor"] != nil {
                    self.floor = dict["floor"] as! String
                }
                if dict.keys.contains("max_occupancy") && dict["max_occupancy"] != nil {
                    self.maxOccupancy = dict["max_occupancy"] as! Int32
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("network_service") && dict["network_service"] != nil {
                    self.networkService = dict["network_service"] as! String
                }
                if dict.keys.contains("pics") && dict["pics"] != nil {
                    self.pics = dict["pics"] as! String
                }
                if dict.keys.contains("rates") && dict["rates"] != nil {
                    var tmp : [HotelGoodsQueryResponseBody.Module.Rooms.Rates] = []
                    for v in dict["rates"] as! [Any] {
                        var model = HotelGoodsQueryResponseBody.Module.Rooms.Rates()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.rates = tmp
                }
                if dict.keys.contains("room_dasc") && dict["room_dasc"] != nil {
                    self.roomDasc = dict["room_dasc"] as! String
                }
                if dict.keys.contains("room_facility") && dict["room_facility"] != nil {
                    self.roomFacility = dict["room_facility"] as! [String]
                }
                if dict.keys.contains("room_service") && dict["room_service"] != nil {
                    var tmp : [HotelGoodsQueryResponseBody.Module.Rooms.RoomService] = []
                    for v in dict["room_service"] as! [Any] {
                        var model = HotelGoodsQueryResponseBody.Module.Rooms.RoomService()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.roomService = tmp
                }
                if dict.keys.contains("srid") && dict["srid"] != nil {
                    self.srid = dict["srid"] as! Int64
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("window_type") && dict["window_type"] != nil {
                    self.windowType = dict["window_type"] as! String
                }
            }
        }
        public var address: String?

        public var bookingInstructions: [String: String]?

        public var canForeigner: Bool?

        public var checkIn: String?

        public var checkOut: String?

        public var descriptions: [String]?

        public var dinamicBannerPicUrls: [String]?

        public var earlyArrivalTime: String?

        public var hotelId: Int64?

        public var hotelName: String?

        public var lateArrivalTime: String?

        public var rooms: [HotelGoodsQueryResponseBody.Module.Rooms]?

        public var searchId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["address"] = self.address!
            }
            if self.bookingInstructions != nil {
                map["booking_instructions"] = self.bookingInstructions!
            }
            if self.canForeigner != nil {
                map["can_foreigner"] = self.canForeigner!
            }
            if self.checkIn != nil {
                map["check_in"] = self.checkIn!
            }
            if self.checkOut != nil {
                map["check_out"] = self.checkOut!
            }
            if self.descriptions != nil {
                map["descriptions"] = self.descriptions!
            }
            if self.dinamicBannerPicUrls != nil {
                map["dinamic_banner_pic_urls"] = self.dinamicBannerPicUrls!
            }
            if self.earlyArrivalTime != nil {
                map["early_arrival_time"] = self.earlyArrivalTime!
            }
            if self.hotelId != nil {
                map["hotel_id"] = self.hotelId!
            }
            if self.hotelName != nil {
                map["hotel_name"] = self.hotelName!
            }
            if self.lateArrivalTime != nil {
                map["late_arrival_time"] = self.lateArrivalTime!
            }
            if self.rooms != nil {
                var tmp : [Any] = []
                for k in self.rooms! {
                    tmp.append(k.toMap())
                }
                map["rooms"] = tmp
            }
            if self.searchId != nil {
                map["search_id"] = self.searchId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("address") && dict["address"] != nil {
                self.address = dict["address"] as! String
            }
            if dict.keys.contains("booking_instructions") && dict["booking_instructions"] != nil {
                self.bookingInstructions = dict["booking_instructions"] as! [String: String]
            }
            if dict.keys.contains("can_foreigner") && dict["can_foreigner"] != nil {
                self.canForeigner = dict["can_foreigner"] as! Bool
            }
            if dict.keys.contains("check_in") && dict["check_in"] != nil {
                self.checkIn = dict["check_in"] as! String
            }
            if dict.keys.contains("check_out") && dict["check_out"] != nil {
                self.checkOut = dict["check_out"] as! String
            }
            if dict.keys.contains("descriptions") && dict["descriptions"] != nil {
                self.descriptions = dict["descriptions"] as! [String]
            }
            if dict.keys.contains("dinamic_banner_pic_urls") && dict["dinamic_banner_pic_urls"] != nil {
                self.dinamicBannerPicUrls = dict["dinamic_banner_pic_urls"] as! [String]
            }
            if dict.keys.contains("early_arrival_time") && dict["early_arrival_time"] != nil {
                self.earlyArrivalTime = dict["early_arrival_time"] as! String
            }
            if dict.keys.contains("hotel_id") && dict["hotel_id"] != nil {
                self.hotelId = dict["hotel_id"] as! Int64
            }
            if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                self.hotelName = dict["hotel_name"] as! String
            }
            if dict.keys.contains("late_arrival_time") && dict["late_arrival_time"] != nil {
                self.lateArrivalTime = dict["late_arrival_time"] as! String
            }
            if dict.keys.contains("rooms") && dict["rooms"] != nil {
                var tmp : [HotelGoodsQueryResponseBody.Module.Rooms] = []
                for v in dict["rooms"] as! [Any] {
                    var model = HotelGoodsQueryResponseBody.Module.Rooms()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.rooms = tmp
            }
            if dict.keys.contains("search_id") && dict["search_id"] != nil {
                self.searchId = dict["search_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelGoodsQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelGoodsQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelGoodsQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelGoodsQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelGoodsQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelIndexInfoHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelIndexInfoRequest : Tea.TeaModel {
    public var cityCode: String?

    public var hotelStatus: Int32?

    public var pageSize: Int32?

    public var pageToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.hotelStatus != nil {
            map["hotel_status"] = self.hotelStatus!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.pageToken != nil {
            map["page_token"] = self.pageToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! String
        }
        if dict.keys.contains("hotel_status") && dict["hotel_status"] != nil {
            self.hotelStatus = dict["hotel_status"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("page_token") && dict["page_token"] != nil {
            self.pageToken = dict["page_token"] as! String
        }
    }
}

public class HotelIndexInfoResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var hotelId: String?

            public var hotelStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hotelId != nil {
                    map["hotel_id"] = self.hotelId!
                }
                if self.hotelStatus != nil {
                    map["hotel_status"] = self.hotelStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("hotel_id") && dict["hotel_id"] != nil {
                    self.hotelId = dict["hotel_id"] as! String
                }
                if dict.keys.contains("hotel_status") && dict["hotel_status"] != nil {
                    self.hotelStatus = dict["hotel_status"] as! String
                }
            }
        }
        public var items: [HotelIndexInfoResponseBody.Module.Items]?

        public var pageSize: Int32?

        public var pageToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.pageToken != nil {
                map["page_token"] = self.pageToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [HotelIndexInfoResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = HotelIndexInfoResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("page_token") && dict["page_token"] != nil {
                self.pageToken = dict["page_token"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelIndexInfoResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelIndexInfoResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelIndexInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelIndexInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelIndexInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderCancelHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelOrderCancelRequest : Tea.TeaModel {
    public var btripOrderId: String?

    public var disOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripOrderId != nil {
            map["btrip_order_id"] = self.btripOrderId!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
            self.btripOrderId = dict["btrip_order_id"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
    }
}

public class HotelOrderCancelResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var cancelSuccess: Bool?

        public var code: String?

        public var desc: String?

        public var forfeitFee: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cancelSuccess != nil {
                map["cancel_success"] = self.cancelSuccess!
            }
            if self.code != nil {
                map["code"] = self.code!
            }
            if self.desc != nil {
                map["desc"] = self.desc!
            }
            if self.forfeitFee != nil {
                map["forfeit_fee"] = self.forfeitFee!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cancel_success") && dict["cancel_success"] != nil {
                self.cancelSuccess = dict["cancel_success"] as! Bool
            }
            if dict.keys.contains("code") && dict["code"] != nil {
                self.code = dict["code"] as! String
            }
            if dict.keys.contains("desc") && dict["desc"] != nil {
                self.desc = dict["desc"] as! String
            }
            if dict.keys.contains("forfeit_fee") && dict["forfeit_fee"] != nil {
                self.forfeitFee = dict["forfeit_fee"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelOrderCancelResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelOrderCancelResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderCancelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderCancelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderCancelResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderCreateHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelOrderCreateRequest : Tea.TeaModel {
    public class InvoiceInfo : Tea.TeaModel {
        public var buyerAdd: String?

        public var buyerBankAcc: String?

        public var buyerBankAdd: String?

        public var buyerPhone: String?

        public var buyerTaxNum: String?

        public var deliveryAddress: String?

        public var deliveryArea: String?

        public var deliveryCity: String?

        public var deliveryProvince: String?

        public var deliveryStreet: String?

        public var email: String?

        public var invoiceMaterial: Int32?

        public var invoiceTitle: String?

        public var invoiceType: Int32?

        public var receiverName: String?

        public var receiverPhone: String?

        public var remark: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.buyerAdd != nil {
                map["buyer_add"] = self.buyerAdd!
            }
            if self.buyerBankAcc != nil {
                map["buyer_bank_acc"] = self.buyerBankAcc!
            }
            if self.buyerBankAdd != nil {
                map["buyer_bank_add"] = self.buyerBankAdd!
            }
            if self.buyerPhone != nil {
                map["buyer_phone"] = self.buyerPhone!
            }
            if self.buyerTaxNum != nil {
                map["buyer_tax_num"] = self.buyerTaxNum!
            }
            if self.deliveryAddress != nil {
                map["delivery_address"] = self.deliveryAddress!
            }
            if self.deliveryArea != nil {
                map["delivery_area"] = self.deliveryArea!
            }
            if self.deliveryCity != nil {
                map["delivery_city"] = self.deliveryCity!
            }
            if self.deliveryProvince != nil {
                map["delivery_province"] = self.deliveryProvince!
            }
            if self.deliveryStreet != nil {
                map["delivery_street"] = self.deliveryStreet!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.invoiceMaterial != nil {
                map["invoice_material"] = self.invoiceMaterial!
            }
            if self.invoiceTitle != nil {
                map["invoice_title"] = self.invoiceTitle!
            }
            if self.invoiceType != nil {
                map["invoice_type"] = self.invoiceType!
            }
            if self.receiverName != nil {
                map["receiver_name"] = self.receiverName!
            }
            if self.receiverPhone != nil {
                map["receiver_phone"] = self.receiverPhone!
            }
            if self.remark != nil {
                map["remark"] = self.remark!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("buyer_add") && dict["buyer_add"] != nil {
                self.buyerAdd = dict["buyer_add"] as! String
            }
            if dict.keys.contains("buyer_bank_acc") && dict["buyer_bank_acc"] != nil {
                self.buyerBankAcc = dict["buyer_bank_acc"] as! String
            }
            if dict.keys.contains("buyer_bank_add") && dict["buyer_bank_add"] != nil {
                self.buyerBankAdd = dict["buyer_bank_add"] as! String
            }
            if dict.keys.contains("buyer_phone") && dict["buyer_phone"] != nil {
                self.buyerPhone = dict["buyer_phone"] as! String
            }
            if dict.keys.contains("buyer_tax_num") && dict["buyer_tax_num"] != nil {
                self.buyerTaxNum = dict["buyer_tax_num"] as! String
            }
            if dict.keys.contains("delivery_address") && dict["delivery_address"] != nil {
                self.deliveryAddress = dict["delivery_address"] as! String
            }
            if dict.keys.contains("delivery_area") && dict["delivery_area"] != nil {
                self.deliveryArea = dict["delivery_area"] as! String
            }
            if dict.keys.contains("delivery_city") && dict["delivery_city"] != nil {
                self.deliveryCity = dict["delivery_city"] as! String
            }
            if dict.keys.contains("delivery_province") && dict["delivery_province"] != nil {
                self.deliveryProvince = dict["delivery_province"] as! String
            }
            if dict.keys.contains("delivery_street") && dict["delivery_street"] != nil {
                self.deliveryStreet = dict["delivery_street"] as! String
            }
            if dict.keys.contains("email") && dict["email"] != nil {
                self.email = dict["email"] as! String
            }
            if dict.keys.contains("invoice_material") && dict["invoice_material"] != nil {
                self.invoiceMaterial = dict["invoice_material"] as! Int32
            }
            if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                self.invoiceTitle = dict["invoice_title"] as! String
            }
            if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                self.invoiceType = dict["invoice_type"] as! Int32
            }
            if dict.keys.contains("receiver_name") && dict["receiver_name"] != nil {
                self.receiverName = dict["receiver_name"] as! String
            }
            if dict.keys.contains("receiver_phone") && dict["receiver_phone"] != nil {
                self.receiverPhone = dict["receiver_phone"] as! String
            }
            if dict.keys.contains("remark") && dict["remark"] != nil {
                self.remark = dict["remark"] as! String
            }
        }
    }
    public class OccupantInfoList : Tea.TeaModel {
        public var cardNo: String?

        public var cardType: Int32?

        public var customerType: Int32?

        public var departmentId: String?

        public var departmentName: String?

        public var email: String?

        public var employeeType: Int32?

        public var firstName: String?

        public var lastName: String?

        public var name: String?

        public var phone: String?

        public var roomNo: Int32?

        public var staffNo: String?

        public var userType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardNo != nil {
                map["card_no"] = self.cardNo!
            }
            if self.cardType != nil {
                map["card_type"] = self.cardType!
            }
            if self.customerType != nil {
                map["customer_type"] = self.customerType!
            }
            if self.departmentId != nil {
                map["department_id"] = self.departmentId!
            }
            if self.departmentName != nil {
                map["department_name"] = self.departmentName!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.employeeType != nil {
                map["employee_type"] = self.employeeType!
            }
            if self.firstName != nil {
                map["first_name"] = self.firstName!
            }
            if self.lastName != nil {
                map["last_name"] = self.lastName!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.phone != nil {
                map["phone"] = self.phone!
            }
            if self.roomNo != nil {
                map["room_no"] = self.roomNo!
            }
            if self.staffNo != nil {
                map["staff_no"] = self.staffNo!
            }
            if self.userType != nil {
                map["user_type"] = self.userType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("card_no") && dict["card_no"] != nil {
                self.cardNo = dict["card_no"] as! String
            }
            if dict.keys.contains("card_type") && dict["card_type"] != nil {
                self.cardType = dict["card_type"] as! Int32
            }
            if dict.keys.contains("customer_type") && dict["customer_type"] != nil {
                self.customerType = dict["customer_type"] as! Int32
            }
            if dict.keys.contains("department_id") && dict["department_id"] != nil {
                self.departmentId = dict["department_id"] as! String
            }
            if dict.keys.contains("department_name") && dict["department_name"] != nil {
                self.departmentName = dict["department_name"] as! String
            }
            if dict.keys.contains("email") && dict["email"] != nil {
                self.email = dict["email"] as! String
            }
            if dict.keys.contains("employee_type") && dict["employee_type"] != nil {
                self.employeeType = dict["employee_type"] as! Int32
            }
            if dict.keys.contains("first_name") && dict["first_name"] != nil {
                self.firstName = dict["first_name"] as! String
            }
            if dict.keys.contains("last_name") && dict["last_name"] != nil {
                self.lastName = dict["last_name"] as! String
            }
            if dict.keys.contains("name") && dict["name"] != nil {
                self.name = dict["name"] as! String
            }
            if dict.keys.contains("phone") && dict["phone"] != nil {
                self.phone = dict["phone"] as! String
            }
            if dict.keys.contains("room_no") && dict["room_no"] != nil {
                self.roomNo = dict["room_no"] as! Int32
            }
            if dict.keys.contains("staff_no") && dict["staff_no"] != nil {
                self.staffNo = dict["staff_no"] as! String
            }
            if dict.keys.contains("user_type") && dict["user_type"] != nil {
                self.userType = dict["user_type"] as! Int32
            }
        }
    }
    public class PromotionInfo : Tea.TeaModel {
        public class PromotionDetailInfoList : Tea.TeaModel {
            public var checkStatus: Bool?

            public var needCheck: Bool?

            public var promotionCode: String?

            public var promotionId: String?

            public var promotionName: String?

            public var promotionPrice: Int64?

            public var promotionType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkStatus != nil {
                    map["check_status"] = self.checkStatus!
                }
                if self.needCheck != nil {
                    map["need_check"] = self.needCheck!
                }
                if self.promotionCode != nil {
                    map["promotion_code"] = self.promotionCode!
                }
                if self.promotionId != nil {
                    map["promotion_id"] = self.promotionId!
                }
                if self.promotionName != nil {
                    map["promotion_name"] = self.promotionName!
                }
                if self.promotionPrice != nil {
                    map["promotion_price"] = self.promotionPrice!
                }
                if self.promotionType != nil {
                    map["promotion_type"] = self.promotionType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("check_status") && dict["check_status"] != nil {
                    self.checkStatus = dict["check_status"] as! Bool
                }
                if dict.keys.contains("need_check") && dict["need_check"] != nil {
                    self.needCheck = dict["need_check"] as! Bool
                }
                if dict.keys.contains("promotion_code") && dict["promotion_code"] != nil {
                    self.promotionCode = dict["promotion_code"] as! String
                }
                if dict.keys.contains("promotion_id") && dict["promotion_id"] != nil {
                    self.promotionId = dict["promotion_id"] as! String
                }
                if dict.keys.contains("promotion_name") && dict["promotion_name"] != nil {
                    self.promotionName = dict["promotion_name"] as! String
                }
                if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                    self.promotionPrice = dict["promotion_price"] as! Int64
                }
                if dict.keys.contains("promotion_type") && dict["promotion_type"] != nil {
                    self.promotionType = dict["promotion_type"] as! String
                }
            }
        }
        public var promotionDetailInfoList: [HotelOrderCreateRequest.PromotionInfo.PromotionDetailInfoList]?

        public var promotionTotalPrice: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.promotionDetailInfoList != nil {
                var tmp : [Any] = []
                for k in self.promotionDetailInfoList! {
                    tmp.append(k.toMap())
                }
                map["promotion_detail_info_list"] = tmp
            }
            if self.promotionTotalPrice != nil {
                map["promotion_total_price"] = self.promotionTotalPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("promotion_detail_info_list") && dict["promotion_detail_info_list"] != nil {
                var tmp : [HotelOrderCreateRequest.PromotionInfo.PromotionDetailInfoList] = []
                for v in dict["promotion_detail_info_list"] as! [Any] {
                    var model = HotelOrderCreateRequest.PromotionInfo.PromotionDetailInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.promotionDetailInfoList = tmp
            }
            if dict.keys.contains("promotion_total_price") && dict["promotion_total_price"] != nil {
                self.promotionTotalPrice = dict["promotion_total_price"] as! Int64
            }
        }
    }
    public var btripUserId: String?

    public var checkIn: String?

    public var checkOut: String?

    public var contractEmail: String?

    public var contractName: String?

    public var contractPhone: String?

    public var corpPayPrice: Int64?

    public var disOrderId: String?

    public var extra: String?

    public var invoiceInfo: HotelOrderCreateRequest.InvoiceInfo?

    public var itemId: Int64?

    public var itineraryNo: String?

    public var occupantInfoList: [HotelOrderCreateRequest.OccupantInfoList]?

    public var personPayPrice: Int64?

    public var promotionInfo: HotelOrderCreateRequest.PromotionInfo?

    public var ratePlanId: Int64?

    public var roomId: Int64?

    public var roomNum: Int32?

    public var sellerId: Int64?

    public var shid: Int64?

    public var totalOrderPrice: Int64?

    public var validateResKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.invoiceInfo?.validate()
        try self.promotionInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkIn != nil {
            map["check_in"] = self.checkIn!
        }
        if self.checkOut != nil {
            map["check_out"] = self.checkOut!
        }
        if self.contractEmail != nil {
            map["contract_email"] = self.contractEmail!
        }
        if self.contractName != nil {
            map["contract_name"] = self.contractName!
        }
        if self.contractPhone != nil {
            map["contract_phone"] = self.contractPhone!
        }
        if self.corpPayPrice != nil {
            map["corp_pay_price"] = self.corpPayPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.extra != nil {
            map["extra"] = self.extra!
        }
        if self.invoiceInfo != nil {
            map["invoice_info"] = self.invoiceInfo?.toMap()
        }
        if self.itemId != nil {
            map["item_id"] = self.itemId!
        }
        if self.itineraryNo != nil {
            map["itinerary_no"] = self.itineraryNo!
        }
        if self.occupantInfoList != nil {
            var tmp : [Any] = []
            for k in self.occupantInfoList! {
                tmp.append(k.toMap())
            }
            map["occupant_info_list"] = tmp
        }
        if self.personPayPrice != nil {
            map["person_pay_price"] = self.personPayPrice!
        }
        if self.promotionInfo != nil {
            map["promotion_info"] = self.promotionInfo?.toMap()
        }
        if self.ratePlanId != nil {
            map["rate_plan_id"] = self.ratePlanId!
        }
        if self.roomId != nil {
            map["room_id"] = self.roomId!
        }
        if self.roomNum != nil {
            map["room_num"] = self.roomNum!
        }
        if self.sellerId != nil {
            map["seller_id"] = self.sellerId!
        }
        if self.shid != nil {
            map["shid"] = self.shid!
        }
        if self.totalOrderPrice != nil {
            map["total_order_price"] = self.totalOrderPrice!
        }
        if self.validateResKey != nil {
            map["validate_res_key"] = self.validateResKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in") && dict["check_in"] != nil {
            self.checkIn = dict["check_in"] as! String
        }
        if dict.keys.contains("check_out") && dict["check_out"] != nil {
            self.checkOut = dict["check_out"] as! String
        }
        if dict.keys.contains("contract_email") && dict["contract_email"] != nil {
            self.contractEmail = dict["contract_email"] as! String
        }
        if dict.keys.contains("contract_name") && dict["contract_name"] != nil {
            self.contractName = dict["contract_name"] as! String
        }
        if dict.keys.contains("contract_phone") && dict["contract_phone"] != nil {
            self.contractPhone = dict["contract_phone"] as! String
        }
        if dict.keys.contains("corp_pay_price") && dict["corp_pay_price"] != nil {
            self.corpPayPrice = dict["corp_pay_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extra = dict["extra"] as! String
        }
        if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
            var model = HotelOrderCreateRequest.InvoiceInfo()
            model.fromMap(dict["invoice_info"] as! [String: Any])
            self.invoiceInfo = model
        }
        if dict.keys.contains("item_id") && dict["item_id"] != nil {
            self.itemId = dict["item_id"] as! Int64
        }
        if dict.keys.contains("itinerary_no") && dict["itinerary_no"] != nil {
            self.itineraryNo = dict["itinerary_no"] as! String
        }
        if dict.keys.contains("occupant_info_list") && dict["occupant_info_list"] != nil {
            var tmp : [HotelOrderCreateRequest.OccupantInfoList] = []
            for v in dict["occupant_info_list"] as! [Any] {
                var model = HotelOrderCreateRequest.OccupantInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.occupantInfoList = tmp
        }
        if dict.keys.contains("person_pay_price") && dict["person_pay_price"] != nil {
            self.personPayPrice = dict["person_pay_price"] as! Int64
        }
        if dict.keys.contains("promotion_info") && dict["promotion_info"] != nil {
            var model = HotelOrderCreateRequest.PromotionInfo()
            model.fromMap(dict["promotion_info"] as! [String: Any])
            self.promotionInfo = model
        }
        if dict.keys.contains("rate_plan_id") && dict["rate_plan_id"] != nil {
            self.ratePlanId = dict["rate_plan_id"] as! Int64
        }
        if dict.keys.contains("room_id") && dict["room_id"] != nil {
            self.roomId = dict["room_id"] as! Int64
        }
        if dict.keys.contains("room_num") && dict["room_num"] != nil {
            self.roomNum = dict["room_num"] as! Int32
        }
        if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
            self.sellerId = dict["seller_id"] as! Int64
        }
        if dict.keys.contains("shid") && dict["shid"] != nil {
            self.shid = dict["shid"] as! Int64
        }
        if dict.keys.contains("total_order_price") && dict["total_order_price"] != nil {
            self.totalOrderPrice = dict["total_order_price"] as! Int64
        }
        if dict.keys.contains("validate_res_key") && dict["validate_res_key"] != nil {
            self.validateResKey = dict["validate_res_key"] as! String
        }
    }
}

public class HotelOrderCreateShrinkRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var checkIn: String?

    public var checkOut: String?

    public var contractEmail: String?

    public var contractName: String?

    public var contractPhone: String?

    public var corpPayPrice: Int64?

    public var disOrderId: String?

    public var extra: String?

    public var invoiceInfoShrink: String?

    public var itemId: Int64?

    public var itineraryNo: String?

    public var occupantInfoListShrink: String?

    public var personPayPrice: Int64?

    public var promotionInfoShrink: String?

    public var ratePlanId: Int64?

    public var roomId: Int64?

    public var roomNum: Int32?

    public var sellerId: Int64?

    public var shid: Int64?

    public var totalOrderPrice: Int64?

    public var validateResKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkIn != nil {
            map["check_in"] = self.checkIn!
        }
        if self.checkOut != nil {
            map["check_out"] = self.checkOut!
        }
        if self.contractEmail != nil {
            map["contract_email"] = self.contractEmail!
        }
        if self.contractName != nil {
            map["contract_name"] = self.contractName!
        }
        if self.contractPhone != nil {
            map["contract_phone"] = self.contractPhone!
        }
        if self.corpPayPrice != nil {
            map["corp_pay_price"] = self.corpPayPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.extra != nil {
            map["extra"] = self.extra!
        }
        if self.invoiceInfoShrink != nil {
            map["invoice_info"] = self.invoiceInfoShrink!
        }
        if self.itemId != nil {
            map["item_id"] = self.itemId!
        }
        if self.itineraryNo != nil {
            map["itinerary_no"] = self.itineraryNo!
        }
        if self.occupantInfoListShrink != nil {
            map["occupant_info_list"] = self.occupantInfoListShrink!
        }
        if self.personPayPrice != nil {
            map["person_pay_price"] = self.personPayPrice!
        }
        if self.promotionInfoShrink != nil {
            map["promotion_info"] = self.promotionInfoShrink!
        }
        if self.ratePlanId != nil {
            map["rate_plan_id"] = self.ratePlanId!
        }
        if self.roomId != nil {
            map["room_id"] = self.roomId!
        }
        if self.roomNum != nil {
            map["room_num"] = self.roomNum!
        }
        if self.sellerId != nil {
            map["seller_id"] = self.sellerId!
        }
        if self.shid != nil {
            map["shid"] = self.shid!
        }
        if self.totalOrderPrice != nil {
            map["total_order_price"] = self.totalOrderPrice!
        }
        if self.validateResKey != nil {
            map["validate_res_key"] = self.validateResKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in") && dict["check_in"] != nil {
            self.checkIn = dict["check_in"] as! String
        }
        if dict.keys.contains("check_out") && dict["check_out"] != nil {
            self.checkOut = dict["check_out"] as! String
        }
        if dict.keys.contains("contract_email") && dict["contract_email"] != nil {
            self.contractEmail = dict["contract_email"] as! String
        }
        if dict.keys.contains("contract_name") && dict["contract_name"] != nil {
            self.contractName = dict["contract_name"] as! String
        }
        if dict.keys.contains("contract_phone") && dict["contract_phone"] != nil {
            self.contractPhone = dict["contract_phone"] as! String
        }
        if dict.keys.contains("corp_pay_price") && dict["corp_pay_price"] != nil {
            self.corpPayPrice = dict["corp_pay_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extra = dict["extra"] as! String
        }
        if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
            self.invoiceInfoShrink = dict["invoice_info"] as! String
        }
        if dict.keys.contains("item_id") && dict["item_id"] != nil {
            self.itemId = dict["item_id"] as! Int64
        }
        if dict.keys.contains("itinerary_no") && dict["itinerary_no"] != nil {
            self.itineraryNo = dict["itinerary_no"] as! String
        }
        if dict.keys.contains("occupant_info_list") && dict["occupant_info_list"] != nil {
            self.occupantInfoListShrink = dict["occupant_info_list"] as! String
        }
        if dict.keys.contains("person_pay_price") && dict["person_pay_price"] != nil {
            self.personPayPrice = dict["person_pay_price"] as! Int64
        }
        if dict.keys.contains("promotion_info") && dict["promotion_info"] != nil {
            self.promotionInfoShrink = dict["promotion_info"] as! String
        }
        if dict.keys.contains("rate_plan_id") && dict["rate_plan_id"] != nil {
            self.ratePlanId = dict["rate_plan_id"] as! Int64
        }
        if dict.keys.contains("room_id") && dict["room_id"] != nil {
            self.roomId = dict["room_id"] as! Int64
        }
        if dict.keys.contains("room_num") && dict["room_num"] != nil {
            self.roomNum = dict["room_num"] as! Int32
        }
        if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
            self.sellerId = dict["seller_id"] as! Int64
        }
        if dict.keys.contains("shid") && dict["shid"] != nil {
            self.shid = dict["shid"] as! Int64
        }
        if dict.keys.contains("total_order_price") && dict["total_order_price"] != nil {
            self.totalOrderPrice = dict["total_order_price"] as! Int64
        }
        if dict.keys.contains("validate_res_key") && dict["validate_res_key"] != nil {
            self.validateResKey = dict["validate_res_key"] as! String
        }
    }
}

public class HotelOrderCreateResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var btripOrderId: Int64?

        public var totalPrice: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.totalPrice != nil {
                map["total_price"] = self.totalPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! Int64
            }
            if dict.keys.contains("total_price") && dict["total_price"] != nil {
                self.totalPrice = dict["total_price"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelOrderCreateResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelOrderCreateResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderCreateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderCreateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderCreateResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderDetailInfoHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelOrderDetailInfoRequest : Tea.TeaModel {
    public var btripOrderId: String?

    public var disOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripOrderId != nil {
            map["btrip_order_id"] = self.btripOrderId!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
            self.btripOrderId = dict["btrip_order_id"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
    }
}

public class HotelOrderDetailInfoResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class BtripHotelCancelPolicyDTO : Tea.TeaModel {
            public class BtripHotelCancelPolicyInfoDTOList : Tea.TeaModel {
                public var hour: Int64?

                public var value: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.hour != nil {
                        map["hour"] = self.hour!
                    }
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("hour") && dict["hour"] != nil {
                        self.hour = dict["hour"] as! Int64
                    }
                    if dict.keys.contains("value") && dict["value"] != nil {
                        self.value = dict["value"] as! Int64
                    }
                }
            }
            public var btripHotelCancelPolicyInfoDTOList: [HotelOrderDetailInfoResponseBody.Module.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList]?

            public var cancelPolicyType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.btripHotelCancelPolicyInfoDTOList != nil {
                    var tmp : [Any] = []
                    for k in self.btripHotelCancelPolicyInfoDTOList! {
                        tmp.append(k.toMap())
                    }
                    map["btrip_hotel_cancel_policy_info_d_t_o_list"] = tmp
                }
                if self.cancelPolicyType != nil {
                    map["cancel_policy_type"] = self.cancelPolicyType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("btrip_hotel_cancel_policy_info_d_t_o_list") && dict["btrip_hotel_cancel_policy_info_d_t_o_list"] != nil {
                    var tmp : [HotelOrderDetailInfoResponseBody.Module.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList] = []
                    for v in dict["btrip_hotel_cancel_policy_info_d_t_o_list"] as! [Any] {
                        var model = HotelOrderDetailInfoResponseBody.Module.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.btripHotelCancelPolicyInfoDTOList = tmp
                }
                if dict.keys.contains("cancel_policy_type") && dict["cancel_policy_type"] != nil {
                    self.cancelPolicyType = dict["cancel_policy_type"] as! Int32
                }
            }
        }
        public class CancelInfo : Tea.TeaModel {
            public var cancelEndTime: String?

            public var cancelStartTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cancelEndTime != nil {
                    map["cancel_end_time"] = self.cancelEndTime!
                }
                if self.cancelStartTime != nil {
                    map["cancel_start_time"] = self.cancelStartTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cancel_end_time") && dict["cancel_end_time"] != nil {
                    self.cancelEndTime = dict["cancel_end_time"] as! String
                }
                if dict.keys.contains("cancel_start_time") && dict["cancel_start_time"] != nil {
                    self.cancelStartTime = dict["cancel_start_time"] as! String
                }
            }
        }
        public class HotelDetailInfo : Tea.TeaModel {
            public var address: String?

            public var cityName: String?

            public var hotelName: String?

            public var hotelTel: String?

            public var shid: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.address != nil {
                    map["address"] = self.address!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.hotelTel != nil {
                    map["hotel_tel"] = self.hotelTel!
                }
                if self.shid != nil {
                    map["shid"] = self.shid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("address") && dict["address"] != nil {
                    self.address = dict["address"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("hotel_tel") && dict["hotel_tel"] != nil {
                    self.hotelTel = dict["hotel_tel"] as! String
                }
                if dict.keys.contains("shid") && dict["shid"] != nil {
                    self.shid = dict["shid"] as! Int64
                }
            }
        }
        public class InvoiceInfo : Tea.TeaModel {
            public var billingMoney: Int64?

            public var buyerAdd: String?

            public var buyerBankAcc: String?

            public var buyerBankAdd: String?

            public var buyerPhone: String?

            public var buyerTaxNum: String?

            public var deliveryAddress: String?

            public var deliveryArea: String?

            public var deliveryCity: String?

            public var deliveryProvince: String?

            public var deliveryStreet: String?

            public var email: String?

            public var invoiceMaterial: Int32?

            public var invoiceTitle: String?

            public var invoiceType: Int32?

            public var postage: Int64?

            public var receiverName: String?

            public var receiverPhone: String?

            public var remark: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.billingMoney != nil {
                    map["billing_money"] = self.billingMoney!
                }
                if self.buyerAdd != nil {
                    map["buyer_add"] = self.buyerAdd!
                }
                if self.buyerBankAcc != nil {
                    map["buyer_bank_acc"] = self.buyerBankAcc!
                }
                if self.buyerBankAdd != nil {
                    map["buyer_bank_add"] = self.buyerBankAdd!
                }
                if self.buyerPhone != nil {
                    map["buyer_phone"] = self.buyerPhone!
                }
                if self.buyerTaxNum != nil {
                    map["buyer_tax_num"] = self.buyerTaxNum!
                }
                if self.deliveryAddress != nil {
                    map["delivery_address"] = self.deliveryAddress!
                }
                if self.deliveryArea != nil {
                    map["delivery_area"] = self.deliveryArea!
                }
                if self.deliveryCity != nil {
                    map["delivery_city"] = self.deliveryCity!
                }
                if self.deliveryProvince != nil {
                    map["delivery_province"] = self.deliveryProvince!
                }
                if self.deliveryStreet != nil {
                    map["delivery_street"] = self.deliveryStreet!
                }
                if self.email != nil {
                    map["email"] = self.email!
                }
                if self.invoiceMaterial != nil {
                    map["invoice_material"] = self.invoiceMaterial!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.invoiceType != nil {
                    map["invoice_type"] = self.invoiceType!
                }
                if self.postage != nil {
                    map["postage"] = self.postage!
                }
                if self.receiverName != nil {
                    map["receiver_name"] = self.receiverName!
                }
                if self.receiverPhone != nil {
                    map["receiver_phone"] = self.receiverPhone!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("billing_money") && dict["billing_money"] != nil {
                    self.billingMoney = dict["billing_money"] as! Int64
                }
                if dict.keys.contains("buyer_add") && dict["buyer_add"] != nil {
                    self.buyerAdd = dict["buyer_add"] as! String
                }
                if dict.keys.contains("buyer_bank_acc") && dict["buyer_bank_acc"] != nil {
                    self.buyerBankAcc = dict["buyer_bank_acc"] as! String
                }
                if dict.keys.contains("buyer_bank_add") && dict["buyer_bank_add"] != nil {
                    self.buyerBankAdd = dict["buyer_bank_add"] as! String
                }
                if dict.keys.contains("buyer_phone") && dict["buyer_phone"] != nil {
                    self.buyerPhone = dict["buyer_phone"] as! String
                }
                if dict.keys.contains("buyer_tax_num") && dict["buyer_tax_num"] != nil {
                    self.buyerTaxNum = dict["buyer_tax_num"] as! String
                }
                if dict.keys.contains("delivery_address") && dict["delivery_address"] != nil {
                    self.deliveryAddress = dict["delivery_address"] as! String
                }
                if dict.keys.contains("delivery_area") && dict["delivery_area"] != nil {
                    self.deliveryArea = dict["delivery_area"] as! String
                }
                if dict.keys.contains("delivery_city") && dict["delivery_city"] != nil {
                    self.deliveryCity = dict["delivery_city"] as! String
                }
                if dict.keys.contains("delivery_province") && dict["delivery_province"] != nil {
                    self.deliveryProvince = dict["delivery_province"] as! String
                }
                if dict.keys.contains("delivery_street") && dict["delivery_street"] != nil {
                    self.deliveryStreet = dict["delivery_street"] as! String
                }
                if dict.keys.contains("email") && dict["email"] != nil {
                    self.email = dict["email"] as! String
                }
                if dict.keys.contains("invoice_material") && dict["invoice_material"] != nil {
                    self.invoiceMaterial = dict["invoice_material"] as! Int32
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                    self.invoiceType = dict["invoice_type"] as! Int32
                }
                if dict.keys.contains("postage") && dict["postage"] != nil {
                    self.postage = dict["postage"] as! Int64
                }
                if dict.keys.contains("receiver_name") && dict["receiver_name"] != nil {
                    self.receiverName = dict["receiver_name"] as! String
                }
                if dict.keys.contains("receiver_phone") && dict["receiver_phone"] != nil {
                    self.receiverPhone = dict["receiver_phone"] as! String
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
            }
        }
        public class OccupantInfoList : Tea.TeaModel {
            public class CostCenterInfoList : Tea.TeaModel {
                public var costCenterId: String?

                public var costCenterName: String?

                public var costCenterNo: String?

                public var costCenterPrices: Int64?

                public var costCenterRatios: Int64?

                public var costCenterSubjectCode: String?

                public var costCenterSubjectName: String?

                public var settleSubjectId: String?

                public var settleSubjectName: String?

                public var settleSubjectNo: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.costCenterId != nil {
                        map["cost_center_id"] = self.costCenterId!
                    }
                    if self.costCenterName != nil {
                        map["cost_center_name"] = self.costCenterName!
                    }
                    if self.costCenterNo != nil {
                        map["cost_center_no"] = self.costCenterNo!
                    }
                    if self.costCenterPrices != nil {
                        map["cost_center_prices"] = self.costCenterPrices!
                    }
                    if self.costCenterRatios != nil {
                        map["cost_center_ratios"] = self.costCenterRatios!
                    }
                    if self.costCenterSubjectCode != nil {
                        map["cost_center_subject_code"] = self.costCenterSubjectCode!
                    }
                    if self.costCenterSubjectName != nil {
                        map["cost_center_subject_name"] = self.costCenterSubjectName!
                    }
                    if self.settleSubjectId != nil {
                        map["settle_subject_id"] = self.settleSubjectId!
                    }
                    if self.settleSubjectName != nil {
                        map["settle_subject_name"] = self.settleSubjectName!
                    }
                    if self.settleSubjectNo != nil {
                        map["settle_subject_no"] = self.settleSubjectNo!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                        self.costCenterId = dict["cost_center_id"] as! String
                    }
                    if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                        self.costCenterName = dict["cost_center_name"] as! String
                    }
                    if dict.keys.contains("cost_center_no") && dict["cost_center_no"] != nil {
                        self.costCenterNo = dict["cost_center_no"] as! String
                    }
                    if dict.keys.contains("cost_center_prices") && dict["cost_center_prices"] != nil {
                        self.costCenterPrices = dict["cost_center_prices"] as! Int64
                    }
                    if dict.keys.contains("cost_center_ratios") && dict["cost_center_ratios"] != nil {
                        self.costCenterRatios = dict["cost_center_ratios"] as! Int64
                    }
                    if dict.keys.contains("cost_center_subject_code") && dict["cost_center_subject_code"] != nil {
                        self.costCenterSubjectCode = dict["cost_center_subject_code"] as! String
                    }
                    if dict.keys.contains("cost_center_subject_name") && dict["cost_center_subject_name"] != nil {
                        self.costCenterSubjectName = dict["cost_center_subject_name"] as! String
                    }
                    if dict.keys.contains("settle_subject_id") && dict["settle_subject_id"] != nil {
                        self.settleSubjectId = dict["settle_subject_id"] as! String
                    }
                    if dict.keys.contains("settle_subject_name") && dict["settle_subject_name"] != nil {
                        self.settleSubjectName = dict["settle_subject_name"] as! String
                    }
                    if dict.keys.contains("settle_subject_no") && dict["settle_subject_no"] != nil {
                        self.settleSubjectNo = dict["settle_subject_no"] as! String
                    }
                }
            }
            public var cardNo: String?

            public var cardType: Int32?

            public var costCenterInfoList: [HotelOrderDetailInfoResponseBody.Module.OccupantInfoList.CostCenterInfoList]?

            public var customerType: Int32?

            public var departmentId: String?

            public var departmentName: String?

            public var email: String?

            public var employeeType: Int32?

            public var firstName: String?

            public var isBooker: Bool?

            public var lastName: String?

            public var name: String?

            public var phone: String?

            public var roomNo: Int32?

            public var selected: Bool?

            public var staffNo: String?

            public var userType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardNo != nil {
                    map["card_no"] = self.cardNo!
                }
                if self.cardType != nil {
                    map["card_type"] = self.cardType!
                }
                if self.costCenterInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.costCenterInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["cost_center_info_list"] = tmp
                }
                if self.customerType != nil {
                    map["customer_type"] = self.customerType!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.departmentName != nil {
                    map["department_name"] = self.departmentName!
                }
                if self.email != nil {
                    map["email"] = self.email!
                }
                if self.employeeType != nil {
                    map["employee_type"] = self.employeeType!
                }
                if self.firstName != nil {
                    map["first_name"] = self.firstName!
                }
                if self.isBooker != nil {
                    map["is_booker"] = self.isBooker!
                }
                if self.lastName != nil {
                    map["last_name"] = self.lastName!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                if self.roomNo != nil {
                    map["room_no"] = self.roomNo!
                }
                if self.selected != nil {
                    map["selected"] = self.selected!
                }
                if self.staffNo != nil {
                    map["staff_no"] = self.staffNo!
                }
                if self.userType != nil {
                    map["user_type"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("card_no") && dict["card_no"] != nil {
                    self.cardNo = dict["card_no"] as! String
                }
                if dict.keys.contains("card_type") && dict["card_type"] != nil {
                    self.cardType = dict["card_type"] as! Int32
                }
                if dict.keys.contains("cost_center_info_list") && dict["cost_center_info_list"] != nil {
                    var tmp : [HotelOrderDetailInfoResponseBody.Module.OccupantInfoList.CostCenterInfoList] = []
                    for v in dict["cost_center_info_list"] as! [Any] {
                        var model = HotelOrderDetailInfoResponseBody.Module.OccupantInfoList.CostCenterInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.costCenterInfoList = tmp
                }
                if dict.keys.contains("customer_type") && dict["customer_type"] != nil {
                    self.customerType = dict["customer_type"] as! Int32
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("department_name") && dict["department_name"] != nil {
                    self.departmentName = dict["department_name"] as! String
                }
                if dict.keys.contains("email") && dict["email"] != nil {
                    self.email = dict["email"] as! String
                }
                if dict.keys.contains("employee_type") && dict["employee_type"] != nil {
                    self.employeeType = dict["employee_type"] as! Int32
                }
                if dict.keys.contains("first_name") && dict["first_name"] != nil {
                    self.firstName = dict["first_name"] as! String
                }
                if dict.keys.contains("is_booker") && dict["is_booker"] != nil {
                    self.isBooker = dict["is_booker"] as! Bool
                }
                if dict.keys.contains("last_name") && dict["last_name"] != nil {
                    self.lastName = dict["last_name"] as! String
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
                if dict.keys.contains("room_no") && dict["room_no"] != nil {
                    self.roomNo = dict["room_no"] as! Int32
                }
                if dict.keys.contains("selected") && dict["selected"] != nil {
                    self.selected = dict["selected"] as! Bool
                }
                if dict.keys.contains("staff_no") && dict["staff_no"] != nil {
                    self.staffNo = dict["staff_no"] as! String
                }
                if dict.keys.contains("user_type") && dict["user_type"] != nil {
                    self.userType = dict["user_type"] as! Int32
                }
            }
        }
        public class RoomNightPriceInfoList : Tea.TeaModel {
            public var board: String?

            public var boardNum: Int32?

            public var checkIn: String?

            public var ratePlanId: String?

            public var ratePlanName: String?

            public var roomId: String?

            public var roomName: String?

            public var roomPrice: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.board != nil {
                    map["board"] = self.board!
                }
                if self.boardNum != nil {
                    map["board_num"] = self.boardNum!
                }
                if self.checkIn != nil {
                    map["check_in"] = self.checkIn!
                }
                if self.ratePlanId != nil {
                    map["rate_plan_id"] = self.ratePlanId!
                }
                if self.ratePlanName != nil {
                    map["rate_plan_name"] = self.ratePlanName!
                }
                if self.roomId != nil {
                    map["room_id"] = self.roomId!
                }
                if self.roomName != nil {
                    map["room_name"] = self.roomName!
                }
                if self.roomPrice != nil {
                    map["room_price"] = self.roomPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("board") && dict["board"] != nil {
                    self.board = dict["board"] as! String
                }
                if dict.keys.contains("board_num") && dict["board_num"] != nil {
                    self.boardNum = dict["board_num"] as! Int32
                }
                if dict.keys.contains("check_in") && dict["check_in"] != nil {
                    self.checkIn = dict["check_in"] as! String
                }
                if dict.keys.contains("rate_plan_id") && dict["rate_plan_id"] != nil {
                    self.ratePlanId = dict["rate_plan_id"] as! String
                }
                if dict.keys.contains("rate_plan_name") && dict["rate_plan_name"] != nil {
                    self.ratePlanName = dict["rate_plan_name"] as! String
                }
                if dict.keys.contains("room_id") && dict["room_id"] != nil {
                    self.roomId = dict["room_id"] as! String
                }
                if dict.keys.contains("room_name") && dict["room_name"] != nil {
                    self.roomName = dict["room_name"] as! String
                }
                if dict.keys.contains("room_price") && dict["room_price"] != nil {
                    self.roomPrice = dict["room_price"] as! Int64
                }
            }
        }
        public var actualCheckInTime: String?

        public var actualCheckOutTime: String?

        public var btripHotelCancelPolicyDTO: HotelOrderDetailInfoResponseBody.Module.BtripHotelCancelPolicyDTO?

        public var btripOrderId: String?

        public var cancelFine: Int64?

        public var cancelInfo: HotelOrderDetailInfoResponseBody.Module.CancelInfo?

        public var checkIn: String?

        public var checkOut: String?

        public var confirmOrderTime: String?

        public var contractName: String?

        public var contractTel: String?

        public var createOrderTime: String?

        public var earlyArrivalTime: String?

        public var earlyDeparture: Bool?

        public var guestCount: Int32?

        public var hotelDetailInfo: HotelOrderDetailInfoResponseBody.Module.HotelDetailInfo?

        public var invoiceInfo: HotelOrderDetailInfoResponseBody.Module.InvoiceInfo?

        public var itemId: String?

        public var lastArrivalTime: String?

        public var occupantInfoList: [HotelOrderDetailInfoResponseBody.Module.OccupantInfoList]?

        public var orderStatus: Int32?

        public var orderStatusDesc: String?

        public var payTime: String?

        public var productType: Int32?

        public var purchaseOrderId: String?

        public var refundPrice: Int64?

        public var refundReason: String?

        public var refundServiceFee: Int64?

        public var roomNightPriceInfoList: [HotelOrderDetailInfoResponseBody.Module.RoomNightPriceInfoList]?

        public var roomNumber: Int32?

        public var roomTypeName: String?

        public var sellerId: String?

        public var sellerName: String?

        public var serviceFee: Int64?

        public var settleType: String?

        public var supplierOrderId: String?

        public var totalPrice: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.btripHotelCancelPolicyDTO?.validate()
            try self.cancelInfo?.validate()
            try self.hotelDetailInfo?.validate()
            try self.invoiceInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actualCheckInTime != nil {
                map["actual_check_in_time"] = self.actualCheckInTime!
            }
            if self.actualCheckOutTime != nil {
                map["actual_check_out_time"] = self.actualCheckOutTime!
            }
            if self.btripHotelCancelPolicyDTO != nil {
                map["btrip_hotel_cancel_policy_d_t_o"] = self.btripHotelCancelPolicyDTO?.toMap()
            }
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.cancelFine != nil {
                map["cancel_fine"] = self.cancelFine!
            }
            if self.cancelInfo != nil {
                map["cancel_info"] = self.cancelInfo?.toMap()
            }
            if self.checkIn != nil {
                map["check_in"] = self.checkIn!
            }
            if self.checkOut != nil {
                map["check_out"] = self.checkOut!
            }
            if self.confirmOrderTime != nil {
                map["confirm_order_time"] = self.confirmOrderTime!
            }
            if self.contractName != nil {
                map["contract_name"] = self.contractName!
            }
            if self.contractTel != nil {
                map["contract_tel"] = self.contractTel!
            }
            if self.createOrderTime != nil {
                map["create_order_time"] = self.createOrderTime!
            }
            if self.earlyArrivalTime != nil {
                map["early_arrival_time"] = self.earlyArrivalTime!
            }
            if self.earlyDeparture != nil {
                map["early_departure"] = self.earlyDeparture!
            }
            if self.guestCount != nil {
                map["guest_count"] = self.guestCount!
            }
            if self.hotelDetailInfo != nil {
                map["hotel_detail_info"] = self.hotelDetailInfo?.toMap()
            }
            if self.invoiceInfo != nil {
                map["invoice_info"] = self.invoiceInfo?.toMap()
            }
            if self.itemId != nil {
                map["item_id"] = self.itemId!
            }
            if self.lastArrivalTime != nil {
                map["last_arrival_time"] = self.lastArrivalTime!
            }
            if self.occupantInfoList != nil {
                var tmp : [Any] = []
                for k in self.occupantInfoList! {
                    tmp.append(k.toMap())
                }
                map["occupant_info_list"] = tmp
            }
            if self.orderStatus != nil {
                map["order_status"] = self.orderStatus!
            }
            if self.orderStatusDesc != nil {
                map["order_status_desc"] = self.orderStatusDesc!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.productType != nil {
                map["product_type"] = self.productType!
            }
            if self.purchaseOrderId != nil {
                map["purchase_order_id"] = self.purchaseOrderId!
            }
            if self.refundPrice != nil {
                map["refund_price"] = self.refundPrice!
            }
            if self.refundReason != nil {
                map["refund_reason"] = self.refundReason!
            }
            if self.refundServiceFee != nil {
                map["refund_service_fee"] = self.refundServiceFee!
            }
            if self.roomNightPriceInfoList != nil {
                var tmp : [Any] = []
                for k in self.roomNightPriceInfoList! {
                    tmp.append(k.toMap())
                }
                map["room_night_price_info_list"] = tmp
            }
            if self.roomNumber != nil {
                map["room_number"] = self.roomNumber!
            }
            if self.roomTypeName != nil {
                map["room_type_name"] = self.roomTypeName!
            }
            if self.sellerId != nil {
                map["seller_id"] = self.sellerId!
            }
            if self.sellerName != nil {
                map["seller_name"] = self.sellerName!
            }
            if self.serviceFee != nil {
                map["service_fee"] = self.serviceFee!
            }
            if self.settleType != nil {
                map["settle_type"] = self.settleType!
            }
            if self.supplierOrderId != nil {
                map["supplier_order_id"] = self.supplierOrderId!
            }
            if self.totalPrice != nil {
                map["total_price"] = self.totalPrice!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("actual_check_in_time") && dict["actual_check_in_time"] != nil {
                self.actualCheckInTime = dict["actual_check_in_time"] as! String
            }
            if dict.keys.contains("actual_check_out_time") && dict["actual_check_out_time"] != nil {
                self.actualCheckOutTime = dict["actual_check_out_time"] as! String
            }
            if dict.keys.contains("btrip_hotel_cancel_policy_d_t_o") && dict["btrip_hotel_cancel_policy_d_t_o"] != nil {
                var model = HotelOrderDetailInfoResponseBody.Module.BtripHotelCancelPolicyDTO()
                model.fromMap(dict["btrip_hotel_cancel_policy_d_t_o"] as! [String: Any])
                self.btripHotelCancelPolicyDTO = model
            }
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! String
            }
            if dict.keys.contains("cancel_fine") && dict["cancel_fine"] != nil {
                self.cancelFine = dict["cancel_fine"] as! Int64
            }
            if dict.keys.contains("cancel_info") && dict["cancel_info"] != nil {
                var model = HotelOrderDetailInfoResponseBody.Module.CancelInfo()
                model.fromMap(dict["cancel_info"] as! [String: Any])
                self.cancelInfo = model
            }
            if dict.keys.contains("check_in") && dict["check_in"] != nil {
                self.checkIn = dict["check_in"] as! String
            }
            if dict.keys.contains("check_out") && dict["check_out"] != nil {
                self.checkOut = dict["check_out"] as! String
            }
            if dict.keys.contains("confirm_order_time") && dict["confirm_order_time"] != nil {
                self.confirmOrderTime = dict["confirm_order_time"] as! String
            }
            if dict.keys.contains("contract_name") && dict["contract_name"] != nil {
                self.contractName = dict["contract_name"] as! String
            }
            if dict.keys.contains("contract_tel") && dict["contract_tel"] != nil {
                self.contractTel = dict["contract_tel"] as! String
            }
            if dict.keys.contains("create_order_time") && dict["create_order_time"] != nil {
                self.createOrderTime = dict["create_order_time"] as! String
            }
            if dict.keys.contains("early_arrival_time") && dict["early_arrival_time"] != nil {
                self.earlyArrivalTime = dict["early_arrival_time"] as! String
            }
            if dict.keys.contains("early_departure") && dict["early_departure"] != nil {
                self.earlyDeparture = dict["early_departure"] as! Bool
            }
            if dict.keys.contains("guest_count") && dict["guest_count"] != nil {
                self.guestCount = dict["guest_count"] as! Int32
            }
            if dict.keys.contains("hotel_detail_info") && dict["hotel_detail_info"] != nil {
                var model = HotelOrderDetailInfoResponseBody.Module.HotelDetailInfo()
                model.fromMap(dict["hotel_detail_info"] as! [String: Any])
                self.hotelDetailInfo = model
            }
            if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
                var model = HotelOrderDetailInfoResponseBody.Module.InvoiceInfo()
                model.fromMap(dict["invoice_info"] as! [String: Any])
                self.invoiceInfo = model
            }
            if dict.keys.contains("item_id") && dict["item_id"] != nil {
                self.itemId = dict["item_id"] as! String
            }
            if dict.keys.contains("last_arrival_time") && dict["last_arrival_time"] != nil {
                self.lastArrivalTime = dict["last_arrival_time"] as! String
            }
            if dict.keys.contains("occupant_info_list") && dict["occupant_info_list"] != nil {
                var tmp : [HotelOrderDetailInfoResponseBody.Module.OccupantInfoList] = []
                for v in dict["occupant_info_list"] as! [Any] {
                    var model = HotelOrderDetailInfoResponseBody.Module.OccupantInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.occupantInfoList = tmp
            }
            if dict.keys.contains("order_status") && dict["order_status"] != nil {
                self.orderStatus = dict["order_status"] as! Int32
            }
            if dict.keys.contains("order_status_desc") && dict["order_status_desc"] != nil {
                self.orderStatusDesc = dict["order_status_desc"] as! String
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("product_type") && dict["product_type"] != nil {
                self.productType = dict["product_type"] as! Int32
            }
            if dict.keys.contains("purchase_order_id") && dict["purchase_order_id"] != nil {
                self.purchaseOrderId = dict["purchase_order_id"] as! String
            }
            if dict.keys.contains("refund_price") && dict["refund_price"] != nil {
                self.refundPrice = dict["refund_price"] as! Int64
            }
            if dict.keys.contains("refund_reason") && dict["refund_reason"] != nil {
                self.refundReason = dict["refund_reason"] as! String
            }
            if dict.keys.contains("refund_service_fee") && dict["refund_service_fee"] != nil {
                self.refundServiceFee = dict["refund_service_fee"] as! Int64
            }
            if dict.keys.contains("room_night_price_info_list") && dict["room_night_price_info_list"] != nil {
                var tmp : [HotelOrderDetailInfoResponseBody.Module.RoomNightPriceInfoList] = []
                for v in dict["room_night_price_info_list"] as! [Any] {
                    var model = HotelOrderDetailInfoResponseBody.Module.RoomNightPriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.roomNightPriceInfoList = tmp
            }
            if dict.keys.contains("room_number") && dict["room_number"] != nil {
                self.roomNumber = dict["room_number"] as! Int32
            }
            if dict.keys.contains("room_type_name") && dict["room_type_name"] != nil {
                self.roomTypeName = dict["room_type_name"] as! String
            }
            if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
                self.sellerId = dict["seller_id"] as! String
            }
            if dict.keys.contains("seller_name") && dict["seller_name"] != nil {
                self.sellerName = dict["seller_name"] as! String
            }
            if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                self.serviceFee = dict["service_fee"] as! Int64
            }
            if dict.keys.contains("settle_type") && dict["settle_type"] != nil {
                self.settleType = dict["settle_type"] as! String
            }
            if dict.keys.contains("supplier_order_id") && dict["supplier_order_id"] != nil {
                self.supplierOrderId = dict["supplier_order_id"] as! String
            }
            if dict.keys.contains("total_price") && dict["total_price"] != nil {
                self.totalPrice = dict["total_price"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelOrderDetailInfoResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelOrderDetailInfoResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderDetailInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderDetailInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderDetailInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderListQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class HotelOrderListQueryRequest : Tea.TeaModel {
    public var allApply: Bool?

    public var applyId: Int64?

    public var departId: String?

    public var endTime: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var thirdpartApplyId: String?

    public var updateEndTime: String?

    public var updateStartTime: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allApply != nil {
            map["all_apply"] = self.allApply!
        }
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.page != nil {
            map["page"] = self.page!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.updateEndTime != nil {
            map["update_end_time"] = self.updateEndTime!
        }
        if self.updateStartTime != nil {
            map["update_start_time"] = self.updateStartTime!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_apply") && dict["all_apply"] != nil {
            self.allApply = dict["all_apply"] as! Bool
        }
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! String
        }
        if dict.keys.contains("page") && dict["page"] != nil {
            self.page = dict["page"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("update_end_time") && dict["update_end_time"] != nil {
            self.updateEndTime = dict["update_end_time"] as! String
        }
        if dict.keys.contains("update_start_time") && dict["update_start_time"] != nil {
            self.updateStartTime = dict["update_start_time"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class HotelOrderListQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class CostCenter : Tea.TeaModel {
            public var corpId: String?

            public var id: Int64?

            public var name: String?

            public var number: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.number != nil {
                    map["number"] = self.number!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("number") && dict["number"] != nil {
                    self.number = dict["number"] as! String
                }
            }
        }
        public class Invoice : Tea.TeaModel {
            public var id: Int64?

            public var invoiceType: Int32?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.invoiceType != nil {
                    map["invoice_type"] = self.invoiceType!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                    self.invoiceType = dict["invoice_type"] as! Int32
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var categoryType: Int32?

            public var gmtCreate: String?

            public var passengerName: String?

            public var payType: Int32?

            public var price: Double?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.categoryType != nil {
                    map["category_type"] = self.categoryType!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("category_type") && dict["category_type"] != nil {
                    self.categoryType = dict["category_type"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class UserAffiliateList : Tea.TeaModel {
            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public var applyId: Int64?

        public var btripTitle: String?

        public var checkIn: String?

        public var checkOut: String?

        public var city: String?

        public var cityAdCode: String?

        public var contactName: String?

        public var corpId: String?

        public var corpName: String?

        public var costCenter: HotelOrderListQueryResponseBody.Module.CostCenter?

        public var departId: String?

        public var departName: String?

        public var extendField: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var guest: String?

        public var hotelName: String?

        public var hotelSupportVatInvoiceType: Int32?

        public var id: Int64?

        public var invoice: HotelOrderListQueryResponseBody.Module.Invoice?

        public var night: Int32?

        public var orderStatus: Int32?

        public var orderStatusDesc: String?

        public var orderType: Int32?

        public var orderTypeDesc: String?

        public var priceInfoList: [HotelOrderListQueryResponseBody.Module.PriceInfoList]?

        public var projectCode: String?

        public var projectId: Int64?

        public var projectTitle: String?

        public var roomNum: Int32?

        public var roomType: String?

        public var thirdpartApplyId: String?

        public var thirdpartItineraryId: String?

        public var thirdpartProjectId: String?

        public var userAffiliateList: [HotelOrderListQueryResponseBody.Module.UserAffiliateList]?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.costCenter?.validate()
            try self.invoice?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.btripTitle != nil {
                map["btrip_title"] = self.btripTitle!
            }
            if self.checkIn != nil {
                map["check_in"] = self.checkIn!
            }
            if self.checkOut != nil {
                map["check_out"] = self.checkOut!
            }
            if self.city != nil {
                map["city"] = self.city!
            }
            if self.cityAdCode != nil {
                map["city_ad_code"] = self.cityAdCode!
            }
            if self.contactName != nil {
                map["contact_name"] = self.contactName!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.corpName != nil {
                map["corp_name"] = self.corpName!
            }
            if self.costCenter != nil {
                map["cost_center"] = self.costCenter?.toMap()
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.extendField != nil {
                map["extend_field"] = self.extendField!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.guest != nil {
                map["guest"] = self.guest!
            }
            if self.hotelName != nil {
                map["hotel_name"] = self.hotelName!
            }
            if self.hotelSupportVatInvoiceType != nil {
                map["hotel_support_vat_invoice_type"] = self.hotelSupportVatInvoiceType!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.invoice != nil {
                map["invoice"] = self.invoice?.toMap()
            }
            if self.night != nil {
                map["night"] = self.night!
            }
            if self.orderStatus != nil {
                map["order_status"] = self.orderStatus!
            }
            if self.orderStatusDesc != nil {
                map["order_status_desc"] = self.orderStatusDesc!
            }
            if self.orderType != nil {
                map["order_type"] = self.orderType!
            }
            if self.orderTypeDesc != nil {
                map["order_type_desc"] = self.orderTypeDesc!
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectId != nil {
                map["project_id"] = self.projectId!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.roomNum != nil {
                map["room_num"] = self.roomNum!
            }
            if self.roomType != nil {
                map["room_type"] = self.roomType!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartItineraryId != nil {
                map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
            }
            if self.thirdpartProjectId != nil {
                map["thirdpart_project_id"] = self.thirdpartProjectId!
            }
            if self.userAffiliateList != nil {
                var tmp : [Any] = []
                for k in self.userAffiliateList! {
                    tmp.append(k.toMap())
                }
                map["user_affiliate_list"] = tmp
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                self.btripTitle = dict["btrip_title"] as! String
            }
            if dict.keys.contains("check_in") && dict["check_in"] != nil {
                self.checkIn = dict["check_in"] as! String
            }
            if dict.keys.contains("check_out") && dict["check_out"] != nil {
                self.checkOut = dict["check_out"] as! String
            }
            if dict.keys.contains("city") && dict["city"] != nil {
                self.city = dict["city"] as! String
            }
            if dict.keys.contains("city_ad_code") && dict["city_ad_code"] != nil {
                self.cityAdCode = dict["city_ad_code"] as! String
            }
            if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                self.contactName = dict["contact_name"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                self.corpName = dict["corp_name"] as! String
            }
            if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                var model = HotelOrderListQueryResponseBody.Module.CostCenter()
                model.fromMap(dict["cost_center"] as! [String: Any])
                self.costCenter = model
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! String
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
                self.extendField = dict["extend_field"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("guest") && dict["guest"] != nil {
                self.guest = dict["guest"] as! String
            }
            if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                self.hotelName = dict["hotel_name"] as! String
            }
            if dict.keys.contains("hotel_support_vat_invoice_type") && dict["hotel_support_vat_invoice_type"] != nil {
                self.hotelSupportVatInvoiceType = dict["hotel_support_vat_invoice_type"] as! Int32
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("invoice") && dict["invoice"] != nil {
                var model = HotelOrderListQueryResponseBody.Module.Invoice()
                model.fromMap(dict["invoice"] as! [String: Any])
                self.invoice = model
            }
            if dict.keys.contains("night") && dict["night"] != nil {
                self.night = dict["night"] as! Int32
            }
            if dict.keys.contains("order_status") && dict["order_status"] != nil {
                self.orderStatus = dict["order_status"] as! Int32
            }
            if dict.keys.contains("order_status_desc") && dict["order_status_desc"] != nil {
                self.orderStatusDesc = dict["order_status_desc"] as! String
            }
            if dict.keys.contains("order_type") && dict["order_type"] != nil {
                self.orderType = dict["order_type"] as! Int32
            }
            if dict.keys.contains("order_type_desc") && dict["order_type_desc"] != nil {
                self.orderTypeDesc = dict["order_type_desc"] as! String
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [HotelOrderListQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = HotelOrderListQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_id") && dict["project_id"] != nil {
                self.projectId = dict["project_id"] as! Int64
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("room_num") && dict["room_num"] != nil {
                self.roomNum = dict["room_num"] as! Int32
            }
            if dict.keys.contains("room_type") && dict["room_type"] != nil {
                self.roomType = dict["room_type"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
            }
            if dict.keys.contains("thirdpart_project_id") && dict["thirdpart_project_id"] != nil {
                self.thirdpartProjectId = dict["thirdpart_project_id"] as! String
            }
            if dict.keys.contains("user_affiliate_list") && dict["user_affiliate_list"] != nil {
                var tmp : [HotelOrderListQueryResponseBody.Module.UserAffiliateList] = []
                for v in dict["user_affiliate_list"] as! [Any] {
                    var model = HotelOrderListQueryResponseBody.Module.UserAffiliateList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.userAffiliateList = tmp
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public class PageInfo : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var totalNumber: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["page"] = self.page!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalNumber != nil {
                map["total_number"] = self.totalNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("page") && dict["page"] != nil {
                self.page = dict["page"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_number") && dict["total_number"] != nil {
                self.totalNumber = dict["total_number"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [HotelOrderListQueryResponseBody.Module]?

    public var pageInfo: HotelOrderListQueryResponseBody.PageInfo?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.pageInfo != nil {
            map["page_info"] = self.pageInfo?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [HotelOrderListQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = HotelOrderListQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("page_info") && dict["page_info"] != nil {
            var model = HotelOrderListQueryResponseBody.PageInfo()
            model.fromMap(dict["page_info"] as! [String: Any])
            self.pageInfo = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderListQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderListQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderListQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderPayHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelOrderPayRequest : Tea.TeaModel {
    public var btripOrderId: Int64?

    public var btripUserId: String?

    public var companyPayFee: Int64?

    public var personPayFee: Int64?

    public var thirdPayAccount: String?

    public var thirdTradeNo: String?

    public var totalPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripOrderId != nil {
            map["btrip_order_id"] = self.btripOrderId!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.companyPayFee != nil {
            map["company_pay_fee"] = self.companyPayFee!
        }
        if self.personPayFee != nil {
            map["person_pay_fee"] = self.personPayFee!
        }
        if self.thirdPayAccount != nil {
            map["third_pay_account"] = self.thirdPayAccount!
        }
        if self.thirdTradeNo != nil {
            map["third_trade_no"] = self.thirdTradeNo!
        }
        if self.totalPrice != nil {
            map["total_price"] = self.totalPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
            self.btripOrderId = dict["btrip_order_id"] as! Int64
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("company_pay_fee") && dict["company_pay_fee"] != nil {
            self.companyPayFee = dict["company_pay_fee"] as! Int64
        }
        if dict.keys.contains("person_pay_fee") && dict["person_pay_fee"] != nil {
            self.personPayFee = dict["person_pay_fee"] as! Int64
        }
        if dict.keys.contains("third_pay_account") && dict["third_pay_account"] != nil {
            self.thirdPayAccount = dict["third_pay_account"] as! String
        }
        if dict.keys.contains("third_trade_no") && dict["third_trade_no"] != nil {
            self.thirdTradeNo = dict["third_trade_no"] as! String
        }
        if dict.keys.contains("total_price") && dict["total_price"] != nil {
            self.totalPrice = dict["total_price"] as! Int64
        }
    }
}

public class HotelOrderPayResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderPayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderPayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderPayResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderPreValidateHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelOrderPreValidateRequest : Tea.TeaModel {
    public class DailyList : Tea.TeaModel {
        public var board: String?

        public var price: Int64?

        public var rateStartTime: String?

        public var roomCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.board != nil {
                map["board"] = self.board!
            }
            if self.price != nil {
                map["price"] = self.price!
            }
            if self.rateStartTime != nil {
                map["rate_start_time"] = self.rateStartTime!
            }
            if self.roomCount != nil {
                map["room_count"] = self.roomCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("board") && dict["board"] != nil {
                self.board = dict["board"] as! String
            }
            if dict.keys.contains("price") && dict["price"] != nil {
                self.price = dict["price"] as! Int64
            }
            if dict.keys.contains("rate_start_time") && dict["rate_start_time"] != nil {
                self.rateStartTime = dict["rate_start_time"] as! String
            }
            if dict.keys.contains("room_count") && dict["room_count"] != nil {
                self.roomCount = dict["room_count"] as! Int32
            }
        }
    }
    public class OccupantInfoList : Tea.TeaModel {
        public var cardNo: String?

        public var cardType: Int32?

        public var name: String?

        public var phone: String?

        public var staffNo: String?

        public var userType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardNo != nil {
                map["card_no"] = self.cardNo!
            }
            if self.cardType != nil {
                map["card_type"] = self.cardType!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.phone != nil {
                map["phone"] = self.phone!
            }
            if self.staffNo != nil {
                map["staff_no"] = self.staffNo!
            }
            if self.userType != nil {
                map["user_type"] = self.userType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("card_no") && dict["card_no"] != nil {
                self.cardNo = dict["card_no"] as! String
            }
            if dict.keys.contains("card_type") && dict["card_type"] != nil {
                self.cardType = dict["card_type"] as! Int32
            }
            if dict.keys.contains("name") && dict["name"] != nil {
                self.name = dict["name"] as! String
            }
            if dict.keys.contains("phone") && dict["phone"] != nil {
                self.phone = dict["phone"] as! String
            }
            if dict.keys.contains("staff_no") && dict["staff_no"] != nil {
                self.staffNo = dict["staff_no"] as! String
            }
            if dict.keys.contains("user_type") && dict["user_type"] != nil {
                self.userType = dict["user_type"] as! Int32
            }
        }
    }
    public var btripUserId: String?

    public var checkIn: String?

    public var checkOut: String?

    public var dailyList: [HotelOrderPreValidateRequest.DailyList]?

    public var itemId: Int64?

    public var numberOfAdultsPerRoom: Int32?

    public var occupantInfoList: [HotelOrderPreValidateRequest.OccupantInfoList]?

    public var ratePlanId: Int64?

    public var roomId: Int64?

    public var roomNum: Int32?

    public var searchRoomPrice: Int64?

    public var sellerId: Int64?

    public var shid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkIn != nil {
            map["check_in"] = self.checkIn!
        }
        if self.checkOut != nil {
            map["check_out"] = self.checkOut!
        }
        if self.dailyList != nil {
            var tmp : [Any] = []
            for k in self.dailyList! {
                tmp.append(k.toMap())
            }
            map["daily_list"] = tmp
        }
        if self.itemId != nil {
            map["item_id"] = self.itemId!
        }
        if self.numberOfAdultsPerRoom != nil {
            map["number_of_adults_per_room"] = self.numberOfAdultsPerRoom!
        }
        if self.occupantInfoList != nil {
            var tmp : [Any] = []
            for k in self.occupantInfoList! {
                tmp.append(k.toMap())
            }
            map["occupant_info_list"] = tmp
        }
        if self.ratePlanId != nil {
            map["rate_plan_id"] = self.ratePlanId!
        }
        if self.roomId != nil {
            map["room_id"] = self.roomId!
        }
        if self.roomNum != nil {
            map["room_num"] = self.roomNum!
        }
        if self.searchRoomPrice != nil {
            map["search_room_price"] = self.searchRoomPrice!
        }
        if self.sellerId != nil {
            map["seller_id"] = self.sellerId!
        }
        if self.shid != nil {
            map["shid"] = self.shid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in") && dict["check_in"] != nil {
            self.checkIn = dict["check_in"] as! String
        }
        if dict.keys.contains("check_out") && dict["check_out"] != nil {
            self.checkOut = dict["check_out"] as! String
        }
        if dict.keys.contains("daily_list") && dict["daily_list"] != nil {
            var tmp : [HotelOrderPreValidateRequest.DailyList] = []
            for v in dict["daily_list"] as! [Any] {
                var model = HotelOrderPreValidateRequest.DailyList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.dailyList = tmp
        }
        if dict.keys.contains("item_id") && dict["item_id"] != nil {
            self.itemId = dict["item_id"] as! Int64
        }
        if dict.keys.contains("number_of_adults_per_room") && dict["number_of_adults_per_room"] != nil {
            self.numberOfAdultsPerRoom = dict["number_of_adults_per_room"] as! Int32
        }
        if dict.keys.contains("occupant_info_list") && dict["occupant_info_list"] != nil {
            var tmp : [HotelOrderPreValidateRequest.OccupantInfoList] = []
            for v in dict["occupant_info_list"] as! [Any] {
                var model = HotelOrderPreValidateRequest.OccupantInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.occupantInfoList = tmp
        }
        if dict.keys.contains("rate_plan_id") && dict["rate_plan_id"] != nil {
            self.ratePlanId = dict["rate_plan_id"] as! Int64
        }
        if dict.keys.contains("room_id") && dict["room_id"] != nil {
            self.roomId = dict["room_id"] as! Int64
        }
        if dict.keys.contains("room_num") && dict["room_num"] != nil {
            self.roomNum = dict["room_num"] as! Int32
        }
        if dict.keys.contains("search_room_price") && dict["search_room_price"] != nil {
            self.searchRoomPrice = dict["search_room_price"] as! Int64
        }
        if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
            self.sellerId = dict["seller_id"] as! Int64
        }
        if dict.keys.contains("shid") && dict["shid"] != nil {
            self.shid = dict["shid"] as! Int64
        }
    }
}

public class HotelOrderPreValidateShrinkRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var checkIn: String?

    public var checkOut: String?

    public var dailyListShrink: String?

    public var itemId: Int64?

    public var numberOfAdultsPerRoom: Int32?

    public var occupantInfoListShrink: String?

    public var ratePlanId: Int64?

    public var roomId: Int64?

    public var roomNum: Int32?

    public var searchRoomPrice: Int64?

    public var sellerId: Int64?

    public var shid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkIn != nil {
            map["check_in"] = self.checkIn!
        }
        if self.checkOut != nil {
            map["check_out"] = self.checkOut!
        }
        if self.dailyListShrink != nil {
            map["daily_list"] = self.dailyListShrink!
        }
        if self.itemId != nil {
            map["item_id"] = self.itemId!
        }
        if self.numberOfAdultsPerRoom != nil {
            map["number_of_adults_per_room"] = self.numberOfAdultsPerRoom!
        }
        if self.occupantInfoListShrink != nil {
            map["occupant_info_list"] = self.occupantInfoListShrink!
        }
        if self.ratePlanId != nil {
            map["rate_plan_id"] = self.ratePlanId!
        }
        if self.roomId != nil {
            map["room_id"] = self.roomId!
        }
        if self.roomNum != nil {
            map["room_num"] = self.roomNum!
        }
        if self.searchRoomPrice != nil {
            map["search_room_price"] = self.searchRoomPrice!
        }
        if self.sellerId != nil {
            map["seller_id"] = self.sellerId!
        }
        if self.shid != nil {
            map["shid"] = self.shid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in") && dict["check_in"] != nil {
            self.checkIn = dict["check_in"] as! String
        }
        if dict.keys.contains("check_out") && dict["check_out"] != nil {
            self.checkOut = dict["check_out"] as! String
        }
        if dict.keys.contains("daily_list") && dict["daily_list"] != nil {
            self.dailyListShrink = dict["daily_list"] as! String
        }
        if dict.keys.contains("item_id") && dict["item_id"] != nil {
            self.itemId = dict["item_id"] as! Int64
        }
        if dict.keys.contains("number_of_adults_per_room") && dict["number_of_adults_per_room"] != nil {
            self.numberOfAdultsPerRoom = dict["number_of_adults_per_room"] as! Int32
        }
        if dict.keys.contains("occupant_info_list") && dict["occupant_info_list"] != nil {
            self.occupantInfoListShrink = dict["occupant_info_list"] as! String
        }
        if dict.keys.contains("rate_plan_id") && dict["rate_plan_id"] != nil {
            self.ratePlanId = dict["rate_plan_id"] as! Int64
        }
        if dict.keys.contains("room_id") && dict["room_id"] != nil {
            self.roomId = dict["room_id"] as! Int64
        }
        if dict.keys.contains("room_num") && dict["room_num"] != nil {
            self.roomNum = dict["room_num"] as! Int32
        }
        if dict.keys.contains("search_room_price") && dict["search_room_price"] != nil {
            self.searchRoomPrice = dict["search_room_price"] as! Int64
        }
        if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
            self.sellerId = dict["seller_id"] as! Int64
        }
        if dict.keys.contains("shid") && dict["shid"] != nil {
            self.shid = dict["shid"] as! Int64
        }
    }
}

public class HotelOrderPreValidateResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class PromotionInfo : Tea.TeaModel {
            public class PromotionDetailInfoList : Tea.TeaModel {
                public var checkStatus: Bool?

                public var needCheck: Bool?

                public var promotionCode: String?

                public var promotionId: String?

                public var promotionName: String?

                public var promotionPrice: Int64?

                public var promotionType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkStatus != nil {
                        map["check_status"] = self.checkStatus!
                    }
                    if self.needCheck != nil {
                        map["need_check"] = self.needCheck!
                    }
                    if self.promotionCode != nil {
                        map["promotion_code"] = self.promotionCode!
                    }
                    if self.promotionId != nil {
                        map["promotion_id"] = self.promotionId!
                    }
                    if self.promotionName != nil {
                        map["promotion_name"] = self.promotionName!
                    }
                    if self.promotionPrice != nil {
                        map["promotion_price"] = self.promotionPrice!
                    }
                    if self.promotionType != nil {
                        map["promotion_type"] = self.promotionType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("check_status") && dict["check_status"] != nil {
                        self.checkStatus = dict["check_status"] as! Bool
                    }
                    if dict.keys.contains("need_check") && dict["need_check"] != nil {
                        self.needCheck = dict["need_check"] as! Bool
                    }
                    if dict.keys.contains("promotion_code") && dict["promotion_code"] != nil {
                        self.promotionCode = dict["promotion_code"] as! String
                    }
                    if dict.keys.contains("promotion_id") && dict["promotion_id"] != nil {
                        self.promotionId = dict["promotion_id"] as! String
                    }
                    if dict.keys.contains("promotion_name") && dict["promotion_name"] != nil {
                        self.promotionName = dict["promotion_name"] as! String
                    }
                    if dict.keys.contains("promotion_price") && dict["promotion_price"] != nil {
                        self.promotionPrice = dict["promotion_price"] as! Int64
                    }
                    if dict.keys.contains("promotion_type") && dict["promotion_type"] != nil {
                        self.promotionType = dict["promotion_type"] as! String
                    }
                }
            }
            public var extAttrMap: [String: String]?

            public var promotionDetailInfoList: [HotelOrderPreValidateResponseBody.Module.PromotionInfo.PromotionDetailInfoList]?

            public var promotionTotalPrice: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.extAttrMap != nil {
                    map["ext_attr_map"] = self.extAttrMap!
                }
                if self.promotionDetailInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.promotionDetailInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["promotion_detail_info_list"] = tmp
                }
                if self.promotionTotalPrice != nil {
                    map["promotion_total_price"] = self.promotionTotalPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ext_attr_map") && dict["ext_attr_map"] != nil {
                    self.extAttrMap = dict["ext_attr_map"] as! [String: String]
                }
                if dict.keys.contains("promotion_detail_info_list") && dict["promotion_detail_info_list"] != nil {
                    var tmp : [HotelOrderPreValidateResponseBody.Module.PromotionInfo.PromotionDetailInfoList] = []
                    for v in dict["promotion_detail_info_list"] as! [Any] {
                        var model = HotelOrderPreValidateResponseBody.Module.PromotionInfo.PromotionDetailInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.promotionDetailInfoList = tmp
                }
                if dict.keys.contains("promotion_total_price") && dict["promotion_total_price"] != nil {
                    self.promotionTotalPrice = dict["promotion_total_price"] as! Int64
                }
            }
        }
        public class RatePlanDaily : Tea.TeaModel {
            public var board: String?

            public var discountPrice: String?

            public var maxBookingNum: Int32?

            public var price: Int64?

            public var rateStartTime: String?

            public var roomCount: Int32?

            public var roundingDiscountPrice: String?

            public var roundingPrice: String?

            public var serviceFee: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.board != nil {
                    map["board"] = self.board!
                }
                if self.discountPrice != nil {
                    map["discount_price"] = self.discountPrice!
                }
                if self.maxBookingNum != nil {
                    map["max_booking_num"] = self.maxBookingNum!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.rateStartTime != nil {
                    map["rate_start_time"] = self.rateStartTime!
                }
                if self.roomCount != nil {
                    map["room_count"] = self.roomCount!
                }
                if self.roundingDiscountPrice != nil {
                    map["rounding_discount_price"] = self.roundingDiscountPrice!
                }
                if self.roundingPrice != nil {
                    map["rounding_price"] = self.roundingPrice!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("board") && dict["board"] != nil {
                    self.board = dict["board"] as! String
                }
                if dict.keys.contains("discount_price") && dict["discount_price"] != nil {
                    self.discountPrice = dict["discount_price"] as! String
                }
                if dict.keys.contains("max_booking_num") && dict["max_booking_num"] != nil {
                    self.maxBookingNum = dict["max_booking_num"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("rate_start_time") && dict["rate_start_time"] != nil {
                    self.rateStartTime = dict["rate_start_time"] as! String
                }
                if dict.keys.contains("room_count") && dict["room_count"] != nil {
                    self.roomCount = dict["room_count"] as! Int32
                }
                if dict.keys.contains("rounding_discount_price") && dict["rounding_discount_price"] != nil {
                    self.roundingDiscountPrice = dict["rounding_discount_price"] as! String
                }
                if dict.keys.contains("rounding_price") && dict["rounding_price"] != nil {
                    self.roundingPrice = dict["rounding_price"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Int64
                }
            }
        }
        public class RatePlanInfo : Tea.TeaModel {
            public class BtripHotelCancelPolicyDTO : Tea.TeaModel {
                public class BtripHotelCancelPolicyInfoDTOList : Tea.TeaModel {
                    public var hour: Int64?

                    public var value: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.hour != nil {
                            map["hour"] = self.hour!
                        }
                        if self.value != nil {
                            map["value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("hour") && dict["hour"] != nil {
                            self.hour = dict["hour"] as! Int64
                        }
                        if dict.keys.contains("value") && dict["value"] != nil {
                            self.value = dict["value"] as! Int64
                        }
                    }
                }
                public var btripHotelCancelPolicyInfoDTOList: [HotelOrderPreValidateResponseBody.Module.RatePlanInfo.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList]?

                public var cancelPolicyType: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.btripHotelCancelPolicyInfoDTOList != nil {
                        var tmp : [Any] = []
                        for k in self.btripHotelCancelPolicyInfoDTOList! {
                            tmp.append(k.toMap())
                        }
                        map["btrip_hotel_cancel_policy_info_d_t_o_list"] = tmp
                    }
                    if self.cancelPolicyType != nil {
                        map["cancel_policy_type"] = self.cancelPolicyType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("btrip_hotel_cancel_policy_info_d_t_o_list") && dict["btrip_hotel_cancel_policy_info_d_t_o_list"] != nil {
                        var tmp : [HotelOrderPreValidateResponseBody.Module.RatePlanInfo.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList] = []
                        for v in dict["btrip_hotel_cancel_policy_info_d_t_o_list"] as! [Any] {
                            var model = HotelOrderPreValidateResponseBody.Module.RatePlanInfo.BtripHotelCancelPolicyDTO.BtripHotelCancelPolicyInfoDTOList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.btripHotelCancelPolicyInfoDTOList = tmp
                    }
                    if dict.keys.contains("cancel_policy_type") && dict["cancel_policy_type"] != nil {
                        self.cancelPolicyType = dict["cancel_policy_type"] as! Int32
                    }
                }
            }
            public var bedDesc: String?

            public var btripHotelCancelPolicyDTO: HotelOrderPreValidateResponseBody.Module.RatePlanInfo.BtripHotelCancelPolicyDTO?

            public var earliestCheckInTime: String?

            public var latestCheckOutTime: String?

            public var maxBookingNum: Int32?

            public var maxOccupancyNum: Int32?

            public var needCertificate: Bool?

            public var needEmail: Bool?

            public var needEnglishName: Bool?

            public var totalOrderPrice: Int64?

            public var totalRoomPrice: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.btripHotelCancelPolicyDTO?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bedDesc != nil {
                    map["bed_desc"] = self.bedDesc!
                }
                if self.btripHotelCancelPolicyDTO != nil {
                    map["btrip_hotel_cancel_policy_d_t_o"] = self.btripHotelCancelPolicyDTO?.toMap()
                }
                if self.earliestCheckInTime != nil {
                    map["earliest_check_in_time"] = self.earliestCheckInTime!
                }
                if self.latestCheckOutTime != nil {
                    map["latest_check_out_time"] = self.latestCheckOutTime!
                }
                if self.maxBookingNum != nil {
                    map["max_booking_num"] = self.maxBookingNum!
                }
                if self.maxOccupancyNum != nil {
                    map["max_occupancy_num"] = self.maxOccupancyNum!
                }
                if self.needCertificate != nil {
                    map["need_certificate"] = self.needCertificate!
                }
                if self.needEmail != nil {
                    map["need_email"] = self.needEmail!
                }
                if self.needEnglishName != nil {
                    map["need_english_name"] = self.needEnglishName!
                }
                if self.totalOrderPrice != nil {
                    map["total_order_price"] = self.totalOrderPrice!
                }
                if self.totalRoomPrice != nil {
                    map["total_room_price"] = self.totalRoomPrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("bed_desc") && dict["bed_desc"] != nil {
                    self.bedDesc = dict["bed_desc"] as! String
                }
                if dict.keys.contains("btrip_hotel_cancel_policy_d_t_o") && dict["btrip_hotel_cancel_policy_d_t_o"] != nil {
                    var model = HotelOrderPreValidateResponseBody.Module.RatePlanInfo.BtripHotelCancelPolicyDTO()
                    model.fromMap(dict["btrip_hotel_cancel_policy_d_t_o"] as! [String: Any])
                    self.btripHotelCancelPolicyDTO = model
                }
                if dict.keys.contains("earliest_check_in_time") && dict["earliest_check_in_time"] != nil {
                    self.earliestCheckInTime = dict["earliest_check_in_time"] as! String
                }
                if dict.keys.contains("latest_check_out_time") && dict["latest_check_out_time"] != nil {
                    self.latestCheckOutTime = dict["latest_check_out_time"] as! String
                }
                if dict.keys.contains("max_booking_num") && dict["max_booking_num"] != nil {
                    self.maxBookingNum = dict["max_booking_num"] as! Int32
                }
                if dict.keys.contains("max_occupancy_num") && dict["max_occupancy_num"] != nil {
                    self.maxOccupancyNum = dict["max_occupancy_num"] as! Int32
                }
                if dict.keys.contains("need_certificate") && dict["need_certificate"] != nil {
                    self.needCertificate = dict["need_certificate"] as! Bool
                }
                if dict.keys.contains("need_email") && dict["need_email"] != nil {
                    self.needEmail = dict["need_email"] as! Bool
                }
                if dict.keys.contains("need_english_name") && dict["need_english_name"] != nil {
                    self.needEnglishName = dict["need_english_name"] as! Bool
                }
                if dict.keys.contains("total_order_price") && dict["total_order_price"] != nil {
                    self.totalOrderPrice = dict["total_order_price"] as! Int64
                }
                if dict.keys.contains("total_room_price") && dict["total_room_price"] != nil {
                    self.totalRoomPrice = dict["total_room_price"] as! Int64
                }
            }
        }
        public var extendInfo: String?

        public var itineraryNo: String?

        public var promotionInfo: HotelOrderPreValidateResponseBody.Module.PromotionInfo?

        public var ratePlanDaily: [HotelOrderPreValidateResponseBody.Module.RatePlanDaily]?

        public var ratePlanId: Int64?

        public var ratePlanInfo: HotelOrderPreValidateResponseBody.Module.RatePlanInfo?

        public var validateResKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.promotionInfo?.validate()
            try self.ratePlanInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.extendInfo != nil {
                map["extend_info"] = self.extendInfo!
            }
            if self.itineraryNo != nil {
                map["itinerary_no"] = self.itineraryNo!
            }
            if self.promotionInfo != nil {
                map["promotion_info"] = self.promotionInfo?.toMap()
            }
            if self.ratePlanDaily != nil {
                var tmp : [Any] = []
                for k in self.ratePlanDaily! {
                    tmp.append(k.toMap())
                }
                map["rate_plan_daily"] = tmp
            }
            if self.ratePlanId != nil {
                map["rate_plan_id"] = self.ratePlanId!
            }
            if self.ratePlanInfo != nil {
                map["rate_plan_info"] = self.ratePlanInfo?.toMap()
            }
            if self.validateResKey != nil {
                map["validate_res_key"] = self.validateResKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("extend_info") && dict["extend_info"] != nil {
                self.extendInfo = dict["extend_info"] as! String
            }
            if dict.keys.contains("itinerary_no") && dict["itinerary_no"] != nil {
                self.itineraryNo = dict["itinerary_no"] as! String
            }
            if dict.keys.contains("promotion_info") && dict["promotion_info"] != nil {
                var model = HotelOrderPreValidateResponseBody.Module.PromotionInfo()
                model.fromMap(dict["promotion_info"] as! [String: Any])
                self.promotionInfo = model
            }
            if dict.keys.contains("rate_plan_daily") && dict["rate_plan_daily"] != nil {
                var tmp : [HotelOrderPreValidateResponseBody.Module.RatePlanDaily] = []
                for v in dict["rate_plan_daily"] as! [Any] {
                    var model = HotelOrderPreValidateResponseBody.Module.RatePlanDaily()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.ratePlanDaily = tmp
            }
            if dict.keys.contains("rate_plan_id") && dict["rate_plan_id"] != nil {
                self.ratePlanId = dict["rate_plan_id"] as! Int64
            }
            if dict.keys.contains("rate_plan_info") && dict["rate_plan_info"] != nil {
                var model = HotelOrderPreValidateResponseBody.Module.RatePlanInfo()
                model.fromMap(dict["rate_plan_info"] as! [String: Any])
                self.ratePlanInfo = model
            }
            if dict.keys.contains("validate_res_key") && dict["validate_res_key"] != nil {
                self.validateResKey = dict["validate_res_key"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelOrderPreValidateResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelOrderPreValidateResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderPreValidateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderPreValidateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderPreValidateResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelOrderQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class HotelOrderQueryRequest : Tea.TeaModel {
    public var orderId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
    }
}

public class HotelOrderQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class HotelInfo : Tea.TeaModel {
            public var checkIn: Int64?

            public var checkOut: Int64?

            public var city: String?

            public var cityAdCode: String?

            public var hotelAddress: String?

            public var hotelName: String?

            public var hotelPhone: String?

            public var hotelSupportVatInvoiceType: Int32?

            public var night: Int32?

            public var roomNum: Int32?

            public var roomType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkIn != nil {
                    map["check_in"] = self.checkIn!
                }
                if self.checkOut != nil {
                    map["check_out"] = self.checkOut!
                }
                if self.city != nil {
                    map["city"] = self.city!
                }
                if self.cityAdCode != nil {
                    map["city_ad_code"] = self.cityAdCode!
                }
                if self.hotelAddress != nil {
                    map["hotel_address"] = self.hotelAddress!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.hotelPhone != nil {
                    map["hotel_phone"] = self.hotelPhone!
                }
                if self.hotelSupportVatInvoiceType != nil {
                    map["hotel_support_vat_invoice_type"] = self.hotelSupportVatInvoiceType!
                }
                if self.night != nil {
                    map["night"] = self.night!
                }
                if self.roomNum != nil {
                    map["room_num"] = self.roomNum!
                }
                if self.roomType != nil {
                    map["room_type"] = self.roomType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("check_in") && dict["check_in"] != nil {
                    self.checkIn = dict["check_in"] as! Int64
                }
                if dict.keys.contains("check_out") && dict["check_out"] != nil {
                    self.checkOut = dict["check_out"] as! Int64
                }
                if dict.keys.contains("city") && dict["city"] != nil {
                    self.city = dict["city"] as! String
                }
                if dict.keys.contains("city_ad_code") && dict["city_ad_code"] != nil {
                    self.cityAdCode = dict["city_ad_code"] as! String
                }
                if dict.keys.contains("hotel_address") && dict["hotel_address"] != nil {
                    self.hotelAddress = dict["hotel_address"] as! String
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("hotel_phone") && dict["hotel_phone"] != nil {
                    self.hotelPhone = dict["hotel_phone"] as! String
                }
                if dict.keys.contains("hotel_support_vat_invoice_type") && dict["hotel_support_vat_invoice_type"] != nil {
                    self.hotelSupportVatInvoiceType = dict["hotel_support_vat_invoice_type"] as! Int32
                }
                if dict.keys.contains("night") && dict["night"] != nil {
                    self.night = dict["night"] as! Int32
                }
                if dict.keys.contains("room_num") && dict["room_num"] != nil {
                    self.roomNum = dict["room_num"] as! Int32
                }
                if dict.keys.contains("room_type") && dict["room_type"] != nil {
                    self.roomType = dict["room_type"] as! String
                }
            }
        }
        public class InvoiceInfo : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class OrderBaseInfo : Tea.TeaModel {
            public var applyId: String?

            public var btripTitle: String?

            public var corpId: String?

            public var corpName: String?

            public var departId: String?

            public var departName: String?

            public var exceedApplyNos: [String]?

            public var extendField: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: Int64?

            public var itineraryId: String?

            public var orderStatus: Int32?

            public var orderType: Int32?

            public var thirdpartApplyId: String?

            public var thirdpartDepartId: String?

            public var thirdpartItineraryId: String?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.btripTitle != nil {
                    map["btrip_title"] = self.btripTitle!
                }
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.departId != nil {
                    map["depart_id"] = self.departId!
                }
                if self.departName != nil {
                    map["depart_name"] = self.departName!
                }
                if self.exceedApplyNos != nil {
                    map["exceed_apply_nos"] = self.exceedApplyNos!
                }
                if self.extendField != nil {
                    map["extend_field"] = self.extendField!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["gmt_modified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.orderStatus != nil {
                    map["order_status"] = self.orderStatus!
                }
                if self.orderType != nil {
                    map["order_type"] = self.orderType!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.thirdpartDepartId != nil {
                    map["thirdpart_depart_id"] = self.thirdpartDepartId!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                    self.btripTitle = dict["btrip_title"] as! String
                }
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                    self.departId = dict["depart_id"] as! String
                }
                if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                    self.departName = dict["depart_name"] as! String
                }
                if dict.keys.contains("exceed_apply_nos") && dict["exceed_apply_nos"] != nil {
                    self.exceedApplyNos = dict["exceed_apply_nos"] as! [String]
                }
                if dict.keys.contains("extend_field") && dict["extend_field"] != nil {
                    self.extendField = dict["extend_field"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! Int64
                }
                if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                    self.gmtModified = dict["gmt_modified"] as! Int64
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("order_status") && dict["order_status"] != nil {
                    self.orderStatus = dict["order_status"] as! Int32
                }
                if dict.keys.contains("order_type") && dict["order_type"] != nil {
                    self.orderType = dict["order_type"] as! Int32
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("thirdpart_depart_id") && dict["thirdpart_depart_id"] != nil {
                    self.thirdpartDepartId = dict["thirdpart_depart_id"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public class PassengerList : Tea.TeaModel {
            public var applyId: String?

            public var costCenterId: Int64?

            public var costCenterName: String?

            public var costCenterNumber: String?

            public var itineraryId: String?

            public var projectCode: String?

            public var projectId: Int64?

            public var projectTitle: String?

            public var thirdpartApplyId: String?

            public var thirdpartCostCenterId: String?

            public var thirdpartProjectId: String?

            public var userId: String?

            public var userName: String?

            public var userType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.costCenterId != nil {
                    map["cost_center_id"] = self.costCenterId!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectId != nil {
                    map["project_id"] = self.projectId!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.thirdpartCostCenterId != nil {
                    map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
                }
                if self.thirdpartProjectId != nil {
                    map["thirdpart_project_id"] = self.thirdpartProjectId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                if self.userType != nil {
                    map["user_type"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                    self.costCenterId = dict["cost_center_id"] as! Int64
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_id") && dict["project_id"] != nil {
                    self.projectId = dict["project_id"] as! Int64
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                    self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
                }
                if dict.keys.contains("thirdpart_project_id") && dict["thirdpart_project_id"] != nil {
                    self.thirdpartProjectId = dict["thirdpart_project_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
                if dict.keys.contains("user_type") && dict["user_type"] != nil {
                    self.userType = dict["user_type"] as! Int32
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var gmtCreate: Int64?

            public var payType: Int32?

            public var price: Double?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! Int64
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public var hotelInfo: HotelOrderQueryResponseBody.Module.HotelInfo?

        public var invoiceInfo: HotelOrderQueryResponseBody.Module.InvoiceInfo?

        public var orderBaseInfo: HotelOrderQueryResponseBody.Module.OrderBaseInfo?

        public var passengerList: [HotelOrderQueryResponseBody.Module.PassengerList]?

        public var priceInfoList: [HotelOrderQueryResponseBody.Module.PriceInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.hotelInfo?.validate()
            try self.invoiceInfo?.validate()
            try self.orderBaseInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hotelInfo != nil {
                map["hotel_info"] = self.hotelInfo?.toMap()
            }
            if self.invoiceInfo != nil {
                map["invoice_info"] = self.invoiceInfo?.toMap()
            }
            if self.orderBaseInfo != nil {
                map["order_base_info"] = self.orderBaseInfo?.toMap()
            }
            if self.passengerList != nil {
                var tmp : [Any] = []
                for k in self.passengerList! {
                    tmp.append(k.toMap())
                }
                map["passenger_list"] = tmp
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("hotel_info") && dict["hotel_info"] != nil {
                var model = HotelOrderQueryResponseBody.Module.HotelInfo()
                model.fromMap(dict["hotel_info"] as! [String: Any])
                self.hotelInfo = model
            }
            if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
                var model = HotelOrderQueryResponseBody.Module.InvoiceInfo()
                model.fromMap(dict["invoice_info"] as! [String: Any])
                self.invoiceInfo = model
            }
            if dict.keys.contains("order_base_info") && dict["order_base_info"] != nil {
                var model = HotelOrderQueryResponseBody.Module.OrderBaseInfo()
                model.fromMap(dict["order_base_info"] as! [String: Any])
                self.orderBaseInfo = model
            }
            if dict.keys.contains("passenger_list") && dict["passenger_list"] != nil {
                var tmp : [HotelOrderQueryResponseBody.Module.PassengerList] = []
                for v in dict["passenger_list"] as! [Any] {
                    var model = HotelOrderQueryResponseBody.Module.PassengerList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerList = tmp
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [HotelOrderQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = HotelOrderQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelOrderQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelOrderQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelOrderQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelOrderQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelOrderQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelPricePullHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelPricePullRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var checkIn: String?

    public var checkOut: String?

    public var cityCode: Int32?

    public var hotelIds: [String]?

    public var paymentType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkIn != nil {
            map["check_in"] = self.checkIn!
        }
        if self.checkOut != nil {
            map["check_out"] = self.checkOut!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.hotelIds != nil {
            map["hotel_ids"] = self.hotelIds!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in") && dict["check_in"] != nil {
            self.checkIn = dict["check_in"] as! String
        }
        if dict.keys.contains("check_out") && dict["check_out"] != nil {
            self.checkOut = dict["check_out"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! Int32
        }
        if dict.keys.contains("hotel_ids") && dict["hotel_ids"] != nil {
            self.hotelIds = dict["hotel_ids"] as! [String]
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
    }
}

public class HotelPricePullShrinkRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var checkIn: String?

    public var checkOut: String?

    public var cityCode: Int32?

    public var hotelIdsShrink: String?

    public var paymentType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkIn != nil {
            map["check_in"] = self.checkIn!
        }
        if self.checkOut != nil {
            map["check_out"] = self.checkOut!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.hotelIdsShrink != nil {
            map["hotel_ids"] = self.hotelIdsShrink!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in") && dict["check_in"] != nil {
            self.checkIn = dict["check_in"] as! String
        }
        if dict.keys.contains("check_out") && dict["check_out"] != nil {
            self.checkOut = dict["check_out"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! Int32
        }
        if dict.keys.contains("hotel_ids") && dict["hotel_ids"] != nil {
            self.hotelIdsShrink = dict["hotel_ids"] as! String
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
    }
}

public class HotelPricePullResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class HotelPriceInfos : Tea.TeaModel {
            public class Rooms : Tea.TeaModel {
                public class Rates : Tea.TeaModel {
                    public class BtripHotelCancelPolicy : Tea.TeaModel {
                        public class BtripHotelCancelPolicyInfoDTOList : Tea.TeaModel {
                            public var hour: Int64?

                            public var value: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.hour != nil {
                                    map["hour"] = self.hour!
                                }
                                if self.value != nil {
                                    map["value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("hour") && dict["hour"] != nil {
                                    self.hour = dict["hour"] as! Int64
                                }
                                if dict.keys.contains("value") && dict["value"] != nil {
                                    self.value = dict["value"] as! Int64
                                }
                            }
                        }
                        public var btripHotelCancelPolicyInfoDTOList: [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.BtripHotelCancelPolicy.BtripHotelCancelPolicyInfoDTOList]?

                        public var cancelPolicyType: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.btripHotelCancelPolicyInfoDTOList != nil {
                                var tmp : [Any] = []
                                for k in self.btripHotelCancelPolicyInfoDTOList! {
                                    tmp.append(k.toMap())
                                }
                                map["btrip_hotel_cancel_policy_info_d_t_o_list"] = tmp
                            }
                            if self.cancelPolicyType != nil {
                                map["cancel_policy_type"] = self.cancelPolicyType!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("btrip_hotel_cancel_policy_info_d_t_o_list") && dict["btrip_hotel_cancel_policy_info_d_t_o_list"] != nil {
                                var tmp : [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.BtripHotelCancelPolicy.BtripHotelCancelPolicyInfoDTOList] = []
                                for v in dict["btrip_hotel_cancel_policy_info_d_t_o_list"] as! [Any] {
                                    var model = HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.BtripHotelCancelPolicy.BtripHotelCancelPolicyInfoDTOList()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.btripHotelCancelPolicyInfoDTOList = tmp
                            }
                            if dict.keys.contains("cancel_policy_type") && dict["cancel_policy_type"] != nil {
                                self.cancelPolicyType = dict["cancel_policy_type"] as! Int32
                            }
                        }
                    }
                    public class RateDailys : Tea.TeaModel {
                        public var discountPrice: Int64?

                        public var lastDiscountsPrice: Int64?

                        public var price: Int64?

                        public var startDate: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.discountPrice != nil {
                                map["discount_price"] = self.discountPrice!
                            }
                            if self.lastDiscountsPrice != nil {
                                map["last_discounts_price"] = self.lastDiscountsPrice!
                            }
                            if self.price != nil {
                                map["price"] = self.price!
                            }
                            if self.startDate != nil {
                                map["start_date"] = self.startDate!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("discount_price") && dict["discount_price"] != nil {
                                self.discountPrice = dict["discount_price"] as! Int64
                            }
                            if dict.keys.contains("last_discounts_price") && dict["last_discounts_price"] != nil {
                                self.lastDiscountsPrice = dict["last_discounts_price"] as! Int64
                            }
                            if dict.keys.contains("price") && dict["price"] != nil {
                                self.price = dict["price"] as! Int64
                            }
                            if dict.keys.contains("start_date") && dict["start_date"] != nil {
                                self.startDate = dict["start_date"] as! String
                            }
                        }
                    }
                    public var breakfast: String?

                    public var breakfastCount: Int32?

                    public var btripHotelCancelPolicy: HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.BtripHotelCancelPolicy?

                    public var cancelPolicyDesc: String?

                    public var companyAassist: String?

                    public var currencyCode: String?

                    public var instantConfirm: Bool?

                    public var itemId: String?

                    public var maxAdvHours: Int32?

                    public var maxDays: Int32?

                    public var minAdvHours: Int32?

                    public var minDays: Int32?

                    public var nod: Int32?

                    public var nop: Int32?

                    public var paymentType: Int32?

                    public var price: Int64?

                    public var promotionInfo: String?

                    public var quota: Int32?

                    public var rateDailys: [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.RateDailys]?

                    public var rateId: String?

                    public var ratePlanName: String?

                    public var rpId: String?

                    public var sellerId: String?

                    public var supportSpecialInvoice: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.btripHotelCancelPolicy?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.breakfast != nil {
                            map["breakfast"] = self.breakfast!
                        }
                        if self.breakfastCount != nil {
                            map["breakfast_count"] = self.breakfastCount!
                        }
                        if self.btripHotelCancelPolicy != nil {
                            map["btrip_hotel_cancel_policy"] = self.btripHotelCancelPolicy?.toMap()
                        }
                        if self.cancelPolicyDesc != nil {
                            map["cancel_policy_desc"] = self.cancelPolicyDesc!
                        }
                        if self.companyAassist != nil {
                            map["company_aassist"] = self.companyAassist!
                        }
                        if self.currencyCode != nil {
                            map["currency_code"] = self.currencyCode!
                        }
                        if self.instantConfirm != nil {
                            map["instant_confirm"] = self.instantConfirm!
                        }
                        if self.itemId != nil {
                            map["item_id"] = self.itemId!
                        }
                        if self.maxAdvHours != nil {
                            map["max_adv_hours"] = self.maxAdvHours!
                        }
                        if self.maxDays != nil {
                            map["max_days"] = self.maxDays!
                        }
                        if self.minAdvHours != nil {
                            map["min_adv_hours"] = self.minAdvHours!
                        }
                        if self.minDays != nil {
                            map["min_days"] = self.minDays!
                        }
                        if self.nod != nil {
                            map["nod"] = self.nod!
                        }
                        if self.nop != nil {
                            map["nop"] = self.nop!
                        }
                        if self.paymentType != nil {
                            map["payment_type"] = self.paymentType!
                        }
                        if self.price != nil {
                            map["price"] = self.price!
                        }
                        if self.promotionInfo != nil {
                            map["promotion_info"] = self.promotionInfo!
                        }
                        if self.quota != nil {
                            map["quota"] = self.quota!
                        }
                        if self.rateDailys != nil {
                            var tmp : [Any] = []
                            for k in self.rateDailys! {
                                tmp.append(k.toMap())
                            }
                            map["rate_dailys"] = tmp
                        }
                        if self.rateId != nil {
                            map["rate_id"] = self.rateId!
                        }
                        if self.ratePlanName != nil {
                            map["rate_plan_name"] = self.ratePlanName!
                        }
                        if self.rpId != nil {
                            map["rp_id"] = self.rpId!
                        }
                        if self.sellerId != nil {
                            map["seller_id"] = self.sellerId!
                        }
                        if self.supportSpecialInvoice != nil {
                            map["support_special_invoice"] = self.supportSpecialInvoice!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("breakfast") && dict["breakfast"] != nil {
                            self.breakfast = dict["breakfast"] as! String
                        }
                        if dict.keys.contains("breakfast_count") && dict["breakfast_count"] != nil {
                            self.breakfastCount = dict["breakfast_count"] as! Int32
                        }
                        if dict.keys.contains("btrip_hotel_cancel_policy") && dict["btrip_hotel_cancel_policy"] != nil {
                            var model = HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.BtripHotelCancelPolicy()
                            model.fromMap(dict["btrip_hotel_cancel_policy"] as! [String: Any])
                            self.btripHotelCancelPolicy = model
                        }
                        if dict.keys.contains("cancel_policy_desc") && dict["cancel_policy_desc"] != nil {
                            self.cancelPolicyDesc = dict["cancel_policy_desc"] as! String
                        }
                        if dict.keys.contains("company_aassist") && dict["company_aassist"] != nil {
                            self.companyAassist = dict["company_aassist"] as! String
                        }
                        if dict.keys.contains("currency_code") && dict["currency_code"] != nil {
                            self.currencyCode = dict["currency_code"] as! String
                        }
                        if dict.keys.contains("instant_confirm") && dict["instant_confirm"] != nil {
                            self.instantConfirm = dict["instant_confirm"] as! Bool
                        }
                        if dict.keys.contains("item_id") && dict["item_id"] != nil {
                            self.itemId = dict["item_id"] as! String
                        }
                        if dict.keys.contains("max_adv_hours") && dict["max_adv_hours"] != nil {
                            self.maxAdvHours = dict["max_adv_hours"] as! Int32
                        }
                        if dict.keys.contains("max_days") && dict["max_days"] != nil {
                            self.maxDays = dict["max_days"] as! Int32
                        }
                        if dict.keys.contains("min_adv_hours") && dict["min_adv_hours"] != nil {
                            self.minAdvHours = dict["min_adv_hours"] as! Int32
                        }
                        if dict.keys.contains("min_days") && dict["min_days"] != nil {
                            self.minDays = dict["min_days"] as! Int32
                        }
                        if dict.keys.contains("nod") && dict["nod"] != nil {
                            self.nod = dict["nod"] as! Int32
                        }
                        if dict.keys.contains("nop") && dict["nop"] != nil {
                            self.nop = dict["nop"] as! Int32
                        }
                        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
                            self.paymentType = dict["payment_type"] as! Int32
                        }
                        if dict.keys.contains("price") && dict["price"] != nil {
                            self.price = dict["price"] as! Int64
                        }
                        if dict.keys.contains("promotion_info") && dict["promotion_info"] != nil {
                            self.promotionInfo = dict["promotion_info"] as! String
                        }
                        if dict.keys.contains("quota") && dict["quota"] != nil {
                            self.quota = dict["quota"] as! Int32
                        }
                        if dict.keys.contains("rate_dailys") && dict["rate_dailys"] != nil {
                            var tmp : [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.RateDailys] = []
                            for v in dict["rate_dailys"] as! [Any] {
                                var model = HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates.RateDailys()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.rateDailys = tmp
                        }
                        if dict.keys.contains("rate_id") && dict["rate_id"] != nil {
                            self.rateId = dict["rate_id"] as! String
                        }
                        if dict.keys.contains("rate_plan_name") && dict["rate_plan_name"] != nil {
                            self.ratePlanName = dict["rate_plan_name"] as! String
                        }
                        if dict.keys.contains("rp_id") && dict["rp_id"] != nil {
                            self.rpId = dict["rp_id"] as! String
                        }
                        if dict.keys.contains("seller_id") && dict["seller_id"] != nil {
                            self.sellerId = dict["seller_id"] as! String
                        }
                        if dict.keys.contains("support_special_invoice") && dict["support_special_invoice"] != nil {
                            self.supportSpecialInvoice = dict["support_special_invoice"] as! Bool
                        }
                    }
                }
                public var area: String?

                public var bed: String?

                public var bedTypeString: String?

                public var facility: String?

                public var floor: String?

                public var maxOccupancy: Int32?

                public var networkService: String?

                public var pics: [String]?

                public var rates: [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates]?

                public var roomId: String?

                public var roomName: String?

                public var status: Int32?

                public var windowType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.area != nil {
                        map["area"] = self.area!
                    }
                    if self.bed != nil {
                        map["bed"] = self.bed!
                    }
                    if self.bedTypeString != nil {
                        map["bed_type_string"] = self.bedTypeString!
                    }
                    if self.facility != nil {
                        map["facility"] = self.facility!
                    }
                    if self.floor != nil {
                        map["floor"] = self.floor!
                    }
                    if self.maxOccupancy != nil {
                        map["max_occupancy"] = self.maxOccupancy!
                    }
                    if self.networkService != nil {
                        map["network_service"] = self.networkService!
                    }
                    if self.pics != nil {
                        map["pics"] = self.pics!
                    }
                    if self.rates != nil {
                        var tmp : [Any] = []
                        for k in self.rates! {
                            tmp.append(k.toMap())
                        }
                        map["rates"] = tmp
                    }
                    if self.roomId != nil {
                        map["room_id"] = self.roomId!
                    }
                    if self.roomName != nil {
                        map["room_name"] = self.roomName!
                    }
                    if self.status != nil {
                        map["status"] = self.status!
                    }
                    if self.windowType != nil {
                        map["window_type"] = self.windowType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("area") && dict["area"] != nil {
                        self.area = dict["area"] as! String
                    }
                    if dict.keys.contains("bed") && dict["bed"] != nil {
                        self.bed = dict["bed"] as! String
                    }
                    if dict.keys.contains("bed_type_string") && dict["bed_type_string"] != nil {
                        self.bedTypeString = dict["bed_type_string"] as! String
                    }
                    if dict.keys.contains("facility") && dict["facility"] != nil {
                        self.facility = dict["facility"] as! String
                    }
                    if dict.keys.contains("floor") && dict["floor"] != nil {
                        self.floor = dict["floor"] as! String
                    }
                    if dict.keys.contains("max_occupancy") && dict["max_occupancy"] != nil {
                        self.maxOccupancy = dict["max_occupancy"] as! Int32
                    }
                    if dict.keys.contains("network_service") && dict["network_service"] != nil {
                        self.networkService = dict["network_service"] as! String
                    }
                    if dict.keys.contains("pics") && dict["pics"] != nil {
                        self.pics = dict["pics"] as! [String]
                    }
                    if dict.keys.contains("rates") && dict["rates"] != nil {
                        var tmp : [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates] = []
                        for v in dict["rates"] as! [Any] {
                            var model = HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms.Rates()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.rates = tmp
                    }
                    if dict.keys.contains("room_id") && dict["room_id"] != nil {
                        self.roomId = dict["room_id"] as! String
                    }
                    if dict.keys.contains("room_name") && dict["room_name"] != nil {
                        self.roomName = dict["room_name"] as! String
                    }
                    if dict.keys.contains("status") && dict["status"] != nil {
                        self.status = dict["status"] as! Int32
                    }
                    if dict.keys.contains("window_type") && dict["window_type"] != nil {
                        self.windowType = dict["window_type"] as! String
                    }
                }
            }
            public var address: String?

            public var hotelId: String?

            public var hotelName: String?

            public var rooms: [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms]?

            public var searchId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.address != nil {
                    map["address"] = self.address!
                }
                if self.hotelId != nil {
                    map["hotel_id"] = self.hotelId!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.rooms != nil {
                    var tmp : [Any] = []
                    for k in self.rooms! {
                        tmp.append(k.toMap())
                    }
                    map["rooms"] = tmp
                }
                if self.searchId != nil {
                    map["search_id"] = self.searchId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("address") && dict["address"] != nil {
                    self.address = dict["address"] as! String
                }
                if dict.keys.contains("hotel_id") && dict["hotel_id"] != nil {
                    self.hotelId = dict["hotel_id"] as! String
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("rooms") && dict["rooms"] != nil {
                    var tmp : [HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms] = []
                    for v in dict["rooms"] as! [Any] {
                        var model = HotelPricePullResponseBody.Module.HotelPriceInfos.Rooms()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.rooms = tmp
                }
                if dict.keys.contains("search_id") && dict["search_id"] != nil {
                    self.searchId = dict["search_id"] as! String
                }
            }
        }
        public var hotelPriceInfos: [HotelPricePullResponseBody.Module.HotelPriceInfos]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hotelPriceInfos != nil {
                var tmp : [Any] = []
                for k in self.hotelPriceInfos! {
                    tmp.append(k.toMap())
                }
                map["hotel_price_infos"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("hotel_price_infos") && dict["hotel_price_infos"] != nil {
                var tmp : [HotelPricePullResponseBody.Module.HotelPriceInfos] = []
                for v in dict["hotel_price_infos"] as! [Any] {
                    var model = HotelPricePullResponseBody.Module.HotelPriceInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelPriceInfos = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelPricePullResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["request_id"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelPricePullResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("request_id") && dict["request_id"] != nil {
            self.requestId = dict["request_id"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelPricePullResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelPricePullResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelPricePullResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelRoomInfoHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelRoomInfoRequest : Tea.TeaModel {
    public var roomIds: [Int64]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.roomIds != nil {
            map["room_ids"] = self.roomIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("room_ids") && dict["room_ids"] != nil {
            self.roomIds = dict["room_ids"] as! [Int64]
        }
    }
}

public class HotelRoomInfoShrinkRequest : Tea.TeaModel {
    public var roomIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.roomIdsShrink != nil {
            map["room_ids"] = self.roomIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("room_ids") && dict["room_ids"] != nil {
            self.roomIdsShrink = dict["room_ids"] as! String
        }
    }
}

public class HotelRoomInfoResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class BedInfos : Tea.TeaModel {
            public var bedDesc: String?

            public var bedNum: Int32?

            public var bedSize: String?

            public var bedType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bedDesc != nil {
                    map["bed_desc"] = self.bedDesc!
                }
                if self.bedNum != nil {
                    map["bed_num"] = self.bedNum!
                }
                if self.bedSize != nil {
                    map["bed_size"] = self.bedSize!
                }
                if self.bedType != nil {
                    map["bed_type"] = self.bedType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("bed_desc") && dict["bed_desc"] != nil {
                    self.bedDesc = dict["bed_desc"] as! String
                }
                if dict.keys.contains("bed_num") && dict["bed_num"] != nil {
                    self.bedNum = dict["bed_num"] as! Int32
                }
                if dict.keys.contains("bed_size") && dict["bed_size"] != nil {
                    self.bedSize = dict["bed_size"] as! String
                }
                if dict.keys.contains("bed_type") && dict["bed_type"] != nil {
                    self.bedType = dict["bed_type"] as! String
                }
            }
        }
        public class RoomImages : Tea.TeaModel {
            public var bedInfos2: String?

            public var tag: Int32?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bedInfos2 != nil {
                    map["bed_infos2"] = self.bedInfos2!
                }
                if self.tag != nil {
                    map["tag"] = self.tag!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("bed_infos2") && dict["bed_infos2"] != nil {
                    self.bedInfos2 = dict["bed_infos2"] as! String
                }
                if dict.keys.contains("tag") && dict["tag"] != nil {
                    self.tag = dict["tag"] as! Int32
                }
                if dict.keys.contains("url") && dict["url"] != nil {
                    self.url = dict["url"] as! String
                }
            }
        }
        public var bedInfos: [HotelRoomInfoResponseBody.Module.BedInfos]?

        public var extraBed: Int32?

        public var extraBedDesc: String?

        public var floor: String?

        public var internetWay: String?

        public var maxOccupancy: Int32?

        public var roomDesc: String?

        public var roomFacilities: String?

        public var roomFacilityList: [String]?

        public var roomId: String?

        public var roomImage: String?

        public var roomImages: [HotelRoomInfoResponseBody.Module.RoomImages]?

        public var roomName: String?

        public var roomType: Int32?

        public var roomarea: String?

        public var rooms: Int32?

        public var window: String?

        public var windowBad: String?

        public var windowView: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bedInfos != nil {
                var tmp : [Any] = []
                for k in self.bedInfos! {
                    tmp.append(k.toMap())
                }
                map["bed_infos"] = tmp
            }
            if self.extraBed != nil {
                map["extra_bed"] = self.extraBed!
            }
            if self.extraBedDesc != nil {
                map["extra_bed_desc"] = self.extraBedDesc!
            }
            if self.floor != nil {
                map["floor"] = self.floor!
            }
            if self.internetWay != nil {
                map["internet_way"] = self.internetWay!
            }
            if self.maxOccupancy != nil {
                map["max_occupancy"] = self.maxOccupancy!
            }
            if self.roomDesc != nil {
                map["room_desc"] = self.roomDesc!
            }
            if self.roomFacilities != nil {
                map["room_facilities"] = self.roomFacilities!
            }
            if self.roomFacilityList != nil {
                map["room_facility_list"] = self.roomFacilityList!
            }
            if self.roomId != nil {
                map["room_id"] = self.roomId!
            }
            if self.roomImage != nil {
                map["room_image"] = self.roomImage!
            }
            if self.roomImages != nil {
                var tmp : [Any] = []
                for k in self.roomImages! {
                    tmp.append(k.toMap())
                }
                map["room_images"] = tmp
            }
            if self.roomName != nil {
                map["room_name"] = self.roomName!
            }
            if self.roomType != nil {
                map["room_type"] = self.roomType!
            }
            if self.roomarea != nil {
                map["roomarea"] = self.roomarea!
            }
            if self.rooms != nil {
                map["rooms"] = self.rooms!
            }
            if self.window != nil {
                map["window"] = self.window!
            }
            if self.windowBad != nil {
                map["window_bad"] = self.windowBad!
            }
            if self.windowView != nil {
                map["window_view"] = self.windowView!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("bed_infos") && dict["bed_infos"] != nil {
                var tmp : [HotelRoomInfoResponseBody.Module.BedInfos] = []
                for v in dict["bed_infos"] as! [Any] {
                    var model = HotelRoomInfoResponseBody.Module.BedInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.bedInfos = tmp
            }
            if dict.keys.contains("extra_bed") && dict["extra_bed"] != nil {
                self.extraBed = dict["extra_bed"] as! Int32
            }
            if dict.keys.contains("extra_bed_desc") && dict["extra_bed_desc"] != nil {
                self.extraBedDesc = dict["extra_bed_desc"] as! String
            }
            if dict.keys.contains("floor") && dict["floor"] != nil {
                self.floor = dict["floor"] as! String
            }
            if dict.keys.contains("internet_way") && dict["internet_way"] != nil {
                self.internetWay = dict["internet_way"] as! String
            }
            if dict.keys.contains("max_occupancy") && dict["max_occupancy"] != nil {
                self.maxOccupancy = dict["max_occupancy"] as! Int32
            }
            if dict.keys.contains("room_desc") && dict["room_desc"] != nil {
                self.roomDesc = dict["room_desc"] as! String
            }
            if dict.keys.contains("room_facilities") && dict["room_facilities"] != nil {
                self.roomFacilities = dict["room_facilities"] as! String
            }
            if dict.keys.contains("room_facility_list") && dict["room_facility_list"] != nil {
                self.roomFacilityList = dict["room_facility_list"] as! [String]
            }
            if dict.keys.contains("room_id") && dict["room_id"] != nil {
                self.roomId = dict["room_id"] as! String
            }
            if dict.keys.contains("room_image") && dict["room_image"] != nil {
                self.roomImage = dict["room_image"] as! String
            }
            if dict.keys.contains("room_images") && dict["room_images"] != nil {
                var tmp : [HotelRoomInfoResponseBody.Module.RoomImages] = []
                for v in dict["room_images"] as! [Any] {
                    var model = HotelRoomInfoResponseBody.Module.RoomImages()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.roomImages = tmp
            }
            if dict.keys.contains("room_name") && dict["room_name"] != nil {
                self.roomName = dict["room_name"] as! String
            }
            if dict.keys.contains("room_type") && dict["room_type"] != nil {
                self.roomType = dict["room_type"] as! Int32
            }
            if dict.keys.contains("roomarea") && dict["roomarea"] != nil {
                self.roomarea = dict["roomarea"] as! String
            }
            if dict.keys.contains("rooms") && dict["rooms"] != nil {
                self.rooms = dict["rooms"] as! Int32
            }
            if dict.keys.contains("window") && dict["window"] != nil {
                self.window = dict["window"] as! String
            }
            if dict.keys.contains("window_bad") && dict["window_bad"] != nil {
                self.windowBad = dict["window_bad"] as! String
            }
            if dict.keys.contains("window_view") && dict["window_view"] != nil {
                self.windowView = dict["window_view"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [HotelRoomInfoResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [HotelRoomInfoResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = HotelRoomInfoResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelRoomInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelRoomInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelRoomInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelSearchRequest : Tea.TeaModel {
    public var adultNum: String?

    public var brandCode: [String]?

    public var btripUserId: String?

    public var checkInDate: String?

    public var checkOutDate: String?

    public var cityCode: String?

    public var dir: Int32?

    public var distance: Int32?

    public var districtCode: String?

    public var hotelStar: String?

    public var isProtocol: Bool?

    public var keyWords: String?

    public var location: String?

    public var maxPrice: Double?

    public var minPrice: Double?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var payOverType: Int32?

    public var paymentType: Int32?

    public var shids: [Int64]?

    public var sortCode: Int32?

    public var superMan: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adultNum != nil {
            map["adult_num"] = self.adultNum!
        }
        if self.brandCode != nil {
            map["brand_code"] = self.brandCode!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkInDate != nil {
            map["check_in_date"] = self.checkInDate!
        }
        if self.checkOutDate != nil {
            map["check_out_date"] = self.checkOutDate!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.dir != nil {
            map["dir"] = self.dir!
        }
        if self.distance != nil {
            map["distance"] = self.distance!
        }
        if self.districtCode != nil {
            map["district_code"] = self.districtCode!
        }
        if self.hotelStar != nil {
            map["hotel_star"] = self.hotelStar!
        }
        if self.isProtocol != nil {
            map["is_protocol"] = self.isProtocol!
        }
        if self.keyWords != nil {
            map["key_words"] = self.keyWords!
        }
        if self.location != nil {
            map["location"] = self.location!
        }
        if self.maxPrice != nil {
            map["max_price"] = self.maxPrice!
        }
        if self.minPrice != nil {
            map["min_price"] = self.minPrice!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.payOverType != nil {
            map["pay_over_type"] = self.payOverType!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        if self.shids != nil {
            map["shids"] = self.shids!
        }
        if self.sortCode != nil {
            map["sort_code"] = self.sortCode!
        }
        if self.superMan != nil {
            map["super_man"] = self.superMan!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("adult_num") && dict["adult_num"] != nil {
            self.adultNum = dict["adult_num"] as! String
        }
        if dict.keys.contains("brand_code") && dict["brand_code"] != nil {
            self.brandCode = dict["brand_code"] as! [String]
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
            self.checkInDate = dict["check_in_date"] as! String
        }
        if dict.keys.contains("check_out_date") && dict["check_out_date"] != nil {
            self.checkOutDate = dict["check_out_date"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! String
        }
        if dict.keys.contains("dir") && dict["dir"] != nil {
            self.dir = dict["dir"] as! Int32
        }
        if dict.keys.contains("distance") && dict["distance"] != nil {
            self.distance = dict["distance"] as! Int32
        }
        if dict.keys.contains("district_code") && dict["district_code"] != nil {
            self.districtCode = dict["district_code"] as! String
        }
        if dict.keys.contains("hotel_star") && dict["hotel_star"] != nil {
            self.hotelStar = dict["hotel_star"] as! String
        }
        if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
            self.isProtocol = dict["is_protocol"] as! Bool
        }
        if dict.keys.contains("key_words") && dict["key_words"] != nil {
            self.keyWords = dict["key_words"] as! String
        }
        if dict.keys.contains("location") && dict["location"] != nil {
            self.location = dict["location"] as! String
        }
        if dict.keys.contains("max_price") && dict["max_price"] != nil {
            self.maxPrice = dict["max_price"] as! Double
        }
        if dict.keys.contains("min_price") && dict["min_price"] != nil {
            self.minPrice = dict["min_price"] as! Double
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("pay_over_type") && dict["pay_over_type"] != nil {
            self.payOverType = dict["pay_over_type"] as! Int32
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
        if dict.keys.contains("shids") && dict["shids"] != nil {
            self.shids = dict["shids"] as! [Int64]
        }
        if dict.keys.contains("sort_code") && dict["sort_code"] != nil {
            self.sortCode = dict["sort_code"] as! Int32
        }
        if dict.keys.contains("super_man") && dict["super_man"] != nil {
            self.superMan = dict["super_man"] as! Int32
        }
    }
}

public class HotelSearchShrinkRequest : Tea.TeaModel {
    public var adultNum: String?

    public var brandCodeShrink: String?

    public var btripUserId: String?

    public var checkInDate: String?

    public var checkOutDate: String?

    public var cityCode: String?

    public var dir: Int32?

    public var distance: Int32?

    public var districtCode: String?

    public var hotelStar: String?

    public var isProtocol: Bool?

    public var keyWords: String?

    public var location: String?

    public var maxPrice: Double?

    public var minPrice: Double?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var payOverType: Int32?

    public var paymentType: Int32?

    public var shidsShrink: String?

    public var sortCode: Int32?

    public var superMan: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adultNum != nil {
            map["adult_num"] = self.adultNum!
        }
        if self.brandCodeShrink != nil {
            map["brand_code"] = self.brandCodeShrink!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.checkInDate != nil {
            map["check_in_date"] = self.checkInDate!
        }
        if self.checkOutDate != nil {
            map["check_out_date"] = self.checkOutDate!
        }
        if self.cityCode != nil {
            map["city_code"] = self.cityCode!
        }
        if self.dir != nil {
            map["dir"] = self.dir!
        }
        if self.distance != nil {
            map["distance"] = self.distance!
        }
        if self.districtCode != nil {
            map["district_code"] = self.districtCode!
        }
        if self.hotelStar != nil {
            map["hotel_star"] = self.hotelStar!
        }
        if self.isProtocol != nil {
            map["is_protocol"] = self.isProtocol!
        }
        if self.keyWords != nil {
            map["key_words"] = self.keyWords!
        }
        if self.location != nil {
            map["location"] = self.location!
        }
        if self.maxPrice != nil {
            map["max_price"] = self.maxPrice!
        }
        if self.minPrice != nil {
            map["min_price"] = self.minPrice!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.payOverType != nil {
            map["pay_over_type"] = self.payOverType!
        }
        if self.paymentType != nil {
            map["payment_type"] = self.paymentType!
        }
        if self.shidsShrink != nil {
            map["shids"] = self.shidsShrink!
        }
        if self.sortCode != nil {
            map["sort_code"] = self.sortCode!
        }
        if self.superMan != nil {
            map["super_man"] = self.superMan!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("adult_num") && dict["adult_num"] != nil {
            self.adultNum = dict["adult_num"] as! String
        }
        if dict.keys.contains("brand_code") && dict["brand_code"] != nil {
            self.brandCodeShrink = dict["brand_code"] as! String
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
            self.checkInDate = dict["check_in_date"] as! String
        }
        if dict.keys.contains("check_out_date") && dict["check_out_date"] != nil {
            self.checkOutDate = dict["check_out_date"] as! String
        }
        if dict.keys.contains("city_code") && dict["city_code"] != nil {
            self.cityCode = dict["city_code"] as! String
        }
        if dict.keys.contains("dir") && dict["dir"] != nil {
            self.dir = dict["dir"] as! Int32
        }
        if dict.keys.contains("distance") && dict["distance"] != nil {
            self.distance = dict["distance"] as! Int32
        }
        if dict.keys.contains("district_code") && dict["district_code"] != nil {
            self.districtCode = dict["district_code"] as! String
        }
        if dict.keys.contains("hotel_star") && dict["hotel_star"] != nil {
            self.hotelStar = dict["hotel_star"] as! String
        }
        if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
            self.isProtocol = dict["is_protocol"] as! Bool
        }
        if dict.keys.contains("key_words") && dict["key_words"] != nil {
            self.keyWords = dict["key_words"] as! String
        }
        if dict.keys.contains("location") && dict["location"] != nil {
            self.location = dict["location"] as! String
        }
        if dict.keys.contains("max_price") && dict["max_price"] != nil {
            self.maxPrice = dict["max_price"] as! Double
        }
        if dict.keys.contains("min_price") && dict["min_price"] != nil {
            self.minPrice = dict["min_price"] as! Double
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("pay_over_type") && dict["pay_over_type"] != nil {
            self.payOverType = dict["pay_over_type"] as! Int32
        }
        if dict.keys.contains("payment_type") && dict["payment_type"] != nil {
            self.paymentType = dict["payment_type"] as! Int32
        }
        if dict.keys.contains("shids") && dict["shids"] != nil {
            self.shidsShrink = dict["shids"] as! String
        }
        if dict.keys.contains("sort_code") && dict["sort_code"] != nil {
            self.sortCode = dict["sort_code"] as! Int32
        }
        if dict.keys.contains("super_man") && dict["super_man"] != nil {
            self.superMan = dict["super_man"] as! Int32
        }
    }
}

public class HotelSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class DiscountDesc : Tea.TeaModel {
                public class DiscountDetail : Tea.TeaModel {
                    public var labelName: [String]?

                    public var moneyDesc: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.labelName != nil {
                            map["label_name"] = self.labelName!
                        }
                        if self.moneyDesc != nil {
                            map["money_desc"] = self.moneyDesc!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("label_name") && dict["label_name"] != nil {
                            self.labelName = dict["label_name"] as! [String]
                        }
                        if dict.keys.contains("money_desc") && dict["money_desc"] != nil {
                            self.moneyDesc = dict["money_desc"] as! String
                        }
                    }
                }
                public var cashReduceTotal: String?

                public var dinamicLabel: String?

                public var discountDetail: [HotelSearchResponseBody.Module.Items.DiscountDesc.DiscountDetail]?

                public var subTitle: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cashReduceTotal != nil {
                        map["cash_reduce_total"] = self.cashReduceTotal!
                    }
                    if self.dinamicLabel != nil {
                        map["dinamic_label"] = self.dinamicLabel!
                    }
                    if self.discountDetail != nil {
                        var tmp : [Any] = []
                        for k in self.discountDetail! {
                            tmp.append(k.toMap())
                        }
                        map["discount_detail"] = tmp
                    }
                    if self.subTitle != nil {
                        map["sub_title"] = self.subTitle!
                    }
                    if self.title != nil {
                        map["title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cash_reduce_total") && dict["cash_reduce_total"] != nil {
                        self.cashReduceTotal = dict["cash_reduce_total"] as! String
                    }
                    if dict.keys.contains("dinamic_label") && dict["dinamic_label"] != nil {
                        self.dinamicLabel = dict["dinamic_label"] as! String
                    }
                    if dict.keys.contains("discount_detail") && dict["discount_detail"] != nil {
                        var tmp : [HotelSearchResponseBody.Module.Items.DiscountDesc.DiscountDetail] = []
                        for v in dict["discount_detail"] as! [Any] {
                            var model = HotelSearchResponseBody.Module.Items.DiscountDesc.DiscountDetail()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.discountDetail = tmp
                    }
                    if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                        self.subTitle = dict["sub_title"] as! String
                    }
                    if dict.keys.contains("title") && dict["title"] != nil {
                        self.title = dict["title"] as! String
                    }
                }
            }
            public var brandName: String?

            public var btandCode: String?

            public var cityCode: String?

            public var discountDesc: HotelSearchResponseBody.Module.Items.DiscountDesc?

            public var distance: Int32?

            public var districtCode: String?

            public var hotelAddress: String?

            public var hotelCode: String?

            public var hotelEnName: String?

            public var hotelName: String?

            public var hotelStar: String?

            public var imageUrl: String?

            public var isProtocol: Bool?

            public var location: String?

            public var minPrice: Double?

            public var originalMinPrice: Double?

            public var score: String?

            public var status: Int32?

            public var tel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.discountDesc?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.brandName != nil {
                    map["brand_name"] = self.brandName!
                }
                if self.btandCode != nil {
                    map["btand_code"] = self.btandCode!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.discountDesc != nil {
                    map["discount_desc"] = self.discountDesc?.toMap()
                }
                if self.distance != nil {
                    map["distance"] = self.distance!
                }
                if self.districtCode != nil {
                    map["district_code"] = self.districtCode!
                }
                if self.hotelAddress != nil {
                    map["hotel_address"] = self.hotelAddress!
                }
                if self.hotelCode != nil {
                    map["hotel_code"] = self.hotelCode!
                }
                if self.hotelEnName != nil {
                    map["hotel_en_name"] = self.hotelEnName!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.hotelStar != nil {
                    map["hotel_star"] = self.hotelStar!
                }
                if self.imageUrl != nil {
                    map["image_url"] = self.imageUrl!
                }
                if self.isProtocol != nil {
                    map["is_protocol"] = self.isProtocol!
                }
                if self.location != nil {
                    map["location"] = self.location!
                }
                if self.minPrice != nil {
                    map["min_price"] = self.minPrice!
                }
                if self.originalMinPrice != nil {
                    map["original_min_price"] = self.originalMinPrice!
                }
                if self.score != nil {
                    map["score"] = self.score!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.tel != nil {
                    map["tel"] = self.tel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("brand_name") && dict["brand_name"] != nil {
                    self.brandName = dict["brand_name"] as! String
                }
                if dict.keys.contains("btand_code") && dict["btand_code"] != nil {
                    self.btandCode = dict["btand_code"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("discount_desc") && dict["discount_desc"] != nil {
                    var model = HotelSearchResponseBody.Module.Items.DiscountDesc()
                    model.fromMap(dict["discount_desc"] as! [String: Any])
                    self.discountDesc = model
                }
                if dict.keys.contains("distance") && dict["distance"] != nil {
                    self.distance = dict["distance"] as! Int32
                }
                if dict.keys.contains("district_code") && dict["district_code"] != nil {
                    self.districtCode = dict["district_code"] as! String
                }
                if dict.keys.contains("hotel_address") && dict["hotel_address"] != nil {
                    self.hotelAddress = dict["hotel_address"] as! String
                }
                if dict.keys.contains("hotel_code") && dict["hotel_code"] != nil {
                    self.hotelCode = dict["hotel_code"] as! String
                }
                if dict.keys.contains("hotel_en_name") && dict["hotel_en_name"] != nil {
                    self.hotelEnName = dict["hotel_en_name"] as! String
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("hotel_star") && dict["hotel_star"] != nil {
                    self.hotelStar = dict["hotel_star"] as! String
                }
                if dict.keys.contains("image_url") && dict["image_url"] != nil {
                    self.imageUrl = dict["image_url"] as! String
                }
                if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                    self.isProtocol = dict["is_protocol"] as! Bool
                }
                if dict.keys.contains("location") && dict["location"] != nil {
                    self.location = dict["location"] as! String
                }
                if dict.keys.contains("min_price") && dict["min_price"] != nil {
                    self.minPrice = dict["min_price"] as! Double
                }
                if dict.keys.contains("original_min_price") && dict["original_min_price"] != nil {
                    self.originalMinPrice = dict["original_min_price"] as! Double
                }
                if dict.keys.contains("score") && dict["score"] != nil {
                    self.score = dict["score"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("tel") && dict["tel"] != nil {
                    self.tel = dict["tel"] as! String
                }
            }
        }
        public var items: [HotelSearchResponseBody.Module.Items]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [HotelSearchResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = HotelSearchResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class HotelStaticInfoHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class HotelStaticInfoRequest : Tea.TeaModel {
    public var hotelIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hotelIds != nil {
            map["hotel_ids"] = self.hotelIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("hotel_ids") && dict["hotel_ids"] != nil {
            self.hotelIds = dict["hotel_ids"] as! [String]
        }
    }
}

public class HotelStaticInfoShrinkRequest : Tea.TeaModel {
    public var hotelIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hotelIdsShrink != nil {
            map["hotel_ids"] = self.hotelIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("hotel_ids") && dict["hotel_ids"] != nil {
            self.hotelIdsShrink = dict["hotel_ids"] as! String
        }
    }
}

public class HotelStaticInfoResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class HotelStaticInfos : Tea.TeaModel {
            public class ExpandInfo : Tea.TeaModel {
                public var checkIn: String?

                public var checkOut: String?

                public var decorateTime: String?

                public var floors: String?

                public var hotelFacilities: [String]?

                public var hotelType: Int32?

                public var openingTime: String?

                public var roomFacilities: [String]?

                public var rooms: Int32?

                public var service: [String]?

                public var themeTag: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkIn != nil {
                        map["check_in"] = self.checkIn!
                    }
                    if self.checkOut != nil {
                        map["check_out"] = self.checkOut!
                    }
                    if self.decorateTime != nil {
                        map["decorate_time"] = self.decorateTime!
                    }
                    if self.floors != nil {
                        map["floors"] = self.floors!
                    }
                    if self.hotelFacilities != nil {
                        map["hotel_facilities"] = self.hotelFacilities!
                    }
                    if self.hotelType != nil {
                        map["hotel_type"] = self.hotelType!
                    }
                    if self.openingTime != nil {
                        map["opening_time"] = self.openingTime!
                    }
                    if self.roomFacilities != nil {
                        map["room_facilities"] = self.roomFacilities!
                    }
                    if self.rooms != nil {
                        map["rooms"] = self.rooms!
                    }
                    if self.service != nil {
                        map["service"] = self.service!
                    }
                    if self.themeTag != nil {
                        map["theme_tag"] = self.themeTag!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("check_in") && dict["check_in"] != nil {
                        self.checkIn = dict["check_in"] as! String
                    }
                    if dict.keys.contains("check_out") && dict["check_out"] != nil {
                        self.checkOut = dict["check_out"] as! String
                    }
                    if dict.keys.contains("decorate_time") && dict["decorate_time"] != nil {
                        self.decorateTime = dict["decorate_time"] as! String
                    }
                    if dict.keys.contains("floors") && dict["floors"] != nil {
                        self.floors = dict["floors"] as! String
                    }
                    if dict.keys.contains("hotel_facilities") && dict["hotel_facilities"] != nil {
                        self.hotelFacilities = dict["hotel_facilities"] as! [String]
                    }
                    if dict.keys.contains("hotel_type") && dict["hotel_type"] != nil {
                        self.hotelType = dict["hotel_type"] as! Int32
                    }
                    if dict.keys.contains("opening_time") && dict["opening_time"] != nil {
                        self.openingTime = dict["opening_time"] as! String
                    }
                    if dict.keys.contains("room_facilities") && dict["room_facilities"] != nil {
                        self.roomFacilities = dict["room_facilities"] as! [String]
                    }
                    if dict.keys.contains("rooms") && dict["rooms"] != nil {
                        self.rooms = dict["rooms"] as! Int32
                    }
                    if dict.keys.contains("service") && dict["service"] != nil {
                        self.service = dict["service"] as! [String]
                    }
                    if dict.keys.contains("theme_tag") && dict["theme_tag"] != nil {
                        self.themeTag = dict["theme_tag"] as! String
                    }
                }
            }
            public class Imageinfos : Tea.TeaModel {
                public var desc: String?

                public var tag: Int32?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.desc != nil {
                        map["desc"] = self.desc!
                    }
                    if self.tag != nil {
                        map["tag"] = self.tag!
                    }
                    if self.url != nil {
                        map["url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("desc") && dict["desc"] != nil {
                        self.desc = dict["desc"] as! String
                    }
                    if dict.keys.contains("tag") && dict["tag"] != nil {
                        self.tag = dict["tag"] as! Int32
                    }
                    if dict.keys.contains("url") && dict["url"] != nil {
                        self.url = dict["url"] as! String
                    }
                }
            }
            public class RoomInfos : Tea.TeaModel {
                public class BedInfos : Tea.TeaModel {
                    public var bedDesc: String?

                    public var bedNum: Int32?

                    public var bedSize: String?

                    public var bedType: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.bedDesc != nil {
                            map["bed_desc"] = self.bedDesc!
                        }
                        if self.bedNum != nil {
                            map["bed_num"] = self.bedNum!
                        }
                        if self.bedSize != nil {
                            map["bed_size"] = self.bedSize!
                        }
                        if self.bedType != nil {
                            map["bed_type"] = self.bedType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("bed_desc") && dict["bed_desc"] != nil {
                            self.bedDesc = dict["bed_desc"] as! String
                        }
                        if dict.keys.contains("bed_num") && dict["bed_num"] != nil {
                            self.bedNum = dict["bed_num"] as! Int32
                        }
                        if dict.keys.contains("bed_size") && dict["bed_size"] != nil {
                            self.bedSize = dict["bed_size"] as! String
                        }
                        if dict.keys.contains("bed_type") && dict["bed_type"] != nil {
                            self.bedType = dict["bed_type"] as! String
                        }
                    }
                }
                public var bedInfos: [HotelStaticInfoResponseBody.Module.HotelStaticInfos.RoomInfos.BedInfos]?

                public var extraBed: Int32?

                public var extraBedDesc: String?

                public var floor: String?

                public var internetWay: String?

                public var maxOccupancy: Int32?

                public var roomFacilities: String?

                public var roomFacilityList: [String]?

                public var roomId: String?

                public var roomImage: String?

                public var roomImages: [String]?

                public var roomName: String?

                public var roomType: Int32?

                public var roomarea: String?

                public var rooms: Int32?

                public var window: String?

                public var windowBad: String?

                public var windowView: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bedInfos != nil {
                        var tmp : [Any] = []
                        for k in self.bedInfos! {
                            tmp.append(k.toMap())
                        }
                        map["bed_infos"] = tmp
                    }
                    if self.extraBed != nil {
                        map["extra_bed"] = self.extraBed!
                    }
                    if self.extraBedDesc != nil {
                        map["extra_bed_desc"] = self.extraBedDesc!
                    }
                    if self.floor != nil {
                        map["floor"] = self.floor!
                    }
                    if self.internetWay != nil {
                        map["internet_way"] = self.internetWay!
                    }
                    if self.maxOccupancy != nil {
                        map["max_occupancy"] = self.maxOccupancy!
                    }
                    if self.roomFacilities != nil {
                        map["room_facilities"] = self.roomFacilities!
                    }
                    if self.roomFacilityList != nil {
                        map["room_facility_list"] = self.roomFacilityList!
                    }
                    if self.roomId != nil {
                        map["room_id"] = self.roomId!
                    }
                    if self.roomImage != nil {
                        map["room_image"] = self.roomImage!
                    }
                    if self.roomImages != nil {
                        map["room_images"] = self.roomImages!
                    }
                    if self.roomName != nil {
                        map["room_name"] = self.roomName!
                    }
                    if self.roomType != nil {
                        map["room_type"] = self.roomType!
                    }
                    if self.roomarea != nil {
                        map["roomarea"] = self.roomarea!
                    }
                    if self.rooms != nil {
                        map["rooms"] = self.rooms!
                    }
                    if self.window != nil {
                        map["window"] = self.window!
                    }
                    if self.windowBad != nil {
                        map["window_bad"] = self.windowBad!
                    }
                    if self.windowView != nil {
                        map["window_view"] = self.windowView!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("bed_infos") && dict["bed_infos"] != nil {
                        var tmp : [HotelStaticInfoResponseBody.Module.HotelStaticInfos.RoomInfos.BedInfos] = []
                        for v in dict["bed_infos"] as! [Any] {
                            var model = HotelStaticInfoResponseBody.Module.HotelStaticInfos.RoomInfos.BedInfos()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.bedInfos = tmp
                    }
                    if dict.keys.contains("extra_bed") && dict["extra_bed"] != nil {
                        self.extraBed = dict["extra_bed"] as! Int32
                    }
                    if dict.keys.contains("extra_bed_desc") && dict["extra_bed_desc"] != nil {
                        self.extraBedDesc = dict["extra_bed_desc"] as! String
                    }
                    if dict.keys.contains("floor") && dict["floor"] != nil {
                        self.floor = dict["floor"] as! String
                    }
                    if dict.keys.contains("internet_way") && dict["internet_way"] != nil {
                        self.internetWay = dict["internet_way"] as! String
                    }
                    if dict.keys.contains("max_occupancy") && dict["max_occupancy"] != nil {
                        self.maxOccupancy = dict["max_occupancy"] as! Int32
                    }
                    if dict.keys.contains("room_facilities") && dict["room_facilities"] != nil {
                        self.roomFacilities = dict["room_facilities"] as! String
                    }
                    if dict.keys.contains("room_facility_list") && dict["room_facility_list"] != nil {
                        self.roomFacilityList = dict["room_facility_list"] as! [String]
                    }
                    if dict.keys.contains("room_id") && dict["room_id"] != nil {
                        self.roomId = dict["room_id"] as! String
                    }
                    if dict.keys.contains("room_image") && dict["room_image"] != nil {
                        self.roomImage = dict["room_image"] as! String
                    }
                    if dict.keys.contains("room_images") && dict["room_images"] != nil {
                        self.roomImages = dict["room_images"] as! [String]
                    }
                    if dict.keys.contains("room_name") && dict["room_name"] != nil {
                        self.roomName = dict["room_name"] as! String
                    }
                    if dict.keys.contains("room_type") && dict["room_type"] != nil {
                        self.roomType = dict["room_type"] as! Int32
                    }
                    if dict.keys.contains("roomarea") && dict["roomarea"] != nil {
                        self.roomarea = dict["roomarea"] as! String
                    }
                    if dict.keys.contains("rooms") && dict["rooms"] != nil {
                        self.rooms = dict["rooms"] as! Int32
                    }
                    if dict.keys.contains("window") && dict["window"] != nil {
                        self.window = dict["window"] as! String
                    }
                    if dict.keys.contains("window_bad") && dict["window_bad"] != nil {
                        self.windowBad = dict["window_bad"] as! String
                    }
                    if dict.keys.contains("window_view") && dict["window_view"] != nil {
                        self.windowView = dict["window_view"] as! String
                    }
                }
            }
            public var blockRoomTypeInformation: [String: String]?

            public var brand: String?

            public var brandName: String?

            public var cityCode: String?

            public var cityName: String?

            public var country: String?

            public var countryCode: String?

            public var description_: String?

            public var district: String?

            public var districtName: String?

            public var expandInfo: HotelStaticInfoResponseBody.Module.HotelStaticInfos.ExpandInfo?

            public var hotelAddress: String?

            public var hotelEnAddress: String?

            public var hotelEnName: String?

            public var hotelId: String?

            public var hotelName: String?

            public var hotelOpenTime: String?

            public var hotelPhones: String?

            public var hotelPolicies: String?

            public var hotelfax: String?

            public var hotelpics: String?

            public var imageinfos: [HotelStaticInfoResponseBody.Module.HotelStaticInfos.Imageinfos]?

            public var invoiceProviderMethod: String?

            public var invoiceTypes: [Int32]?

            public var location: String?

            public var province: String?

            public var provinceName: String?

            public var ratingAverage: String?

            public var roomInfos: [HotelStaticInfoResponseBody.Module.HotelStaticInfos.RoomInfos]?

            public var star: String?

            public var starRate: String?

            public var status: String?

            public var themes: String?

            public var visaReminding: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.expandInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.blockRoomTypeInformation != nil {
                    map["block_room_type_information"] = self.blockRoomTypeInformation!
                }
                if self.brand != nil {
                    map["brand"] = self.brand!
                }
                if self.brandName != nil {
                    map["brand_name"] = self.brandName!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.cityName != nil {
                    map["city_name"] = self.cityName!
                }
                if self.country != nil {
                    map["country"] = self.country!
                }
                if self.countryCode != nil {
                    map["country_code"] = self.countryCode!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.district != nil {
                    map["district"] = self.district!
                }
                if self.districtName != nil {
                    map["district_name"] = self.districtName!
                }
                if self.expandInfo != nil {
                    map["expand_info"] = self.expandInfo?.toMap()
                }
                if self.hotelAddress != nil {
                    map["hotel_address"] = self.hotelAddress!
                }
                if self.hotelEnAddress != nil {
                    map["hotel_en_address"] = self.hotelEnAddress!
                }
                if self.hotelEnName != nil {
                    map["hotel_en_name"] = self.hotelEnName!
                }
                if self.hotelId != nil {
                    map["hotel_id"] = self.hotelId!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.hotelOpenTime != nil {
                    map["hotel_open_time"] = self.hotelOpenTime!
                }
                if self.hotelPhones != nil {
                    map["hotel_phones"] = self.hotelPhones!
                }
                if self.hotelPolicies != nil {
                    map["hotel_policies"] = self.hotelPolicies!
                }
                if self.hotelfax != nil {
                    map["hotelfax"] = self.hotelfax!
                }
                if self.hotelpics != nil {
                    map["hotelpics"] = self.hotelpics!
                }
                if self.imageinfos != nil {
                    var tmp : [Any] = []
                    for k in self.imageinfos! {
                        tmp.append(k.toMap())
                    }
                    map["imageinfos"] = tmp
                }
                if self.invoiceProviderMethod != nil {
                    map["invoice_provider_method"] = self.invoiceProviderMethod!
                }
                if self.invoiceTypes != nil {
                    map["invoice_types"] = self.invoiceTypes!
                }
                if self.location != nil {
                    map["location"] = self.location!
                }
                if self.province != nil {
                    map["province"] = self.province!
                }
                if self.provinceName != nil {
                    map["province_name"] = self.provinceName!
                }
                if self.ratingAverage != nil {
                    map["rating_average"] = self.ratingAverage!
                }
                if self.roomInfos != nil {
                    var tmp : [Any] = []
                    for k in self.roomInfos! {
                        tmp.append(k.toMap())
                    }
                    map["room_infos"] = tmp
                }
                if self.star != nil {
                    map["star"] = self.star!
                }
                if self.starRate != nil {
                    map["star_rate"] = self.starRate!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.themes != nil {
                    map["themes"] = self.themes!
                }
                if self.visaReminding != nil {
                    map["visa_reminding"] = self.visaReminding!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("block_room_type_information") && dict["block_room_type_information"] != nil {
                    self.blockRoomTypeInformation = dict["block_room_type_information"] as! [String: String]
                }
                if dict.keys.contains("brand") && dict["brand"] != nil {
                    self.brand = dict["brand"] as! String
                }
                if dict.keys.contains("brand_name") && dict["brand_name"] != nil {
                    self.brandName = dict["brand_name"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("city_name") && dict["city_name"] != nil {
                    self.cityName = dict["city_name"] as! String
                }
                if dict.keys.contains("country") && dict["country"] != nil {
                    self.country = dict["country"] as! String
                }
                if dict.keys.contains("country_code") && dict["country_code"] != nil {
                    self.countryCode = dict["country_code"] as! String
                }
                if dict.keys.contains("description") && dict["description"] != nil {
                    self.description_ = dict["description"] as! String
                }
                if dict.keys.contains("district") && dict["district"] != nil {
                    self.district = dict["district"] as! String
                }
                if dict.keys.contains("district_name") && dict["district_name"] != nil {
                    self.districtName = dict["district_name"] as! String
                }
                if dict.keys.contains("expand_info") && dict["expand_info"] != nil {
                    var model = HotelStaticInfoResponseBody.Module.HotelStaticInfos.ExpandInfo()
                    model.fromMap(dict["expand_info"] as! [String: Any])
                    self.expandInfo = model
                }
                if dict.keys.contains("hotel_address") && dict["hotel_address"] != nil {
                    self.hotelAddress = dict["hotel_address"] as! String
                }
                if dict.keys.contains("hotel_en_address") && dict["hotel_en_address"] != nil {
                    self.hotelEnAddress = dict["hotel_en_address"] as! String
                }
                if dict.keys.contains("hotel_en_name") && dict["hotel_en_name"] != nil {
                    self.hotelEnName = dict["hotel_en_name"] as! String
                }
                if dict.keys.contains("hotel_id") && dict["hotel_id"] != nil {
                    self.hotelId = dict["hotel_id"] as! String
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("hotel_open_time") && dict["hotel_open_time"] != nil {
                    self.hotelOpenTime = dict["hotel_open_time"] as! String
                }
                if dict.keys.contains("hotel_phones") && dict["hotel_phones"] != nil {
                    self.hotelPhones = dict["hotel_phones"] as! String
                }
                if dict.keys.contains("hotel_policies") && dict["hotel_policies"] != nil {
                    self.hotelPolicies = dict["hotel_policies"] as! String
                }
                if dict.keys.contains("hotelfax") && dict["hotelfax"] != nil {
                    self.hotelfax = dict["hotelfax"] as! String
                }
                if dict.keys.contains("hotelpics") && dict["hotelpics"] != nil {
                    self.hotelpics = dict["hotelpics"] as! String
                }
                if dict.keys.contains("imageinfos") && dict["imageinfos"] != nil {
                    var tmp : [HotelStaticInfoResponseBody.Module.HotelStaticInfos.Imageinfos] = []
                    for v in dict["imageinfos"] as! [Any] {
                        var model = HotelStaticInfoResponseBody.Module.HotelStaticInfos.Imageinfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.imageinfos = tmp
                }
                if dict.keys.contains("invoice_provider_method") && dict["invoice_provider_method"] != nil {
                    self.invoiceProviderMethod = dict["invoice_provider_method"] as! String
                }
                if dict.keys.contains("invoice_types") && dict["invoice_types"] != nil {
                    self.invoiceTypes = dict["invoice_types"] as! [Int32]
                }
                if dict.keys.contains("location") && dict["location"] != nil {
                    self.location = dict["location"] as! String
                }
                if dict.keys.contains("province") && dict["province"] != nil {
                    self.province = dict["province"] as! String
                }
                if dict.keys.contains("province_name") && dict["province_name"] != nil {
                    self.provinceName = dict["province_name"] as! String
                }
                if dict.keys.contains("rating_average") && dict["rating_average"] != nil {
                    self.ratingAverage = dict["rating_average"] as! String
                }
                if dict.keys.contains("room_infos") && dict["room_infos"] != nil {
                    var tmp : [HotelStaticInfoResponseBody.Module.HotelStaticInfos.RoomInfos] = []
                    for v in dict["room_infos"] as! [Any] {
                        var model = HotelStaticInfoResponseBody.Module.HotelStaticInfos.RoomInfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.roomInfos = tmp
                }
                if dict.keys.contains("star") && dict["star"] != nil {
                    self.star = dict["star"] as! String
                }
                if dict.keys.contains("star_rate") && dict["star_rate"] != nil {
                    self.starRate = dict["star_rate"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
                if dict.keys.contains("themes") && dict["themes"] != nil {
                    self.themes = dict["themes"] as! String
                }
                if dict.keys.contains("visa_reminding") && dict["visa_reminding"] != nil {
                    self.visaReminding = dict["visa_reminding"] as! Bool
                }
            }
        }
        public var hotelStaticInfos: [HotelStaticInfoResponseBody.Module.HotelStaticInfos]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hotelStaticInfos != nil {
                var tmp : [Any] = []
                for k in self.hotelStaticInfos! {
                    tmp.append(k.toMap())
                }
                map["hotel_static_infos"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("hotel_static_infos") && dict["hotel_static_infos"] != nil {
                var tmp : [HotelStaticInfoResponseBody.Module.HotelStaticInfos] = []
                for v in dict["hotel_static_infos"] as! [Any] {
                    var model = HotelStaticInfoResponseBody.Module.HotelStaticInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.hotelStaticInfos = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: HotelStaticInfoResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = HotelStaticInfoResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class HotelStaticInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HotelStaticInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = HotelStaticInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IeFlightBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class IeFlightBillSettlementQueryRequest : Tea.TeaModel {
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class IeFlightBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var advanceDay: Int32?

            public var airlineCorpCode: String?

            public var airlineCorpName: String?

            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var arrAirportCode: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrDate: String?

            public var arrStation: String?

            public var arrTime: String?

            public var billRecordTime: String?

            public var bookMode: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var btripCouponFee: Double?

            public var businessTripResult: String?

            public var cabin: String?

            public var cabinClass: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var changeFee: Double?

            public var changeResult: String?

            public var corpPayOrderFee: Double?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var coupon: Double?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var department: String?

            public var departmentId: String?

            public var deptCity: String?

            public var deptDate: String?

            public var deptStation: String?

            public var deptTime: String?

            public var discount: String?

            public var exceedReason: String?

            public var feeType: String?

            public var flightNo: String?

            public var index: String?

            public var insuranceFee: Double?

            public var insuranceNumber: String?

            public var invoiceTitle: String?

            public var mostDifferenceDeptTime: String?

            public var mostDifferenceDiscount: String?

            public var mostDifferenceFlightNo: String?

            public var mostDifferencePrice: Double?

            public var mostDifferenceReason: String?

            public var mostPrice: Double?

            public var negotiationCouponFee: Double?

            public var orderId: String?

            public var orderStatusDesc: String?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var refundFee: Double?

            public var refundResult: String?

            public var remark: String?

            public var repeatRefund: String?

            public var sealPrice: Double?

            public var segmentType: String?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var status: Int32?

            public var subOrderId: String?

            public var taxFee: Double?

            public var taxRate: String?

            public var thirdItineraryId: String?

            public var ticketId: String?

            public var trade: String?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerName: String?

            public var voucherType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.advanceDay != nil {
                    map["advance_day"] = self.advanceDay!
                }
                if self.airlineCorpCode != nil {
                    map["airline_corp_code"] = self.airlineCorpCode!
                }
                if self.airlineCorpName != nil {
                    map["airline_corp_name"] = self.airlineCorpName!
                }
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.arrStation != nil {
                    map["arr_station"] = self.arrStation!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookMode != nil {
                    map["book_mode"] = self.bookMode!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.btripCouponFee != nil {
                    map["btrip_coupon_fee"] = self.btripCouponFee!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.changeFee != nil {
                    map["change_fee"] = self.changeFee!
                }
                if self.changeResult != nil {
                    map["change_result"] = self.changeResult!
                }
                if self.corpPayOrderFee != nil {
                    map["corp_pay_order_fee"] = self.corpPayOrderFee!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.coupon != nil {
                    map["coupon"] = self.coupon!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.deptCity != nil {
                    map["dept_city"] = self.deptCity!
                }
                if self.deptDate != nil {
                    map["dept_date"] = self.deptDate!
                }
                if self.deptStation != nil {
                    map["dept_station"] = self.deptStation!
                }
                if self.deptTime != nil {
                    map["dept_time"] = self.deptTime!
                }
                if self.discount != nil {
                    map["discount"] = self.discount!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.insuranceFee != nil {
                    map["insurance_fee"] = self.insuranceFee!
                }
                if self.insuranceNumber != nil {
                    map["insurance_number"] = self.insuranceNumber!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.mostDifferenceDeptTime != nil {
                    map["most_difference_dept_time"] = self.mostDifferenceDeptTime!
                }
                if self.mostDifferenceDiscount != nil {
                    map["most_difference_discount"] = self.mostDifferenceDiscount!
                }
                if self.mostDifferenceFlightNo != nil {
                    map["most_difference_flight_no"] = self.mostDifferenceFlightNo!
                }
                if self.mostDifferencePrice != nil {
                    map["most_difference_price"] = self.mostDifferencePrice!
                }
                if self.mostDifferenceReason != nil {
                    map["most_difference_reason"] = self.mostDifferenceReason!
                }
                if self.mostPrice != nil {
                    map["most_price"] = self.mostPrice!
                }
                if self.negotiationCouponFee != nil {
                    map["negotiation_coupon_fee"] = self.negotiationCouponFee!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderStatusDesc != nil {
                    map["order_status_desc"] = self.orderStatusDesc!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundResult != nil {
                    map["refund_result"] = self.refundResult!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.repeatRefund != nil {
                    map["repeat_refund"] = self.repeatRefund!
                }
                if self.sealPrice != nil {
                    map["seal_price"] = self.sealPrice!
                }
                if self.segmentType != nil {
                    map["segment_type"] = self.segmentType!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subOrderId != nil {
                    map["sub_order_id"] = self.subOrderId!
                }
                if self.taxFee != nil {
                    map["tax_fee"] = self.taxFee!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.ticketId != nil {
                    map["ticket_id"] = self.ticketId!
                }
                if self.trade != nil {
                    map["trade"] = self.trade!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("advance_day") && dict["advance_day"] != nil {
                    self.advanceDay = dict["advance_day"] as! Int32
                }
                if dict.keys.contains("airline_corp_code") && dict["airline_corp_code"] != nil {
                    self.airlineCorpCode = dict["airline_corp_code"] as! String
                }
                if dict.keys.contains("airline_corp_name") && dict["airline_corp_name"] != nil {
                    self.airlineCorpName = dict["airline_corp_name"] as! String
                }
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                    self.arrStation = dict["arr_station"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_mode") && dict["book_mode"] != nil {
                    self.bookMode = dict["book_mode"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("btrip_coupon_fee") && dict["btrip_coupon_fee"] != nil {
                    self.btripCouponFee = dict["btrip_coupon_fee"] as! Double
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                    self.changeFee = dict["change_fee"] as! Double
                }
                if dict.keys.contains("change_result") && dict["change_result"] != nil {
                    self.changeResult = dict["change_result"] as! String
                }
                if dict.keys.contains("corp_pay_order_fee") && dict["corp_pay_order_fee"] != nil {
                    self.corpPayOrderFee = dict["corp_pay_order_fee"] as! Double
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("coupon") && dict["coupon"] != nil {
                    self.coupon = dict["coupon"] as! Double
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("dept_city") && dict["dept_city"] != nil {
                    self.deptCity = dict["dept_city"] as! String
                }
                if dict.keys.contains("dept_date") && dict["dept_date"] != nil {
                    self.deptDate = dict["dept_date"] as! String
                }
                if dict.keys.contains("dept_station") && dict["dept_station"] != nil {
                    self.deptStation = dict["dept_station"] as! String
                }
                if dict.keys.contains("dept_time") && dict["dept_time"] != nil {
                    self.deptTime = dict["dept_time"] as! String
                }
                if dict.keys.contains("discount") && dict["discount"] != nil {
                    self.discount = dict["discount"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("insurance_fee") && dict["insurance_fee"] != nil {
                    self.insuranceFee = dict["insurance_fee"] as! Double
                }
                if dict.keys.contains("insurance_number") && dict["insurance_number"] != nil {
                    self.insuranceNumber = dict["insurance_number"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("most_difference_dept_time") && dict["most_difference_dept_time"] != nil {
                    self.mostDifferenceDeptTime = dict["most_difference_dept_time"] as! String
                }
                if dict.keys.contains("most_difference_discount") && dict["most_difference_discount"] != nil {
                    self.mostDifferenceDiscount = dict["most_difference_discount"] as! String
                }
                if dict.keys.contains("most_difference_flight_no") && dict["most_difference_flight_no"] != nil {
                    self.mostDifferenceFlightNo = dict["most_difference_flight_no"] as! String
                }
                if dict.keys.contains("most_difference_price") && dict["most_difference_price"] != nil {
                    self.mostDifferencePrice = dict["most_difference_price"] as! Double
                }
                if dict.keys.contains("most_difference_reason") && dict["most_difference_reason"] != nil {
                    self.mostDifferenceReason = dict["most_difference_reason"] as! String
                }
                if dict.keys.contains("most_price") && dict["most_price"] != nil {
                    self.mostPrice = dict["most_price"] as! Double
                }
                if dict.keys.contains("negotiation_coupon_fee") && dict["negotiation_coupon_fee"] != nil {
                    self.negotiationCouponFee = dict["negotiation_coupon_fee"] as! Double
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_status_desc") && dict["order_status_desc"] != nil {
                    self.orderStatusDesc = dict["order_status_desc"] as! String
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Double
                }
                if dict.keys.contains("refund_result") && dict["refund_result"] != nil {
                    self.refundResult = dict["refund_result"] as! String
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("repeat_refund") && dict["repeat_refund"] != nil {
                    self.repeatRefund = dict["repeat_refund"] as! String
                }
                if dict.keys.contains("seal_price") && dict["seal_price"] != nil {
                    self.sealPrice = dict["seal_price"] as! Double
                }
                if dict.keys.contains("segment_type") && dict["segment_type"] != nil {
                    self.segmentType = dict["segment_type"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                    self.subOrderId = dict["sub_order_id"] as! String
                }
                if dict.keys.contains("tax_fee") && dict["tax_fee"] != nil {
                    self.taxFee = dict["tax_fee"] as! Double
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("ticket_id") && dict["ticket_id"] != nil {
                    self.ticketId = dict["ticket_id"] as! String
                }
                if dict.keys.contains("trade") && dict["trade"] != nil {
                    self.trade = dict["trade"] as! String
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var dataList: [IeFlightBillSettlementQueryResponseBody.Module.DataList]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["data_list"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalNum != nil {
                map["total_num"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("data_list") && dict["data_list"] != nil {
                var tmp : [IeFlightBillSettlementQueryResponseBody.Module.DataList] = []
                for v in dict["data_list"] as! [Any] {
                    var model = IeFlightBillSettlementQueryResponseBody.Module.DataList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.dataList = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_num") && dict["total_num"] != nil {
                self.totalNum = dict["total_num"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: IeFlightBillSettlementQueryResponseBody.Module?

    public var morePage: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.morePage != nil {
            map["more_page"] = self.morePage!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = IeFlightBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("more_page") && dict["more_page"] != nil {
            self.morePage = dict["more_page"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IeFlightBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IeFlightBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IeFlightBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IeHotelBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class IeHotelBillSettlementQueryRequest : Tea.TeaModel {
    public var category: Int32?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["category"] = self.category!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("category") && dict["category"] != nil {
            self.category = dict["category"] as! Int32
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class IeHotelBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var alipayTradeNo: String?

            public var amountCurrency: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var averageNights: Double?

            public var billRecordTime: String?

            public var bookReason: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var brandGroup: String?

            public var brandName: String?

            public var businessExpense: Int64?

            public var businessTripResult: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var checkInDate: String?

            public var checkoutDate: String?

            public var city: String?

            public var cityCode: String?

            public var corpRefundFee: Double?

            public var corpTotalFee: Double?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var country: String?

            public var countryCode: String?

            public var department: String?

            public var departmentId: String?

            public var exceedReason: String?

            public var feeType: String?

            public var fines: Double?

            public var foreignBusinessExpense: Int64?

            public var hotelName: String?

            public var hotelStar: String?

            public var index: String?

            public var invoiceTitle: String?

            public var isEarlyDeparture: String?

            public var isNegotiation: String?

            public var isShareStr: String?

            public var mainApplyId: String?

            public var nights: Int32?

            public var orderId: String?

            public var orderPrice: Double?

            public var orderStatusDesc: String?

            public var orderType: String?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var personRefundFee: Double?

            public var personSettlePrice: Double?

            public var primaryId: Int64?

            public var projectCode: String?

            public var projectName: String?

            public var promotionFee: Double?

            public var rate: String?

            public var remark: String?

            public var reserveRule: Int32?

            public var roomNo: String?

            public var roomNumber: Int32?

            public var roomPrice: Double?

            public var roomType: String?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var status: Int32?

            public var subOrderId: String?

            public var taxRate: String?

            public var thirdInvoiceId: String?

            public var thirdItineraryId: String?

            public var thirdPartBusinessId: String?

            public var thirdpartApplyId: String?

            public var totalNights: Int32?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberType: String?

            public var travelerName: String?

            public var voucherType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.amountCurrency != nil {
                    map["amount_currency"] = self.amountCurrency!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.averageNights != nil {
                    map["average_nights"] = self.averageNights!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookReason != nil {
                    map["book_reason"] = self.bookReason!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.brandGroup != nil {
                    map["brand_group"] = self.brandGroup!
                }
                if self.brandName != nil {
                    map["brand_name"] = self.brandName!
                }
                if self.businessExpense != nil {
                    map["business_expense"] = self.businessExpense!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.checkInDate != nil {
                    map["check_in_date"] = self.checkInDate!
                }
                if self.checkoutDate != nil {
                    map["checkout_date"] = self.checkoutDate!
                }
                if self.city != nil {
                    map["city"] = self.city!
                }
                if self.cityCode != nil {
                    map["city_code"] = self.cityCode!
                }
                if self.corpRefundFee != nil {
                    map["corp_refund_fee"] = self.corpRefundFee!
                }
                if self.corpTotalFee != nil {
                    map["corp_total_fee"] = self.corpTotalFee!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.country != nil {
                    map["country"] = self.country!
                }
                if self.countryCode != nil {
                    map["country_code"] = self.countryCode!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.fines != nil {
                    map["fines"] = self.fines!
                }
                if self.foreignBusinessExpense != nil {
                    map["foreign_business_expense"] = self.foreignBusinessExpense!
                }
                if self.hotelName != nil {
                    map["hotel_name"] = self.hotelName!
                }
                if self.hotelStar != nil {
                    map["hotel_star"] = self.hotelStar!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.isEarlyDeparture != nil {
                    map["is_early_departure"] = self.isEarlyDeparture!
                }
                if self.isNegotiation != nil {
                    map["is_negotiation"] = self.isNegotiation!
                }
                if self.isShareStr != nil {
                    map["is_share_str"] = self.isShareStr!
                }
                if self.mainApplyId != nil {
                    map["main_apply_id"] = self.mainApplyId!
                }
                if self.nights != nil {
                    map["nights"] = self.nights!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderPrice != nil {
                    map["order_price"] = self.orderPrice!
                }
                if self.orderStatusDesc != nil {
                    map["order_status_desc"] = self.orderStatusDesc!
                }
                if self.orderType != nil {
                    map["order_type"] = self.orderType!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.personRefundFee != nil {
                    map["person_refund_fee"] = self.personRefundFee!
                }
                if self.personSettlePrice != nil {
                    map["person_settle_price"] = self.personSettlePrice!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.promotionFee != nil {
                    map["promotion_fee"] = self.promotionFee!
                }
                if self.rate != nil {
                    map["rate"] = self.rate!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.reserveRule != nil {
                    map["reserve_rule"] = self.reserveRule!
                }
                if self.roomNo != nil {
                    map["room_no"] = self.roomNo!
                }
                if self.roomNumber != nil {
                    map["room_number"] = self.roomNumber!
                }
                if self.roomPrice != nil {
                    map["room_price"] = self.roomPrice!
                }
                if self.roomType != nil {
                    map["room_type"] = self.roomType!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subOrderId != nil {
                    map["sub_order_id"] = self.subOrderId!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdInvoiceId != nil {
                    map["third_invoice_id"] = self.thirdInvoiceId!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.thirdPartBusinessId != nil {
                    map["third_part_business_id"] = self.thirdPartBusinessId!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.totalNights != nil {
                    map["total_nights"] = self.totalNights!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberType != nil {
                    map["traveler_member_type"] = self.travelerMemberType!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("amount_currency") && dict["amount_currency"] != nil {
                    self.amountCurrency = dict["amount_currency"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("average_nights") && dict["average_nights"] != nil {
                    self.averageNights = dict["average_nights"] as! Double
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_reason") && dict["book_reason"] != nil {
                    self.bookReason = dict["book_reason"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("brand_group") && dict["brand_group"] != nil {
                    self.brandGroup = dict["brand_group"] as! String
                }
                if dict.keys.contains("brand_name") && dict["brand_name"] != nil {
                    self.brandName = dict["brand_name"] as! String
                }
                if dict.keys.contains("business_expense") && dict["business_expense"] != nil {
                    self.businessExpense = dict["business_expense"] as! Int64
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("check_in_date") && dict["check_in_date"] != nil {
                    self.checkInDate = dict["check_in_date"] as! String
                }
                if dict.keys.contains("checkout_date") && dict["checkout_date"] != nil {
                    self.checkoutDate = dict["checkout_date"] as! String
                }
                if dict.keys.contains("city") && dict["city"] != nil {
                    self.city = dict["city"] as! String
                }
                if dict.keys.contains("city_code") && dict["city_code"] != nil {
                    self.cityCode = dict["city_code"] as! String
                }
                if dict.keys.contains("corp_refund_fee") && dict["corp_refund_fee"] != nil {
                    self.corpRefundFee = dict["corp_refund_fee"] as! Double
                }
                if dict.keys.contains("corp_total_fee") && dict["corp_total_fee"] != nil {
                    self.corpTotalFee = dict["corp_total_fee"] as! Double
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("country") && dict["country"] != nil {
                    self.country = dict["country"] as! String
                }
                if dict.keys.contains("country_code") && dict["country_code"] != nil {
                    self.countryCode = dict["country_code"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("fines") && dict["fines"] != nil {
                    self.fines = dict["fines"] as! Double
                }
                if dict.keys.contains("foreign_business_expense") && dict["foreign_business_expense"] != nil {
                    self.foreignBusinessExpense = dict["foreign_business_expense"] as! Int64
                }
                if dict.keys.contains("hotel_name") && dict["hotel_name"] != nil {
                    self.hotelName = dict["hotel_name"] as! String
                }
                if dict.keys.contains("hotel_star") && dict["hotel_star"] != nil {
                    self.hotelStar = dict["hotel_star"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("is_early_departure") && dict["is_early_departure"] != nil {
                    self.isEarlyDeparture = dict["is_early_departure"] as! String
                }
                if dict.keys.contains("is_negotiation") && dict["is_negotiation"] != nil {
                    self.isNegotiation = dict["is_negotiation"] as! String
                }
                if dict.keys.contains("is_share_str") && dict["is_share_str"] != nil {
                    self.isShareStr = dict["is_share_str"] as! String
                }
                if dict.keys.contains("main_apply_id") && dict["main_apply_id"] != nil {
                    self.mainApplyId = dict["main_apply_id"] as! String
                }
                if dict.keys.contains("nights") && dict["nights"] != nil {
                    self.nights = dict["nights"] as! Int32
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_price") && dict["order_price"] != nil {
                    self.orderPrice = dict["order_price"] as! Double
                }
                if dict.keys.contains("order_status_desc") && dict["order_status_desc"] != nil {
                    self.orderStatusDesc = dict["order_status_desc"] as! String
                }
                if dict.keys.contains("order_type") && dict["order_type"] != nil {
                    self.orderType = dict["order_type"] as! String
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("person_refund_fee") && dict["person_refund_fee"] != nil {
                    self.personRefundFee = dict["person_refund_fee"] as! Double
                }
                if dict.keys.contains("person_settle_price") && dict["person_settle_price"] != nil {
                    self.personSettlePrice = dict["person_settle_price"] as! Double
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("promotion_fee") && dict["promotion_fee"] != nil {
                    self.promotionFee = dict["promotion_fee"] as! Double
                }
                if dict.keys.contains("rate") && dict["rate"] != nil {
                    self.rate = dict["rate"] as! String
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("reserve_rule") && dict["reserve_rule"] != nil {
                    self.reserveRule = dict["reserve_rule"] as! Int32
                }
                if dict.keys.contains("room_no") && dict["room_no"] != nil {
                    self.roomNo = dict["room_no"] as! String
                }
                if dict.keys.contains("room_number") && dict["room_number"] != nil {
                    self.roomNumber = dict["room_number"] as! Int32
                }
                if dict.keys.contains("room_price") && dict["room_price"] != nil {
                    self.roomPrice = dict["room_price"] as! Double
                }
                if dict.keys.contains("room_type") && dict["room_type"] != nil {
                    self.roomType = dict["room_type"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("sub_order_id") && dict["sub_order_id"] != nil {
                    self.subOrderId = dict["sub_order_id"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_invoice_id") && dict["third_invoice_id"] != nil {
                    self.thirdInvoiceId = dict["third_invoice_id"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("third_part_business_id") && dict["third_part_business_id"] != nil {
                    self.thirdPartBusinessId = dict["third_part_business_id"] as! String
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("total_nights") && dict["total_nights"] != nil {
                    self.totalNights = dict["total_nights"] as! Int32
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type") && dict["traveler_member_type"] != nil {
                    self.travelerMemberType = dict["traveler_member_type"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var dataList: [IeHotelBillSettlementQueryResponseBody.Module.DataList]?

        public var orderId: String?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalSize: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["data_list"] = tmp
            }
            if self.orderId != nil {
                map["order_id"] = self.orderId!
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("data_list") && dict["data_list"] != nil {
                var tmp : [IeHotelBillSettlementQueryResponseBody.Module.DataList] = []
                for v in dict["data_list"] as! [Any] {
                    var model = IeHotelBillSettlementQueryResponseBody.Module.DataList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.dataList = tmp
            }
            if dict.keys.contains("order_id") && dict["order_id"] != nil {
                self.orderId = dict["order_id"] as! String
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: IeHotelBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = IeHotelBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IeHotelBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IeHotelBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IeHotelBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsInvoiceScanQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class InsInvoiceScanQueryRequest : Tea.TeaModel {
    public var billDate: String?

    public var billId: Int64?

    public var invoiceSubTaskId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        if self.billId != nil {
            map["bill_id"] = self.billId!
        }
        if self.invoiceSubTaskId != nil {
            map["invoice_sub_task_id"] = self.invoiceSubTaskId!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
        if dict.keys.contains("bill_id") && dict["bill_id"] != nil {
            self.billId = dict["bill_id"] as! Int64
        }
        if dict.keys.contains("invoice_sub_task_id") && dict["invoice_sub_task_id"] != nil {
            self.invoiceSubTaskId = dict["invoice_sub_task_id"] as! Int64
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
    }
}

public class InsInvoiceScanQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class InvoiceDetails : Tea.TeaModel {
                public var amount: String?

                public var index: String?

                public var itemName: String?

                public var quantity: String?

                public var specification: String?

                public var tax: String?

                public var taxRate: String?

                public var unit: String?

                public var unitPrice: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.amount != nil {
                        map["amount"] = self.amount!
                    }
                    if self.index != nil {
                        map["index"] = self.index!
                    }
                    if self.itemName != nil {
                        map["item_name"] = self.itemName!
                    }
                    if self.quantity != nil {
                        map["quantity"] = self.quantity!
                    }
                    if self.specification != nil {
                        map["specification"] = self.specification!
                    }
                    if self.tax != nil {
                        map["tax"] = self.tax!
                    }
                    if self.taxRate != nil {
                        map["tax_rate"] = self.taxRate!
                    }
                    if self.unit != nil {
                        map["unit"] = self.unit!
                    }
                    if self.unitPrice != nil {
                        map["unit_price"] = self.unitPrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("amount") && dict["amount"] != nil {
                        self.amount = dict["amount"] as! String
                    }
                    if dict.keys.contains("index") && dict["index"] != nil {
                        self.index = dict["index"] as! String
                    }
                    if dict.keys.contains("item_name") && dict["item_name"] != nil {
                        self.itemName = dict["item_name"] as! String
                    }
                    if dict.keys.contains("quantity") && dict["quantity"] != nil {
                        self.quantity = dict["quantity"] as! String
                    }
                    if dict.keys.contains("specification") && dict["specification"] != nil {
                        self.specification = dict["specification"] as! String
                    }
                    if dict.keys.contains("tax") && dict["tax"] != nil {
                        self.tax = dict["tax"] as! String
                    }
                    if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                        self.taxRate = dict["tax_rate"] as! String
                    }
                    if dict.keys.contains("unit") && dict["unit"] != nil {
                        self.unit = dict["unit"] as! String
                    }
                    if dict.keys.contains("unit_price") && dict["unit_price"] != nil {
                        self.unitPrice = dict["unit_price"] as! String
                    }
                }
            }
            public var amountWithTax: String?

            public var amountWithoutTax: String?

            public var billDate: String?

            public var checkCode: String?

            public var costCenter: String?

            public var department: String?

            public var drawer: String?

            public var id: String?

            public var insuranceCompany: String?

            public var insuranceOrderId: String?

            public var insuranceType: String?

            public var invoiceCode: String?

            public var invoiceDay: String?

            public var invoiceDetails: [InsInvoiceScanQueryResponseBody.Module.Items.InvoiceDetails]?

            public var invoiceLocation: String?

            public var invoiceNo: String?

            public var invoiceTitle: String?

            public var machineCode: String?

            public var orderId: Int64?

            public var ossUrl: String?

            public var passenger: String?

            public var passwordArea: String?

            public var project: String?

            public var purchaserBankAccountInfo: String?

            public var purchaserContactInfo: String?

            public var purchaserName: String?

            public var purchaserTaxNo: String?

            public var recipient: String?

            public var remarks: String?

            public var reviewer: String?

            public var sellerBankAccountInfo: String?

            public var sellerContactInfo: String?

            public var sellerName: String?

            public var sellerTaxNo: String?

            public var smartCheckCode: String?

            public var taxAmount: String?

            public var taxRate: String?

            public var totalAmountInWords: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amountWithTax != nil {
                    map["amount_with_tax"] = self.amountWithTax!
                }
                if self.amountWithoutTax != nil {
                    map["amount_without_tax"] = self.amountWithoutTax!
                }
                if self.billDate != nil {
                    map["bill_date"] = self.billDate!
                }
                if self.checkCode != nil {
                    map["check_code"] = self.checkCode!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.drawer != nil {
                    map["drawer"] = self.drawer!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.insuranceCompany != nil {
                    map["insurance_company"] = self.insuranceCompany!
                }
                if self.insuranceOrderId != nil {
                    map["insurance_order_id"] = self.insuranceOrderId!
                }
                if self.insuranceType != nil {
                    map["insurance_type"] = self.insuranceType!
                }
                if self.invoiceCode != nil {
                    map["invoice_code"] = self.invoiceCode!
                }
                if self.invoiceDay != nil {
                    map["invoice_day"] = self.invoiceDay!
                }
                if self.invoiceDetails != nil {
                    var tmp : [Any] = []
                    for k in self.invoiceDetails! {
                        tmp.append(k.toMap())
                    }
                    map["invoice_details"] = tmp
                }
                if self.invoiceLocation != nil {
                    map["invoice_location"] = self.invoiceLocation!
                }
                if self.invoiceNo != nil {
                    map["invoice_no"] = self.invoiceNo!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.machineCode != nil {
                    map["machine_code"] = self.machineCode!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.ossUrl != nil {
                    map["oss_url"] = self.ossUrl!
                }
                if self.passenger != nil {
                    map["passenger"] = self.passenger!
                }
                if self.passwordArea != nil {
                    map["password_area"] = self.passwordArea!
                }
                if self.project != nil {
                    map["project"] = self.project!
                }
                if self.purchaserBankAccountInfo != nil {
                    map["purchaser_bank_account_info"] = self.purchaserBankAccountInfo!
                }
                if self.purchaserContactInfo != nil {
                    map["purchaser_contact_info"] = self.purchaserContactInfo!
                }
                if self.purchaserName != nil {
                    map["purchaser_name"] = self.purchaserName!
                }
                if self.purchaserTaxNo != nil {
                    map["purchaser_tax_no"] = self.purchaserTaxNo!
                }
                if self.recipient != nil {
                    map["recipient"] = self.recipient!
                }
                if self.remarks != nil {
                    map["remarks"] = self.remarks!
                }
                if self.reviewer != nil {
                    map["reviewer"] = self.reviewer!
                }
                if self.sellerBankAccountInfo != nil {
                    map["seller_bank_account_info"] = self.sellerBankAccountInfo!
                }
                if self.sellerContactInfo != nil {
                    map["seller_contact_info"] = self.sellerContactInfo!
                }
                if self.sellerName != nil {
                    map["seller_name"] = self.sellerName!
                }
                if self.sellerTaxNo != nil {
                    map["seller_tax_no"] = self.sellerTaxNo!
                }
                if self.smartCheckCode != nil {
                    map["smart_check_code"] = self.smartCheckCode!
                }
                if self.taxAmount != nil {
                    map["tax_amount"] = self.taxAmount!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.totalAmountInWords != nil {
                    map["total_amount_in_words"] = self.totalAmountInWords!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("amount_with_tax") && dict["amount_with_tax"] != nil {
                    self.amountWithTax = dict["amount_with_tax"] as! String
                }
                if dict.keys.contains("amount_without_tax") && dict["amount_without_tax"] != nil {
                    self.amountWithoutTax = dict["amount_without_tax"] as! String
                }
                if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
                    self.billDate = dict["bill_date"] as! String
                }
                if dict.keys.contains("check_code") && dict["check_code"] != nil {
                    self.checkCode = dict["check_code"] as! String
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("drawer") && dict["drawer"] != nil {
                    self.drawer = dict["drawer"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! String
                }
                if dict.keys.contains("insurance_company") && dict["insurance_company"] != nil {
                    self.insuranceCompany = dict["insurance_company"] as! String
                }
                if dict.keys.contains("insurance_order_id") && dict["insurance_order_id"] != nil {
                    self.insuranceOrderId = dict["insurance_order_id"] as! String
                }
                if dict.keys.contains("insurance_type") && dict["insurance_type"] != nil {
                    self.insuranceType = dict["insurance_type"] as! String
                }
                if dict.keys.contains("invoice_code") && dict["invoice_code"] != nil {
                    self.invoiceCode = dict["invoice_code"] as! String
                }
                if dict.keys.contains("invoice_day") && dict["invoice_day"] != nil {
                    self.invoiceDay = dict["invoice_day"] as! String
                }
                if dict.keys.contains("invoice_details") && dict["invoice_details"] != nil {
                    var tmp : [InsInvoiceScanQueryResponseBody.Module.Items.InvoiceDetails] = []
                    for v in dict["invoice_details"] as! [Any] {
                        var model = InsInvoiceScanQueryResponseBody.Module.Items.InvoiceDetails()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.invoiceDetails = tmp
                }
                if dict.keys.contains("invoice_location") && dict["invoice_location"] != nil {
                    self.invoiceLocation = dict["invoice_location"] as! String
                }
                if dict.keys.contains("invoice_no") && dict["invoice_no"] != nil {
                    self.invoiceNo = dict["invoice_no"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("machine_code") && dict["machine_code"] != nil {
                    self.machineCode = dict["machine_code"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("oss_url") && dict["oss_url"] != nil {
                    self.ossUrl = dict["oss_url"] as! String
                }
                if dict.keys.contains("passenger") && dict["passenger"] != nil {
                    self.passenger = dict["passenger"] as! String
                }
                if dict.keys.contains("password_area") && dict["password_area"] != nil {
                    self.passwordArea = dict["password_area"] as! String
                }
                if dict.keys.contains("project") && dict["project"] != nil {
                    self.project = dict["project"] as! String
                }
                if dict.keys.contains("purchaser_bank_account_info") && dict["purchaser_bank_account_info"] != nil {
                    self.purchaserBankAccountInfo = dict["purchaser_bank_account_info"] as! String
                }
                if dict.keys.contains("purchaser_contact_info") && dict["purchaser_contact_info"] != nil {
                    self.purchaserContactInfo = dict["purchaser_contact_info"] as! String
                }
                if dict.keys.contains("purchaser_name") && dict["purchaser_name"] != nil {
                    self.purchaserName = dict["purchaser_name"] as! String
                }
                if dict.keys.contains("purchaser_tax_no") && dict["purchaser_tax_no"] != nil {
                    self.purchaserTaxNo = dict["purchaser_tax_no"] as! String
                }
                if dict.keys.contains("recipient") && dict["recipient"] != nil {
                    self.recipient = dict["recipient"] as! String
                }
                if dict.keys.contains("remarks") && dict["remarks"] != nil {
                    self.remarks = dict["remarks"] as! String
                }
                if dict.keys.contains("reviewer") && dict["reviewer"] != nil {
                    self.reviewer = dict["reviewer"] as! String
                }
                if dict.keys.contains("seller_bank_account_info") && dict["seller_bank_account_info"] != nil {
                    self.sellerBankAccountInfo = dict["seller_bank_account_info"] as! String
                }
                if dict.keys.contains("seller_contact_info") && dict["seller_contact_info"] != nil {
                    self.sellerContactInfo = dict["seller_contact_info"] as! String
                }
                if dict.keys.contains("seller_name") && dict["seller_name"] != nil {
                    self.sellerName = dict["seller_name"] as! String
                }
                if dict.keys.contains("seller_tax_no") && dict["seller_tax_no"] != nil {
                    self.sellerTaxNo = dict["seller_tax_no"] as! String
                }
                if dict.keys.contains("smart_check_code") && dict["smart_check_code"] != nil {
                    self.smartCheckCode = dict["smart_check_code"] as! String
                }
                if dict.keys.contains("tax_amount") && dict["tax_amount"] != nil {
                    self.taxAmount = dict["tax_amount"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("total_amount_in_words") && dict["total_amount_in_words"] != nil {
                    self.totalAmountInWords = dict["total_amount_in_words"] as! String
                }
            }
        }
        public var items: [InsInvoiceScanQueryResponseBody.Module.Items]?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var totalPage: Int32?

        public var totalSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.pageNo != nil {
                map["page_no"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalPage != nil {
                map["total_page"] = self.totalPage!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [InsInvoiceScanQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = InsInvoiceScanQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("page_no") && dict["page_no"] != nil {
                self.pageNo = dict["page_no"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_page") && dict["total_page"] != nil {
                self.totalPage = dict["total_page"] as! Int32
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InsInvoiceScanQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InsInvoiceScanQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsInvoiceScanQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsInvoiceScanQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsInvoiceScanQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderApplyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderApplyRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var insOrderId: String?

    public var isvName: String?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.insOrderId != nil {
            map["ins_order_id"] = self.insOrderId!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
            self.insOrderId = dict["ins_order_id"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderApplyResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class InsOrderPolicyList : Tea.TeaModel {
            public var outSubInsOrderId: String?

            public var policyNo: String?

            public var status: String?

            public var subInsOrderId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outSubInsOrderId != nil {
                    map["out_sub_ins_order_id"] = self.outSubInsOrderId!
                }
                if self.policyNo != nil {
                    map["policy_no"] = self.policyNo!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subInsOrderId != nil {
                    map["sub_ins_order_id"] = self.subInsOrderId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("out_sub_ins_order_id") && dict["out_sub_ins_order_id"] != nil {
                    self.outSubInsOrderId = dict["out_sub_ins_order_id"] as! String
                }
                if dict.keys.contains("policy_no") && dict["policy_no"] != nil {
                    self.policyNo = dict["policy_no"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
                if dict.keys.contains("sub_ins_order_id") && dict["sub_ins_order_id"] != nil {
                    self.subInsOrderId = dict["sub_ins_order_id"] as! String
                }
            }
        }
        public var insOrderId: String?

        public var insOrderPolicyList: [InsureOrderApplyResponseBody.Module.InsOrderPolicyList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.insOrderId != nil {
                map["ins_order_id"] = self.insOrderId!
            }
            if self.insOrderPolicyList != nil {
                var tmp : [Any] = []
                for k in self.insOrderPolicyList! {
                    tmp.append(k.toMap())
                }
                map["ins_order_policy_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                self.insOrderId = dict["ins_order_id"] as! String
            }
            if dict.keys.contains("ins_order_policy_list") && dict["ins_order_policy_list"] != nil {
                var tmp : [InsureOrderApplyResponseBody.Module.InsOrderPolicyList] = []
                for v in dict["ins_order_policy_list"] as! [Any] {
                    var model = InsureOrderApplyResponseBody.Module.InsOrderPolicyList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.insOrderPolicyList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InsureOrderApplyResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InsureOrderApplyResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderApplyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderApplyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderApplyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderCancelHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderCancelRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var isvName: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderCancelResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderCancelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderCancelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderCancelResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderCreateHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderCreateRequest : Tea.TeaModel {
    public class Applicant : Tea.TeaModel {
        public var birthday: String?

        public var btripUserId: String?

        public var certName: String?

        public var certNo: String?

        public var certType: String?

        public var gender: String?

        public var phone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.birthday != nil {
                map["birthday"] = self.birthday!
            }
            if self.btripUserId != nil {
                map["btrip_user_id"] = self.btripUserId!
            }
            if self.certName != nil {
                map["cert_name"] = self.certName!
            }
            if self.certNo != nil {
                map["cert_no"] = self.certNo!
            }
            if self.certType != nil {
                map["cert_type"] = self.certType!
            }
            if self.gender != nil {
                map["gender"] = self.gender!
            }
            if self.phone != nil {
                map["phone"] = self.phone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("birthday") && dict["birthday"] != nil {
                self.birthday = dict["birthday"] as! String
            }
            if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
                self.btripUserId = dict["btrip_user_id"] as! String
            }
            if dict.keys.contains("cert_name") && dict["cert_name"] != nil {
                self.certName = dict["cert_name"] as! String
            }
            if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                self.certNo = dict["cert_no"] as! String
            }
            if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                self.certType = dict["cert_type"] as! String
            }
            if dict.keys.contains("gender") && dict["gender"] != nil {
                self.gender = dict["gender"] as! String
            }
            if dict.keys.contains("phone") && dict["phone"] != nil {
                self.phone = dict["phone"] as! String
            }
        }
    }
    public class InsPersonAndSegmentList : Tea.TeaModel {
        public class InsureSegment : Tea.TeaModel {
            public var arrAirportCode: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrTime: String?

            public var depAirportCode: String?

            public var depCity: String?

            public var depCityCode: String?

            public var depTime: String?

            public var flightNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
            }
        }
        public class Insured : Tea.TeaModel {
            public var birthday: String?

            public var btripUserId: String?

            public var certName: String?

            public var certNo: String?

            public var certType: String?

            public var gender: String?

            public var phone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.birthday != nil {
                    map["birthday"] = self.birthday!
                }
                if self.btripUserId != nil {
                    map["btrip_user_id"] = self.btripUserId!
                }
                if self.certName != nil {
                    map["cert_name"] = self.certName!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.gender != nil {
                    map["gender"] = self.gender!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("birthday") && dict["birthday"] != nil {
                    self.birthday = dict["birthday"] as! String
                }
                if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
                    self.btripUserId = dict["btrip_user_id"] as! String
                }
                if dict.keys.contains("cert_name") && dict["cert_name"] != nil {
                    self.certName = dict["cert_name"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! String
                }
                if dict.keys.contains("gender") && dict["gender"] != nil {
                    self.gender = dict["gender"] as! String
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
            }
        }
        public var insureSegment: InsureOrderCreateRequest.InsPersonAndSegmentList.InsureSegment?

        public var insured: InsureOrderCreateRequest.InsPersonAndSegmentList.Insured?

        public var outSubInsOrderId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.insureSegment?.validate()
            try self.insured?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.insureSegment != nil {
                map["insure_segment"] = self.insureSegment?.toMap()
            }
            if self.insured != nil {
                map["insured"] = self.insured?.toMap()
            }
            if self.outSubInsOrderId != nil {
                map["out_sub_ins_order_id"] = self.outSubInsOrderId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("insure_segment") && dict["insure_segment"] != nil {
                var model = InsureOrderCreateRequest.InsPersonAndSegmentList.InsureSegment()
                model.fromMap(dict["insure_segment"] as! [String: Any])
                self.insureSegment = model
            }
            if dict.keys.contains("insured") && dict["insured"] != nil {
                var model = InsureOrderCreateRequest.InsPersonAndSegmentList.Insured()
                model.fromMap(dict["insured"] as! [String: Any])
                self.insured = model
            }
            if dict.keys.contains("out_sub_ins_order_id") && dict["out_sub_ins_order_id"] != nil {
                self.outSubInsOrderId = dict["out_sub_ins_order_id"] as! String
            }
        }
    }
    public var applicant: InsureOrderCreateRequest.Applicant?

    public var btripUserId: String?

    public var buyerName: String?

    public var insPersonAndSegmentList: [InsureOrderCreateRequest.InsPersonAndSegmentList]?

    public var isvName: String?

    public var outInsOrderId: String?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.applicant?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicant != nil {
            map["applicant"] = self.applicant?.toMap()
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.insPersonAndSegmentList != nil {
            var tmp : [Any] = []
            for k in self.insPersonAndSegmentList! {
                tmp.append(k.toMap())
            }
            map["ins_person_and_segment_list"] = tmp
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outInsOrderId != nil {
            map["out_ins_order_id"] = self.outInsOrderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("applicant") && dict["applicant"] != nil {
            var model = InsureOrderCreateRequest.Applicant()
            model.fromMap(dict["applicant"] as! [String: Any])
            self.applicant = model
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("ins_person_and_segment_list") && dict["ins_person_and_segment_list"] != nil {
            var tmp : [InsureOrderCreateRequest.InsPersonAndSegmentList] = []
            for v in dict["ins_person_and_segment_list"] as! [Any] {
                var model = InsureOrderCreateRequest.InsPersonAndSegmentList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.insPersonAndSegmentList = tmp
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_ins_order_id") && dict["out_ins_order_id"] != nil {
            self.outInsOrderId = dict["out_ins_order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderCreateShrinkRequest : Tea.TeaModel {
    public var applicantShrink: String?

    public var btripUserId: String?

    public var buyerName: String?

    public var insPersonAndSegmentListShrink: String?

    public var isvName: String?

    public var outInsOrderId: String?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicantShrink != nil {
            map["applicant"] = self.applicantShrink!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.insPersonAndSegmentListShrink != nil {
            map["ins_person_and_segment_list"] = self.insPersonAndSegmentListShrink!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outInsOrderId != nil {
            map["out_ins_order_id"] = self.outInsOrderId!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("applicant") && dict["applicant"] != nil {
            self.applicantShrink = dict["applicant"] as! String
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("ins_person_and_segment_list") && dict["ins_person_and_segment_list"] != nil {
            self.insPersonAndSegmentListShrink = dict["ins_person_and_segment_list"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_ins_order_id") && dict["out_ins_order_id"] != nil {
            self.outInsOrderId = dict["out_ins_order_id"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderCreateResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class InsureOrderDetailList : Tea.TeaModel {
            public var outSubInsOrderId: String?

            public var policyNo: String?

            public var status: String?

            public var subInsOrderId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outSubInsOrderId != nil {
                    map["out_sub_ins_order_id"] = self.outSubInsOrderId!
                }
                if self.policyNo != nil {
                    map["policy_no"] = self.policyNo!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subInsOrderId != nil {
                    map["sub_ins_order_id"] = self.subInsOrderId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("out_sub_ins_order_id") && dict["out_sub_ins_order_id"] != nil {
                    self.outSubInsOrderId = dict["out_sub_ins_order_id"] as! String
                }
                if dict.keys.contains("policy_no") && dict["policy_no"] != nil {
                    self.policyNo = dict["policy_no"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
                if dict.keys.contains("sub_ins_order_id") && dict["sub_ins_order_id"] != nil {
                    self.subInsOrderId = dict["sub_ins_order_id"] as! String
                }
            }
        }
        public var copies: Int32?

        public var insureOrderDetailList: [InsureOrderCreateResponseBody.Module.InsureOrderDetailList]?

        public var insureOrderId: String?

        public var premium: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.copies != nil {
                map["copies"] = self.copies!
            }
            if self.insureOrderDetailList != nil {
                var tmp : [Any] = []
                for k in self.insureOrderDetailList! {
                    tmp.append(k.toMap())
                }
                map["insure_order_detail_list"] = tmp
            }
            if self.insureOrderId != nil {
                map["insure_order_id"] = self.insureOrderId!
            }
            if self.premium != nil {
                map["premium"] = self.premium!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("copies") && dict["copies"] != nil {
                self.copies = dict["copies"] as! Int32
            }
            if dict.keys.contains("insure_order_detail_list") && dict["insure_order_detail_list"] != nil {
                var tmp : [InsureOrderCreateResponseBody.Module.InsureOrderDetailList] = []
                for v in dict["insure_order_detail_list"] as! [Any] {
                    var model = InsureOrderCreateResponseBody.Module.InsureOrderDetailList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.insureOrderDetailList = tmp
            }
            if dict.keys.contains("insure_order_id") && dict["insure_order_id"] != nil {
                self.insureOrderId = dict["insure_order_id"] as! String
            }
            if dict.keys.contains("premium") && dict["premium"] != nil {
                self.premium = dict["premium"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InsureOrderCreateResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InsureOrderCreateResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderCreateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderCreateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderCreateResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderDetailRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var insOrderId: String?

    public var isvName: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.insOrderId != nil {
            map["ins_order_id"] = self.insOrderId!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
            self.insOrderId = dict["ins_order_id"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderDetailResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Applicant : Tea.TeaModel {
            public var certName: String?

            public var certNo: String?

            public var certType: String?

            public var phone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certName != nil {
                    map["cert_name"] = self.certName!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cert_name") && dict["cert_name"] != nil {
                    self.certName = dict["cert_name"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! String
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
            }
        }
        public class InsureOrderDetailList : Tea.TeaModel {
            public class InsureSegment : Tea.TeaModel {
                public var arrAirportCode: String?

                public var arrCity: String?

                public var arrCityCode: String?

                public var arrTime: String?

                public var depAirportCode: String?

                public var depCity: String?

                public var depCityCode: String?

                public var depTime: String?

                public var flightNo: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrAirportCode != nil {
                        map["arr_airport_code"] = self.arrAirportCode!
                    }
                    if self.arrCity != nil {
                        map["arr_city"] = self.arrCity!
                    }
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.depAirportCode != nil {
                        map["dep_airport_code"] = self.depAirportCode!
                    }
                    if self.depCity != nil {
                        map["dep_city"] = self.depCity!
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.flightNo != nil {
                        map["flight_no"] = self.flightNo!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                        self.arrAirportCode = dict["arr_airport_code"] as! String
                    }
                    if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                        self.arrCity = dict["arr_city"] as! String
                    }
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                        self.depAirportCode = dict["dep_airport_code"] as! String
                    }
                    if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                        self.depCity = dict["dep_city"] as! String
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                        self.flightNo = dict["flight_no"] as! String
                    }
                }
            }
            public class Insured : Tea.TeaModel {
                public var birthday: String?

                public var btripUserId: String?

                public var certName: String?

                public var certNo: String?

                public var certType: String?

                public var gender: String?

                public var phone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.birthday != nil {
                        map["birthday"] = self.birthday!
                    }
                    if self.btripUserId != nil {
                        map["btrip_user_id"] = self.btripUserId!
                    }
                    if self.certName != nil {
                        map["cert_name"] = self.certName!
                    }
                    if self.certNo != nil {
                        map["cert_no"] = self.certNo!
                    }
                    if self.certType != nil {
                        map["cert_type"] = self.certType!
                    }
                    if self.gender != nil {
                        map["gender"] = self.gender!
                    }
                    if self.phone != nil {
                        map["phone"] = self.phone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("birthday") && dict["birthday"] != nil {
                        self.birthday = dict["birthday"] as! String
                    }
                    if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
                        self.btripUserId = dict["btrip_user_id"] as! String
                    }
                    if dict.keys.contains("cert_name") && dict["cert_name"] != nil {
                        self.certName = dict["cert_name"] as! String
                    }
                    if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                        self.certNo = dict["cert_no"] as! String
                    }
                    if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                        self.certType = dict["cert_type"] as! String
                    }
                    if dict.keys.contains("gender") && dict["gender"] != nil {
                        self.gender = dict["gender"] as! String
                    }
                    if dict.keys.contains("phone") && dict["phone"] != nil {
                        self.phone = dict["phone"] as! String
                    }
                }
            }
            public var effectiveEndTime: String?

            public var effectiveStartTime: String?

            public var insureSegment: InsureOrderDetailResponseBody.Module.InsureOrderDetailList.InsureSegment?

            public var insureTime: String?

            public var insured: InsureOrderDetailResponseBody.Module.InsureOrderDetailList.Insured?

            public var outSubInsOrderId: String?

            public var policyNo: String?

            public var price: Int64?

            public var productName: String?

            public var productNo: String?

            public var status: String?

            public var subInsOrderId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.insureSegment?.validate()
                try self.insured?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.effectiveEndTime != nil {
                    map["effective_end_time"] = self.effectiveEndTime!
                }
                if self.effectiveStartTime != nil {
                    map["effective_start_time"] = self.effectiveStartTime!
                }
                if self.insureSegment != nil {
                    map["insure_segment"] = self.insureSegment?.toMap()
                }
                if self.insureTime != nil {
                    map["insure_time"] = self.insureTime!
                }
                if self.insured != nil {
                    map["insured"] = self.insured?.toMap()
                }
                if self.outSubInsOrderId != nil {
                    map["out_sub_ins_order_id"] = self.outSubInsOrderId!
                }
                if self.policyNo != nil {
                    map["policy_no"] = self.policyNo!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.productName != nil {
                    map["product_name"] = self.productName!
                }
                if self.productNo != nil {
                    map["product_no"] = self.productNo!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subInsOrderId != nil {
                    map["sub_ins_order_id"] = self.subInsOrderId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("effective_end_time") && dict["effective_end_time"] != nil {
                    self.effectiveEndTime = dict["effective_end_time"] as! String
                }
                if dict.keys.contains("effective_start_time") && dict["effective_start_time"] != nil {
                    self.effectiveStartTime = dict["effective_start_time"] as! String
                }
                if dict.keys.contains("insure_segment") && dict["insure_segment"] != nil {
                    var model = InsureOrderDetailResponseBody.Module.InsureOrderDetailList.InsureSegment()
                    model.fromMap(dict["insure_segment"] as! [String: Any])
                    self.insureSegment = model
                }
                if dict.keys.contains("insure_time") && dict["insure_time"] != nil {
                    self.insureTime = dict["insure_time"] as! String
                }
                if dict.keys.contains("insured") && dict["insured"] != nil {
                    var model = InsureOrderDetailResponseBody.Module.InsureOrderDetailList.Insured()
                    model.fromMap(dict["insured"] as! [String: Any])
                    self.insured = model
                }
                if dict.keys.contains("out_sub_ins_order_id") && dict["out_sub_ins_order_id"] != nil {
                    self.outSubInsOrderId = dict["out_sub_ins_order_id"] as! String
                }
                if dict.keys.contains("policy_no") && dict["policy_no"] != nil {
                    self.policyNo = dict["policy_no"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("product_name") && dict["product_name"] != nil {
                    self.productName = dict["product_name"] as! String
                }
                if dict.keys.contains("product_no") && dict["product_no"] != nil {
                    self.productNo = dict["product_no"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
                if dict.keys.contains("sub_ins_order_id") && dict["sub_ins_order_id"] != nil {
                    self.subInsOrderId = dict["sub_ins_order_id"] as! String
                }
            }
        }
        public var applicant: InsureOrderDetailResponseBody.Module.Applicant?

        public var insOrderId: String?

        public var insureOrderDetailList: [InsureOrderDetailResponseBody.Module.InsureOrderDetailList]?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.applicant?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicant != nil {
                map["applicant"] = self.applicant?.toMap()
            }
            if self.insOrderId != nil {
                map["ins_order_id"] = self.insOrderId!
            }
            if self.insureOrderDetailList != nil {
                var tmp : [Any] = []
                for k in self.insureOrderDetailList! {
                    tmp.append(k.toMap())
                }
                map["insure_order_detail_list"] = tmp
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("applicant") && dict["applicant"] != nil {
                var model = InsureOrderDetailResponseBody.Module.Applicant()
                model.fromMap(dict["applicant"] as! [String: Any])
                self.applicant = model
            }
            if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                self.insOrderId = dict["ins_order_id"] as! String
            }
            if dict.keys.contains("insure_order_detail_list") && dict["insure_order_detail_list"] != nil {
                var tmp : [InsureOrderDetailResponseBody.Module.InsureOrderDetailList] = []
                for v in dict["insure_order_detail_list"] as! [Any] {
                    var model = InsureOrderDetailResponseBody.Module.InsureOrderDetailList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.insureOrderDetailList = tmp
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InsureOrderDetailResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InsureOrderDetailResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderPayHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderPayRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var isvName: String?

    public var outOrderId: String?

    public var outSubOrderId: String?

    public var paymentAmount: Int64?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outOrderId != nil {
            map["out_order_id"] = self.outOrderId!
        }
        if self.outSubOrderId != nil {
            map["out_sub_order_id"] = self.outSubOrderId!
        }
        if self.paymentAmount != nil {
            map["payment_amount"] = self.paymentAmount!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_order_id") && dict["out_order_id"] != nil {
            self.outOrderId = dict["out_order_id"] as! String
        }
        if dict.keys.contains("out_sub_order_id") && dict["out_sub_order_id"] != nil {
            self.outSubOrderId = dict["out_sub_order_id"] as! String
        }
        if dict.keys.contains("payment_amount") && dict["payment_amount"] != nil {
            self.paymentAmount = dict["payment_amount"] as! Int64
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderPayResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderPayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderPayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderPayResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderRefundHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderRefundRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var isvName: String?

    public var outApplyId: String?

    public var policyNoList: [String]?

    public var subInsOrderIds: [String]?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outApplyId != nil {
            map["out_apply_id"] = self.outApplyId!
        }
        if self.policyNoList != nil {
            map["policy_no_list"] = self.policyNoList!
        }
        if self.subInsOrderIds != nil {
            map["sub_ins_order_ids"] = self.subInsOrderIds!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
            self.outApplyId = dict["out_apply_id"] as! String
        }
        if dict.keys.contains("policy_no_list") && dict["policy_no_list"] != nil {
            self.policyNoList = dict["policy_no_list"] as! [String]
        }
        if dict.keys.contains("sub_ins_order_ids") && dict["sub_ins_order_ids"] != nil {
            self.subInsOrderIds = dict["sub_ins_order_ids"] as! [String]
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderRefundShrinkRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var isvName: String?

    public var outApplyId: String?

    public var policyNoListShrink: String?

    public var subInsOrderIdsShrink: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outApplyId != nil {
            map["out_apply_id"] = self.outApplyId!
        }
        if self.policyNoListShrink != nil {
            map["policy_no_list"] = self.policyNoListShrink!
        }
        if self.subInsOrderIdsShrink != nil {
            map["sub_ins_order_ids"] = self.subInsOrderIdsShrink!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
            self.outApplyId = dict["out_apply_id"] as! String
        }
        if dict.keys.contains("policy_no_list") && dict["policy_no_list"] != nil {
            self.policyNoListShrink = dict["policy_no_list"] as! String
        }
        if dict.keys.contains("sub_ins_order_ids") && dict["sub_ins_order_ids"] != nil {
            self.subInsOrderIdsShrink = dict["sub_ins_order_ids"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureOrderRefundResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class InsRefundList : Tea.TeaModel {
            public var policyRefundNo: String?

            public var refundStatus: String?

            public var subInsOrderId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.policyRefundNo != nil {
                    map["policy_refund_no"] = self.policyRefundNo!
                }
                if self.refundStatus != nil {
                    map["refund_status"] = self.refundStatus!
                }
                if self.subInsOrderId != nil {
                    map["sub_ins_order_id"] = self.subInsOrderId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("policy_refund_no") && dict["policy_refund_no"] != nil {
                    self.policyRefundNo = dict["policy_refund_no"] as! String
                }
                if dict.keys.contains("refund_status") && dict["refund_status"] != nil {
                    self.refundStatus = dict["refund_status"] as! String
                }
                if dict.keys.contains("sub_ins_order_id") && dict["sub_ins_order_id"] != nil {
                    self.subInsOrderId = dict["sub_ins_order_id"] as! String
                }
            }
        }
        public var applyId: String?

        public var insOrderId: String?

        public var insRefundList: [InsureOrderRefundResponseBody.Module.InsRefundList]?

        public var outApplyId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.insOrderId != nil {
                map["ins_order_id"] = self.insOrderId!
            }
            if self.insRefundList != nil {
                var tmp : [Any] = []
                for k in self.insRefundList! {
                    tmp.append(k.toMap())
                }
                map["ins_refund_list"] = tmp
            }
            if self.outApplyId != nil {
                map["out_apply_id"] = self.outApplyId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! String
            }
            if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                self.insOrderId = dict["ins_order_id"] as! String
            }
            if dict.keys.contains("ins_refund_list") && dict["ins_refund_list"] != nil {
                var tmp : [InsureOrderRefundResponseBody.Module.InsRefundList] = []
                for v in dict["ins_refund_list"] as! [Any] {
                    var model = InsureOrderRefundResponseBody.Module.InsRefundList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.insRefundList = tmp
            }
            if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
                self.outApplyId = dict["out_apply_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InsureOrderRefundResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InsureOrderRefundResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderRefundResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderRefundResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderRefundResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureOrderUrlDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureOrderUrlDetailResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureOrderUrlDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureOrderUrlDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureOrderUrlDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InsureRefundDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InsureRefundDetailRequest : Tea.TeaModel {
    public var applyId: String?

    public var btripUserId: String?

    public var buyerName: String?

    public var insOrderId: String?

    public var isvName: String?

    public var outApplyId: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.insOrderId != nil {
            map["ins_order_id"] = self.insOrderId!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.outApplyId != nil {
            map["out_apply_id"] = self.outApplyId!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! String
        }
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
            self.insOrderId = dict["ins_order_id"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
            self.outApplyId = dict["out_apply_id"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class InsureRefundDetailResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class InsureOrder : Tea.TeaModel {
            public class Applicant : Tea.TeaModel {
                public var certName: String?

                public var certNo: String?

                public var certType: String?

                public var phone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.certName != nil {
                        map["cert_name"] = self.certName!
                    }
                    if self.certNo != nil {
                        map["cert_no"] = self.certNo!
                    }
                    if self.certType != nil {
                        map["cert_type"] = self.certType!
                    }
                    if self.phone != nil {
                        map["phone"] = self.phone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cert_name") && dict["cert_name"] != nil {
                        self.certName = dict["cert_name"] as! String
                    }
                    if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                        self.certNo = dict["cert_no"] as! String
                    }
                    if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                        self.certType = dict["cert_type"] as! String
                    }
                    if dict.keys.contains("phone") && dict["phone"] != nil {
                        self.phone = dict["phone"] as! String
                    }
                }
            }
            public var applicant: InsureRefundDetailResponseBody.Module.InsureOrder.Applicant?

            public var bizOrderId: String?

            public var bizType: Int32?

            public var closeTime: String?

            public var insOrderId: String?

            public var outInsOrderId: String?

            public var payTime: String?

            public var price: Int64?

            public var settleType: Int32?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.applicant?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicant != nil {
                    map["applicant"] = self.applicant?.toMap()
                }
                if self.bizOrderId != nil {
                    map["biz_order_id"] = self.bizOrderId!
                }
                if self.bizType != nil {
                    map["biz_type"] = self.bizType!
                }
                if self.closeTime != nil {
                    map["close_time"] = self.closeTime!
                }
                if self.insOrderId != nil {
                    map["ins_order_id"] = self.insOrderId!
                }
                if self.outInsOrderId != nil {
                    map["out_ins_order_id"] = self.outInsOrderId!
                }
                if self.payTime != nil {
                    map["pay_time"] = self.payTime!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.settleType != nil {
                    map["settle_type"] = self.settleType!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("applicant") && dict["applicant"] != nil {
                    var model = InsureRefundDetailResponseBody.Module.InsureOrder.Applicant()
                    model.fromMap(dict["applicant"] as! [String: Any])
                    self.applicant = model
                }
                if dict.keys.contains("biz_order_id") && dict["biz_order_id"] != nil {
                    self.bizOrderId = dict["biz_order_id"] as! String
                }
                if dict.keys.contains("biz_type") && dict["biz_type"] != nil {
                    self.bizType = dict["biz_type"] as! Int32
                }
                if dict.keys.contains("close_time") && dict["close_time"] != nil {
                    self.closeTime = dict["close_time"] as! String
                }
                if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                    self.insOrderId = dict["ins_order_id"] as! String
                }
                if dict.keys.contains("out_ins_order_id") && dict["out_ins_order_id"] != nil {
                    self.outInsOrderId = dict["out_ins_order_id"] as! String
                }
                if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                    self.payTime = dict["pay_time"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("settle_type") && dict["settle_type"] != nil {
                    self.settleType = dict["settle_type"] as! Int32
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
            }
        }
        public class SubOrderRefundList : Tea.TeaModel {
            public class InsureSegment : Tea.TeaModel {
                public var arrAirportCode: String?

                public var arrCity: String?

                public var arrCityCode: String?

                public var arrTime: String?

                public var depAirportCode: String?

                public var depCity: String?

                public var depCityCode: String?

                public var depTime: String?

                public var flightNo: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrAirportCode != nil {
                        map["arr_airport_code"] = self.arrAirportCode!
                    }
                    if self.arrCity != nil {
                        map["arr_city"] = self.arrCity!
                    }
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.depAirportCode != nil {
                        map["dep_airport_code"] = self.depAirportCode!
                    }
                    if self.depCity != nil {
                        map["dep_city"] = self.depCity!
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.flightNo != nil {
                        map["flight_no"] = self.flightNo!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                        self.arrAirportCode = dict["arr_airport_code"] as! String
                    }
                    if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                        self.arrCity = dict["arr_city"] as! String
                    }
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                        self.depAirportCode = dict["dep_airport_code"] as! String
                    }
                    if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                        self.depCity = dict["dep_city"] as! String
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                        self.flightNo = dict["flight_no"] as! String
                    }
                }
            }
            public class Insured : Tea.TeaModel {
                public var birthday: String?

                public var btripUserId: String?

                public var certName: String?

                public var certNo: String?

                public var certType: String?

                public var gender: String?

                public var phone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.birthday != nil {
                        map["birthday"] = self.birthday!
                    }
                    if self.btripUserId != nil {
                        map["btrip_user_id"] = self.btripUserId!
                    }
                    if self.certName != nil {
                        map["cert_name"] = self.certName!
                    }
                    if self.certNo != nil {
                        map["cert_no"] = self.certNo!
                    }
                    if self.certType != nil {
                        map["cert_type"] = self.certType!
                    }
                    if self.gender != nil {
                        map["gender"] = self.gender!
                    }
                    if self.phone != nil {
                        map["phone"] = self.phone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("birthday") && dict["birthday"] != nil {
                        self.birthday = dict["birthday"] as! String
                    }
                    if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
                        self.btripUserId = dict["btrip_user_id"] as! String
                    }
                    if dict.keys.contains("cert_name") && dict["cert_name"] != nil {
                        self.certName = dict["cert_name"] as! String
                    }
                    if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                        self.certNo = dict["cert_no"] as! String
                    }
                    if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                        self.certType = dict["cert_type"] as! String
                    }
                    if dict.keys.contains("gender") && dict["gender"] != nil {
                        self.gender = dict["gender"] as! String
                    }
                    if dict.keys.contains("phone") && dict["phone"] != nil {
                        self.phone = dict["phone"] as! String
                    }
                }
            }
            public var effectiveEndTime: String?

            public var effectiveStartTime: String?

            public var insureSegment: InsureRefundDetailResponseBody.Module.SubOrderRefundList.InsureSegment?

            public var insureTime: String?

            public var insured: InsureRefundDetailResponseBody.Module.SubOrderRefundList.Insured?

            public var outSubInsOrderId: String?

            public var policyNo: String?

            public var policyRefundNo: String?

            public var price: Int64?

            public var productName: String?

            public var productNo: String?

            public var refundStatus: String?

            public var refundTime: String?

            public var status: String?

            public var subInsOrderId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.insureSegment?.validate()
                try self.insured?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.effectiveEndTime != nil {
                    map["effective_end_time"] = self.effectiveEndTime!
                }
                if self.effectiveStartTime != nil {
                    map["effective_start_time"] = self.effectiveStartTime!
                }
                if self.insureSegment != nil {
                    map["insure_segment"] = self.insureSegment?.toMap()
                }
                if self.insureTime != nil {
                    map["insure_time"] = self.insureTime!
                }
                if self.insured != nil {
                    map["insured"] = self.insured?.toMap()
                }
                if self.outSubInsOrderId != nil {
                    map["out_sub_ins_order_id"] = self.outSubInsOrderId!
                }
                if self.policyNo != nil {
                    map["policy_no"] = self.policyNo!
                }
                if self.policyRefundNo != nil {
                    map["policy_refund_no"] = self.policyRefundNo!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.productName != nil {
                    map["product_name"] = self.productName!
                }
                if self.productNo != nil {
                    map["product_no"] = self.productNo!
                }
                if self.refundStatus != nil {
                    map["refund_status"] = self.refundStatus!
                }
                if self.refundTime != nil {
                    map["refund_time"] = self.refundTime!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.subInsOrderId != nil {
                    map["sub_ins_order_id"] = self.subInsOrderId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("effective_end_time") && dict["effective_end_time"] != nil {
                    self.effectiveEndTime = dict["effective_end_time"] as! String
                }
                if dict.keys.contains("effective_start_time") && dict["effective_start_time"] != nil {
                    self.effectiveStartTime = dict["effective_start_time"] as! String
                }
                if dict.keys.contains("insure_segment") && dict["insure_segment"] != nil {
                    var model = InsureRefundDetailResponseBody.Module.SubOrderRefundList.InsureSegment()
                    model.fromMap(dict["insure_segment"] as! [String: Any])
                    self.insureSegment = model
                }
                if dict.keys.contains("insure_time") && dict["insure_time"] != nil {
                    self.insureTime = dict["insure_time"] as! String
                }
                if dict.keys.contains("insured") && dict["insured"] != nil {
                    var model = InsureRefundDetailResponseBody.Module.SubOrderRefundList.Insured()
                    model.fromMap(dict["insured"] as! [String: Any])
                    self.insured = model
                }
                if dict.keys.contains("out_sub_ins_order_id") && dict["out_sub_ins_order_id"] != nil {
                    self.outSubInsOrderId = dict["out_sub_ins_order_id"] as! String
                }
                if dict.keys.contains("policy_no") && dict["policy_no"] != nil {
                    self.policyNo = dict["policy_no"] as! String
                }
                if dict.keys.contains("policy_refund_no") && dict["policy_refund_no"] != nil {
                    self.policyRefundNo = dict["policy_refund_no"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("product_name") && dict["product_name"] != nil {
                    self.productName = dict["product_name"] as! String
                }
                if dict.keys.contains("product_no") && dict["product_no"] != nil {
                    self.productNo = dict["product_no"] as! String
                }
                if dict.keys.contains("refund_status") && dict["refund_status"] != nil {
                    self.refundStatus = dict["refund_status"] as! String
                }
                if dict.keys.contains("refund_time") && dict["refund_time"] != nil {
                    self.refundTime = dict["refund_time"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! String
                }
                if dict.keys.contains("sub_ins_order_id") && dict["sub_ins_order_id"] != nil {
                    self.subInsOrderId = dict["sub_ins_order_id"] as! String
                }
            }
        }
        public var applyId: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var insOrderId: String?

        public var insureOrder: InsureRefundDetailResponseBody.Module.InsureOrder?

        public var outApplyId: String?

        public var subOrderRefundList: [InsureRefundDetailResponseBody.Module.SubOrderRefundList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.insureOrder?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.insOrderId != nil {
                map["ins_order_id"] = self.insOrderId!
            }
            if self.insureOrder != nil {
                map["insure_order"] = self.insureOrder?.toMap()
            }
            if self.outApplyId != nil {
                map["out_apply_id"] = self.outApplyId!
            }
            if self.subOrderRefundList != nil {
                var tmp : [Any] = []
                for k in self.subOrderRefundList! {
                    tmp.append(k.toMap())
                }
                map["sub_order_refund_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("ins_order_id") && dict["ins_order_id"] != nil {
                self.insOrderId = dict["ins_order_id"] as! String
            }
            if dict.keys.contains("insure_order") && dict["insure_order"] != nil {
                var model = InsureRefundDetailResponseBody.Module.InsureOrder()
                model.fromMap(dict["insure_order"] as! [String: Any])
                self.insureOrder = model
            }
            if dict.keys.contains("out_apply_id") && dict["out_apply_id"] != nil {
                self.outApplyId = dict["out_apply_id"] as! String
            }
            if dict.keys.contains("sub_order_refund_list") && dict["sub_order_refund_list"] != nil {
                var tmp : [InsureRefundDetailResponseBody.Module.SubOrderRefundList] = []
                for v in dict["sub_order_refund_list"] as! [Any] {
                    var model = InsureRefundDetailResponseBody.Module.SubOrderRefundList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.subOrderRefundList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InsureRefundDetailResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InsureRefundDetailResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InsureRefundDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsureRefundDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InsureRefundDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IntlFlightListingSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class IntlFlightListingSearchRequest : Tea.TeaModel {
    public class SearchJourneys : Tea.TeaModel {
        public class SelectedFlights : Tea.TeaModel {
            public var arrAirportCode: String?

            public var arrCityCode: String?

            public var cabinType: Int32?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var flightTime: String?

            public var marketFlightNo: String?

            public var operateFlightNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.cabinType != nil {
                    map["cabin_type"] = self.cabinType!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.flightTime != nil {
                    map["flight_time"] = self.flightTime!
                }
                if self.marketFlightNo != nil {
                    map["market_flight_no"] = self.marketFlightNo!
                }
                if self.operateFlightNo != nil {
                    map["operate_flight_no"] = self.operateFlightNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("cabin_type") && dict["cabin_type"] != nil {
                    self.cabinType = dict["cabin_type"] as! Int32
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("flight_time") && dict["flight_time"] != nil {
                    self.flightTime = dict["flight_time"] as! String
                }
                if dict.keys.contains("market_flight_no") && dict["market_flight_no"] != nil {
                    self.marketFlightNo = dict["market_flight_no"] as! String
                }
                if dict.keys.contains("operate_flight_no") && dict["operate_flight_no"] != nil {
                    self.operateFlightNo = dict["operate_flight_no"] as! String
                }
            }
        }
        public var arrCityCode: String?

        public var depCityCode: String?

        public var depDate: String?

        public var selectedFlights: [IntlFlightListingSearchRequest.SearchJourneys.SelectedFlights]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.selectedFlights != nil {
                var tmp : [Any] = []
                for k in self.selectedFlights! {
                    tmp.append(k.toMap())
                }
                map["selected_flights"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("selected_flights") && dict["selected_flights"] != nil {
                var tmp : [IntlFlightListingSearchRequest.SearchJourneys.SelectedFlights] = []
                for v in dict["selected_flights"] as! [Any] {
                    var model = IntlFlightListingSearchRequest.SearchJourneys.SelectedFlights()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.selectedFlights = tmp
            }
        }
    }
    public class SearchPassengerList : Tea.TeaModel {
        public var certNo: String?

        public var certType: Int32?

        public var fullName: String?

        public var type: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certNo != nil {
                map["cert_no"] = self.certNo!
            }
            if self.certType != nil {
                map["cert_type"] = self.certType!
            }
            if self.fullName != nil {
                map["full_name"] = self.fullName!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                self.certNo = dict["cert_no"] as! String
            }
            if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                self.certType = dict["cert_type"] as! Int32
            }
            if dict.keys.contains("full_name") && dict["full_name"] != nil {
                self.fullName = dict["full_name"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! Int32
            }
        }
    }
    public var btripUserId: String?

    public var buyerName: String?

    public var cabinType: Int32?

    public var directOnly: Bool?

    public var isvName: String?

    public var needShareFlight: Bool?

    public var outWheelSearch: Bool?

    public var queryRecordId: String?

    public var searchJourneys: [IntlFlightListingSearchRequest.SearchJourneys]?

    public var searchMode: Int32?

    public var searchPassengerList: [IntlFlightListingSearchRequest.SearchPassengerList]?

    public var supplierCode: String?

    public var token: String?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.cabinType != nil {
            map["cabin_type"] = self.cabinType!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.outWheelSearch != nil {
            map["out_wheel_search"] = self.outWheelSearch!
        }
        if self.queryRecordId != nil {
            map["query_record_id"] = self.queryRecordId!
        }
        if self.searchJourneys != nil {
            var tmp : [Any] = []
            for k in self.searchJourneys! {
                tmp.append(k.toMap())
            }
            map["search_journeys"] = tmp
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.searchPassengerList != nil {
            var tmp : [Any] = []
            for k in self.searchPassengerList! {
                tmp.append(k.toMap())
            }
            map["search_passenger_list"] = tmp
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        if self.token != nil {
            map["token"] = self.token!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("cabin_type") && dict["cabin_type"] != nil {
            self.cabinType = dict["cabin_type"] as! Int32
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("out_wheel_search") && dict["out_wheel_search"] != nil {
            self.outWheelSearch = dict["out_wheel_search"] as! Bool
        }
        if dict.keys.contains("query_record_id") && dict["query_record_id"] != nil {
            self.queryRecordId = dict["query_record_id"] as! String
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            var tmp : [IntlFlightListingSearchRequest.SearchJourneys] = []
            for v in dict["search_journeys"] as! [Any] {
                var model = IntlFlightListingSearchRequest.SearchJourneys()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.searchJourneys = tmp
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("search_passenger_list") && dict["search_passenger_list"] != nil {
            var tmp : [IntlFlightListingSearchRequest.SearchPassengerList] = []
            for v in dict["search_passenger_list"] as! [Any] {
                var model = IntlFlightListingSearchRequest.SearchPassengerList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.searchPassengerList = tmp
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
        if dict.keys.contains("token") && dict["token"] != nil {
            self.token = dict["token"] as! String
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class IntlFlightListingSearchShrinkRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var cabinType: Int32?

    public var directOnly: Bool?

    public var isvName: String?

    public var needShareFlight: Bool?

    public var outWheelSearch: Bool?

    public var queryRecordId: String?

    public var searchJourneysShrink: String?

    public var searchMode: Int32?

    public var searchPassengerListShrink: String?

    public var supplierCode: String?

    public var token: String?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.cabinType != nil {
            map["cabin_type"] = self.cabinType!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.outWheelSearch != nil {
            map["out_wheel_search"] = self.outWheelSearch!
        }
        if self.queryRecordId != nil {
            map["query_record_id"] = self.queryRecordId!
        }
        if self.searchJourneysShrink != nil {
            map["search_journeys"] = self.searchJourneysShrink!
        }
        if self.searchMode != nil {
            map["search_mode"] = self.searchMode!
        }
        if self.searchPassengerListShrink != nil {
            map["search_passenger_list"] = self.searchPassengerListShrink!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        if self.token != nil {
            map["token"] = self.token!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("cabin_type") && dict["cabin_type"] != nil {
            self.cabinType = dict["cabin_type"] as! Int32
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("out_wheel_search") && dict["out_wheel_search"] != nil {
            self.outWheelSearch = dict["out_wheel_search"] as! Bool
        }
        if dict.keys.contains("query_record_id") && dict["query_record_id"] != nil {
            self.queryRecordId = dict["query_record_id"] as! String
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            self.searchJourneysShrink = dict["search_journeys"] as! String
        }
        if dict.keys.contains("search_mode") && dict["search_mode"] != nil {
            self.searchMode = dict["search_mode"] as! Int32
        }
        if dict.keys.contains("search_passenger_list") && dict["search_passenger_list"] != nil {
            self.searchPassengerListShrink = dict["search_passenger_list"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
        if dict.keys.contains("token") && dict["token"] != nil {
            self.token = dict["token"] as! String
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class IntlFlightListingSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightItemList : Tea.TeaModel {
            public class BestPriceItem : Tea.TeaModel {
                public var agreementPriceCodes: [String]?

                public var itemType: String?

                public var shoppingItemMap: [String: ModuleFlightItemListBestPriceItemShoppingItemMapValue]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agreementPriceCodes != nil {
                        map["agreement_price_codes"] = self.agreementPriceCodes!
                    }
                    if self.itemType != nil {
                        map["item_type"] = self.itemType!
                    }
                    if self.shoppingItemMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.shoppingItemMap! {
                            tmp[k] = v.toMap()
                        }
                        map["shopping_item_map"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("agreement_price_codes") && dict["agreement_price_codes"] != nil {
                        self.agreementPriceCodes = dict["agreement_price_codes"] as! [String]
                    }
                    if dict.keys.contains("item_type") && dict["item_type"] != nil {
                        self.itemType = dict["item_type"] as! String
                    }
                    if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                        var tmp : [String: ModuleFlightItemListBestPriceItemShoppingItemMapValue] = [:]
                        for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleFlightItemListBestPriceItemShoppingItemMapValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.shoppingItemMap = tmp
                    }
                }
            }
            public class FlightJourneyInfos : Tea.TeaModel {
                public class FlightSegmentInfos : Tea.TeaModel {
                    public class AirlineInfo : Tea.TeaModel {
                        public var airlineChineseName: String?

                        public var airlineChineseShortName: String?

                        public var airlineCode: String?

                        public var airlineIcon: String?

                        public var cheapFlight: Bool?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airlineChineseName != nil {
                                map["airline_chinese_name"] = self.airlineChineseName!
                            }
                            if self.airlineChineseShortName != nil {
                                map["airline_chinese_short_name"] = self.airlineChineseShortName!
                            }
                            if self.airlineCode != nil {
                                map["airline_code"] = self.airlineCode!
                            }
                            if self.airlineIcon != nil {
                                map["airline_icon"] = self.airlineIcon!
                            }
                            if self.cheapFlight != nil {
                                map["cheap_flight"] = self.cheapFlight!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                self.airlineChineseName = dict["airline_chinese_name"] as! String
                            }
                            if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                            }
                            if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                self.airlineCode = dict["airline_code"] as! String
                            }
                            if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                self.airlineIcon = dict["airline_icon"] as! String
                            }
                            if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                self.cheapFlight = dict["cheap_flight"] as! Bool
                            }
                        }
                    }
                    public class ArrAirportInfo : Tea.TeaModel {
                        public var airportCode: String?

                        public var airportName: String?

                        public var airportShortName: String?

                        public var terminal: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airportCode != nil {
                                map["airport_code"] = self.airportCode!
                            }
                            if self.airportName != nil {
                                map["airport_name"] = self.airportName!
                            }
                            if self.airportShortName != nil {
                                map["airport_short_name"] = self.airportShortName!
                            }
                            if self.terminal != nil {
                                map["terminal"] = self.terminal!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                                self.airportCode = dict["airport_code"] as! String
                            }
                            if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                                self.airportName = dict["airport_name"] as! String
                            }
                            if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                                self.airportShortName = dict["airport_short_name"] as! String
                            }
                            if dict.keys.contains("terminal") && dict["terminal"] != nil {
                                self.terminal = dict["terminal"] as! String
                            }
                        }
                    }
                    public class DepAirportInfo : Tea.TeaModel {
                        public var airportCode: String?

                        public var airportName: String?

                        public var airportShortName: String?

                        public var terminal: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airportCode != nil {
                                map["airport_code"] = self.airportCode!
                            }
                            if self.airportName != nil {
                                map["airport_name"] = self.airportName!
                            }
                            if self.airportShortName != nil {
                                map["airport_short_name"] = self.airportShortName!
                            }
                            if self.terminal != nil {
                                map["terminal"] = self.terminal!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                                self.airportCode = dict["airport_code"] as! String
                            }
                            if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                                self.airportName = dict["airport_name"] as! String
                            }
                            if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                                self.airportShortName = dict["airport_short_name"] as! String
                            }
                            if dict.keys.contains("terminal") && dict["terminal"] != nil {
                                self.terminal = dict["terminal"] as! String
                            }
                        }
                    }
                    public class FlightShareInfo : Tea.TeaModel {
                        public class OperatingAirlineInfo : Tea.TeaModel {
                            public var airlineChineseName: String?

                            public var airlineChineseShortName: String?

                            public var airlineCode: String?

                            public var airlineIcon: String?

                            public var cheapFlight: Bool?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.airlineChineseName != nil {
                                    map["airline_chinese_name"] = self.airlineChineseName!
                                }
                                if self.airlineChineseShortName != nil {
                                    map["airline_chinese_short_name"] = self.airlineChineseShortName!
                                }
                                if self.airlineCode != nil {
                                    map["airline_code"] = self.airlineCode!
                                }
                                if self.airlineIcon != nil {
                                    map["airline_icon"] = self.airlineIcon!
                                }
                                if self.cheapFlight != nil {
                                    map["cheap_flight"] = self.cheapFlight!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                    self.airlineChineseName = dict["airline_chinese_name"] as! String
                                }
                                if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                    self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                                }
                                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                    self.airlineCode = dict["airline_code"] as! String
                                }
                                if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                    self.airlineIcon = dict["airline_icon"] as! String
                                }
                                if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                    self.cheapFlight = dict["cheap_flight"] as! Bool
                                }
                            }
                        }
                        public var operatingAirlineInfo: IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo?

                        public var operatingFlightNo: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.operatingAirlineInfo?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.operatingAirlineInfo != nil {
                                map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                            }
                            if self.operatingFlightNo != nil {
                                map["operating_flight_no"] = self.operatingFlightNo!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                                var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo()
                                model.fromMap(dict["operating_airline_info"] as! [String: Any])
                                self.operatingAirlineInfo = model
                            }
                            if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                                self.operatingFlightNo = dict["operating_flight_no"] as! String
                            }
                        }
                    }
                    public class FlightStopInfo : Tea.TeaModel {
                        public var stopAirport: String?

                        public var stopAirportName: String?

                        public var stopArrTerm: String?

                        public var stopArrTime: String?

                        public var stopCityCode: String?

                        public var stopCityName: String?

                        public var stopCityNames: [String]?

                        public var stopDepTerm: String?

                        public var stopDepTime: String?

                        public var stopTime: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.stopAirport != nil {
                                map["stop_airport"] = self.stopAirport!
                            }
                            if self.stopAirportName != nil {
                                map["stop_airport_name"] = self.stopAirportName!
                            }
                            if self.stopArrTerm != nil {
                                map["stop_arr_term"] = self.stopArrTerm!
                            }
                            if self.stopArrTime != nil {
                                map["stop_arr_time"] = self.stopArrTime!
                            }
                            if self.stopCityCode != nil {
                                map["stop_city_code"] = self.stopCityCode!
                            }
                            if self.stopCityName != nil {
                                map["stop_city_name"] = self.stopCityName!
                            }
                            if self.stopCityNames != nil {
                                map["stop_city_names"] = self.stopCityNames!
                            }
                            if self.stopDepTerm != nil {
                                map["stop_dep_term"] = self.stopDepTerm!
                            }
                            if self.stopDepTime != nil {
                                map["stop_dep_time"] = self.stopDepTime!
                            }
                            if self.stopTime != nil {
                                map["stop_time"] = self.stopTime!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                                self.stopAirport = dict["stop_airport"] as! String
                            }
                            if dict.keys.contains("stop_airport_name") && dict["stop_airport_name"] != nil {
                                self.stopAirportName = dict["stop_airport_name"] as! String
                            }
                            if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                                self.stopArrTerm = dict["stop_arr_term"] as! String
                            }
                            if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                                self.stopArrTime = dict["stop_arr_time"] as! String
                            }
                            if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                                self.stopCityCode = dict["stop_city_code"] as! String
                            }
                            if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                                self.stopCityName = dict["stop_city_name"] as! String
                            }
                            if dict.keys.contains("stop_city_names") && dict["stop_city_names"] != nil {
                                self.stopCityNames = dict["stop_city_names"] as! [String]
                            }
                            if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                                self.stopDepTerm = dict["stop_dep_term"] as! String
                            }
                            if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                                self.stopDepTime = dict["stop_dep_time"] as! String
                            }
                            if dict.keys.contains("stop_time") && dict["stop_time"] != nil {
                                self.stopTime = dict["stop_time"] as! String
                            }
                        }
                    }
                    public var airlineInfo: IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo?

                    public var arrAirportInfo: IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo?

                    public var arrCityCode: String?

                    public var arrCityName: String?

                    public var arrTime: String?

                    public var baggageDesc: String?

                    public var depAirportInfo: IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo?

                    public var depCityCode: String?

                    public var depCityName: String?

                    public var depTime: String?

                    public var duration: Int32?

                    public var flightNo: String?

                    public var flightShareInfo: IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo?

                    public var flightSize: String?

                    public var flightStopInfo: IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo?

                    public var flightType: String?

                    public var manufacturer: String?

                    public var mealDesc: String?

                    public var miles: Int32?

                    public var onTimeRate: String?

                    public var oneMore: Int32?

                    public var oneMoreShow: String?

                    public var segmentIndex: Int32?

                    public var segmentKey: String?

                    public var share: Bool?

                    public var shortFlightSize: String?

                    public var stop: Bool?

                    public var totalTime: String?

                    public var transferTime: String?

                    public var transferTimeNumber: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.airlineInfo?.validate()
                        try self.arrAirportInfo?.validate()
                        try self.depAirportInfo?.validate()
                        try self.flightShareInfo?.validate()
                        try self.flightStopInfo?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineInfo != nil {
                            map["airline_info"] = self.airlineInfo?.toMap()
                        }
                        if self.arrAirportInfo != nil {
                            map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                        }
                        if self.arrCityCode != nil {
                            map["arr_city_code"] = self.arrCityCode!
                        }
                        if self.arrCityName != nil {
                            map["arr_city_name"] = self.arrCityName!
                        }
                        if self.arrTime != nil {
                            map["arr_time"] = self.arrTime!
                        }
                        if self.baggageDesc != nil {
                            map["baggage_desc"] = self.baggageDesc!
                        }
                        if self.depAirportInfo != nil {
                            map["dep_airport_info"] = self.depAirportInfo?.toMap()
                        }
                        if self.depCityCode != nil {
                            map["dep_city_code"] = self.depCityCode!
                        }
                        if self.depCityName != nil {
                            map["dep_city_name"] = self.depCityName!
                        }
                        if self.depTime != nil {
                            map["dep_time"] = self.depTime!
                        }
                        if self.duration != nil {
                            map["duration"] = self.duration!
                        }
                        if self.flightNo != nil {
                            map["flight_no"] = self.flightNo!
                        }
                        if self.flightShareInfo != nil {
                            map["flight_share_info"] = self.flightShareInfo?.toMap()
                        }
                        if self.flightSize != nil {
                            map["flight_size"] = self.flightSize!
                        }
                        if self.flightStopInfo != nil {
                            map["flight_stop_info"] = self.flightStopInfo?.toMap()
                        }
                        if self.flightType != nil {
                            map["flight_type"] = self.flightType!
                        }
                        if self.manufacturer != nil {
                            map["manufacturer"] = self.manufacturer!
                        }
                        if self.mealDesc != nil {
                            map["meal_desc"] = self.mealDesc!
                        }
                        if self.miles != nil {
                            map["miles"] = self.miles!
                        }
                        if self.onTimeRate != nil {
                            map["on_time_rate"] = self.onTimeRate!
                        }
                        if self.oneMore != nil {
                            map["one_more"] = self.oneMore!
                        }
                        if self.oneMoreShow != nil {
                            map["one_more_show"] = self.oneMoreShow!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        if self.segmentKey != nil {
                            map["segment_key"] = self.segmentKey!
                        }
                        if self.share != nil {
                            map["share"] = self.share!
                        }
                        if self.shortFlightSize != nil {
                            map["short_flight_size"] = self.shortFlightSize!
                        }
                        if self.stop != nil {
                            map["stop"] = self.stop!
                        }
                        if self.totalTime != nil {
                            map["total_time"] = self.totalTime!
                        }
                        if self.transferTime != nil {
                            map["transfer_time"] = self.transferTime!
                        }
                        if self.transferTimeNumber != nil {
                            map["transfer_time_number"] = self.transferTimeNumber!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                            var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo()
                            model.fromMap(dict["airline_info"] as! [String: Any])
                            self.airlineInfo = model
                        }
                        if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                            var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo()
                            model.fromMap(dict["arr_airport_info"] as! [String: Any])
                            self.arrAirportInfo = model
                        }
                        if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                            self.arrCityCode = dict["arr_city_code"] as! String
                        }
                        if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                            self.arrCityName = dict["arr_city_name"] as! String
                        }
                        if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                            self.arrTime = dict["arr_time"] as! String
                        }
                        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                            self.baggageDesc = dict["baggage_desc"] as! String
                        }
                        if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                            var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo()
                            model.fromMap(dict["dep_airport_info"] as! [String: Any])
                            self.depAirportInfo = model
                        }
                        if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                            self.depCityCode = dict["dep_city_code"] as! String
                        }
                        if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                            self.depCityName = dict["dep_city_name"] as! String
                        }
                        if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                            self.depTime = dict["dep_time"] as! String
                        }
                        if dict.keys.contains("duration") && dict["duration"] != nil {
                            self.duration = dict["duration"] as! Int32
                        }
                        if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                            self.flightNo = dict["flight_no"] as! String
                        }
                        if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                            var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo()
                            model.fromMap(dict["flight_share_info"] as! [String: Any])
                            self.flightShareInfo = model
                        }
                        if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                            self.flightSize = dict["flight_size"] as! String
                        }
                        if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                            var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo()
                            model.fromMap(dict["flight_stop_info"] as! [String: Any])
                            self.flightStopInfo = model
                        }
                        if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                            self.flightType = dict["flight_type"] as! String
                        }
                        if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                            self.manufacturer = dict["manufacturer"] as! String
                        }
                        if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                            self.mealDesc = dict["meal_desc"] as! String
                        }
                        if dict.keys.contains("miles") && dict["miles"] != nil {
                            self.miles = dict["miles"] as! Int32
                        }
                        if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                            self.onTimeRate = dict["on_time_rate"] as! String
                        }
                        if dict.keys.contains("one_more") && dict["one_more"] != nil {
                            self.oneMore = dict["one_more"] as! Int32
                        }
                        if dict.keys.contains("one_more_show") && dict["one_more_show"] != nil {
                            self.oneMoreShow = dict["one_more_show"] as! String
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                        if dict.keys.contains("segment_key") && dict["segment_key"] != nil {
                            self.segmentKey = dict["segment_key"] as! String
                        }
                        if dict.keys.contains("share") && dict["share"] != nil {
                            self.share = dict["share"] as! Bool
                        }
                        if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                            self.shortFlightSize = dict["short_flight_size"] as! String
                        }
                        if dict.keys.contains("stop") && dict["stop"] != nil {
                            self.stop = dict["stop"] as! Bool
                        }
                        if dict.keys.contains("total_time") && dict["total_time"] != nil {
                            self.totalTime = dict["total_time"] as! String
                        }
                        if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                            self.transferTime = dict["transfer_time"] as! String
                        }
                        if dict.keys.contains("transfer_time_number") && dict["transfer_time_number"] != nil {
                            self.transferTimeNumber = dict["transfer_time_number"] as! Int32
                        }
                    }
                }
                public var arrCityCode: String?

                public var arrCityName: String?

                public var arrTime: String?

                public var depCityCode: String?

                public var depCityName: String?

                public var depTime: String?

                public var duration: Int32?

                public var flightSegmentInfos: [IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos]?

                public var journeyIndex: Int32?

                public var transferTime: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrCityName != nil {
                        map["arr_city_name"] = self.arrCityName!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depCityName != nil {
                        map["dep_city_name"] = self.depCityName!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.duration != nil {
                        map["duration"] = self.duration!
                    }
                    if self.flightSegmentInfos != nil {
                        var tmp : [Any] = []
                        for k in self.flightSegmentInfos! {
                            tmp.append(k.toMap())
                        }
                        map["flight_segment_infos"] = tmp
                    }
                    if self.journeyIndex != nil {
                        map["journey_index"] = self.journeyIndex!
                    }
                    if self.transferTime != nil {
                        map["transfer_time"] = self.transferTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                        self.arrCityName = dict["arr_city_name"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                        self.depCityName = dict["dep_city_name"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("duration") && dict["duration"] != nil {
                        self.duration = dict["duration"] as! Int32
                    }
                    if dict.keys.contains("flight_segment_infos") && dict["flight_segment_infos"] != nil {
                        var tmp : [IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos] = []
                        for v in dict["flight_segment_infos"] as! [Any] {
                            var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos.FlightSegmentInfos()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.flightSegmentInfos = tmp
                    }
                    if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                        self.journeyIndex = dict["journey_index"] as! Int32
                    }
                    if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                        self.transferTime = dict["transfer_time"] as! Int32
                    }
                }
            }
            public var bestPriceItem: IntlFlightListingSearchResponseBody.Module.FlightItemList.BestPriceItem?

            public var flightJourneyInfos: [IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.bestPriceItem?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bestPriceItem != nil {
                    map["best_price_item"] = self.bestPriceItem?.toMap()
                }
                if self.flightJourneyInfos != nil {
                    var tmp : [Any] = []
                    for k in self.flightJourneyInfos! {
                        tmp.append(k.toMap())
                    }
                    map["flight_journey_infos"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("best_price_item") && dict["best_price_item"] != nil {
                    var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.BestPriceItem()
                    model.fromMap(dict["best_price_item"] as! [String: Any])
                    self.bestPriceItem = model
                }
                if dict.keys.contains("flight_journey_infos") && dict["flight_journey_infos"] != nil {
                    var tmp : [IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos] = []
                    for v in dict["flight_journey_infos"] as! [Any] {
                        var model = IntlFlightListingSearchResponseBody.Module.FlightItemList.FlightJourneyInfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightJourneyInfos = tmp
                }
            }
        }
        public var flightItemList: [IntlFlightListingSearchResponseBody.Module.FlightItemList]?

        public var needContinue: Bool?

        public var queryRecordId: String?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightItemList != nil {
                var tmp : [Any] = []
                for k in self.flightItemList! {
                    tmp.append(k.toMap())
                }
                map["flight_item_list"] = tmp
            }
            if self.needContinue != nil {
                map["need_continue"] = self.needContinue!
            }
            if self.queryRecordId != nil {
                map["query_record_id"] = self.queryRecordId!
            }
            if self.token != nil {
                map["token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_item_list") && dict["flight_item_list"] != nil {
                var tmp : [IntlFlightListingSearchResponseBody.Module.FlightItemList] = []
                for v in dict["flight_item_list"] as! [Any] {
                    var model = IntlFlightListingSearchResponseBody.Module.FlightItemList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightItemList = tmp
            }
            if dict.keys.contains("need_continue") && dict["need_continue"] != nil {
                self.needContinue = dict["need_continue"] as! Bool
            }
            if dict.keys.contains("query_record_id") && dict["query_record_id"] != nil {
                self.queryRecordId = dict["query_record_id"] as! String
            }
            if dict.keys.contains("token") && dict["token"] != nil {
                self.token = dict["token"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: IntlFlightListingSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = IntlFlightListingSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IntlFlightListingSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IntlFlightListingSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IntlFlightListingSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IntlFlightOtaItemDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class IntlFlightOtaItemDetailRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var isvName: String?

    public var supplierCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
    }
}

public class IntlFlightOtaItemDetailResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightJourneyInfos : Tea.TeaModel {
            public class FlightSegmentInfos : Tea.TeaModel {
                public class AirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public class ArrAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var airportShortName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.airportShortName != nil {
                            map["airport_short_name"] = self.airportShortName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                            self.airportShortName = dict["airport_short_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class DepAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var airportShortName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.airportShortName != nil {
                            map["airport_short_name"] = self.airportShortName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                            self.airportShortName = dict["airport_short_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class FlightShareInfo : Tea.TeaModel {
                    public class OperatingAirlineInfo : Tea.TeaModel {
                        public var airlineChineseName: String?

                        public var airlineChineseShortName: String?

                        public var airlineCode: String?

                        public var airlineIcon: String?

                        public var cheapFlight: Bool?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airlineChineseName != nil {
                                map["airline_chinese_name"] = self.airlineChineseName!
                            }
                            if self.airlineChineseShortName != nil {
                                map["airline_chinese_short_name"] = self.airlineChineseShortName!
                            }
                            if self.airlineCode != nil {
                                map["airline_code"] = self.airlineCode!
                            }
                            if self.airlineIcon != nil {
                                map["airline_icon"] = self.airlineIcon!
                            }
                            if self.cheapFlight != nil {
                                map["cheap_flight"] = self.cheapFlight!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                self.airlineChineseName = dict["airline_chinese_name"] as! String
                            }
                            if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                            }
                            if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                self.airlineCode = dict["airline_code"] as! String
                            }
                            if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                self.airlineIcon = dict["airline_icon"] as! String
                            }
                            if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                self.cheapFlight = dict["cheap_flight"] as! Bool
                            }
                        }
                    }
                    public var operatingAirlineInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo?

                    public var operatingFlightNo: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.operatingAirlineInfo?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.operatingAirlineInfo != nil {
                            map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                        }
                        if self.operatingFlightNo != nil {
                            map["operating_flight_no"] = self.operatingFlightNo!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                            var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo()
                            model.fromMap(dict["operating_airline_info"] as! [String: Any])
                            self.operatingAirlineInfo = model
                        }
                        if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                            self.operatingFlightNo = dict["operating_flight_no"] as! String
                        }
                    }
                }
                public class FlightStopInfo : Tea.TeaModel {
                    public var stopAirport: String?

                    public var stopAirportName: String?

                    public var stopArrTerm: String?

                    public var stopArrTime: String?

                    public var stopCityCode: String?

                    public var stopCityName: String?

                    public var stopCityNames: [String]?

                    public var stopDepTerm: String?

                    public var stopDepTime: String?

                    public var stopTime: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.stopAirport != nil {
                            map["stop_airport"] = self.stopAirport!
                        }
                        if self.stopAirportName != nil {
                            map["stop_airport_name"] = self.stopAirportName!
                        }
                        if self.stopArrTerm != nil {
                            map["stop_arr_term"] = self.stopArrTerm!
                        }
                        if self.stopArrTime != nil {
                            map["stop_arr_time"] = self.stopArrTime!
                        }
                        if self.stopCityCode != nil {
                            map["stop_city_code"] = self.stopCityCode!
                        }
                        if self.stopCityName != nil {
                            map["stop_city_name"] = self.stopCityName!
                        }
                        if self.stopCityNames != nil {
                            map["stop_city_names"] = self.stopCityNames!
                        }
                        if self.stopDepTerm != nil {
                            map["stop_dep_term"] = self.stopDepTerm!
                        }
                        if self.stopDepTime != nil {
                            map["stop_dep_time"] = self.stopDepTime!
                        }
                        if self.stopTime != nil {
                            map["stop_time"] = self.stopTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                            self.stopAirport = dict["stop_airport"] as! String
                        }
                        if dict.keys.contains("stop_airport_name") && dict["stop_airport_name"] != nil {
                            self.stopAirportName = dict["stop_airport_name"] as! String
                        }
                        if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                            self.stopArrTerm = dict["stop_arr_term"] as! String
                        }
                        if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                            self.stopArrTime = dict["stop_arr_time"] as! String
                        }
                        if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                            self.stopCityCode = dict["stop_city_code"] as! String
                        }
                        if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                            self.stopCityName = dict["stop_city_name"] as! String
                        }
                        if dict.keys.contains("stop_city_names") && dict["stop_city_names"] != nil {
                            self.stopCityNames = dict["stop_city_names"] as! [String]
                        }
                        if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                            self.stopDepTerm = dict["stop_dep_term"] as! String
                        }
                        if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                            self.stopDepTime = dict["stop_dep_time"] as! String
                        }
                        if dict.keys.contains("stop_time") && dict["stop_time"] != nil {
                            self.stopTime = dict["stop_time"] as! String
                        }
                    }
                }
                public class LuggageDirectInfo : Tea.TeaModel {
                    public var depCityLuggageDirect: Int32?

                    public var stopCityLuggageDirect: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.depCityLuggageDirect != nil {
                            map["dep_city_luggage_direct"] = self.depCityLuggageDirect!
                        }
                        if self.stopCityLuggageDirect != nil {
                            map["stop_city_luggage_direct"] = self.stopCityLuggageDirect!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("dep_city_luggage_direct") && dict["dep_city_luggage_direct"] != nil {
                            self.depCityLuggageDirect = dict["dep_city_luggage_direct"] as! Int32
                        }
                        if dict.keys.contains("stop_city_luggage_direct") && dict["stop_city_luggage_direct"] != nil {
                            self.stopCityLuggageDirect = dict["stop_city_luggage_direct"] as! Int32
                        }
                    }
                }
                public class SegmentVisaRemark : Tea.TeaModel {
                    public var depCityVisaRemark: String?

                    public var depCityVisaType: Int32?

                    public var stopCityVisaRemarks: [String]?

                    public var stopCityVisaTypes: [Int32]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.depCityVisaRemark != nil {
                            map["dep_city_visa_remark"] = self.depCityVisaRemark!
                        }
                        if self.depCityVisaType != nil {
                            map["dep_city_visa_type"] = self.depCityVisaType!
                        }
                        if self.stopCityVisaRemarks != nil {
                            map["stop_city_visa_remarks"] = self.stopCityVisaRemarks!
                        }
                        if self.stopCityVisaTypes != nil {
                            map["stop_city_visa_types"] = self.stopCityVisaTypes!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("dep_city_visa_remark") && dict["dep_city_visa_remark"] != nil {
                            self.depCityVisaRemark = dict["dep_city_visa_remark"] as! String
                        }
                        if dict.keys.contains("dep_city_visa_type") && dict["dep_city_visa_type"] != nil {
                            self.depCityVisaType = dict["dep_city_visa_type"] as! Int32
                        }
                        if dict.keys.contains("stop_city_visa_remarks") && dict["stop_city_visa_remarks"] != nil {
                            self.stopCityVisaRemarks = dict["stop_city_visa_remarks"] as! [String]
                        }
                        if dict.keys.contains("stop_city_visa_types") && dict["stop_city_visa_types"] != nil {
                            self.stopCityVisaTypes = dict["stop_city_visa_types"] as! [Int32]
                        }
                    }
                }
                public var airlineInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo?

                public var arrAirportInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo?

                public var arrCityCode: String?

                public var arrCityName: String?

                public var arrTime: String?

                public var baggageDesc: String?

                public var depAirportInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo?

                public var depCityCode: String?

                public var depCityName: String?

                public var depTime: String?

                public var duration: Int32?

                public var flightNo: String?

                public var flightShareInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo?

                public var flightSize: String?

                public var flightStopInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo?

                public var flightType: String?

                public var luggageDirectInfo: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.LuggageDirectInfo?

                public var manufacturer: String?

                public var mealDesc: String?

                public var onTimeRate: String?

                public var oneMore: Int32?

                public var oneMoreShow: String?

                public var segmentIndex: Int32?

                public var segmentKey: String?

                public var segmentVisaRemark: IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.SegmentVisaRemark?

                public var share: Bool?

                public var shortFlightSize: String?

                public var stop: Bool?

                public var totalTime: String?

                public var transferTime: String?

                public var transferTimeNumber: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.airlineInfo?.validate()
                    try self.arrAirportInfo?.validate()
                    try self.depAirportInfo?.validate()
                    try self.flightShareInfo?.validate()
                    try self.flightStopInfo?.validate()
                    try self.luggageDirectInfo?.validate()
                    try self.segmentVisaRemark?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineInfo != nil {
                        map["airline_info"] = self.airlineInfo?.toMap()
                    }
                    if self.arrAirportInfo != nil {
                        map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                    }
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrCityName != nil {
                        map["arr_city_name"] = self.arrCityName!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.baggageDesc != nil {
                        map["baggage_desc"] = self.baggageDesc!
                    }
                    if self.depAirportInfo != nil {
                        map["dep_airport_info"] = self.depAirportInfo?.toMap()
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depCityName != nil {
                        map["dep_city_name"] = self.depCityName!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.duration != nil {
                        map["duration"] = self.duration!
                    }
                    if self.flightNo != nil {
                        map["flight_no"] = self.flightNo!
                    }
                    if self.flightShareInfo != nil {
                        map["flight_share_info"] = self.flightShareInfo?.toMap()
                    }
                    if self.flightSize != nil {
                        map["flight_size"] = self.flightSize!
                    }
                    if self.flightStopInfo != nil {
                        map["flight_stop_info"] = self.flightStopInfo?.toMap()
                    }
                    if self.flightType != nil {
                        map["flight_type"] = self.flightType!
                    }
                    if self.luggageDirectInfo != nil {
                        map["luggage_direct_info"] = self.luggageDirectInfo?.toMap()
                    }
                    if self.manufacturer != nil {
                        map["manufacturer"] = self.manufacturer!
                    }
                    if self.mealDesc != nil {
                        map["meal_desc"] = self.mealDesc!
                    }
                    if self.onTimeRate != nil {
                        map["on_time_rate"] = self.onTimeRate!
                    }
                    if self.oneMore != nil {
                        map["one_more"] = self.oneMore!
                    }
                    if self.oneMoreShow != nil {
                        map["one_more_show"] = self.oneMoreShow!
                    }
                    if self.segmentIndex != nil {
                        map["segment_index"] = self.segmentIndex!
                    }
                    if self.segmentKey != nil {
                        map["segment_key"] = self.segmentKey!
                    }
                    if self.segmentVisaRemark != nil {
                        map["segment_visa_remark"] = self.segmentVisaRemark?.toMap()
                    }
                    if self.share != nil {
                        map["share"] = self.share!
                    }
                    if self.shortFlightSize != nil {
                        map["short_flight_size"] = self.shortFlightSize!
                    }
                    if self.stop != nil {
                        map["stop"] = self.stop!
                    }
                    if self.totalTime != nil {
                        map["total_time"] = self.totalTime!
                    }
                    if self.transferTime != nil {
                        map["transfer_time"] = self.transferTime!
                    }
                    if self.transferTimeNumber != nil {
                        map["transfer_time_number"] = self.transferTimeNumber!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo()
                        model.fromMap(dict["airline_info"] as! [String: Any])
                        self.airlineInfo = model
                    }
                    if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo()
                        model.fromMap(dict["arr_airport_info"] as! [String: Any])
                        self.arrAirportInfo = model
                    }
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                        self.arrCityName = dict["arr_city_name"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                        self.baggageDesc = dict["baggage_desc"] as! String
                    }
                    if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo()
                        model.fromMap(dict["dep_airport_info"] as! [String: Any])
                        self.depAirportInfo = model
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                        self.depCityName = dict["dep_city_name"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("duration") && dict["duration"] != nil {
                        self.duration = dict["duration"] as! Int32
                    }
                    if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                        self.flightNo = dict["flight_no"] as! String
                    }
                    if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo()
                        model.fromMap(dict["flight_share_info"] as! [String: Any])
                        self.flightShareInfo = model
                    }
                    if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                        self.flightSize = dict["flight_size"] as! String
                    }
                    if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo()
                        model.fromMap(dict["flight_stop_info"] as! [String: Any])
                        self.flightStopInfo = model
                    }
                    if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                        self.flightType = dict["flight_type"] as! String
                    }
                    if dict.keys.contains("luggage_direct_info") && dict["luggage_direct_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.LuggageDirectInfo()
                        model.fromMap(dict["luggage_direct_info"] as! [String: Any])
                        self.luggageDirectInfo = model
                    }
                    if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                        self.manufacturer = dict["manufacturer"] as! String
                    }
                    if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                        self.mealDesc = dict["meal_desc"] as! String
                    }
                    if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                        self.onTimeRate = dict["on_time_rate"] as! String
                    }
                    if dict.keys.contains("one_more") && dict["one_more"] != nil {
                        self.oneMore = dict["one_more"] as! Int32
                    }
                    if dict.keys.contains("one_more_show") && dict["one_more_show"] != nil {
                        self.oneMoreShow = dict["one_more_show"] as! String
                    }
                    if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                        self.segmentIndex = dict["segment_index"] as! Int32
                    }
                    if dict.keys.contains("segment_key") && dict["segment_key"] != nil {
                        self.segmentKey = dict["segment_key"] as! String
                    }
                    if dict.keys.contains("segment_visa_remark") && dict["segment_visa_remark"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.SegmentVisaRemark()
                        model.fromMap(dict["segment_visa_remark"] as! [String: Any])
                        self.segmentVisaRemark = model
                    }
                    if dict.keys.contains("share") && dict["share"] != nil {
                        self.share = dict["share"] as! Bool
                    }
                    if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                        self.shortFlightSize = dict["short_flight_size"] as! String
                    }
                    if dict.keys.contains("stop") && dict["stop"] != nil {
                        self.stop = dict["stop"] as! Bool
                    }
                    if dict.keys.contains("total_time") && dict["total_time"] != nil {
                        self.totalTime = dict["total_time"] as! String
                    }
                    if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                        self.transferTime = dict["transfer_time"] as! String
                    }
                    if dict.keys.contains("transfer_time_number") && dict["transfer_time_number"] != nil {
                        self.transferTimeNumber = dict["transfer_time_number"] as! Int32
                    }
                }
            }
            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrTime: String?

            public var depCityCode: String?

            public var depCityName: String?

            public var depTime: String?

            public var duration: Int32?

            public var extensions: [String: String]?

            public var flightSegmentInfos: [IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos]?

            public var journeyIndex: Int32?

            public var transferTime: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.duration != nil {
                    map["duration"] = self.duration!
                }
                if self.extensions != nil {
                    map["extensions"] = self.extensions!
                }
                if self.flightSegmentInfos != nil {
                    var tmp : [Any] = []
                    for k in self.flightSegmentInfos! {
                        tmp.append(k.toMap())
                    }
                    map["flight_segment_infos"] = tmp
                }
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.transferTime != nil {
                    map["transfer_time"] = self.transferTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("duration") && dict["duration"] != nil {
                    self.duration = dict["duration"] as! Int32
                }
                if dict.keys.contains("extensions") && dict["extensions"] != nil {
                    self.extensions = dict["extensions"] as! [String: String]
                }
                if dict.keys.contains("flight_segment_infos") && dict["flight_segment_infos"] != nil {
                    var tmp : [IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos] = []
                    for v in dict["flight_segment_infos"] as! [Any] {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightSegmentInfos = tmp
                }
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                    self.transferTime = dict["transfer_time"] as! Int32
                }
            }
        }
        public class GroupItem : Tea.TeaModel {
            public class FlightRuleInfoList : Tea.TeaModel {
                public class FlightRuleInfo : Tea.TeaModel {
                    public var baggageDesc: String?

                    public var refundChangeRuleDesc: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageDesc != nil {
                            map["baggage_desc"] = self.baggageDesc!
                        }
                        if self.refundChangeRuleDesc != nil {
                            map["refund_change_rule_desc"] = self.refundChangeRuleDesc!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                            self.baggageDesc = dict["baggage_desc"] as! String
                        }
                        if dict.keys.contains("refund_change_rule_desc") && dict["refund_change_rule_desc"] != nil {
                            self.refundChangeRuleDesc = dict["refund_change_rule_desc"] as! String
                        }
                    }
                }
                public class SegmentPosition : Tea.TeaModel {
                    public var journeyIndex: Int32?

                    public var segmentIndex: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.journeyIndex != nil {
                            map["journey_index"] = self.journeyIndex!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                            self.journeyIndex = dict["journey_index"] as! Int32
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                    }
                }
                public var flightRuleInfo: IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList.FlightRuleInfo?

                public var segmentPosition: IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList.SegmentPosition?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.flightRuleInfo?.validate()
                    try self.segmentPosition?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.flightRuleInfo != nil {
                        map["flight_rule_info"] = self.flightRuleInfo?.toMap()
                    }
                    if self.segmentPosition != nil {
                        map["segment_position"] = self.segmentPosition?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("flight_rule_info") && dict["flight_rule_info"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList.FlightRuleInfo()
                        model.fromMap(dict["flight_rule_info"] as! [String: Any])
                        self.flightRuleInfo = model
                    }
                    if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList.SegmentPosition()
                        model.fromMap(dict["segment_position"] as! [String: Any])
                        self.segmentPosition = model
                    }
                }
            }
            public class SubItems : Tea.TeaModel {
                public class BaggageRule : Tea.TeaModel {
                    public var baggageDigest: String?

                    public var baggageInfoMap: [String: [ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue]]?

                    public var structuredBaggage: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageDigest != nil {
                            map["baggage_digest"] = self.baggageDigest!
                        }
                        if self.baggageInfoMap != nil {
                            var tmp : [String: Any] = [:]
                            for (k, v) in self.baggageInfoMap! {
                                var l1 : [Any] = []
                                for k1 in v {
                                    l1.append(k1.toMap())
                                }
                                tmp[k] = l1
                            }
                            map["baggage_info_map"] = tmp
                        }
                        if self.structuredBaggage != nil {
                            map["structured_baggage"] = self.structuredBaggage!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_digest") && dict["baggage_digest"] != nil {
                            self.baggageDigest = dict["baggage_digest"] as! String
                        }
                        if dict.keys.contains("baggage_info_map") && dict["baggage_info_map"] != nil {
                            var tmp : [String: [ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue]] = [:]
                            for (k, v) in dict["baggage_info_map"] as! [String: Any] {
                                var l1 : [ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue] = []
                                for v1 in v as! [Any] {
                                    var model = ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue()
                                    if v1 != nil {
                                        model.fromMap(v1 as! [String: Any])
                                    }
                                    l1.append(model)
                                }
                                tmp[k] = l1
                            }
                            self.baggageInfoMap = tmp
                        }
                        if dict.keys.contains("structured_baggage") && dict["structured_baggage"] != nil {
                            self.structuredBaggage = dict["structured_baggage"] as! Bool
                        }
                    }
                }
                public class RefundChangeRule : Tea.TeaModel {
                    public var cancelFeeInd: Bool?

                    public var changeFeeInd: Bool?

                    public var offerPenaltyInfoMap: [String: [ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue]]?

                    public var refundChangeDigest: String?

                    public var structuredRefund: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cancelFeeInd != nil {
                            map["cancel_fee_ind"] = self.cancelFeeInd!
                        }
                        if self.changeFeeInd != nil {
                            map["change_fee_ind"] = self.changeFeeInd!
                        }
                        if self.offerPenaltyInfoMap != nil {
                            var tmp : [String: Any] = [:]
                            for (k, v) in self.offerPenaltyInfoMap! {
                                var l1 : [Any] = []
                                for k1 in v {
                                    l1.append(k1.toMap())
                                }
                                tmp[k] = l1
                            }
                            map["offer_penalty_info_map"] = tmp
                        }
                        if self.refundChangeDigest != nil {
                            map["refund_change_digest"] = self.refundChangeDigest!
                        }
                        if self.structuredRefund != nil {
                            map["structured_refund"] = self.structuredRefund!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("cancel_fee_ind") && dict["cancel_fee_ind"] != nil {
                            self.cancelFeeInd = dict["cancel_fee_ind"] as! Bool
                        }
                        if dict.keys.contains("change_fee_ind") && dict["change_fee_ind"] != nil {
                            self.changeFeeInd = dict["change_fee_ind"] as! Bool
                        }
                        if dict.keys.contains("offer_penalty_info_map") && dict["offer_penalty_info_map"] != nil {
                            var tmp : [String: [ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue]] = [:]
                            for (k, v) in dict["offer_penalty_info_map"] as! [String: Any] {
                                var l1 : [ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue] = []
                                for v1 in v as! [Any] {
                                    var model = ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue()
                                    if v1 != nil {
                                        model.fromMap(v1 as! [String: Any])
                                    }
                                    l1.append(model)
                                }
                                tmp[k] = l1
                            }
                            self.offerPenaltyInfoMap = tmp
                        }
                        if dict.keys.contains("refund_change_digest") && dict["refund_change_digest"] != nil {
                            self.refundChangeDigest = dict["refund_change_digest"] as! String
                        }
                        if dict.keys.contains("structured_refund") && dict["structured_refund"] != nil {
                            self.structuredRefund = dict["structured_refund"] as! Bool
                        }
                    }
                }
                public var baggageRule: IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems.BaggageRule?

                public var refundChangeRule: IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems.RefundChangeRule?

                public var segmentKeys: [String]?

                public var shoppingItemMap: [String: ModuleGroupItemSubItemsShoppingItemMapValue]?

                public var uniqKey: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.baggageRule?.validate()
                    try self.refundChangeRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.baggageRule != nil {
                        map["baggage_rule"] = self.baggageRule?.toMap()
                    }
                    if self.refundChangeRule != nil {
                        map["refund_change_rule"] = self.refundChangeRule?.toMap()
                    }
                    if self.segmentKeys != nil {
                        map["segment_keys"] = self.segmentKeys!
                    }
                    if self.shoppingItemMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.shoppingItemMap! {
                            tmp[k] = v.toMap()
                        }
                        map["shopping_item_map"] = tmp
                    }
                    if self.uniqKey != nil {
                        map["uniq_key"] = self.uniqKey!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("baggage_rule") && dict["baggage_rule"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems.BaggageRule()
                        model.fromMap(dict["baggage_rule"] as! [String: Any])
                        self.baggageRule = model
                    }
                    if dict.keys.contains("refund_change_rule") && dict["refund_change_rule"] != nil {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems.RefundChangeRule()
                        model.fromMap(dict["refund_change_rule"] as! [String: Any])
                        self.refundChangeRule = model
                    }
                    if dict.keys.contains("segment_keys") && dict["segment_keys"] != nil {
                        self.segmentKeys = dict["segment_keys"] as! [String]
                    }
                    if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                        var tmp : [String: ModuleGroupItemSubItemsShoppingItemMapValue] = [:]
                        for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleGroupItemSubItemsShoppingItemMapValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.shoppingItemMap = tmp
                    }
                    if dict.keys.contains("uniq_key") && dict["uniq_key"] != nil {
                        self.uniqKey = dict["uniq_key"] as! String
                    }
                }
            }
            public var agreementPriceCodes: [String]?

            public var flightRuleInfoList: [IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList]?

            public var itemId: String?

            public var itemType: String?

            public var shoppingItemMap: [String: ModuleGroupItemShoppingItemMapValue]?

            public var subItemPositionMap: [String: [ModuleGroupItemSubItemPositionMapValue]]?

            public var subItems: [IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agreementPriceCodes != nil {
                    map["agreement_price_codes"] = self.agreementPriceCodes!
                }
                if self.flightRuleInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.flightRuleInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["flight_rule_info_list"] = tmp
                }
                if self.itemId != nil {
                    map["item_id"] = self.itemId!
                }
                if self.itemType != nil {
                    map["item_type"] = self.itemType!
                }
                if self.shoppingItemMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.shoppingItemMap! {
                        tmp[k] = v.toMap()
                    }
                    map["shopping_item_map"] = tmp
                }
                if self.subItemPositionMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.subItemPositionMap! {
                        var l1 : [Any] = []
                        for k1 in v {
                            l1.append(k1.toMap())
                        }
                        tmp[k] = l1
                    }
                    map["sub_item_position_map"] = tmp
                }
                if self.subItems != nil {
                    var tmp : [Any] = []
                    for k in self.subItems! {
                        tmp.append(k.toMap())
                    }
                    map["sub_items"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("agreement_price_codes") && dict["agreement_price_codes"] != nil {
                    self.agreementPriceCodes = dict["agreement_price_codes"] as! [String]
                }
                if dict.keys.contains("flight_rule_info_list") && dict["flight_rule_info_list"] != nil {
                    var tmp : [IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList] = []
                    for v in dict["flight_rule_info_list"] as! [Any] {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem.FlightRuleInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightRuleInfoList = tmp
                }
                if dict.keys.contains("item_id") && dict["item_id"] != nil {
                    self.itemId = dict["item_id"] as! String
                }
                if dict.keys.contains("item_type") && dict["item_type"] != nil {
                    self.itemType = dict["item_type"] as! String
                }
                if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                    var tmp : [String: ModuleGroupItemShoppingItemMapValue] = [:]
                    for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                        if v != nil {
                            var model = ModuleGroupItemShoppingItemMapValue()
                            model.fromMap(v as! [String: Any])
                            tmp[k] = model
                        }
                    }
                    self.shoppingItemMap = tmp
                }
                if dict.keys.contains("sub_item_position_map") && dict["sub_item_position_map"] != nil {
                    var tmp : [String: [ModuleGroupItemSubItemPositionMapValue]] = [:]
                    for (k, v) in dict["sub_item_position_map"] as! [String: Any] {
                        var l1 : [ModuleGroupItemSubItemPositionMapValue] = []
                        for v1 in v as! [Any] {
                            var model = ModuleGroupItemSubItemPositionMapValue()
                            if v1 != nil {
                                model.fromMap(v1 as! [String: Any])
                            }
                            l1.append(model)
                        }
                        tmp[k] = l1
                    }
                    self.subItemPositionMap = tmp
                }
                if dict.keys.contains("sub_items") && dict["sub_items"] != nil {
                    var tmp : [IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems] = []
                    for v in dict["sub_items"] as! [Any] {
                        var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem.SubItems()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.subItems = tmp
                }
            }
        }
        public class ShutterDocs : Tea.TeaModel {
            public var contents: [String]?

            public var mainTitle: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contents != nil {
                    map["contents"] = self.contents!
                }
                if self.mainTitle != nil {
                    map["main_title"] = self.mainTitle!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("contents") && dict["contents"] != nil {
                    self.contents = dict["contents"] as! [String]
                }
                if dict.keys.contains("main_title") && dict["main_title"] != nil {
                    self.mainTitle = dict["main_title"] as! String
                }
            }
        }
        public var flightJourneyInfos: [IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos]?

        public var groupItem: IntlFlightOtaItemDetailResponseBody.Module.GroupItem?

        public var shutterDocs: [IntlFlightOtaItemDetailResponseBody.Module.ShutterDocs]?

        public var tripType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.groupItem?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightJourneyInfos != nil {
                var tmp : [Any] = []
                for k in self.flightJourneyInfos! {
                    tmp.append(k.toMap())
                }
                map["flight_journey_infos"] = tmp
            }
            if self.groupItem != nil {
                map["group_item"] = self.groupItem?.toMap()
            }
            if self.shutterDocs != nil {
                var tmp : [Any] = []
                for k in self.shutterDocs! {
                    tmp.append(k.toMap())
                }
                map["shutter_docs"] = tmp
            }
            if self.tripType != nil {
                map["trip_type"] = self.tripType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_journey_infos") && dict["flight_journey_infos"] != nil {
                var tmp : [IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos] = []
                for v in dict["flight_journey_infos"] as! [Any] {
                    var model = IntlFlightOtaItemDetailResponseBody.Module.FlightJourneyInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightJourneyInfos = tmp
            }
            if dict.keys.contains("group_item") && dict["group_item"] != nil {
                var model = IntlFlightOtaItemDetailResponseBody.Module.GroupItem()
                model.fromMap(dict["group_item"] as! [String: Any])
                self.groupItem = model
            }
            if dict.keys.contains("shutter_docs") && dict["shutter_docs"] != nil {
                var tmp : [IntlFlightOtaItemDetailResponseBody.Module.ShutterDocs] = []
                for v in dict["shutter_docs"] as! [Any] {
                    var model = IntlFlightOtaItemDetailResponseBody.Module.ShutterDocs()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.shutterDocs = tmp
            }
            if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                self.tripType = dict["trip_type"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: IntlFlightOtaItemDetailResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = IntlFlightOtaItemDetailResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IntlFlightOtaItemDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IntlFlightOtaItemDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IntlFlightOtaItemDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IntlFlightOtaSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class IntlFlightOtaSearchRequest : Tea.TeaModel {
    public class SearchJourneys : Tea.TeaModel {
        public class SelectedFlights : Tea.TeaModel {
            public var arrAirportCode: String?

            public var arrCityCode: String?

            public var cabinType: Int32?

            public var depAirportCode: String?

            public var depCityCode: String?

            public var flightTime: String?

            public var marketFlightNo: String?

            public var operateFlightNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.cabinType != nil {
                    map["cabin_type"] = self.cabinType!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.flightTime != nil {
                    map["flight_time"] = self.flightTime!
                }
                if self.marketFlightNo != nil {
                    map["market_flight_no"] = self.marketFlightNo!
                }
                if self.operateFlightNo != nil {
                    map["operate_flight_no"] = self.operateFlightNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("cabin_type") && dict["cabin_type"] != nil {
                    self.cabinType = dict["cabin_type"] as! Int32
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("flight_time") && dict["flight_time"] != nil {
                    self.flightTime = dict["flight_time"] as! String
                }
                if dict.keys.contains("market_flight_no") && dict["market_flight_no"] != nil {
                    self.marketFlightNo = dict["market_flight_no"] as! String
                }
                if dict.keys.contains("operate_flight_no") && dict["operate_flight_no"] != nil {
                    self.operateFlightNo = dict["operate_flight_no"] as! String
                }
            }
        }
        public var arrCityCode: String?

        public var depCityCode: String?

        public var depDate: String?

        public var selectedFlights: [IntlFlightOtaSearchRequest.SearchJourneys.SelectedFlights]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCityCode != nil {
                map["arr_city_code"] = self.arrCityCode!
            }
            if self.depCityCode != nil {
                map["dep_city_code"] = self.depCityCode!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.selectedFlights != nil {
                var tmp : [Any] = []
                for k in self.selectedFlights! {
                    tmp.append(k.toMap())
                }
                map["selected_flights"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                self.arrCityCode = dict["arr_city_code"] as! String
            }
            if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                self.depCityCode = dict["dep_city_code"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("selected_flights") && dict["selected_flights"] != nil {
                var tmp : [IntlFlightOtaSearchRequest.SearchJourneys.SelectedFlights] = []
                for v in dict["selected_flights"] as! [Any] {
                    var model = IntlFlightOtaSearchRequest.SearchJourneys.SelectedFlights()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.selectedFlights = tmp
            }
        }
    }
    public class SearchPassengerList : Tea.TeaModel {
        public var certNo: String?

        public var certType: Int32?

        public var fullName: String?

        public var type: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certNo != nil {
                map["cert_no"] = self.certNo!
            }
            if self.certType != nil {
                map["cert_type"] = self.certType!
            }
            if self.fullName != nil {
                map["full_name"] = self.fullName!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                self.certNo = dict["cert_no"] as! String
            }
            if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                self.certType = dict["cert_type"] as! Int32
            }
            if dict.keys.contains("full_name") && dict["full_name"] != nil {
                self.fullName = dict["full_name"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! Int32
            }
        }
    }
    public var btripUserId: String?

    public var buyerName: String?

    public var cabinType: Int32?

    public var directOnly: Bool?

    public var isvName: String?

    public var needShareFlight: Bool?

    public var searchJourneys: [IntlFlightOtaSearchRequest.SearchJourneys]?

    public var searchPassengerList: [IntlFlightOtaSearchRequest.SearchPassengerList]?

    public var supplierCode: String?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.cabinType != nil {
            map["cabin_type"] = self.cabinType!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.searchJourneys != nil {
            var tmp : [Any] = []
            for k in self.searchJourneys! {
                tmp.append(k.toMap())
            }
            map["search_journeys"] = tmp
        }
        if self.searchPassengerList != nil {
            var tmp : [Any] = []
            for k in self.searchPassengerList! {
                tmp.append(k.toMap())
            }
            map["search_passenger_list"] = tmp
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("cabin_type") && dict["cabin_type"] != nil {
            self.cabinType = dict["cabin_type"] as! Int32
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            var tmp : [IntlFlightOtaSearchRequest.SearchJourneys] = []
            for v in dict["search_journeys"] as! [Any] {
                var model = IntlFlightOtaSearchRequest.SearchJourneys()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.searchJourneys = tmp
        }
        if dict.keys.contains("search_passenger_list") && dict["search_passenger_list"] != nil {
            var tmp : [IntlFlightOtaSearchRequest.SearchPassengerList] = []
            for v in dict["search_passenger_list"] as! [Any] {
                var model = IntlFlightOtaSearchRequest.SearchPassengerList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.searchPassengerList = tmp
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class IntlFlightOtaSearchShrinkRequest : Tea.TeaModel {
    public var btripUserId: String?

    public var buyerName: String?

    public var cabinType: Int32?

    public var directOnly: Bool?

    public var isvName: String?

    public var needShareFlight: Bool?

    public var searchJourneysShrink: String?

    public var searchPassengerListShrink: String?

    public var supplierCode: String?

    public var tripType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.btripUserId != nil {
            map["btrip_user_id"] = self.btripUserId!
        }
        if self.buyerName != nil {
            map["buyer_name"] = self.buyerName!
        }
        if self.cabinType != nil {
            map["cabin_type"] = self.cabinType!
        }
        if self.directOnly != nil {
            map["direct_only"] = self.directOnly!
        }
        if self.isvName != nil {
            map["isv_name"] = self.isvName!
        }
        if self.needShareFlight != nil {
            map["need_share_flight"] = self.needShareFlight!
        }
        if self.searchJourneysShrink != nil {
            map["search_journeys"] = self.searchJourneysShrink!
        }
        if self.searchPassengerListShrink != nil {
            map["search_passenger_list"] = self.searchPassengerListShrink!
        }
        if self.supplierCode != nil {
            map["supplier_code"] = self.supplierCode!
        }
        if self.tripType != nil {
            map["trip_type"] = self.tripType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("btrip_user_id") && dict["btrip_user_id"] != nil {
            self.btripUserId = dict["btrip_user_id"] as! String
        }
        if dict.keys.contains("buyer_name") && dict["buyer_name"] != nil {
            self.buyerName = dict["buyer_name"] as! String
        }
        if dict.keys.contains("cabin_type") && dict["cabin_type"] != nil {
            self.cabinType = dict["cabin_type"] as! Int32
        }
        if dict.keys.contains("direct_only") && dict["direct_only"] != nil {
            self.directOnly = dict["direct_only"] as! Bool
        }
        if dict.keys.contains("isv_name") && dict["isv_name"] != nil {
            self.isvName = dict["isv_name"] as! String
        }
        if dict.keys.contains("need_share_flight") && dict["need_share_flight"] != nil {
            self.needShareFlight = dict["need_share_flight"] as! Bool
        }
        if dict.keys.contains("search_journeys") && dict["search_journeys"] != nil {
            self.searchJourneysShrink = dict["search_journeys"] as! String
        }
        if dict.keys.contains("search_passenger_list") && dict["search_passenger_list"] != nil {
            self.searchPassengerListShrink = dict["search_passenger_list"] as! String
        }
        if dict.keys.contains("supplier_code") && dict["supplier_code"] != nil {
            self.supplierCode = dict["supplier_code"] as! String
        }
        if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
            self.tripType = dict["trip_type"] as! Int32
        }
    }
}

public class IntlFlightOtaSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightJourneyInfos : Tea.TeaModel {
            public class FlightSegmentInfos : Tea.TeaModel {
                public class AirlineInfo : Tea.TeaModel {
                    public var airlineChineseName: String?

                    public var airlineChineseShortName: String?

                    public var airlineCode: String?

                    public var airlineIcon: String?

                    public var cheapFlight: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airlineChineseName != nil {
                            map["airline_chinese_name"] = self.airlineChineseName!
                        }
                        if self.airlineChineseShortName != nil {
                            map["airline_chinese_short_name"] = self.airlineChineseShortName!
                        }
                        if self.airlineCode != nil {
                            map["airline_code"] = self.airlineCode!
                        }
                        if self.airlineIcon != nil {
                            map["airline_icon"] = self.airlineIcon!
                        }
                        if self.cheapFlight != nil {
                            map["cheap_flight"] = self.cheapFlight!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                            self.airlineChineseName = dict["airline_chinese_name"] as! String
                        }
                        if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                            self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                        }
                        if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                            self.airlineCode = dict["airline_code"] as! String
                        }
                        if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                            self.airlineIcon = dict["airline_icon"] as! String
                        }
                        if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                            self.cheapFlight = dict["cheap_flight"] as! Bool
                        }
                    }
                }
                public class ArrAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var airportShortName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.airportShortName != nil {
                            map["airport_short_name"] = self.airportShortName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                            self.airportShortName = dict["airport_short_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class DepAirportInfo : Tea.TeaModel {
                    public var airportCode: String?

                    public var airportName: String?

                    public var airportShortName: String?

                    public var terminal: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.airportCode != nil {
                            map["airport_code"] = self.airportCode!
                        }
                        if self.airportName != nil {
                            map["airport_name"] = self.airportName!
                        }
                        if self.airportShortName != nil {
                            map["airport_short_name"] = self.airportShortName!
                        }
                        if self.terminal != nil {
                            map["terminal"] = self.terminal!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                            self.airportCode = dict["airport_code"] as! String
                        }
                        if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                            self.airportName = dict["airport_name"] as! String
                        }
                        if dict.keys.contains("airport_short_name") && dict["airport_short_name"] != nil {
                            self.airportShortName = dict["airport_short_name"] as! String
                        }
                        if dict.keys.contains("terminal") && dict["terminal"] != nil {
                            self.terminal = dict["terminal"] as! String
                        }
                    }
                }
                public class FlightShareInfo : Tea.TeaModel {
                    public class OperatingAirlineInfo : Tea.TeaModel {
                        public var airlineChineseName: String?

                        public var airlineChineseShortName: String?

                        public var airlineCode: String?

                        public var airlineIcon: String?

                        public var cheapFlight: Bool?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.airlineChineseName != nil {
                                map["airline_chinese_name"] = self.airlineChineseName!
                            }
                            if self.airlineChineseShortName != nil {
                                map["airline_chinese_short_name"] = self.airlineChineseShortName!
                            }
                            if self.airlineCode != nil {
                                map["airline_code"] = self.airlineCode!
                            }
                            if self.airlineIcon != nil {
                                map["airline_icon"] = self.airlineIcon!
                            }
                            if self.cheapFlight != nil {
                                map["cheap_flight"] = self.cheapFlight!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("airline_chinese_name") && dict["airline_chinese_name"] != nil {
                                self.airlineChineseName = dict["airline_chinese_name"] as! String
                            }
                            if dict.keys.contains("airline_chinese_short_name") && dict["airline_chinese_short_name"] != nil {
                                self.airlineChineseShortName = dict["airline_chinese_short_name"] as! String
                            }
                            if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                                self.airlineCode = dict["airline_code"] as! String
                            }
                            if dict.keys.contains("airline_icon") && dict["airline_icon"] != nil {
                                self.airlineIcon = dict["airline_icon"] as! String
                            }
                            if dict.keys.contains("cheap_flight") && dict["cheap_flight"] != nil {
                                self.cheapFlight = dict["cheap_flight"] as! Bool
                            }
                        }
                    }
                    public var operatingAirlineInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo?

                    public var operatingFlightNo: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.operatingAirlineInfo?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.operatingAirlineInfo != nil {
                            map["operating_airline_info"] = self.operatingAirlineInfo?.toMap()
                        }
                        if self.operatingFlightNo != nil {
                            map["operating_flight_no"] = self.operatingFlightNo!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("operating_airline_info") && dict["operating_airline_info"] != nil {
                            var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo.OperatingAirlineInfo()
                            model.fromMap(dict["operating_airline_info"] as! [String: Any])
                            self.operatingAirlineInfo = model
                        }
                        if dict.keys.contains("operating_flight_no") && dict["operating_flight_no"] != nil {
                            self.operatingFlightNo = dict["operating_flight_no"] as! String
                        }
                    }
                }
                public class FlightStopInfo : Tea.TeaModel {
                    public var stopAirport: String?

                    public var stopAirportName: String?

                    public var stopArrTerm: String?

                    public var stopArrTime: String?

                    public var stopCityCode: String?

                    public var stopCityName: String?

                    public var stopCityNames: [String]?

                    public var stopDepTerm: String?

                    public var stopDepTime: String?

                    public var stopTime: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.stopAirport != nil {
                            map["stop_airport"] = self.stopAirport!
                        }
                        if self.stopAirportName != nil {
                            map["stop_airport_name"] = self.stopAirportName!
                        }
                        if self.stopArrTerm != nil {
                            map["stop_arr_term"] = self.stopArrTerm!
                        }
                        if self.stopArrTime != nil {
                            map["stop_arr_time"] = self.stopArrTime!
                        }
                        if self.stopCityCode != nil {
                            map["stop_city_code"] = self.stopCityCode!
                        }
                        if self.stopCityName != nil {
                            map["stop_city_name"] = self.stopCityName!
                        }
                        if self.stopCityNames != nil {
                            map["stop_city_names"] = self.stopCityNames!
                        }
                        if self.stopDepTerm != nil {
                            map["stop_dep_term"] = self.stopDepTerm!
                        }
                        if self.stopDepTime != nil {
                            map["stop_dep_time"] = self.stopDepTime!
                        }
                        if self.stopTime != nil {
                            map["stop_time"] = self.stopTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("stop_airport") && dict["stop_airport"] != nil {
                            self.stopAirport = dict["stop_airport"] as! String
                        }
                        if dict.keys.contains("stop_airport_name") && dict["stop_airport_name"] != nil {
                            self.stopAirportName = dict["stop_airport_name"] as! String
                        }
                        if dict.keys.contains("stop_arr_term") && dict["stop_arr_term"] != nil {
                            self.stopArrTerm = dict["stop_arr_term"] as! String
                        }
                        if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                            self.stopArrTime = dict["stop_arr_time"] as! String
                        }
                        if dict.keys.contains("stop_city_code") && dict["stop_city_code"] != nil {
                            self.stopCityCode = dict["stop_city_code"] as! String
                        }
                        if dict.keys.contains("stop_city_name") && dict["stop_city_name"] != nil {
                            self.stopCityName = dict["stop_city_name"] as! String
                        }
                        if dict.keys.contains("stop_city_names") && dict["stop_city_names"] != nil {
                            self.stopCityNames = dict["stop_city_names"] as! [String]
                        }
                        if dict.keys.contains("stop_dep_term") && dict["stop_dep_term"] != nil {
                            self.stopDepTerm = dict["stop_dep_term"] as! String
                        }
                        if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                            self.stopDepTime = dict["stop_dep_time"] as! String
                        }
                        if dict.keys.contains("stop_time") && dict["stop_time"] != nil {
                            self.stopTime = dict["stop_time"] as! String
                        }
                    }
                }
                public class LuggageDirectInfo : Tea.TeaModel {
                    public var depCityLuggageDirect: Int32?

                    public var stopCityLuggageDirect: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.depCityLuggageDirect != nil {
                            map["dep_city_luggage_direct"] = self.depCityLuggageDirect!
                        }
                        if self.stopCityLuggageDirect != nil {
                            map["stop_city_luggage_direct"] = self.stopCityLuggageDirect!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("dep_city_luggage_direct") && dict["dep_city_luggage_direct"] != nil {
                            self.depCityLuggageDirect = dict["dep_city_luggage_direct"] as! Int32
                        }
                        if dict.keys.contains("stop_city_luggage_direct") && dict["stop_city_luggage_direct"] != nil {
                            self.stopCityLuggageDirect = dict["stop_city_luggage_direct"] as! Int32
                        }
                    }
                }
                public class SegmentVisaRemark : Tea.TeaModel {
                    public var depCityVisaRemark: String?

                    public var depCityVisaType: Int32?

                    public var stopCityVisaRemarks: [String]?

                    public var stopCityVisaTypes: [Int32]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.depCityVisaRemark != nil {
                            map["dep_city_visa_remark"] = self.depCityVisaRemark!
                        }
                        if self.depCityVisaType != nil {
                            map["dep_city_visa_type"] = self.depCityVisaType!
                        }
                        if self.stopCityVisaRemarks != nil {
                            map["stop_city_visa_remarks"] = self.stopCityVisaRemarks!
                        }
                        if self.stopCityVisaTypes != nil {
                            map["stop_city_visa_types"] = self.stopCityVisaTypes!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("dep_city_visa_remark") && dict["dep_city_visa_remark"] != nil {
                            self.depCityVisaRemark = dict["dep_city_visa_remark"] as! String
                        }
                        if dict.keys.contains("dep_city_visa_type") && dict["dep_city_visa_type"] != nil {
                            self.depCityVisaType = dict["dep_city_visa_type"] as! Int32
                        }
                        if dict.keys.contains("stop_city_visa_remarks") && dict["stop_city_visa_remarks"] != nil {
                            self.stopCityVisaRemarks = dict["stop_city_visa_remarks"] as! [String]
                        }
                        if dict.keys.contains("stop_city_visa_types") && dict["stop_city_visa_types"] != nil {
                            self.stopCityVisaTypes = dict["stop_city_visa_types"] as! [Int32]
                        }
                    }
                }
                public var airlineInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo?

                public var arrAirportInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo?

                public var arrCityCode: String?

                public var arrCityName: String?

                public var arrTime: String?

                public var baggageDesc: String?

                public var depAirportInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo?

                public var depCityCode: String?

                public var depCityName: String?

                public var depTime: String?

                public var duration: Int32?

                public var flightNo: String?

                public var flightShareInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo?

                public var flightSize: String?

                public var flightStopInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo?

                public var flightType: String?

                public var luggageDirectInfo: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.LuggageDirectInfo?

                public var manufacturer: String?

                public var mealDesc: String?

                public var miles: Int32?

                public var onTimeRate: String?

                public var oneMore: Int32?

                public var oneMoreShow: String?

                public var segmentIndex: Int32?

                public var segmentKey: String?

                public var segmentVisaRemark: IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.SegmentVisaRemark?

                public var share: Bool?

                public var shortFlightSize: String?

                public var stop: Bool?

                public var totalTime: String?

                public var transferTime: String?

                public var transferTimeNumber: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.airlineInfo?.validate()
                    try self.arrAirportInfo?.validate()
                    try self.depAirportInfo?.validate()
                    try self.flightShareInfo?.validate()
                    try self.flightStopInfo?.validate()
                    try self.luggageDirectInfo?.validate()
                    try self.segmentVisaRemark?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineInfo != nil {
                        map["airline_info"] = self.airlineInfo?.toMap()
                    }
                    if self.arrAirportInfo != nil {
                        map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                    }
                    if self.arrCityCode != nil {
                        map["arr_city_code"] = self.arrCityCode!
                    }
                    if self.arrCityName != nil {
                        map["arr_city_name"] = self.arrCityName!
                    }
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.baggageDesc != nil {
                        map["baggage_desc"] = self.baggageDesc!
                    }
                    if self.depAirportInfo != nil {
                        map["dep_airport_info"] = self.depAirportInfo?.toMap()
                    }
                    if self.depCityCode != nil {
                        map["dep_city_code"] = self.depCityCode!
                    }
                    if self.depCityName != nil {
                        map["dep_city_name"] = self.depCityName!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.duration != nil {
                        map["duration"] = self.duration!
                    }
                    if self.flightNo != nil {
                        map["flight_no"] = self.flightNo!
                    }
                    if self.flightShareInfo != nil {
                        map["flight_share_info"] = self.flightShareInfo?.toMap()
                    }
                    if self.flightSize != nil {
                        map["flight_size"] = self.flightSize!
                    }
                    if self.flightStopInfo != nil {
                        map["flight_stop_info"] = self.flightStopInfo?.toMap()
                    }
                    if self.flightType != nil {
                        map["flight_type"] = self.flightType!
                    }
                    if self.luggageDirectInfo != nil {
                        map["luggage_direct_info"] = self.luggageDirectInfo?.toMap()
                    }
                    if self.manufacturer != nil {
                        map["manufacturer"] = self.manufacturer!
                    }
                    if self.mealDesc != nil {
                        map["meal_desc"] = self.mealDesc!
                    }
                    if self.miles != nil {
                        map["miles"] = self.miles!
                    }
                    if self.onTimeRate != nil {
                        map["on_time_rate"] = self.onTimeRate!
                    }
                    if self.oneMore != nil {
                        map["one_more"] = self.oneMore!
                    }
                    if self.oneMoreShow != nil {
                        map["one_more_show"] = self.oneMoreShow!
                    }
                    if self.segmentIndex != nil {
                        map["segment_index"] = self.segmentIndex!
                    }
                    if self.segmentKey != nil {
                        map["segment_key"] = self.segmentKey!
                    }
                    if self.segmentVisaRemark != nil {
                        map["segment_visa_remark"] = self.segmentVisaRemark?.toMap()
                    }
                    if self.share != nil {
                        map["share"] = self.share!
                    }
                    if self.shortFlightSize != nil {
                        map["short_flight_size"] = self.shortFlightSize!
                    }
                    if self.stop != nil {
                        map["stop"] = self.stop!
                    }
                    if self.totalTime != nil {
                        map["total_time"] = self.totalTime!
                    }
                    if self.transferTime != nil {
                        map["transfer_time"] = self.transferTime!
                    }
                    if self.transferTimeNumber != nil {
                        map["transfer_time_number"] = self.transferTimeNumber!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.AirlineInfo()
                        model.fromMap(dict["airline_info"] as! [String: Any])
                        self.airlineInfo = model
                    }
                    if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.ArrAirportInfo()
                        model.fromMap(dict["arr_airport_info"] as! [String: Any])
                        self.arrAirportInfo = model
                    }
                    if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                        self.arrCityCode = dict["arr_city_code"] as! String
                    }
                    if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                        self.arrCityName = dict["arr_city_name"] as! String
                    }
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                        self.baggageDesc = dict["baggage_desc"] as! String
                    }
                    if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.DepAirportInfo()
                        model.fromMap(dict["dep_airport_info"] as! [String: Any])
                        self.depAirportInfo = model
                    }
                    if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                        self.depCityCode = dict["dep_city_code"] as! String
                    }
                    if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                        self.depCityName = dict["dep_city_name"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("duration") && dict["duration"] != nil {
                        self.duration = dict["duration"] as! Int32
                    }
                    if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                        self.flightNo = dict["flight_no"] as! String
                    }
                    if dict.keys.contains("flight_share_info") && dict["flight_share_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightShareInfo()
                        model.fromMap(dict["flight_share_info"] as! [String: Any])
                        self.flightShareInfo = model
                    }
                    if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                        self.flightSize = dict["flight_size"] as! String
                    }
                    if dict.keys.contains("flight_stop_info") && dict["flight_stop_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.FlightStopInfo()
                        model.fromMap(dict["flight_stop_info"] as! [String: Any])
                        self.flightStopInfo = model
                    }
                    if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                        self.flightType = dict["flight_type"] as! String
                    }
                    if dict.keys.contains("luggage_direct_info") && dict["luggage_direct_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.LuggageDirectInfo()
                        model.fromMap(dict["luggage_direct_info"] as! [String: Any])
                        self.luggageDirectInfo = model
                    }
                    if dict.keys.contains("manufacturer") && dict["manufacturer"] != nil {
                        self.manufacturer = dict["manufacturer"] as! String
                    }
                    if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                        self.mealDesc = dict["meal_desc"] as! String
                    }
                    if dict.keys.contains("miles") && dict["miles"] != nil {
                        self.miles = dict["miles"] as! Int32
                    }
                    if dict.keys.contains("on_time_rate") && dict["on_time_rate"] != nil {
                        self.onTimeRate = dict["on_time_rate"] as! String
                    }
                    if dict.keys.contains("one_more") && dict["one_more"] != nil {
                        self.oneMore = dict["one_more"] as! Int32
                    }
                    if dict.keys.contains("one_more_show") && dict["one_more_show"] != nil {
                        self.oneMoreShow = dict["one_more_show"] as! String
                    }
                    if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                        self.segmentIndex = dict["segment_index"] as! Int32
                    }
                    if dict.keys.contains("segment_key") && dict["segment_key"] != nil {
                        self.segmentKey = dict["segment_key"] as! String
                    }
                    if dict.keys.contains("segment_visa_remark") && dict["segment_visa_remark"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos.SegmentVisaRemark()
                        model.fromMap(dict["segment_visa_remark"] as! [String: Any])
                        self.segmentVisaRemark = model
                    }
                    if dict.keys.contains("share") && dict["share"] != nil {
                        self.share = dict["share"] as! Bool
                    }
                    if dict.keys.contains("short_flight_size") && dict["short_flight_size"] != nil {
                        self.shortFlightSize = dict["short_flight_size"] as! String
                    }
                    if dict.keys.contains("stop") && dict["stop"] != nil {
                        self.stop = dict["stop"] as! Bool
                    }
                    if dict.keys.contains("total_time") && dict["total_time"] != nil {
                        self.totalTime = dict["total_time"] as! String
                    }
                    if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                        self.transferTime = dict["transfer_time"] as! String
                    }
                    if dict.keys.contains("transfer_time_number") && dict["transfer_time_number"] != nil {
                        self.transferTimeNumber = dict["transfer_time_number"] as! Int32
                    }
                }
            }
            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrTime: String?

            public var depCityCode: String?

            public var depCityName: String?

            public var depTime: String?

            public var duration: Int32?

            public var flightSegmentInfos: [IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos]?

            public var journeyIndex: Int32?

            public var transferTime: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.duration != nil {
                    map["duration"] = self.duration!
                }
                if self.flightSegmentInfos != nil {
                    var tmp : [Any] = []
                    for k in self.flightSegmentInfos! {
                        tmp.append(k.toMap())
                    }
                    map["flight_segment_infos"] = tmp
                }
                if self.journeyIndex != nil {
                    map["journey_index"] = self.journeyIndex!
                }
                if self.transferTime != nil {
                    map["transfer_time"] = self.transferTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("duration") && dict["duration"] != nil {
                    self.duration = dict["duration"] as! Int32
                }
                if dict.keys.contains("flight_segment_infos") && dict["flight_segment_infos"] != nil {
                    var tmp : [IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos] = []
                    for v in dict["flight_segment_infos"] as! [Any] {
                        var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos.FlightSegmentInfos()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightSegmentInfos = tmp
                }
                if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                    self.journeyIndex = dict["journey_index"] as! Int32
                }
                if dict.keys.contains("transfer_time") && dict["transfer_time"] != nil {
                    self.transferTime = dict["transfer_time"] as! Int32
                }
            }
        }
        public class ItemList : Tea.TeaModel {
            public class FlightRuleInfoList : Tea.TeaModel {
                public class FlightRuleInfo : Tea.TeaModel {
                    public var baggageDesc: String?

                    public var refundChangeRuleDesc: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageDesc != nil {
                            map["baggage_desc"] = self.baggageDesc!
                        }
                        if self.refundChangeRuleDesc != nil {
                            map["refund_change_rule_desc"] = self.refundChangeRuleDesc!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                            self.baggageDesc = dict["baggage_desc"] as! String
                        }
                        if dict.keys.contains("refund_change_rule_desc") && dict["refund_change_rule_desc"] != nil {
                            self.refundChangeRuleDesc = dict["refund_change_rule_desc"] as! String
                        }
                    }
                }
                public class SegmentPosition : Tea.TeaModel {
                    public var journeyIndex: Int32?

                    public var segmentIndex: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.journeyIndex != nil {
                            map["journey_index"] = self.journeyIndex!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("journey_index") && dict["journey_index"] != nil {
                            self.journeyIndex = dict["journey_index"] as! Int32
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                    }
                }
                public var flightRuleInfo: IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList.FlightRuleInfo?

                public var segmentPosition: IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList.SegmentPosition?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.flightRuleInfo?.validate()
                    try self.segmentPosition?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.flightRuleInfo != nil {
                        map["flight_rule_info"] = self.flightRuleInfo?.toMap()
                    }
                    if self.segmentPosition != nil {
                        map["segment_position"] = self.segmentPosition?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("flight_rule_info") && dict["flight_rule_info"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList.FlightRuleInfo()
                        model.fromMap(dict["flight_rule_info"] as! [String: Any])
                        self.flightRuleInfo = model
                    }
                    if dict.keys.contains("segment_position") && dict["segment_position"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList.SegmentPosition()
                        model.fromMap(dict["segment_position"] as! [String: Any])
                        self.segmentPosition = model
                    }
                }
            }
            public class SubItems : Tea.TeaModel {
                public class BaggageRule : Tea.TeaModel {
                    public var baggageDigest: String?

                    public var baggageInfoMap: [String: [ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue]]?

                    public var structuredBaggage: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageDigest != nil {
                            map["baggage_digest"] = self.baggageDigest!
                        }
                        if self.baggageInfoMap != nil {
                            var tmp : [String: Any] = [:]
                            for (k, v) in self.baggageInfoMap! {
                                var l1 : [Any] = []
                                for k1 in v {
                                    l1.append(k1.toMap())
                                }
                                tmp[k] = l1
                            }
                            map["baggage_info_map"] = tmp
                        }
                        if self.structuredBaggage != nil {
                            map["structured_baggage"] = self.structuredBaggage!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_digest") && dict["baggage_digest"] != nil {
                            self.baggageDigest = dict["baggage_digest"] as! String
                        }
                        if dict.keys.contains("baggage_info_map") && dict["baggage_info_map"] != nil {
                            var tmp : [String: [ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue]] = [:]
                            for (k, v) in dict["baggage_info_map"] as! [String: Any] {
                                var l1 : [ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue] = []
                                for v1 in v as! [Any] {
                                    var model = ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue()
                                    if v1 != nil {
                                        model.fromMap(v1 as! [String: Any])
                                    }
                                    l1.append(model)
                                }
                                tmp[k] = l1
                            }
                            self.baggageInfoMap = tmp
                        }
                        if dict.keys.contains("structured_baggage") && dict["structured_baggage"] != nil {
                            self.structuredBaggage = dict["structured_baggage"] as! Bool
                        }
                    }
                }
                public class RefundChangeRule : Tea.TeaModel {
                    public var cancelFeeInd: Bool?

                    public var changeFeeInd: Bool?

                    public var offerPenaltyInfoMap: [String: [ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue]]?

                    public var refundChangeDigest: String?

                    public var structuredRefund: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cancelFeeInd != nil {
                            map["cancel_fee_ind"] = self.cancelFeeInd!
                        }
                        if self.changeFeeInd != nil {
                            map["change_fee_ind"] = self.changeFeeInd!
                        }
                        if self.offerPenaltyInfoMap != nil {
                            var tmp : [String: Any] = [:]
                            for (k, v) in self.offerPenaltyInfoMap! {
                                var l1 : [Any] = []
                                for k1 in v {
                                    l1.append(k1.toMap())
                                }
                                tmp[k] = l1
                            }
                            map["offer_penalty_info_map"] = tmp
                        }
                        if self.refundChangeDigest != nil {
                            map["refund_change_digest"] = self.refundChangeDigest!
                        }
                        if self.structuredRefund != nil {
                            map["structured_refund"] = self.structuredRefund!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("cancel_fee_ind") && dict["cancel_fee_ind"] != nil {
                            self.cancelFeeInd = dict["cancel_fee_ind"] as! Bool
                        }
                        if dict.keys.contains("change_fee_ind") && dict["change_fee_ind"] != nil {
                            self.changeFeeInd = dict["change_fee_ind"] as! Bool
                        }
                        if dict.keys.contains("offer_penalty_info_map") && dict["offer_penalty_info_map"] != nil {
                            var tmp : [String: [ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue]] = [:]
                            for (k, v) in dict["offer_penalty_info_map"] as! [String: Any] {
                                var l1 : [ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue] = []
                                for v1 in v as! [Any] {
                                    var model = ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue()
                                    if v1 != nil {
                                        model.fromMap(v1 as! [String: Any])
                                    }
                                    l1.append(model)
                                }
                                tmp[k] = l1
                            }
                            self.offerPenaltyInfoMap = tmp
                        }
                        if dict.keys.contains("refund_change_digest") && dict["refund_change_digest"] != nil {
                            self.refundChangeDigest = dict["refund_change_digest"] as! String
                        }
                        if dict.keys.contains("structured_refund") && dict["structured_refund"] != nil {
                            self.structuredRefund = dict["structured_refund"] as! Bool
                        }
                    }
                }
                public var baggageRule: IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems.BaggageRule?

                public var refundChangeRule: IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems.RefundChangeRule?

                public var segmentKeys: [String]?

                public var shoppingItemMap: [String: ModuleItemListSubItemsShoppingItemMapValue]?

                public var uniqKey: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.baggageRule?.validate()
                    try self.refundChangeRule?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.baggageRule != nil {
                        map["baggage_rule"] = self.baggageRule?.toMap()
                    }
                    if self.refundChangeRule != nil {
                        map["refund_change_rule"] = self.refundChangeRule?.toMap()
                    }
                    if self.segmentKeys != nil {
                        map["segment_keys"] = self.segmentKeys!
                    }
                    if self.shoppingItemMap != nil {
                        var tmp : [String: Any] = [:]
                        for (k, v) in self.shoppingItemMap! {
                            tmp[k] = v.toMap()
                        }
                        map["shopping_item_map"] = tmp
                    }
                    if self.uniqKey != nil {
                        map["uniq_key"] = self.uniqKey!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("baggage_rule") && dict["baggage_rule"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems.BaggageRule()
                        model.fromMap(dict["baggage_rule"] as! [String: Any])
                        self.baggageRule = model
                    }
                    if dict.keys.contains("refund_change_rule") && dict["refund_change_rule"] != nil {
                        var model = IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems.RefundChangeRule()
                        model.fromMap(dict["refund_change_rule"] as! [String: Any])
                        self.refundChangeRule = model
                    }
                    if dict.keys.contains("segment_keys") && dict["segment_keys"] != nil {
                        self.segmentKeys = dict["segment_keys"] as! [String]
                    }
                    if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                        var tmp : [String: ModuleItemListSubItemsShoppingItemMapValue] = [:]
                        for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                            if v != nil {
                                var model = ModuleItemListSubItemsShoppingItemMapValue()
                                model.fromMap(v as! [String: Any])
                                tmp[k] = model
                            }
                        }
                        self.shoppingItemMap = tmp
                    }
                    if dict.keys.contains("uniq_key") && dict["uniq_key"] != nil {
                        self.uniqKey = dict["uniq_key"] as! String
                    }
                }
            }
            public var agreementPriceCodes: [String]?

            public var flightRuleInfoList: [IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList]?

            public var itemId: String?

            public var itemType: String?

            public var shoppingItemMap: [String: ModuleItemListShoppingItemMapValue]?

            public var subItemPositionMap: [String: [ModuleItemListSubItemPositionMapValue]]?

            public var subItems: [IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agreementPriceCodes != nil {
                    map["agreement_price_codes"] = self.agreementPriceCodes!
                }
                if self.flightRuleInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.flightRuleInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["flight_rule_info_list"] = tmp
                }
                if self.itemId != nil {
                    map["item_id"] = self.itemId!
                }
                if self.itemType != nil {
                    map["item_type"] = self.itemType!
                }
                if self.shoppingItemMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.shoppingItemMap! {
                        tmp[k] = v.toMap()
                    }
                    map["shopping_item_map"] = tmp
                }
                if self.subItemPositionMap != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.subItemPositionMap! {
                        var l1 : [Any] = []
                        for k1 in v {
                            l1.append(k1.toMap())
                        }
                        tmp[k] = l1
                    }
                    map["sub_item_position_map"] = tmp
                }
                if self.subItems != nil {
                    var tmp : [Any] = []
                    for k in self.subItems! {
                        tmp.append(k.toMap())
                    }
                    map["sub_items"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("agreement_price_codes") && dict["agreement_price_codes"] != nil {
                    self.agreementPriceCodes = dict["agreement_price_codes"] as! [String]
                }
                if dict.keys.contains("flight_rule_info_list") && dict["flight_rule_info_list"] != nil {
                    var tmp : [IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList] = []
                    for v in dict["flight_rule_info_list"] as! [Any] {
                        var model = IntlFlightOtaSearchResponseBody.Module.ItemList.FlightRuleInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.flightRuleInfoList = tmp
                }
                if dict.keys.contains("item_id") && dict["item_id"] != nil {
                    self.itemId = dict["item_id"] as! String
                }
                if dict.keys.contains("item_type") && dict["item_type"] != nil {
                    self.itemType = dict["item_type"] as! String
                }
                if dict.keys.contains("shopping_item_map") && dict["shopping_item_map"] != nil {
                    var tmp : [String: ModuleItemListShoppingItemMapValue] = [:]
                    for (k, v) in dict["shopping_item_map"] as! [String: Any] {
                        if v != nil {
                            var model = ModuleItemListShoppingItemMapValue()
                            model.fromMap(v as! [String: Any])
                            tmp[k] = model
                        }
                    }
                    self.shoppingItemMap = tmp
                }
                if dict.keys.contains("sub_item_position_map") && dict["sub_item_position_map"] != nil {
                    var tmp : [String: [ModuleItemListSubItemPositionMapValue]] = [:]
                    for (k, v) in dict["sub_item_position_map"] as! [String: Any] {
                        var l1 : [ModuleItemListSubItemPositionMapValue] = []
                        for v1 in v as! [Any] {
                            var model = ModuleItemListSubItemPositionMapValue()
                            if v1 != nil {
                                model.fromMap(v1 as! [String: Any])
                            }
                            l1.append(model)
                        }
                        tmp[k] = l1
                    }
                    self.subItemPositionMap = tmp
                }
                if dict.keys.contains("sub_items") && dict["sub_items"] != nil {
                    var tmp : [IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems] = []
                    for v in dict["sub_items"] as! [Any] {
                        var model = IntlFlightOtaSearchResponseBody.Module.ItemList.SubItems()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.subItems = tmp
                }
            }
        }
        public var flightJourneyInfos: [IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos]?

        public var itemList: [IntlFlightOtaSearchResponseBody.Module.ItemList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightJourneyInfos != nil {
                var tmp : [Any] = []
                for k in self.flightJourneyInfos! {
                    tmp.append(k.toMap())
                }
                map["flight_journey_infos"] = tmp
            }
            if self.itemList != nil {
                var tmp : [Any] = []
                for k in self.itemList! {
                    tmp.append(k.toMap())
                }
                map["item_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_journey_infos") && dict["flight_journey_infos"] != nil {
                var tmp : [IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos] = []
                for v in dict["flight_journey_infos"] as! [Any] {
                    var model = IntlFlightOtaSearchResponseBody.Module.FlightJourneyInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightJourneyInfos = tmp
            }
            if dict.keys.contains("item_list") && dict["item_list"] != nil {
                var tmp : [IntlFlightOtaSearchResponseBody.Module.ItemList] = []
                for v in dict["item_list"] as! [Any] {
                    var model = IntlFlightOtaSearchResponseBody.Module.ItemList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itemList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: IntlFlightOtaSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = IntlFlightOtaSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IntlFlightOtaSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IntlFlightOtaSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IntlFlightOtaSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceAddHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class InvoiceAddRequest : Tea.TeaModel {
    public var address: String?

    public var bankName: String?

    public var bankNo: String?

    public var taxNo: String?

    public var tel: String?

    public var thirdPartId: String?

    public var title: String?

    public var type: Int32?

    public var unitType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.address != nil {
            map["address"] = self.address!
        }
        if self.bankName != nil {
            map["bank_name"] = self.bankName!
        }
        if self.bankNo != nil {
            map["bank_no"] = self.bankNo!
        }
        if self.taxNo != nil {
            map["tax_no"] = self.taxNo!
        }
        if self.tel != nil {
            map["tel"] = self.tel!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.unitType != nil {
            map["unit_type"] = self.unitType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("address") && dict["address"] != nil {
            self.address = dict["address"] as! String
        }
        if dict.keys.contains("bank_name") && dict["bank_name"] != nil {
            self.bankName = dict["bank_name"] as! String
        }
        if dict.keys.contains("bank_no") && dict["bank_no"] != nil {
            self.bankNo = dict["bank_no"] as! String
        }
        if dict.keys.contains("tax_no") && dict["tax_no"] != nil {
            self.taxNo = dict["tax_no"] as! String
        }
        if dict.keys.contains("tel") && dict["tel"] != nil {
            self.tel = dict["tel"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
        if dict.keys.contains("unit_type") && dict["unit_type"] != nil {
            self.unitType = dict["unit_type"] as! Int32
        }
    }
}

public class InvoiceAddResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceAddResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceAddResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceAddResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceDeleteHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class InvoiceDeleteRequest : Tea.TeaModel {
    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceDeleteResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceDeleteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceDeleteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceDeleteResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceModifyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class InvoiceModifyRequest : Tea.TeaModel {
    public var address: String?

    public var bankName: String?

    public var bankNo: String?

    public var taxNo: String?

    public var tel: String?

    public var thirdPartId: String?

    public var title: String?

    public var type: Int32?

    public var unitType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.address != nil {
            map["address"] = self.address!
        }
        if self.bankName != nil {
            map["bank_name"] = self.bankName!
        }
        if self.bankNo != nil {
            map["bank_no"] = self.bankNo!
        }
        if self.taxNo != nil {
            map["tax_no"] = self.taxNo!
        }
        if self.tel != nil {
            map["tel"] = self.tel!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.type != nil {
            map["type"] = self.type!
        }
        if self.unitType != nil {
            map["unit_type"] = self.unitType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("address") && dict["address"] != nil {
            self.address = dict["address"] as! String
        }
        if dict.keys.contains("bank_name") && dict["bank_name"] != nil {
            self.bankName = dict["bank_name"] as! String
        }
        if dict.keys.contains("bank_no") && dict["bank_no"] != nil {
            self.bankNo = dict["bank_no"] as! String
        }
        if dict.keys.contains("tax_no") && dict["tax_no"] != nil {
            self.taxNo = dict["tax_no"] as! String
        }
        if dict.keys.contains("tel") && dict["tel"] != nil {
            self.tel = dict["tel"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
        if dict.keys.contains("type") && dict["type"] != nil {
            self.type = dict["type"] as! Int32
        }
        if dict.keys.contains("unit_type") && dict["unit_type"] != nil {
            self.unitType = dict["unit_type"] as! Int32
        }
    }
}

public class InvoiceModifyResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceModifyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceModifyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceModifyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceRuleAddHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InvoiceRuleAddRequest : Tea.TeaModel {
    public class Entities : Tea.TeaModel {
        public var entityId: String?

        public var entityName: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityName != nil {
                map["entity_name"] = self.entityName!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_name") && dict["entity_name"] != nil {
                self.entityName = dict["entity_name"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var entities: [InvoiceRuleAddRequest.Entities]?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entities != nil {
            var tmp : [Any] = []
            for k in self.entities! {
                tmp.append(k.toMap())
            }
            map["entities"] = tmp
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entities") && dict["entities"] != nil {
            var tmp : [InvoiceRuleAddRequest.Entities] = []
            for v in dict["entities"] as! [Any] {
                var model = InvoiceRuleAddRequest.Entities()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entities = tmp
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceRuleAddShrinkRequest : Tea.TeaModel {
    public var entitiesShrink: String?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.entitiesShrink != nil {
            map["entities"] = self.entitiesShrink!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("entities") && dict["entities"] != nil {
            self.entitiesShrink = dict["entities"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceRuleAddResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var addNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addNum != nil {
                map["add_num"] = self.addNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("add_num") && dict["add_num"] != nil {
                self.addNum = dict["add_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InvoiceRuleAddResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InvoiceRuleAddResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceRuleAddResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceRuleAddResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceRuleAddResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceRuleDeleteHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class InvoiceRuleDeleteRequest : Tea.TeaModel {
    public class Entities : Tea.TeaModel {
        public var entityId: String?

        public var entityType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! String
            }
        }
    }
    public var delAll: Bool?

    public var entities: [InvoiceRuleDeleteRequest.Entities]?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.delAll != nil {
            map["del_all"] = self.delAll!
        }
        if self.entities != nil {
            var tmp : [Any] = []
            for k in self.entities! {
                tmp.append(k.toMap())
            }
            map["entities"] = tmp
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("del_all") && dict["del_all"] != nil {
            self.delAll = dict["del_all"] as! Bool
        }
        if dict.keys.contains("entities") && dict["entities"] != nil {
            var tmp : [InvoiceRuleDeleteRequest.Entities] = []
            for v in dict["entities"] as! [Any] {
                var model = InvoiceRuleDeleteRequest.Entities()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entities = tmp
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceRuleDeleteShrinkRequest : Tea.TeaModel {
    public var delAll: Bool?

    public var entitiesShrink: String?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.delAll != nil {
            map["del_all"] = self.delAll!
        }
        if self.entitiesShrink != nil {
            map["entities"] = self.entitiesShrink!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("del_all") && dict["del_all"] != nil {
            self.delAll = dict["del_all"] as! Bool
        }
        if dict.keys.contains("entities") && dict["entities"] != nil {
            self.entitiesShrink = dict["entities"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceRuleDeleteResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var removeNum: Int32?

        public var selectedUserNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.removeNum != nil {
                map["remove_num"] = self.removeNum!
            }
            if self.selectedUserNum != nil {
                map["selected_user_num"] = self.selectedUserNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("remove_num") && dict["remove_num"] != nil {
                self.removeNum = dict["remove_num"] as! Int32
            }
            if dict.keys.contains("selected_user_num") && dict["selected_user_num"] != nil {
                self.selectedUserNum = dict["selected_user_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InvoiceRuleDeleteResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InvoiceRuleDeleteResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceRuleDeleteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceRuleDeleteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceRuleDeleteResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceRuleSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class InvoiceRuleSaveRequest : Tea.TeaModel {
    public class Entities : Tea.TeaModel {
        public var id: String?

        public var name: String?

        public var type: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! String
            }
            if dict.keys.contains("name") && dict["name"] != nil {
                self.name = dict["name"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! Int32
            }
        }
    }
    public var allEmploye: Bool?

    public var entities: [InvoiceRuleSaveRequest.Entities]?

    public var scope: Int32?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allEmploye != nil {
            map["all_employe"] = self.allEmploye!
        }
        if self.entities != nil {
            var tmp : [Any] = []
            for k in self.entities! {
                tmp.append(k.toMap())
            }
            map["entities"] = tmp
        }
        if self.scope != nil {
            map["scope"] = self.scope!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_employe") && dict["all_employe"] != nil {
            self.allEmploye = dict["all_employe"] as! Bool
        }
        if dict.keys.contains("entities") && dict["entities"] != nil {
            var tmp : [InvoiceRuleSaveRequest.Entities] = []
            for v in dict["entities"] as! [Any] {
                var model = InvoiceRuleSaveRequest.Entities()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.entities = tmp
        }
        if dict.keys.contains("scope") && dict["scope"] != nil {
            self.scope = dict["scope"] as! Int32
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceRuleSaveShrinkRequest : Tea.TeaModel {
    public var allEmploye: Bool?

    public var entitiesShrink: String?

    public var scope: Int32?

    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allEmploye != nil {
            map["all_employe"] = self.allEmploye!
        }
        if self.entitiesShrink != nil {
            map["entities"] = self.entitiesShrink!
        }
        if self.scope != nil {
            map["scope"] = self.scope!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_employe") && dict["all_employe"] != nil {
            self.allEmploye = dict["all_employe"] as! Bool
        }
        if dict.keys.contains("entities") && dict["entities"] != nil {
            self.entitiesShrink = dict["entities"] as! String
        }
        if dict.keys.contains("scope") && dict["scope"] != nil {
            self.scope = dict["scope"] as! Int32
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class InvoiceRuleSaveResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var addNum: Int32?

        public var removeNum: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addNum != nil {
                map["add_num"] = self.addNum!
            }
            if self.removeNum != nil {
                map["remove_num"] = self.removeNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("add_num") && dict["add_num"] != nil {
                self.addNum = dict["add_num"] as! Int32
            }
            if dict.keys.contains("remove_num") && dict["remove_num"] != nil {
                self.removeNum = dict["remove_num"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: InvoiceRuleSaveResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = InvoiceRuleSaveResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceRuleSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceRuleSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceRuleSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class InvoiceSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class InvoiceSearchRequest : Tea.TeaModel {
    public var title: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("title") && dict["title"] != nil {
            self.title = dict["title"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class InvoiceSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var id: Int64?

        public var thirdPartInvoiceId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.thirdPartInvoiceId != nil {
                map["third_part_invoice_id"] = self.thirdPartInvoiceId!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
                self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
            }
            if dict.keys.contains("title") && dict["title"] != nil {
                self.title = dict["title"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [InvoiceSearchResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [InvoiceSearchResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = InvoiceSearchResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class InvoiceSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvoiceSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = InvoiceSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IsvRuleSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class IsvRuleSaveRequest : Tea.TeaModel {
    public class BookuserList : Tea.TeaModel {
        public var entityId: String?

        public var entityType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.entityId != nil {
                map["entity_id"] = self.entityId!
            }
            if self.entityType != nil {
                map["entity_type"] = self.entityType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("entity_id") && dict["entity_id"] != nil {
                self.entityId = dict["entity_id"] as! String
            }
            if dict.keys.contains("entity_type") && dict["entity_type"] != nil {
                self.entityType = dict["entity_type"] as! Int32
            }
        }
    }
    public var applyNeed: Bool?

    public var bookType: String?

    public var bookuserList: [IsvRuleSaveRequest.BookuserList]?

    public var ruleNeed: Bool?

    public var status: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyNeed != nil {
            map["apply_need"] = self.applyNeed!
        }
        if self.bookType != nil {
            map["book_type"] = self.bookType!
        }
        if self.bookuserList != nil {
            var tmp : [Any] = []
            for k in self.bookuserList! {
                tmp.append(k.toMap())
            }
            map["bookuser_list"] = tmp
        }
        if self.ruleNeed != nil {
            map["rule_need"] = self.ruleNeed!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_need") && dict["apply_need"] != nil {
            self.applyNeed = dict["apply_need"] as! Bool
        }
        if dict.keys.contains("book_type") && dict["book_type"] != nil {
            self.bookType = dict["book_type"] as! String
        }
        if dict.keys.contains("bookuser_list") && dict["bookuser_list"] != nil {
            var tmp : [IsvRuleSaveRequest.BookuserList] = []
            for v in dict["bookuser_list"] as! [Any] {
                var model = IsvRuleSaveRequest.BookuserList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.bookuserList = tmp
        }
        if dict.keys.contains("rule_need") && dict["rule_need"] != nil {
            self.ruleNeed = dict["rule_need"] as! Bool
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class IsvRuleSaveShrinkRequest : Tea.TeaModel {
    public var applyNeed: Bool?

    public var bookType: String?

    public var bookuserListShrink: String?

    public var ruleNeed: Bool?

    public var status: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyNeed != nil {
            map["apply_need"] = self.applyNeed!
        }
        if self.bookType != nil {
            map["book_type"] = self.bookType!
        }
        if self.bookuserListShrink != nil {
            map["bookuser_list"] = self.bookuserListShrink!
        }
        if self.ruleNeed != nil {
            map["rule_need"] = self.ruleNeed!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_need") && dict["apply_need"] != nil {
            self.applyNeed = dict["apply_need"] as! Bool
        }
        if dict.keys.contains("book_type") && dict["book_type"] != nil {
            self.bookType = dict["book_type"] as! String
        }
        if dict.keys.contains("bookuser_list") && dict["bookuser_list"] != nil {
            self.bookuserListShrink = dict["bookuser_list"] as! String
        }
        if dict.keys.contains("rule_need") && dict["rule_need"] != nil {
            self.ruleNeed = dict["rule_need"] as! Bool
        }
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class IsvRuleSaveResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IsvRuleSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IsvRuleSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IsvRuleSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class IsvUserSaveHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class IsvUserSaveRequest : Tea.TeaModel {
    public class UserList : Tea.TeaModel {
        public class CertList : Tea.TeaModel {
            public var certExpiredTime: String?

            public var certNation: String?

            public var certNo: String?

            public var certType: Int32?

            public var nationality: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certExpiredTime != nil {
                    map["cert_expired_time"] = self.certExpiredTime!
                }
                if self.certNation != nil {
                    map["cert_nation"] = self.certNation!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.nationality != nil {
                    map["nationality"] = self.nationality!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cert_expired_time") && dict["cert_expired_time"] != nil {
                    self.certExpiredTime = dict["cert_expired_time"] as! String
                }
                if dict.keys.contains("cert_nation") && dict["cert_nation"] != nil {
                    self.certNation = dict["cert_nation"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! Int32
                }
                if dict.keys.contains("nationality") && dict["nationality"] != nil {
                    self.nationality = dict["nationality"] as! String
                }
            }
        }
        public var baseCityCode: String?

        public var birthday: String?

        public var certList: [IsvUserSaveRequest.UserList.CertList]?

        public var departId: Int64?

        public var email: String?

        public var gender: String?

        public var isAdmin: Bool?

        public var jobNo: String?

        public var leaveStatus: Int32?

        public var managerUserId: String?

        public var phone: String?

        public var position: String?

        public var positionLevel: String?

        public var realNameEn: String?

        public var thirdDepartId: String?

        public var thirdDepartIdList: [String]?

        public var userId: String?

        public var userName: String?

        public var userNick: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.baseCityCode != nil {
                map["base_city_code"] = self.baseCityCode!
            }
            if self.birthday != nil {
                map["birthday"] = self.birthday!
            }
            if self.certList != nil {
                var tmp : [Any] = []
                for k in self.certList! {
                    tmp.append(k.toMap())
                }
                map["cert_list"] = tmp
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.gender != nil {
                map["gender"] = self.gender!
            }
            if self.isAdmin != nil {
                map["is_admin"] = self.isAdmin!
            }
            if self.jobNo != nil {
                map["job_no"] = self.jobNo!
            }
            if self.leaveStatus != nil {
                map["leave_status"] = self.leaveStatus!
            }
            if self.managerUserId != nil {
                map["manager_user_id"] = self.managerUserId!
            }
            if self.phone != nil {
                map["phone"] = self.phone!
            }
            if self.position != nil {
                map["position"] = self.position!
            }
            if self.positionLevel != nil {
                map["position_level"] = self.positionLevel!
            }
            if self.realNameEn != nil {
                map["real_name_en"] = self.realNameEn!
            }
            if self.thirdDepartId != nil {
                map["third_depart_id"] = self.thirdDepartId!
            }
            if self.thirdDepartIdList != nil {
                map["third_depart_id_list"] = self.thirdDepartIdList!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            if self.userNick != nil {
                map["user_nick"] = self.userNick!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("base_city_code") && dict["base_city_code"] != nil {
                self.baseCityCode = dict["base_city_code"] as! String
            }
            if dict.keys.contains("birthday") && dict["birthday"] != nil {
                self.birthday = dict["birthday"] as! String
            }
            if dict.keys.contains("cert_list") && dict["cert_list"] != nil {
                var tmp : [IsvUserSaveRequest.UserList.CertList] = []
                for v in dict["cert_list"] as! [Any] {
                    var model = IsvUserSaveRequest.UserList.CertList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.certList = tmp
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! Int64
            }
            if dict.keys.contains("email") && dict["email"] != nil {
                self.email = dict["email"] as! String
            }
            if dict.keys.contains("gender") && dict["gender"] != nil {
                self.gender = dict["gender"] as! String
            }
            if dict.keys.contains("is_admin") && dict["is_admin"] != nil {
                self.isAdmin = dict["is_admin"] as! Bool
            }
            if dict.keys.contains("job_no") && dict["job_no"] != nil {
                self.jobNo = dict["job_no"] as! String
            }
            if dict.keys.contains("leave_status") && dict["leave_status"] != nil {
                self.leaveStatus = dict["leave_status"] as! Int32
            }
            if dict.keys.contains("manager_user_id") && dict["manager_user_id"] != nil {
                self.managerUserId = dict["manager_user_id"] as! String
            }
            if dict.keys.contains("phone") && dict["phone"] != nil {
                self.phone = dict["phone"] as! String
            }
            if dict.keys.contains("position") && dict["position"] != nil {
                self.position = dict["position"] as! String
            }
            if dict.keys.contains("position_level") && dict["position_level"] != nil {
                self.positionLevel = dict["position_level"] as! String
            }
            if dict.keys.contains("real_name_en") && dict["real_name_en"] != nil {
                self.realNameEn = dict["real_name_en"] as! String
            }
            if dict.keys.contains("third_depart_id") && dict["third_depart_id"] != nil {
                self.thirdDepartId = dict["third_depart_id"] as! String
            }
            if dict.keys.contains("third_depart_id_list") && dict["third_depart_id_list"] != nil {
                self.thirdDepartIdList = dict["third_depart_id_list"] as! [String]
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
            if dict.keys.contains("user_nick") && dict["user_nick"] != nil {
                self.userNick = dict["user_nick"] as! String
            }
        }
    }
    public var userList: [IsvUserSaveRequest.UserList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userList != nil {
            var tmp : [Any] = []
            for k in self.userList! {
                tmp.append(k.toMap())
            }
            map["user_list"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("user_list") && dict["user_list"] != nil {
            var tmp : [IsvUserSaveRequest.UserList] = []
            for v in dict["user_list"] as! [Any] {
                var model = IsvUserSaveRequest.UserList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.userList = tmp
        }
    }
}

public class IsvUserSaveShrinkRequest : Tea.TeaModel {
    public var userListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.userListShrink != nil {
            map["user_list"] = self.userListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("user_list") && dict["user_list"] != nil {
            self.userListShrink = dict["user_list"] as! String
        }
    }
}

public class IsvUserSaveResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class IsvUserSaveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: IsvUserSaveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = IsvUserSaveResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class MonthBillConfirmHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class MonthBillConfirmRequest : Tea.TeaModel {
    public var mailBillDate: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mailBillDate != nil {
            map["mail_bill_date"] = self.mailBillDate!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("mail_bill_date") && dict["mail_bill_date"] != nil {
            self.mailBillDate = dict["mail_bill_date"] as! Int32
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class MonthBillConfirmResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class MonthBillConfirmResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MonthBillConfirmResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = MonthBillConfirmResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class MonthBillGetHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class MonthBillGetRequest : Tea.TeaModel {
    public var billMonth: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billMonth != nil {
            map["bill_month"] = self.billMonth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_month") && dict["bill_month"] != nil {
            self.billMonth = dict["bill_month"] as! String
        }
    }
}

public class MonthBillGetResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class MonthAccountBillDetail : Tea.TeaModel {
            public var billConfirmed: Int32?

            public var carAmount: Double?

            public var damageAmount: Double?

            public var flightAmount: Double?

            public var fuPoint: Double?

            public var hotelAmount: Double?

            public var ieFlightAmount: Double?

            public var ieHotelAmount: Double?

            public var mailBillDate: Int64?

            public var serviceAmount: Double?

            public var trainAmount: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.billConfirmed != nil {
                    map["billConfirmed"] = self.billConfirmed!
                }
                if self.carAmount != nil {
                    map["carAmount"] = self.carAmount!
                }
                if self.damageAmount != nil {
                    map["damageAmount"] = self.damageAmount!
                }
                if self.flightAmount != nil {
                    map["flightAmount"] = self.flightAmount!
                }
                if self.fuPoint != nil {
                    map["fuPoint"] = self.fuPoint!
                }
                if self.hotelAmount != nil {
                    map["hotelAmount"] = self.hotelAmount!
                }
                if self.ieFlightAmount != nil {
                    map["ieFlightAmount"] = self.ieFlightAmount!
                }
                if self.ieHotelAmount != nil {
                    map["ieHotelAmount"] = self.ieHotelAmount!
                }
                if self.mailBillDate != nil {
                    map["mailBillDate"] = self.mailBillDate!
                }
                if self.serviceAmount != nil {
                    map["serviceAmount"] = self.serviceAmount!
                }
                if self.trainAmount != nil {
                    map["trainAmount"] = self.trainAmount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("billConfirmed") && dict["billConfirmed"] != nil {
                    self.billConfirmed = dict["billConfirmed"] as! Int32
                }
                if dict.keys.contains("carAmount") && dict["carAmount"] != nil {
                    self.carAmount = dict["carAmount"] as! Double
                }
                if dict.keys.contains("damageAmount") && dict["damageAmount"] != nil {
                    self.damageAmount = dict["damageAmount"] as! Double
                }
                if dict.keys.contains("flightAmount") && dict["flightAmount"] != nil {
                    self.flightAmount = dict["flightAmount"] as! Double
                }
                if dict.keys.contains("fuPoint") && dict["fuPoint"] != nil {
                    self.fuPoint = dict["fuPoint"] as! Double
                }
                if dict.keys.contains("hotelAmount") && dict["hotelAmount"] != nil {
                    self.hotelAmount = dict["hotelAmount"] as! Double
                }
                if dict.keys.contains("ieFlightAmount") && dict["ieFlightAmount"] != nil {
                    self.ieFlightAmount = dict["ieFlightAmount"] as! Double
                }
                if dict.keys.contains("ieHotelAmount") && dict["ieHotelAmount"] != nil {
                    self.ieHotelAmount = dict["ieHotelAmount"] as! Double
                }
                if dict.keys.contains("mailBillDate") && dict["mailBillDate"] != nil {
                    self.mailBillDate = dict["mailBillDate"] as! Int64
                }
                if dict.keys.contains("serviceAmount") && dict["serviceAmount"] != nil {
                    self.serviceAmount = dict["serviceAmount"] as! Double
                }
                if dict.keys.contains("trainAmount") && dict["trainAmount"] != nil {
                    self.trainAmount = dict["trainAmount"] as! Double
                }
            }
        }
        public var endDate: String?

        public var monthAccountBillDetail: MonthBillGetResponseBody.Module.MonthAccountBillDetail?

        public var startDate: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.monthAccountBillDetail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endDate != nil {
                map["end_date"] = self.endDate!
            }
            if self.monthAccountBillDetail != nil {
                map["monthAccountBillDetail"] = self.monthAccountBillDetail?.toMap()
            }
            if self.startDate != nil {
                map["start_date"] = self.startDate!
            }
            if self.url != nil {
                map["url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("end_date") && dict["end_date"] != nil {
                self.endDate = dict["end_date"] as! String
            }
            if dict.keys.contains("monthAccountBillDetail") && dict["monthAccountBillDetail"] != nil {
                var model = MonthBillGetResponseBody.Module.MonthAccountBillDetail()
                model.fromMap(dict["monthAccountBillDetail"] as! [String: Any])
                self.monthAccountBillDetail = model
            }
            if dict.keys.contains("start_date") && dict["start_date"] != nil {
                self.startDate = dict["start_date"] as! String
            }
            if dict.keys.contains("url") && dict["url"] != nil {
                self.url = dict["url"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [MonthBillGetResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [MonthBillGetResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = MonthBillGetResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class MonthBillGetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MonthBillGetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = MonthBillGetResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ProjectAddHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ProjectAddRequest : Tea.TeaModel {
    public var code: String?

    public var projectName: String?

    public var thirdPartCostCenterId: String?

    public var thirdPartId: String?

    public var thirdPartInvoiceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.projectName != nil {
            map["project_name"] = self.projectName!
        }
        if self.thirdPartCostCenterId != nil {
            map["third_part_cost_center_id"] = self.thirdPartCostCenterId!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        if self.thirdPartInvoiceId != nil {
            map["third_part_invoice_id"] = self.thirdPartInvoiceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("project_name") && dict["project_name"] != nil {
            self.projectName = dict["project_name"] as! String
        }
        if dict.keys.contains("third_part_cost_center_id") && dict["third_part_cost_center_id"] != nil {
            self.thirdPartCostCenterId = dict["third_part_cost_center_id"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
        if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
            self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
        }
    }
}

public class ProjectAddResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Int64?

    public var morePage: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.morePage != nil {
            map["more_page"] = self.morePage!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Int64
        }
        if dict.keys.contains("more_page") && dict["more_page"] != nil {
            self.morePage = dict["more_page"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ProjectAddResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ProjectAddResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ProjectAddResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ProjectDeleteHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ProjectDeleteRequest : Tea.TeaModel {
    public var thirdPartId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
    }
}

public class ProjectDeleteResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ProjectDeleteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ProjectDeleteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ProjectDeleteResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ProjectModifyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class ProjectModifyRequest : Tea.TeaModel {
    public var code: String?

    public var projectName: String?

    public var thirdPartCostCenterId: String?

    public var thirdPartId: String?

    public var thirdPartInvoiceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.projectName != nil {
            map["project_name"] = self.projectName!
        }
        if self.thirdPartCostCenterId != nil {
            map["third_part_cost_center_id"] = self.thirdPartCostCenterId!
        }
        if self.thirdPartId != nil {
            map["third_part_id"] = self.thirdPartId!
        }
        if self.thirdPartInvoiceId != nil {
            map["third_part_invoice_id"] = self.thirdPartInvoiceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("project_name") && dict["project_name"] != nil {
            self.projectName = dict["project_name"] as! String
        }
        if dict.keys.contains("third_part_cost_center_id") && dict["third_part_cost_center_id"] != nil {
            self.thirdPartCostCenterId = dict["third_part_cost_center_id"] as! String
        }
        if dict.keys.contains("third_part_id") && dict["third_part_id"] != nil {
            self.thirdPartId = dict["third_part_id"] as! String
        }
        if dict.keys.contains("third_part_invoice_id") && dict["third_part_invoice_id"] != nil {
            self.thirdPartInvoiceId = dict["third_part_invoice_id"] as! String
        }
    }
}

public class ProjectModifyResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class ProjectModifyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ProjectModifyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = ProjectModifyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class QueryReimbursementOrderHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class QueryReimbursementOrderRequest : Tea.TeaModel {
    public var reimbOrderNo: String?

    public var subCorpId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.reimbOrderNo != nil {
            map["reimb_order_no"] = self.reimbOrderNo!
        }
        if self.subCorpId != nil {
            map["sub_corp_id"] = self.subCorpId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("reimb_order_no") && dict["reimb_order_no"] != nil {
            self.reimbOrderNo = dict["reimb_order_no"] as! String
        }
        if dict.keys.contains("sub_corp_id") && dict["sub_corp_id"] != nil {
            self.subCorpId = dict["sub_corp_id"] as! String
        }
    }
}

public class QueryReimbursementOrderResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Expenses : Tea.TeaModel {
            public class ExpenseCompositions : Tea.TeaModel {
                public var billSettlementId: Int64?

                public var capitalDirection: String?

                public var feeType: String?

                public var orderId: String?

                public var remark: String?

                public var remindTagList: [String]?

                public var settlementAmount: String?

                public var settlementTime: String?

                public var voucherType: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.billSettlementId != nil {
                        map["bill_settlement_id"] = self.billSettlementId!
                    }
                    if self.capitalDirection != nil {
                        map["capital_direction"] = self.capitalDirection!
                    }
                    if self.feeType != nil {
                        map["fee_type"] = self.feeType!
                    }
                    if self.orderId != nil {
                        map["order_id"] = self.orderId!
                    }
                    if self.remark != nil {
                        map["remark"] = self.remark!
                    }
                    if self.remindTagList != nil {
                        map["remind_tag_list"] = self.remindTagList!
                    }
                    if self.settlementAmount != nil {
                        map["settlement_amount"] = self.settlementAmount!
                    }
                    if self.settlementTime != nil {
                        map["settlement_time"] = self.settlementTime!
                    }
                    if self.voucherType != nil {
                        map["voucher_type"] = self.voucherType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("bill_settlement_id") && dict["bill_settlement_id"] != nil {
                        self.billSettlementId = dict["bill_settlement_id"] as! Int64
                    }
                    if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                        self.capitalDirection = dict["capital_direction"] as! String
                    }
                    if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                        self.feeType = dict["fee_type"] as! String
                    }
                    if dict.keys.contains("order_id") && dict["order_id"] != nil {
                        self.orderId = dict["order_id"] as! String
                    }
                    if dict.keys.contains("remark") && dict["remark"] != nil {
                        self.remark = dict["remark"] as! String
                    }
                    if dict.keys.contains("remind_tag_list") && dict["remind_tag_list"] != nil {
                        self.remindTagList = dict["remind_tag_list"] as! [String]
                    }
                    if dict.keys.contains("settlement_amount") && dict["settlement_amount"] != nil {
                        self.settlementAmount = dict["settlement_amount"] as! String
                    }
                    if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                        self.settlementTime = dict["settlement_time"] as! String
                    }
                    if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                        self.voucherType = dict["voucher_type"] as! Int32
                    }
                }
            }
            public var amount: String?

            public var currency: String?

            public var expenseCity: String?

            public var expenseCompositions: [QueryReimbursementOrderResponseBody.Module.Expenses.ExpenseCompositions]?

            public var expenseTime: String?

            public var expenseType: String?

            public var expenseTypeCode: String?

            public var reimbExpenseId: Int64?

            public var remark: String?

            public var settlementType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amount != nil {
                    map["amount"] = self.amount!
                }
                if self.currency != nil {
                    map["currency"] = self.currency!
                }
                if self.expenseCity != nil {
                    map["expense_city"] = self.expenseCity!
                }
                if self.expenseCompositions != nil {
                    var tmp : [Any] = []
                    for k in self.expenseCompositions! {
                        tmp.append(k.toMap())
                    }
                    map["expense_compositions"] = tmp
                }
                if self.expenseTime != nil {
                    map["expense_time"] = self.expenseTime!
                }
                if self.expenseType != nil {
                    map["expense_type"] = self.expenseType!
                }
                if self.expenseTypeCode != nil {
                    map["expense_type_code"] = self.expenseTypeCode!
                }
                if self.reimbExpenseId != nil {
                    map["reimb_expense_id"] = self.reimbExpenseId!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("amount") && dict["amount"] != nil {
                    self.amount = dict["amount"] as! String
                }
                if dict.keys.contains("currency") && dict["currency"] != nil {
                    self.currency = dict["currency"] as! String
                }
                if dict.keys.contains("expense_city") && dict["expense_city"] != nil {
                    self.expenseCity = dict["expense_city"] as! String
                }
                if dict.keys.contains("expense_compositions") && dict["expense_compositions"] != nil {
                    var tmp : [QueryReimbursementOrderResponseBody.Module.Expenses.ExpenseCompositions] = []
                    for v in dict["expense_compositions"] as! [Any] {
                        var model = QueryReimbursementOrderResponseBody.Module.Expenses.ExpenseCompositions()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.expenseCompositions = tmp
                }
                if dict.keys.contains("expense_time") && dict["expense_time"] != nil {
                    self.expenseTime = dict["expense_time"] as! String
                }
                if dict.keys.contains("expense_type") && dict["expense_type"] != nil {
                    self.expenseType = dict["expense_type"] as! String
                }
                if dict.keys.contains("expense_type_code") && dict["expense_type_code"] != nil {
                    self.expenseTypeCode = dict["expense_type_code"] as! String
                }
                if dict.keys.contains("reimb_expense_id") && dict["reimb_expense_id"] != nil {
                    self.reimbExpenseId = dict["reimb_expense_id"] as! Int64
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
            }
        }
        public class Itineraries : Tea.TeaModel {
            public var arrCity: String?

            public var arrDate: String?

            public var depCity: String?

            public var depDate: String?

            public var trafficWay: String?

            public var tripWay: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depDate != nil {
                    map["dep_date"] = self.depDate!
                }
                if self.trafficWay != nil {
                    map["traffic_way"] = self.trafficWay!
                }
                if self.tripWay != nil {
                    map["trip_way"] = self.tripWay!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                    self.depDate = dict["dep_date"] as! String
                }
                if dict.keys.contains("traffic_way") && dict["traffic_way"] != nil {
                    self.trafficWay = dict["traffic_way"] as! String
                }
                if dict.keys.contains("trip_way") && dict["trip_way"] != nil {
                    self.tripWay = dict["trip_way"] as! String
                }
            }
        }
        public class PaymentInfos : Tea.TeaModel {
            public var amount: String?

            public var payeeUserId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amount != nil {
                    map["amount"] = self.amount!
                }
                if self.payeeUserId != nil {
                    map["payee_user_id"] = self.payeeUserId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("amount") && dict["amount"] != nil {
                    self.amount = dict["amount"] as! String
                }
                if dict.keys.contains("payee_user_id") && dict["payee_user_id"] != nil {
                    self.payeeUserId = dict["payee_user_id"] as! String
                }
            }
        }
        public var companyAmount: String?

        public var companyPayAmount: String?

        public var corpId: String?

        public var costCenterCode: String?

        public var costCenterName: String?

        public var expenses: [QueryReimbursementOrderResponseBody.Module.Expenses]?

        public var expensesCoverDeptId: String?

        public var expensesCoverDeptName: String?

        public var expensesCoverInvoiceTitle: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var isDeleted: String?

        public var itineraries: [QueryReimbursementOrderResponseBody.Module.Itineraries]?

        public var paymentInfos: [QueryReimbursementOrderResponseBody.Module.PaymentInfos]?

        public var personalAmount: String?

        public var projectCode: String?

        public var projectName: String?

        public var reason: String?

        public var reimbursementNo: String?

        public var remark: String?

        public var status: String?

        public var travelThirdApplyId: String?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.companyAmount != nil {
                map["company_amount"] = self.companyAmount!
            }
            if self.companyPayAmount != nil {
                map["company_pay_amount"] = self.companyPayAmount!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.costCenterCode != nil {
                map["cost_center_code"] = self.costCenterCode!
            }
            if self.costCenterName != nil {
                map["cost_center_name"] = self.costCenterName!
            }
            if self.expenses != nil {
                var tmp : [Any] = []
                for k in self.expenses! {
                    tmp.append(k.toMap())
                }
                map["expenses"] = tmp
            }
            if self.expensesCoverDeptId != nil {
                map["expenses_cover_dept_id"] = self.expensesCoverDeptId!
            }
            if self.expensesCoverDeptName != nil {
                map["expenses_cover_dept_name"] = self.expensesCoverDeptName!
            }
            if self.expensesCoverInvoiceTitle != nil {
                map["expenses_cover_invoice_title"] = self.expensesCoverInvoiceTitle!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.isDeleted != nil {
                map["is_deleted"] = self.isDeleted!
            }
            if self.itineraries != nil {
                var tmp : [Any] = []
                for k in self.itineraries! {
                    tmp.append(k.toMap())
                }
                map["itineraries"] = tmp
            }
            if self.paymentInfos != nil {
                var tmp : [Any] = []
                for k in self.paymentInfos! {
                    tmp.append(k.toMap())
                }
                map["payment_infos"] = tmp
            }
            if self.personalAmount != nil {
                map["personal_amount"] = self.personalAmount!
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectName != nil {
                map["project_name"] = self.projectName!
            }
            if self.reason != nil {
                map["reason"] = self.reason!
            }
            if self.reimbursementNo != nil {
                map["reimbursement_no"] = self.reimbursementNo!
            }
            if self.remark != nil {
                map["remark"] = self.remark!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.travelThirdApplyId != nil {
                map["travel_third_apply_id"] = self.travelThirdApplyId!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("company_amount") && dict["company_amount"] != nil {
                self.companyAmount = dict["company_amount"] as! String
            }
            if dict.keys.contains("company_pay_amount") && dict["company_pay_amount"] != nil {
                self.companyPayAmount = dict["company_pay_amount"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("cost_center_code") && dict["cost_center_code"] != nil {
                self.costCenterCode = dict["cost_center_code"] as! String
            }
            if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                self.costCenterName = dict["cost_center_name"] as! String
            }
            if dict.keys.contains("expenses") && dict["expenses"] != nil {
                var tmp : [QueryReimbursementOrderResponseBody.Module.Expenses] = []
                for v in dict["expenses"] as! [Any] {
                    var model = QueryReimbursementOrderResponseBody.Module.Expenses()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.expenses = tmp
            }
            if dict.keys.contains("expenses_cover_dept_id") && dict["expenses_cover_dept_id"] != nil {
                self.expensesCoverDeptId = dict["expenses_cover_dept_id"] as! String
            }
            if dict.keys.contains("expenses_cover_dept_name") && dict["expenses_cover_dept_name"] != nil {
                self.expensesCoverDeptName = dict["expenses_cover_dept_name"] as! String
            }
            if dict.keys.contains("expenses_cover_invoice_title") && dict["expenses_cover_invoice_title"] != nil {
                self.expensesCoverInvoiceTitle = dict["expenses_cover_invoice_title"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("is_deleted") && dict["is_deleted"] != nil {
                self.isDeleted = dict["is_deleted"] as! String
            }
            if dict.keys.contains("itineraries") && dict["itineraries"] != nil {
                var tmp : [QueryReimbursementOrderResponseBody.Module.Itineraries] = []
                for v in dict["itineraries"] as! [Any] {
                    var model = QueryReimbursementOrderResponseBody.Module.Itineraries()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.itineraries = tmp
            }
            if dict.keys.contains("payment_infos") && dict["payment_infos"] != nil {
                var tmp : [QueryReimbursementOrderResponseBody.Module.PaymentInfos] = []
                for v in dict["payment_infos"] as! [Any] {
                    var model = QueryReimbursementOrderResponseBody.Module.PaymentInfos()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.paymentInfos = tmp
            }
            if dict.keys.contains("personal_amount") && dict["personal_amount"] != nil {
                self.personalAmount = dict["personal_amount"] as! String
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_name") && dict["project_name"] != nil {
                self.projectName = dict["project_name"] as! String
            }
            if dict.keys.contains("reason") && dict["reason"] != nil {
                self.reason = dict["reason"] as! String
            }
            if dict.keys.contains("reimbursement_no") && dict["reimbursement_no"] != nil {
                self.reimbursementNo = dict["reimbursement_no"] as! String
            }
            if dict.keys.contains("remark") && dict["remark"] != nil {
                self.remark = dict["remark"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! String
            }
            if dict.keys.contains("travel_third_apply_id") && dict["travel_third_apply_id"] != nil {
                self.travelThirdApplyId = dict["travel_third_apply_id"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: QueryReimbursementOrderResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = QueryReimbursementOrderResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class QueryReimbursementOrderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryReimbursementOrderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = QueryReimbursementOrderResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class SyncSingleUserHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class SyncSingleUserRequest : Tea.TeaModel {
    public var email: String?

    public var jobNo: String?

    public var leaveStatus: Int32?

    public var managerUserId: String?

    public var phone: String?

    public var position: String?

    public var positionLevel: String?

    public var realNameEn: String?

    public var thirdDepartIdList: [String]?

    public var userId: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.email != nil {
            map["email"] = self.email!
        }
        if self.jobNo != nil {
            map["job_no"] = self.jobNo!
        }
        if self.leaveStatus != nil {
            map["leave_status"] = self.leaveStatus!
        }
        if self.managerUserId != nil {
            map["manager_user_id"] = self.managerUserId!
        }
        if self.phone != nil {
            map["phone"] = self.phone!
        }
        if self.position != nil {
            map["position"] = self.position!
        }
        if self.positionLevel != nil {
            map["position_level"] = self.positionLevel!
        }
        if self.realNameEn != nil {
            map["real_name_en"] = self.realNameEn!
        }
        if self.thirdDepartIdList != nil {
            map["third_depart_id_list"] = self.thirdDepartIdList!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("email") && dict["email"] != nil {
            self.email = dict["email"] as! String
        }
        if dict.keys.contains("job_no") && dict["job_no"] != nil {
            self.jobNo = dict["job_no"] as! String
        }
        if dict.keys.contains("leave_status") && dict["leave_status"] != nil {
            self.leaveStatus = dict["leave_status"] as! Int32
        }
        if dict.keys.contains("manager_user_id") && dict["manager_user_id"] != nil {
            self.managerUserId = dict["manager_user_id"] as! String
        }
        if dict.keys.contains("phone") && dict["phone"] != nil {
            self.phone = dict["phone"] as! String
        }
        if dict.keys.contains("position") && dict["position"] != nil {
            self.position = dict["position"] as! String
        }
        if dict.keys.contains("position_level") && dict["position_level"] != nil {
            self.positionLevel = dict["position_level"] as! String
        }
        if dict.keys.contains("real_name_en") && dict["real_name_en"] != nil {
            self.realNameEn = dict["real_name_en"] as! String
        }
        if dict.keys.contains("third_depart_id_list") && dict["third_depart_id_list"] != nil {
            self.thirdDepartIdList = dict["third_depart_id_list"] as! [String]
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
    }
}

public class SyncSingleUserShrinkRequest : Tea.TeaModel {
    public var email: String?

    public var jobNo: String?

    public var leaveStatus: Int32?

    public var managerUserId: String?

    public var phone: String?

    public var position: String?

    public var positionLevel: String?

    public var realNameEn: String?

    public var thirdDepartIdListShrink: String?

    public var userId: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.email != nil {
            map["email"] = self.email!
        }
        if self.jobNo != nil {
            map["job_no"] = self.jobNo!
        }
        if self.leaveStatus != nil {
            map["leave_status"] = self.leaveStatus!
        }
        if self.managerUserId != nil {
            map["manager_user_id"] = self.managerUserId!
        }
        if self.phone != nil {
            map["phone"] = self.phone!
        }
        if self.position != nil {
            map["position"] = self.position!
        }
        if self.positionLevel != nil {
            map["position_level"] = self.positionLevel!
        }
        if self.realNameEn != nil {
            map["real_name_en"] = self.realNameEn!
        }
        if self.thirdDepartIdListShrink != nil {
            map["third_depart_id_list"] = self.thirdDepartIdListShrink!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        if self.userName != nil {
            map["user_name"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("email") && dict["email"] != nil {
            self.email = dict["email"] as! String
        }
        if dict.keys.contains("job_no") && dict["job_no"] != nil {
            self.jobNo = dict["job_no"] as! String
        }
        if dict.keys.contains("leave_status") && dict["leave_status"] != nil {
            self.leaveStatus = dict["leave_status"] as! Int32
        }
        if dict.keys.contains("manager_user_id") && dict["manager_user_id"] != nil {
            self.managerUserId = dict["manager_user_id"] as! String
        }
        if dict.keys.contains("phone") && dict["phone"] != nil {
            self.phone = dict["phone"] as! String
        }
        if dict.keys.contains("position") && dict["position"] != nil {
            self.position = dict["position"] as! String
        }
        if dict.keys.contains("position_level") && dict["position_level"] != nil {
            self.positionLevel = dict["position_level"] as! String
        }
        if dict.keys.contains("real_name_en") && dict["real_name_en"] != nil {
            self.realNameEn = dict["real_name_en"] as! String
        }
        if dict.keys.contains("third_depart_id_list") && dict["third_depart_id_list"] != nil {
            self.thirdDepartIdListShrink = dict["third_depart_id_list"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
        if dict.keys.contains("user_name") && dict["user_name"] != nil {
            self.userName = dict["user_name"] as! String
        }
    }
}

public class SyncSingleUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class SyncSingleUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SyncSingleUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = SyncSingleUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class SyncThirdUserMappingHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class SyncThirdUserMappingRequest : Tea.TeaModel {
    public var status: Int32?

    public var thirdChannelType: String?

    public var thirdUserId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.thirdChannelType != nil {
            map["third_channel_type"] = self.thirdChannelType!
        }
        if self.thirdUserId != nil {
            map["third_user_id"] = self.thirdUserId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("status") && dict["status"] != nil {
            self.status = dict["status"] as! Int32
        }
        if dict.keys.contains("third_channel_type") && dict["third_channel_type"] != nil {
            self.thirdChannelType = dict["third_channel_type"] as! String
        }
        if dict.keys.contains("third_user_id") && dict["third_user_id"] != nil {
            self.thirdUserId = dict["third_user_id"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class SyncThirdUserMappingResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class SyncThirdUserMappingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SyncThirdUserMappingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = SyncThirdUserMappingResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TBAccountInfoQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TBAccountInfoQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var tbAccount: String?

        public var tbBond: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tbAccount != nil {
                map["tb_account"] = self.tbAccount!
            }
            if self.tbBond != nil {
                map["tb_bond"] = self.tbBond!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("tb_account") && dict["tb_account"] != nil {
                self.tbAccount = dict["tb_account"] as! String
            }
            if dict.keys.contains("tb_bond") && dict["tb_bond"] != nil {
                self.tbBond = dict["tb_bond"] as! Bool
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TBAccountInfoQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TBAccountInfoQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TBAccountInfoQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TBAccountInfoQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TBAccountInfoQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TBAccountUnbindHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TBAccountUnbindResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var module: Bool?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            self.module = dict["module"] as! Bool
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TBAccountUnbindResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TBAccountUnbindResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TBAccountUnbindResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TicketChangingApplyHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TicketChangingApplyRequest : Tea.TeaModel {
    public class ModifyFlightInfoList : Tea.TeaModel {
        public class PassengerInfoList : Tea.TeaModel {
            public var originFlightNo: String?

            public var outUserId: String?

            public var passengerName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.originFlightNo != nil {
                    map["origin_flight_no"] = self.originFlightNo!
                }
                if self.outUserId != nil {
                    map["out_user_id"] = self.outUserId!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("origin_flight_no") && dict["origin_flight_no"] != nil {
                    self.originFlightNo = dict["origin_flight_no"] as! String
                }
                if dict.keys.contains("out_user_id") && dict["out_user_id"] != nil {
                    self.outUserId = dict["out_user_id"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
            }
        }
        public var arrCity: String?

        public var cabin: String?

        public var depCity: String?

        public var depDate: String?

        public var flightNo: String?

        public var passengerInfoList: [TicketChangingApplyRequest.ModifyFlightInfoList.PassengerInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCity != nil {
                map["arr_city"] = self.arrCity!
            }
            if self.cabin != nil {
                map["cabin"] = self.cabin!
            }
            if self.depCity != nil {
                map["dep_city"] = self.depCity!
            }
            if self.depDate != nil {
                map["dep_date"] = self.depDate!
            }
            if self.flightNo != nil {
                map["flight_no"] = self.flightNo!
            }
            if self.passengerInfoList != nil {
                var tmp : [Any] = []
                for k in self.passengerInfoList! {
                    tmp.append(k.toMap())
                }
                map["passenger_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                self.arrCity = dict["arr_city"] as! String
            }
            if dict.keys.contains("cabin") && dict["cabin"] != nil {
                self.cabin = dict["cabin"] as! String
            }
            if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                self.depCity = dict["dep_city"] as! String
            }
            if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
                self.depDate = dict["dep_date"] as! String
            }
            if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                self.flightNo = dict["flight_no"] as! String
            }
            if dict.keys.contains("passenger_info_list") && dict["passenger_info_list"] != nil {
                var tmp : [TicketChangingApplyRequest.ModifyFlightInfoList.PassengerInfoList] = []
                for v in dict["passenger_info_list"] as! [Any] {
                    var model = TicketChangingApplyRequest.ModifyFlightInfoList.PassengerInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerInfoList = tmp
            }
        }
    }
    public var disOrderId: String?

    public var disSubOrderId: String?

    public var isVoluntary: Int32?

    public var modifyFlightInfoList: [TicketChangingApplyRequest.ModifyFlightInfoList]?

    public var otaItemId: String?

    public var reason: String?

    public var sessionId: String?

    public var whetherRetry: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.modifyFlightInfoList != nil {
            var tmp : [Any] = []
            for k in self.modifyFlightInfoList! {
                tmp.append(k.toMap())
            }
            map["modify_flight_info_list"] = tmp
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        if self.reason != nil {
            map["reason"] = self.reason!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.whetherRetry != nil {
            map["whether_retry"] = self.whetherRetry!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("modify_flight_info_list") && dict["modify_flight_info_list"] != nil {
            var tmp : [TicketChangingApplyRequest.ModifyFlightInfoList] = []
            for v in dict["modify_flight_info_list"] as! [Any] {
                var model = TicketChangingApplyRequest.ModifyFlightInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.modifyFlightInfoList = tmp
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
        if dict.keys.contains("reason") && dict["reason"] != nil {
            self.reason = dict["reason"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("whether_retry") && dict["whether_retry"] != nil {
            self.whetherRetry = dict["whether_retry"] as! Bool
        }
    }
}

public class TicketChangingApplyShrinkRequest : Tea.TeaModel {
    public var disOrderId: String?

    public var disSubOrderId: String?

    public var isVoluntary: Int32?

    public var modifyFlightInfoListShrink: String?

    public var otaItemId: String?

    public var reason: String?

    public var sessionId: String?

    public var whetherRetry: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.modifyFlightInfoListShrink != nil {
            map["modify_flight_info_list"] = self.modifyFlightInfoListShrink!
        }
        if self.otaItemId != nil {
            map["ota_item_id"] = self.otaItemId!
        }
        if self.reason != nil {
            map["reason"] = self.reason!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        if self.whetherRetry != nil {
            map["whether_retry"] = self.whetherRetry!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("modify_flight_info_list") && dict["modify_flight_info_list"] != nil {
            self.modifyFlightInfoListShrink = dict["modify_flight_info_list"] as! String
        }
        if dict.keys.contains("ota_item_id") && dict["ota_item_id"] != nil {
            self.otaItemId = dict["ota_item_id"] as! String
        }
        if dict.keys.contains("reason") && dict["reason"] != nil {
            self.reason = dict["reason"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
        if dict.keys.contains("whether_retry") && dict["whether_retry"] != nil {
            self.whetherRetry = dict["whether_retry"] as! Bool
        }
    }
}

public class TicketChangingApplyResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var bookingChangedTotalFee: Int32?

        public var bookingOriginTotalFee: Int32?

        public var bookingPriceChanged: Bool?

        public var btripOrderId: Int64?

        public var btripSubOrderId: Int64?

        public var canPay: Bool?

        public var changeFee: Int64?

        public var deadlineTime: String?

        public var disOrderId: String?

        public var disSubOrderId: String?

        public var maxRetryTimes: Int32?

        public var nextRetryInterval: Int64?

        public var retry: Bool?

        public var retryClientTips: String?

        public var status: Int32?

        public var upgradeFee: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bookingChangedTotalFee != nil {
                map["booking_changed_total_fee"] = self.bookingChangedTotalFee!
            }
            if self.bookingOriginTotalFee != nil {
                map["booking_origin_total_fee"] = self.bookingOriginTotalFee!
            }
            if self.bookingPriceChanged != nil {
                map["booking_price_changed"] = self.bookingPriceChanged!
            }
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.btripSubOrderId != nil {
                map["btrip_sub_order_id"] = self.btripSubOrderId!
            }
            if self.canPay != nil {
                map["can_pay"] = self.canPay!
            }
            if self.changeFee != nil {
                map["change_fee"] = self.changeFee!
            }
            if self.deadlineTime != nil {
                map["deadline_time"] = self.deadlineTime!
            }
            if self.disOrderId != nil {
                map["dis_order_id"] = self.disOrderId!
            }
            if self.disSubOrderId != nil {
                map["dis_sub_order_id"] = self.disSubOrderId!
            }
            if self.maxRetryTimes != nil {
                map["max_retry_times"] = self.maxRetryTimes!
            }
            if self.nextRetryInterval != nil {
                map["next_retry_interval"] = self.nextRetryInterval!
            }
            if self.retry != nil {
                map["retry"] = self.retry!
            }
            if self.retryClientTips != nil {
                map["retry_client_tips"] = self.retryClientTips!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.upgradeFee != nil {
                map["upgrade_fee"] = self.upgradeFee!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("booking_changed_total_fee") && dict["booking_changed_total_fee"] != nil {
                self.bookingChangedTotalFee = dict["booking_changed_total_fee"] as! Int32
            }
            if dict.keys.contains("booking_origin_total_fee") && dict["booking_origin_total_fee"] != nil {
                self.bookingOriginTotalFee = dict["booking_origin_total_fee"] as! Int32
            }
            if dict.keys.contains("booking_price_changed") && dict["booking_price_changed"] != nil {
                self.bookingPriceChanged = dict["booking_price_changed"] as! Bool
            }
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! Int64
            }
            if dict.keys.contains("btrip_sub_order_id") && dict["btrip_sub_order_id"] != nil {
                self.btripSubOrderId = dict["btrip_sub_order_id"] as! Int64
            }
            if dict.keys.contains("can_pay") && dict["can_pay"] != nil {
                self.canPay = dict["can_pay"] as! Bool
            }
            if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                self.changeFee = dict["change_fee"] as! Int64
            }
            if dict.keys.contains("deadline_time") && dict["deadline_time"] != nil {
                self.deadlineTime = dict["deadline_time"] as! String
            }
            if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
                self.disOrderId = dict["dis_order_id"] as! String
            }
            if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
                self.disSubOrderId = dict["dis_sub_order_id"] as! String
            }
            if dict.keys.contains("max_retry_times") && dict["max_retry_times"] != nil {
                self.maxRetryTimes = dict["max_retry_times"] as! Int32
            }
            if dict.keys.contains("next_retry_interval") && dict["next_retry_interval"] != nil {
                self.nextRetryInterval = dict["next_retry_interval"] as! Int64
            }
            if dict.keys.contains("retry") && dict["retry"] != nil {
                self.retry = dict["retry"] as! Bool
            }
            if dict.keys.contains("retry_client_tips") && dict["retry_client_tips"] != nil {
                self.retryClientTips = dict["retry_client_tips"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("upgrade_fee") && dict["upgrade_fee"] != nil {
                self.upgradeFee = dict["upgrade_fee"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TicketChangingApplyResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TicketChangingApplyResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TicketChangingApplyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TicketChangingApplyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TicketChangingApplyResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TicketChangingCancelHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TicketChangingCancelRequest : Tea.TeaModel {
    public var disOrderId: String?

    public var disSubOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
    }
}

public class TicketChangingCancelResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var cancelTime: String?

        public var disSubOrderId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cancelTime != nil {
                map["cancel_time"] = self.cancelTime!
            }
            if self.disSubOrderId != nil {
                map["dis_sub_order_id"] = self.disSubOrderId!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cancel_time") && dict["cancel_time"] != nil {
                self.cancelTime = dict["cancel_time"] as! String
            }
            if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
                self.disSubOrderId = dict["dis_sub_order_id"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TicketChangingCancelResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TicketChangingCancelResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TicketChangingCancelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TicketChangingCancelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TicketChangingCancelResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TicketChangingDetailHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TicketChangingDetailRequest : Tea.TeaModel {
    public var disOrderId: String?

    public var disSubOrderId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
    }
}

public class TicketChangingDetailResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightInfoList : Tea.TeaModel {
            public var airlineCode: String?

            public var airlineName: String?

            public var airlineSimpleName: String?

            public var arrAirport: String?

            public var arrAirportCode: String?

            public var arrAirportCodeName: String?

            public var arrCity: String?

            public var arrCityCode: String?

            public var arrTerminal: String?

            public var arrTime: String?

            public var baggage: String?

            public var buildPrice: Int64?

            public var cabin: String?

            public var cabinClass: String?

            public var carrier: String?

            public var depAirport: String?

            public var depAirportCode: String?

            public var depAirportCodeName: String?

            public var depCity: String?

            public var depCityCode: String?

            public var depTerminal: String?

            public var depTime: String?

            public var flightNo: String?

            public var lastCabin: String?

            public var lastFlightNo: String?

            public var meal: String?

            public var oilPrice: Int64?

            public var segmentType: Int32?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public var ticketPrice: Int64?

            public var tuigaiqianInfo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineCode != nil {
                    map["airline_code"] = self.airlineCode!
                }
                if self.airlineName != nil {
                    map["airline_name"] = self.airlineName!
                }
                if self.airlineSimpleName != nil {
                    map["airline_simple_name"] = self.airlineSimpleName!
                }
                if self.arrAirport != nil {
                    map["arr_airport"] = self.arrAirport!
                }
                if self.arrAirportCode != nil {
                    map["arr_airport_code"] = self.arrAirportCode!
                }
                if self.arrAirportCodeName != nil {
                    map["arr_airport_code_name"] = self.arrAirportCodeName!
                }
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrTerminal != nil {
                    map["arr_terminal"] = self.arrTerminal!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.baggage != nil {
                    map["baggage"] = self.baggage!
                }
                if self.buildPrice != nil {
                    map["build_price"] = self.buildPrice!
                }
                if self.cabin != nil {
                    map["cabin"] = self.cabin!
                }
                if self.cabinClass != nil {
                    map["cabin_class"] = self.cabinClass!
                }
                if self.carrier != nil {
                    map["carrier"] = self.carrier!
                }
                if self.depAirport != nil {
                    map["dep_airport"] = self.depAirport!
                }
                if self.depAirportCode != nil {
                    map["dep_airport_code"] = self.depAirportCode!
                }
                if self.depAirportCodeName != nil {
                    map["dep_airport_code_name"] = self.depAirportCodeName!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depTerminal != nil {
                    map["dep_terminal"] = self.depTerminal!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.lastCabin != nil {
                    map["last_cabin"] = self.lastCabin!
                }
                if self.lastFlightNo != nil {
                    map["last_flight_no"] = self.lastFlightNo!
                }
                if self.meal != nil {
                    map["meal"] = self.meal!
                }
                if self.oilPrice != nil {
                    map["oil_price"] = self.oilPrice!
                }
                if self.segmentType != nil {
                    map["segment_type"] = self.segmentType!
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.tuigaiqianInfo != nil {
                    map["tuigaiqian_info"] = self.tuigaiqianInfo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                    self.airlineCode = dict["airline_code"] as! String
                }
                if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                    self.airlineName = dict["airline_name"] as! String
                }
                if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                    self.airlineSimpleName = dict["airline_simple_name"] as! String
                }
                if dict.keys.contains("arr_airport") && dict["arr_airport"] != nil {
                    self.arrAirport = dict["arr_airport"] as! String
                }
                if dict.keys.contains("arr_airport_code") && dict["arr_airport_code"] != nil {
                    self.arrAirportCode = dict["arr_airport_code"] as! String
                }
                if dict.keys.contains("arr_airport_code_name") && dict["arr_airport_code_name"] != nil {
                    self.arrAirportCodeName = dict["arr_airport_code_name"] as! String
                }
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_terminal") && dict["arr_terminal"] != nil {
                    self.arrTerminal = dict["arr_terminal"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("baggage") && dict["baggage"] != nil {
                    self.baggage = dict["baggage"] as! String
                }
                if dict.keys.contains("build_price") && dict["build_price"] != nil {
                    self.buildPrice = dict["build_price"] as! Int64
                }
                if dict.keys.contains("cabin") && dict["cabin"] != nil {
                    self.cabin = dict["cabin"] as! String
                }
                if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                    self.cabinClass = dict["cabin_class"] as! String
                }
                if dict.keys.contains("carrier") && dict["carrier"] != nil {
                    self.carrier = dict["carrier"] as! String
                }
                if dict.keys.contains("dep_airport") && dict["dep_airport"] != nil {
                    self.depAirport = dict["dep_airport"] as! String
                }
                if dict.keys.contains("dep_airport_code") && dict["dep_airport_code"] != nil {
                    self.depAirportCode = dict["dep_airport_code"] as! String
                }
                if dict.keys.contains("dep_airport_code_name") && dict["dep_airport_code_name"] != nil {
                    self.depAirportCodeName = dict["dep_airport_code_name"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_terminal") && dict["dep_terminal"] != nil {
                    self.depTerminal = dict["dep_terminal"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("last_cabin") && dict["last_cabin"] != nil {
                    self.lastCabin = dict["last_cabin"] as! String
                }
                if dict.keys.contains("last_flight_no") && dict["last_flight_no"] != nil {
                    self.lastFlightNo = dict["last_flight_no"] as! String
                }
                if dict.keys.contains("meal") && dict["meal"] != nil {
                    self.meal = dict["meal"] as! String
                }
                if dict.keys.contains("oil_price") && dict["oil_price"] != nil {
                    self.oilPrice = dict["oil_price"] as! Int64
                }
                if dict.keys.contains("segment_type") && dict["segment_type"] != nil {
                    self.segmentType = dict["segment_type"] as! Int32
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Int64
                }
                if dict.keys.contains("tuigaiqian_info") && dict["tuigaiqian_info"] != nil {
                    self.tuigaiqianInfo = dict["tuigaiqian_info"] as! String
                }
            }
        }
        public class TravelerInfoList : Tea.TeaModel {
            public var birthDate: String?

            public var certNo: String?

            public var certType: String?

            public var openTicketStatus: Int32?

            public var passengerName: String?

            public var passengerType: String?

            public var phone: String?

            public var ticketNo: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.birthDate != nil {
                    map["birth_date"] = self.birthDate!
                }
                if self.certNo != nil {
                    map["cert_no"] = self.certNo!
                }
                if self.certType != nil {
                    map["cert_type"] = self.certType!
                }
                if self.openTicketStatus != nil {
                    map["open_ticket_status"] = self.openTicketStatus!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.passengerType != nil {
                    map["passenger_type"] = self.passengerType!
                }
                if self.phone != nil {
                    map["phone"] = self.phone!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("birth_date") && dict["birth_date"] != nil {
                    self.birthDate = dict["birth_date"] as! String
                }
                if dict.keys.contains("cert_no") && dict["cert_no"] != nil {
                    self.certNo = dict["cert_no"] as! String
                }
                if dict.keys.contains("cert_type") && dict["cert_type"] != nil {
                    self.certType = dict["cert_type"] as! String
                }
                if dict.keys.contains("open_ticket_status") && dict["open_ticket_status"] != nil {
                    self.openTicketStatus = dict["open_ticket_status"] as! Int32
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                    self.passengerType = dict["passenger_type"] as! String
                }
                if dict.keys.contains("phone") && dict["phone"] != nil {
                    self.phone = dict["phone"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public var alipayTradeNo: String?

        public var btripOrderId: Int64?

        public var btripSubOrderId: Int64?

        public var disOrderId: String?

        public var disSubOrderId: String?

        public var extra: String?

        public var flightInfoList: [TicketChangingDetailResponseBody.Module.FlightInfoList]?

        public var lastPayTime: String?

        public var payStatus: Int32?

        public var payTime: String?

        public var settlePrice: Int64?

        public var settleType: Int32?

        public var status: Int32?

        public var totalChangePrice: Int64?

        public var totalPrice: Int64?

        public var totalUpgradePrice: Int64?

        public var travelerInfoList: [TicketChangingDetailResponseBody.Module.TravelerInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alipayTradeNo != nil {
                map["alipay_trade_no"] = self.alipayTradeNo!
            }
            if self.btripOrderId != nil {
                map["btrip_order_id"] = self.btripOrderId!
            }
            if self.btripSubOrderId != nil {
                map["btrip_sub_order_id"] = self.btripSubOrderId!
            }
            if self.disOrderId != nil {
                map["dis_order_id"] = self.disOrderId!
            }
            if self.disSubOrderId != nil {
                map["dis_sub_order_id"] = self.disSubOrderId!
            }
            if self.extra != nil {
                map["extra"] = self.extra!
            }
            if self.flightInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_info_list"] = tmp
            }
            if self.lastPayTime != nil {
                map["last_pay_time"] = self.lastPayTime!
            }
            if self.payStatus != nil {
                map["pay_status"] = self.payStatus!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.settlePrice != nil {
                map["settle_price"] = self.settlePrice!
            }
            if self.settleType != nil {
                map["settle_type"] = self.settleType!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.totalChangePrice != nil {
                map["total_change_price"] = self.totalChangePrice!
            }
            if self.totalPrice != nil {
                map["total_price"] = self.totalPrice!
            }
            if self.totalUpgradePrice != nil {
                map["total_upgrade_price"] = self.totalUpgradePrice!
            }
            if self.travelerInfoList != nil {
                var tmp : [Any] = []
                for k in self.travelerInfoList! {
                    tmp.append(k.toMap())
                }
                map["traveler_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                self.alipayTradeNo = dict["alipay_trade_no"] as! String
            }
            if dict.keys.contains("btrip_order_id") && dict["btrip_order_id"] != nil {
                self.btripOrderId = dict["btrip_order_id"] as! Int64
            }
            if dict.keys.contains("btrip_sub_order_id") && dict["btrip_sub_order_id"] != nil {
                self.btripSubOrderId = dict["btrip_sub_order_id"] as! Int64
            }
            if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
                self.disOrderId = dict["dis_order_id"] as! String
            }
            if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
                self.disSubOrderId = dict["dis_sub_order_id"] as! String
            }
            if dict.keys.contains("extra") && dict["extra"] != nil {
                self.extra = dict["extra"] as! String
            }
            if dict.keys.contains("flight_info_list") && dict["flight_info_list"] != nil {
                var tmp : [TicketChangingDetailResponseBody.Module.FlightInfoList] = []
                for v in dict["flight_info_list"] as! [Any] {
                    var model = TicketChangingDetailResponseBody.Module.FlightInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightInfoList = tmp
            }
            if dict.keys.contains("last_pay_time") && dict["last_pay_time"] != nil {
                self.lastPayTime = dict["last_pay_time"] as! String
            }
            if dict.keys.contains("pay_status") && dict["pay_status"] != nil {
                self.payStatus = dict["pay_status"] as! Int32
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("settle_price") && dict["settle_price"] != nil {
                self.settlePrice = dict["settle_price"] as! Int64
            }
            if dict.keys.contains("settle_type") && dict["settle_type"] != nil {
                self.settleType = dict["settle_type"] as! Int32
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("total_change_price") && dict["total_change_price"] != nil {
                self.totalChangePrice = dict["total_change_price"] as! Int64
            }
            if dict.keys.contains("total_price") && dict["total_price"] != nil {
                self.totalPrice = dict["total_price"] as! Int64
            }
            if dict.keys.contains("total_upgrade_price") && dict["total_upgrade_price"] != nil {
                self.totalUpgradePrice = dict["total_upgrade_price"] as! Int64
            }
            if dict.keys.contains("traveler_info_list") && dict["traveler_info_list"] != nil {
                var tmp : [TicketChangingDetailResponseBody.Module.TravelerInfoList] = []
                for v in dict["traveler_info_list"] as! [Any] {
                    var model = TicketChangingDetailResponseBody.Module.TravelerInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.travelerInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TicketChangingDetailResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TicketChangingDetailResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TicketChangingDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TicketChangingDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TicketChangingDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TicketChangingEnquiryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TicketChangingEnquiryRequest : Tea.TeaModel {
    public var arrCity: String?

    public var depCity: String?

    public var disOrderId: String?

    public var isVoluntary: Int32?

    public var modifyDepartDate: String?

    public var modifyFlightNo: String?

    public var sessionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrCity != nil {
            map["arr_city"] = self.arrCity!
        }
        if self.depCity != nil {
            map["dep_city"] = self.depCity!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.modifyDepartDate != nil {
            map["modify_depart_date"] = self.modifyDepartDate!
        }
        if self.modifyFlightNo != nil {
            map["modify_flight_no"] = self.modifyFlightNo!
        }
        if self.sessionId != nil {
            map["session_id"] = self.sessionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
            self.arrCity = dict["arr_city"] as! String
        }
        if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
            self.depCity = dict["dep_city"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("modify_depart_date") && dict["modify_depart_date"] != nil {
            self.modifyDepartDate = dict["modify_depart_date"] as! String
        }
        if dict.keys.contains("modify_flight_no") && dict["modify_flight_no"] != nil {
            self.modifyFlightNo = dict["modify_flight_no"] as! String
        }
        if dict.keys.contains("session_id") && dict["session_id"] != nil {
            self.sessionId = dict["session_id"] as! String
        }
    }
}

public class TicketChangingEnquiryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightInfoList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineCode: String?

                public var airlineName: String?

                public var airlineSimpleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineName != nil {
                        map["airline_name"] = self.airlineName!
                    }
                    if self.airlineSimpleName != nil {
                        map["airline_simple_name"] = self.airlineSimpleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                        self.airlineName = dict["airline_name"] as! String
                    }
                    if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                        self.airlineSimpleName = dict["airline_simple_name"] as! String
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class CabinList : Tea.TeaModel {
                public class ChangeOtaItemRuleRq : Tea.TeaModel {
                    public class BaggageDetails : Tea.TeaModel {
                        public class BaggageSubItems : Tea.TeaModel {
                            public class BaggageSubContentVisualizes : Tea.TeaModel {
                                public class Description_ : Tea.TeaModel {
                                    public var desc: String?

                                    public var icon: String?

                                    public var image: String?

                                    public var title: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.desc != nil {
                                            map["desc"] = self.desc!
                                        }
                                        if self.icon != nil {
                                            map["icon"] = self.icon!
                                        }
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.title != nil {
                                            map["title"] = self.title!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("desc") && dict["desc"] != nil {
                                            self.desc = dict["desc"] as! String
                                        }
                                        if dict.keys.contains("icon") && dict["icon"] != nil {
                                            self.icon = dict["icon"] as! String
                                        }
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("title") && dict["title"] != nil {
                                            self.title = dict["title"] as! String
                                        }
                                    }
                                }
                                public class ImageDO : Tea.TeaModel {
                                    public var image: String?

                                    public var largest: String?

                                    public var middle: String?

                                    public var smallest: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.image != nil {
                                            map["image"] = self.image!
                                        }
                                        if self.largest != nil {
                                            map["largest"] = self.largest!
                                        }
                                        if self.middle != nil {
                                            map["middle"] = self.middle!
                                        }
                                        if self.smallest != nil {
                                            map["smallest"] = self.smallest!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any]) -> Void {
                                        if dict.keys.contains("image") && dict["image"] != nil {
                                            self.image = dict["image"] as! String
                                        }
                                        if dict.keys.contains("largest") && dict["largest"] != nil {
                                            self.largest = dict["largest"] as! String
                                        }
                                        if dict.keys.contains("middle") && dict["middle"] != nil {
                                            self.middle = dict["middle"] as! String
                                        }
                                        if dict.keys.contains("smallest") && dict["smallest"] != nil {
                                            self.smallest = dict["smallest"] as! String
                                        }
                                    }
                                }
                                public var baggageDesc: [String]?

                                public var baggageSubContentType: Int32?

                                public var description_: TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes.Description_?

                                public var imageDO: TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes.ImageDO?

                                public var isHighlight: Bool?

                                public var subTitle: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.description_?.validate()
                                    try self.imageDO?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.baggageDesc != nil {
                                        map["baggage_desc"] = self.baggageDesc!
                                    }
                                    if self.baggageSubContentType != nil {
                                        map["baggage_sub_content_type"] = self.baggageSubContentType!
                                    }
                                    if self.description_ != nil {
                                        map["description"] = self.description_?.toMap()
                                    }
                                    if self.imageDO != nil {
                                        map["imageDO"] = self.imageDO?.toMap()
                                    }
                                    if self.isHighlight != nil {
                                        map["is_highlight"] = self.isHighlight!
                                    }
                                    if self.subTitle != nil {
                                        map["subTitle"] = self.subTitle!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                        self.baggageDesc = dict["baggage_desc"] as! [String]
                                    }
                                    if dict.keys.contains("baggage_sub_content_type") && dict["baggage_sub_content_type"] != nil {
                                        self.baggageSubContentType = dict["baggage_sub_content_type"] as! Int32
                                    }
                                    if dict.keys.contains("description") && dict["description"] != nil {
                                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes.Description_()
                                        model.fromMap(dict["description"] as! [String: Any])
                                        self.description_ = model
                                    }
                                    if dict.keys.contains("imageDO") && dict["imageDO"] != nil {
                                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes.ImageDO()
                                        model.fromMap(dict["imageDO"] as! [String: Any])
                                        self.imageDO = model
                                    }
                                    if dict.keys.contains("is_highlight") && dict["is_highlight"] != nil {
                                        self.isHighlight = dict["is_highlight"] as! Bool
                                    }
                                    if dict.keys.contains("subTitle") && dict["subTitle"] != nil {
                                        self.subTitle = dict["subTitle"] as! String
                                    }
                                }
                            }
                            public class BaggageSubContents : Tea.TeaModel {
                                public var baggageDesc: String?

                                public var icon: String?

                                public var style: Int32?

                                public var subTitle: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.baggageDesc != nil {
                                        map["baggage_desc"] = self.baggageDesc!
                                    }
                                    if self.icon != nil {
                                        map["icon"] = self.icon!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    if self.subTitle != nil {
                                        map["sub_title"] = self.subTitle!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("baggage_desc") && dict["baggage_desc"] != nil {
                                        self.baggageDesc = dict["baggage_desc"] as! String
                                    }
                                    if dict.keys.contains("icon") && dict["icon"] != nil {
                                        self.icon = dict["icon"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! Int32
                                    }
                                    if dict.keys.contains("sub_title") && dict["sub_title"] != nil {
                                        self.subTitle = dict["sub_title"] as! String
                                    }
                                }
                            }
                            public var attributes: [String: Any]?

                            public var baggageSubContentVisualizes: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes]?

                            public var baggageSubContents: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContents]?

                            public var content: String?

                            public var isStruct: Bool?

                            public var ptc: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.attributes != nil {
                                    map["attributes"] = self.attributes!
                                }
                                if self.baggageSubContentVisualizes != nil {
                                    var tmp : [Any] = []
                                    for k in self.baggageSubContentVisualizes! {
                                        tmp.append(k.toMap())
                                    }
                                    map["baggage_sub_content_visualizes"] = tmp
                                }
                                if self.baggageSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.baggageSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["baggage_sub_contents"] = tmp
                                }
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("attributes") && dict["attributes"] != nil {
                                    self.attributes = dict["attributes"] as! [String: Any]
                                }
                                if dict.keys.contains("baggage_sub_content_visualizes") && dict["baggage_sub_content_visualizes"] != nil {
                                    var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes] = []
                                    for v in dict["baggage_sub_content_visualizes"] as! [Any] {
                                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContentVisualizes()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.baggageSubContentVisualizes = tmp
                                }
                                if dict.keys.contains("baggage_sub_contents") && dict["baggage_sub_contents"] != nil {
                                    var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContents] = []
                                    for v in dict["baggage_sub_contents"] as! [Any] {
                                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems.BaggageSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.baggageSubContents = tmp
                                }
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class Tips : Tea.TeaModel {
                            public var logo: String?

                            public var tipsDesc: String?

                            public var tipsImage: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.logo != nil {
                                    map["logo"] = self.logo!
                                }
                                if self.tipsDesc != nil {
                                    map["tips_desc"] = self.tipsDesc!
                                }
                                if self.tipsImage != nil {
                                    map["tips_image"] = self.tipsImage!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("logo") && dict["logo"] != nil {
                                    self.logo = dict["logo"] as! String
                                }
                                if dict.keys.contains("tips_desc") && dict["tips_desc"] != nil {
                                    self.tipsDesc = dict["tips_desc"] as! String
                                }
                                if dict.keys.contains("tips_image") && dict["tips_image"] != nil {
                                    self.tipsImage = dict["tips_image"] as! String
                                }
                            }
                        }
                        public var baggageSubItems: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems]?

                        public var index: Int32?

                        public var tableHead: String?

                        public var tips: TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.Tips?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.tips?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.baggageSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.baggageSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["baggage_sub_items"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.tips != nil {
                                map["tips"] = self.tips?.toMap()
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("baggage_sub_items") && dict["baggage_sub_items"] != nil {
                                var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems] = []
                                for v in dict["baggage_sub_items"] as! [Any] {
                                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.BaggageSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.baggageSubItems = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("tips") && dict["tips"] != nil {
                                var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails.Tips()
                                model.fromMap(dict["tips"] as! [String: Any])
                                self.tips = model
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class ChangeDetails : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var icon: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.icon != nil {
                                    map["icon"] = self.icon!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("icon") && dict["icon"] != nil {
                                    self.icon = dict["icon"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! String
                                    }
                                }
                            }
                            public var content: String?

                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.RefundSubItems]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public class RefundDetails : Tea.TeaModel {
                        public class ExtraContents : Tea.TeaModel {
                            public var content: String?

                            public var icon: String?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.icon != nil {
                                    map["icon"] = self.icon!
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("icon") && dict["icon"] != nil {
                                    self.icon = dict["icon"] as! String
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public class RefundSubItems : Tea.TeaModel {
                            public class RefundSubContents : Tea.TeaModel {
                                public var feeDesc: String?

                                public var feeRange: String?

                                public var style: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.feeDesc != nil {
                                        map["fee_desc"] = self.feeDesc!
                                    }
                                    if self.feeRange != nil {
                                        map["fee_range"] = self.feeRange!
                                    }
                                    if self.style != nil {
                                        map["style"] = self.style!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("fee_desc") && dict["fee_desc"] != nil {
                                        self.feeDesc = dict["fee_desc"] as! String
                                    }
                                    if dict.keys.contains("fee_range") && dict["fee_range"] != nil {
                                        self.feeRange = dict["fee_range"] as! String
                                    }
                                    if dict.keys.contains("style") && dict["style"] != nil {
                                        self.style = dict["style"] as! String
                                    }
                                }
                            }
                            public var content: String?

                            public var isStruct: Bool?

                            public var ptc: String?

                            public var refundSubContents: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.RefundSubItems.RefundSubContents]?

                            public var title: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.content != nil {
                                    map["content"] = self.content!
                                }
                                if self.isStruct != nil {
                                    map["is_struct"] = self.isStruct!
                                }
                                if self.ptc != nil {
                                    map["ptc"] = self.ptc!
                                }
                                if self.refundSubContents != nil {
                                    var tmp : [Any] = []
                                    for k in self.refundSubContents! {
                                        tmp.append(k.toMap())
                                    }
                                    map["refund_sub_contents"] = tmp
                                }
                                if self.title != nil {
                                    map["title"] = self.title!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("content") && dict["content"] != nil {
                                    self.content = dict["content"] as! String
                                }
                                if dict.keys.contains("is_struct") && dict["is_struct"] != nil {
                                    self.isStruct = dict["is_struct"] as! Bool
                                }
                                if dict.keys.contains("ptc") && dict["ptc"] != nil {
                                    self.ptc = dict["ptc"] as! String
                                }
                                if dict.keys.contains("refund_sub_contents") && dict["refund_sub_contents"] != nil {
                                    var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.RefundSubItems.RefundSubContents] = []
                                    for v in dict["refund_sub_contents"] as! [Any] {
                                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.RefundSubItems.RefundSubContents()
                                        if v != nil {
                                            model.fromMap(v as! [String: Any])
                                        }
                                        tmp.append(model)
                                    }
                                    self.refundSubContents = tmp
                                }
                                if dict.keys.contains("title") && dict["title"] != nil {
                                    self.title = dict["title"] as! String
                                }
                            }
                        }
                        public var extraContents: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.ExtraContents]?

                        public var index: Int32?

                        public var refundSubItems: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.RefundSubItems]?

                        public var tableHead: String?

                        public var title: String?

                        public var type: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.extraContents != nil {
                                var tmp : [Any] = []
                                for k in self.extraContents! {
                                    tmp.append(k.toMap())
                                }
                                map["extra_contents"] = tmp
                            }
                            if self.index != nil {
                                map["index"] = self.index!
                            }
                            if self.refundSubItems != nil {
                                var tmp : [Any] = []
                                for k in self.refundSubItems! {
                                    tmp.append(k.toMap())
                                }
                                map["refund_sub_items"] = tmp
                            }
                            if self.tableHead != nil {
                                map["table_head"] = self.tableHead!
                            }
                            if self.title != nil {
                                map["title"] = self.title!
                            }
                            if self.type != nil {
                                map["type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("extra_contents") && dict["extra_contents"] != nil {
                                var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.ExtraContents] = []
                                for v in dict["extra_contents"] as! [Any] {
                                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.ExtraContents()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.extraContents = tmp
                            }
                            if dict.keys.contains("index") && dict["index"] != nil {
                                self.index = dict["index"] as! Int32
                            }
                            if dict.keys.contains("refund_sub_items") && dict["refund_sub_items"] != nil {
                                var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.RefundSubItems] = []
                                for v in dict["refund_sub_items"] as! [Any] {
                                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails.RefundSubItems()
                                    if v != nil {
                                        model.fromMap(v as! [String: Any])
                                    }
                                    tmp.append(model)
                                }
                                self.refundSubItems = tmp
                            }
                            if dict.keys.contains("table_head") && dict["table_head"] != nil {
                                self.tableHead = dict["table_head"] as! String
                            }
                            if dict.keys.contains("title") && dict["title"] != nil {
                                self.title = dict["title"] as! String
                            }
                            if dict.keys.contains("type") && dict["type"] != nil {
                                self.type = dict["type"] as! Int32
                            }
                        }
                    }
                    public var baggageDetails: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails]?

                    public var changeDetails: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails]?

                    public var refundDetails: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.baggageDetails != nil {
                            var tmp : [Any] = []
                            for k in self.baggageDetails! {
                                tmp.append(k.toMap())
                            }
                            map["baggage_details"] = tmp
                        }
                        if self.changeDetails != nil {
                            var tmp : [Any] = []
                            for k in self.changeDetails! {
                                tmp.append(k.toMap())
                            }
                            map["change_details"] = tmp
                        }
                        if self.refundDetails != nil {
                            var tmp : [Any] = []
                            for k in self.refundDetails! {
                                tmp.append(k.toMap())
                            }
                            map["refund_details"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("baggage_details") && dict["baggage_details"] != nil {
                            var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails] = []
                            for v in dict["baggage_details"] as! [Any] {
                                var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.BaggageDetails()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.baggageDetails = tmp
                        }
                        if dict.keys.contains("change_details") && dict["change_details"] != nil {
                            var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails] = []
                            for v in dict["change_details"] as! [Any] {
                                var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.ChangeDetails()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.changeDetails = tmp
                        }
                        if dict.keys.contains("refund_details") && dict["refund_details"] != nil {
                            var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails] = []
                            for v in dict["refund_details"] as! [Any] {
                                var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq.RefundDetails()
                                if v != nil {
                                    model.fromMap(v as! [String: Any])
                                }
                                tmp.append(model)
                            }
                            self.refundDetails = tmp
                        }
                    }
                }
                public class ModifyPriceList : Tea.TeaModel {
                    public var passengerType: Int32?

                    public var ticketPrice: Int32?

                    public var upgradeFee: Int32?

                    public var upgradePrice: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.passengerType != nil {
                            map["passenger_type"] = self.passengerType!
                        }
                        if self.ticketPrice != nil {
                            map["ticket_price"] = self.ticketPrice!
                        }
                        if self.upgradeFee != nil {
                            map["upgrade_fee"] = self.upgradeFee!
                        }
                        if self.upgradePrice != nil {
                            map["upgrade_price"] = self.upgradePrice!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                            self.passengerType = dict["passenger_type"] as! Int32
                        }
                        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                            self.ticketPrice = dict["ticket_price"] as! Int32
                        }
                        if dict.keys.contains("upgrade_fee") && dict["upgrade_fee"] != nil {
                            self.upgradeFee = dict["upgrade_fee"] as! Int32
                        }
                        if dict.keys.contains("upgrade_price") && dict["upgrade_price"] != nil {
                            self.upgradePrice = dict["upgrade_price"] as! Int32
                        }
                    }
                }
                public var cabin: String?

                public var cabinClass: String?

                public var cabinDesc: String?

                public var cabinDiscount: Int32?

                public var changeOtaItemRuleRq: TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq?

                public var childCabin: String?

                public var leftNum: String?

                public var modifyPriceList: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ModifyPriceList]?

                public var otaItemid: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.changeOtaItemRuleRq?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cabin != nil {
                        map["cabin"] = self.cabin!
                    }
                    if self.cabinClass != nil {
                        map["cabin_class"] = self.cabinClass!
                    }
                    if self.cabinDesc != nil {
                        map["cabin_desc"] = self.cabinDesc!
                    }
                    if self.cabinDiscount != nil {
                        map["cabin_discount"] = self.cabinDiscount!
                    }
                    if self.changeOtaItemRuleRq != nil {
                        map["change_ota_item_rule_rq"] = self.changeOtaItemRuleRq?.toMap()
                    }
                    if self.childCabin != nil {
                        map["child_cabin"] = self.childCabin!
                    }
                    if self.leftNum != nil {
                        map["left_num"] = self.leftNum!
                    }
                    if self.modifyPriceList != nil {
                        var tmp : [Any] = []
                        for k in self.modifyPriceList! {
                            tmp.append(k.toMap())
                        }
                        map["modify_price_list"] = tmp
                    }
                    if self.otaItemid != nil {
                        map["ota_itemid"] = self.otaItemid!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cabin") && dict["cabin"] != nil {
                        self.cabin = dict["cabin"] as! String
                    }
                    if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                        self.cabinClass = dict["cabin_class"] as! String
                    }
                    if dict.keys.contains("cabin_desc") && dict["cabin_desc"] != nil {
                        self.cabinDesc = dict["cabin_desc"] as! String
                    }
                    if dict.keys.contains("cabin_discount") && dict["cabin_discount"] != nil {
                        self.cabinDiscount = dict["cabin_discount"] as! Int32
                    }
                    if dict.keys.contains("change_ota_item_rule_rq") && dict["change_ota_item_rule_rq"] != nil {
                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ChangeOtaItemRuleRq()
                        model.fromMap(dict["change_ota_item_rule_rq"] as! [String: Any])
                        self.changeOtaItemRuleRq = model
                    }
                    if dict.keys.contains("child_cabin") && dict["child_cabin"] != nil {
                        self.childCabin = dict["child_cabin"] as! String
                    }
                    if dict.keys.contains("left_num") && dict["left_num"] != nil {
                        self.leftNum = dict["left_num"] as! String
                    }
                    if dict.keys.contains("modify_price_list") && dict["modify_price_list"] != nil {
                        var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ModifyPriceList] = []
                        for v in dict["modify_price_list"] as! [Any] {
                            var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList.ModifyPriceList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.modifyPriceList = tmp
                    }
                    if dict.keys.contains("ota_itemid") && dict["ota_itemid"] != nil {
                        self.otaItemid = dict["ota_itemid"] as! String
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class LowestCabinPrice : Tea.TeaModel {
                public var passengerType: Int32?

                public var ticketPrice: Int32?

                public var upgradeFee: Int32?

                public var upgradePrice: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.passengerType != nil {
                        map["passenger_type"] = self.passengerType!
                    }
                    if self.ticketPrice != nil {
                        map["ticket_price"] = self.ticketPrice!
                    }
                    if self.upgradeFee != nil {
                        map["upgrade_fee"] = self.upgradeFee!
                    }
                    if self.upgradePrice != nil {
                        map["upgrade_price"] = self.upgradePrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                        self.passengerType = dict["passenger_type"] as! Int32
                    }
                    if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                        self.ticketPrice = dict["ticket_price"] as! Int32
                    }
                    if dict.keys.contains("upgrade_fee") && dict["upgrade_fee"] != nil {
                        self.upgradeFee = dict["upgrade_fee"] as! Int32
                    }
                    if dict.keys.contains("upgrade_price") && dict["upgrade_price"] != nil {
                        self.upgradePrice = dict["upgrade_price"] as! Int32
                    }
                }
            }
            public var airlineInfo: TicketChangingEnquiryResponseBody.Module.FlightInfoList.AirlineInfo?

            public var arrAirportInfo: TicketChangingEnquiryResponseBody.Module.FlightInfoList.ArrAirportInfo?

            public var cabinList: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList]?

            public var carrierAirline: String?

            public var carrierNo: String?

            public var depAirportInfo: TicketChangingEnquiryResponseBody.Module.FlightInfoList.DepAirportInfo?

            public var depCityCode: String?

            public var flightNo: String?

            public var isShare: Bool?

            public var lowestCabin: String?

            public var lowestCabinClass: String?

            public var lowestCabinDesc: String?

            public var lowestCabinNum: String?

            public var lowestCabinPrice: [TicketChangingEnquiryResponseBody.Module.FlightInfoList.LowestCabinPrice]?

            public var modifyFlightArrTime: String?

            public var modifyFlightDepDate: String?

            public var modifyFlightDepTime: String?

            public var sessionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.cabinList != nil {
                    var tmp : [Any] = []
                    for k in self.cabinList! {
                        tmp.append(k.toMap())
                    }
                    map["cabin_list"] = tmp
                }
                if self.carrierAirline != nil {
                    map["carrier_airline"] = self.carrierAirline!
                }
                if self.carrierNo != nil {
                    map["carrier_no"] = self.carrierNo!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.isShare != nil {
                    map["is_share"] = self.isShare!
                }
                if self.lowestCabin != nil {
                    map["lowest_cabin"] = self.lowestCabin!
                }
                if self.lowestCabinClass != nil {
                    map["lowest_cabin_class"] = self.lowestCabinClass!
                }
                if self.lowestCabinDesc != nil {
                    map["lowest_cabin_desc"] = self.lowestCabinDesc!
                }
                if self.lowestCabinNum != nil {
                    map["lowest_cabin_num"] = self.lowestCabinNum!
                }
                if self.lowestCabinPrice != nil {
                    var tmp : [Any] = []
                    for k in self.lowestCabinPrice! {
                        tmp.append(k.toMap())
                    }
                    map["lowest_cabin_price"] = tmp
                }
                if self.modifyFlightArrTime != nil {
                    map["modify_flight_arr_time"] = self.modifyFlightArrTime!
                }
                if self.modifyFlightDepDate != nil {
                    map["modify_flight_dep_date"] = self.modifyFlightDepDate!
                }
                if self.modifyFlightDepTime != nil {
                    map["modify_flight_dep_time"] = self.modifyFlightDepTime!
                }
                if self.sessionId != nil {
                    map["session_id"] = self.sessionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("cabin_list") && dict["cabin_list"] != nil {
                    var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList] = []
                    for v in dict["cabin_list"] as! [Any] {
                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.CabinList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.cabinList = tmp
                }
                if dict.keys.contains("carrier_airline") && dict["carrier_airline"] != nil {
                    self.carrierAirline = dict["carrier_airline"] as! String
                }
                if dict.keys.contains("carrier_no") && dict["carrier_no"] != nil {
                    self.carrierNo = dict["carrier_no"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("is_share") && dict["is_share"] != nil {
                    self.isShare = dict["is_share"] as! Bool
                }
                if dict.keys.contains("lowest_cabin") && dict["lowest_cabin"] != nil {
                    self.lowestCabin = dict["lowest_cabin"] as! String
                }
                if dict.keys.contains("lowest_cabin_class") && dict["lowest_cabin_class"] != nil {
                    self.lowestCabinClass = dict["lowest_cabin_class"] as! String
                }
                if dict.keys.contains("lowest_cabin_desc") && dict["lowest_cabin_desc"] != nil {
                    self.lowestCabinDesc = dict["lowest_cabin_desc"] as! String
                }
                if dict.keys.contains("lowest_cabin_num") && dict["lowest_cabin_num"] != nil {
                    self.lowestCabinNum = dict["lowest_cabin_num"] as! String
                }
                if dict.keys.contains("lowest_cabin_price") && dict["lowest_cabin_price"] != nil {
                    var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList.LowestCabinPrice] = []
                    for v in dict["lowest_cabin_price"] as! [Any] {
                        var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList.LowestCabinPrice()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.lowestCabinPrice = tmp
                }
                if dict.keys.contains("modify_flight_arr_time") && dict["modify_flight_arr_time"] != nil {
                    self.modifyFlightArrTime = dict["modify_flight_arr_time"] as! String
                }
                if dict.keys.contains("modify_flight_dep_date") && dict["modify_flight_dep_date"] != nil {
                    self.modifyFlightDepDate = dict["modify_flight_dep_date"] as! String
                }
                if dict.keys.contains("modify_flight_dep_time") && dict["modify_flight_dep_time"] != nil {
                    self.modifyFlightDepTime = dict["modify_flight_dep_time"] as! String
                }
                if dict.keys.contains("session_id") && dict["session_id"] != nil {
                    self.sessionId = dict["session_id"] as! String
                }
            }
        }
        public var flightInfoList: [TicketChangingEnquiryResponseBody.Module.FlightInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_info_list") && dict["flight_info_list"] != nil {
                var tmp : [TicketChangingEnquiryResponseBody.Module.FlightInfoList] = []
                for v in dict["flight_info_list"] as! [Any] {
                    var model = TicketChangingEnquiryResponseBody.Module.FlightInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TicketChangingEnquiryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TicketChangingEnquiryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TicketChangingEnquiryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TicketChangingEnquiryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TicketChangingEnquiryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TicketChangingFlightListHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TicketChangingFlightListRequest : Tea.TeaModel {
    public class TravelerInfoList : Tea.TeaModel {
        public var arrCity: String?

        public var depCity: String?

        public var name: String?

        public var type: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrCity != nil {
                map["arr_city"] = self.arrCity!
            }
            if self.depCity != nil {
                map["dep_city"] = self.depCity!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                self.arrCity = dict["arr_city"] as! String
            }
            if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                self.depCity = dict["dep_city"] as! String
            }
            if dict.keys.contains("name") && dict["name"] != nil {
                self.name = dict["name"] as! String
            }
            if dict.keys.contains("type") && dict["type"] != nil {
                self.type = dict["type"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var arrCity: String?

    public var depCity: String?

    public var depDate: String?

    public var disOrderId: String?

    public var isVoluntary: Int32?

    public var travelerInfoList: [TicketChangingFlightListRequest.TravelerInfoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrCity != nil {
            map["arr_city"] = self.arrCity!
        }
        if self.depCity != nil {
            map["dep_city"] = self.depCity!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.travelerInfoList != nil {
            var tmp : [Any] = []
            for k in self.travelerInfoList! {
                tmp.append(k.toMap())
            }
            map["traveler_info_list"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
            self.arrCity = dict["arr_city"] as! String
        }
        if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
            self.depCity = dict["dep_city"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("traveler_info_list") && dict["traveler_info_list"] != nil {
            var tmp : [TicketChangingFlightListRequest.TravelerInfoList] = []
            for v in dict["traveler_info_list"] as! [Any] {
                var model = TicketChangingFlightListRequest.TravelerInfoList()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.travelerInfoList = tmp
        }
    }
}

public class TicketChangingFlightListShrinkRequest : Tea.TeaModel {
    public var arrCity: String?

    public var depCity: String?

    public var depDate: String?

    public var disOrderId: String?

    public var isVoluntary: Int32?

    public var travelerInfoListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrCity != nil {
            map["arr_city"] = self.arrCity!
        }
        if self.depCity != nil {
            map["dep_city"] = self.depCity!
        }
        if self.depDate != nil {
            map["dep_date"] = self.depDate!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.isVoluntary != nil {
            map["is_voluntary"] = self.isVoluntary!
        }
        if self.travelerInfoListShrink != nil {
            map["traveler_info_list"] = self.travelerInfoListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
            self.arrCity = dict["arr_city"] as! String
        }
        if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
            self.depCity = dict["dep_city"] as! String
        }
        if dict.keys.contains("dep_date") && dict["dep_date"] != nil {
            self.depDate = dict["dep_date"] as! String
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("is_voluntary") && dict["is_voluntary"] != nil {
            self.isVoluntary = dict["is_voluntary"] as! Int32
        }
        if dict.keys.contains("traveler_info_list") && dict["traveler_info_list"] != nil {
            self.travelerInfoListShrink = dict["traveler_info_list"] as! String
        }
    }
}

public class TicketChangingFlightListResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class FlightInfoList : Tea.TeaModel {
            public class AirlineInfo : Tea.TeaModel {
                public var airlineCode: String?

                public var airlineName: String?

                public var airlineSimpleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airlineCode != nil {
                        map["airline_code"] = self.airlineCode!
                    }
                    if self.airlineName != nil {
                        map["airline_name"] = self.airlineName!
                    }
                    if self.airlineSimpleName != nil {
                        map["airline_simple_name"] = self.airlineSimpleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airline_code") && dict["airline_code"] != nil {
                        self.airlineCode = dict["airline_code"] as! String
                    }
                    if dict.keys.contains("airline_name") && dict["airline_name"] != nil {
                        self.airlineName = dict["airline_name"] as! String
                    }
                    if dict.keys.contains("airline_simple_name") && dict["airline_simple_name"] != nil {
                        self.airlineSimpleName = dict["airline_simple_name"] as! String
                    }
                }
            }
            public class ArrAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class CabinList : Tea.TeaModel {
                public class ModifyPriceList : Tea.TeaModel {
                    public var passengerType: Int32?

                    public var ticketPrice: Int32?

                    public var upgradeFee: Int32?

                    public var upgradePrice: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.passengerType != nil {
                            map["passenger_type"] = self.passengerType!
                        }
                        if self.ticketPrice != nil {
                            map["ticket_price"] = self.ticketPrice!
                        }
                        if self.upgradeFee != nil {
                            map["upgrade_fee"] = self.upgradeFee!
                        }
                        if self.upgradePrice != nil {
                            map["upgrade_price"] = self.upgradePrice!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                            self.passengerType = dict["passenger_type"] as! Int32
                        }
                        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                            self.ticketPrice = dict["ticket_price"] as! Int32
                        }
                        if dict.keys.contains("upgrade_fee") && dict["upgrade_fee"] != nil {
                            self.upgradeFee = dict["upgrade_fee"] as! Int32
                        }
                        if dict.keys.contains("upgrade_price") && dict["upgrade_price"] != nil {
                            self.upgradePrice = dict["upgrade_price"] as! Int32
                        }
                    }
                }
                public var cabin: String?

                public var cabinClass: String?

                public var cabinDesc: String?

                public var cabinDiscount: Int32?

                public var childCabin: String?

                public var leftNum: String?

                public var modifyPriceList: [TicketChangingFlightListResponseBody.Module.FlightInfoList.CabinList.ModifyPriceList]?

                public var otaItemid: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cabin != nil {
                        map["cabin"] = self.cabin!
                    }
                    if self.cabinClass != nil {
                        map["cabin_class"] = self.cabinClass!
                    }
                    if self.cabinDesc != nil {
                        map["cabin_desc"] = self.cabinDesc!
                    }
                    if self.cabinDiscount != nil {
                        map["cabin_discount"] = self.cabinDiscount!
                    }
                    if self.childCabin != nil {
                        map["child_cabin"] = self.childCabin!
                    }
                    if self.leftNum != nil {
                        map["left_num"] = self.leftNum!
                    }
                    if self.modifyPriceList != nil {
                        var tmp : [Any] = []
                        for k in self.modifyPriceList! {
                            tmp.append(k.toMap())
                        }
                        map["modify_price_list"] = tmp
                    }
                    if self.otaItemid != nil {
                        map["ota_itemid"] = self.otaItemid!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cabin") && dict["cabin"] != nil {
                        self.cabin = dict["cabin"] as! String
                    }
                    if dict.keys.contains("cabin_class") && dict["cabin_class"] != nil {
                        self.cabinClass = dict["cabin_class"] as! String
                    }
                    if dict.keys.contains("cabin_desc") && dict["cabin_desc"] != nil {
                        self.cabinDesc = dict["cabin_desc"] as! String
                    }
                    if dict.keys.contains("cabin_discount") && dict["cabin_discount"] != nil {
                        self.cabinDiscount = dict["cabin_discount"] as! Int32
                    }
                    if dict.keys.contains("child_cabin") && dict["child_cabin"] != nil {
                        self.childCabin = dict["child_cabin"] as! String
                    }
                    if dict.keys.contains("left_num") && dict["left_num"] != nil {
                        self.leftNum = dict["left_num"] as! String
                    }
                    if dict.keys.contains("modify_price_list") && dict["modify_price_list"] != nil {
                        var tmp : [TicketChangingFlightListResponseBody.Module.FlightInfoList.CabinList.ModifyPriceList] = []
                        for v in dict["modify_price_list"] as! [Any] {
                            var model = TicketChangingFlightListResponseBody.Module.FlightInfoList.CabinList.ModifyPriceList()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.modifyPriceList = tmp
                    }
                    if dict.keys.contains("ota_itemid") && dict["ota_itemid"] != nil {
                        self.otaItemid = dict["ota_itemid"] as! String
                    }
                }
            }
            public class DepAirportInfo : Tea.TeaModel {
                public var airportCode: String?

                public var airportName: String?

                public var cityCode: String?

                public var cityName: String?

                public var terminal: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.airportCode != nil {
                        map["airport_code"] = self.airportCode!
                    }
                    if self.airportName != nil {
                        map["airport_name"] = self.airportName!
                    }
                    if self.cityCode != nil {
                        map["city_code"] = self.cityCode!
                    }
                    if self.cityName != nil {
                        map["city_name"] = self.cityName!
                    }
                    if self.terminal != nil {
                        map["terminal"] = self.terminal!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("airport_code") && dict["airport_code"] != nil {
                        self.airportCode = dict["airport_code"] as! String
                    }
                    if dict.keys.contains("airport_name") && dict["airport_name"] != nil {
                        self.airportName = dict["airport_name"] as! String
                    }
                    if dict.keys.contains("city_code") && dict["city_code"] != nil {
                        self.cityCode = dict["city_code"] as! String
                    }
                    if dict.keys.contains("city_name") && dict["city_name"] != nil {
                        self.cityName = dict["city_name"] as! String
                    }
                    if dict.keys.contains("terminal") && dict["terminal"] != nil {
                        self.terminal = dict["terminal"] as! String
                    }
                }
            }
            public class LowestCabinPrice : Tea.TeaModel {
                public var passengerType: Int32?

                public var ticketPrice: Int32?

                public var upgradeFee: Int32?

                public var upgradePrice: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.passengerType != nil {
                        map["passenger_type"] = self.passengerType!
                    }
                    if self.ticketPrice != nil {
                        map["ticket_price"] = self.ticketPrice!
                    }
                    if self.upgradeFee != nil {
                        map["upgrade_fee"] = self.upgradeFee!
                    }
                    if self.upgradePrice != nil {
                        map["upgrade_price"] = self.upgradePrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("passenger_type") && dict["passenger_type"] != nil {
                        self.passengerType = dict["passenger_type"] as! Int32
                    }
                    if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                        self.ticketPrice = dict["ticket_price"] as! Int32
                    }
                    if dict.keys.contains("upgrade_fee") && dict["upgrade_fee"] != nil {
                        self.upgradeFee = dict["upgrade_fee"] as! Int32
                    }
                    if dict.keys.contains("upgrade_price") && dict["upgrade_price"] != nil {
                        self.upgradePrice = dict["upgrade_price"] as! Int32
                    }
                }
            }
            public var airlineInfo: TicketChangingFlightListResponseBody.Module.FlightInfoList.AirlineInfo?

            public var arrAirportInfo: TicketChangingFlightListResponseBody.Module.FlightInfoList.ArrAirportInfo?

            public var cabinList: [TicketChangingFlightListResponseBody.Module.FlightInfoList.CabinList]?

            public var carrierAirline: String?

            public var carrierNo: String?

            public var depAirportInfo: TicketChangingFlightListResponseBody.Module.FlightInfoList.DepAirportInfo?

            public var flightNo: String?

            public var flightSize: String?

            public var flightType: String?

            public var isProtocol: Bool?

            public var isShare: Bool?

            public var isStop: Bool?

            public var lowestCabin: String?

            public var lowestCabinClass: String?

            public var lowestCabinDesc: String?

            public var lowestCabinNum: String?

            public var lowestCabinPrice: [TicketChangingFlightListResponseBody.Module.FlightInfoList.LowestCabinPrice]?

            public var mealDesc: String?

            public var modifyFlightArrTime: String?

            public var modifyFlightDepDate: String?

            public var modifyFlightDepTime: String?

            public var sessionId: String?

            public var stopArrTime: String?

            public var stopCity: String?

            public var stopDepTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.airlineInfo?.validate()
                try self.arrAirportInfo?.validate()
                try self.depAirportInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.airlineInfo != nil {
                    map["airline_info"] = self.airlineInfo?.toMap()
                }
                if self.arrAirportInfo != nil {
                    map["arr_airport_info"] = self.arrAirportInfo?.toMap()
                }
                if self.cabinList != nil {
                    var tmp : [Any] = []
                    for k in self.cabinList! {
                        tmp.append(k.toMap())
                    }
                    map["cabin_list"] = tmp
                }
                if self.carrierAirline != nil {
                    map["carrier_airline"] = self.carrierAirline!
                }
                if self.carrierNo != nil {
                    map["carrier_no"] = self.carrierNo!
                }
                if self.depAirportInfo != nil {
                    map["dep_airport_info"] = self.depAirportInfo?.toMap()
                }
                if self.flightNo != nil {
                    map["flight_no"] = self.flightNo!
                }
                if self.flightSize != nil {
                    map["flight_size"] = self.flightSize!
                }
                if self.flightType != nil {
                    map["flight_type"] = self.flightType!
                }
                if self.isProtocol != nil {
                    map["is_protocol"] = self.isProtocol!
                }
                if self.isShare != nil {
                    map["is_share"] = self.isShare!
                }
                if self.isStop != nil {
                    map["is_stop"] = self.isStop!
                }
                if self.lowestCabin != nil {
                    map["lowest_cabin"] = self.lowestCabin!
                }
                if self.lowestCabinClass != nil {
                    map["lowest_cabin_class"] = self.lowestCabinClass!
                }
                if self.lowestCabinDesc != nil {
                    map["lowest_cabin_desc"] = self.lowestCabinDesc!
                }
                if self.lowestCabinNum != nil {
                    map["lowest_cabin_num"] = self.lowestCabinNum!
                }
                if self.lowestCabinPrice != nil {
                    var tmp : [Any] = []
                    for k in self.lowestCabinPrice! {
                        tmp.append(k.toMap())
                    }
                    map["lowest_cabin_price"] = tmp
                }
                if self.mealDesc != nil {
                    map["meal_desc"] = self.mealDesc!
                }
                if self.modifyFlightArrTime != nil {
                    map["modify_flight_arr_time"] = self.modifyFlightArrTime!
                }
                if self.modifyFlightDepDate != nil {
                    map["modify_flight_dep_date"] = self.modifyFlightDepDate!
                }
                if self.modifyFlightDepTime != nil {
                    map["modify_flight_dep_time"] = self.modifyFlightDepTime!
                }
                if self.sessionId != nil {
                    map["session_id"] = self.sessionId!
                }
                if self.stopArrTime != nil {
                    map["stop_arr_time"] = self.stopArrTime!
                }
                if self.stopCity != nil {
                    map["stop_city"] = self.stopCity!
                }
                if self.stopDepTime != nil {
                    map["stop_dep_time"] = self.stopDepTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("airline_info") && dict["airline_info"] != nil {
                    var model = TicketChangingFlightListResponseBody.Module.FlightInfoList.AirlineInfo()
                    model.fromMap(dict["airline_info"] as! [String: Any])
                    self.airlineInfo = model
                }
                if dict.keys.contains("arr_airport_info") && dict["arr_airport_info"] != nil {
                    var model = TicketChangingFlightListResponseBody.Module.FlightInfoList.ArrAirportInfo()
                    model.fromMap(dict["arr_airport_info"] as! [String: Any])
                    self.arrAirportInfo = model
                }
                if dict.keys.contains("cabin_list") && dict["cabin_list"] != nil {
                    var tmp : [TicketChangingFlightListResponseBody.Module.FlightInfoList.CabinList] = []
                    for v in dict["cabin_list"] as! [Any] {
                        var model = TicketChangingFlightListResponseBody.Module.FlightInfoList.CabinList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.cabinList = tmp
                }
                if dict.keys.contains("carrier_airline") && dict["carrier_airline"] != nil {
                    self.carrierAirline = dict["carrier_airline"] as! String
                }
                if dict.keys.contains("carrier_no") && dict["carrier_no"] != nil {
                    self.carrierNo = dict["carrier_no"] as! String
                }
                if dict.keys.contains("dep_airport_info") && dict["dep_airport_info"] != nil {
                    var model = TicketChangingFlightListResponseBody.Module.FlightInfoList.DepAirportInfo()
                    model.fromMap(dict["dep_airport_info"] as! [String: Any])
                    self.depAirportInfo = model
                }
                if dict.keys.contains("flight_no") && dict["flight_no"] != nil {
                    self.flightNo = dict["flight_no"] as! String
                }
                if dict.keys.contains("flight_size") && dict["flight_size"] != nil {
                    self.flightSize = dict["flight_size"] as! String
                }
                if dict.keys.contains("flight_type") && dict["flight_type"] != nil {
                    self.flightType = dict["flight_type"] as! String
                }
                if dict.keys.contains("is_protocol") && dict["is_protocol"] != nil {
                    self.isProtocol = dict["is_protocol"] as! Bool
                }
                if dict.keys.contains("is_share") && dict["is_share"] != nil {
                    self.isShare = dict["is_share"] as! Bool
                }
                if dict.keys.contains("is_stop") && dict["is_stop"] != nil {
                    self.isStop = dict["is_stop"] as! Bool
                }
                if dict.keys.contains("lowest_cabin") && dict["lowest_cabin"] != nil {
                    self.lowestCabin = dict["lowest_cabin"] as! String
                }
                if dict.keys.contains("lowest_cabin_class") && dict["lowest_cabin_class"] != nil {
                    self.lowestCabinClass = dict["lowest_cabin_class"] as! String
                }
                if dict.keys.contains("lowest_cabin_desc") && dict["lowest_cabin_desc"] != nil {
                    self.lowestCabinDesc = dict["lowest_cabin_desc"] as! String
                }
                if dict.keys.contains("lowest_cabin_num") && dict["lowest_cabin_num"] != nil {
                    self.lowestCabinNum = dict["lowest_cabin_num"] as! String
                }
                if dict.keys.contains("lowest_cabin_price") && dict["lowest_cabin_price"] != nil {
                    var tmp : [TicketChangingFlightListResponseBody.Module.FlightInfoList.LowestCabinPrice] = []
                    for v in dict["lowest_cabin_price"] as! [Any] {
                        var model = TicketChangingFlightListResponseBody.Module.FlightInfoList.LowestCabinPrice()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.lowestCabinPrice = tmp
                }
                if dict.keys.contains("meal_desc") && dict["meal_desc"] != nil {
                    self.mealDesc = dict["meal_desc"] as! String
                }
                if dict.keys.contains("modify_flight_arr_time") && dict["modify_flight_arr_time"] != nil {
                    self.modifyFlightArrTime = dict["modify_flight_arr_time"] as! String
                }
                if dict.keys.contains("modify_flight_dep_date") && dict["modify_flight_dep_date"] != nil {
                    self.modifyFlightDepDate = dict["modify_flight_dep_date"] as! String
                }
                if dict.keys.contains("modify_flight_dep_time") && dict["modify_flight_dep_time"] != nil {
                    self.modifyFlightDepTime = dict["modify_flight_dep_time"] as! String
                }
                if dict.keys.contains("session_id") && dict["session_id"] != nil {
                    self.sessionId = dict["session_id"] as! String
                }
                if dict.keys.contains("stop_arr_time") && dict["stop_arr_time"] != nil {
                    self.stopArrTime = dict["stop_arr_time"] as! String
                }
                if dict.keys.contains("stop_city") && dict["stop_city"] != nil {
                    self.stopCity = dict["stop_city"] as! String
                }
                if dict.keys.contains("stop_dep_time") && dict["stop_dep_time"] != nil {
                    self.stopDepTime = dict["stop_dep_time"] as! String
                }
            }
        }
        public var flightInfoList: [TicketChangingFlightListResponseBody.Module.FlightInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.flightInfoList != nil {
                var tmp : [Any] = []
                for k in self.flightInfoList! {
                    tmp.append(k.toMap())
                }
                map["flight_info_list"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("flight_info_list") && dict["flight_info_list"] != nil {
                var tmp : [TicketChangingFlightListResponseBody.Module.FlightInfoList] = []
                for v in dict["flight_info_list"] as! [Any] {
                    var model = TicketChangingFlightListResponseBody.Module.FlightInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.flightInfoList = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TicketChangingFlightListResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TicketChangingFlightListResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TicketChangingFlightListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TicketChangingFlightListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TicketChangingFlightListResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TicketChangingPayHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TicketChangingPayRequest : Tea.TeaModel {
    public var corpPayPrice: Int64?

    public var disOrderId: String?

    public var disSubOrderId: String?

    public var extra: [String: String]?

    public var personalPayPrice: Int64?

    public var totalPayPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpPayPrice != nil {
            map["corp_pay_price"] = self.corpPayPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        if self.extra != nil {
            map["extra"] = self.extra!
        }
        if self.personalPayPrice != nil {
            map["personal_pay_price"] = self.personalPayPrice!
        }
        if self.totalPayPrice != nil {
            map["total_pay_price"] = self.totalPayPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("corp_pay_price") && dict["corp_pay_price"] != nil {
            self.corpPayPrice = dict["corp_pay_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extra = dict["extra"] as! [String: String]
        }
        if dict.keys.contains("personal_pay_price") && dict["personal_pay_price"] != nil {
            self.personalPayPrice = dict["personal_pay_price"] as! Int64
        }
        if dict.keys.contains("total_pay_price") && dict["total_pay_price"] != nil {
            self.totalPayPrice = dict["total_pay_price"] as! Int64
        }
    }
}

public class TicketChangingPayShrinkRequest : Tea.TeaModel {
    public var corpPayPrice: Int64?

    public var disOrderId: String?

    public var disSubOrderId: String?

    public var extraShrink: String?

    public var personalPayPrice: Int64?

    public var totalPayPrice: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpPayPrice != nil {
            map["corp_pay_price"] = self.corpPayPrice!
        }
        if self.disOrderId != nil {
            map["dis_order_id"] = self.disOrderId!
        }
        if self.disSubOrderId != nil {
            map["dis_sub_order_id"] = self.disSubOrderId!
        }
        if self.extraShrink != nil {
            map["extra"] = self.extraShrink!
        }
        if self.personalPayPrice != nil {
            map["personal_pay_price"] = self.personalPayPrice!
        }
        if self.totalPayPrice != nil {
            map["total_pay_price"] = self.totalPayPrice!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("corp_pay_price") && dict["corp_pay_price"] != nil {
            self.corpPayPrice = dict["corp_pay_price"] as! Int64
        }
        if dict.keys.contains("dis_order_id") && dict["dis_order_id"] != nil {
            self.disOrderId = dict["dis_order_id"] as! String
        }
        if dict.keys.contains("dis_sub_order_id") && dict["dis_sub_order_id"] != nil {
            self.disSubOrderId = dict["dis_sub_order_id"] as! String
        }
        if dict.keys.contains("extra") && dict["extra"] != nil {
            self.extraShrink = dict["extra"] as! String
        }
        if dict.keys.contains("personal_pay_price") && dict["personal_pay_price"] != nil {
            self.personalPayPrice = dict["personal_pay_price"] as! Int64
        }
        if dict.keys.contains("total_pay_price") && dict["total_pay_price"] != nil {
            self.totalPayPrice = dict["total_pay_price"] as! Int64
        }
    }
}

public class TicketChangingPayResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var canRetry: Bool?

        public var payPrice: Int64?

        public var payStatus: Int32?

        public var payTime: String?

        public var tradeNo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.canRetry != nil {
                map["can_retry"] = self.canRetry!
            }
            if self.payPrice != nil {
                map["pay_price"] = self.payPrice!
            }
            if self.payStatus != nil {
                map["pay_status"] = self.payStatus!
            }
            if self.payTime != nil {
                map["pay_time"] = self.payTime!
            }
            if self.tradeNo != nil {
                map["trade_no"] = self.tradeNo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("can_retry") && dict["can_retry"] != nil {
                self.canRetry = dict["can_retry"] as! Bool
            }
            if dict.keys.contains("pay_price") && dict["pay_price"] != nil {
                self.payPrice = dict["pay_price"] as! Int64
            }
            if dict.keys.contains("pay_status") && dict["pay_status"] != nil {
                self.payStatus = dict["pay_status"] as! Int32
            }
            if dict.keys.contains("pay_time") && dict["pay_time"] != nil {
                self.payTime = dict["pay_time"] as! String
            }
            if dict.keys.contains("trade_no") && dict["trade_no"] != nil {
                self.tradeNo = dict["trade_no"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TicketChangingPayResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TicketChangingPayResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TicketChangingPayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TicketChangingPayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TicketChangingPayResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainBillSettlementQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class TrainBillSettlementQueryRequest : Tea.TeaModel {
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var periodEnd: String?

    public var periodStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.periodEnd != nil {
            map["period_end"] = self.periodEnd!
        }
        if self.periodStart != nil {
            map["period_start"] = self.periodStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("period_end") && dict["period_end"] != nil {
            self.periodEnd = dict["period_end"] as! String
        }
        if dict.keys.contains("period_start") && dict["period_start"] != nil {
            self.periodStart = dict["period_start"] as! String
        }
    }
}

public class TrainBillSettlementQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class DataList : Tea.TeaModel {
            public var alipayTradeNo: String?

            public var applyArrCityCode: String?

            public var applyArrCityName: String?

            public var applyDepCityCode: String?

            public var applyDepCityName: String?

            public var applyExtendField: String?

            public var applyId: String?

            public var arrCityCode: String?

            public var arrCityName: String?

            public var arrDate: String?

            public var arrStation: String?

            public var arrTime: String?

            public var billRecordTime: String?

            public var bookTime: String?

            public var bookerId: String?

            public var bookerJobNo: String?

            public var bookerName: String?

            public var businessTripResult: String?

            public var capitalDirection: String?

            public var cascadeDepartment: String?

            public var changeFee: Double?

            public var changeResult: String?

            public var coachNo: String?

            public var costCenter: String?

            public var costCenterNumber: String?

            public var coupon: Double?

            public var depCityCode: String?

            public var depCityName: String?

            public var department: String?

            public var departmentId: String?

            public var deptDate: String?

            public var deptStation: String?

            public var deptTime: String?

            public var exceedReason: String?

            public var feeType: String?

            public var index: String?

            public var invoiceTitle: String?

            public var isTransferOrder: String?

            public var orderId: String?

            public var orderPrice: Double?

            public var overApplyId: String?

            public var paymentDepartmentId: String?

            public var paymentDepartmentName: String?

            public var primaryId: Int64?

            public var printTicketPrice: Double?

            public var projectCode: String?

            public var projectName: String?

            public var refundFee: Double?

            public var refundReason: String?

            public var remark: String?

            public var reserveMode: String?

            public var runTime: String?

            public var seatNo: String?

            public var seatType: String?

            public var serviceFee: Double?

            public var settlementFee: Double?

            public var settlementGrantFee: Double?

            public var settlementTime: String?

            public var settlementType: String?

            public var shortTicketNo: String?

            public var status: Int32?

            public var taxRate: String?

            public var thirdItineraryId: String?

            public var ticketCorpPayPrice: String?

            public var ticketNo: String?

            public var ticketPersonPayPrice: String?

            public var ticketPrice: Double?

            public var trainNo: String?

            public var trainType: String?

            public var travelerId: String?

            public var travelerJobNo: String?

            public var travelerMemberTypeName: String?

            public var travelerName: String?

            public var voucherType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alipayTradeNo != nil {
                    map["alipay_trade_no"] = self.alipayTradeNo!
                }
                if self.applyArrCityCode != nil {
                    map["apply_arr_city_code"] = self.applyArrCityCode!
                }
                if self.applyArrCityName != nil {
                    map["apply_arr_city_name"] = self.applyArrCityName!
                }
                if self.applyDepCityCode != nil {
                    map["apply_dep_city_code"] = self.applyDepCityCode!
                }
                if self.applyDepCityName != nil {
                    map["apply_dep_city_name"] = self.applyDepCityName!
                }
                if self.applyExtendField != nil {
                    map["apply_extend_field"] = self.applyExtendField!
                }
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrCityCode != nil {
                    map["arr_city_code"] = self.arrCityCode!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrDate != nil {
                    map["arr_date"] = self.arrDate!
                }
                if self.arrStation != nil {
                    map["arr_station"] = self.arrStation!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.billRecordTime != nil {
                    map["bill_record_time"] = self.billRecordTime!
                }
                if self.bookTime != nil {
                    map["book_time"] = self.bookTime!
                }
                if self.bookerId != nil {
                    map["booker_id"] = self.bookerId!
                }
                if self.bookerJobNo != nil {
                    map["booker_job_no"] = self.bookerJobNo!
                }
                if self.bookerName != nil {
                    map["booker_name"] = self.bookerName!
                }
                if self.businessTripResult != nil {
                    map["business_trip_result"] = self.businessTripResult!
                }
                if self.capitalDirection != nil {
                    map["capital_direction"] = self.capitalDirection!
                }
                if self.cascadeDepartment != nil {
                    map["cascade_department"] = self.cascadeDepartment!
                }
                if self.changeFee != nil {
                    map["change_fee"] = self.changeFee!
                }
                if self.changeResult != nil {
                    map["change_result"] = self.changeResult!
                }
                if self.coachNo != nil {
                    map["coach_no"] = self.coachNo!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.coupon != nil {
                    map["coupon"] = self.coupon!
                }
                if self.depCityCode != nil {
                    map["dep_city_code"] = self.depCityCode!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.departmentId != nil {
                    map["department_id"] = self.departmentId!
                }
                if self.deptDate != nil {
                    map["dept_date"] = self.deptDate!
                }
                if self.deptStation != nil {
                    map["dept_station"] = self.deptStation!
                }
                if self.deptTime != nil {
                    map["dept_time"] = self.deptTime!
                }
                if self.exceedReason != nil {
                    map["exceed_reason"] = self.exceedReason!
                }
                if self.feeType != nil {
                    map["fee_type"] = self.feeType!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.isTransferOrder != nil {
                    map["is_transfer_order"] = self.isTransferOrder!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderPrice != nil {
                    map["order_price"] = self.orderPrice!
                }
                if self.overApplyId != nil {
                    map["over_apply_id"] = self.overApplyId!
                }
                if self.paymentDepartmentId != nil {
                    map["payment_department_id"] = self.paymentDepartmentId!
                }
                if self.paymentDepartmentName != nil {
                    map["payment_department_name"] = self.paymentDepartmentName!
                }
                if self.primaryId != nil {
                    map["primary_id"] = self.primaryId!
                }
                if self.printTicketPrice != nil {
                    map["print_ticket_price"] = self.printTicketPrice!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectName != nil {
                    map["project_name"] = self.projectName!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundReason != nil {
                    map["refund_reason"] = self.refundReason!
                }
                if self.remark != nil {
                    map["remark"] = self.remark!
                }
                if self.reserveMode != nil {
                    map["reserve_mode"] = self.reserveMode!
                }
                if self.runTime != nil {
                    map["run_time"] = self.runTime!
                }
                if self.seatNo != nil {
                    map["seat_no"] = self.seatNo!
                }
                if self.seatType != nil {
                    map["seat_type"] = self.seatType!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.settlementFee != nil {
                    map["settlement_fee"] = self.settlementFee!
                }
                if self.settlementGrantFee != nil {
                    map["settlement_grant_fee"] = self.settlementGrantFee!
                }
                if self.settlementTime != nil {
                    map["settlement_time"] = self.settlementTime!
                }
                if self.settlementType != nil {
                    map["settlement_type"] = self.settlementType!
                }
                if self.shortTicketNo != nil {
                    map["short_ticket_no"] = self.shortTicketNo!
                }
                if self.status != nil {
                    map["status"] = self.status!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.thirdItineraryId != nil {
                    map["third_itinerary_id"] = self.thirdItineraryId!
                }
                if self.ticketCorpPayPrice != nil {
                    map["ticket_corp_pay_price"] = self.ticketCorpPayPrice!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketPersonPayPrice != nil {
                    map["ticket_person_pay_price"] = self.ticketPersonPayPrice!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.trainNo != nil {
                    map["train_no"] = self.trainNo!
                }
                if self.trainType != nil {
                    map["train_type"] = self.trainType!
                }
                if self.travelerId != nil {
                    map["traveler_id"] = self.travelerId!
                }
                if self.travelerJobNo != nil {
                    map["traveler_job_no"] = self.travelerJobNo!
                }
                if self.travelerMemberTypeName != nil {
                    map["traveler_member_type_name"] = self.travelerMemberTypeName!
                }
                if self.travelerName != nil {
                    map["traveler_name"] = self.travelerName!
                }
                if self.voucherType != nil {
                    map["voucher_type"] = self.voucherType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("alipay_trade_no") && dict["alipay_trade_no"] != nil {
                    self.alipayTradeNo = dict["alipay_trade_no"] as! String
                }
                if dict.keys.contains("apply_arr_city_code") && dict["apply_arr_city_code"] != nil {
                    self.applyArrCityCode = dict["apply_arr_city_code"] as! String
                }
                if dict.keys.contains("apply_arr_city_name") && dict["apply_arr_city_name"] != nil {
                    self.applyArrCityName = dict["apply_arr_city_name"] as! String
                }
                if dict.keys.contains("apply_dep_city_code") && dict["apply_dep_city_code"] != nil {
                    self.applyDepCityCode = dict["apply_dep_city_code"] as! String
                }
                if dict.keys.contains("apply_dep_city_name") && dict["apply_dep_city_name"] != nil {
                    self.applyDepCityName = dict["apply_dep_city_name"] as! String
                }
                if dict.keys.contains("apply_extend_field") && dict["apply_extend_field"] != nil {
                    self.applyExtendField = dict["apply_extend_field"] as! String
                }
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_city_code") && dict["arr_city_code"] != nil {
                    self.arrCityCode = dict["arr_city_code"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_date") && dict["arr_date"] != nil {
                    self.arrDate = dict["arr_date"] as! String
                }
                if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                    self.arrStation = dict["arr_station"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("bill_record_time") && dict["bill_record_time"] != nil {
                    self.billRecordTime = dict["bill_record_time"] as! String
                }
                if dict.keys.contains("book_time") && dict["book_time"] != nil {
                    self.bookTime = dict["book_time"] as! String
                }
                if dict.keys.contains("booker_id") && dict["booker_id"] != nil {
                    self.bookerId = dict["booker_id"] as! String
                }
                if dict.keys.contains("booker_job_no") && dict["booker_job_no"] != nil {
                    self.bookerJobNo = dict["booker_job_no"] as! String
                }
                if dict.keys.contains("booker_name") && dict["booker_name"] != nil {
                    self.bookerName = dict["booker_name"] as! String
                }
                if dict.keys.contains("business_trip_result") && dict["business_trip_result"] != nil {
                    self.businessTripResult = dict["business_trip_result"] as! String
                }
                if dict.keys.contains("capital_direction") && dict["capital_direction"] != nil {
                    self.capitalDirection = dict["capital_direction"] as! String
                }
                if dict.keys.contains("cascade_department") && dict["cascade_department"] != nil {
                    self.cascadeDepartment = dict["cascade_department"] as! String
                }
                if dict.keys.contains("change_fee") && dict["change_fee"] != nil {
                    self.changeFee = dict["change_fee"] as! Double
                }
                if dict.keys.contains("change_result") && dict["change_result"] != nil {
                    self.changeResult = dict["change_result"] as! String
                }
                if dict.keys.contains("coach_no") && dict["coach_no"] != nil {
                    self.coachNo = dict["coach_no"] as! String
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("coupon") && dict["coupon"] != nil {
                    self.coupon = dict["coupon"] as! Double
                }
                if dict.keys.contains("dep_city_code") && dict["dep_city_code"] != nil {
                    self.depCityCode = dict["dep_city_code"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("department_id") && dict["department_id"] != nil {
                    self.departmentId = dict["department_id"] as! String
                }
                if dict.keys.contains("dept_date") && dict["dept_date"] != nil {
                    self.deptDate = dict["dept_date"] as! String
                }
                if dict.keys.contains("dept_station") && dict["dept_station"] != nil {
                    self.deptStation = dict["dept_station"] as! String
                }
                if dict.keys.contains("dept_time") && dict["dept_time"] != nil {
                    self.deptTime = dict["dept_time"] as! String
                }
                if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                    self.exceedReason = dict["exceed_reason"] as! String
                }
                if dict.keys.contains("fee_type") && dict["fee_type"] != nil {
                    self.feeType = dict["fee_type"] as! String
                }
                if dict.keys.contains("index") && dict["index"] != nil {
                    self.index = dict["index"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("is_transfer_order") && dict["is_transfer_order"] != nil {
                    self.isTransferOrder = dict["is_transfer_order"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! String
                }
                if dict.keys.contains("order_price") && dict["order_price"] != nil {
                    self.orderPrice = dict["order_price"] as! Double
                }
                if dict.keys.contains("over_apply_id") && dict["over_apply_id"] != nil {
                    self.overApplyId = dict["over_apply_id"] as! String
                }
                if dict.keys.contains("payment_department_id") && dict["payment_department_id"] != nil {
                    self.paymentDepartmentId = dict["payment_department_id"] as! String
                }
                if dict.keys.contains("payment_department_name") && dict["payment_department_name"] != nil {
                    self.paymentDepartmentName = dict["payment_department_name"] as! String
                }
                if dict.keys.contains("primary_id") && dict["primary_id"] != nil {
                    self.primaryId = dict["primary_id"] as! Int64
                }
                if dict.keys.contains("print_ticket_price") && dict["print_ticket_price"] != nil {
                    self.printTicketPrice = dict["print_ticket_price"] as! Double
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_name") && dict["project_name"] != nil {
                    self.projectName = dict["project_name"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Double
                }
                if dict.keys.contains("refund_reason") && dict["refund_reason"] != nil {
                    self.refundReason = dict["refund_reason"] as! String
                }
                if dict.keys.contains("remark") && dict["remark"] != nil {
                    self.remark = dict["remark"] as! String
                }
                if dict.keys.contains("reserve_mode") && dict["reserve_mode"] != nil {
                    self.reserveMode = dict["reserve_mode"] as! String
                }
                if dict.keys.contains("run_time") && dict["run_time"] != nil {
                    self.runTime = dict["run_time"] as! String
                }
                if dict.keys.contains("seat_no") && dict["seat_no"] != nil {
                    self.seatNo = dict["seat_no"] as! String
                }
                if dict.keys.contains("seat_type") && dict["seat_type"] != nil {
                    self.seatType = dict["seat_type"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("settlement_fee") && dict["settlement_fee"] != nil {
                    self.settlementFee = dict["settlement_fee"] as! Double
                }
                if dict.keys.contains("settlement_grant_fee") && dict["settlement_grant_fee"] != nil {
                    self.settlementGrantFee = dict["settlement_grant_fee"] as! Double
                }
                if dict.keys.contains("settlement_time") && dict["settlement_time"] != nil {
                    self.settlementTime = dict["settlement_time"] as! String
                }
                if dict.keys.contains("settlement_type") && dict["settlement_type"] != nil {
                    self.settlementType = dict["settlement_type"] as! String
                }
                if dict.keys.contains("short_ticket_no") && dict["short_ticket_no"] != nil {
                    self.shortTicketNo = dict["short_ticket_no"] as! String
                }
                if dict.keys.contains("status") && dict["status"] != nil {
                    self.status = dict["status"] as! Int32
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("third_itinerary_id") && dict["third_itinerary_id"] != nil {
                    self.thirdItineraryId = dict["third_itinerary_id"] as! String
                }
                if dict.keys.contains("ticket_corp_pay_price") && dict["ticket_corp_pay_price"] != nil {
                    self.ticketCorpPayPrice = dict["ticket_corp_pay_price"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_person_pay_price") && dict["ticket_person_pay_price"] != nil {
                    self.ticketPersonPayPrice = dict["ticket_person_pay_price"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Double
                }
                if dict.keys.contains("train_no") && dict["train_no"] != nil {
                    self.trainNo = dict["train_no"] as! String
                }
                if dict.keys.contains("train_type") && dict["train_type"] != nil {
                    self.trainType = dict["train_type"] as! String
                }
                if dict.keys.contains("traveler_id") && dict["traveler_id"] != nil {
                    self.travelerId = dict["traveler_id"] as! String
                }
                if dict.keys.contains("traveler_job_no") && dict["traveler_job_no"] != nil {
                    self.travelerJobNo = dict["traveler_job_no"] as! String
                }
                if dict.keys.contains("traveler_member_type_name") && dict["traveler_member_type_name"] != nil {
                    self.travelerMemberTypeName = dict["traveler_member_type_name"] as! String
                }
                if dict.keys.contains("traveler_name") && dict["traveler_name"] != nil {
                    self.travelerName = dict["traveler_name"] as! String
                }
                if dict.keys.contains("voucher_type") && dict["voucher_type"] != nil {
                    self.voucherType = dict["voucher_type"] as! Int32
                }
            }
        }
        public var category: Int32?

        public var corpId: String?

        public var dataList: [TrainBillSettlementQueryResponseBody.Module.DataList]?

        public var periodEnd: String?

        public var periodStart: String?

        public var totalNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["category"] = self.category!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.dataList != nil {
                var tmp : [Any] = []
                for k in self.dataList! {
                    tmp.append(k.toMap())
                }
                map["data_list"] = tmp
            }
            if self.periodEnd != nil {
                map["period_end"] = self.periodEnd!
            }
            if self.periodStart != nil {
                map["period_start"] = self.periodStart!
            }
            if self.totalNum != nil {
                map["total_num"] = self.totalNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("category") && dict["category"] != nil {
                self.category = dict["category"] as! Int32
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("data_list") && dict["data_list"] != nil {
                var tmp : [TrainBillSettlementQueryResponseBody.Module.DataList] = []
                for v in dict["data_list"] as! [Any] {
                    var model = TrainBillSettlementQueryResponseBody.Module.DataList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.dataList = tmp
            }
            if dict.keys.contains("period_end") && dict["period_end"] != nil {
                self.periodEnd = dict["period_end"] as! String
            }
            if dict.keys.contains("period_start") && dict["period_start"] != nil {
                self.periodStart = dict["period_start"] as! String
            }
            if dict.keys.contains("total_num") && dict["total_num"] != nil {
                self.totalNum = dict["total_num"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TrainBillSettlementQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TrainBillSettlementQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainBillSettlementQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainBillSettlementQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainBillSettlementQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainExceedApplyQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class TrainExceedApplyQueryRequest : Tea.TeaModel {
    public var applyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
    }
}

public class TrainExceedApplyQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ApplyIntentionInfoDO : Tea.TeaModel {
            public var arrCity: String?

            public var arrCityName: String?

            public var arrStation: String?

            public var arrTime: String?

            public var depCity: String?

            public var depCityName: String?

            public var depStation: String?

            public var depTime: String?

            public var price: Int64?

            public var seatName: String?

            public var trainNo: String?

            public var trainTypeDesc: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrCity != nil {
                    map["arr_city"] = self.arrCity!
                }
                if self.arrCityName != nil {
                    map["arr_city_name"] = self.arrCityName!
                }
                if self.arrStation != nil {
                    map["arr_station"] = self.arrStation!
                }
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.depCity != nil {
                    map["dep_city"] = self.depCity!
                }
                if self.depCityName != nil {
                    map["dep_city_name"] = self.depCityName!
                }
                if self.depStation != nil {
                    map["dep_station"] = self.depStation!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.seatName != nil {
                    map["seat_name"] = self.seatName!
                }
                if self.trainNo != nil {
                    map["train_no"] = self.trainNo!
                }
                if self.trainTypeDesc != nil {
                    map["train_type_desc"] = self.trainTypeDesc!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                    self.arrCity = dict["arr_city"] as! String
                }
                if dict.keys.contains("arr_city_name") && dict["arr_city_name"] != nil {
                    self.arrCityName = dict["arr_city_name"] as! String
                }
                if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                    self.arrStation = dict["arr_station"] as! String
                }
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                    self.depCity = dict["dep_city"] as! String
                }
                if dict.keys.contains("dep_city_name") && dict["dep_city_name"] != nil {
                    self.depCityName = dict["dep_city_name"] as! String
                }
                if dict.keys.contains("dep_station") && dict["dep_station"] != nil {
                    self.depStation = dict["dep_station"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Int64
                }
                if dict.keys.contains("seat_name") && dict["seat_name"] != nil {
                    self.seatName = dict["seat_name"] as! String
                }
                if dict.keys.contains("train_no") && dict["train_no"] != nil {
                    self.trainNo = dict["train_no"] as! String
                }
                if dict.keys.contains("train_type_desc") && dict["train_type_desc"] != nil {
                    self.trainTypeDesc = dict["train_type_desc"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public var applyId: Int64?

        public var applyIntentionInfoDO: TrainExceedApplyQueryResponseBody.Module.ApplyIntentionInfoDO?

        public var btripCause: String?

        public var corpId: String?

        public var exceedReason: String?

        public var exceedType: Int32?

        public var originStandard: String?

        public var status: Int32?

        public var submitTime: String?

        public var thirdpartApplyId: String?

        public var thirdpartCorpId: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.applyIntentionInfoDO?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.applyIntentionInfoDO != nil {
                map["apply_intention_info_d_o"] = self.applyIntentionInfoDO?.toMap()
            }
            if self.btripCause != nil {
                map["btrip_cause"] = self.btripCause!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.exceedReason != nil {
                map["exceed_reason"] = self.exceedReason!
            }
            if self.exceedType != nil {
                map["exceed_type"] = self.exceedType!
            }
            if self.originStandard != nil {
                map["origin_standard"] = self.originStandard!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.submitTime != nil {
                map["submit_time"] = self.submitTime!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartCorpId != nil {
                map["thirdpart_corp_id"] = self.thirdpartCorpId!
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("apply_intention_info_d_o") && dict["apply_intention_info_d_o"] != nil {
                var model = TrainExceedApplyQueryResponseBody.Module.ApplyIntentionInfoDO()
                model.fromMap(dict["apply_intention_info_d_o"] as! [String: Any])
                self.applyIntentionInfoDO = model
            }
            if dict.keys.contains("btrip_cause") && dict["btrip_cause"] != nil {
                self.btripCause = dict["btrip_cause"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("exceed_reason") && dict["exceed_reason"] != nil {
                self.exceedReason = dict["exceed_reason"] as! String
            }
            if dict.keys.contains("exceed_type") && dict["exceed_type"] != nil {
                self.exceedType = dict["exceed_type"] as! Int32
            }
            if dict.keys.contains("origin_standard") && dict["origin_standard"] != nil {
                self.originStandard = dict["origin_standard"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("submit_time") && dict["submit_time"] != nil {
                self.submitTime = dict["submit_time"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_corp_id") && dict["thirdpart_corp_id"] != nil {
                self.thirdpartCorpId = dict["thirdpart_corp_id"] as! String
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TrainExceedApplyQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TrainExceedApplyQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainExceedApplyQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainExceedApplyQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainExceedApplyQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainOrderListQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class TrainOrderListQueryRequest : Tea.TeaModel {
    public var allApply: Bool?

    public var applyId: Int64?

    public var departId: String?

    public var endTime: String?

    public var page: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var thirdpartApplyId: String?

    public var updateEndTime: String?

    public var updateStartTime: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allApply != nil {
            map["all_apply"] = self.allApply!
        }
        if self.applyId != nil {
            map["apply_id"] = self.applyId!
        }
        if self.departId != nil {
            map["depart_id"] = self.departId!
        }
        if self.endTime != nil {
            map["end_time"] = self.endTime!
        }
        if self.page != nil {
            map["page"] = self.page!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.startTime != nil {
            map["start_time"] = self.startTime!
        }
        if self.thirdpartApplyId != nil {
            map["thirdpart_apply_id"] = self.thirdpartApplyId!
        }
        if self.updateEndTime != nil {
            map["update_end_time"] = self.updateEndTime!
        }
        if self.updateStartTime != nil {
            map["update_start_time"] = self.updateStartTime!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("all_apply") && dict["all_apply"] != nil {
            self.allApply = dict["all_apply"] as! Bool
        }
        if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
            self.applyId = dict["apply_id"] as! Int64
        }
        if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
            self.departId = dict["depart_id"] as! String
        }
        if dict.keys.contains("end_time") && dict["end_time"] != nil {
            self.endTime = dict["end_time"] as! String
        }
        if dict.keys.contains("page") && dict["page"] != nil {
            self.page = dict["page"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("start_time") && dict["start_time"] != nil {
            self.startTime = dict["start_time"] as! String
        }
        if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
            self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
        }
        if dict.keys.contains("update_end_time") && dict["update_end_time"] != nil {
            self.updateEndTime = dict["update_end_time"] as! String
        }
        if dict.keys.contains("update_start_time") && dict["update_start_time"] != nil {
            self.updateStartTime = dict["update_start_time"] as! String
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class TrainOrderListQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class CostCenter : Tea.TeaModel {
            public var corpId: String?

            public var id: Int64?

            public var name: String?

            public var number: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                if self.number != nil {
                    map["number"] = self.number!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
                if dict.keys.contains("number") && dict["number"] != nil {
                    self.number = dict["number"] as! String
                }
            }
        }
        public class Invoice : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var categoryType: Int32?

            public var endCity: String?

            public var endTime: String?

            public var gmtCreate: String?

            public var originalTrainNo: String?

            public var passengerName: String?

            public var payType: Int32?

            public var price: Double?

            public var seatType: String?

            public var startCity: String?

            public var startTime: String?

            public var tradeId: String?

            public var trainNo: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.categoryType != nil {
                    map["category_type"] = self.categoryType!
                }
                if self.endCity != nil {
                    map["end_city"] = self.endCity!
                }
                if self.endTime != nil {
                    map["end_time"] = self.endTime!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.originalTrainNo != nil {
                    map["original_train_no"] = self.originalTrainNo!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.seatType != nil {
                    map["seat_type"] = self.seatType!
                }
                if self.startCity != nil {
                    map["start_city"] = self.startCity!
                }
                if self.startTime != nil {
                    map["start_time"] = self.startTime!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.trainNo != nil {
                    map["train_no"] = self.trainNo!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("category_type") && dict["category_type"] != nil {
                    self.categoryType = dict["category_type"] as! Int32
                }
                if dict.keys.contains("end_city") && dict["end_city"] != nil {
                    self.endCity = dict["end_city"] as! String
                }
                if dict.keys.contains("end_time") && dict["end_time"] != nil {
                    self.endTime = dict["end_time"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("original_train_no") && dict["original_train_no"] != nil {
                    self.originalTrainNo = dict["original_train_no"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("seat_type") && dict["seat_type"] != nil {
                    self.seatType = dict["seat_type"] as! String
                }
                if dict.keys.contains("start_city") && dict["start_city"] != nil {
                    self.startCity = dict["start_city"] as! String
                }
                if dict.keys.contains("start_time") && dict["start_time"] != nil {
                    self.startTime = dict["start_time"] as! String
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("train_no") && dict["train_no"] != nil {
                    self.trainNo = dict["train_no"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class UserAffiliateList : Tea.TeaModel {
            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
            }
        }
        public var applyId: Int64?

        public var arrCity: String?

        public var arrCityAdCode: String?

        public var arrStation: String?

        public var arrTime: String?

        public var btripTitle: String?

        public var contactName: String?

        public var corpId: String?

        public var corpName: String?

        public var costCenter: TrainOrderListQueryResponseBody.Module.CostCenter?

        public var depCity: String?

        public var depCityAdCode: String?

        public var depStation: String?

        public var depTime: String?

        public var departId: String?

        public var departName: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var invoice: TrainOrderListQueryResponseBody.Module.Invoice?

        public var priceInfoList: [TrainOrderListQueryResponseBody.Module.PriceInfoList]?

        public var projectCode: String?

        public var projectId: Int64?

        public var projectTitle: String?

        public var riderName: String?

        public var runTime: String?

        public var seatType: String?

        public var status: Int32?

        public var thirdPartProjectId: String?

        public var thirdpartApplyId: String?

        public var thirdpartItineraryId: String?

        public var ticketCount: Int32?

        public var ticketNo12306: String?

        public var trainNumber: String?

        public var trainType: String?

        public var userAffiliateList: [TrainOrderListQueryResponseBody.Module.UserAffiliateList]?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.costCenter?.validate()
            try self.invoice?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyId != nil {
                map["apply_id"] = self.applyId!
            }
            if self.arrCity != nil {
                map["arr_city"] = self.arrCity!
            }
            if self.arrCityAdCode != nil {
                map["arr_city_ad_code"] = self.arrCityAdCode!
            }
            if self.arrStation != nil {
                map["arr_station"] = self.arrStation!
            }
            if self.arrTime != nil {
                map["arr_time"] = self.arrTime!
            }
            if self.btripTitle != nil {
                map["btrip_title"] = self.btripTitle!
            }
            if self.contactName != nil {
                map["contact_name"] = self.contactName!
            }
            if self.corpId != nil {
                map["corp_id"] = self.corpId!
            }
            if self.corpName != nil {
                map["corp_name"] = self.corpName!
            }
            if self.costCenter != nil {
                map["cost_center"] = self.costCenter?.toMap()
            }
            if self.depCity != nil {
                map["dep_city"] = self.depCity!
            }
            if self.depCityAdCode != nil {
                map["dep_city_ad_code"] = self.depCityAdCode!
            }
            if self.depStation != nil {
                map["dep_station"] = self.depStation!
            }
            if self.depTime != nil {
                map["dep_time"] = self.depTime!
            }
            if self.departId != nil {
                map["depart_id"] = self.departId!
            }
            if self.departName != nil {
                map["depart_name"] = self.departName!
            }
            if self.gmtCreate != nil {
                map["gmt_create"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["gmt_modified"] = self.gmtModified!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.invoice != nil {
                map["invoice"] = self.invoice?.toMap()
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            if self.projectCode != nil {
                map["project_code"] = self.projectCode!
            }
            if self.projectId != nil {
                map["project_id"] = self.projectId!
            }
            if self.projectTitle != nil {
                map["project_title"] = self.projectTitle!
            }
            if self.riderName != nil {
                map["rider_name"] = self.riderName!
            }
            if self.runTime != nil {
                map["run_time"] = self.runTime!
            }
            if self.seatType != nil {
                map["seat_type"] = self.seatType!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            if self.thirdPartProjectId != nil {
                map["third_part_project_id"] = self.thirdPartProjectId!
            }
            if self.thirdpartApplyId != nil {
                map["thirdpart_apply_id"] = self.thirdpartApplyId!
            }
            if self.thirdpartItineraryId != nil {
                map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
            }
            if self.ticketCount != nil {
                map["ticket_count"] = self.ticketCount!
            }
            if self.ticketNo12306 != nil {
                map["ticket_no12306"] = self.ticketNo12306!
            }
            if self.trainNumber != nil {
                map["train_number"] = self.trainNumber!
            }
            if self.trainType != nil {
                map["train_type"] = self.trainType!
            }
            if self.userAffiliateList != nil {
                var tmp : [Any] = []
                for k in self.userAffiliateList! {
                    tmp.append(k.toMap())
                }
                map["user_affiliate_list"] = tmp
            }
            if self.userId != nil {
                map["user_id"] = self.userId!
            }
            if self.userName != nil {
                map["user_name"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                self.applyId = dict["apply_id"] as! Int64
            }
            if dict.keys.contains("arr_city") && dict["arr_city"] != nil {
                self.arrCity = dict["arr_city"] as! String
            }
            if dict.keys.contains("arr_city_ad_code") && dict["arr_city_ad_code"] != nil {
                self.arrCityAdCode = dict["arr_city_ad_code"] as! String
            }
            if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                self.arrStation = dict["arr_station"] as! String
            }
            if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                self.arrTime = dict["arr_time"] as! String
            }
            if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                self.btripTitle = dict["btrip_title"] as! String
            }
            if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                self.contactName = dict["contact_name"] as! String
            }
            if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                self.corpId = dict["corp_id"] as! String
            }
            if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                self.corpName = dict["corp_name"] as! String
            }
            if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                var model = TrainOrderListQueryResponseBody.Module.CostCenter()
                model.fromMap(dict["cost_center"] as! [String: Any])
                self.costCenter = model
            }
            if dict.keys.contains("dep_city") && dict["dep_city"] != nil {
                self.depCity = dict["dep_city"] as! String
            }
            if dict.keys.contains("dep_city_ad_code") && dict["dep_city_ad_code"] != nil {
                self.depCityAdCode = dict["dep_city_ad_code"] as! String
            }
            if dict.keys.contains("dep_station") && dict["dep_station"] != nil {
                self.depStation = dict["dep_station"] as! String
            }
            if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                self.depTime = dict["dep_time"] as! String
            }
            if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                self.departId = dict["depart_id"] as! String
            }
            if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                self.departName = dict["depart_name"] as! String
            }
            if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                self.gmtCreate = dict["gmt_create"] as! String
            }
            if dict.keys.contains("gmt_modified") && dict["gmt_modified"] != nil {
                self.gmtModified = dict["gmt_modified"] as! String
            }
            if dict.keys.contains("id") && dict["id"] != nil {
                self.id = dict["id"] as! Int64
            }
            if dict.keys.contains("invoice") && dict["invoice"] != nil {
                var model = TrainOrderListQueryResponseBody.Module.Invoice()
                model.fromMap(dict["invoice"] as! [String: Any])
                self.invoice = model
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [TrainOrderListQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = TrainOrderListQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
            if dict.keys.contains("project_code") && dict["project_code"] != nil {
                self.projectCode = dict["project_code"] as! String
            }
            if dict.keys.contains("project_id") && dict["project_id"] != nil {
                self.projectId = dict["project_id"] as! Int64
            }
            if dict.keys.contains("project_title") && dict["project_title"] != nil {
                self.projectTitle = dict["project_title"] as! String
            }
            if dict.keys.contains("rider_name") && dict["rider_name"] != nil {
                self.riderName = dict["rider_name"] as! String
            }
            if dict.keys.contains("run_time") && dict["run_time"] != nil {
                self.runTime = dict["run_time"] as! String
            }
            if dict.keys.contains("seat_type") && dict["seat_type"] != nil {
                self.seatType = dict["seat_type"] as! String
            }
            if dict.keys.contains("status") && dict["status"] != nil {
                self.status = dict["status"] as! Int32
            }
            if dict.keys.contains("third_part_project_id") && dict["third_part_project_id"] != nil {
                self.thirdPartProjectId = dict["third_part_project_id"] as! String
            }
            if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
            }
            if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
            }
            if dict.keys.contains("ticket_count") && dict["ticket_count"] != nil {
                self.ticketCount = dict["ticket_count"] as! Int32
            }
            if dict.keys.contains("ticket_no12306") && dict["ticket_no12306"] != nil {
                self.ticketNo12306 = dict["ticket_no12306"] as! String
            }
            if dict.keys.contains("train_number") && dict["train_number"] != nil {
                self.trainNumber = dict["train_number"] as! String
            }
            if dict.keys.contains("train_type") && dict["train_type"] != nil {
                self.trainType = dict["train_type"] as! String
            }
            if dict.keys.contains("user_affiliate_list") && dict["user_affiliate_list"] != nil {
                var tmp : [TrainOrderListQueryResponseBody.Module.UserAffiliateList] = []
                for v in dict["user_affiliate_list"] as! [Any] {
                    var model = TrainOrderListQueryResponseBody.Module.UserAffiliateList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.userAffiliateList = tmp
            }
            if dict.keys.contains("user_id") && dict["user_id"] != nil {
                self.userId = dict["user_id"] as! String
            }
            if dict.keys.contains("user_name") && dict["user_name"] != nil {
                self.userName = dict["user_name"] as! String
            }
        }
    }
    public class PageInfo : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var totalNumber: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["page"] = self.page!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalNumber != nil {
                map["total_number"] = self.totalNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("page") && dict["page"] != nil {
                self.page = dict["page"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_number") && dict["total_number"] != nil {
                self.totalNumber = dict["total_number"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [TrainOrderListQueryResponseBody.Module]?

    public var pageInfo: TrainOrderListQueryResponseBody.PageInfo?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.pageInfo != nil {
            map["page_info"] = self.pageInfo?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [TrainOrderListQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = TrainOrderListQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("page_info") && dict["page_info"] != nil {
            var model = TrainOrderListQueryResponseBody.PageInfo()
            model.fromMap(dict["page_info"] as! [String: Any])
            self.pageInfo = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainOrderListQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainOrderListQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainOrderListQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainOrderQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class TrainOrderQueryRequest : Tea.TeaModel {
    public var orderId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class TrainOrderQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ChangeTicketInfoList : Tea.TeaModel {
            public var changeCoachNo: String?

            public var changeGapFee: Double?

            public var changeHandlingFee: Double?

            public var changeSeatNo: String?

            public var changeSeatTypeName: String?

            public var changeServiceFee: Double?

            public var changeTrainNo: String?

            public var changeTrainTypeName: String?

            public var checkInTime: String?

            public var checkOutTime: String?

            public var endTime: String?

            public var fromStationName: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var originTicketNo: String?

            public var outTicketStatus: String?

            public var startTime: String?

            public var ticketNo: String?

            public var toStationName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeCoachNo != nil {
                    map["change_coach_no"] = self.changeCoachNo!
                }
                if self.changeGapFee != nil {
                    map["change_gap_fee"] = self.changeGapFee!
                }
                if self.changeHandlingFee != nil {
                    map["change_handling_fee"] = self.changeHandlingFee!
                }
                if self.changeSeatNo != nil {
                    map["change_seat_no"] = self.changeSeatNo!
                }
                if self.changeSeatTypeName != nil {
                    map["change_seat_type_name"] = self.changeSeatTypeName!
                }
                if self.changeServiceFee != nil {
                    map["change_service_fee"] = self.changeServiceFee!
                }
                if self.changeTrainNo != nil {
                    map["change_train_no"] = self.changeTrainNo!
                }
                if self.changeTrainTypeName != nil {
                    map["change_train_type_name"] = self.changeTrainTypeName!
                }
                if self.checkInTime != nil {
                    map["check_in_time"] = self.checkInTime!
                }
                if self.checkOutTime != nil {
                    map["check_out_time"] = self.checkOutTime!
                }
                if self.endTime != nil {
                    map["end_time"] = self.endTime!
                }
                if self.fromStationName != nil {
                    map["from_station_name"] = self.fromStationName!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.originTicketNo != nil {
                    map["origin_ticket_no"] = self.originTicketNo!
                }
                if self.outTicketStatus != nil {
                    map["out_ticket_status"] = self.outTicketStatus!
                }
                if self.startTime != nil {
                    map["start_time"] = self.startTime!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.toStationName != nil {
                    map["to_station_name"] = self.toStationName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("change_coach_no") && dict["change_coach_no"] != nil {
                    self.changeCoachNo = dict["change_coach_no"] as! String
                }
                if dict.keys.contains("change_gap_fee") && dict["change_gap_fee"] != nil {
                    self.changeGapFee = dict["change_gap_fee"] as! Double
                }
                if dict.keys.contains("change_handling_fee") && dict["change_handling_fee"] != nil {
                    self.changeHandlingFee = dict["change_handling_fee"] as! Double
                }
                if dict.keys.contains("change_seat_no") && dict["change_seat_no"] != nil {
                    self.changeSeatNo = dict["change_seat_no"] as! String
                }
                if dict.keys.contains("change_seat_type_name") && dict["change_seat_type_name"] != nil {
                    self.changeSeatTypeName = dict["change_seat_type_name"] as! String
                }
                if dict.keys.contains("change_service_fee") && dict["change_service_fee"] != nil {
                    self.changeServiceFee = dict["change_service_fee"] as! Double
                }
                if dict.keys.contains("change_train_no") && dict["change_train_no"] != nil {
                    self.changeTrainNo = dict["change_train_no"] as! String
                }
                if dict.keys.contains("change_train_type_name") && dict["change_train_type_name"] != nil {
                    self.changeTrainTypeName = dict["change_train_type_name"] as! String
                }
                if dict.keys.contains("check_in_time") && dict["check_in_time"] != nil {
                    self.checkInTime = dict["check_in_time"] as! String
                }
                if dict.keys.contains("check_out_time") && dict["check_out_time"] != nil {
                    self.checkOutTime = dict["check_out_time"] as! String
                }
                if dict.keys.contains("end_time") && dict["end_time"] != nil {
                    self.endTime = dict["end_time"] as! String
                }
                if dict.keys.contains("from_station_name") && dict["from_station_name"] != nil {
                    self.fromStationName = dict["from_station_name"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("origin_ticket_no") && dict["origin_ticket_no"] != nil {
                    self.originTicketNo = dict["origin_ticket_no"] as! String
                }
                if dict.keys.contains("out_ticket_status") && dict["out_ticket_status"] != nil {
                    self.outTicketStatus = dict["out_ticket_status"] as! String
                }
                if dict.keys.contains("start_time") && dict["start_time"] != nil {
                    self.startTime = dict["start_time"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("to_station_name") && dict["to_station_name"] != nil {
                    self.toStationName = dict["to_station_name"] as! String
                }
            }
        }
        public class InvoiceInfo : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class OrderBaseInfo : Tea.TeaModel {
            public var applyId: String?

            public var btripTitle: String?

            public var contactName: String?

            public var corpId: String?

            public var corpName: String?

            public var departId: String?

            public var departName: String?

            public var exceedApplyId: String?

            public var exceedThirdPartApplyId: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var itineraryId: String?

            public var orderId: Int64?

            public var orderStatus: Int32?

            public var thirdpartApplyId: String?

            public var thirdpartCorpId: String?

            public var thirdpartItineraryId: String?

            public var tripType: Int32?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.btripTitle != nil {
                    map["btrip_title"] = self.btripTitle!
                }
                if self.contactName != nil {
                    map["contact_name"] = self.contactName!
                }
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.departId != nil {
                    map["depart_id"] = self.departId!
                }
                if self.departName != nil {
                    map["depart_name"] = self.departName!
                }
                if self.exceedApplyId != nil {
                    map["exceed_apply_id"] = self.exceedApplyId!
                }
                if self.exceedThirdPartApplyId != nil {
                    map["exceed_third_part_apply_id"] = self.exceedThirdPartApplyId!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderStatus != nil {
                    map["order_status"] = self.orderStatus!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.thirdpartCorpId != nil {
                    map["thirdpart_corp_id"] = self.thirdpartCorpId!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                    self.btripTitle = dict["btrip_title"] as! String
                }
                if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                    self.contactName = dict["contact_name"] as! String
                }
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                    self.departId = dict["depart_id"] as! String
                }
                if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                    self.departName = dict["depart_name"] as! String
                }
                if dict.keys.contains("exceed_apply_id") && dict["exceed_apply_id"] != nil {
                    self.exceedApplyId = dict["exceed_apply_id"] as! String
                }
                if dict.keys.contains("exceed_third_part_apply_id") && dict["exceed_third_part_apply_id"] != nil {
                    self.exceedThirdPartApplyId = dict["exceed_third_part_apply_id"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("order_status") && dict["order_status"] != nil {
                    self.orderStatus = dict["order_status"] as! Int32
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("thirdpart_corp_id") && dict["thirdpart_corp_id"] != nil {
                    self.thirdpartCorpId = dict["thirdpart_corp_id"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! Int32
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class PassengerInfoList : Tea.TeaModel {
            public var costCenterId: Int64?

            public var costCenterName: String?

            public var costCenterNumber: String?

            public var projectCode: String?

            public var projectId: Int64?

            public var projectTitle: String?

            public var thirdpartProjectId: String?

            public var userId: String?

            public var userName: String?

            public var userType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.costCenterId != nil {
                    map["cost_center_id"] = self.costCenterId!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectId != nil {
                    map["project_id"] = self.projectId!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartProjectId != nil {
                    map["thirdpart_project_id"] = self.thirdpartProjectId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                if self.userType != nil {
                    map["user_type"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                    self.costCenterId = dict["cost_center_id"] as! Int64
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_id") && dict["project_id"] != nil {
                    self.projectId = dict["project_id"] as! Int64
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_project_id") && dict["thirdpart_project_id"] != nil {
                    self.thirdpartProjectId = dict["thirdpart_project_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
                if dict.keys.contains("user_type") && dict["user_type"] != nil {
                    self.userType = dict["user_type"] as! Int32
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var gmtCreate: String?

            public var passengerName: String?

            public var payType: Int32?

            public var price: Double?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class RefundTicketInfoList : Tea.TeaModel {
            public var gmtCreate: String?

            public var gmtModify: String?

            public var refundFee: Double?

            public var refundServiceFee: Double?

            public var ticketNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundServiceFee != nil {
                    map["refund_service_fee"] = self.refundServiceFee!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Double
                }
                if dict.keys.contains("refund_service_fee") && dict["refund_service_fee"] != nil {
                    self.refundServiceFee = dict["refund_service_fee"] as! Double
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
            }
        }
        public class TicketInfoList : Tea.TeaModel {
            public var changed: Bool?

            public var checkInTime: String?

            public var checkOutTime: String?

            public var coachNo: String?

            public var endTime: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var outTicketStatus: String?

            public var payType: Int32?

            public var seatNo: String?

            public var seatTypeName: String?

            public var serviceFee: Double?

            public var startTime: String?

            public var ticketNo: String?

            public var ticketPrice: Double?

            public var ticketStatus: Int32?

            public var trainTypeName: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changed != nil {
                    map["changed"] = self.changed!
                }
                if self.checkInTime != nil {
                    map["check_in_time"] = self.checkInTime!
                }
                if self.checkOutTime != nil {
                    map["check_out_time"] = self.checkOutTime!
                }
                if self.coachNo != nil {
                    map["coach_no"] = self.coachNo!
                }
                if self.endTime != nil {
                    map["end_time"] = self.endTime!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.outTicketStatus != nil {
                    map["out_ticket_status"] = self.outTicketStatus!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.seatNo != nil {
                    map["seat_no"] = self.seatNo!
                }
                if self.seatTypeName != nil {
                    map["seat_type_name"] = self.seatTypeName!
                }
                if self.serviceFee != nil {
                    map["service_fee"] = self.serviceFee!
                }
                if self.startTime != nil {
                    map["start_time"] = self.startTime!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketPrice != nil {
                    map["ticket_price"] = self.ticketPrice!
                }
                if self.ticketStatus != nil {
                    map["ticket_status"] = self.ticketStatus!
                }
                if self.trainTypeName != nil {
                    map["train_type_name"] = self.trainTypeName!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("changed") && dict["changed"] != nil {
                    self.changed = dict["changed"] as! Bool
                }
                if dict.keys.contains("check_in_time") && dict["check_in_time"] != nil {
                    self.checkInTime = dict["check_in_time"] as! String
                }
                if dict.keys.contains("check_out_time") && dict["check_out_time"] != nil {
                    self.checkOutTime = dict["check_out_time"] as! String
                }
                if dict.keys.contains("coach_no") && dict["coach_no"] != nil {
                    self.coachNo = dict["coach_no"] as! String
                }
                if dict.keys.contains("end_time") && dict["end_time"] != nil {
                    self.endTime = dict["end_time"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("out_ticket_status") && dict["out_ticket_status"] != nil {
                    self.outTicketStatus = dict["out_ticket_status"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("seat_no") && dict["seat_no"] != nil {
                    self.seatNo = dict["seat_no"] as! String
                }
                if dict.keys.contains("seat_type_name") && dict["seat_type_name"] != nil {
                    self.seatTypeName = dict["seat_type_name"] as! String
                }
                if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                    self.serviceFee = dict["service_fee"] as! Double
                }
                if dict.keys.contains("start_time") && dict["start_time"] != nil {
                    self.startTime = dict["start_time"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                    self.ticketPrice = dict["ticket_price"] as! Double
                }
                if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                    self.ticketStatus = dict["ticket_status"] as! Int32
                }
                if dict.keys.contains("train_type_name") && dict["train_type_name"] != nil {
                    self.trainTypeName = dict["train_type_name"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class TrainInfo : Tea.TeaModel {
            public var arrTime: String?

            public var depTime: String?

            public var fromCityAdCode: String?

            public var fromStationName: String?

            public var runTime: Int64?

            public var toCityAdCode: String?

            public var toStationName: String?

            public var trainNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arrTime != nil {
                    map["arr_time"] = self.arrTime!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.fromCityAdCode != nil {
                    map["from_city_ad_code"] = self.fromCityAdCode!
                }
                if self.fromStationName != nil {
                    map["from_station_name"] = self.fromStationName!
                }
                if self.runTime != nil {
                    map["run_time"] = self.runTime!
                }
                if self.toCityAdCode != nil {
                    map["to_city_ad_code"] = self.toCityAdCode!
                }
                if self.toStationName != nil {
                    map["to_station_name"] = self.toStationName!
                }
                if self.trainNo != nil {
                    map["train_no"] = self.trainNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                    self.arrTime = dict["arr_time"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("from_city_ad_code") && dict["from_city_ad_code"] != nil {
                    self.fromCityAdCode = dict["from_city_ad_code"] as! String
                }
                if dict.keys.contains("from_station_name") && dict["from_station_name"] != nil {
                    self.fromStationName = dict["from_station_name"] as! String
                }
                if dict.keys.contains("run_time") && dict["run_time"] != nil {
                    self.runTime = dict["run_time"] as! Int64
                }
                if dict.keys.contains("to_city_ad_code") && dict["to_city_ad_code"] != nil {
                    self.toCityAdCode = dict["to_city_ad_code"] as! String
                }
                if dict.keys.contains("to_station_name") && dict["to_station_name"] != nil {
                    self.toStationName = dict["to_station_name"] as! String
                }
                if dict.keys.contains("train_no") && dict["train_no"] != nil {
                    self.trainNo = dict["train_no"] as! String
                }
            }
        }
        public var changeTicketInfoList: [TrainOrderQueryResponseBody.Module.ChangeTicketInfoList]?

        public var invoiceInfo: TrainOrderQueryResponseBody.Module.InvoiceInfo?

        public var orderBaseInfo: TrainOrderQueryResponseBody.Module.OrderBaseInfo?

        public var passengerInfoList: [TrainOrderQueryResponseBody.Module.PassengerInfoList]?

        public var priceInfoList: [TrainOrderQueryResponseBody.Module.PriceInfoList]?

        public var refundTicketInfoList: [TrainOrderQueryResponseBody.Module.RefundTicketInfoList]?

        public var ticketInfoList: [TrainOrderQueryResponseBody.Module.TicketInfoList]?

        public var trainInfo: TrainOrderQueryResponseBody.Module.TrainInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.invoiceInfo?.validate()
            try self.orderBaseInfo?.validate()
            try self.trainInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.changeTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.changeTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["change_ticket_info_list"] = tmp
            }
            if self.invoiceInfo != nil {
                map["invoice_info"] = self.invoiceInfo?.toMap()
            }
            if self.orderBaseInfo != nil {
                map["order_base_info"] = self.orderBaseInfo?.toMap()
            }
            if self.passengerInfoList != nil {
                var tmp : [Any] = []
                for k in self.passengerInfoList! {
                    tmp.append(k.toMap())
                }
                map["passenger_info_list"] = tmp
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            if self.refundTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.refundTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["refund_ticket_info_list"] = tmp
            }
            if self.ticketInfoList != nil {
                var tmp : [Any] = []
                for k in self.ticketInfoList! {
                    tmp.append(k.toMap())
                }
                map["ticket_info_list"] = tmp
            }
            if self.trainInfo != nil {
                map["train_info"] = self.trainInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("change_ticket_info_list") && dict["change_ticket_info_list"] != nil {
                var tmp : [TrainOrderQueryResponseBody.Module.ChangeTicketInfoList] = []
                for v in dict["change_ticket_info_list"] as! [Any] {
                    var model = TrainOrderQueryResponseBody.Module.ChangeTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.changeTicketInfoList = tmp
            }
            if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
                var model = TrainOrderQueryResponseBody.Module.InvoiceInfo()
                model.fromMap(dict["invoice_info"] as! [String: Any])
                self.invoiceInfo = model
            }
            if dict.keys.contains("order_base_info") && dict["order_base_info"] != nil {
                var model = TrainOrderQueryResponseBody.Module.OrderBaseInfo()
                model.fromMap(dict["order_base_info"] as! [String: Any])
                self.orderBaseInfo = model
            }
            if dict.keys.contains("passenger_info_list") && dict["passenger_info_list"] != nil {
                var tmp : [TrainOrderQueryResponseBody.Module.PassengerInfoList] = []
                for v in dict["passenger_info_list"] as! [Any] {
                    var model = TrainOrderQueryResponseBody.Module.PassengerInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerInfoList = tmp
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [TrainOrderQueryResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = TrainOrderQueryResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
            if dict.keys.contains("refund_ticket_info_list") && dict["refund_ticket_info_list"] != nil {
                var tmp : [TrainOrderQueryResponseBody.Module.RefundTicketInfoList] = []
                for v in dict["refund_ticket_info_list"] as! [Any] {
                    var model = TrainOrderQueryResponseBody.Module.RefundTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.refundTicketInfoList = tmp
            }
            if dict.keys.contains("ticket_info_list") && dict["ticket_info_list"] != nil {
                var tmp : [TrainOrderQueryResponseBody.Module.TicketInfoList] = []
                for v in dict["ticket_info_list"] as! [Any] {
                    var model = TrainOrderQueryResponseBody.Module.TicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.ticketInfoList = tmp
            }
            if dict.keys.contains("train_info") && dict["train_info"] != nil {
                var model = TrainOrderQueryResponseBody.Module.TrainInfo()
                model.fromMap(dict["train_info"] as! [String: Any])
                self.trainInfo = model
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TrainOrderQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TrainOrderQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainOrderQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainOrderQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainOrderQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainOrderQueryV2Headers : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripCorpToken != nil {
            map["x-acs-btrip-corp-token"] = self.xAcsBtripCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-corp-token") && dict["x-acs-btrip-corp-token"] != nil {
            self.xAcsBtripCorpToken = dict["x-acs-btrip-corp-token"] as! String
        }
    }
}

public class TrainOrderQueryV2Request : Tea.TeaModel {
    public var orderId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["order_id"] = self.orderId!
        }
        if self.userId != nil {
            map["user_id"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("order_id") && dict["order_id"] != nil {
            self.orderId = dict["order_id"] as! Int64
        }
        if dict.keys.contains("user_id") && dict["user_id"] != nil {
            self.userId = dict["user_id"] as! String
        }
    }
}

public class TrainOrderQueryV2ResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class ChangeTicketInfoList : Tea.TeaModel {
            public var changeCoachNo: String?

            public var changeGapFee: Double?

            public var changeHandlingFee: Double?

            public var changeSeatNo: String?

            public var changeSeatTypeName: String?

            public var changeServiceFee: Double?

            public var changeTrainNo: String?

            public var changeTrainTypeName: String?

            public var checkInTime: String?

            public var checkOutTime: String?

            public var endTime: String?

            public var fromCityName: String?

            public var fromStationName: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var originTicketNo: String?

            public var outTicketStatus: String?

            public var segmentIndex: Int32?

            public var startTime: String?

            public var ticketEntrance: String?

            public var ticketNo: String?

            public var ticketStatus: Int32?

            public var toCityName: String?

            public var toStationName: String?

            public var useTicket: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeCoachNo != nil {
                    map["change_coach_no"] = self.changeCoachNo!
                }
                if self.changeGapFee != nil {
                    map["change_gap_fee"] = self.changeGapFee!
                }
                if self.changeHandlingFee != nil {
                    map["change_handling_fee"] = self.changeHandlingFee!
                }
                if self.changeSeatNo != nil {
                    map["change_seat_no"] = self.changeSeatNo!
                }
                if self.changeSeatTypeName != nil {
                    map["change_seat_type_name"] = self.changeSeatTypeName!
                }
                if self.changeServiceFee != nil {
                    map["change_service_fee"] = self.changeServiceFee!
                }
                if self.changeTrainNo != nil {
                    map["change_train_no"] = self.changeTrainNo!
                }
                if self.changeTrainTypeName != nil {
                    map["change_train_type_name"] = self.changeTrainTypeName!
                }
                if self.checkInTime != nil {
                    map["check_in_time"] = self.checkInTime!
                }
                if self.checkOutTime != nil {
                    map["check_out_time"] = self.checkOutTime!
                }
                if self.endTime != nil {
                    map["end_time"] = self.endTime!
                }
                if self.fromCityName != nil {
                    map["from_city_name"] = self.fromCityName!
                }
                if self.fromStationName != nil {
                    map["from_station_name"] = self.fromStationName!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.originTicketNo != nil {
                    map["origin_ticket_no"] = self.originTicketNo!
                }
                if self.outTicketStatus != nil {
                    map["out_ticket_status"] = self.outTicketStatus!
                }
                if self.segmentIndex != nil {
                    map["segment_index"] = self.segmentIndex!
                }
                if self.startTime != nil {
                    map["start_time"] = self.startTime!
                }
                if self.ticketEntrance != nil {
                    map["ticket_entrance"] = self.ticketEntrance!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.ticketStatus != nil {
                    map["ticket_status"] = self.ticketStatus!
                }
                if self.toCityName != nil {
                    map["to_city_name"] = self.toCityName!
                }
                if self.toStationName != nil {
                    map["to_station_name"] = self.toStationName!
                }
                if self.useTicket != nil {
                    map["use_ticket"] = self.useTicket!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("change_coach_no") && dict["change_coach_no"] != nil {
                    self.changeCoachNo = dict["change_coach_no"] as! String
                }
                if dict.keys.contains("change_gap_fee") && dict["change_gap_fee"] != nil {
                    self.changeGapFee = dict["change_gap_fee"] as! Double
                }
                if dict.keys.contains("change_handling_fee") && dict["change_handling_fee"] != nil {
                    self.changeHandlingFee = dict["change_handling_fee"] as! Double
                }
                if dict.keys.contains("change_seat_no") && dict["change_seat_no"] != nil {
                    self.changeSeatNo = dict["change_seat_no"] as! String
                }
                if dict.keys.contains("change_seat_type_name") && dict["change_seat_type_name"] != nil {
                    self.changeSeatTypeName = dict["change_seat_type_name"] as! String
                }
                if dict.keys.contains("change_service_fee") && dict["change_service_fee"] != nil {
                    self.changeServiceFee = dict["change_service_fee"] as! Double
                }
                if dict.keys.contains("change_train_no") && dict["change_train_no"] != nil {
                    self.changeTrainNo = dict["change_train_no"] as! String
                }
                if dict.keys.contains("change_train_type_name") && dict["change_train_type_name"] != nil {
                    self.changeTrainTypeName = dict["change_train_type_name"] as! String
                }
                if dict.keys.contains("check_in_time") && dict["check_in_time"] != nil {
                    self.checkInTime = dict["check_in_time"] as! String
                }
                if dict.keys.contains("check_out_time") && dict["check_out_time"] != nil {
                    self.checkOutTime = dict["check_out_time"] as! String
                }
                if dict.keys.contains("end_time") && dict["end_time"] != nil {
                    self.endTime = dict["end_time"] as! String
                }
                if dict.keys.contains("from_city_name") && dict["from_city_name"] != nil {
                    self.fromCityName = dict["from_city_name"] as! String
                }
                if dict.keys.contains("from_station_name") && dict["from_station_name"] != nil {
                    self.fromStationName = dict["from_station_name"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("origin_ticket_no") && dict["origin_ticket_no"] != nil {
                    self.originTicketNo = dict["origin_ticket_no"] as! String
                }
                if dict.keys.contains("out_ticket_status") && dict["out_ticket_status"] != nil {
                    self.outTicketStatus = dict["out_ticket_status"] as! String
                }
                if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                    self.segmentIndex = dict["segment_index"] as! Int32
                }
                if dict.keys.contains("start_time") && dict["start_time"] != nil {
                    self.startTime = dict["start_time"] as! String
                }
                if dict.keys.contains("ticket_entrance") && dict["ticket_entrance"] != nil {
                    self.ticketEntrance = dict["ticket_entrance"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                    self.ticketStatus = dict["ticket_status"] as! Int32
                }
                if dict.keys.contains("to_city_name") && dict["to_city_name"] != nil {
                    self.toCityName = dict["to_city_name"] as! String
                }
                if dict.keys.contains("to_station_name") && dict["to_station_name"] != nil {
                    self.toStationName = dict["to_station_name"] as! String
                }
                if dict.keys.contains("use_ticket") && dict["use_ticket"] != nil {
                    self.useTicket = dict["use_ticket"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class InvoiceInfo : Tea.TeaModel {
            public var id: Int64?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.title != nil {
                    map["title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! Int64
                }
                if dict.keys.contains("title") && dict["title"] != nil {
                    self.title = dict["title"] as! String
                }
            }
        }
        public class OrderBaseInfo : Tea.TeaModel {
            public var applyId: String?

            public var btripTitle: String?

            public var contactName: String?

            public var contactPhone: String?

            public var corpId: String?

            public var corpName: String?

            public var departId: String?

            public var departName: String?

            public var exceedApplyId: String?

            public var exceedThirdpartApplyId: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var itineraryId: String?

            public var orderId: Int64?

            public var orderStatus: Int32?

            public var thirdpartApplyId: String?

            public var thirdpartDepartId: String?

            public var thirdpartItineraryId: String?

            public var tripType: Int32?

            public var userId: String?

            public var userNick: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.btripTitle != nil {
                    map["btrip_title"] = self.btripTitle!
                }
                if self.contactName != nil {
                    map["contact_name"] = self.contactName!
                }
                if self.contactPhone != nil {
                    map["contact_phone"] = self.contactPhone!
                }
                if self.corpId != nil {
                    map["corp_id"] = self.corpId!
                }
                if self.corpName != nil {
                    map["corp_name"] = self.corpName!
                }
                if self.departId != nil {
                    map["depart_id"] = self.departId!
                }
                if self.departName != nil {
                    map["depart_name"] = self.departName!
                }
                if self.exceedApplyId != nil {
                    map["exceed_apply_id"] = self.exceedApplyId!
                }
                if self.exceedThirdpartApplyId != nil {
                    map["exceed_thirdpart_apply_id"] = self.exceedThirdpartApplyId!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.itineraryId != nil {
                    map["itinerary_id"] = self.itineraryId!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.orderStatus != nil {
                    map["order_status"] = self.orderStatus!
                }
                if self.thirdpartApplyId != nil {
                    map["thirdpart_apply_id"] = self.thirdpartApplyId!
                }
                if self.thirdpartDepartId != nil {
                    map["thirdpart_depart_id"] = self.thirdpartDepartId!
                }
                if self.thirdpartItineraryId != nil {
                    map["thirdpart_itinerary_id"] = self.thirdpartItineraryId!
                }
                if self.tripType != nil {
                    map["trip_type"] = self.tripType!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userNick != nil {
                    map["user_nick"] = self.userNick!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("btrip_title") && dict["btrip_title"] != nil {
                    self.btripTitle = dict["btrip_title"] as! String
                }
                if dict.keys.contains("contact_name") && dict["contact_name"] != nil {
                    self.contactName = dict["contact_name"] as! String
                }
                if dict.keys.contains("contact_phone") && dict["contact_phone"] != nil {
                    self.contactPhone = dict["contact_phone"] as! String
                }
                if dict.keys.contains("corp_id") && dict["corp_id"] != nil {
                    self.corpId = dict["corp_id"] as! String
                }
                if dict.keys.contains("corp_name") && dict["corp_name"] != nil {
                    self.corpName = dict["corp_name"] as! String
                }
                if dict.keys.contains("depart_id") && dict["depart_id"] != nil {
                    self.departId = dict["depart_id"] as! String
                }
                if dict.keys.contains("depart_name") && dict["depart_name"] != nil {
                    self.departName = dict["depart_name"] as! String
                }
                if dict.keys.contains("exceed_apply_id") && dict["exceed_apply_id"] != nil {
                    self.exceedApplyId = dict["exceed_apply_id"] as! String
                }
                if dict.keys.contains("exceed_thirdpart_apply_id") && dict["exceed_thirdpart_apply_id"] != nil {
                    self.exceedThirdpartApplyId = dict["exceed_thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("itinerary_id") && dict["itinerary_id"] != nil {
                    self.itineraryId = dict["itinerary_id"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("order_status") && dict["order_status"] != nil {
                    self.orderStatus = dict["order_status"] as! Int32
                }
                if dict.keys.contains("thirdpart_apply_id") && dict["thirdpart_apply_id"] != nil {
                    self.thirdpartApplyId = dict["thirdpart_apply_id"] as! String
                }
                if dict.keys.contains("thirdpart_depart_id") && dict["thirdpart_depart_id"] != nil {
                    self.thirdpartDepartId = dict["thirdpart_depart_id"] as! String
                }
                if dict.keys.contains("thirdpart_itinerary_id") && dict["thirdpart_itinerary_id"] != nil {
                    self.thirdpartItineraryId = dict["thirdpart_itinerary_id"] as! String
                }
                if dict.keys.contains("trip_type") && dict["trip_type"] != nil {
                    self.tripType = dict["trip_type"] as! Int32
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_nick") && dict["user_nick"] != nil {
                    self.userNick = dict["user_nick"] as! String
                }
            }
        }
        public class PassengerInfoList : Tea.TeaModel {
            public var costCenterId: Int64?

            public var costCenterName: String?

            public var costCenterNumber: String?

            public var projectCode: String?

            public var projectId: Int64?

            public var projectTitle: String?

            public var thirdpartCostCenterId: String?

            public var thirdpartProjectId: String?

            public var userId: String?

            public var userName: String?

            public var userType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.costCenterId != nil {
                    map["cost_center_id"] = self.costCenterId!
                }
                if self.costCenterName != nil {
                    map["cost_center_name"] = self.costCenterName!
                }
                if self.costCenterNumber != nil {
                    map["cost_center_number"] = self.costCenterNumber!
                }
                if self.projectCode != nil {
                    map["project_code"] = self.projectCode!
                }
                if self.projectId != nil {
                    map["project_id"] = self.projectId!
                }
                if self.projectTitle != nil {
                    map["project_title"] = self.projectTitle!
                }
                if self.thirdpartCostCenterId != nil {
                    map["thirdpart_cost_center_id"] = self.thirdpartCostCenterId!
                }
                if self.thirdpartProjectId != nil {
                    map["thirdpart_project_id"] = self.thirdpartProjectId!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                if self.userName != nil {
                    map["user_name"] = self.userName!
                }
                if self.userType != nil {
                    map["user_type"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("cost_center_id") && dict["cost_center_id"] != nil {
                    self.costCenterId = dict["cost_center_id"] as! Int64
                }
                if dict.keys.contains("cost_center_name") && dict["cost_center_name"] != nil {
                    self.costCenterName = dict["cost_center_name"] as! String
                }
                if dict.keys.contains("cost_center_number") && dict["cost_center_number"] != nil {
                    self.costCenterNumber = dict["cost_center_number"] as! String
                }
                if dict.keys.contains("project_code") && dict["project_code"] != nil {
                    self.projectCode = dict["project_code"] as! String
                }
                if dict.keys.contains("project_id") && dict["project_id"] != nil {
                    self.projectId = dict["project_id"] as! Int64
                }
                if dict.keys.contains("project_title") && dict["project_title"] != nil {
                    self.projectTitle = dict["project_title"] as! String
                }
                if dict.keys.contains("thirdpart_cost_center_id") && dict["thirdpart_cost_center_id"] != nil {
                    self.thirdpartCostCenterId = dict["thirdpart_cost_center_id"] as! String
                }
                if dict.keys.contains("thirdpart_project_id") && dict["thirdpart_project_id"] != nil {
                    self.thirdpartProjectId = dict["thirdpart_project_id"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
                if dict.keys.contains("user_name") && dict["user_name"] != nil {
                    self.userName = dict["user_name"] as! String
                }
                if dict.keys.contains("user_type") && dict["user_type"] != nil {
                    self.userType = dict["user_type"] as! Int32
                }
            }
        }
        public class PriceInfoList : Tea.TeaModel {
            public var categoryCode: Int32?

            public var gmtCreate: String?

            public var passengerName: String?

            public var payType: Int32?

            public var price: Double?

            public var tradeId: String?

            public var type: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryCode != nil {
                    map["category_code"] = self.categoryCode!
                }
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.passengerName != nil {
                    map["passenger_name"] = self.passengerName!
                }
                if self.payType != nil {
                    map["pay_type"] = self.payType!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.tradeId != nil {
                    map["trade_id"] = self.tradeId!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("category_code") && dict["category_code"] != nil {
                    self.categoryCode = dict["category_code"] as! Int32
                }
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("passenger_name") && dict["passenger_name"] != nil {
                    self.passengerName = dict["passenger_name"] as! String
                }
                if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                    self.payType = dict["pay_type"] as! Int32
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! Double
                }
                if dict.keys.contains("trade_id") && dict["trade_id"] != nil {
                    self.tradeId = dict["trade_id"] as! String
                }
                if dict.keys.contains("type") && dict["type"] != nil {
                    self.type = dict["type"] as! Int32
                }
            }
        }
        public class RefundTicketInfoList : Tea.TeaModel {
            public var gmtCreate: String?

            public var gmtModify: String?

            public var refundFee: Double?

            public var refundServiceFee: Double?

            public var ticketNo: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.gmtCreate != nil {
                    map["gmt_create"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["gmt_modify"] = self.gmtModify!
                }
                if self.refundFee != nil {
                    map["refund_fee"] = self.refundFee!
                }
                if self.refundServiceFee != nil {
                    map["refund_service_fee"] = self.refundServiceFee!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.userId != nil {
                    map["user_id"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                    self.gmtCreate = dict["gmt_create"] as! String
                }
                if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                    self.gmtModify = dict["gmt_modify"] as! String
                }
                if dict.keys.contains("refund_fee") && dict["refund_fee"] != nil {
                    self.refundFee = dict["refund_fee"] as! Double
                }
                if dict.keys.contains("refund_service_fee") && dict["refund_service_fee"] != nil {
                    self.refundServiceFee = dict["refund_service_fee"] as! Double
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("user_id") && dict["user_id"] != nil {
                    self.userId = dict["user_id"] as! String
                }
            }
        }
        public class TrainOrderInfo : Tea.TeaModel {
            public class TrainInfoList : Tea.TeaModel {
                public class TrainTicketInfos : Tea.TeaModel {
                    public var changed: Bool?

                    public var checkInTime: String?

                    public var checkOutTime: String?

                    public var coachNo: String?

                    public var endTime: String?

                    public var gmtCreate: String?

                    public var gmtModify: String?

                    public var outTicketStatus: String?

                    public var payType: Int32?

                    public var seatNo: String?

                    public var seatTypeName: String?

                    public var segmentIndex: Int32?

                    public var serviceFee: Double?

                    public var startTime: String?

                    public var ticketEntrance: String?

                    public var ticketNo: String?

                    public var ticketPrice: Double?

                    public var ticketStatus: Int32?

                    public var trainTypeName: String?

                    public var useTicket: String?

                    public var userId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.changed != nil {
                            map["changed"] = self.changed!
                        }
                        if self.checkInTime != nil {
                            map["check_in_time"] = self.checkInTime!
                        }
                        if self.checkOutTime != nil {
                            map["check_out_time"] = self.checkOutTime!
                        }
                        if self.coachNo != nil {
                            map["coach_no"] = self.coachNo!
                        }
                        if self.endTime != nil {
                            map["end_time"] = self.endTime!
                        }
                        if self.gmtCreate != nil {
                            map["gmt_create"] = self.gmtCreate!
                        }
                        if self.gmtModify != nil {
                            map["gmt_modify"] = self.gmtModify!
                        }
                        if self.outTicketStatus != nil {
                            map["out_ticket_status"] = self.outTicketStatus!
                        }
                        if self.payType != nil {
                            map["pay_type"] = self.payType!
                        }
                        if self.seatNo != nil {
                            map["seat_no"] = self.seatNo!
                        }
                        if self.seatTypeName != nil {
                            map["seat_type_name"] = self.seatTypeName!
                        }
                        if self.segmentIndex != nil {
                            map["segment_index"] = self.segmentIndex!
                        }
                        if self.serviceFee != nil {
                            map["service_fee"] = self.serviceFee!
                        }
                        if self.startTime != nil {
                            map["start_time"] = self.startTime!
                        }
                        if self.ticketEntrance != nil {
                            map["ticket_entrance"] = self.ticketEntrance!
                        }
                        if self.ticketNo != nil {
                            map["ticket_no"] = self.ticketNo!
                        }
                        if self.ticketPrice != nil {
                            map["ticket_price"] = self.ticketPrice!
                        }
                        if self.ticketStatus != nil {
                            map["ticket_status"] = self.ticketStatus!
                        }
                        if self.trainTypeName != nil {
                            map["train_type_name"] = self.trainTypeName!
                        }
                        if self.useTicket != nil {
                            map["use_ticket"] = self.useTicket!
                        }
                        if self.userId != nil {
                            map["user_id"] = self.userId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("changed") && dict["changed"] != nil {
                            self.changed = dict["changed"] as! Bool
                        }
                        if dict.keys.contains("check_in_time") && dict["check_in_time"] != nil {
                            self.checkInTime = dict["check_in_time"] as! String
                        }
                        if dict.keys.contains("check_out_time") && dict["check_out_time"] != nil {
                            self.checkOutTime = dict["check_out_time"] as! String
                        }
                        if dict.keys.contains("coach_no") && dict["coach_no"] != nil {
                            self.coachNo = dict["coach_no"] as! String
                        }
                        if dict.keys.contains("end_time") && dict["end_time"] != nil {
                            self.endTime = dict["end_time"] as! String
                        }
                        if dict.keys.contains("gmt_create") && dict["gmt_create"] != nil {
                            self.gmtCreate = dict["gmt_create"] as! String
                        }
                        if dict.keys.contains("gmt_modify") && dict["gmt_modify"] != nil {
                            self.gmtModify = dict["gmt_modify"] as! String
                        }
                        if dict.keys.contains("out_ticket_status") && dict["out_ticket_status"] != nil {
                            self.outTicketStatus = dict["out_ticket_status"] as! String
                        }
                        if dict.keys.contains("pay_type") && dict["pay_type"] != nil {
                            self.payType = dict["pay_type"] as! Int32
                        }
                        if dict.keys.contains("seat_no") && dict["seat_no"] != nil {
                            self.seatNo = dict["seat_no"] as! String
                        }
                        if dict.keys.contains("seat_type_name") && dict["seat_type_name"] != nil {
                            self.seatTypeName = dict["seat_type_name"] as! String
                        }
                        if dict.keys.contains("segment_index") && dict["segment_index"] != nil {
                            self.segmentIndex = dict["segment_index"] as! Int32
                        }
                        if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                            self.serviceFee = dict["service_fee"] as! Double
                        }
                        if dict.keys.contains("start_time") && dict["start_time"] != nil {
                            self.startTime = dict["start_time"] as! String
                        }
                        if dict.keys.contains("ticket_entrance") && dict["ticket_entrance"] != nil {
                            self.ticketEntrance = dict["ticket_entrance"] as! String
                        }
                        if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                            self.ticketNo = dict["ticket_no"] as! String
                        }
                        if dict.keys.contains("ticket_price") && dict["ticket_price"] != nil {
                            self.ticketPrice = dict["ticket_price"] as! Double
                        }
                        if dict.keys.contains("ticket_status") && dict["ticket_status"] != nil {
                            self.ticketStatus = dict["ticket_status"] as! Int32
                        }
                        if dict.keys.contains("train_type_name") && dict["train_type_name"] != nil {
                            self.trainTypeName = dict["train_type_name"] as! String
                        }
                        if dict.keys.contains("use_ticket") && dict["use_ticket"] != nil {
                            self.useTicket = dict["use_ticket"] as! String
                        }
                        if dict.keys.contains("user_id") && dict["user_id"] != nil {
                            self.userId = dict["user_id"] as! String
                        }
                    }
                }
                public var arrTime: String?

                public var depTime: String?

                public var fromCityAdCode: String?

                public var fromCityName: String?

                public var fromStationName: String?

                public var itemId: Int64?

                public var runTime: Int64?

                public var toCityAdCode: String?

                public var toCityName: String?

                public var toStationName: String?

                public var trainNo: String?

                public var trainTicketInfos: [TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainInfoList.TrainTicketInfos]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arrTime != nil {
                        map["arr_time"] = self.arrTime!
                    }
                    if self.depTime != nil {
                        map["dep_time"] = self.depTime!
                    }
                    if self.fromCityAdCode != nil {
                        map["from_city_ad_code"] = self.fromCityAdCode!
                    }
                    if self.fromCityName != nil {
                        map["from_city_name"] = self.fromCityName!
                    }
                    if self.fromStationName != nil {
                        map["from_station_name"] = self.fromStationName!
                    }
                    if self.itemId != nil {
                        map["item_id"] = self.itemId!
                    }
                    if self.runTime != nil {
                        map["run_time"] = self.runTime!
                    }
                    if self.toCityAdCode != nil {
                        map["to_city_ad_code"] = self.toCityAdCode!
                    }
                    if self.toCityName != nil {
                        map["to_city_name"] = self.toCityName!
                    }
                    if self.toStationName != nil {
                        map["to_station_name"] = self.toStationName!
                    }
                    if self.trainNo != nil {
                        map["train_no"] = self.trainNo!
                    }
                    if self.trainTicketInfos != nil {
                        var tmp : [Any] = []
                        for k in self.trainTicketInfos! {
                            tmp.append(k.toMap())
                        }
                        map["train_ticket_infos"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("arr_time") && dict["arr_time"] != nil {
                        self.arrTime = dict["arr_time"] as! String
                    }
                    if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                        self.depTime = dict["dep_time"] as! String
                    }
                    if dict.keys.contains("from_city_ad_code") && dict["from_city_ad_code"] != nil {
                        self.fromCityAdCode = dict["from_city_ad_code"] as! String
                    }
                    if dict.keys.contains("from_city_name") && dict["from_city_name"] != nil {
                        self.fromCityName = dict["from_city_name"] as! String
                    }
                    if dict.keys.contains("from_station_name") && dict["from_station_name"] != nil {
                        self.fromStationName = dict["from_station_name"] as! String
                    }
                    if dict.keys.contains("item_id") && dict["item_id"] != nil {
                        self.itemId = dict["item_id"] as! Int64
                    }
                    if dict.keys.contains("run_time") && dict["run_time"] != nil {
                        self.runTime = dict["run_time"] as! Int64
                    }
                    if dict.keys.contains("to_city_ad_code") && dict["to_city_ad_code"] != nil {
                        self.toCityAdCode = dict["to_city_ad_code"] as! String
                    }
                    if dict.keys.contains("to_city_name") && dict["to_city_name"] != nil {
                        self.toCityName = dict["to_city_name"] as! String
                    }
                    if dict.keys.contains("to_station_name") && dict["to_station_name"] != nil {
                        self.toStationName = dict["to_station_name"] as! String
                    }
                    if dict.keys.contains("train_no") && dict["train_no"] != nil {
                        self.trainNo = dict["train_no"] as! String
                    }
                    if dict.keys.contains("train_ticket_infos") && dict["train_ticket_infos"] != nil {
                        var tmp : [TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainInfoList.TrainTicketInfos] = []
                        for v in dict["train_ticket_infos"] as! [Any] {
                            var model = TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainInfoList.TrainTicketInfos()
                            if v != nil {
                                model.fromMap(v as! [String: Any])
                            }
                            tmp.append(model)
                        }
                        self.trainTicketInfos = tmp
                    }
                }
            }
            public class TrainTransferInfo : Tea.TeaModel {
                public var costTime: String?

                public var endTime: String?

                public var fromCityAdCode: String?

                public var fromCityName: String?

                public var fromStationName: String?

                public var middleCity: String?

                public var middleCityAdCode: String?

                public var middleDate: String?

                public var middleStation: String?

                public var middleType: String?

                public var startTime: String?

                public var toCityAdCode: String?

                public var toCityName: String?

                public var toStationName: String?

                public var waitTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.costTime != nil {
                        map["cost_time"] = self.costTime!
                    }
                    if self.endTime != nil {
                        map["end_time"] = self.endTime!
                    }
                    if self.fromCityAdCode != nil {
                        map["from_city_ad_code"] = self.fromCityAdCode!
                    }
                    if self.fromCityName != nil {
                        map["from_city_name"] = self.fromCityName!
                    }
                    if self.fromStationName != nil {
                        map["from_station_name"] = self.fromStationName!
                    }
                    if self.middleCity != nil {
                        map["middle_city"] = self.middleCity!
                    }
                    if self.middleCityAdCode != nil {
                        map["middle_city_ad_code"] = self.middleCityAdCode!
                    }
                    if self.middleDate != nil {
                        map["middle_date"] = self.middleDate!
                    }
                    if self.middleStation != nil {
                        map["middle_station"] = self.middleStation!
                    }
                    if self.middleType != nil {
                        map["middle_type"] = self.middleType!
                    }
                    if self.startTime != nil {
                        map["start_time"] = self.startTime!
                    }
                    if self.toCityAdCode != nil {
                        map["to_city_ad_code"] = self.toCityAdCode!
                    }
                    if self.toCityName != nil {
                        map["to_city_name"] = self.toCityName!
                    }
                    if self.toStationName != nil {
                        map["to_station_name"] = self.toStationName!
                    }
                    if self.waitTime != nil {
                        map["wait_time"] = self.waitTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("cost_time") && dict["cost_time"] != nil {
                        self.costTime = dict["cost_time"] as! String
                    }
                    if dict.keys.contains("end_time") && dict["end_time"] != nil {
                        self.endTime = dict["end_time"] as! String
                    }
                    if dict.keys.contains("from_city_ad_code") && dict["from_city_ad_code"] != nil {
                        self.fromCityAdCode = dict["from_city_ad_code"] as! String
                    }
                    if dict.keys.contains("from_city_name") && dict["from_city_name"] != nil {
                        self.fromCityName = dict["from_city_name"] as! String
                    }
                    if dict.keys.contains("from_station_name") && dict["from_station_name"] != nil {
                        self.fromStationName = dict["from_station_name"] as! String
                    }
                    if dict.keys.contains("middle_city") && dict["middle_city"] != nil {
                        self.middleCity = dict["middle_city"] as! String
                    }
                    if dict.keys.contains("middle_city_ad_code") && dict["middle_city_ad_code"] != nil {
                        self.middleCityAdCode = dict["middle_city_ad_code"] as! String
                    }
                    if dict.keys.contains("middle_date") && dict["middle_date"] != nil {
                        self.middleDate = dict["middle_date"] as! String
                    }
                    if dict.keys.contains("middle_station") && dict["middle_station"] != nil {
                        self.middleStation = dict["middle_station"] as! String
                    }
                    if dict.keys.contains("middle_type") && dict["middle_type"] != nil {
                        self.middleType = dict["middle_type"] as! String
                    }
                    if dict.keys.contains("start_time") && dict["start_time"] != nil {
                        self.startTime = dict["start_time"] as! String
                    }
                    if dict.keys.contains("to_city_ad_code") && dict["to_city_ad_code"] != nil {
                        self.toCityAdCode = dict["to_city_ad_code"] as! String
                    }
                    if dict.keys.contains("to_city_name") && dict["to_city_name"] != nil {
                        self.toCityName = dict["to_city_name"] as! String
                    }
                    if dict.keys.contains("to_station_name") && dict["to_station_name"] != nil {
                        self.toStationName = dict["to_station_name"] as! String
                    }
                    if dict.keys.contains("wait_time") && dict["wait_time"] != nil {
                        self.waitTime = dict["wait_time"] as! String
                    }
                }
            }
            public var trainInfoList: [TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainInfoList]?

            public var trainTransferInfo: TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainTransferInfo?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.trainTransferInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.trainInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.trainInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["train_info_list"] = tmp
                }
                if self.trainTransferInfo != nil {
                    map["train_transfer_info"] = self.trainTransferInfo?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("train_info_list") && dict["train_info_list"] != nil {
                    var tmp : [TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainInfoList] = []
                    for v in dict["train_info_list"] as! [Any] {
                        var model = TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainInfoList()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.trainInfoList = tmp
                }
                if dict.keys.contains("train_transfer_info") && dict["train_transfer_info"] != nil {
                    var model = TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo.TrainTransferInfo()
                    model.fromMap(dict["train_transfer_info"] as! [String: Any])
                    self.trainTransferInfo = model
                }
            }
        }
        public var changeTicketInfoList: [TrainOrderQueryV2ResponseBody.Module.ChangeTicketInfoList]?

        public var invoiceInfo: TrainOrderQueryV2ResponseBody.Module.InvoiceInfo?

        public var orderBaseInfo: TrainOrderQueryV2ResponseBody.Module.OrderBaseInfo?

        public var passengerInfoList: [TrainOrderQueryV2ResponseBody.Module.PassengerInfoList]?

        public var priceInfoList: [TrainOrderQueryV2ResponseBody.Module.PriceInfoList]?

        public var refundTicketInfoList: [TrainOrderQueryV2ResponseBody.Module.RefundTicketInfoList]?

        public var trainOrderInfo: TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.invoiceInfo?.validate()
            try self.orderBaseInfo?.validate()
            try self.trainOrderInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.changeTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.changeTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["change_ticket_info_list"] = tmp
            }
            if self.invoiceInfo != nil {
                map["invoice_info"] = self.invoiceInfo?.toMap()
            }
            if self.orderBaseInfo != nil {
                map["order_base_info"] = self.orderBaseInfo?.toMap()
            }
            if self.passengerInfoList != nil {
                var tmp : [Any] = []
                for k in self.passengerInfoList! {
                    tmp.append(k.toMap())
                }
                map["passenger_info_list"] = tmp
            }
            if self.priceInfoList != nil {
                var tmp : [Any] = []
                for k in self.priceInfoList! {
                    tmp.append(k.toMap())
                }
                map["price_info_list"] = tmp
            }
            if self.refundTicketInfoList != nil {
                var tmp : [Any] = []
                for k in self.refundTicketInfoList! {
                    tmp.append(k.toMap())
                }
                map["refund_ticket_info_list"] = tmp
            }
            if self.trainOrderInfo != nil {
                map["train_order_info"] = self.trainOrderInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("change_ticket_info_list") && dict["change_ticket_info_list"] != nil {
                var tmp : [TrainOrderQueryV2ResponseBody.Module.ChangeTicketInfoList] = []
                for v in dict["change_ticket_info_list"] as! [Any] {
                    var model = TrainOrderQueryV2ResponseBody.Module.ChangeTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.changeTicketInfoList = tmp
            }
            if dict.keys.contains("invoice_info") && dict["invoice_info"] != nil {
                var model = TrainOrderQueryV2ResponseBody.Module.InvoiceInfo()
                model.fromMap(dict["invoice_info"] as! [String: Any])
                self.invoiceInfo = model
            }
            if dict.keys.contains("order_base_info") && dict["order_base_info"] != nil {
                var model = TrainOrderQueryV2ResponseBody.Module.OrderBaseInfo()
                model.fromMap(dict["order_base_info"] as! [String: Any])
                self.orderBaseInfo = model
            }
            if dict.keys.contains("passenger_info_list") && dict["passenger_info_list"] != nil {
                var tmp : [TrainOrderQueryV2ResponseBody.Module.PassengerInfoList] = []
                for v in dict["passenger_info_list"] as! [Any] {
                    var model = TrainOrderQueryV2ResponseBody.Module.PassengerInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.passengerInfoList = tmp
            }
            if dict.keys.contains("price_info_list") && dict["price_info_list"] != nil {
                var tmp : [TrainOrderQueryV2ResponseBody.Module.PriceInfoList] = []
                for v in dict["price_info_list"] as! [Any] {
                    var model = TrainOrderQueryV2ResponseBody.Module.PriceInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.priceInfoList = tmp
            }
            if dict.keys.contains("refund_ticket_info_list") && dict["refund_ticket_info_list"] != nil {
                var tmp : [TrainOrderQueryV2ResponseBody.Module.RefundTicketInfoList] = []
                for v in dict["refund_ticket_info_list"] as! [Any] {
                    var model = TrainOrderQueryV2ResponseBody.Module.RefundTicketInfoList()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.refundTicketInfoList = tmp
            }
            if dict.keys.contains("train_order_info") && dict["train_order_info"] != nil {
                var model = TrainOrderQueryV2ResponseBody.Module.TrainOrderInfo()
                model.fromMap(dict["train_order_info"] as! [String: Any])
                self.trainOrderInfo = model
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TrainOrderQueryV2ResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TrainOrderQueryV2ResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainOrderQueryV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainOrderQueryV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainOrderQueryV2ResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainStationSearchHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class TrainStationSearchRequest : Tea.TeaModel {
    public var keyword: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["keyword"] = self.keyword!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("keyword") && dict["keyword"] != nil {
            self.keyword = dict["keyword"] as! String
        }
    }
}

public class TrainStationSearchResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Cities : Tea.TeaModel {
            public var code: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["code"] = self.code!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("code") && dict["code"] != nil {
                    self.code = dict["code"] as! String
                }
                if dict.keys.contains("name") && dict["name"] != nil {
                    self.name = dict["name"] as! String
                }
            }
        }
        public var cities: [TrainStationSearchResponseBody.Module.Cities]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cities != nil {
                var tmp : [Any] = []
                for k in self.cities! {
                    tmp.append(k.toMap())
                }
                map["cities"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("cities") && dict["cities"] != nil {
                var tmp : [TrainStationSearchResponseBody.Module.Cities] = []
                for v in dict["cities"] as! [Any] {
                    var model = TrainStationSearchResponseBody.Module.Cities()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.cities = tmp
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TrainStationSearchResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TrainStationSearchResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainStationSearchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainStationSearchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainStationSearchResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class TrainTicketScanQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class TrainTicketScanQueryRequest : Tea.TeaModel {
    public var billDate: String?

    public var billId: Int64?

    public var invoiceSubTaskId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var serialNumber: String?

    public var ticketNo: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        if self.billId != nil {
            map["bill_id"] = self.billId!
        }
        if self.invoiceSubTaskId != nil {
            map["invoice_sub_task_id"] = self.invoiceSubTaskId!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.serialNumber != nil {
            map["serial_number"] = self.serialNumber!
        }
        if self.ticketNo != nil {
            map["ticket_no"] = self.ticketNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
        if dict.keys.contains("bill_id") && dict["bill_id"] != nil {
            self.billId = dict["bill_id"] as! Int64
        }
        if dict.keys.contains("invoice_sub_task_id") && dict["invoice_sub_task_id"] != nil {
            self.invoiceSubTaskId = dict["invoice_sub_task_id"] as! Int64
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("serial_number") && dict["serial_number"] != nil {
            self.serialNumber = dict["serial_number"] as! String
        }
        if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
            self.ticketNo = dict["ticket_no"] as! String
        }
    }
}

public class TrainTicketScanQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var applyId: String?

            public var arrStation: String?

            public var billDate: String?

            public var coachName: String?

            public var costCenter: String?

            public var depStation: String?

            public var depTime: String?

            public var department: String?

            public var id: String?

            public var invoiceTitle: String?

            public var orderId: Int64?

            public var ossUrl: String?

            public var passenger: String?

            public var price: String?

            public var project: String?

            public var seat: String?

            public var seatNo: String?

            public var serialNumber: String?

            public var taxAmount: String?

            public var taxRate: String?

            public var ticketNo: String?

            public var trainNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyId != nil {
                    map["apply_id"] = self.applyId!
                }
                if self.arrStation != nil {
                    map["arr_station"] = self.arrStation!
                }
                if self.billDate != nil {
                    map["bill_date"] = self.billDate!
                }
                if self.coachName != nil {
                    map["coach_name"] = self.coachName!
                }
                if self.costCenter != nil {
                    map["cost_center"] = self.costCenter!
                }
                if self.depStation != nil {
                    map["dep_station"] = self.depStation!
                }
                if self.depTime != nil {
                    map["dep_time"] = self.depTime!
                }
                if self.department != nil {
                    map["department"] = self.department!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.invoiceTitle != nil {
                    map["invoice_title"] = self.invoiceTitle!
                }
                if self.orderId != nil {
                    map["order_id"] = self.orderId!
                }
                if self.ossUrl != nil {
                    map["oss_url"] = self.ossUrl!
                }
                if self.passenger != nil {
                    map["passenger"] = self.passenger!
                }
                if self.price != nil {
                    map["price"] = self.price!
                }
                if self.project != nil {
                    map["project"] = self.project!
                }
                if self.seat != nil {
                    map["seat"] = self.seat!
                }
                if self.seatNo != nil {
                    map["seat_no"] = self.seatNo!
                }
                if self.serialNumber != nil {
                    map["serial_number"] = self.serialNumber!
                }
                if self.taxAmount != nil {
                    map["tax_amount"] = self.taxAmount!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.ticketNo != nil {
                    map["ticket_no"] = self.ticketNo!
                }
                if self.trainNo != nil {
                    map["train_no"] = self.trainNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("apply_id") && dict["apply_id"] != nil {
                    self.applyId = dict["apply_id"] as! String
                }
                if dict.keys.contains("arr_station") && dict["arr_station"] != nil {
                    self.arrStation = dict["arr_station"] as! String
                }
                if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
                    self.billDate = dict["bill_date"] as! String
                }
                if dict.keys.contains("coach_name") && dict["coach_name"] != nil {
                    self.coachName = dict["coach_name"] as! String
                }
                if dict.keys.contains("cost_center") && dict["cost_center"] != nil {
                    self.costCenter = dict["cost_center"] as! String
                }
                if dict.keys.contains("dep_station") && dict["dep_station"] != nil {
                    self.depStation = dict["dep_station"] as! String
                }
                if dict.keys.contains("dep_time") && dict["dep_time"] != nil {
                    self.depTime = dict["dep_time"] as! String
                }
                if dict.keys.contains("department") && dict["department"] != nil {
                    self.department = dict["department"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! String
                }
                if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                    self.invoiceTitle = dict["invoice_title"] as! String
                }
                if dict.keys.contains("order_id") && dict["order_id"] != nil {
                    self.orderId = dict["order_id"] as! Int64
                }
                if dict.keys.contains("oss_url") && dict["oss_url"] != nil {
                    self.ossUrl = dict["oss_url"] as! String
                }
                if dict.keys.contains("passenger") && dict["passenger"] != nil {
                    self.passenger = dict["passenger"] as! String
                }
                if dict.keys.contains("price") && dict["price"] != nil {
                    self.price = dict["price"] as! String
                }
                if dict.keys.contains("project") && dict["project"] != nil {
                    self.project = dict["project"] as! String
                }
                if dict.keys.contains("seat") && dict["seat"] != nil {
                    self.seat = dict["seat"] as! String
                }
                if dict.keys.contains("seat_no") && dict["seat_no"] != nil {
                    self.seatNo = dict["seat_no"] as! String
                }
                if dict.keys.contains("serial_number") && dict["serial_number"] != nil {
                    self.serialNumber = dict["serial_number"] as! String
                }
                if dict.keys.contains("tax_amount") && dict["tax_amount"] != nil {
                    self.taxAmount = dict["tax_amount"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("ticket_no") && dict["ticket_no"] != nil {
                    self.ticketNo = dict["ticket_no"] as! String
                }
                if dict.keys.contains("train_no") && dict["train_no"] != nil {
                    self.trainNo = dict["train_no"] as! String
                }
            }
        }
        public var items: [TrainTicketScanQueryResponseBody.Module.Items]?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var totalPage: Int32?

        public var totalSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.pageNo != nil {
                map["page_no"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalPage != nil {
                map["total_page"] = self.totalPage!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [TrainTicketScanQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = TrainTicketScanQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("page_no") && dict["page_no"] != nil {
                self.pageNo = dict["page_no"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_page") && dict["total_page"] != nil {
                self.totalPage = dict["total_page"] as! Int32
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: TrainTicketScanQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = TrainTicketScanQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class TrainTicketScanQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TrainTicketScanQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = TrainTicketScanQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class UserQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class UserQueryRequest : Tea.TeaModel {
    public var modifiedTimeGreaterOrEqualThan: String?

    public var pageSize: Int32?

    public var pageToken: String?

    public var thirdPartJobNo: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modifiedTimeGreaterOrEqualThan != nil {
            map["modified_time_greater_or_equal_than"] = self.modifiedTimeGreaterOrEqualThan!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        if self.pageToken != nil {
            map["page_token"] = self.pageToken!
        }
        if self.thirdPartJobNo != nil {
            map["third_part_job_no"] = self.thirdPartJobNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("modified_time_greater_or_equal_than") && dict["modified_time_greater_or_equal_than"] != nil {
            self.modifiedTimeGreaterOrEqualThan = dict["modified_time_greater_or_equal_than"] as! String
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
        if dict.keys.contains("page_token") && dict["page_token"] != nil {
            self.pageToken = dict["page_token"] as! String
        }
        if dict.keys.contains("third_part_job_no") && dict["third_part_job_no"] != nil {
            self.thirdPartJobNo = dict["third_part_job_no"] as! String
        }
    }
}

public class UserQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public var employeeNick: String?

            public var leaveStatus: Int32?

            public var thirdPartEmployeeId: String?

            public var thirdPartJobNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.employeeNick != nil {
                    map["employee_nick"] = self.employeeNick!
                }
                if self.leaveStatus != nil {
                    map["leave_status"] = self.leaveStatus!
                }
                if self.thirdPartEmployeeId != nil {
                    map["third_part_employee_id"] = self.thirdPartEmployeeId!
                }
                if self.thirdPartJobNo != nil {
                    map["third_part_job_no"] = self.thirdPartJobNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("employee_nick") && dict["employee_nick"] != nil {
                    self.employeeNick = dict["employee_nick"] as! String
                }
                if dict.keys.contains("leave_status") && dict["leave_status"] != nil {
                    self.leaveStatus = dict["leave_status"] as! Int32
                }
                if dict.keys.contains("third_part_employee_id") && dict["third_part_employee_id"] != nil {
                    self.thirdPartEmployeeId = dict["third_part_employee_id"] as! String
                }
                if dict.keys.contains("third_part_job_no") && dict["third_part_job_no"] != nil {
                    self.thirdPartJobNo = dict["third_part_job_no"] as! String
                }
            }
        }
        public var hasMore: Bool?

        public var items: [UserQueryResponseBody.Module.Items]?

        public var pageToken: String?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hasMore != nil {
                map["has_more"] = self.hasMore!
            }
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.pageToken != nil {
                map["page_token"] = self.pageToken!
            }
            if self.total != nil {
                map["total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("has_more") && dict["has_more"] != nil {
                self.hasMore = dict["has_more"] as! Bool
            }
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [UserQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = UserQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("page_token") && dict["page_token"] != nil {
                self.pageToken = dict["page_token"] as! String
            }
            if dict.keys.contains("total") && dict["total"] != nil {
                self.total = dict["total"] as! Int64
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: UserQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = UserQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class UserQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UserQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = UserQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class VatInvoiceScanQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class VatInvoiceScanQueryRequest : Tea.TeaModel {
    public var billDate: String?

    public var billId: Int64?

    public var invoiceSubTaskId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        if self.billId != nil {
            map["bill_id"] = self.billId!
        }
        if self.invoiceSubTaskId != nil {
            map["invoice_sub_task_id"] = self.invoiceSubTaskId!
        }
        if self.pageNo != nil {
            map["page_no"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["page_size"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
        if dict.keys.contains("bill_id") && dict["bill_id"] != nil {
            self.billId = dict["bill_id"] as! Int64
        }
        if dict.keys.contains("invoice_sub_task_id") && dict["invoice_sub_task_id"] != nil {
            self.invoiceSubTaskId = dict["invoice_sub_task_id"] as! Int64
        }
        if dict.keys.contains("page_no") && dict["page_no"] != nil {
            self.pageNo = dict["page_no"] as! Int32
        }
        if dict.keys.contains("page_size") && dict["page_size"] != nil {
            self.pageSize = dict["page_size"] as! Int32
        }
    }
}

public class VatInvoiceScanQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public class Items : Tea.TeaModel {
            public class InvoiceDetails : Tea.TeaModel {
                public var amount: String?

                public var index: String?

                public var itemName: String?

                public var quantity: String?

                public var specification: String?

                public var tax: String?

                public var taxRate: String?

                public var unit: String?

                public var unitPrice: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.amount != nil {
                        map["amount"] = self.amount!
                    }
                    if self.index != nil {
                        map["index"] = self.index!
                    }
                    if self.itemName != nil {
                        map["item_name"] = self.itemName!
                    }
                    if self.quantity != nil {
                        map["quantity"] = self.quantity!
                    }
                    if self.specification != nil {
                        map["specification"] = self.specification!
                    }
                    if self.tax != nil {
                        map["tax"] = self.tax!
                    }
                    if self.taxRate != nil {
                        map["tax_rate"] = self.taxRate!
                    }
                    if self.unit != nil {
                        map["unit"] = self.unit!
                    }
                    if self.unitPrice != nil {
                        map["unit_price"] = self.unitPrice!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("amount") && dict["amount"] != nil {
                        self.amount = dict["amount"] as! String
                    }
                    if dict.keys.contains("index") && dict["index"] != nil {
                        self.index = dict["index"] as! String
                    }
                    if dict.keys.contains("item_name") && dict["item_name"] != nil {
                        self.itemName = dict["item_name"] as! String
                    }
                    if dict.keys.contains("quantity") && dict["quantity"] != nil {
                        self.quantity = dict["quantity"] as! String
                    }
                    if dict.keys.contains("specification") && dict["specification"] != nil {
                        self.specification = dict["specification"] as! String
                    }
                    if dict.keys.contains("tax") && dict["tax"] != nil {
                        self.tax = dict["tax"] as! String
                    }
                    if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                        self.taxRate = dict["tax_rate"] as! String
                    }
                    if dict.keys.contains("unit") && dict["unit"] != nil {
                        self.unit = dict["unit"] as! String
                    }
                    if dict.keys.contains("unit_price") && dict["unit_price"] != nil {
                        self.unitPrice = dict["unit_price"] as! String
                    }
                }
            }
            public var amountWithTax: String?

            public var amountWithoutTax: String?

            public var billDate: String?

            public var checkCode: String?

            public var drawer: String?

            public var id: String?

            public var invoiceCode: String?

            public var invoiceDay: String?

            public var invoiceDetail: String?

            public var invoiceDetails: [VatInvoiceScanQueryResponseBody.Module.Items.InvoiceDetails]?

            public var invoiceLocation: String?

            public var invoiceNo: String?

            public var invoiceSubTaskId: Int64?

            public var invoiceType: Int32?

            public var invoiceTypeDesc: String?

            public var machineCode: String?

            public var ossUrl: String?

            public var passwordArea: String?

            public var purchaserBankAccountInfo: String?

            public var purchaserContactInfo: String?

            public var purchaserName: String?

            public var purchaserTaxNo: String?

            public var recipient: String?

            public var remarks: String?

            public var reviewer: String?

            public var sellerBankAccountInfo: String?

            public var sellerContactInfo: String?

            public var sellerName: String?

            public var sellerTaxNo: String?

            public var smartCheckCode: String?

            public var taxAmount: String?

            public var taxRate: String?

            public var totalAmountInWords: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amountWithTax != nil {
                    map["amount_with_tax"] = self.amountWithTax!
                }
                if self.amountWithoutTax != nil {
                    map["amount_without_tax"] = self.amountWithoutTax!
                }
                if self.billDate != nil {
                    map["bill_date"] = self.billDate!
                }
                if self.checkCode != nil {
                    map["check_code"] = self.checkCode!
                }
                if self.drawer != nil {
                    map["drawer"] = self.drawer!
                }
                if self.id != nil {
                    map["id"] = self.id!
                }
                if self.invoiceCode != nil {
                    map["invoice_code"] = self.invoiceCode!
                }
                if self.invoiceDay != nil {
                    map["invoice_day"] = self.invoiceDay!
                }
                if self.invoiceDetail != nil {
                    map["invoice_detail"] = self.invoiceDetail!
                }
                if self.invoiceDetails != nil {
                    var tmp : [Any] = []
                    for k in self.invoiceDetails! {
                        tmp.append(k.toMap())
                    }
                    map["invoice_details"] = tmp
                }
                if self.invoiceLocation != nil {
                    map["invoice_location"] = self.invoiceLocation!
                }
                if self.invoiceNo != nil {
                    map["invoice_no"] = self.invoiceNo!
                }
                if self.invoiceSubTaskId != nil {
                    map["invoice_sub_task_id"] = self.invoiceSubTaskId!
                }
                if self.invoiceType != nil {
                    map["invoice_type"] = self.invoiceType!
                }
                if self.invoiceTypeDesc != nil {
                    map["invoice_type_desc"] = self.invoiceTypeDesc!
                }
                if self.machineCode != nil {
                    map["machine_code"] = self.machineCode!
                }
                if self.ossUrl != nil {
                    map["oss_url"] = self.ossUrl!
                }
                if self.passwordArea != nil {
                    map["password_area"] = self.passwordArea!
                }
                if self.purchaserBankAccountInfo != nil {
                    map["purchaser_bank_account_info"] = self.purchaserBankAccountInfo!
                }
                if self.purchaserContactInfo != nil {
                    map["purchaser_contact_info"] = self.purchaserContactInfo!
                }
                if self.purchaserName != nil {
                    map["purchaser_name"] = self.purchaserName!
                }
                if self.purchaserTaxNo != nil {
                    map["purchaser_tax_no"] = self.purchaserTaxNo!
                }
                if self.recipient != nil {
                    map["recipient"] = self.recipient!
                }
                if self.remarks != nil {
                    map["remarks"] = self.remarks!
                }
                if self.reviewer != nil {
                    map["reviewer"] = self.reviewer!
                }
                if self.sellerBankAccountInfo != nil {
                    map["seller_bank_account_info"] = self.sellerBankAccountInfo!
                }
                if self.sellerContactInfo != nil {
                    map["seller_contact_info"] = self.sellerContactInfo!
                }
                if self.sellerName != nil {
                    map["seller_name"] = self.sellerName!
                }
                if self.sellerTaxNo != nil {
                    map["seller_tax_no"] = self.sellerTaxNo!
                }
                if self.smartCheckCode != nil {
                    map["smart_check_code"] = self.smartCheckCode!
                }
                if self.taxAmount != nil {
                    map["tax_amount"] = self.taxAmount!
                }
                if self.taxRate != nil {
                    map["tax_rate"] = self.taxRate!
                }
                if self.totalAmountInWords != nil {
                    map["total_amount_in_words"] = self.totalAmountInWords!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("amount_with_tax") && dict["amount_with_tax"] != nil {
                    self.amountWithTax = dict["amount_with_tax"] as! String
                }
                if dict.keys.contains("amount_without_tax") && dict["amount_without_tax"] != nil {
                    self.amountWithoutTax = dict["amount_without_tax"] as! String
                }
                if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
                    self.billDate = dict["bill_date"] as! String
                }
                if dict.keys.contains("check_code") && dict["check_code"] != nil {
                    self.checkCode = dict["check_code"] as! String
                }
                if dict.keys.contains("drawer") && dict["drawer"] != nil {
                    self.drawer = dict["drawer"] as! String
                }
                if dict.keys.contains("id") && dict["id"] != nil {
                    self.id = dict["id"] as! String
                }
                if dict.keys.contains("invoice_code") && dict["invoice_code"] != nil {
                    self.invoiceCode = dict["invoice_code"] as! String
                }
                if dict.keys.contains("invoice_day") && dict["invoice_day"] != nil {
                    self.invoiceDay = dict["invoice_day"] as! String
                }
                if dict.keys.contains("invoice_detail") && dict["invoice_detail"] != nil {
                    self.invoiceDetail = dict["invoice_detail"] as! String
                }
                if dict.keys.contains("invoice_details") && dict["invoice_details"] != nil {
                    var tmp : [VatInvoiceScanQueryResponseBody.Module.Items.InvoiceDetails] = []
                    for v in dict["invoice_details"] as! [Any] {
                        var model = VatInvoiceScanQueryResponseBody.Module.Items.InvoiceDetails()
                        if v != nil {
                            model.fromMap(v as! [String: Any])
                        }
                        tmp.append(model)
                    }
                    self.invoiceDetails = tmp
                }
                if dict.keys.contains("invoice_location") && dict["invoice_location"] != nil {
                    self.invoiceLocation = dict["invoice_location"] as! String
                }
                if dict.keys.contains("invoice_no") && dict["invoice_no"] != nil {
                    self.invoiceNo = dict["invoice_no"] as! String
                }
                if dict.keys.contains("invoice_sub_task_id") && dict["invoice_sub_task_id"] != nil {
                    self.invoiceSubTaskId = dict["invoice_sub_task_id"] as! Int64
                }
                if dict.keys.contains("invoice_type") && dict["invoice_type"] != nil {
                    self.invoiceType = dict["invoice_type"] as! Int32
                }
                if dict.keys.contains("invoice_type_desc") && dict["invoice_type_desc"] != nil {
                    self.invoiceTypeDesc = dict["invoice_type_desc"] as! String
                }
                if dict.keys.contains("machine_code") && dict["machine_code"] != nil {
                    self.machineCode = dict["machine_code"] as! String
                }
                if dict.keys.contains("oss_url") && dict["oss_url"] != nil {
                    self.ossUrl = dict["oss_url"] as! String
                }
                if dict.keys.contains("password_area") && dict["password_area"] != nil {
                    self.passwordArea = dict["password_area"] as! String
                }
                if dict.keys.contains("purchaser_bank_account_info") && dict["purchaser_bank_account_info"] != nil {
                    self.purchaserBankAccountInfo = dict["purchaser_bank_account_info"] as! String
                }
                if dict.keys.contains("purchaser_contact_info") && dict["purchaser_contact_info"] != nil {
                    self.purchaserContactInfo = dict["purchaser_contact_info"] as! String
                }
                if dict.keys.contains("purchaser_name") && dict["purchaser_name"] != nil {
                    self.purchaserName = dict["purchaser_name"] as! String
                }
                if dict.keys.contains("purchaser_tax_no") && dict["purchaser_tax_no"] != nil {
                    self.purchaserTaxNo = dict["purchaser_tax_no"] as! String
                }
                if dict.keys.contains("recipient") && dict["recipient"] != nil {
                    self.recipient = dict["recipient"] as! String
                }
                if dict.keys.contains("remarks") && dict["remarks"] != nil {
                    self.remarks = dict["remarks"] as! String
                }
                if dict.keys.contains("reviewer") && dict["reviewer"] != nil {
                    self.reviewer = dict["reviewer"] as! String
                }
                if dict.keys.contains("seller_bank_account_info") && dict["seller_bank_account_info"] != nil {
                    self.sellerBankAccountInfo = dict["seller_bank_account_info"] as! String
                }
                if dict.keys.contains("seller_contact_info") && dict["seller_contact_info"] != nil {
                    self.sellerContactInfo = dict["seller_contact_info"] as! String
                }
                if dict.keys.contains("seller_name") && dict["seller_name"] != nil {
                    self.sellerName = dict["seller_name"] as! String
                }
                if dict.keys.contains("seller_tax_no") && dict["seller_tax_no"] != nil {
                    self.sellerTaxNo = dict["seller_tax_no"] as! String
                }
                if dict.keys.contains("smart_check_code") && dict["smart_check_code"] != nil {
                    self.smartCheckCode = dict["smart_check_code"] as! String
                }
                if dict.keys.contains("tax_amount") && dict["tax_amount"] != nil {
                    self.taxAmount = dict["tax_amount"] as! String
                }
                if dict.keys.contains("tax_rate") && dict["tax_rate"] != nil {
                    self.taxRate = dict["tax_rate"] as! String
                }
                if dict.keys.contains("total_amount_in_words") && dict["total_amount_in_words"] != nil {
                    self.totalAmountInWords = dict["total_amount_in_words"] as! String
                }
            }
        }
        public var items: [VatInvoiceScanQueryResponseBody.Module.Items]?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var totalPage: Int32?

        public var totalSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.items != nil {
                var tmp : [Any] = []
                for k in self.items! {
                    tmp.append(k.toMap())
                }
                map["items"] = tmp
            }
            if self.pageNo != nil {
                map["page_no"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["page_size"] = self.pageSize!
            }
            if self.totalPage != nil {
                map["total_page"] = self.totalPage!
            }
            if self.totalSize != nil {
                map["total_size"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("items") && dict["items"] != nil {
                var tmp : [VatInvoiceScanQueryResponseBody.Module.Items] = []
                for v in dict["items"] as! [Any] {
                    var model = VatInvoiceScanQueryResponseBody.Module.Items()
                    if v != nil {
                        model.fromMap(v as! [String: Any])
                    }
                    tmp.append(model)
                }
                self.items = tmp
            }
            if dict.keys.contains("page_no") && dict["page_no"] != nil {
                self.pageNo = dict["page_no"] as! Int32
            }
            if dict.keys.contains("page_size") && dict["page_size"] != nil {
                self.pageSize = dict["page_size"] as! Int32
            }
            if dict.keys.contains("total_page") && dict["total_page"] != nil {
                self.totalPage = dict["total_page"] as! Int32
            }
            if dict.keys.contains("total_size") && dict["total_size"] != nil {
                self.totalSize = dict["total_size"] as! Int32
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: VatInvoiceScanQueryResponseBody.Module?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.module?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            map["module"] = self.module?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var model = VatInvoiceScanQueryResponseBody.Module()
            model.fromMap(dict["module"] as! [String: Any])
            self.module = model
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class VatInvoiceScanQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VatInvoiceScanQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = VatInvoiceScanQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class WaitApplyInvoiceTaskDetailQueryHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var xAcsBtripSoCorpToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.xAcsBtripSoCorpToken != nil {
            map["x-acs-btrip-so-corp-token"] = self.xAcsBtripSoCorpToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("commonHeaders") && dict["commonHeaders"] != nil {
            self.commonHeaders = dict["commonHeaders"] as! [String: String]
        }
        if dict.keys.contains("x-acs-btrip-so-corp-token") && dict["x-acs-btrip-so-corp-token"] != nil {
            self.xAcsBtripSoCorpToken = dict["x-acs-btrip-so-corp-token"] as! String
        }
    }
}

public class WaitApplyInvoiceTaskDetailQueryRequest : Tea.TeaModel {
    public var billDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billDate != nil {
            map["bill_date"] = self.billDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("bill_date") && dict["bill_date"] != nil {
            self.billDate = dict["bill_date"] as! String
        }
    }
}

public class WaitApplyInvoiceTaskDetailQueryResponseBody : Tea.TeaModel {
    public class Module : Tea.TeaModel {
        public var contact: String?

        public var email: String?

        public var flightInvoiceFee: String?

        public var fuPointInvoiceFee: String?

        public var hotelNormalInvoiceFee: String?

        public var hotelSpecialInvoiceFee: String?

        public var internationalFlightInvoiceFee: String?

        public var internationalHotelInvoiceFee: String?

        public var invoiceThirdPartId: String?

        public var invoiceTitle: String?

        public var mailAddress: String?

        public var mailCity: String?

        public var mailFullAddress: String?

        public var mailProvince: String?

        public var penaltyFee: String?

        public var remark: String?

        public var serviceFee: String?

        public var telephone: String?

        public var trainInvoiceFee: String?

        public var vehicleInvoiceFee: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contact != nil {
                map["contact"] = self.contact!
            }
            if self.email != nil {
                map["email"] = self.email!
            }
            if self.flightInvoiceFee != nil {
                map["flight_invoice_fee"] = self.flightInvoiceFee!
            }
            if self.fuPointInvoiceFee != nil {
                map["fu_point_invoice_fee"] = self.fuPointInvoiceFee!
            }
            if self.hotelNormalInvoiceFee != nil {
                map["hotel_normal_invoice_fee"] = self.hotelNormalInvoiceFee!
            }
            if self.hotelSpecialInvoiceFee != nil {
                map["hotel_special_invoice_fee"] = self.hotelSpecialInvoiceFee!
            }
            if self.internationalFlightInvoiceFee != nil {
                map["international_flight_invoice_fee"] = self.internationalFlightInvoiceFee!
            }
            if self.internationalHotelInvoiceFee != nil {
                map["international_hotel_invoice_fee"] = self.internationalHotelInvoiceFee!
            }
            if self.invoiceThirdPartId != nil {
                map["invoice_third_part_id"] = self.invoiceThirdPartId!
            }
            if self.invoiceTitle != nil {
                map["invoice_title"] = self.invoiceTitle!
            }
            if self.mailAddress != nil {
                map["mail_address"] = self.mailAddress!
            }
            if self.mailCity != nil {
                map["mail_city"] = self.mailCity!
            }
            if self.mailFullAddress != nil {
                map["mail_full_address"] = self.mailFullAddress!
            }
            if self.mailProvince != nil {
                map["mail_province"] = self.mailProvince!
            }
            if self.penaltyFee != nil {
                map["penalty_fee"] = self.penaltyFee!
            }
            if self.remark != nil {
                map["remark"] = self.remark!
            }
            if self.serviceFee != nil {
                map["service_fee"] = self.serviceFee!
            }
            if self.telephone != nil {
                map["telephone"] = self.telephone!
            }
            if self.trainInvoiceFee != nil {
                map["train_invoice_fee"] = self.trainInvoiceFee!
            }
            if self.vehicleInvoiceFee != nil {
                map["vehicle_invoice_fee"] = self.vehicleInvoiceFee!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("contact") && dict["contact"] != nil {
                self.contact = dict["contact"] as! String
            }
            if dict.keys.contains("email") && dict["email"] != nil {
                self.email = dict["email"] as! String
            }
            if dict.keys.contains("flight_invoice_fee") && dict["flight_invoice_fee"] != nil {
                self.flightInvoiceFee = dict["flight_invoice_fee"] as! String
            }
            if dict.keys.contains("fu_point_invoice_fee") && dict["fu_point_invoice_fee"] != nil {
                self.fuPointInvoiceFee = dict["fu_point_invoice_fee"] as! String
            }
            if dict.keys.contains("hotel_normal_invoice_fee") && dict["hotel_normal_invoice_fee"] != nil {
                self.hotelNormalInvoiceFee = dict["hotel_normal_invoice_fee"] as! String
            }
            if dict.keys.contains("hotel_special_invoice_fee") && dict["hotel_special_invoice_fee"] != nil {
                self.hotelSpecialInvoiceFee = dict["hotel_special_invoice_fee"] as! String
            }
            if dict.keys.contains("international_flight_invoice_fee") && dict["international_flight_invoice_fee"] != nil {
                self.internationalFlightInvoiceFee = dict["international_flight_invoice_fee"] as! String
            }
            if dict.keys.contains("international_hotel_invoice_fee") && dict["international_hotel_invoice_fee"] != nil {
                self.internationalHotelInvoiceFee = dict["international_hotel_invoice_fee"] as! String
            }
            if dict.keys.contains("invoice_third_part_id") && dict["invoice_third_part_id"] != nil {
                self.invoiceThirdPartId = dict["invoice_third_part_id"] as! String
            }
            if dict.keys.contains("invoice_title") && dict["invoice_title"] != nil {
                self.invoiceTitle = dict["invoice_title"] as! String
            }
            if dict.keys.contains("mail_address") && dict["mail_address"] != nil {
                self.mailAddress = dict["mail_address"] as! String
            }
            if dict.keys.contains("mail_city") && dict["mail_city"] != nil {
                self.mailCity = dict["mail_city"] as! String
            }
            if dict.keys.contains("mail_full_address") && dict["mail_full_address"] != nil {
                self.mailFullAddress = dict["mail_full_address"] as! String
            }
            if dict.keys.contains("mail_province") && dict["mail_province"] != nil {
                self.mailProvince = dict["mail_province"] as! String
            }
            if dict.keys.contains("penalty_fee") && dict["penalty_fee"] != nil {
                self.penaltyFee = dict["penalty_fee"] as! String
            }
            if dict.keys.contains("remark") && dict["remark"] != nil {
                self.remark = dict["remark"] as! String
            }
            if dict.keys.contains("service_fee") && dict["service_fee"] != nil {
                self.serviceFee = dict["service_fee"] as! String
            }
            if dict.keys.contains("telephone") && dict["telephone"] != nil {
                self.telephone = dict["telephone"] as! String
            }
            if dict.keys.contains("train_invoice_fee") && dict["train_invoice_fee"] != nil {
                self.trainInvoiceFee = dict["train_invoice_fee"] as! String
            }
            if dict.keys.contains("vehicle_invoice_fee") && dict["vehicle_invoice_fee"] != nil {
                self.vehicleInvoiceFee = dict["vehicle_invoice_fee"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var module: [WaitApplyInvoiceTaskDetailQueryResponseBody.Module]?

    public var requestId: String?

    public var success: Bool?

    public var traceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.message != nil {
            map["message"] = self.message!
        }
        if self.module != nil {
            var tmp : [Any] = []
            for k in self.module! {
                tmp.append(k.toMap())
            }
            map["module"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.traceId != nil {
            map["traceId"] = self.traceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("code") && dict["code"] != nil {
            self.code = dict["code"] as! String
        }
        if dict.keys.contains("message") && dict["message"] != nil {
            self.message = dict["message"] as! String
        }
        if dict.keys.contains("module") && dict["module"] != nil {
            var tmp : [WaitApplyInvoiceTaskDetailQueryResponseBody.Module] = []
            for v in dict["module"] as! [Any] {
                var model = WaitApplyInvoiceTaskDetailQueryResponseBody.Module()
                if v != nil {
                    model.fromMap(v as! [String: Any])
                }
                tmp.append(model)
            }
            self.module = tmp
        }
        if dict.keys.contains("requestId") && dict["requestId"] != nil {
            self.requestId = dict["requestId"] as! String
        }
        if dict.keys.contains("success") && dict["success"] != nil {
            self.success = dict["success"] as! Bool
        }
        if dict.keys.contains("traceId") && dict["traceId"] != nil {
            self.traceId = dict["traceId"] as! String
        }
    }
}

public class WaitApplyInvoiceTaskDetailQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: WaitApplyInvoiceTaskDetailQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") && dict["headers"] != nil {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") && dict["statusCode"] != nil {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") && dict["body"] != nil {
            var model = WaitApplyInvoiceTaskDetailQueryResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}
