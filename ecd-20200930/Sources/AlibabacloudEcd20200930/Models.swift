import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class CdsFileShareLinkModel : Tea.TeaModel {
    public var accessCount: Int64?

    public var createTime: String?

    public var creator: String?

    public var description_: String?

    public var disableDownload: Bool?

    public var disablePreview: Bool?

    public var disableSave: Bool?

    public var downloadCount: Int64?

    public var downloadLimit: Int64?

    public var driveId: String?

    public var expiration: String?

    public var expired: Bool?

    public var fileIds: String?

    public var modifiyTime: String?

    public var previewCount: Int64?

    public var previewLimit: Int64?

    public var reportCount: Int64?

    public var saveCount: Int64?

    public var saveLimit: Int64?

    public var shareId: String?

    public var shareLink: String?

    public var shareName: String?

    public var sharePwd: String?

    public var status: String?

    public var videoPreviewCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessCount != nil {
            map["AccessCount"] = self.accessCount!
        }
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.creator != nil {
            map["Creator"] = self.creator!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableDownload != nil {
            map["DisableDownload"] = self.disableDownload!
        }
        if self.disablePreview != nil {
            map["DisablePreview"] = self.disablePreview!
        }
        if self.disableSave != nil {
            map["DisableSave"] = self.disableSave!
        }
        if self.downloadCount != nil {
            map["DownloadCount"] = self.downloadCount!
        }
        if self.downloadLimit != nil {
            map["DownloadLimit"] = self.downloadLimit!
        }
        if self.driveId != nil {
            map["DriveId"] = self.driveId!
        }
        if self.expiration != nil {
            map["Expiration"] = self.expiration!
        }
        if self.expired != nil {
            map["Expired"] = self.expired!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.modifiyTime != nil {
            map["ModifiyTime"] = self.modifiyTime!
        }
        if self.previewCount != nil {
            map["PreviewCount"] = self.previewCount!
        }
        if self.previewLimit != nil {
            map["PreviewLimit"] = self.previewLimit!
        }
        if self.reportCount != nil {
            map["ReportCount"] = self.reportCount!
        }
        if self.saveCount != nil {
            map["SaveCount"] = self.saveCount!
        }
        if self.saveLimit != nil {
            map["SaveLimit"] = self.saveLimit!
        }
        if self.shareId != nil {
            map["ShareId"] = self.shareId!
        }
        if self.shareLink != nil {
            map["ShareLink"] = self.shareLink!
        }
        if self.shareName != nil {
            map["ShareName"] = self.shareName!
        }
        if self.sharePwd != nil {
            map["SharePwd"] = self.sharePwd!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.videoPreviewCount != nil {
            map["VideoPreviewCount"] = self.videoPreviewCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessCount"] as? Int64 {
            self.accessCount = value
        }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Creator"] as? String {
            self.creator = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableDownload"] as? Bool {
            self.disableDownload = value
        }
        if let value = dict["DisablePreview"] as? Bool {
            self.disablePreview = value
        }
        if let value = dict["DisableSave"] as? Bool {
            self.disableSave = value
        }
        if let value = dict["DownloadCount"] as? Int64 {
            self.downloadCount = value
        }
        if let value = dict["DownloadLimit"] as? Int64 {
            self.downloadLimit = value
        }
        if let value = dict["DriveId"] as? String {
            self.driveId = value
        }
        if let value = dict["Expiration"] as? String {
            self.expiration = value
        }
        if let value = dict["Expired"] as? Bool {
            self.expired = value
        }
        if let value = dict["FileIds"] as? String {
            self.fileIds = value
        }
        if let value = dict["ModifiyTime"] as? String {
            self.modifiyTime = value
        }
        if let value = dict["PreviewCount"] as? Int64 {
            self.previewCount = value
        }
        if let value = dict["PreviewLimit"] as? Int64 {
            self.previewLimit = value
        }
        if let value = dict["ReportCount"] as? Int64 {
            self.reportCount = value
        }
        if let value = dict["SaveCount"] as? Int64 {
            self.saveCount = value
        }
        if let value = dict["SaveLimit"] as? Int64 {
            self.saveLimit = value
        }
        if let value = dict["ShareId"] as? String {
            self.shareId = value
        }
        if let value = dict["ShareLink"] as? String {
            self.shareLink = value
        }
        if let value = dict["ShareName"] as? String {
            self.shareName = value
        }
        if let value = dict["SharePwd"] as? String {
            self.sharePwd = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["VideoPreviewCount"] as? Int64 {
            self.videoPreviewCount = value
        }
    }
}

public class FilePermissionMember : Tea.TeaModel {
    public class CdsIdentity : Tea.TeaModel {
        public var id: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var cdsIdentity: FilePermissionMember.CdsIdentity?

    public var disinheritSubGroup: Bool?

    public var expireTime: Int64?

    public var roleId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.cdsIdentity?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsIdentity != nil {
            map["CdsIdentity"] = self.cdsIdentity?.toMap()
        }
        if self.disinheritSubGroup != nil {
            map["DisinheritSubGroup"] = self.disinheritSubGroup!
        }
        if self.expireTime != nil {
            map["ExpireTime"] = self.expireTime!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsIdentity"] as? [String: Any?] {
            var model = FilePermissionMember.CdsIdentity()
            model.fromMap(value)
            self.cdsIdentity = model
        }
        if let value = dict["DisinheritSubGroup"] as? Bool {
            self.disinheritSubGroup = value
        }
        if let value = dict["ExpireTime"] as? Int64 {
            self.expireTime = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
    }
}

public class Permission : Tea.TeaModel {
    public var createTime: String?

    public var description_: String?

    public var destCidrIp: String?

    public var ipProtocol: String?

    public var nicType: String?

    public var policy: String?

    public var portRange: String?

    public var priority: String?

    public var sourceCidrIp: String?

    public var sourcePortRange: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.destCidrIp != nil {
            map["DestCidrIp"] = self.destCidrIp!
        }
        if self.ipProtocol != nil {
            map["IpProtocol"] = self.ipProtocol!
        }
        if self.nicType != nil {
            map["NicType"] = self.nicType!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.portRange != nil {
            map["PortRange"] = self.portRange!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.sourceCidrIp != nil {
            map["SourceCidrIp"] = self.sourceCidrIp!
        }
        if self.sourcePortRange != nil {
            map["SourcePortRange"] = self.sourcePortRange!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DestCidrIp"] as? String {
            self.destCidrIp = value
        }
        if let value = dict["IpProtocol"] as? String {
            self.ipProtocol = value
        }
        if let value = dict["NicType"] as? String {
            self.nicType = value
        }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["PortRange"] as? String {
            self.portRange = value
        }
        if let value = dict["Priority"] as? String {
            self.priority = value
        }
        if let value = dict["SourceCidrIp"] as? String {
            self.sourceCidrIp = value
        }
        if let value = dict["SourcePortRange"] as? String {
            self.sourcePortRange = value
        }
    }
}

public class ActivateOfficeSiteRequest : Tea.TeaModel {
    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ActivateOfficeSiteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ActivateOfficeSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ActivateOfficeSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ActivateOfficeSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddDesktopOversoldUserGroupRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var imageId: String?

    public var name: String?

    public var oversoldGroupId: String?

    public var policyGroupId: String?

    public var tag: [AddDesktopOversoldUserGroupRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [AddDesktopOversoldUserGroupRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = AddDesktopOversoldUserGroupRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class AddDesktopOversoldUserGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var data: AddDesktopOversoldUserGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddDesktopOversoldUserGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddDesktopOversoldUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDesktopOversoldUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDesktopOversoldUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddDevicesRequest : Tea.TeaModel {
    public var clientType: Int32?

    public var deviceIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientType != nil {
            map["ClientType"] = self.clientType!
        }
        if self.deviceIds != nil {
            map["DeviceIds"] = self.deviceIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientType"] as? Int32 {
            self.clientType = value
        }
        if let value = dict["DeviceIds"] as? [String] {
            self.deviceIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddDevicesResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddFilePermissionRequest : Tea.TeaModel {
    public class MemberList : Tea.TeaModel {
        public class CdsIdentity : Tea.TeaModel {
            public var id: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var cdsIdentity: AddFilePermissionRequest.MemberList.CdsIdentity?

        public var disinheritSubGroup: Bool?

        public var expireTime: Int64?

        public var roleId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cdsIdentity?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cdsIdentity != nil {
                map["CdsIdentity"] = self.cdsIdentity?.toMap()
            }
            if self.disinheritSubGroup != nil {
                map["DisinheritSubGroup"] = self.disinheritSubGroup!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CdsIdentity"] as? [String: Any?] {
                var model = AddFilePermissionRequest.MemberList.CdsIdentity()
                model.fromMap(value)
                self.cdsIdentity = model
            }
            if let value = dict["DisinheritSubGroup"] as? Bool {
                self.disinheritSubGroup = value
            }
            if let value = dict["ExpireTime"] as? Int64 {
                self.expireTime = value
            }
            if let value = dict["RoleId"] as? String {
                self.roleId = value
            }
        }
    }
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var memberList: [AddFilePermissionRequest.MemberList]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.memberList != nil {
            var tmp : [Any] = []
            for k in self.memberList! {
                tmp.append(k.toMap())
            }
            map["MemberList"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MemberList"] as? [Any?] {
            var tmp : [AddFilePermissionRequest.MemberList] = []
            for v in value {
                if v != nil {
                    var model = AddFilePermissionRequest.MemberList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.memberList = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddFilePermissionShrinkRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var memberListShrink: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.memberListShrink != nil {
            map["MemberList"] = self.memberListShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MemberList"] as? String {
            self.memberListShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AddFilePermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddFilePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddFilePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddFilePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddUserToDesktopGroupRequest : Tea.TeaModel {
    public var clientToken: String?

    public var desktopGroupId: String?

    public var desktopGroupIds: [String]?

    public var endUserIds: [String]?

    public var regionId: String?

    public var simpleUserGroupId: String?

    public var userGroupName: String?

    public var userOuPath: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupIds != nil {
            map["DesktopGroupIds"] = self.desktopGroupIds!
        }
        if self.endUserIds != nil {
            map["EndUserIds"] = self.endUserIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.simpleUserGroupId != nil {
            map["SimpleUserGroupId"] = self.simpleUserGroupId!
        }
        if self.userGroupName != nil {
            map["UserGroupName"] = self.userGroupName!
        }
        if self.userOuPath != nil {
            map["UserOuPath"] = self.userOuPath!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupIds"] as? [String] {
            self.desktopGroupIds = value
        }
        if let value = dict["EndUserIds"] as? [String] {
            self.endUserIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SimpleUserGroupId"] as? String {
            self.simpleUserGroupId = value
        }
        if let value = dict["UserGroupName"] as? String {
            self.userGroupName = value
        }
        if let value = dict["UserOuPath"] as? String {
            self.userOuPath = value
        }
    }
}

public class AddUserToDesktopGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddUserToDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddUserToDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddUserToDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddUserToDesktopOversoldUserGroupRequest : Tea.TeaModel {
    public var addUserAmount: Int32?

    public var endUserId: String?

    public var oversoldGroupId: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addUserAmount != nil {
            map["AddUserAmount"] = self.addUserAmount!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddUserAmount"] as? Int32 {
            self.addUserAmount = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class AddUserToDesktopOversoldUserGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddUserToDesktopOversoldUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddUserToDesktopOversoldUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddUserToDesktopOversoldUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AllocateIpAddressRequest : Tea.TeaModel {
    public var networkInterfaceId: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkInterfaceId != nil {
            map["NetworkInterfaceId"] = self.networkInterfaceId!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkInterfaceId"] as? String {
            self.networkInterfaceId = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AllocateIpAddressResponseBody : Tea.TeaModel {
    public var eipAddress: String?

    public var eipId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eipAddress != nil {
            map["EipAddress"] = self.eipAddress!
        }
        if self.eipId != nil {
            map["EipId"] = self.eipId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EipAddress"] as? String {
            self.eipAddress = value
        }
        if let value = dict["EipId"] as? String {
            self.eipId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AllocateIpAddressResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AllocateIpAddressResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AllocateIpAddressResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyAutoSnapshotPolicyRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var policyId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ApplyAutoSnapshotPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ApplyAutoSnapshotPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyAutoSnapshotPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyAutoSnapshotPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyCoordinatePrivilegeRequest : Tea.TeaModel {
    public var coId: String?

    public var endUserId: String?

    public var regionId: String?

    public var userType: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coId != nil {
            map["CoId"] = self.coId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoId"] as? String {
            self.coId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class ApplyCoordinatePrivilegeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ApplyCoordinatePrivilegeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyCoordinatePrivilegeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyCoordinatePrivilegeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyCoordinationForMonitoringRequest : Tea.TeaModel {
    public class ResourceCandidates : Tea.TeaModel {
        public var ownerAliUid: Int64?

        public var ownerEndUserId: String?

        public var resourceId: String?

        public var resourceName: String?

        public var resourceProperties: String?

        public var resourceRegionId: String?

        public var resourceType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ownerAliUid != nil {
                map["OwnerAliUid"] = self.ownerAliUid!
            }
            if self.ownerEndUserId != nil {
                map["OwnerEndUserId"] = self.ownerEndUserId!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceName != nil {
                map["ResourceName"] = self.resourceName!
            }
            if self.resourceProperties != nil {
                map["ResourceProperties"] = self.resourceProperties!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OwnerAliUid"] as? Int64 {
                self.ownerAliUid = value
            }
            if let value = dict["OwnerEndUserId"] as? String {
                self.ownerEndUserId = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceName"] as? String {
                self.resourceName = value
            }
            if let value = dict["ResourceProperties"] as? String {
                self.resourceProperties = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
        }
    }
    public var coordinatePolicyType: String?

    public var endUserId: String?

    public var initiatorType: String?

    public var regionId: String?

    public var resourceCandidates: [ApplyCoordinationForMonitoringRequest.ResourceCandidates]?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coordinatePolicyType != nil {
            map["CoordinatePolicyType"] = self.coordinatePolicyType!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.initiatorType != nil {
            map["InitiatorType"] = self.initiatorType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceCandidates != nil {
            var tmp : [Any] = []
            for k in self.resourceCandidates! {
                tmp.append(k.toMap())
            }
            map["ResourceCandidates"] = tmp
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoordinatePolicyType"] as? String {
            self.coordinatePolicyType = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["InitiatorType"] as? String {
            self.initiatorType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceCandidates"] as? [Any?] {
            var tmp : [ApplyCoordinationForMonitoringRequest.ResourceCandidates] = []
            for v in value {
                if v != nil {
                    var model = ApplyCoordinationForMonitoringRequest.ResourceCandidates()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceCandidates = tmp
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class ApplyCoordinationForMonitoringResponseBody : Tea.TeaModel {
    public class CoordinateFlowModels : Tea.TeaModel {
        public var coId: String?

        public var coordinateStatus: String?

        public var coordinateTicket: String?

        public var initiatorType: String?

        public var ownerUserId: String?

        public var resourceId: String?

        public var resourceName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.coId != nil {
                map["CoId"] = self.coId!
            }
            if self.coordinateStatus != nil {
                map["CoordinateStatus"] = self.coordinateStatus!
            }
            if self.coordinateTicket != nil {
                map["CoordinateTicket"] = self.coordinateTicket!
            }
            if self.initiatorType != nil {
                map["InitiatorType"] = self.initiatorType!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceName != nil {
                map["ResourceName"] = self.resourceName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CoId"] as? String {
                self.coId = value
            }
            if let value = dict["CoordinateStatus"] as? String {
                self.coordinateStatus = value
            }
            if let value = dict["CoordinateTicket"] as? String {
                self.coordinateTicket = value
            }
            if let value = dict["InitiatorType"] as? String {
                self.initiatorType = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceName"] as? String {
                self.resourceName = value
            }
        }
    }
    public var coordinateFlowModels: [ApplyCoordinationForMonitoringResponseBody.CoordinateFlowModels]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coordinateFlowModels != nil {
            var tmp : [Any] = []
            for k in self.coordinateFlowModels! {
                tmp.append(k.toMap())
            }
            map["CoordinateFlowModels"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoordinateFlowModels"] as? [Any?] {
            var tmp : [ApplyCoordinationForMonitoringResponseBody.CoordinateFlowModels] = []
            for v in value {
                if v != nil {
                    var model = ApplyCoordinationForMonitoringResponseBody.CoordinateFlowModels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.coordinateFlowModels = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ApplyCoordinationForMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyCoordinationForMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyCoordinationForMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApproveFotaUpdateRequest : Tea.TeaModel {
    public var appVersion: String?

    public var desktopId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appVersion != nil {
            map["AppVersion"] = self.appVersion!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppVersion"] as? String {
            self.appVersion = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ApproveFotaUpdateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ApproveFotaUpdateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApproveFotaUpdateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApproveFotaUpdateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssociateIpAddressRequest : Tea.TeaModel {
    public var eipId: String?

    public var natGatewayId: String?

    public var networkInterfaceId: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eipId != nil {
            map["EipId"] = self.eipId!
        }
        if self.natGatewayId != nil {
            map["NatGatewayId"] = self.natGatewayId!
        }
        if self.networkInterfaceId != nil {
            map["NetworkInterfaceId"] = self.networkInterfaceId!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EipId"] as? String {
            self.eipId = value
        }
        if let value = dict["NatGatewayId"] as? String {
            self.natGatewayId = value
        }
        if let value = dict["NetworkInterfaceId"] as? String {
            self.networkInterfaceId = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AssociateIpAddressResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AssociateIpAddressResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssociateIpAddressResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssociateIpAddressResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssociateNetworkPackageRequest : Tea.TeaModel {
    public var networkPackageId: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkPackageId"] as? String {
            self.networkPackageId = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class AssociateNetworkPackageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AssociateNetworkPackageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssociateNetworkPackageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssociateNetworkPackageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssociateRouteTableRequest : Tea.TeaModel {
    public var regionId: String?

    public var routeTableId: String?

    public var vSwitchId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
        if let value = dict["VSwitchId"] as? String {
            self.vSwitchId = value
        }
    }
}

public class AssociateRouteTableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AssociateRouteTableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssociateRouteTableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssociateRouteTableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachCenRequest : Tea.TeaModel {
    public var cenId: String?

    public var cenOwnerId: Int64?

    public var officeSiteId: String?

    public var regionId: String?

    public var verifyCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cenId != nil {
            map["CenId"] = self.cenId!
        }
        if self.cenOwnerId != nil {
            map["CenOwnerId"] = self.cenOwnerId!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.verifyCode != nil {
            map["VerifyCode"] = self.verifyCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CenId"] as? String {
            self.cenId = value
        }
        if let value = dict["CenOwnerId"] as? Int64 {
            self.cenOwnerId = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VerifyCode"] as? String {
            self.verifyCode = value
        }
    }
}

public class AttachCenResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachCenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachCenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachCenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachEndUserRequest : Tea.TeaModel {
    public var adDomain: String?

    public var clientType: Int32?

    public var deviceId: String?

    public var directoryId: String?

    public var endUserId: String?

    public var regionId: String?

    public var userType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adDomain != nil {
            map["AdDomain"] = self.adDomain!
        }
        if self.clientType != nil {
            map["ClientType"] = self.clientType!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdDomain"] as? String {
            self.adDomain = value
        }
        if let value = dict["ClientType"] as? Int32 {
            self.clientType = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
    }
}

public class AttachEndUserResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachEndUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachEndUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachEndUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BindConfigGroupRequest : Tea.TeaModel {
    public class ResourceInfos : Tea.TeaModel {
        public var productType: String?

        public var resourceId: String?

        public var resourceRegionId: String?

        public var resourceType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
        }
    }
    public var groupId: String?

    public var regionId: String?

    public var resourceInfos: [BindConfigGroupRequest.ResourceInfos]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInfos != nil {
            var tmp : [Any] = []
            for k in self.resourceInfos! {
                tmp.append(k.toMap())
            }
            map["ResourceInfos"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInfos"] as? [Any?] {
            var tmp : [BindConfigGroupRequest.ResourceInfos] = []
            for v in value {
                if v != nil {
                    var model = BindConfigGroupRequest.ResourceInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceInfos = tmp
        }
    }
}

public class BindConfigGroupResponseBody : Tea.TeaModel {
    public var groupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BindConfigGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BindConfigGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BindConfigGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelAutoSnapshotPolicyRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var policyId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CancelAutoSnapshotPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CancelAutoSnapshotPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelAutoSnapshotPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelAutoSnapshotPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelCdsFileShareLinkRequest : Tea.TeaModel {
    public var cdsId: String?

    public var shareId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.shareId != nil {
            map["ShareId"] = self.shareId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["ShareId"] as? String {
            self.shareId = value
        }
    }
}

public class CancelCdsFileShareLinkResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CancelCdsFileShareLinkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelCdsFileShareLinkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelCdsFileShareLinkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelCoordinationForMonitoringRequest : Tea.TeaModel {
    public var coIds: [String]?

    public var endUserId: String?

    public var regionId: String?

    public var userType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coIds != nil {
            map["CoIds"] = self.coIds!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoIds"] as? [String] {
            self.coIds = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
    }
}

public class CancelCoordinationForMonitoringResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CancelCoordinationForMonitoringResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelCoordinationForMonitoringResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelCoordinationForMonitoringResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelCopyImageRequest : Tea.TeaModel {
    public var imageId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CancelCopyImageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CancelCopyImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelCopyImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelCopyImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CloneCenterPolicyRequest : Tea.TeaModel {
    public var businessType: Int32?

    public var name: String?

    public var policyGroupId: String?

    public var regionId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class CloneCenterPolicyResponseBody : Tea.TeaModel {
    public var policyGroupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CloneCenterPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CloneCenterPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CloneCenterPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClonePolicyGroupRequest : Tea.TeaModel {
    public var name: String?

    public var policyGroupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ClonePolicyGroupResponseBody : Tea.TeaModel {
    public var policyGroupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ClonePolicyGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClonePolicyGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClonePolicyGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CompleteCdsFileRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var regionId: String?

    public var uploadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.uploadId != nil {
            map["UploadId"] = self.uploadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UploadId"] as? String {
            self.uploadId = value
        }
    }
}

public class CompleteCdsFileResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CompleteCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CompleteCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CompleteCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ConfigADConnectorTrustRequest : Tea.TeaModel {
    public var officeSiteId: String?

    public var rdsLicenseDomain: Bool?

    public var regionId: String?

    public var trustKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.rdsLicenseDomain != nil {
            map["RdsLicenseDomain"] = self.rdsLicenseDomain!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.trustKey != nil {
            map["TrustKey"] = self.trustKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RdsLicenseDomain"] as? Bool {
            self.rdsLicenseDomain = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TrustKey"] as? String {
            self.trustKey = value
        }
    }
}

public class ConfigADConnectorTrustResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ConfigADConnectorTrustResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ConfigADConnectorTrustResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ConfigADConnectorTrustResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ConfigADConnectorUserRequest : Tea.TeaModel {
    public var domainPassword: String?

    public var domainUserName: String?

    public var OUName: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainPassword != nil {
            map["DomainPassword"] = self.domainPassword!
        }
        if self.domainUserName != nil {
            map["DomainUserName"] = self.domainUserName!
        }
        if self.OUName != nil {
            map["OUName"] = self.OUName!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainPassword"] as? String {
            self.domainPassword = value
        }
        if let value = dict["DomainUserName"] as? String {
            self.domainUserName = value
        }
        if let value = dict["OUName"] as? String {
            self.OUName = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ConfigADConnectorUserResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ConfigADConnectorUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ConfigADConnectorUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ConfigADConnectorUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CopyCdsFileRequest : Tea.TeaModel {
    public var autoRename: Bool?

    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var fileReceiverId: String?

    public var fileReceiverType: String?

    public var groupId: String?

    public var parentFolderId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoRename != nil {
            map["AutoRename"] = self.autoRename!
        }
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.fileReceiverId != nil {
            map["FileReceiverId"] = self.fileReceiverId!
        }
        if self.fileReceiverType != nil {
            map["FileReceiverType"] = self.fileReceiverType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.parentFolderId != nil {
            map["ParentFolderId"] = self.parentFolderId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoRename"] as? Bool {
            self.autoRename = value
        }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["FileReceiverId"] as? String {
            self.fileReceiverId = value
        }
        if let value = dict["FileReceiverType"] as? String {
            self.fileReceiverType = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ParentFolderId"] as? String {
            self.parentFolderId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CopyCdsFileResponseBody : Tea.TeaModel {
    public class CopyCdsFileModel : Tea.TeaModel {
        public var asyncTaskId: String?

        public var fileId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncTaskId != nil {
                map["AsyncTaskId"] = self.asyncTaskId!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsyncTaskId"] as? String {
                self.asyncTaskId = value
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
        }
    }
    public var code: String?

    public var copyCdsFileModel: CopyCdsFileResponseBody.CopyCdsFileModel?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.copyCdsFileModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.copyCdsFileModel != nil {
            map["CopyCdsFileModel"] = self.copyCdsFileModel?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CopyCdsFileModel"] as? [String: Any?] {
            var model = CopyCdsFileResponseBody.CopyCdsFileModel()
            model.fromMap(value)
            self.copyCdsFileModel = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class CopyCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CopyCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CopyCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CopyImageRequest : Tea.TeaModel {
    public var destinationDescription: String?

    public var destinationImageName: String?

    public var destinationRegionId: String?

    public var imageId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.destinationDescription != nil {
            map["DestinationDescription"] = self.destinationDescription!
        }
        if self.destinationImageName != nil {
            map["DestinationImageName"] = self.destinationImageName!
        }
        if self.destinationRegionId != nil {
            map["DestinationRegionId"] = self.destinationRegionId!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DestinationDescription"] as? String {
            self.destinationDescription = value
        }
        if let value = dict["DestinationImageName"] as? String {
            self.destinationImageName = value
        }
        if let value = dict["DestinationRegionId"] as? String {
            self.destinationRegionId = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CopyImageResponseBody : Tea.TeaModel {
    public var imageId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CopyImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CopyImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CopyImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateADConnectorDirectoryRequest : Tea.TeaModel {
    public var desktopAccessType: String?

    public var directoryName: String?

    public var dnsAddress: [String]?

    public var domainName: String?

    public var domainPassword: String?

    public var domainUserName: String?

    public var enableAdminAccess: Bool?

    public var mfaEnabled: Bool?

    public var regionId: String?

    public var specification: Int64?

    public var subDomainDnsAddress: [String]?

    public var subDomainName: String?

    public var vSwitchId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopAccessType != nil {
            map["DesktopAccessType"] = self.desktopAccessType!
        }
        if self.directoryName != nil {
            map["DirectoryName"] = self.directoryName!
        }
        if self.dnsAddress != nil {
            map["DnsAddress"] = self.dnsAddress!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainPassword != nil {
            map["DomainPassword"] = self.domainPassword!
        }
        if self.domainUserName != nil {
            map["DomainUserName"] = self.domainUserName!
        }
        if self.enableAdminAccess != nil {
            map["EnableAdminAccess"] = self.enableAdminAccess!
        }
        if self.mfaEnabled != nil {
            map["MfaEnabled"] = self.mfaEnabled!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        if self.subDomainDnsAddress != nil {
            map["SubDomainDnsAddress"] = self.subDomainDnsAddress!
        }
        if self.subDomainName != nil {
            map["SubDomainName"] = self.subDomainName!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopAccessType"] as? String {
            self.desktopAccessType = value
        }
        if let value = dict["DirectoryName"] as? String {
            self.directoryName = value
        }
        if let value = dict["DnsAddress"] as? [String] {
            self.dnsAddress = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainPassword"] as? String {
            self.domainPassword = value
        }
        if let value = dict["DomainUserName"] as? String {
            self.domainUserName = value
        }
        if let value = dict["EnableAdminAccess"] as? Bool {
            self.enableAdminAccess = value
        }
        if let value = dict["MfaEnabled"] as? Bool {
            self.mfaEnabled = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Specification"] as? Int64 {
            self.specification = value
        }
        if let value = dict["SubDomainDnsAddress"] as? [String] {
            self.subDomainDnsAddress = value
        }
        if let value = dict["SubDomainName"] as? String {
            self.subDomainName = value
        }
        if let value = dict["VSwitchId"] as? [String] {
            self.vSwitchId = value
        }
    }
}

public class CreateADConnectorDirectoryResponseBody : Tea.TeaModel {
    public class AdConnectors : Tea.TeaModel {
        public var address: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["Address"] = self.address!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Address"] as? String {
                self.address = value
            }
        }
    }
    public var adConnectors: [CreateADConnectorDirectoryResponseBody.AdConnectors]?

    public var directoryId: String?

    public var requestId: String?

    public var trustPassword: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adConnectors != nil {
            var tmp : [Any] = []
            for k in self.adConnectors! {
                tmp.append(k.toMap())
            }
            map["AdConnectors"] = tmp
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trustPassword != nil {
            map["TrustPassword"] = self.trustPassword!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdConnectors"] as? [Any?] {
            var tmp : [CreateADConnectorDirectoryResponseBody.AdConnectors] = []
            for v in value {
                if v != nil {
                    var model = CreateADConnectorDirectoryResponseBody.AdConnectors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.adConnectors = tmp
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TrustPassword"] as? String {
            self.trustPassword = value
        }
    }
}

public class CreateADConnectorDirectoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateADConnectorDirectoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateADConnectorDirectoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateADConnectorOfficeSiteRequest : Tea.TeaModel {
    public var adHostname: String?

    public var backupDCHostname: String?

    public var backupDns: String?

    public var bandwidth: Int32?

    public var cenId: String?

    public var cenOwnerId: Int64?

    public var cidrBlock: String?

    public var desktopAccessType: String?

    public var dnsAddress: [String]?

    public var domainName: String?

    public var domainPassword: String?

    public var domainUserName: String?

    public var enableAdminAccess: Bool?

    public var enableInternetAccess: Bool?

    public var mfaEnabled: Bool?

    public var officeSiteName: String?

    public var protocolType: String?

    public var regionId: String?

    public var specification: Int64?

    public var subDomainDnsAddress: [String]?

    public var subDomainName: String?

    public var vSwitchId: [String]?

    public var verifyCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adHostname != nil {
            map["AdHostname"] = self.adHostname!
        }
        if self.backupDCHostname != nil {
            map["BackupDCHostname"] = self.backupDCHostname!
        }
        if self.backupDns != nil {
            map["BackupDns"] = self.backupDns!
        }
        if self.bandwidth != nil {
            map["Bandwidth"] = self.bandwidth!
        }
        if self.cenId != nil {
            map["CenId"] = self.cenId!
        }
        if self.cenOwnerId != nil {
            map["CenOwnerId"] = self.cenOwnerId!
        }
        if self.cidrBlock != nil {
            map["CidrBlock"] = self.cidrBlock!
        }
        if self.desktopAccessType != nil {
            map["DesktopAccessType"] = self.desktopAccessType!
        }
        if self.dnsAddress != nil {
            map["DnsAddress"] = self.dnsAddress!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainPassword != nil {
            map["DomainPassword"] = self.domainPassword!
        }
        if self.domainUserName != nil {
            map["DomainUserName"] = self.domainUserName!
        }
        if self.enableAdminAccess != nil {
            map["EnableAdminAccess"] = self.enableAdminAccess!
        }
        if self.enableInternetAccess != nil {
            map["EnableInternetAccess"] = self.enableInternetAccess!
        }
        if self.mfaEnabled != nil {
            map["MfaEnabled"] = self.mfaEnabled!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        if self.subDomainDnsAddress != nil {
            map["SubDomainDnsAddress"] = self.subDomainDnsAddress!
        }
        if self.subDomainName != nil {
            map["SubDomainName"] = self.subDomainName!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        if self.verifyCode != nil {
            map["VerifyCode"] = self.verifyCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdHostname"] as? String {
            self.adHostname = value
        }
        if let value = dict["BackupDCHostname"] as? String {
            self.backupDCHostname = value
        }
        if let value = dict["BackupDns"] as? String {
            self.backupDns = value
        }
        if let value = dict["Bandwidth"] as? Int32 {
            self.bandwidth = value
        }
        if let value = dict["CenId"] as? String {
            self.cenId = value
        }
        if let value = dict["CenOwnerId"] as? Int64 {
            self.cenOwnerId = value
        }
        if let value = dict["CidrBlock"] as? String {
            self.cidrBlock = value
        }
        if let value = dict["DesktopAccessType"] as? String {
            self.desktopAccessType = value
        }
        if let value = dict["DnsAddress"] as? [String] {
            self.dnsAddress = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainPassword"] as? String {
            self.domainPassword = value
        }
        if let value = dict["DomainUserName"] as? String {
            self.domainUserName = value
        }
        if let value = dict["EnableAdminAccess"] as? Bool {
            self.enableAdminAccess = value
        }
        if let value = dict["EnableInternetAccess"] as? Bool {
            self.enableInternetAccess = value
        }
        if let value = dict["MfaEnabled"] as? Bool {
            self.mfaEnabled = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["ProtocolType"] as? String {
            self.protocolType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Specification"] as? Int64 {
            self.specification = value
        }
        if let value = dict["SubDomainDnsAddress"] as? [String] {
            self.subDomainDnsAddress = value
        }
        if let value = dict["SubDomainName"] as? String {
            self.subDomainName = value
        }
        if let value = dict["VSwitchId"] as? [String] {
            self.vSwitchId = value
        }
        if let value = dict["VerifyCode"] as? String {
            self.verifyCode = value
        }
    }
}

public class CreateADConnectorOfficeSiteResponseBody : Tea.TeaModel {
    public var officeSiteId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateADConnectorOfficeSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateADConnectorOfficeSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateADConnectorOfficeSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAndBindNasFileSystemRequest : Tea.TeaModel {
    public var description_: String?

    public var desktopGroupId: String?

    public var encryptType: Int32?

    public var endUserIds: [String]?

    public var fileSystemName: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var storageType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.encryptType != nil {
            map["EncryptType"] = self.encryptType!
        }
        if self.endUserIds != nil {
            map["EndUserIds"] = self.endUserIds!
        }
        if self.fileSystemName != nil {
            map["FileSystemName"] = self.fileSystemName!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.storageType != nil {
            map["StorageType"] = self.storageType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["EncryptType"] as? Int32 {
            self.encryptType = value
        }
        if let value = dict["EndUserIds"] as? [String] {
            self.endUserIds = value
        }
        if let value = dict["FileSystemName"] as? String {
            self.fileSystemName = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StorageType"] as? String {
            self.storageType = value
        }
    }
}

public class CreateAndBindNasFileSystemResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAndBindNasFileSystemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAndBindNasFileSystemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAndBindNasFileSystemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAutoSnapshotPolicyRequest : Tea.TeaModel {
    public var cronExpression: String?

    public var policyName: String?

    public var regionId: String?

    public var retentionDays: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cronExpression != nil {
            map["CronExpression"] = self.cronExpression!
        }
        if self.policyName != nil {
            map["PolicyName"] = self.policyName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.retentionDays != nil {
            map["RetentionDays"] = self.retentionDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CronExpression"] as? String {
            self.cronExpression = value
        }
        if let value = dict["PolicyName"] as? String {
            self.policyName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RetentionDays"] as? Int32 {
            self.retentionDays = value
        }
    }
}

public class CreateAutoSnapshotPolicyResponseBody : Tea.TeaModel {
    public var policyId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAutoSnapshotPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAutoSnapshotPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAutoSnapshotPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBandwidthResourcePackagesRequest : Tea.TeaModel {
    public var amount: Int32?

    public var autoPay: Bool?

    public var packageSize: Int32?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.packageSize != nil {
            map["PackageSize"] = self.packageSize!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? Int32 {
            self.amount = value
        }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["PackageSize"] as? Int32 {
            self.packageSize = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateBandwidthResourcePackagesResponseBody : Tea.TeaModel {
    public var orderId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateBandwidthResourcePackagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBandwidthResourcePackagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBandwidthResourcePackagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBundleRequest : Tea.TeaModel {
    public var bundleName: String?

    public var description_: String?

    public var desktopType: String?

    public var imageId: String?

    public var language: String?

    public var regionId: String?

    public var rootDiskPerformanceLevel: String?

    public var rootDiskSizeGib: Int32?

    public var userDiskPerformanceLevel: String?

    public var userDiskSizeGib: [Int32]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleName != nil {
            map["BundleName"] = self.bundleName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.rootDiskPerformanceLevel != nil {
            map["RootDiskPerformanceLevel"] = self.rootDiskPerformanceLevel!
        }
        if self.rootDiskSizeGib != nil {
            map["RootDiskSizeGib"] = self.rootDiskSizeGib!
        }
        if self.userDiskPerformanceLevel != nil {
            map["UserDiskPerformanceLevel"] = self.userDiskPerformanceLevel!
        }
        if self.userDiskSizeGib != nil {
            map["UserDiskSizeGib"] = self.userDiskSizeGib!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleName"] as? String {
            self.bundleName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RootDiskPerformanceLevel"] as? String {
            self.rootDiskPerformanceLevel = value
        }
        if let value = dict["RootDiskSizeGib"] as? Int32 {
            self.rootDiskSizeGib = value
        }
        if let value = dict["UserDiskPerformanceLevel"] as? String {
            self.userDiskPerformanceLevel = value
        }
        if let value = dict["UserDiskSizeGib"] as? [Int32] {
            self.userDiskSizeGib = value
        }
    }
}

public class CreateBundleResponseBody : Tea.TeaModel {
    public var bundleId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleId"] as? String {
            self.bundleId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateBundleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBundleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBundleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCdsFileRequest : Tea.TeaModel {
    public var cdsId: String?

    public var conflictPolicy: String?

    public var endUserId: String?

    public var fileHash: String?

    public var fileLength: Int64?

    public var fileName: String?

    public var fileType: String?

    public var groupId: String?

    public var parentFileId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.conflictPolicy != nil {
            map["ConflictPolicy"] = self.conflictPolicy!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileHash != nil {
            map["FileHash"] = self.fileHash!
        }
        if self.fileLength != nil {
            map["FileLength"] = self.fileLength!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.fileType != nil {
            map["FileType"] = self.fileType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.parentFileId != nil {
            map["ParentFileId"] = self.parentFileId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["ConflictPolicy"] as? String {
            self.conflictPolicy = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileHash"] as? String {
            self.fileHash = value
        }
        if let value = dict["FileLength"] as? Int64 {
            self.fileLength = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["FileType"] as? String {
            self.fileType = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ParentFileId"] as? String {
            self.parentFileId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateCdsFileResponseBody : Tea.TeaModel {
    public class FileModel : Tea.TeaModel {
        public var fileId: String?

        public var uploadId: String?

        public var uploadUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.uploadId != nil {
                map["UploadId"] = self.uploadId!
            }
            if self.uploadUrl != nil {
                map["UploadUrl"] = self.uploadUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["UploadId"] as? String {
                self.uploadId = value
            }
            if let value = dict["UploadUrl"] as? String {
                self.uploadUrl = value
            }
        }
    }
    public var fileModel: CreateCdsFileResponseBody.FileModel?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.fileModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileModel != nil {
            map["FileModel"] = self.fileModel?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileModel"] as? [String: Any?] {
            var model = CreateCdsFileResponseBody.FileModel()
            model.fromMap(value)
            self.fileModel = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCdsFileShareLinkRequest : Tea.TeaModel {
    public var cdsId: String?

    public var description_: String?

    public var disableDownload: Bool?

    public var disablePreview: Bool?

    public var disableSave: Bool?

    public var downloadLimit: Int64?

    public var endUserId: String?

    public var expiration: String?

    public var fileIds: [String]?

    public var groupId: String?

    public var previewLimit: Int64?

    public var saveLimit: Int64?

    public var shareName: String?

    public var sharePwd: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableDownload != nil {
            map["DisableDownload"] = self.disableDownload!
        }
        if self.disablePreview != nil {
            map["DisablePreview"] = self.disablePreview!
        }
        if self.disableSave != nil {
            map["DisableSave"] = self.disableSave!
        }
        if self.downloadLimit != nil {
            map["DownloadLimit"] = self.downloadLimit!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.expiration != nil {
            map["Expiration"] = self.expiration!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.previewLimit != nil {
            map["PreviewLimit"] = self.previewLimit!
        }
        if self.saveLimit != nil {
            map["SaveLimit"] = self.saveLimit!
        }
        if self.shareName != nil {
            map["ShareName"] = self.shareName!
        }
        if self.sharePwd != nil {
            map["SharePwd"] = self.sharePwd!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableDownload"] as? Bool {
            self.disableDownload = value
        }
        if let value = dict["DisablePreview"] as? Bool {
            self.disablePreview = value
        }
        if let value = dict["DisableSave"] as? Bool {
            self.disableSave = value
        }
        if let value = dict["DownloadLimit"] as? Int64 {
            self.downloadLimit = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["Expiration"] as? String {
            self.expiration = value
        }
        if let value = dict["FileIds"] as? [String] {
            self.fileIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PreviewLimit"] as? Int64 {
            self.previewLimit = value
        }
        if let value = dict["SaveLimit"] as? Int64 {
            self.saveLimit = value
        }
        if let value = dict["ShareName"] as? String {
            self.shareName = value
        }
        if let value = dict["SharePwd"] as? String {
            self.sharePwd = value
        }
    }
}

public class CreateCdsFileShareLinkResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: CdsFileShareLinkModel?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CdsFileShareLinkModel()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateCdsFileShareLinkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCdsFileShareLinkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCdsFileShareLinkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCenterPolicyRequest : Tea.TeaModel {
    public class AuthorizeAccessPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
        }
    }
    public class AuthorizeSecurityPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public var ipProtocol: String?

        public var policy: String?

        public var portRange: String?

        public var priority: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.portRange != nil {
                map["PortRange"] = self.portRange!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["PortRange"] as? String {
                self.portRange = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class ClientType : Tea.TeaModel {
        public var clientType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientType"] as? String {
                self.clientType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public class DeviceRedirects : Tea.TeaModel {
        public var deviceType: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DeviceRules : Tea.TeaModel {
        public var deviceName: String?

        public var devicePid: String?

        public var deviceType: String?

        public var deviceVid: String?

        public var optCommand: String?

        public var platforms: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceName != nil {
                map["DeviceName"] = self.deviceName!
            }
            if self.devicePid != nil {
                map["DevicePid"] = self.devicePid!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVid != nil {
                map["DeviceVid"] = self.deviceVid!
            }
            if self.optCommand != nil {
                map["OptCommand"] = self.optCommand!
            }
            if self.platforms != nil {
                map["Platforms"] = self.platforms!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceName"] as? String {
                self.deviceName = value
            }
            if let value = dict["DevicePid"] as? String {
                self.devicePid = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVid"] as? String {
                self.deviceVid = value
            }
            if let value = dict["OptCommand"] as? String {
                self.optCommand = value
            }
            if let value = dict["Platforms"] as? String {
                self.platforms = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DomainResolveRule : Tea.TeaModel {
        public var description_: String?

        public var domain: String?

        public var policy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
        }
    }
    public class NetRedirectRule : Tea.TeaModel {
        public var domain: String?

        public var policy: String?

        public var ruleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
        }
    }
    public class UsbSupplyRedirectRule : Tea.TeaModel {
        public var description_: String?

        public var productId: String?

        public var usbRedirectType: String?

        public var usbRuleType: String?

        public var vendorId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.productId != nil {
                map["ProductId"] = self.productId!
            }
            if self.usbRedirectType != nil {
                map["UsbRedirectType"] = self.usbRedirectType!
            }
            if self.usbRuleType != nil {
                map["UsbRuleType"] = self.usbRuleType!
            }
            if self.vendorId != nil {
                map["VendorId"] = self.vendorId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ProductId"] as? String {
                self.productId = value
            }
            if let value = dict["UsbRedirectType"] as? String {
                self.usbRedirectType = value
            }
            if let value = dict["UsbRuleType"] as? String {
                self.usbRuleType = value
            }
            if let value = dict["VendorId"] as? String {
                self.vendorId = value
            }
        }
    }
    public var adminAccess: String?

    public var appContentProtection: String?

    public var authorizeAccessPolicyRule: [CreateCenterPolicyRequest.AuthorizeAccessPolicyRule]?

    public var authorizeSecurityPolicyRule: [CreateCenterPolicyRequest.AuthorizeSecurityPolicyRule]?

    public var businessType: Int32?

    public var cameraRedirect: String?

    public var clientControlMenu: String?

    public var clientType: [CreateCenterPolicyRequest.ClientType]?

    public var clipboard: String?

    public var colorEnhancement: String?

    public var cpdDriveClipboard: String?

    public var cpuDownGradeDuration: Int32?

    public var cpuProcessors: [String]?

    public var cpuProtectedMode: String?

    public var cpuRateLimit: Int32?

    public var cpuSampleDuration: Int32?

    public var cpuSingleRateLimit: Int32?

    public var deviceConnectHint: String?

    public var deviceRedirects: [CreateCenterPolicyRequest.DeviceRedirects]?

    public var deviceRules: [CreateCenterPolicyRequest.DeviceRules]?

    public var disconnectKeepSession: String?

    public var disconnectKeepSessionTime: Int32?

    public var displayMode: String?

    public var domainResolveRule: [CreateCenterPolicyRequest.DomainResolveRule]?

    public var domainResolveRuleType: String?

    public var enableSessionRateLimiting: String?

    public var endUserApplyAdminCoordinate: String?

    public var endUserGroupCoordinate: String?

    public var fileMigrate: String?

    public var fileTransferAddress: String?

    public var fileTransferSpeed: String?

    public var fileTransferSpeedLocation: String?

    public var gpuAcceleration: String?

    public var html5FileTransfer: String?

    public var internetCommunicationProtocol: String?

    public var internetPrinter: String?

    public var localDrive: String?

    public var maxReconnectTime: Int32?

    public var memoryDownGradeDuration: Int32?

    public var memoryProcessors: [String]?

    public var memoryProtectedMode: String?

    public var memoryRateLimit: Int32?

    public var memorySampleDuration: Int32?

    public var memorySingleRateLimit: Int32?

    public var mobileRestart: String?

    public var mobileShutdown: String?

    public var name: String?

    public var netRedirect: String?

    public var netRedirectRule: [CreateCenterPolicyRequest.NetRedirectRule]?

    public var noOperationDisconnect: String?

    public var noOperationDisconnectTime: Int32?

    public var printerRedirect: String?

    public var qualityEnhancement: String?

    public var recordEventDuration: Int32?

    public var recordEventFilePaths: [String]?

    public var recordEventRegisters: [String]?

    public var recordEvents: [String]?

    public var recording: String?

    public var recordingAudio: String?

    public var recordingDuration: Int32?

    public var recordingEndTime: String?

    public var recordingExpires: Int32?

    public var recordingFps: String?

    public var recordingStartTime: String?

    public var recordingUserNotify: String?

    public var recordingUserNotifyMessage: String?

    public var regionId: String?

    public var remoteCoordinate: String?

    public var resetDesktop: String?

    public var resolutionHeight: Int32?

    public var resolutionModel: String?

    public var resolutionWidth: Int32?

    public var resourceType: String?

    public var safeMenu: String?

    public var scope: String?

    public var scopeValue: [String]?

    public var screenDisplayMode: String?

    public var sessionMaxRateKbps: Int32?

    public var smoothEnhancement: String?

    public var statusMonitor: String?

    public var streamingMode: String?

    public var targetFps: Int32?

    public var taskbar: String?

    public var usbRedirect: String?

    public var usbSupplyRedirectRule: [CreateCenterPolicyRequest.UsbSupplyRedirectRule]?

    public var useTime: String?

    public var videoEncAvgKbps: Int32?

    public var videoEncMaxQP: Int32?

    public var videoEncMinQP: Int32?

    public var videoEncPeakKbps: Int32?

    public var videoEncPolicy: String?

    public var videoRedirect: String?

    public var visualQuality: String?

    public var watermark: String?

    public var watermarkAntiCam: String?

    public var watermarkColor: Int32?

    public var watermarkColumnAmount: Int32?

    public var watermarkCustomText: String?

    public var watermarkDegree: Double?

    public var watermarkFontSize: Int32?

    public var watermarkFontStyle: String?

    public var watermarkPower: String?

    public var watermarkRowAmount: Int32?

    public var watermarkSecurity: String?

    public var watermarkTransparencyValue: Int32?

    public var watermarkType: String?

    public var wuyingKeeper: String?

    public var wyAssistant: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminAccess != nil {
            map["AdminAccess"] = self.adminAccess!
        }
        if self.appContentProtection != nil {
            map["AppContentProtection"] = self.appContentProtection!
        }
        if self.authorizeAccessPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeAccessPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeAccessPolicyRule"] = tmp
        }
        if self.authorizeSecurityPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeSecurityPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeSecurityPolicyRule"] = tmp
        }
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.cameraRedirect != nil {
            map["CameraRedirect"] = self.cameraRedirect!
        }
        if self.clientControlMenu != nil {
            map["ClientControlMenu"] = self.clientControlMenu!
        }
        if self.clientType != nil {
            var tmp : [Any] = []
            for k in self.clientType! {
                tmp.append(k.toMap())
            }
            map["ClientType"] = tmp
        }
        if self.clipboard != nil {
            map["Clipboard"] = self.clipboard!
        }
        if self.colorEnhancement != nil {
            map["ColorEnhancement"] = self.colorEnhancement!
        }
        if self.cpdDriveClipboard != nil {
            map["CpdDriveClipboard"] = self.cpdDriveClipboard!
        }
        if self.cpuDownGradeDuration != nil {
            map["CpuDownGradeDuration"] = self.cpuDownGradeDuration!
        }
        if self.cpuProcessors != nil {
            map["CpuProcessors"] = self.cpuProcessors!
        }
        if self.cpuProtectedMode != nil {
            map["CpuProtectedMode"] = self.cpuProtectedMode!
        }
        if self.cpuRateLimit != nil {
            map["CpuRateLimit"] = self.cpuRateLimit!
        }
        if self.cpuSampleDuration != nil {
            map["CpuSampleDuration"] = self.cpuSampleDuration!
        }
        if self.cpuSingleRateLimit != nil {
            map["CpuSingleRateLimit"] = self.cpuSingleRateLimit!
        }
        if self.deviceConnectHint != nil {
            map["DeviceConnectHint"] = self.deviceConnectHint!
        }
        if self.deviceRedirects != nil {
            var tmp : [Any] = []
            for k in self.deviceRedirects! {
                tmp.append(k.toMap())
            }
            map["DeviceRedirects"] = tmp
        }
        if self.deviceRules != nil {
            var tmp : [Any] = []
            for k in self.deviceRules! {
                tmp.append(k.toMap())
            }
            map["DeviceRules"] = tmp
        }
        if self.disconnectKeepSession != nil {
            map["DisconnectKeepSession"] = self.disconnectKeepSession!
        }
        if self.disconnectKeepSessionTime != nil {
            map["DisconnectKeepSessionTime"] = self.disconnectKeepSessionTime!
        }
        if self.displayMode != nil {
            map["DisplayMode"] = self.displayMode!
        }
        if self.domainResolveRule != nil {
            var tmp : [Any] = []
            for k in self.domainResolveRule! {
                tmp.append(k.toMap())
            }
            map["DomainResolveRule"] = tmp
        }
        if self.domainResolveRuleType != nil {
            map["DomainResolveRuleType"] = self.domainResolveRuleType!
        }
        if self.enableSessionRateLimiting != nil {
            map["EnableSessionRateLimiting"] = self.enableSessionRateLimiting!
        }
        if self.endUserApplyAdminCoordinate != nil {
            map["EndUserApplyAdminCoordinate"] = self.endUserApplyAdminCoordinate!
        }
        if self.endUserGroupCoordinate != nil {
            map["EndUserGroupCoordinate"] = self.endUserGroupCoordinate!
        }
        if self.fileMigrate != nil {
            map["FileMigrate"] = self.fileMigrate!
        }
        if self.fileTransferAddress != nil {
            map["FileTransferAddress"] = self.fileTransferAddress!
        }
        if self.fileTransferSpeed != nil {
            map["FileTransferSpeed"] = self.fileTransferSpeed!
        }
        if self.fileTransferSpeedLocation != nil {
            map["FileTransferSpeedLocation"] = self.fileTransferSpeedLocation!
        }
        if self.gpuAcceleration != nil {
            map["GpuAcceleration"] = self.gpuAcceleration!
        }
        if self.html5FileTransfer != nil {
            map["Html5FileTransfer"] = self.html5FileTransfer!
        }
        if self.internetCommunicationProtocol != nil {
            map["InternetCommunicationProtocol"] = self.internetCommunicationProtocol!
        }
        if self.internetPrinter != nil {
            map["InternetPrinter"] = self.internetPrinter!
        }
        if self.localDrive != nil {
            map["LocalDrive"] = self.localDrive!
        }
        if self.maxReconnectTime != nil {
            map["MaxReconnectTime"] = self.maxReconnectTime!
        }
        if self.memoryDownGradeDuration != nil {
            map["MemoryDownGradeDuration"] = self.memoryDownGradeDuration!
        }
        if self.memoryProcessors != nil {
            map["MemoryProcessors"] = self.memoryProcessors!
        }
        if self.memoryProtectedMode != nil {
            map["MemoryProtectedMode"] = self.memoryProtectedMode!
        }
        if self.memoryRateLimit != nil {
            map["MemoryRateLimit"] = self.memoryRateLimit!
        }
        if self.memorySampleDuration != nil {
            map["MemorySampleDuration"] = self.memorySampleDuration!
        }
        if self.memorySingleRateLimit != nil {
            map["MemorySingleRateLimit"] = self.memorySingleRateLimit!
        }
        if self.mobileRestart != nil {
            map["MobileRestart"] = self.mobileRestart!
        }
        if self.mobileShutdown != nil {
            map["MobileShutdown"] = self.mobileShutdown!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.netRedirect != nil {
            map["NetRedirect"] = self.netRedirect!
        }
        if self.netRedirectRule != nil {
            var tmp : [Any] = []
            for k in self.netRedirectRule! {
                tmp.append(k.toMap())
            }
            map["NetRedirectRule"] = tmp
        }
        if self.noOperationDisconnect != nil {
            map["NoOperationDisconnect"] = self.noOperationDisconnect!
        }
        if self.noOperationDisconnectTime != nil {
            map["NoOperationDisconnectTime"] = self.noOperationDisconnectTime!
        }
        if self.printerRedirect != nil {
            map["PrinterRedirect"] = self.printerRedirect!
        }
        if self.qualityEnhancement != nil {
            map["QualityEnhancement"] = self.qualityEnhancement!
        }
        if self.recordEventDuration != nil {
            map["RecordEventDuration"] = self.recordEventDuration!
        }
        if self.recordEventFilePaths != nil {
            map["RecordEventFilePaths"] = self.recordEventFilePaths!
        }
        if self.recordEventRegisters != nil {
            map["RecordEventRegisters"] = self.recordEventRegisters!
        }
        if self.recordEvents != nil {
            map["RecordEvents"] = self.recordEvents!
        }
        if self.recording != nil {
            map["Recording"] = self.recording!
        }
        if self.recordingAudio != nil {
            map["RecordingAudio"] = self.recordingAudio!
        }
        if self.recordingDuration != nil {
            map["RecordingDuration"] = self.recordingDuration!
        }
        if self.recordingEndTime != nil {
            map["RecordingEndTime"] = self.recordingEndTime!
        }
        if self.recordingExpires != nil {
            map["RecordingExpires"] = self.recordingExpires!
        }
        if self.recordingFps != nil {
            map["RecordingFps"] = self.recordingFps!
        }
        if self.recordingStartTime != nil {
            map["RecordingStartTime"] = self.recordingStartTime!
        }
        if self.recordingUserNotify != nil {
            map["RecordingUserNotify"] = self.recordingUserNotify!
        }
        if self.recordingUserNotifyMessage != nil {
            map["RecordingUserNotifyMessage"] = self.recordingUserNotifyMessage!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remoteCoordinate != nil {
            map["RemoteCoordinate"] = self.remoteCoordinate!
        }
        if self.resetDesktop != nil {
            map["ResetDesktop"] = self.resetDesktop!
        }
        if self.resolutionHeight != nil {
            map["ResolutionHeight"] = self.resolutionHeight!
        }
        if self.resolutionModel != nil {
            map["ResolutionModel"] = self.resolutionModel!
        }
        if self.resolutionWidth != nil {
            map["ResolutionWidth"] = self.resolutionWidth!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.safeMenu != nil {
            map["SafeMenu"] = self.safeMenu!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeValue != nil {
            map["ScopeValue"] = self.scopeValue!
        }
        if self.screenDisplayMode != nil {
            map["ScreenDisplayMode"] = self.screenDisplayMode!
        }
        if self.sessionMaxRateKbps != nil {
            map["SessionMaxRateKbps"] = self.sessionMaxRateKbps!
        }
        if self.smoothEnhancement != nil {
            map["SmoothEnhancement"] = self.smoothEnhancement!
        }
        if self.statusMonitor != nil {
            map["StatusMonitor"] = self.statusMonitor!
        }
        if self.streamingMode != nil {
            map["StreamingMode"] = self.streamingMode!
        }
        if self.targetFps != nil {
            map["TargetFps"] = self.targetFps!
        }
        if self.taskbar != nil {
            map["Taskbar"] = self.taskbar!
        }
        if self.usbRedirect != nil {
            map["UsbRedirect"] = self.usbRedirect!
        }
        if self.usbSupplyRedirectRule != nil {
            var tmp : [Any] = []
            for k in self.usbSupplyRedirectRule! {
                tmp.append(k.toMap())
            }
            map["UsbSupplyRedirectRule"] = tmp
        }
        if self.useTime != nil {
            map["UseTime"] = self.useTime!
        }
        if self.videoEncAvgKbps != nil {
            map["VideoEncAvgKbps"] = self.videoEncAvgKbps!
        }
        if self.videoEncMaxQP != nil {
            map["VideoEncMaxQP"] = self.videoEncMaxQP!
        }
        if self.videoEncMinQP != nil {
            map["VideoEncMinQP"] = self.videoEncMinQP!
        }
        if self.videoEncPeakKbps != nil {
            map["VideoEncPeakKbps"] = self.videoEncPeakKbps!
        }
        if self.videoEncPolicy != nil {
            map["VideoEncPolicy"] = self.videoEncPolicy!
        }
        if self.videoRedirect != nil {
            map["VideoRedirect"] = self.videoRedirect!
        }
        if self.visualQuality != nil {
            map["VisualQuality"] = self.visualQuality!
        }
        if self.watermark != nil {
            map["Watermark"] = self.watermark!
        }
        if self.watermarkAntiCam != nil {
            map["WatermarkAntiCam"] = self.watermarkAntiCam!
        }
        if self.watermarkColor != nil {
            map["WatermarkColor"] = self.watermarkColor!
        }
        if self.watermarkColumnAmount != nil {
            map["WatermarkColumnAmount"] = self.watermarkColumnAmount!
        }
        if self.watermarkCustomText != nil {
            map["WatermarkCustomText"] = self.watermarkCustomText!
        }
        if self.watermarkDegree != nil {
            map["WatermarkDegree"] = self.watermarkDegree!
        }
        if self.watermarkFontSize != nil {
            map["WatermarkFontSize"] = self.watermarkFontSize!
        }
        if self.watermarkFontStyle != nil {
            map["WatermarkFontStyle"] = self.watermarkFontStyle!
        }
        if self.watermarkPower != nil {
            map["WatermarkPower"] = self.watermarkPower!
        }
        if self.watermarkRowAmount != nil {
            map["WatermarkRowAmount"] = self.watermarkRowAmount!
        }
        if self.watermarkSecurity != nil {
            map["WatermarkSecurity"] = self.watermarkSecurity!
        }
        if self.watermarkTransparencyValue != nil {
            map["WatermarkTransparencyValue"] = self.watermarkTransparencyValue!
        }
        if self.watermarkType != nil {
            map["WatermarkType"] = self.watermarkType!
        }
        if self.wuyingKeeper != nil {
            map["WuyingKeeper"] = self.wuyingKeeper!
        }
        if self.wyAssistant != nil {
            map["WyAssistant"] = self.wyAssistant!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdminAccess"] as? String {
            self.adminAccess = value
        }
        if let value = dict["AppContentProtection"] as? String {
            self.appContentProtection = value
        }
        if let value = dict["AuthorizeAccessPolicyRule"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.AuthorizeAccessPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.AuthorizeAccessPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeAccessPolicyRule = tmp
        }
        if let value = dict["AuthorizeSecurityPolicyRule"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.AuthorizeSecurityPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.AuthorizeSecurityPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeSecurityPolicyRule = tmp
        }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["CameraRedirect"] as? String {
            self.cameraRedirect = value
        }
        if let value = dict["ClientControlMenu"] as? String {
            self.clientControlMenu = value
        }
        if let value = dict["ClientType"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.ClientType] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.ClientType()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.clientType = tmp
        }
        if let value = dict["Clipboard"] as? String {
            self.clipboard = value
        }
        if let value = dict["ColorEnhancement"] as? String {
            self.colorEnhancement = value
        }
        if let value = dict["CpdDriveClipboard"] as? String {
            self.cpdDriveClipboard = value
        }
        if let value = dict["CpuDownGradeDuration"] as? Int32 {
            self.cpuDownGradeDuration = value
        }
        if let value = dict["CpuProcessors"] as? [String] {
            self.cpuProcessors = value
        }
        if let value = dict["CpuProtectedMode"] as? String {
            self.cpuProtectedMode = value
        }
        if let value = dict["CpuRateLimit"] as? Int32 {
            self.cpuRateLimit = value
        }
        if let value = dict["CpuSampleDuration"] as? Int32 {
            self.cpuSampleDuration = value
        }
        if let value = dict["CpuSingleRateLimit"] as? Int32 {
            self.cpuSingleRateLimit = value
        }
        if let value = dict["DeviceConnectHint"] as? String {
            self.deviceConnectHint = value
        }
        if let value = dict["DeviceRedirects"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.DeviceRedirects] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.DeviceRedirects()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRedirects = tmp
        }
        if let value = dict["DeviceRules"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.DeviceRules] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.DeviceRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRules = tmp
        }
        if let value = dict["DisconnectKeepSession"] as? String {
            self.disconnectKeepSession = value
        }
        if let value = dict["DisconnectKeepSessionTime"] as? Int32 {
            self.disconnectKeepSessionTime = value
        }
        if let value = dict["DisplayMode"] as? String {
            self.displayMode = value
        }
        if let value = dict["DomainResolveRule"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.DomainResolveRule] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.DomainResolveRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.domainResolveRule = tmp
        }
        if let value = dict["DomainResolveRuleType"] as? String {
            self.domainResolveRuleType = value
        }
        if let value = dict["EnableSessionRateLimiting"] as? String {
            self.enableSessionRateLimiting = value
        }
        if let value = dict["EndUserApplyAdminCoordinate"] as? String {
            self.endUserApplyAdminCoordinate = value
        }
        if let value = dict["EndUserGroupCoordinate"] as? String {
            self.endUserGroupCoordinate = value
        }
        if let value = dict["FileMigrate"] as? String {
            self.fileMigrate = value
        }
        if let value = dict["FileTransferAddress"] as? String {
            self.fileTransferAddress = value
        }
        if let value = dict["FileTransferSpeed"] as? String {
            self.fileTransferSpeed = value
        }
        if let value = dict["FileTransferSpeedLocation"] as? String {
            self.fileTransferSpeedLocation = value
        }
        if let value = dict["GpuAcceleration"] as? String {
            self.gpuAcceleration = value
        }
        if let value = dict["Html5FileTransfer"] as? String {
            self.html5FileTransfer = value
        }
        if let value = dict["InternetCommunicationProtocol"] as? String {
            self.internetCommunicationProtocol = value
        }
        if let value = dict["InternetPrinter"] as? String {
            self.internetPrinter = value
        }
        if let value = dict["LocalDrive"] as? String {
            self.localDrive = value
        }
        if let value = dict["MaxReconnectTime"] as? Int32 {
            self.maxReconnectTime = value
        }
        if let value = dict["MemoryDownGradeDuration"] as? Int32 {
            self.memoryDownGradeDuration = value
        }
        if let value = dict["MemoryProcessors"] as? [String] {
            self.memoryProcessors = value
        }
        if let value = dict["MemoryProtectedMode"] as? String {
            self.memoryProtectedMode = value
        }
        if let value = dict["MemoryRateLimit"] as? Int32 {
            self.memoryRateLimit = value
        }
        if let value = dict["MemorySampleDuration"] as? Int32 {
            self.memorySampleDuration = value
        }
        if let value = dict["MemorySingleRateLimit"] as? Int32 {
            self.memorySingleRateLimit = value
        }
        if let value = dict["MobileRestart"] as? String {
            self.mobileRestart = value
        }
        if let value = dict["MobileShutdown"] as? String {
            self.mobileShutdown = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NetRedirect"] as? String {
            self.netRedirect = value
        }
        if let value = dict["NetRedirectRule"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.NetRedirectRule] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.NetRedirectRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.netRedirectRule = tmp
        }
        if let value = dict["NoOperationDisconnect"] as? String {
            self.noOperationDisconnect = value
        }
        if let value = dict["NoOperationDisconnectTime"] as? Int32 {
            self.noOperationDisconnectTime = value
        }
        if let value = dict["PrinterRedirect"] as? String {
            self.printerRedirect = value
        }
        if let value = dict["QualityEnhancement"] as? String {
            self.qualityEnhancement = value
        }
        if let value = dict["RecordEventDuration"] as? Int32 {
            self.recordEventDuration = value
        }
        if let value = dict["RecordEventFilePaths"] as? [String] {
            self.recordEventFilePaths = value
        }
        if let value = dict["RecordEventRegisters"] as? [String] {
            self.recordEventRegisters = value
        }
        if let value = dict["RecordEvents"] as? [String] {
            self.recordEvents = value
        }
        if let value = dict["Recording"] as? String {
            self.recording = value
        }
        if let value = dict["RecordingAudio"] as? String {
            self.recordingAudio = value
        }
        if let value = dict["RecordingDuration"] as? Int32 {
            self.recordingDuration = value
        }
        if let value = dict["RecordingEndTime"] as? String {
            self.recordingEndTime = value
        }
        if let value = dict["RecordingExpires"] as? Int32 {
            self.recordingExpires = value
        }
        if let value = dict["RecordingFps"] as? String {
            self.recordingFps = value
        }
        if let value = dict["RecordingStartTime"] as? String {
            self.recordingStartTime = value
        }
        if let value = dict["RecordingUserNotify"] as? String {
            self.recordingUserNotify = value
        }
        if let value = dict["RecordingUserNotifyMessage"] as? String {
            self.recordingUserNotifyMessage = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RemoteCoordinate"] as? String {
            self.remoteCoordinate = value
        }
        if let value = dict["ResetDesktop"] as? String {
            self.resetDesktop = value
        }
        if let value = dict["ResolutionHeight"] as? Int32 {
            self.resolutionHeight = value
        }
        if let value = dict["ResolutionModel"] as? String {
            self.resolutionModel = value
        }
        if let value = dict["ResolutionWidth"] as? Int32 {
            self.resolutionWidth = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["SafeMenu"] as? String {
            self.safeMenu = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeValue"] as? [String] {
            self.scopeValue = value
        }
        if let value = dict["ScreenDisplayMode"] as? String {
            self.screenDisplayMode = value
        }
        if let value = dict["SessionMaxRateKbps"] as? Int32 {
            self.sessionMaxRateKbps = value
        }
        if let value = dict["SmoothEnhancement"] as? String {
            self.smoothEnhancement = value
        }
        if let value = dict["StatusMonitor"] as? String {
            self.statusMonitor = value
        }
        if let value = dict["StreamingMode"] as? String {
            self.streamingMode = value
        }
        if let value = dict["TargetFps"] as? Int32 {
            self.targetFps = value
        }
        if let value = dict["Taskbar"] as? String {
            self.taskbar = value
        }
        if let value = dict["UsbRedirect"] as? String {
            self.usbRedirect = value
        }
        if let value = dict["UsbSupplyRedirectRule"] as? [Any?] {
            var tmp : [CreateCenterPolicyRequest.UsbSupplyRedirectRule] = []
            for v in value {
                if v != nil {
                    var model = CreateCenterPolicyRequest.UsbSupplyRedirectRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.usbSupplyRedirectRule = tmp
        }
        if let value = dict["UseTime"] as? String {
            self.useTime = value
        }
        if let value = dict["VideoEncAvgKbps"] as? Int32 {
            self.videoEncAvgKbps = value
        }
        if let value = dict["VideoEncMaxQP"] as? Int32 {
            self.videoEncMaxQP = value
        }
        if let value = dict["VideoEncMinQP"] as? Int32 {
            self.videoEncMinQP = value
        }
        if let value = dict["VideoEncPeakKbps"] as? Int32 {
            self.videoEncPeakKbps = value
        }
        if let value = dict["VideoEncPolicy"] as? String {
            self.videoEncPolicy = value
        }
        if let value = dict["VideoRedirect"] as? String {
            self.videoRedirect = value
        }
        if let value = dict["VisualQuality"] as? String {
            self.visualQuality = value
        }
        if let value = dict["Watermark"] as? String {
            self.watermark = value
        }
        if let value = dict["WatermarkAntiCam"] as? String {
            self.watermarkAntiCam = value
        }
        if let value = dict["WatermarkColor"] as? Int32 {
            self.watermarkColor = value
        }
        if let value = dict["WatermarkColumnAmount"] as? Int32 {
            self.watermarkColumnAmount = value
        }
        if let value = dict["WatermarkCustomText"] as? String {
            self.watermarkCustomText = value
        }
        if let value = dict["WatermarkDegree"] as? Double {
            self.watermarkDegree = value
        }
        if let value = dict["WatermarkFontSize"] as? Int32 {
            self.watermarkFontSize = value
        }
        if let value = dict["WatermarkFontStyle"] as? String {
            self.watermarkFontStyle = value
        }
        if let value = dict["WatermarkPower"] as? String {
            self.watermarkPower = value
        }
        if let value = dict["WatermarkRowAmount"] as? Int32 {
            self.watermarkRowAmount = value
        }
        if let value = dict["WatermarkSecurity"] as? String {
            self.watermarkSecurity = value
        }
        if let value = dict["WatermarkTransparencyValue"] as? Int32 {
            self.watermarkTransparencyValue = value
        }
        if let value = dict["WatermarkType"] as? String {
            self.watermarkType = value
        }
        if let value = dict["WuyingKeeper"] as? String {
            self.wuyingKeeper = value
        }
        if let value = dict["WyAssistant"] as? String {
            self.wyAssistant = value
        }
    }
}

public class CreateCenterPolicyResponseBody : Tea.TeaModel {
    public var policyGroupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCenterPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCenterPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCenterPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCloudDriveGroupRequest : Tea.TeaModel {
    public var adminUserIds: [String]?

    public var cdsId: String?

    public var groupId: String?

    public var regionId: String?

    public var totalSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminUserIds != nil {
            map["AdminUserIds"] = self.adminUserIds!
        }
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.totalSize != nil {
            map["TotalSize"] = self.totalSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdminUserIds"] as? [String] {
            self.adminUserIds = value
        }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TotalSize"] as? Int64 {
            self.totalSize = value
        }
    }
}

public class CreateCloudDriveGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateCloudDriveGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCloudDriveGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCloudDriveGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCloudDriveServiceRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var bizType: Int32?

    public var cdsChargeType: String?

    public var cenId: String?

    public var domainName: String?

    public var endUserId: [String]?

    public var maxSize: Int64?

    public var name: String?

    public var officeSiteId: String?

    public var officeSiteType: String?

    public var period: Int64?

    public var periodUnit: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var solutionId: String?

    public var userCount: Int64?

    public var userMaxSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.cdsChargeType != nil {
            map["CdsChargeType"] = self.cdsChargeType!
        }
        if self.cenId != nil {
            map["CenId"] = self.cenId!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.maxSize != nil {
            map["MaxSize"] = self.maxSize!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteType != nil {
            map["OfficeSiteType"] = self.officeSiteType!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.solutionId != nil {
            map["SolutionId"] = self.solutionId!
        }
        if self.userCount != nil {
            map["UserCount"] = self.userCount!
        }
        if self.userMaxSize != nil {
            map["UserMaxSize"] = self.userMaxSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["BizType"] as? Int32 {
            self.bizType = value
        }
        if let value = dict["CdsChargeType"] as? String {
            self.cdsChargeType = value
        }
        if let value = dict["CenId"] as? String {
            self.cenId = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["MaxSize"] as? Int64 {
            self.maxSize = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteType"] as? String {
            self.officeSiteType = value
        }
        if let value = dict["Period"] as? Int64 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["SolutionId"] as? String {
            self.solutionId = value
        }
        if let value = dict["UserCount"] as? Int64 {
            self.userCount = value
        }
        if let value = dict["UserMaxSize"] as? Int64 {
            self.userMaxSize = value
        }
    }
}

public class CreateCloudDriveServiceResponseBody : Tea.TeaModel {
    public class ConflictCdsAndOrder : Tea.TeaModel {
        public class ConflictCds : Tea.TeaModel {
            public var cdsId: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cdsId != nil {
                    map["CdsId"] = self.cdsId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CdsId"] as? String {
                    self.cdsId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public class ConflictOrder : Tea.TeaModel {
            public var cdsId: String?

            public var orderId: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cdsId != nil {
                    map["CdsId"] = self.cdsId!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CdsId"] as? String {
                    self.cdsId = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var conflictCds: [CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder.ConflictCds]?

        public var conflictOrder: [CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder.ConflictOrder]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conflictCds != nil {
                var tmp : [Any] = []
                for k in self.conflictCds! {
                    tmp.append(k.toMap())
                }
                map["ConflictCds"] = tmp
            }
            if self.conflictOrder != nil {
                var tmp : [Any] = []
                for k in self.conflictOrder! {
                    tmp.append(k.toMap())
                }
                map["ConflictOrder"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConflictCds"] as? [Any?] {
                var tmp : [CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder.ConflictCds] = []
                for v in value {
                    if v != nil {
                        var model = CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder.ConflictCds()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conflictCds = tmp
            }
            if let value = dict["ConflictOrder"] as? [Any?] {
                var tmp : [CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder.ConflictOrder] = []
                for v in value {
                    if v != nil {
                        var model = CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder.ConflictOrder()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conflictOrder = tmp
            }
        }
    }
    public var cdsId: String?

    public var cdsName: String?

    public var cenId: String?

    public var conflictCdsAndOrder: CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder?

    public var domainName: String?

    public var errorCode: String?

    public var maxSize: String?

    public var officeSiteType: String?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.conflictCdsAndOrder?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.cdsName != nil {
            map["CdsName"] = self.cdsName!
        }
        if self.cenId != nil {
            map["CenId"] = self.cenId!
        }
        if self.conflictCdsAndOrder != nil {
            map["ConflictCdsAndOrder"] = self.conflictCdsAndOrder?.toMap()
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.errorCode != nil {
            map["ErrorCode"] = self.errorCode!
        }
        if self.maxSize != nil {
            map["MaxSize"] = self.maxSize!
        }
        if self.officeSiteType != nil {
            map["OfficeSiteType"] = self.officeSiteType!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["CdsName"] as? String {
            self.cdsName = value
        }
        if let value = dict["CenId"] as? String {
            self.cenId = value
        }
        if let value = dict["ConflictCdsAndOrder"] as? [String: Any?] {
            var model = CreateCloudDriveServiceResponseBody.ConflictCdsAndOrder()
            model.fromMap(value)
            self.conflictCdsAndOrder = model
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["ErrorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["MaxSize"] as? String {
            self.maxSize = value
        }
        if let value = dict["OfficeSiteType"] as? String {
            self.officeSiteType = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCloudDriveServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCloudDriveServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCloudDriveServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCloudDriveUsersRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: [String]?

    public var regionId: String?

    public var userMaxSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userMaxSize != nil {
            map["UserMaxSize"] = self.userMaxSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserMaxSize"] as? Int64 {
            self.userMaxSize = value
        }
    }
}

public class CreateCloudDriveUsersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCloudDriveUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCloudDriveUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCloudDriveUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateConfigGroupRequest : Tea.TeaModel {
    public class ConfigTimers : Tea.TeaModel {
        public class SegmentTimers : Tea.TeaModel {
            public var endCronExpression: String?

            public var enforce: Bool?

            public var interval: Int32?

            public var notificationTime: Int32?

            public var operationType: String?

            public var processWhitelist: [String]?

            public var resetType: String?

            public var startCronExpression: String?

            public var timerOrder: Int32?

            public var timezone: String?

            public var triggerType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endCronExpression != nil {
                    map["EndCronExpression"] = self.endCronExpression!
                }
                if self.enforce != nil {
                    map["Enforce"] = self.enforce!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.notificationTime != nil {
                    map["NotificationTime"] = self.notificationTime!
                }
                if self.operationType != nil {
                    map["OperationType"] = self.operationType!
                }
                if self.processWhitelist != nil {
                    map["ProcessWhitelist"] = self.processWhitelist!
                }
                if self.resetType != nil {
                    map["ResetType"] = self.resetType!
                }
                if self.startCronExpression != nil {
                    map["StartCronExpression"] = self.startCronExpression!
                }
                if self.timerOrder != nil {
                    map["TimerOrder"] = self.timerOrder!
                }
                if self.timezone != nil {
                    map["Timezone"] = self.timezone!
                }
                if self.triggerType != nil {
                    map["TriggerType"] = self.triggerType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndCronExpression"] as? String {
                    self.endCronExpression = value
                }
                if let value = dict["Enforce"] as? Bool {
                    self.enforce = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["NotificationTime"] as? Int32 {
                    self.notificationTime = value
                }
                if let value = dict["OperationType"] as? String {
                    self.operationType = value
                }
                if let value = dict["ProcessWhitelist"] as? [String] {
                    self.processWhitelist = value
                }
                if let value = dict["ResetType"] as? String {
                    self.resetType = value
                }
                if let value = dict["StartCronExpression"] as? String {
                    self.startCronExpression = value
                }
                if let value = dict["TimerOrder"] as? Int32 {
                    self.timerOrder = value
                }
                if let value = dict["Timezone"] as? String {
                    self.timezone = value
                }
                if let value = dict["TriggerType"] as? String {
                    self.triggerType = value
                }
            }
        }
        public var allowClientSetting: Bool?

        public var cronExpression: String?

        public var enforce: Bool?

        public var interval: Int32?

        public var notificationTime: Int32?

        public var operationType: String?

        public var processWhitelist: [String]?

        public var resetType: String?

        public var segmentTimers: [CreateConfigGroupRequest.ConfigTimers.SegmentTimers]?

        public var timerType: String?

        public var triggerType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowClientSetting != nil {
                map["AllowClientSetting"] = self.allowClientSetting!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.enforce != nil {
                map["Enforce"] = self.enforce!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.notificationTime != nil {
                map["NotificationTime"] = self.notificationTime!
            }
            if self.operationType != nil {
                map["OperationType"] = self.operationType!
            }
            if self.processWhitelist != nil {
                map["ProcessWhitelist"] = self.processWhitelist!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.segmentTimers != nil {
                var tmp : [Any] = []
                for k in self.segmentTimers! {
                    tmp.append(k.toMap())
                }
                map["SegmentTimers"] = tmp
            }
            if self.timerType != nil {
                map["TimerType"] = self.timerType!
            }
            if self.triggerType != nil {
                map["TriggerType"] = self.triggerType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowClientSetting"] as? Bool {
                self.allowClientSetting = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["Enforce"] as? Bool {
                self.enforce = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["NotificationTime"] as? Int32 {
                self.notificationTime = value
            }
            if let value = dict["OperationType"] as? String {
                self.operationType = value
            }
            if let value = dict["ProcessWhitelist"] as? [String] {
                self.processWhitelist = value
            }
            if let value = dict["ResetType"] as? String {
                self.resetType = value
            }
            if let value = dict["SegmentTimers"] as? [Any?] {
                var tmp : [CreateConfigGroupRequest.ConfigTimers.SegmentTimers] = []
                for v in value {
                    if v != nil {
                        var model = CreateConfigGroupRequest.ConfigTimers.SegmentTimers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.segmentTimers = tmp
            }
            if let value = dict["TimerType"] as? String {
                self.timerType = value
            }
            if let value = dict["TriggerType"] as? String {
                self.triggerType = value
            }
        }
    }
    public var configTimers: [CreateConfigGroupRequest.ConfigTimers]?

    public var description_: String?

    public var name: String?

    public var productType: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configTimers != nil {
            var tmp : [Any] = []
            for k in self.configTimers! {
                tmp.append(k.toMap())
            }
            map["ConfigTimers"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigTimers"] as? [Any?] {
            var tmp : [CreateConfigGroupRequest.ConfigTimers] = []
            for v in value {
                if v != nil {
                    var model = CreateConfigGroupRequest.ConfigTimers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configTimers = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateConfigGroupResponseBody : Tea.TeaModel {
    public var groupId: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateConfigGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateConfigGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateConfigGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDesktopGroupRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var allClassifyUsers: Bool?

    public var allowAutoSetup: Int32?

    public var allowBufferCount: Int32?

    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var bindAmount: Int64?

    public var bundleId: String?

    public var buyDesktopsCount: Int32?

    public var chargeType: String?

    public var classify: String?

    public var clientToken: String?

    public var comments: String?

    public var connectDuration: Int64?

    public var dataDiskCategory: String?

    public var dataDiskPerLevel: String?

    public var dataDiskSize: Int32?

    public var defaultInitDesktopCount: Int32?

    public var defaultLanguage: String?

    public var deleteDuration: Int64?

    public var desktopGroupName: String?

    public var desktopType: String?

    public var directoryId: String?

    public var endUserIds: [String]?

    public var exclusiveType: String?

    public var fileSystemId: String?

    public var groupAmount: Int32?

    public var groupVersion: Int32?

    public var hostname: String?

    public var idleDisconnectDuration: Int64?

    public var imageId: String?

    public var keepDuration: Int64?

    public var loadPolicy: Int64?

    public var maxDesktopsCount: Int32?

    public var minDesktopsCount: Int32?

    public var multiResource: Bool?

    public var officeSiteId: String?

    public var ownType: Int32?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var profileFollowSwitch: Bool?

    public var promotionId: String?

    public var ratioThreshold: Double?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resetType: Int64?

    public var scaleStrategyId: String?

    public var sessionType: String?

    public var simpleUserGroupId: String?

    public var snapshotPolicyId: String?

    public var stopDuration: Int64?

    public var systemDiskCategory: String?

    public var systemDiskPerLevel: String?

    public var systemDiskSize: Int32?

    public var tag: [CreateDesktopGroupRequest.Tag]?

    public var timerGroupId: String?

    public var userGroupName: String?

    public var userOuPath: String?

    public var volumeEncryptionEnabled: Bool?

    public var volumeEncryptionKey: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allClassifyUsers != nil {
            map["AllClassifyUsers"] = self.allClassifyUsers!
        }
        if self.allowAutoSetup != nil {
            map["AllowAutoSetup"] = self.allowAutoSetup!
        }
        if self.allowBufferCount != nil {
            map["AllowBufferCount"] = self.allowBufferCount!
        }
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.bindAmount != nil {
            map["BindAmount"] = self.bindAmount!
        }
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.buyDesktopsCount != nil {
            map["BuyDesktopsCount"] = self.buyDesktopsCount!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.classify != nil {
            map["Classify"] = self.classify!
        }
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.comments != nil {
            map["Comments"] = self.comments!
        }
        if self.connectDuration != nil {
            map["ConnectDuration"] = self.connectDuration!
        }
        if self.dataDiskCategory != nil {
            map["DataDiskCategory"] = self.dataDiskCategory!
        }
        if self.dataDiskPerLevel != nil {
            map["DataDiskPerLevel"] = self.dataDiskPerLevel!
        }
        if self.dataDiskSize != nil {
            map["DataDiskSize"] = self.dataDiskSize!
        }
        if self.defaultInitDesktopCount != nil {
            map["DefaultInitDesktopCount"] = self.defaultInitDesktopCount!
        }
        if self.defaultLanguage != nil {
            map["DefaultLanguage"] = self.defaultLanguage!
        }
        if self.deleteDuration != nil {
            map["DeleteDuration"] = self.deleteDuration!
        }
        if self.desktopGroupName != nil {
            map["DesktopGroupName"] = self.desktopGroupName!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserIds != nil {
            map["EndUserIds"] = self.endUserIds!
        }
        if self.exclusiveType != nil {
            map["ExclusiveType"] = self.exclusiveType!
        }
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.groupAmount != nil {
            map["GroupAmount"] = self.groupAmount!
        }
        if self.groupVersion != nil {
            map["GroupVersion"] = self.groupVersion!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.idleDisconnectDuration != nil {
            map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.keepDuration != nil {
            map["KeepDuration"] = self.keepDuration!
        }
        if self.loadPolicy != nil {
            map["LoadPolicy"] = self.loadPolicy!
        }
        if self.maxDesktopsCount != nil {
            map["MaxDesktopsCount"] = self.maxDesktopsCount!
        }
        if self.minDesktopsCount != nil {
            map["MinDesktopsCount"] = self.minDesktopsCount!
        }
        if self.multiResource != nil {
            map["MultiResource"] = self.multiResource!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.ownType != nil {
            map["OwnType"] = self.ownType!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.profileFollowSwitch != nil {
            map["ProfileFollowSwitch"] = self.profileFollowSwitch!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.ratioThreshold != nil {
            map["RatioThreshold"] = self.ratioThreshold!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resetType != nil {
            map["ResetType"] = self.resetType!
        }
        if self.scaleStrategyId != nil {
            map["ScaleStrategyId"] = self.scaleStrategyId!
        }
        if self.sessionType != nil {
            map["SessionType"] = self.sessionType!
        }
        if self.simpleUserGroupId != nil {
            map["SimpleUserGroupId"] = self.simpleUserGroupId!
        }
        if self.snapshotPolicyId != nil {
            map["SnapshotPolicyId"] = self.snapshotPolicyId!
        }
        if self.stopDuration != nil {
            map["StopDuration"] = self.stopDuration!
        }
        if self.systemDiskCategory != nil {
            map["SystemDiskCategory"] = self.systemDiskCategory!
        }
        if self.systemDiskPerLevel != nil {
            map["SystemDiskPerLevel"] = self.systemDiskPerLevel!
        }
        if self.systemDiskSize != nil {
            map["SystemDiskSize"] = self.systemDiskSize!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.timerGroupId != nil {
            map["TimerGroupId"] = self.timerGroupId!
        }
        if self.userGroupName != nil {
            map["UserGroupName"] = self.userGroupName!
        }
        if self.userOuPath != nil {
            map["UserOuPath"] = self.userOuPath!
        }
        if self.volumeEncryptionEnabled != nil {
            map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
        }
        if self.volumeEncryptionKey != nil {
            map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllClassifyUsers"] as? Bool {
            self.allClassifyUsers = value
        }
        if let value = dict["AllowAutoSetup"] as? Int32 {
            self.allowAutoSetup = value
        }
        if let value = dict["AllowBufferCount"] as? Int32 {
            self.allowBufferCount = value
        }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["BindAmount"] as? Int64 {
            self.bindAmount = value
        }
        if let value = dict["BundleId"] as? String {
            self.bundleId = value
        }
        if let value = dict["BuyDesktopsCount"] as? Int32 {
            self.buyDesktopsCount = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["Classify"] as? String {
            self.classify = value
        }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["Comments"] as? String {
            self.comments = value
        }
        if let value = dict["ConnectDuration"] as? Int64 {
            self.connectDuration = value
        }
        if let value = dict["DataDiskCategory"] as? String {
            self.dataDiskCategory = value
        }
        if let value = dict["DataDiskPerLevel"] as? String {
            self.dataDiskPerLevel = value
        }
        if let value = dict["DataDiskSize"] as? Int32 {
            self.dataDiskSize = value
        }
        if let value = dict["DefaultInitDesktopCount"] as? Int32 {
            self.defaultInitDesktopCount = value
        }
        if let value = dict["DefaultLanguage"] as? String {
            self.defaultLanguage = value
        }
        if let value = dict["DeleteDuration"] as? Int64 {
            self.deleteDuration = value
        }
        if let value = dict["DesktopGroupName"] as? String {
            self.desktopGroupName = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserIds"] as? [String] {
            self.endUserIds = value
        }
        if let value = dict["ExclusiveType"] as? String {
            self.exclusiveType = value
        }
        if let value = dict["FileSystemId"] as? String {
            self.fileSystemId = value
        }
        if let value = dict["GroupAmount"] as? Int32 {
            self.groupAmount = value
        }
        if let value = dict["GroupVersion"] as? Int32 {
            self.groupVersion = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["IdleDisconnectDuration"] as? Int64 {
            self.idleDisconnectDuration = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["KeepDuration"] as? Int64 {
            self.keepDuration = value
        }
        if let value = dict["LoadPolicy"] as? Int64 {
            self.loadPolicy = value
        }
        if let value = dict["MaxDesktopsCount"] as? Int32 {
            self.maxDesktopsCount = value
        }
        if let value = dict["MinDesktopsCount"] as? Int32 {
            self.minDesktopsCount = value
        }
        if let value = dict["MultiResource"] as? Bool {
            self.multiResource = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OwnType"] as? Int32 {
            self.ownType = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["ProfileFollowSwitch"] as? Bool {
            self.profileFollowSwitch = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RatioThreshold"] as? Double {
            self.ratioThreshold = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResetType"] as? Int64 {
            self.resetType = value
        }
        if let value = dict["ScaleStrategyId"] as? String {
            self.scaleStrategyId = value
        }
        if let value = dict["SessionType"] as? String {
            self.sessionType = value
        }
        if let value = dict["SimpleUserGroupId"] as? String {
            self.simpleUserGroupId = value
        }
        if let value = dict["SnapshotPolicyId"] as? String {
            self.snapshotPolicyId = value
        }
        if let value = dict["StopDuration"] as? Int64 {
            self.stopDuration = value
        }
        if let value = dict["SystemDiskCategory"] as? String {
            self.systemDiskCategory = value
        }
        if let value = dict["SystemDiskPerLevel"] as? String {
            self.systemDiskPerLevel = value
        }
        if let value = dict["SystemDiskSize"] as? Int32 {
            self.systemDiskSize = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDesktopGroupRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopGroupRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TimerGroupId"] as? String {
            self.timerGroupId = value
        }
        if let value = dict["UserGroupName"] as? String {
            self.userGroupName = value
        }
        if let value = dict["UserOuPath"] as? String {
            self.userOuPath = value
        }
        if let value = dict["VolumeEncryptionEnabled"] as? Bool {
            self.volumeEncryptionEnabled = value
        }
        if let value = dict["VolumeEncryptionKey"] as? String {
            self.volumeEncryptionKey = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CreateDesktopGroupResponseBody : Tea.TeaModel {
    public var desktopGroupId: String?

    public var desktopGroupIds: [String]?

    public var orderIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupIds != nil {
            map["DesktopGroupIds"] = self.desktopGroupIds!
        }
        if self.orderIds != nil {
            map["OrderIds"] = self.orderIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupIds"] as? [String] {
            self.desktopGroupIds = value
        }
        if let value = dict["OrderIds"] as? [String] {
            self.orderIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDesktopOversoldGroupRequest : Tea.TeaModel {
    public var concurrenceCount: Int32?

    public var dataDiskSize: Int32?

    public var description_: String?

    public var desktopType: String?

    public var directoryId: String?

    public var idleDisconnectDuration: Int64?

    public var imageId: String?

    public var keepDuration: Int32?

    public var name: String?

    public var oversoldUserCount: Int32?

    public var oversoldWarn: Int32?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var stopDuration: Int32?

    public var systemDiskSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.concurrenceCount != nil {
            map["ConcurrenceCount"] = self.concurrenceCount!
        }
        if self.dataDiskSize != nil {
            map["DataDiskSize"] = self.dataDiskSize!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.idleDisconnectDuration != nil {
            map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.keepDuration != nil {
            map["KeepDuration"] = self.keepDuration!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.oversoldUserCount != nil {
            map["OversoldUserCount"] = self.oversoldUserCount!
        }
        if self.oversoldWarn != nil {
            map["OversoldWarn"] = self.oversoldWarn!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.stopDuration != nil {
            map["StopDuration"] = self.stopDuration!
        }
        if self.systemDiskSize != nil {
            map["SystemDiskSize"] = self.systemDiskSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConcurrenceCount"] as? Int32 {
            self.concurrenceCount = value
        }
        if let value = dict["DataDiskSize"] as? Int32 {
            self.dataDiskSize = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["IdleDisconnectDuration"] as? Int64 {
            self.idleDisconnectDuration = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["KeepDuration"] as? Int32 {
            self.keepDuration = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OversoldUserCount"] as? Int32 {
            self.oversoldUserCount = value
        }
        if let value = dict["OversoldWarn"] as? Int32 {
            self.oversoldWarn = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["StopDuration"] as? Int32 {
            self.stopDuration = value
        }
        if let value = dict["SystemDiskSize"] as? Int32 {
            self.systemDiskSize = value
        }
    }
}

public class CreateDesktopOversoldGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var orderId: Int64?

        public var oversoldGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
        }
    }
    public var data: CreateDesktopOversoldGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateDesktopOversoldGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDesktopOversoldGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDesktopOversoldGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDesktopOversoldGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDesktopsRequest : Tea.TeaModel {
    public class BundleModels : Tea.TeaModel {
        public var amount: Int32?

        public var bundleId: String?

        public var desktopName: String?

        public var endUserIds: [String]?

        public var hostname: String?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.amount != nil {
                map["Amount"] = self.amount!
            }
            if self.bundleId != nil {
                map["BundleId"] = self.bundleId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.endUserIds != nil {
                map["EndUserIds"] = self.endUserIds!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Amount"] as? Int32 {
                self.amount = value
            }
            if let value = dict["BundleId"] as? String {
                self.bundleId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["EndUserIds"] as? [String] {
                self.endUserIds = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public class DesktopAttachment : Tea.TeaModel {
        public var dataDiskCategory: String?

        public var dataDiskPerLevel: String?

        public var dataDiskSize: Int32?

        public var defaultLanguage: String?

        public var desktopType: String?

        public var imageId: String?

        public var systemDiskCategory: String?

        public var systemDiskPerLevel: String?

        public var systemDiskSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataDiskCategory != nil {
                map["DataDiskCategory"] = self.dataDiskCategory!
            }
            if self.dataDiskPerLevel != nil {
                map["DataDiskPerLevel"] = self.dataDiskPerLevel!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.defaultLanguage != nil {
                map["DefaultLanguage"] = self.defaultLanguage!
            }
            if self.desktopType != nil {
                map["DesktopType"] = self.desktopType!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.systemDiskCategory != nil {
                map["SystemDiskCategory"] = self.systemDiskCategory!
            }
            if self.systemDiskPerLevel != nil {
                map["SystemDiskPerLevel"] = self.systemDiskPerLevel!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataDiskCategory"] as? String {
                self.dataDiskCategory = value
            }
            if let value = dict["DataDiskPerLevel"] as? String {
                self.dataDiskPerLevel = value
            }
            if let value = dict["DataDiskSize"] as? Int32 {
                self.dataDiskSize = value
            }
            if let value = dict["DefaultLanguage"] as? String {
                self.defaultLanguage = value
            }
            if let value = dict["DesktopType"] as? String {
                self.desktopType = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["SystemDiskCategory"] as? String {
                self.systemDiskCategory = value
            }
            if let value = dict["SystemDiskPerLevel"] as? String {
                self.systemDiskPerLevel = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
        }
    }
    public class DesktopTimers : Tea.TeaModel {
        public var allowClientSetting: Bool?

        public var cronExpression: String?

        public var enforce: Bool?

        public var interval: Int32?

        public var operationType: String?

        public var resetType: String?

        public var timerType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowClientSetting != nil {
                map["AllowClientSetting"] = self.allowClientSetting!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.enforce != nil {
                map["Enforce"] = self.enforce!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.operationType != nil {
                map["OperationType"] = self.operationType!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.timerType != nil {
                map["TimerType"] = self.timerType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowClientSetting"] as? Bool {
                self.allowClientSetting = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["Enforce"] as? Bool {
                self.enforce = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["OperationType"] as? String {
                self.operationType = value
            }
            if let value = dict["ResetType"] as? String {
                self.resetType = value
            }
            if let value = dict["TimerType"] as? String {
                self.timerType = value
            }
        }
    }
    public class MonthDesktopSetting : Tea.TeaModel {
        public var buyerId: Int64?

        public var desktopId: String?

        public var useDuration: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.buyerId != nil {
                map["BuyerId"] = self.buyerId!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.useDuration != nil {
                map["UseDuration"] = self.useDuration!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BuyerId"] as? Int64 {
                self.buyerId = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["UseDuration"] as? Int32 {
                self.useDuration = value
            }
        }
    }
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class UserCommands : Tea.TeaModel {
        public var content: String?

        public var contentEncoding: String?

        public var contentType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentEncoding != nil {
                map["ContentEncoding"] = self.contentEncoding!
            }
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentEncoding"] as? String {
                self.contentEncoding = value
            }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
        }
    }
    public var amount: Int32?

    public var appRuleId: String?

    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var bundleId: String?

    public var bundleModels: [CreateDesktopsRequest.BundleModels]?

    public var chargeType: String?

    public var desktopAttachment: CreateDesktopsRequest.DesktopAttachment?

    public var desktopMemberIp: String?

    public var desktopName: String?

    public var desktopNameSuffix: Bool?

    public var desktopTimers: [CreateDesktopsRequest.DesktopTimers]?

    public var directoryId: String?

    public var endUserId: [String]?

    public var extendInfo: String?

    public var groupId: String?

    public var hostname: String?

    public var monthDesktopSetting: CreateDesktopsRequest.MonthDesktopSetting?

    public var officeSiteId: String?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var promotionId: String?

    public var qosRuleId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceGroupId: String?

    public var savingPlanId: String?

    public var snapshotPolicyId: String?

    public var tag: [CreateDesktopsRequest.Tag]?

    public var timerGroupId: String?

    public var userAssignMode: String?

    public var userCommands: [CreateDesktopsRequest.UserCommands]?

    public var userName: String?

    public var volumeEncryptionEnabled: Bool?

    public var volumeEncryptionKey: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.desktopAttachment?.validate()
        try self.monthDesktopSetting?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.appRuleId != nil {
            map["AppRuleId"] = self.appRuleId!
        }
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.bundleModels != nil {
            var tmp : [Any] = []
            for k in self.bundleModels! {
                tmp.append(k.toMap())
            }
            map["BundleModels"] = tmp
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.desktopAttachment != nil {
            map["DesktopAttachment"] = self.desktopAttachment?.toMap()
        }
        if self.desktopMemberIp != nil {
            map["DesktopMemberIp"] = self.desktopMemberIp!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.desktopNameSuffix != nil {
            map["DesktopNameSuffix"] = self.desktopNameSuffix!
        }
        if self.desktopTimers != nil {
            var tmp : [Any] = []
            for k in self.desktopTimers! {
                tmp.append(k.toMap())
            }
            map["DesktopTimers"] = tmp
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.extendInfo != nil {
            map["ExtendInfo"] = self.extendInfo!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.monthDesktopSetting != nil {
            map["MonthDesktopSetting"] = self.monthDesktopSetting?.toMap()
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.qosRuleId != nil {
            map["QosRuleId"] = self.qosRuleId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.savingPlanId != nil {
            map["SavingPlanId"] = self.savingPlanId!
        }
        if self.snapshotPolicyId != nil {
            map["SnapshotPolicyId"] = self.snapshotPolicyId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.timerGroupId != nil {
            map["TimerGroupId"] = self.timerGroupId!
        }
        if self.userAssignMode != nil {
            map["UserAssignMode"] = self.userAssignMode!
        }
        if self.userCommands != nil {
            var tmp : [Any] = []
            for k in self.userCommands! {
                tmp.append(k.toMap())
            }
            map["UserCommands"] = tmp
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        if self.volumeEncryptionEnabled != nil {
            map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
        }
        if self.volumeEncryptionKey != nil {
            map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? Int32 {
            self.amount = value
        }
        if let value = dict["AppRuleId"] as? String {
            self.appRuleId = value
        }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["BundleId"] as? String {
            self.bundleId = value
        }
        if let value = dict["BundleModels"] as? [Any?] {
            var tmp : [CreateDesktopsRequest.BundleModels] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsRequest.BundleModels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.bundleModels = tmp
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DesktopAttachment"] as? [String: Any?] {
            var model = CreateDesktopsRequest.DesktopAttachment()
            model.fromMap(value)
            self.desktopAttachment = model
        }
        if let value = dict["DesktopMemberIp"] as? String {
            self.desktopMemberIp = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["DesktopNameSuffix"] as? Bool {
            self.desktopNameSuffix = value
        }
        if let value = dict["DesktopTimers"] as? [Any?] {
            var tmp : [CreateDesktopsRequest.DesktopTimers] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsRequest.DesktopTimers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopTimers = tmp
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["ExtendInfo"] as? String {
            self.extendInfo = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["MonthDesktopSetting"] as? [String: Any?] {
            var model = CreateDesktopsRequest.MonthDesktopSetting()
            model.fromMap(value)
            self.monthDesktopSetting = model
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["QosRuleId"] as? String {
            self.qosRuleId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SavingPlanId"] as? String {
            self.savingPlanId = value
        }
        if let value = dict["SnapshotPolicyId"] as? String {
            self.snapshotPolicyId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDesktopsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TimerGroupId"] as? String {
            self.timerGroupId = value
        }
        if let value = dict["UserAssignMode"] as? String {
            self.userAssignMode = value
        }
        if let value = dict["UserCommands"] as? [Any?] {
            var tmp : [CreateDesktopsRequest.UserCommands] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsRequest.UserCommands()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userCommands = tmp
        }
        if let value = dict["UserName"] as? String {
            self.userName = value
        }
        if let value = dict["VolumeEncryptionEnabled"] as? Bool {
            self.volumeEncryptionEnabled = value
        }
        if let value = dict["VolumeEncryptionKey"] as? String {
            self.volumeEncryptionKey = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CreateDesktopsShrinkRequest : Tea.TeaModel {
    public class BundleModels : Tea.TeaModel {
        public var amount: Int32?

        public var bundleId: String?

        public var desktopName: String?

        public var endUserIds: [String]?

        public var hostname: String?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.amount != nil {
                map["Amount"] = self.amount!
            }
            if self.bundleId != nil {
                map["BundleId"] = self.bundleId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.endUserIds != nil {
                map["EndUserIds"] = self.endUserIds!
            }
            if self.hostname != nil {
                map["Hostname"] = self.hostname!
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Amount"] as? Int32 {
                self.amount = value
            }
            if let value = dict["BundleId"] as? String {
                self.bundleId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["EndUserIds"] as? [String] {
                self.endUserIds = value
            }
            if let value = dict["Hostname"] as? String {
                self.hostname = value
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public class DesktopTimers : Tea.TeaModel {
        public var allowClientSetting: Bool?

        public var cronExpression: String?

        public var enforce: Bool?

        public var interval: Int32?

        public var operationType: String?

        public var resetType: String?

        public var timerType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowClientSetting != nil {
                map["AllowClientSetting"] = self.allowClientSetting!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.enforce != nil {
                map["Enforce"] = self.enforce!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.operationType != nil {
                map["OperationType"] = self.operationType!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.timerType != nil {
                map["TimerType"] = self.timerType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowClientSetting"] as? Bool {
                self.allowClientSetting = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["Enforce"] as? Bool {
                self.enforce = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["OperationType"] as? String {
                self.operationType = value
            }
            if let value = dict["ResetType"] as? String {
                self.resetType = value
            }
            if let value = dict["TimerType"] as? String {
                self.timerType = value
            }
        }
    }
    public class MonthDesktopSetting : Tea.TeaModel {
        public var buyerId: Int64?

        public var desktopId: String?

        public var useDuration: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.buyerId != nil {
                map["BuyerId"] = self.buyerId!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.useDuration != nil {
                map["UseDuration"] = self.useDuration!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BuyerId"] as? Int64 {
                self.buyerId = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["UseDuration"] as? Int32 {
                self.useDuration = value
            }
        }
    }
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class UserCommands : Tea.TeaModel {
        public var content: String?

        public var contentEncoding: String?

        public var contentType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentEncoding != nil {
                map["ContentEncoding"] = self.contentEncoding!
            }
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentEncoding"] as? String {
                self.contentEncoding = value
            }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
        }
    }
    public var amount: Int32?

    public var appRuleId: String?

    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var bundleId: String?

    public var bundleModels: [CreateDesktopsShrinkRequest.BundleModels]?

    public var chargeType: String?

    public var desktopAttachmentShrink: String?

    public var desktopMemberIp: String?

    public var desktopName: String?

    public var desktopNameSuffix: Bool?

    public var desktopTimers: [CreateDesktopsShrinkRequest.DesktopTimers]?

    public var directoryId: String?

    public var endUserId: [String]?

    public var extendInfo: String?

    public var groupId: String?

    public var hostname: String?

    public var monthDesktopSetting: CreateDesktopsShrinkRequest.MonthDesktopSetting?

    public var officeSiteId: String?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var promotionId: String?

    public var qosRuleId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceGroupId: String?

    public var savingPlanId: String?

    public var snapshotPolicyId: String?

    public var tag: [CreateDesktopsShrinkRequest.Tag]?

    public var timerGroupId: String?

    public var userAssignMode: String?

    public var userCommands: [CreateDesktopsShrinkRequest.UserCommands]?

    public var userName: String?

    public var volumeEncryptionEnabled: Bool?

    public var volumeEncryptionKey: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.monthDesktopSetting?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.appRuleId != nil {
            map["AppRuleId"] = self.appRuleId!
        }
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.bundleModels != nil {
            var tmp : [Any] = []
            for k in self.bundleModels! {
                tmp.append(k.toMap())
            }
            map["BundleModels"] = tmp
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.desktopAttachmentShrink != nil {
            map["DesktopAttachment"] = self.desktopAttachmentShrink!
        }
        if self.desktopMemberIp != nil {
            map["DesktopMemberIp"] = self.desktopMemberIp!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.desktopNameSuffix != nil {
            map["DesktopNameSuffix"] = self.desktopNameSuffix!
        }
        if self.desktopTimers != nil {
            var tmp : [Any] = []
            for k in self.desktopTimers! {
                tmp.append(k.toMap())
            }
            map["DesktopTimers"] = tmp
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.extendInfo != nil {
            map["ExtendInfo"] = self.extendInfo!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.hostname != nil {
            map["Hostname"] = self.hostname!
        }
        if self.monthDesktopSetting != nil {
            map["MonthDesktopSetting"] = self.monthDesktopSetting?.toMap()
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.qosRuleId != nil {
            map["QosRuleId"] = self.qosRuleId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.savingPlanId != nil {
            map["SavingPlanId"] = self.savingPlanId!
        }
        if self.snapshotPolicyId != nil {
            map["SnapshotPolicyId"] = self.snapshotPolicyId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.timerGroupId != nil {
            map["TimerGroupId"] = self.timerGroupId!
        }
        if self.userAssignMode != nil {
            map["UserAssignMode"] = self.userAssignMode!
        }
        if self.userCommands != nil {
            var tmp : [Any] = []
            for k in self.userCommands! {
                tmp.append(k.toMap())
            }
            map["UserCommands"] = tmp
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        if self.volumeEncryptionEnabled != nil {
            map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
        }
        if self.volumeEncryptionKey != nil {
            map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? Int32 {
            self.amount = value
        }
        if let value = dict["AppRuleId"] as? String {
            self.appRuleId = value
        }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["BundleId"] as? String {
            self.bundleId = value
        }
        if let value = dict["BundleModels"] as? [Any?] {
            var tmp : [CreateDesktopsShrinkRequest.BundleModels] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsShrinkRequest.BundleModels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.bundleModels = tmp
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DesktopAttachment"] as? String {
            self.desktopAttachmentShrink = value
        }
        if let value = dict["DesktopMemberIp"] as? String {
            self.desktopMemberIp = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["DesktopNameSuffix"] as? Bool {
            self.desktopNameSuffix = value
        }
        if let value = dict["DesktopTimers"] as? [Any?] {
            var tmp : [CreateDesktopsShrinkRequest.DesktopTimers] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsShrinkRequest.DesktopTimers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopTimers = tmp
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["ExtendInfo"] as? String {
            self.extendInfo = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Hostname"] as? String {
            self.hostname = value
        }
        if let value = dict["MonthDesktopSetting"] as? [String: Any?] {
            var model = CreateDesktopsShrinkRequest.MonthDesktopSetting()
            model.fromMap(value)
            self.monthDesktopSetting = model
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["QosRuleId"] as? String {
            self.qosRuleId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SavingPlanId"] as? String {
            self.savingPlanId = value
        }
        if let value = dict["SnapshotPolicyId"] as? String {
            self.snapshotPolicyId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDesktopsShrinkRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsShrinkRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TimerGroupId"] as? String {
            self.timerGroupId = value
        }
        if let value = dict["UserAssignMode"] as? String {
            self.userAssignMode = value
        }
        if let value = dict["UserCommands"] as? [Any?] {
            var tmp : [CreateDesktopsShrinkRequest.UserCommands] = []
            for v in value {
                if v != nil {
                    var model = CreateDesktopsShrinkRequest.UserCommands()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userCommands = tmp
        }
        if let value = dict["UserName"] as? String {
            self.userName = value
        }
        if let value = dict["VolumeEncryptionEnabled"] as? Bool {
            self.volumeEncryptionEnabled = value
        }
        if let value = dict["VolumeEncryptionKey"] as? String {
            self.volumeEncryptionKey = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CreateDesktopsResponseBody : Tea.TeaModel {
    public var desktopId: [String]?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDiskEncryptionServiceRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateDiskEncryptionServiceResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDiskEncryptionServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDiskEncryptionServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDiskEncryptionServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDriveRequest : Tea.TeaModel {
    public var aliUid: Int64?

    public var description_: String?

    public var domainId: String?

    public var driveName: String?

    public var externalDomainId: String?

    public var profileRoaming: Bool?

    public var regionId: String?

    public var resourceType: String?

    public var type: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.domainId != nil {
            map["DomainId"] = self.domainId!
        }
        if self.driveName != nil {
            map["DriveName"] = self.driveName!
        }
        if self.externalDomainId != nil {
            map["ExternalDomainId"] = self.externalDomainId!
        }
        if self.profileRoaming != nil {
            map["ProfileRoaming"] = self.profileRoaming!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? Int64 {
            self.aliUid = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DomainId"] as? String {
            self.domainId = value
        }
        if let value = dict["DriveName"] as? String {
            self.driveName = value
        }
        if let value = dict["ExternalDomainId"] as? String {
            self.externalDomainId = value
        }
        if let value = dict["ProfileRoaming"] as? Bool {
            self.profileRoaming = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class CreateDriveResponseBody : Tea.TeaModel {
    public class Drive : Tea.TeaModel {
        public var aliUid: String?

        public var description_: String?

        public var domainId: String?

        public var driveId: String?

        public var externalDriveId: String?

        public var externalUserId: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: String?

        public var name: String?

        public var profileRoaming: Bool?

        public var status: String?

        public var totalSize: Int64?

        public var type: String?

        public var usedSize: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domainId != nil {
                map["DomainId"] = self.domainId!
            }
            if self.driveId != nil {
                map["DriveId"] = self.driveId!
            }
            if self.externalDriveId != nil {
                map["ExternalDriveId"] = self.externalDriveId!
            }
            if self.externalUserId != nil {
                map["ExternalUserId"] = self.externalUserId!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.profileRoaming != nil {
                map["ProfileRoaming"] = self.profileRoaming!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalSize != nil {
                map["TotalSize"] = self.totalSize!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.usedSize != nil {
                map["UsedSize"] = self.usedSize!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? String {
                self.aliUid = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DomainId"] as? String {
                self.domainId = value
            }
            if let value = dict["DriveId"] as? String {
                self.driveId = value
            }
            if let value = dict["ExternalDriveId"] as? String {
                self.externalDriveId = value
            }
            if let value = dict["ExternalUserId"] as? String {
                self.externalUserId = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProfileRoaming"] as? Bool {
                self.profileRoaming = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TotalSize"] as? Int64 {
                self.totalSize = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UsedSize"] as? Int64 {
                self.usedSize = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var code: String?

    public var drive: CreateDriveResponseBody.Drive?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.drive?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.drive != nil {
            map["Drive"] = self.drive?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Drive"] as? [String: Any?] {
            var model = CreateDriveResponseBody.Drive()
            model.fromMap(value)
            self.drive = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDriveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDriveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDriveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEcdReportTaskRequest : Tea.TeaModel {
    public class FilterList : Tea.TeaModel {
        public var filterKey: String?

        public var filterValues: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.filterKey != nil {
                map["FilterKey"] = self.filterKey!
            }
            if self.filterValues != nil {
                map["FilterValues"] = self.filterValues!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FilterKey"] as? String {
                self.filterKey = value
            }
            if let value = dict["FilterValues"] as? [String] {
                self.filterValues = value
            }
        }
    }
    public var filterList: [CreateEcdReportTaskRequest.FilterList]?

    public var langType: String?

    public var reportFileName: String?

    public var subType: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filterList != nil {
            var tmp : [Any] = []
            for k in self.filterList! {
                tmp.append(k.toMap())
            }
            map["FilterList"] = tmp
        }
        if self.langType != nil {
            map["LangType"] = self.langType!
        }
        if self.reportFileName != nil {
            map["ReportFileName"] = self.reportFileName!
        }
        if self.subType != nil {
            map["SubType"] = self.subType!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FilterList"] as? [Any?] {
            var tmp : [CreateEcdReportTaskRequest.FilterList] = []
            for v in value {
                if v != nil {
                    var model = CreateEcdReportTaskRequest.FilterList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.filterList = tmp
        }
        if let value = dict["LangType"] as? String {
            self.langType = value
        }
        if let value = dict["ReportFileName"] as? String {
            self.reportFileName = value
        }
        if let value = dict["SubType"] as? String {
            self.subType = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class CreateEcdReportTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class CreateEcdReportTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEcdReportTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEcdReportTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateForwardEntryRequest : Tea.TeaModel {
    public var externalIp: String?

    public var externalPort: String?

    public var forwardEntryName: String?

    public var forwardTableId: String?

    public var internalIp: String?

    public var internalPort: String?

    public var ipProtocol: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.externalIp != nil {
            map["ExternalIp"] = self.externalIp!
        }
        if self.externalPort != nil {
            map["ExternalPort"] = self.externalPort!
        }
        if self.forwardEntryName != nil {
            map["ForwardEntryName"] = self.forwardEntryName!
        }
        if self.forwardTableId != nil {
            map["ForwardTableId"] = self.forwardTableId!
        }
        if self.internalIp != nil {
            map["InternalIp"] = self.internalIp!
        }
        if self.internalPort != nil {
            map["InternalPort"] = self.internalPort!
        }
        if self.ipProtocol != nil {
            map["IpProtocol"] = self.ipProtocol!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExternalIp"] as? String {
            self.externalIp = value
        }
        if let value = dict["ExternalPort"] as? String {
            self.externalPort = value
        }
        if let value = dict["ForwardEntryName"] as? String {
            self.forwardEntryName = value
        }
        if let value = dict["ForwardTableId"] as? String {
            self.forwardTableId = value
        }
        if let value = dict["InternalIp"] as? String {
            self.internalIp = value
        }
        if let value = dict["InternalPort"] as? String {
            self.internalPort = value
        }
        if let value = dict["IpProtocol"] as? String {
            self.ipProtocol = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class CreateForwardEntryResponseBody : Tea.TeaModel {
    public var forwardEntryId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forwardEntryId != nil {
            map["ForwardEntryId"] = self.forwardEntryId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForwardEntryId"] as? String {
            self.forwardEntryId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateForwardEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateForwardEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateForwardEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateImageRequest : Tea.TeaModel {
    public var autoCleanUserdata: Bool?

    public var dataSnapshotIds: [String]?

    public var description_: String?

    public var desktopId: String?

    public var diskType: String?

    public var imageName: String?

    public var imageResourceType: String?

    public var regionId: String?

    public var snapshotId: String?

    public var snapshotIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoCleanUserdata != nil {
            map["AutoCleanUserdata"] = self.autoCleanUserdata!
        }
        if self.dataSnapshotIds != nil {
            map["DataSnapshotIds"] = self.dataSnapshotIds!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.diskType != nil {
            map["DiskType"] = self.diskType!
        }
        if self.imageName != nil {
            map["ImageName"] = self.imageName!
        }
        if self.imageResourceType != nil {
            map["ImageResourceType"] = self.imageResourceType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snapshotId != nil {
            map["SnapshotId"] = self.snapshotId!
        }
        if self.snapshotIds != nil {
            map["SnapshotIds"] = self.snapshotIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoCleanUserdata"] as? Bool {
            self.autoCleanUserdata = value
        }
        if let value = dict["DataSnapshotIds"] as? [String] {
            self.dataSnapshotIds = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DiskType"] as? String {
            self.diskType = value
        }
        if let value = dict["ImageName"] as? String {
            self.imageName = value
        }
        if let value = dict["ImageResourceType"] as? String {
            self.imageResourceType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnapshotId"] as? String {
            self.snapshotId = value
        }
        if let value = dict["SnapshotIds"] as? [String] {
            self.snapshotIds = value
        }
    }
}

public class CreateImageResponseBody : Tea.TeaModel {
    public var imageId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateNASFileSystemRequest : Tea.TeaModel {
    public var description_: String?

    public var encryptType: String?

    public var name: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var storageType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.encryptType != nil {
            map["EncryptType"] = self.encryptType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.storageType != nil {
            map["StorageType"] = self.storageType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EncryptType"] as? String {
            self.encryptType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StorageType"] as? String {
            self.storageType = value
        }
    }
}

public class CreateNASFileSystemResponseBody : Tea.TeaModel {
    public var fileSystemId: String?

    public var fileSystemName: String?

    public var mountTargetDomain: String?

    public var officeSiteId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.fileSystemName != nil {
            map["FileSystemName"] = self.fileSystemName!
        }
        if self.mountTargetDomain != nil {
            map["MountTargetDomain"] = self.mountTargetDomain!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileSystemId"] as? String {
            self.fileSystemId = value
        }
        if let value = dict["FileSystemName"] as? String {
            self.fileSystemName = value
        }
        if let value = dict["MountTargetDomain"] as? String {
            self.mountTargetDomain = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateNASFileSystemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateNASFileSystemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateNASFileSystemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateNatGatewayRequest : Tea.TeaModel {
    public var regionId: String?

    public var vSwitchId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VSwitchId"] as? String {
            self.vSwitchId = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CreateNatGatewayResponseBody : Tea.TeaModel {
    public var forwardTableIds: [String]?

    public var natGatewayId: String?

    public var requestId: String?

    public var snatTableIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forwardTableIds != nil {
            map["ForwardTableIds"] = self.forwardTableIds!
        }
        if self.natGatewayId != nil {
            map["NatGatewayId"] = self.natGatewayId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snatTableIds != nil {
            map["SnatTableIds"] = self.snatTableIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForwardTableIds"] as? [String] {
            self.forwardTableIds = value
        }
        if let value = dict["NatGatewayId"] as? String {
            self.natGatewayId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SnatTableIds"] as? [String] {
            self.snatTableIds = value
        }
    }
}

public class CreateNatGatewayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateNatGatewayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateNatGatewayResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateNetworkPackageRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var bandwidth: Int32?

    public var internetChargeType: String?

    public var officeSiteId: String?

    public var payType: String?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.bandwidth != nil {
            map["Bandwidth"] = self.bandwidth!
        }
        if self.internetChargeType != nil {
            map["InternetChargeType"] = self.internetChargeType!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.payType != nil {
            map["PayType"] = self.payType!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["Bandwidth"] as? Int32 {
            self.bandwidth = value
        }
        if let value = dict["InternetChargeType"] as? String {
            self.internetChargeType = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["PayType"] as? String {
            self.payType = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class CreateNetworkPackageResponseBody : Tea.TeaModel {
    public var networkPackageId: String?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkPackageId"] as? String {
            self.networkPackageId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateNetworkPackageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateNetworkPackageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateNetworkPackageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePolicyGroupRequest : Tea.TeaModel {
    public class AuthorizeAccessPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
        }
    }
    public class AuthorizeSecurityPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public var ipProtocol: String?

        public var policy: String?

        public var portRange: String?

        public var priority: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.portRange != nil {
                map["PortRange"] = self.portRange!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["PortRange"] as? String {
                self.portRange = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class ClientType : Tea.TeaModel {
        public var clientType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientType"] as? String {
                self.clientType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public class DeviceRedirects : Tea.TeaModel {
        public var deviceType: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DeviceRules : Tea.TeaModel {
        public var deviceName: String?

        public var devicePid: String?

        public var deviceType: String?

        public var deviceVid: String?

        public var optCommand: String?

        public var platforms: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceName != nil {
                map["DeviceName"] = self.deviceName!
            }
            if self.devicePid != nil {
                map["DevicePid"] = self.devicePid!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVid != nil {
                map["DeviceVid"] = self.deviceVid!
            }
            if self.optCommand != nil {
                map["OptCommand"] = self.optCommand!
            }
            if self.platforms != nil {
                map["Platforms"] = self.platforms!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceName"] as? String {
                self.deviceName = value
            }
            if let value = dict["DevicePid"] as? String {
                self.devicePid = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVid"] as? String {
                self.deviceVid = value
            }
            if let value = dict["OptCommand"] as? String {
                self.optCommand = value
            }
            if let value = dict["Platforms"] as? String {
                self.platforms = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DomainResolveRule : Tea.TeaModel {
        public var description_: String?

        public var domain: String?

        public var policy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
        }
    }
    public class UsbSupplyRedirectRule : Tea.TeaModel {
        public var description_: String?

        public var deviceClass: String?

        public var deviceSubclass: String?

        public var productId: String?

        public var usbRedirectType: Int64?

        public var usbRuleType: Int64?

        public var vendorId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceClass != nil {
                map["DeviceClass"] = self.deviceClass!
            }
            if self.deviceSubclass != nil {
                map["DeviceSubclass"] = self.deviceSubclass!
            }
            if self.productId != nil {
                map["ProductId"] = self.productId!
            }
            if self.usbRedirectType != nil {
                map["UsbRedirectType"] = self.usbRedirectType!
            }
            if self.usbRuleType != nil {
                map["UsbRuleType"] = self.usbRuleType!
            }
            if self.vendorId != nil {
                map["VendorId"] = self.vendorId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceClass"] as? String {
                self.deviceClass = value
            }
            if let value = dict["DeviceSubclass"] as? String {
                self.deviceSubclass = value
            }
            if let value = dict["ProductId"] as? String {
                self.productId = value
            }
            if let value = dict["UsbRedirectType"] as? Int64 {
                self.usbRedirectType = value
            }
            if let value = dict["UsbRuleType"] as? Int64 {
                self.usbRuleType = value
            }
            if let value = dict["VendorId"] as? String {
                self.vendorId = value
            }
        }
    }
    public var adminAccess: String?

    public var appContentProtection: String?

    public var authorizeAccessPolicyRule: [CreatePolicyGroupRequest.AuthorizeAccessPolicyRule]?

    public var authorizeSecurityPolicyRule: [CreatePolicyGroupRequest.AuthorizeSecurityPolicyRule]?

    public var cameraRedirect: String?

    public var clientType: [CreatePolicyGroupRequest.ClientType]?

    public var clipboard: String?

    public var deviceRedirects: [CreatePolicyGroupRequest.DeviceRedirects]?

    public var deviceRules: [CreatePolicyGroupRequest.DeviceRules]?

    public var domainList: String?

    public var domainResolveRule: [CreatePolicyGroupRequest.DomainResolveRule]?

    public var domainResolveRuleType: String?

    public var endUserApplyAdminCoordinate: String?

    public var endUserGroupCoordinate: String?

    public var gpuAcceleration: String?

    public var html5Access: String?

    public var html5FileTransfer: String?

    public var internetCommunicationProtocol: String?

    public var localDrive: String?

    public var maxReconnectTime: Int32?

    public var name: String?

    public var netRedirect: String?

    public var preemptLogin: String?

    public var preemptLoginUser: [String]?

    public var printerRedirection: String?

    public var recordContent: String?

    public var recordContentExpires: Int64?

    public var recording: String?

    public var recordingAudio: String?

    public var recordingDuration: Int32?

    public var recordingEndTime: String?

    public var recordingExpires: Int64?

    public var recordingFps: Int64?

    public var recordingStartTime: String?

    public var recordingUserNotify: String?

    public var recordingUserNotifyMessage: String?

    public var regionId: String?

    public var remoteCoordinate: String?

    public var scope: String?

    public var scopeValue: [String]?

    public var usbRedirect: String?

    public var usbSupplyRedirectRule: [CreatePolicyGroupRequest.UsbSupplyRedirectRule]?

    public var videoRedirect: String?

    public var visualQuality: String?

    public var watermark: String?

    public var watermarkAntiCam: String?

    public var watermarkColor: Int32?

    public var watermarkDegree: Double?

    public var watermarkFontSize: Int32?

    public var watermarkFontStyle: String?

    public var watermarkPower: String?

    public var watermarkRowAmount: Int32?

    public var watermarkSecurity: String?

    public var watermarkTransparency: String?

    public var watermarkTransparencyValue: Int32?

    public var watermarkType: String?

    public var wyAssistant: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminAccess != nil {
            map["AdminAccess"] = self.adminAccess!
        }
        if self.appContentProtection != nil {
            map["AppContentProtection"] = self.appContentProtection!
        }
        if self.authorizeAccessPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeAccessPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeAccessPolicyRule"] = tmp
        }
        if self.authorizeSecurityPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeSecurityPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeSecurityPolicyRule"] = tmp
        }
        if self.cameraRedirect != nil {
            map["CameraRedirect"] = self.cameraRedirect!
        }
        if self.clientType != nil {
            var tmp : [Any] = []
            for k in self.clientType! {
                tmp.append(k.toMap())
            }
            map["ClientType"] = tmp
        }
        if self.clipboard != nil {
            map["Clipboard"] = self.clipboard!
        }
        if self.deviceRedirects != nil {
            var tmp : [Any] = []
            for k in self.deviceRedirects! {
                tmp.append(k.toMap())
            }
            map["DeviceRedirects"] = tmp
        }
        if self.deviceRules != nil {
            var tmp : [Any] = []
            for k in self.deviceRules! {
                tmp.append(k.toMap())
            }
            map["DeviceRules"] = tmp
        }
        if self.domainList != nil {
            map["DomainList"] = self.domainList!
        }
        if self.domainResolveRule != nil {
            var tmp : [Any] = []
            for k in self.domainResolveRule! {
                tmp.append(k.toMap())
            }
            map["DomainResolveRule"] = tmp
        }
        if self.domainResolveRuleType != nil {
            map["DomainResolveRuleType"] = self.domainResolveRuleType!
        }
        if self.endUserApplyAdminCoordinate != nil {
            map["EndUserApplyAdminCoordinate"] = self.endUserApplyAdminCoordinate!
        }
        if self.endUserGroupCoordinate != nil {
            map["EndUserGroupCoordinate"] = self.endUserGroupCoordinate!
        }
        if self.gpuAcceleration != nil {
            map["GpuAcceleration"] = self.gpuAcceleration!
        }
        if self.html5Access != nil {
            map["Html5Access"] = self.html5Access!
        }
        if self.html5FileTransfer != nil {
            map["Html5FileTransfer"] = self.html5FileTransfer!
        }
        if self.internetCommunicationProtocol != nil {
            map["InternetCommunicationProtocol"] = self.internetCommunicationProtocol!
        }
        if self.localDrive != nil {
            map["LocalDrive"] = self.localDrive!
        }
        if self.maxReconnectTime != nil {
            map["MaxReconnectTime"] = self.maxReconnectTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.netRedirect != nil {
            map["NetRedirect"] = self.netRedirect!
        }
        if self.preemptLogin != nil {
            map["PreemptLogin"] = self.preemptLogin!
        }
        if self.preemptLoginUser != nil {
            map["PreemptLoginUser"] = self.preemptLoginUser!
        }
        if self.printerRedirection != nil {
            map["PrinterRedirection"] = self.printerRedirection!
        }
        if self.recordContent != nil {
            map["RecordContent"] = self.recordContent!
        }
        if self.recordContentExpires != nil {
            map["RecordContentExpires"] = self.recordContentExpires!
        }
        if self.recording != nil {
            map["Recording"] = self.recording!
        }
        if self.recordingAudio != nil {
            map["RecordingAudio"] = self.recordingAudio!
        }
        if self.recordingDuration != nil {
            map["RecordingDuration"] = self.recordingDuration!
        }
        if self.recordingEndTime != nil {
            map["RecordingEndTime"] = self.recordingEndTime!
        }
        if self.recordingExpires != nil {
            map["RecordingExpires"] = self.recordingExpires!
        }
        if self.recordingFps != nil {
            map["RecordingFps"] = self.recordingFps!
        }
        if self.recordingStartTime != nil {
            map["RecordingStartTime"] = self.recordingStartTime!
        }
        if self.recordingUserNotify != nil {
            map["RecordingUserNotify"] = self.recordingUserNotify!
        }
        if self.recordingUserNotifyMessage != nil {
            map["RecordingUserNotifyMessage"] = self.recordingUserNotifyMessage!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remoteCoordinate != nil {
            map["RemoteCoordinate"] = self.remoteCoordinate!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeValue != nil {
            map["ScopeValue"] = self.scopeValue!
        }
        if self.usbRedirect != nil {
            map["UsbRedirect"] = self.usbRedirect!
        }
        if self.usbSupplyRedirectRule != nil {
            var tmp : [Any] = []
            for k in self.usbSupplyRedirectRule! {
                tmp.append(k.toMap())
            }
            map["UsbSupplyRedirectRule"] = tmp
        }
        if self.videoRedirect != nil {
            map["VideoRedirect"] = self.videoRedirect!
        }
        if self.visualQuality != nil {
            map["VisualQuality"] = self.visualQuality!
        }
        if self.watermark != nil {
            map["Watermark"] = self.watermark!
        }
        if self.watermarkAntiCam != nil {
            map["WatermarkAntiCam"] = self.watermarkAntiCam!
        }
        if self.watermarkColor != nil {
            map["WatermarkColor"] = self.watermarkColor!
        }
        if self.watermarkDegree != nil {
            map["WatermarkDegree"] = self.watermarkDegree!
        }
        if self.watermarkFontSize != nil {
            map["WatermarkFontSize"] = self.watermarkFontSize!
        }
        if self.watermarkFontStyle != nil {
            map["WatermarkFontStyle"] = self.watermarkFontStyle!
        }
        if self.watermarkPower != nil {
            map["WatermarkPower"] = self.watermarkPower!
        }
        if self.watermarkRowAmount != nil {
            map["WatermarkRowAmount"] = self.watermarkRowAmount!
        }
        if self.watermarkSecurity != nil {
            map["WatermarkSecurity"] = self.watermarkSecurity!
        }
        if self.watermarkTransparency != nil {
            map["WatermarkTransparency"] = self.watermarkTransparency!
        }
        if self.watermarkTransparencyValue != nil {
            map["WatermarkTransparencyValue"] = self.watermarkTransparencyValue!
        }
        if self.watermarkType != nil {
            map["WatermarkType"] = self.watermarkType!
        }
        if self.wyAssistant != nil {
            map["WyAssistant"] = self.wyAssistant!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdminAccess"] as? String {
            self.adminAccess = value
        }
        if let value = dict["AppContentProtection"] as? String {
            self.appContentProtection = value
        }
        if let value = dict["AuthorizeAccessPolicyRule"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.AuthorizeAccessPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.AuthorizeAccessPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeAccessPolicyRule = tmp
        }
        if let value = dict["AuthorizeSecurityPolicyRule"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.AuthorizeSecurityPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.AuthorizeSecurityPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeSecurityPolicyRule = tmp
        }
        if let value = dict["CameraRedirect"] as? String {
            self.cameraRedirect = value
        }
        if let value = dict["ClientType"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.ClientType] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.ClientType()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.clientType = tmp
        }
        if let value = dict["Clipboard"] as? String {
            self.clipboard = value
        }
        if let value = dict["DeviceRedirects"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.DeviceRedirects] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.DeviceRedirects()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRedirects = tmp
        }
        if let value = dict["DeviceRules"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.DeviceRules] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.DeviceRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRules = tmp
        }
        if let value = dict["DomainList"] as? String {
            self.domainList = value
        }
        if let value = dict["DomainResolveRule"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.DomainResolveRule] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.DomainResolveRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.domainResolveRule = tmp
        }
        if let value = dict["DomainResolveRuleType"] as? String {
            self.domainResolveRuleType = value
        }
        if let value = dict["EndUserApplyAdminCoordinate"] as? String {
            self.endUserApplyAdminCoordinate = value
        }
        if let value = dict["EndUserGroupCoordinate"] as? String {
            self.endUserGroupCoordinate = value
        }
        if let value = dict["GpuAcceleration"] as? String {
            self.gpuAcceleration = value
        }
        if let value = dict["Html5Access"] as? String {
            self.html5Access = value
        }
        if let value = dict["Html5FileTransfer"] as? String {
            self.html5FileTransfer = value
        }
        if let value = dict["InternetCommunicationProtocol"] as? String {
            self.internetCommunicationProtocol = value
        }
        if let value = dict["LocalDrive"] as? String {
            self.localDrive = value
        }
        if let value = dict["MaxReconnectTime"] as? Int32 {
            self.maxReconnectTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NetRedirect"] as? String {
            self.netRedirect = value
        }
        if let value = dict["PreemptLogin"] as? String {
            self.preemptLogin = value
        }
        if let value = dict["PreemptLoginUser"] as? [String] {
            self.preemptLoginUser = value
        }
        if let value = dict["PrinterRedirection"] as? String {
            self.printerRedirection = value
        }
        if let value = dict["RecordContent"] as? String {
            self.recordContent = value
        }
        if let value = dict["RecordContentExpires"] as? Int64 {
            self.recordContentExpires = value
        }
        if let value = dict["Recording"] as? String {
            self.recording = value
        }
        if let value = dict["RecordingAudio"] as? String {
            self.recordingAudio = value
        }
        if let value = dict["RecordingDuration"] as? Int32 {
            self.recordingDuration = value
        }
        if let value = dict["RecordingEndTime"] as? String {
            self.recordingEndTime = value
        }
        if let value = dict["RecordingExpires"] as? Int64 {
            self.recordingExpires = value
        }
        if let value = dict["RecordingFps"] as? Int64 {
            self.recordingFps = value
        }
        if let value = dict["RecordingStartTime"] as? String {
            self.recordingStartTime = value
        }
        if let value = dict["RecordingUserNotify"] as? String {
            self.recordingUserNotify = value
        }
        if let value = dict["RecordingUserNotifyMessage"] as? String {
            self.recordingUserNotifyMessage = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RemoteCoordinate"] as? String {
            self.remoteCoordinate = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeValue"] as? [String] {
            self.scopeValue = value
        }
        if let value = dict["UsbRedirect"] as? String {
            self.usbRedirect = value
        }
        if let value = dict["UsbSupplyRedirectRule"] as? [Any?] {
            var tmp : [CreatePolicyGroupRequest.UsbSupplyRedirectRule] = []
            for v in value {
                if v != nil {
                    var model = CreatePolicyGroupRequest.UsbSupplyRedirectRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.usbSupplyRedirectRule = tmp
        }
        if let value = dict["VideoRedirect"] as? String {
            self.videoRedirect = value
        }
        if let value = dict["VisualQuality"] as? String {
            self.visualQuality = value
        }
        if let value = dict["Watermark"] as? String {
            self.watermark = value
        }
        if let value = dict["WatermarkAntiCam"] as? String {
            self.watermarkAntiCam = value
        }
        if let value = dict["WatermarkColor"] as? Int32 {
            self.watermarkColor = value
        }
        if let value = dict["WatermarkDegree"] as? Double {
            self.watermarkDegree = value
        }
        if let value = dict["WatermarkFontSize"] as? Int32 {
            self.watermarkFontSize = value
        }
        if let value = dict["WatermarkFontStyle"] as? String {
            self.watermarkFontStyle = value
        }
        if let value = dict["WatermarkPower"] as? String {
            self.watermarkPower = value
        }
        if let value = dict["WatermarkRowAmount"] as? Int32 {
            self.watermarkRowAmount = value
        }
        if let value = dict["WatermarkSecurity"] as? String {
            self.watermarkSecurity = value
        }
        if let value = dict["WatermarkTransparency"] as? String {
            self.watermarkTransparency = value
        }
        if let value = dict["WatermarkTransparencyValue"] as? Int32 {
            self.watermarkTransparencyValue = value
        }
        if let value = dict["WatermarkType"] as? String {
            self.watermarkType = value
        }
        if let value = dict["WyAssistant"] as? String {
            self.wyAssistant = value
        }
    }
}

public class CreatePolicyGroupResponseBody : Tea.TeaModel {
    public var policyGroupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePolicyGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePolicyGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePolicyGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRAMDirectoryRequest : Tea.TeaModel {
    public var desktopAccessType: String?

    public var directoryName: String?

    public var enableAdminAccess: Bool?

    public var enableInternetAccess: Bool?

    public var regionId: String?

    public var vSwitchId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopAccessType != nil {
            map["DesktopAccessType"] = self.desktopAccessType!
        }
        if self.directoryName != nil {
            map["DirectoryName"] = self.directoryName!
        }
        if self.enableAdminAccess != nil {
            map["EnableAdminAccess"] = self.enableAdminAccess!
        }
        if self.enableInternetAccess != nil {
            map["EnableInternetAccess"] = self.enableInternetAccess!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopAccessType"] as? String {
            self.desktopAccessType = value
        }
        if let value = dict["DirectoryName"] as? String {
            self.directoryName = value
        }
        if let value = dict["EnableAdminAccess"] as? Bool {
            self.enableAdminAccess = value
        }
        if let value = dict["EnableInternetAccess"] as? Bool {
            self.enableInternetAccess = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VSwitchId"] as? [String] {
            self.vSwitchId = value
        }
    }
}

public class CreateRAMDirectoryResponseBody : Tea.TeaModel {
    public var directoryId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateRAMDirectoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRAMDirectoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRAMDirectoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRouteEntryRequest : Tea.TeaModel {
    public var description_: String?

    public var destinationCidrBlock: String?

    public var nextHopId: String?

    public var nextHopType: String?

    public var regionId: String?

    public var routeEntryName: String?

    public var routeTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.destinationCidrBlock != nil {
            map["DestinationCidrBlock"] = self.destinationCidrBlock!
        }
        if self.nextHopId != nil {
            map["NextHopId"] = self.nextHopId!
        }
        if self.nextHopType != nil {
            map["NextHopType"] = self.nextHopType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeEntryName != nil {
            map["RouteEntryName"] = self.routeEntryName!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DestinationCidrBlock"] as? String {
            self.destinationCidrBlock = value
        }
        if let value = dict["NextHopId"] as? String {
            self.nextHopId = value
        }
        if let value = dict["NextHopType"] as? String {
            self.nextHopType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteEntryName"] as? String {
            self.routeEntryName = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
    }
}

public class CreateRouteEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var routeEntryId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routeEntryId != nil {
            map["RouteEntryId"] = self.routeEntryId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RouteEntryId"] as? String {
            self.routeEntryId = value
        }
    }
}

public class CreateRouteEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRouteEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRouteEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRouteTableRequest : Tea.TeaModel {
    public var clientToken: String?

    public var description_: String?

    public var regionId: String?

    public var routeTableName: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeTableName != nil {
            map["RouteTableName"] = self.routeTableName!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteTableName"] as? String {
            self.routeTableName = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CreateRouteTableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var routeTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
    }
}

public class CreateRouteTableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRouteTableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRouteTableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSimpleOfficeSiteRequest : Tea.TeaModel {
    public var bandwidth: Int32?

    public var cenId: String?

    public var cenOwnerId: Int64?

    public var cidrBlock: String?

    public var cloudBoxOfficeSite: Bool?

    public var desktopAccessType: String?

    public var enableAdminAccess: Bool?

    public var enableInternetAccess: Bool?

    public var needVerifyZeroDevice: Bool?

    public var officeSiteName: String?

    public var regionId: String?

    public var vSwitchId: [String]?

    public var verifyCode: String?

    public var vpcType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bandwidth != nil {
            map["Bandwidth"] = self.bandwidth!
        }
        if self.cenId != nil {
            map["CenId"] = self.cenId!
        }
        if self.cenOwnerId != nil {
            map["CenOwnerId"] = self.cenOwnerId!
        }
        if self.cidrBlock != nil {
            map["CidrBlock"] = self.cidrBlock!
        }
        if self.cloudBoxOfficeSite != nil {
            map["CloudBoxOfficeSite"] = self.cloudBoxOfficeSite!
        }
        if self.desktopAccessType != nil {
            map["DesktopAccessType"] = self.desktopAccessType!
        }
        if self.enableAdminAccess != nil {
            map["EnableAdminAccess"] = self.enableAdminAccess!
        }
        if self.enableInternetAccess != nil {
            map["EnableInternetAccess"] = self.enableInternetAccess!
        }
        if self.needVerifyZeroDevice != nil {
            map["NeedVerifyZeroDevice"] = self.needVerifyZeroDevice!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.vSwitchId != nil {
            map["VSwitchId"] = self.vSwitchId!
        }
        if self.verifyCode != nil {
            map["VerifyCode"] = self.verifyCode!
        }
        if self.vpcType != nil {
            map["VpcType"] = self.vpcType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bandwidth"] as? Int32 {
            self.bandwidth = value
        }
        if let value = dict["CenId"] as? String {
            self.cenId = value
        }
        if let value = dict["CenOwnerId"] as? Int64 {
            self.cenOwnerId = value
        }
        if let value = dict["CidrBlock"] as? String {
            self.cidrBlock = value
        }
        if let value = dict["CloudBoxOfficeSite"] as? Bool {
            self.cloudBoxOfficeSite = value
        }
        if let value = dict["DesktopAccessType"] as? String {
            self.desktopAccessType = value
        }
        if let value = dict["EnableAdminAccess"] as? Bool {
            self.enableAdminAccess = value
        }
        if let value = dict["EnableInternetAccess"] as? Bool {
            self.enableInternetAccess = value
        }
        if let value = dict["NeedVerifyZeroDevice"] as? Bool {
            self.needVerifyZeroDevice = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VSwitchId"] as? [String] {
            self.vSwitchId = value
        }
        if let value = dict["VerifyCode"] as? String {
            self.verifyCode = value
        }
        if let value = dict["VpcType"] as? String {
            self.vpcType = value
        }
    }
}

public class CreateSimpleOfficeSiteResponseBody : Tea.TeaModel {
    public var officeSiteId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSimpleOfficeSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSimpleOfficeSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSimpleOfficeSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSnapshotRequest : Tea.TeaModel {
    public var description_: String?

    public var desktopId: String?

    public var regionId: String?

    public var snapshotName: String?

    public var sourceDiskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snapshotName != nil {
            map["SnapshotName"] = self.snapshotName!
        }
        if self.sourceDiskType != nil {
            map["SourceDiskType"] = self.sourceDiskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnapshotName"] as? String {
            self.snapshotName = value
        }
        if let value = dict["SourceDiskType"] as? String {
            self.sourceDiskType = value
        }
    }
}

public class CreateSnapshotResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var snapshotId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snapshotId != nil {
            map["SnapshotId"] = self.snapshotId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SnapshotId"] as? String {
            self.snapshotId = value
        }
    }
}

public class CreateSnapshotResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSnapshotResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSnapshotResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSnatEntryRequest : Tea.TeaModel {
    public var eipAffinity: Int32?

    public var regionId: String?

    public var snatEntryName: String?

    public var snatIp: String?

    public var snatTableId: String?

    public var sourceCIDR: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eipAffinity != nil {
            map["EipAffinity"] = self.eipAffinity!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snatEntryName != nil {
            map["SnatEntryName"] = self.snatEntryName!
        }
        if self.snatIp != nil {
            map["SnatIp"] = self.snatIp!
        }
        if self.snatTableId != nil {
            map["SnatTableId"] = self.snatTableId!
        }
        if self.sourceCIDR != nil {
            map["SourceCIDR"] = self.sourceCIDR!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EipAffinity"] as? Int32 {
            self.eipAffinity = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnatEntryName"] as? String {
            self.snatEntryName = value
        }
        if let value = dict["SnatIp"] as? String {
            self.snatIp = value
        }
        if let value = dict["SnatTableId"] as? String {
            self.snatTableId = value
        }
        if let value = dict["SourceCIDR"] as? String {
            self.sourceCIDR = value
        }
    }
}

public class CreateSnatEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var snatEntryId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snatEntryId != nil {
            map["SnatEntryId"] = self.snatEntryId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SnatEntryId"] as? String {
            self.snatEntryId = value
        }
    }
}

public class CreateSnatEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSnatEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSnatEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSubnetRequest : Tea.TeaModel {
    public var cidrBlock: String?

    public var name: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var zoneId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cidrBlock != nil {
            map["CidrBlock"] = self.cidrBlock!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.zoneId != nil {
            map["ZoneId"] = self.zoneId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CidrBlock"] as? String {
            self.cidrBlock = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ZoneId"] as? String {
            self.zoneId = value
        }
    }
}

public class CreateSubnetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var subnetId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subnetId != nil {
            map["SubnetId"] = self.subnetId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubnetId"] as? String {
            self.subnetId = value
        }
    }
}

public class CreateSubnetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSubnetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSubnetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTemplateRequest : Tea.TeaModel {
    public class DataDiskList : Tea.TeaModel {
        public var performanceLevel: String?

        public var size: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.performanceLevel != nil {
                map["PerformanceLevel"] = self.performanceLevel!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PerformanceLevel"] as? String {
                self.performanceLevel = value
            }
            if let value = dict["Size"] as? Int32 {
                self.size = value
            }
        }
    }
    public class RegionConfigList : Tea.TeaModel {
        public var officeSiteId: String?

        public var regionId: String?

        public var resourceInstanceType: String?

        public var snapshotPolicyId: String?

        public var subnetId: String?

        public var volumeEncryptionEnable: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceInstanceType != nil {
                map["ResourceInstanceType"] = self.resourceInstanceType!
            }
            if self.snapshotPolicyId != nil {
                map["SnapshotPolicyId"] = self.snapshotPolicyId!
            }
            if self.subnetId != nil {
                map["SubnetId"] = self.subnetId!
            }
            if self.volumeEncryptionEnable != nil {
                map["VolumeEncryptionEnable"] = self.volumeEncryptionEnable!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceInstanceType"] as? String {
                self.resourceInstanceType = value
            }
            if let value = dict["SnapshotPolicyId"] as? String {
                self.snapshotPolicyId = value
            }
            if let value = dict["SubnetId"] as? String {
                self.subnetId = value
            }
            if let value = dict["VolumeEncryptionEnable"] as? Bool {
                self.volumeEncryptionEnable = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public class ResourceTagList : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class SiteConfigList : Tea.TeaModel {
        public var appRuleId: String?

        public var siteId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appRuleId != nil {
                map["AppRuleId"] = self.appRuleId!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppRuleId"] as? String {
                self.appRuleId = value
            }
            if let value = dict["SiteId"] as? String {
                self.siteId = value
            }
        }
    }
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var bizType: String?

    public var chargeType: String?

    public var dataDiskList: [CreateTemplateRequest.DataDiskList]?

    public var defaultLanguage: String?

    public var description_: String?

    public var imageId: String?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var postPaidAfterUsedUp: Bool?

    public var productType: String?

    public var regionConfigList: [CreateTemplateRequest.RegionConfigList]?

    public var resourceGroupId: String?

    public var resourceTagList: [CreateTemplateRequest.ResourceTagList]?

    public var siteConfigList: [CreateTemplateRequest.SiteConfigList]?

    public var systemDiskPerformanceLevel: String?

    public var systemDiskSize: Int32?

    public var templateName: String?

    public var timerGroupId: String?

    public var userDuration: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.dataDiskList != nil {
            var tmp : [Any] = []
            for k in self.dataDiskList! {
                tmp.append(k.toMap())
            }
            map["DataDiskList"] = tmp
        }
        if self.defaultLanguage != nil {
            map["DefaultLanguage"] = self.defaultLanguage!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.postPaidAfterUsedUp != nil {
            map["PostPaidAfterUsedUp"] = self.postPaidAfterUsedUp!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.regionConfigList != nil {
            var tmp : [Any] = []
            for k in self.regionConfigList! {
                tmp.append(k.toMap())
            }
            map["RegionConfigList"] = tmp
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.resourceTagList != nil {
            var tmp : [Any] = []
            for k in self.resourceTagList! {
                tmp.append(k.toMap())
            }
            map["ResourceTagList"] = tmp
        }
        if self.siteConfigList != nil {
            var tmp : [Any] = []
            for k in self.siteConfigList! {
                tmp.append(k.toMap())
            }
            map["SiteConfigList"] = tmp
        }
        if self.systemDiskPerformanceLevel != nil {
            map["SystemDiskPerformanceLevel"] = self.systemDiskPerformanceLevel!
        }
        if self.systemDiskSize != nil {
            map["SystemDiskSize"] = self.systemDiskSize!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.timerGroupId != nil {
            map["TimerGroupId"] = self.timerGroupId!
        }
        if self.userDuration != nil {
            map["UserDuration"] = self.userDuration!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DataDiskList"] as? [Any?] {
            var tmp : [CreateTemplateRequest.DataDiskList] = []
            for v in value {
                if v != nil {
                    var model = CreateTemplateRequest.DataDiskList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataDiskList = tmp
        }
        if let value = dict["DefaultLanguage"] as? String {
            self.defaultLanguage = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PostPaidAfterUsedUp"] as? Bool {
            self.postPaidAfterUsedUp = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RegionConfigList"] as? [Any?] {
            var tmp : [CreateTemplateRequest.RegionConfigList] = []
            for v in value {
                if v != nil {
                    var model = CreateTemplateRequest.RegionConfigList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.regionConfigList = tmp
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["ResourceTagList"] as? [Any?] {
            var tmp : [CreateTemplateRequest.ResourceTagList] = []
            for v in value {
                if v != nil {
                    var model = CreateTemplateRequest.ResourceTagList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceTagList = tmp
        }
        if let value = dict["SiteConfigList"] as? [Any?] {
            var tmp : [CreateTemplateRequest.SiteConfigList] = []
            for v in value {
                if v != nil {
                    var model = CreateTemplateRequest.SiteConfigList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.siteConfigList = tmp
        }
        if let value = dict["SystemDiskPerformanceLevel"] as? String {
            self.systemDiskPerformanceLevel = value
        }
        if let value = dict["SystemDiskSize"] as? Int32 {
            self.systemDiskSize = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TimerGroupId"] as? String {
            self.timerGroupId = value
        }
        if let value = dict["UserDuration"] as? Int32 {
            self.userDuration = value
        }
    }
}

public class CreateTemplateResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAutoSnapshotPolicyRequest : Tea.TeaModel {
    public var policyId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? [String] {
            self.policyId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteAutoSnapshotPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAutoSnapshotPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAutoSnapshotPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAutoSnapshotPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBundlesRequest : Tea.TeaModel {
    public var bundleId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleId"] as? [String] {
            self.bundleId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteBundlesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteBundlesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBundlesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBundlesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCdsFileRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteCdsFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCenterPolicyRequest : Tea.TeaModel {
    public var businessType: Int32?

    public var policyGroupIds: [String]?

    public var regionId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.policyGroupIds != nil {
            map["PolicyGroupIds"] = self.policyGroupIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["PolicyGroupIds"] as? [String] {
            self.policyGroupIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class DeleteCenterPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCenterPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCenterPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCenterPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCloudDriveGroupsRequest : Tea.TeaModel {
    public var cdsId: String?

    public var groupId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["GroupId"] as? [String] {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteCloudDriveGroupsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCloudDriveGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCloudDriveGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCloudDriveGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCloudDriveUsersRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteCloudDriveUsersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCloudDriveUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCloudDriveUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCloudDriveUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteConfigGroupRequest : Tea.TeaModel {
    public var groupIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupIds != nil {
            map["GroupIds"] = self.groupIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupIds"] as? [String] {
            self.groupIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteConfigGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteConfigGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteConfigGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteConfigGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDesktopGroupRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class DeleteDesktopGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class DeleteDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDevicesRequest : Tea.TeaModel {
    public var clientType: Int32?

    public var deviceIds: [String]?

    public var force: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientType != nil {
            map["ClientType"] = self.clientType!
        }
        if self.deviceIds != nil {
            map["DeviceIds"] = self.deviceIds!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientType"] as? Int32 {
            self.clientType = value
        }
        if let value = dict["DeviceIds"] as? [String] {
            self.deviceIds = value
        }
        if let value = dict["Force"] as? Int32 {
            self.force = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteDevicesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDirectoriesRequest : Tea.TeaModel {
    public var directoryId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectoryId"] as? [String] {
            self.directoryId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteDirectoriesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDirectoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDirectoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDirectoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDriveRequest : Tea.TeaModel {
    public var driveId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.driveId != nil {
            map["DriveId"] = self.driveId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DriveId"] as? String {
            self.driveId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteDriveResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDriveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDriveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDriveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEduRoomRequest : Tea.TeaModel {
    public var eduRoomId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eduRoomId != nil {
            map["EduRoomId"] = self.eduRoomId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EduRoomId"] as? String {
            self.eduRoomId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteEduRoomResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEduRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEduRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEduRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteForwardEntryRequest : Tea.TeaModel {
    public var forwardEntryId: String?

    public var forwardTableId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forwardEntryId != nil {
            map["ForwardEntryId"] = self.forwardEntryId!
        }
        if self.forwardTableId != nil {
            map["ForwardTableId"] = self.forwardTableId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForwardEntryId"] as? String {
            self.forwardEntryId = value
        }
        if let value = dict["ForwardTableId"] as? String {
            self.forwardTableId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteForwardEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteForwardEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteForwardEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteForwardEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteImagesRequest : Tea.TeaModel {
    public var deleteCascadedBundle: Bool?

    public var imageId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteCascadedBundle != nil {
            map["DeleteCascadedBundle"] = self.deleteCascadedBundle!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteCascadedBundle"] as? Bool {
            self.deleteCascadedBundle = value
        }
        if let value = dict["ImageId"] as? [String] {
            self.imageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteImagesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteImagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteImagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteImagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNASFileSystemsRequest : Tea.TeaModel {
    public var fileSystemId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileSystemId"] as? [String] {
            self.fileSystemId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteNASFileSystemsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteNASFileSystemsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNASFileSystemsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNASFileSystemsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNatGatewayRequest : Tea.TeaModel {
    public var natGatewayId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.natGatewayId != nil {
            map["NatGatewayId"] = self.natGatewayId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NatGatewayId"] as? String {
            self.natGatewayId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteNatGatewayResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteNatGatewayResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNatGatewayResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNatGatewayResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNetworkPackagesRequest : Tea.TeaModel {
    public var networkPackageId: [String]?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkPackageId"] as? [String] {
            self.networkPackageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class DeleteNetworkPackagesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteNetworkPackagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNetworkPackagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNetworkPackagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOfficeSitesRequest : Tea.TeaModel {
    public var officeSiteId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? [String] {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteOfficeSitesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteOfficeSitesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOfficeSitesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOfficeSitesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePolicyGroupsRequest : Tea.TeaModel {
    public var policyGroupId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyGroupId"] as? [String] {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeletePolicyGroupsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePolicyGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePolicyGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePolicyGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRouteEntryRequest : Tea.TeaModel {
    public var destinationCidrBlock: String?

    public var nextHopId: String?

    public var regionId: String?

    public var routeEntryId: String?

    public var routeTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.destinationCidrBlock != nil {
            map["DestinationCidrBlock"] = self.destinationCidrBlock!
        }
        if self.nextHopId != nil {
            map["NextHopId"] = self.nextHopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeEntryId != nil {
            map["RouteEntryId"] = self.routeEntryId!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DestinationCidrBlock"] as? String {
            self.destinationCidrBlock = value
        }
        if let value = dict["NextHopId"] as? String {
            self.nextHopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteEntryId"] as? String {
            self.routeEntryId = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
    }
}

public class DeleteRouteEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRouteEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRouteEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRouteEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRouteTableRequest : Tea.TeaModel {
    public var regionId: String?

    public var routeTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
    }
}

public class DeleteRouteTableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRouteTableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRouteTableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRouteTableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSnapshotRequest : Tea.TeaModel {
    public var regionId: String?

    public var snapshotId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snapshotId != nil {
            map["SnapshotId"] = self.snapshotId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnapshotId"] as? [String] {
            self.snapshotId = value
        }
    }
}

public class DeleteSnapshotResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSnapshotResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSnapshotResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSnapshotResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSnatEntryRequest : Tea.TeaModel {
    public var regionId: String?

    public var snatEntryId: String?

    public var snatTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snatEntryId != nil {
            map["SnatEntryId"] = self.snatEntryId!
        }
        if self.snatTableId != nil {
            map["SnatTableId"] = self.snatTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnatEntryId"] as? String {
            self.snatEntryId = value
        }
        if let value = dict["SnatTableId"] as? String {
            self.snatTableId = value
        }
    }
}

public class DeleteSnatEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSnatEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSnatEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSnatEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSubnetRequest : Tea.TeaModel {
    public var regionId: String?

    public var subnetId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.subnetId != nil {
            map["SubnetId"] = self.subnetId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SubnetId"] as? String {
            self.subnetId = value
        }
    }
}

public class DeleteSubnetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var subnetId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subnetId != nil {
            map["SubnetId"] = self.subnetId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubnetId"] as? String {
            self.subnetId = value
        }
    }
}

public class DeleteSubnetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSubnetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSubnetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTemplatesRequest : Tea.TeaModel {
    public var bizType: String?

    public var templateIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.templateIds != nil {
            map["TemplateIds"] = self.templateIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["TemplateIds"] as? [String] {
            self.templateIds = value
        }
    }
}

public class DeleteTemplatesResponseBody : Tea.TeaModel {
    public var accessDeniedDetail: String?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessDeniedDetail != nil {
            map["AccessDeniedDetail"] = self.accessDeniedDetail!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessDeniedDetail"] as? String {
            self.accessDeniedDetail = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteVirtualMFADeviceRequest : Tea.TeaModel {
    public var regionId: String?

    public var serialNumber: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
    }
}

public class DeleteVirtualMFADeviceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteVirtualMFADeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteVirtualMFADeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteVirtualMFADeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAclEntriesRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var sourceId: String?

    public var sourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sourceId != nil {
            map["SourceId"] = self.sourceId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SourceId"] as? String {
            self.sourceId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
    }
}

public class DescribeAclEntriesResponseBody : Tea.TeaModel {
    public class AclEntries : Tea.TeaModel {
        public var policy: String?

        public var sourceId: String?

        public var sourceType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.sourceId != nil {
                map["SourceId"] = self.sourceId!
            }
            if self.sourceType != nil {
                map["SourceType"] = self.sourceType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["SourceId"] as? String {
                self.sourceId = value
            }
            if let value = dict["SourceType"] as? String {
                self.sourceType = value
            }
        }
    }
    public var aclEntries: [DescribeAclEntriesResponseBody.AclEntries]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclEntries != nil {
            var tmp : [Any] = []
            for k in self.aclEntries! {
                tmp.append(k.toMap())
            }
            map["AclEntries"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclEntries"] as? [Any?] {
            var tmp : [DescribeAclEntriesResponseBody.AclEntries] = []
            for v in value {
                if v != nil {
                    var model = DescribeAclEntriesResponseBody.AclEntries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.aclEntries = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAclEntriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAclEntriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAclEntriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAutoSnapshotPolicyRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var policyId: String?

    public var policyName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.policyName != nil {
            map["PolicyName"] = self.policyName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["PolicyName"] as? String {
            self.policyName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeAutoSnapshotPolicyResponseBody : Tea.TeaModel {
    public class AutoSnapshotPolicies : Tea.TeaModel {
        public var creationTime: String?

        public var cronExpression: String?

        public var desktopNum: Int32?

        public var policyId: String?

        public var policyName: String?

        public var regionId: String?

        public var retentionDays: String?

        public var status: String?

        public var timePoints: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.desktopNum != nil {
                map["DesktopNum"] = self.desktopNum!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.policyName != nil {
                map["PolicyName"] = self.policyName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.retentionDays != nil {
                map["RetentionDays"] = self.retentionDays!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.timePoints != nil {
                map["TimePoints"] = self.timePoints!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["DesktopNum"] as? Int32 {
                self.desktopNum = value
            }
            if let value = dict["PolicyId"] as? String {
                self.policyId = value
            }
            if let value = dict["PolicyName"] as? String {
                self.policyName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["RetentionDays"] as? String {
                self.retentionDays = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TimePoints"] as? String {
                self.timePoints = value
            }
        }
    }
    public var autoSnapshotPolicies: [DescribeAutoSnapshotPolicyResponseBody.AutoSnapshotPolicies]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoSnapshotPolicies != nil {
            var tmp : [Any] = []
            for k in self.autoSnapshotPolicies! {
                tmp.append(k.toMap())
            }
            map["AutoSnapshotPolicies"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoSnapshotPolicies"] as? [Any?] {
            var tmp : [DescribeAutoSnapshotPolicyResponseBody.AutoSnapshotPolicies] = []
            for v in value {
                if v != nil {
                    var model = DescribeAutoSnapshotPolicyResponseBody.AutoSnapshotPolicies()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.autoSnapshotPolicies = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAutoSnapshotPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAutoSnapshotPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAutoSnapshotPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeBundlesRequest : Tea.TeaModel {
    public var bundleId: [String]?

    public var bundleType: String?

    public var checkStock: Bool?

    public var cpuCount: Int32?

    public var desktopTypeFamily: String?

    public var fotaChannel: String?

    public var fromDesktopGroup: Bool?

    public var gpuCount: Double?

    public var gpuDriverType: String?

    public var imageId: [String]?

    public var maxResults: Int32?

    public var memorySize: Int32?

    public var nextToken: String?

    public var osType: String?

    public var protocolType: String?

    public var regionId: String?

    public var scope: String?

    public var selectedBundle: Bool?

    public var sessionType: String?

    public var supportMultiSession: Bool?

    public var volumeEncryptionEnabled: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.bundleType != nil {
            map["BundleType"] = self.bundleType!
        }
        if self.checkStock != nil {
            map["CheckStock"] = self.checkStock!
        }
        if self.cpuCount != nil {
            map["CpuCount"] = self.cpuCount!
        }
        if self.desktopTypeFamily != nil {
            map["DesktopTypeFamily"] = self.desktopTypeFamily!
        }
        if self.fotaChannel != nil {
            map["FotaChannel"] = self.fotaChannel!
        }
        if self.fromDesktopGroup != nil {
            map["FromDesktopGroup"] = self.fromDesktopGroup!
        }
        if self.gpuCount != nil {
            map["GpuCount"] = self.gpuCount!
        }
        if self.gpuDriverType != nil {
            map["GpuDriverType"] = self.gpuDriverType!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.memorySize != nil {
            map["MemorySize"] = self.memorySize!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.osType != nil {
            map["OsType"] = self.osType!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.selectedBundle != nil {
            map["SelectedBundle"] = self.selectedBundle!
        }
        if self.sessionType != nil {
            map["SessionType"] = self.sessionType!
        }
        if self.supportMultiSession != nil {
            map["SupportMultiSession"] = self.supportMultiSession!
        }
        if self.volumeEncryptionEnabled != nil {
            map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleId"] as? [String] {
            self.bundleId = value
        }
        if let value = dict["BundleType"] as? String {
            self.bundleType = value
        }
        if let value = dict["CheckStock"] as? Bool {
            self.checkStock = value
        }
        if let value = dict["CpuCount"] as? Int32 {
            self.cpuCount = value
        }
        if let value = dict["DesktopTypeFamily"] as? String {
            self.desktopTypeFamily = value
        }
        if let value = dict["FotaChannel"] as? String {
            self.fotaChannel = value
        }
        if let value = dict["FromDesktopGroup"] as? Bool {
            self.fromDesktopGroup = value
        }
        if let value = dict["GpuCount"] as? Double {
            self.gpuCount = value
        }
        if let value = dict["GpuDriverType"] as? String {
            self.gpuDriverType = value
        }
        if let value = dict["ImageId"] as? [String] {
            self.imageId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["MemorySize"] as? Int32 {
            self.memorySize = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OsType"] as? String {
            self.osType = value
        }
        if let value = dict["ProtocolType"] as? String {
            self.protocolType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["SelectedBundle"] as? Bool {
            self.selectedBundle = value
        }
        if let value = dict["SessionType"] as? String {
            self.sessionType = value
        }
        if let value = dict["SupportMultiSession"] as? Bool {
            self.supportMultiSession = value
        }
        if let value = dict["VolumeEncryptionEnabled"] as? Bool {
            self.volumeEncryptionEnabled = value
        }
    }
}

public class DescribeBundlesResponseBody : Tea.TeaModel {
    public class Bundles : Tea.TeaModel {
        public class DesktopTypeAttribute : Tea.TeaModel {
            public var cpuCount: Int32?

            public var gpuCount: Double?

            public var gpuSpec: String?

            public var memorySize: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cpuCount != nil {
                    map["CpuCount"] = self.cpuCount!
                }
                if self.gpuCount != nil {
                    map["GpuCount"] = self.gpuCount!
                }
                if self.gpuSpec != nil {
                    map["GpuSpec"] = self.gpuSpec!
                }
                if self.memorySize != nil {
                    map["MemorySize"] = self.memorySize!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CpuCount"] as? Int32 {
                    self.cpuCount = value
                }
                if let value = dict["GpuCount"] as? Double {
                    self.gpuCount = value
                }
                if let value = dict["GpuSpec"] as? String {
                    self.gpuSpec = value
                }
                if let value = dict["MemorySize"] as? Int32 {
                    self.memorySize = value
                }
            }
        }
        public class Disks : Tea.TeaModel {
            public var diskPerformanceLevel: String?

            public var diskSize: Int32?

            public var diskType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.diskPerformanceLevel != nil {
                    map["DiskPerformanceLevel"] = self.diskPerformanceLevel!
                }
                if self.diskSize != nil {
                    map["DiskSize"] = self.diskSize!
                }
                if self.diskType != nil {
                    map["DiskType"] = self.diskType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DiskPerformanceLevel"] as? String {
                    self.diskPerformanceLevel = value
                }
                if let value = dict["DiskSize"] as? Int32 {
                    self.diskSize = value
                }
                if let value = dict["DiskType"] as? String {
                    self.diskType = value
                }
            }
        }
        public var bundleId: String?

        public var bundleName: String?

        public var bundleType: String?

        public var creationTime: String?

        public var dataDiskCategory: String?

        public var description_: String?

        public var desktopType: String?

        public var desktopTypeAttribute: DescribeBundlesResponseBody.Bundles.DesktopTypeAttribute?

        public var desktopTypeFamily: String?

        public var disks: [DescribeBundlesResponseBody.Bundles.Disks]?

        public var imageId: String?

        public var imageName: String?

        public var imageStatus: String?

        public var language: String?

        public var osType: String?

        public var platform: String?

        public var protocolType: String?

        public var sessionType: String?

        public var stockState: String?

        public var systemDiskCategory: String?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.desktopTypeAttribute?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bundleId != nil {
                map["BundleId"] = self.bundleId!
            }
            if self.bundleName != nil {
                map["BundleName"] = self.bundleName!
            }
            if self.bundleType != nil {
                map["BundleType"] = self.bundleType!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.dataDiskCategory != nil {
                map["DataDiskCategory"] = self.dataDiskCategory!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.desktopType != nil {
                map["DesktopType"] = self.desktopType!
            }
            if self.desktopTypeAttribute != nil {
                map["DesktopTypeAttribute"] = self.desktopTypeAttribute?.toMap()
            }
            if self.desktopTypeFamily != nil {
                map["DesktopTypeFamily"] = self.desktopTypeFamily!
            }
            if self.disks != nil {
                var tmp : [Any] = []
                for k in self.disks! {
                    tmp.append(k.toMap())
                }
                map["Disks"] = tmp
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageName != nil {
                map["ImageName"] = self.imageName!
            }
            if self.imageStatus != nil {
                map["ImageStatus"] = self.imageStatus!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.platform != nil {
                map["Platform"] = self.platform!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.sessionType != nil {
                map["SessionType"] = self.sessionType!
            }
            if self.stockState != nil {
                map["StockState"] = self.stockState!
            }
            if self.systemDiskCategory != nil {
                map["SystemDiskCategory"] = self.systemDiskCategory!
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BundleId"] as? String {
                self.bundleId = value
            }
            if let value = dict["BundleName"] as? String {
                self.bundleName = value
            }
            if let value = dict["BundleType"] as? String {
                self.bundleType = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["DataDiskCategory"] as? String {
                self.dataDiskCategory = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DesktopType"] as? String {
                self.desktopType = value
            }
            if let value = dict["DesktopTypeAttribute"] as? [String: Any?] {
                var model = DescribeBundlesResponseBody.Bundles.DesktopTypeAttribute()
                model.fromMap(value)
                self.desktopTypeAttribute = model
            }
            if let value = dict["DesktopTypeFamily"] as? String {
                self.desktopTypeFamily = value
            }
            if let value = dict["Disks"] as? [Any?] {
                var tmp : [DescribeBundlesResponseBody.Bundles.Disks] = []
                for v in value {
                    if v != nil {
                        var model = DescribeBundlesResponseBody.Bundles.Disks()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.disks = tmp
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageName"] as? String {
                self.imageName = value
            }
            if let value = dict["ImageStatus"] as? String {
                self.imageStatus = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["Platform"] as? String {
                self.platform = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["SessionType"] as? String {
                self.sessionType = value
            }
            if let value = dict["StockState"] as? String {
                self.stockState = value
            }
            if let value = dict["SystemDiskCategory"] as? String {
                self.systemDiskCategory = value
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public var bundles: [DescribeBundlesResponseBody.Bundles]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundles != nil {
            var tmp : [Any] = []
            for k in self.bundles! {
                tmp.append(k.toMap())
            }
            map["Bundles"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bundles"] as? [Any?] {
            var tmp : [DescribeBundlesResponseBody.Bundles] = []
            for v in value {
                if v != nil {
                    var model = DescribeBundlesResponseBody.Bundles()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.bundles = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeBundlesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeBundlesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeBundlesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCdsFileShareLinksRequest : Tea.TeaModel {
    public var cdsId: String?

    public var creators: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var shareId: String?

    public var shareName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.creators != nil {
            map["Creators"] = self.creators!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.shareId != nil {
            map["ShareId"] = self.shareId!
        }
        if self.shareName != nil {
            map["ShareName"] = self.shareName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["Creators"] as? [String] {
            self.creators = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ShareId"] as? String {
            self.shareId = value
        }
        if let value = dict["ShareName"] as? String {
            self.shareName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeCdsFileShareLinksResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [CdsFileShareLinkModel]?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [CdsFileShareLinkModel] = []
            for v in value {
                if v != nil {
                    var model = CdsFileShareLinkModel()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeCdsFileShareLinksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCdsFileShareLinksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCdsFileShareLinksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCensRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeCensResponseBody : Tea.TeaModel {
    public class Cens : Tea.TeaModel {
        public class PackageIds : Tea.TeaModel {
            public var packageId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.packageId != nil {
                    map["PackageId"] = self.packageId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PackageId"] as? String {
                    self.packageId = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var cenId: String?

        public var creationTime: String?

        public var description_: String?

        public var ipv6Level: String?

        public var name: String?

        public var packageIds: [DescribeCensResponseBody.Cens.PackageIds]?

        public var protectionLevel: String?

        public var status: String?

        public var tags: [DescribeCensResponseBody.Cens.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cenId != nil {
                map["CenId"] = self.cenId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipv6Level != nil {
                map["Ipv6Level"] = self.ipv6Level!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.packageIds != nil {
                var tmp : [Any] = []
                for k in self.packageIds! {
                    tmp.append(k.toMap())
                }
                map["PackageIds"] = tmp
            }
            if self.protectionLevel != nil {
                map["ProtectionLevel"] = self.protectionLevel!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CenId"] as? String {
                self.cenId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Ipv6Level"] as? String {
                self.ipv6Level = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PackageIds"] as? [Any?] {
                var tmp : [DescribeCensResponseBody.Cens.PackageIds] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCensResponseBody.Cens.PackageIds()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.packageIds = tmp
            }
            if let value = dict["ProtectionLevel"] as? String {
                self.protectionLevel = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [DescribeCensResponseBody.Cens.Tags] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCensResponseBody.Cens.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var cens: [DescribeCensResponseBody.Cens]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cens != nil {
            var tmp : [Any] = []
            for k in self.cens! {
                tmp.append(k.toMap())
            }
            map["Cens"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cens"] as? [Any?] {
            var tmp : [DescribeCensResponseBody.Cens] = []
            for v in value {
                if v != nil {
                    var model = DescribeCensResponseBody.Cens()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cens = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeCensResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCensResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCensResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCenterPolicyListRequest : Tea.TeaModel {
    public var businessType: Int32?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var policyGroupId: [String]?

    public var resourceType: String?

    public var scope: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyGroupId"] as? [String] {
            self.policyGroupId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
    }
}

public class DescribeCenterPolicyListResponseBody : Tea.TeaModel {
    public class DescribePolicyGroups : Tea.TeaModel {
        public class AuthorizeAccessPolicyRules : Tea.TeaModel {
            public var cidrIp: String?

            public var description_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cidrIp != nil {
                    map["CidrIp"] = self.cidrIp!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CidrIp"] as? String {
                    self.cidrIp = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
            }
        }
        public class AuthorizeSecurityPolicyRules : Tea.TeaModel {
            public var cidrIp: String?

            public var description_: String?

            public var ipProtocol: String?

            public var policy: String?

            public var portRange: String?

            public var priority: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cidrIp != nil {
                    map["CidrIp"] = self.cidrIp!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ipProtocol != nil {
                    map["IpProtocol"] = self.ipProtocol!
                }
                if self.policy != nil {
                    map["Policy"] = self.policy!
                }
                if self.portRange != nil {
                    map["PortRange"] = self.portRange!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CidrIp"] as? String {
                    self.cidrIp = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["IpProtocol"] as? String {
                    self.ipProtocol = value
                }
                if let value = dict["Policy"] as? String {
                    self.policy = value
                }
                if let value = dict["PortRange"] as? String {
                    self.portRange = value
                }
                if let value = dict["Priority"] as? String {
                    self.priority = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class ClientTypes : Tea.TeaModel {
            public var clientType: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clientType != nil {
                    map["ClientType"] = self.clientType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClientType"] as? String {
                    self.clientType = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public class DeviceRedirects : Tea.TeaModel {
            public var deviceType: String?

            public var redirectType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceType != nil {
                    map["DeviceType"] = self.deviceType!
                }
                if self.redirectType != nil {
                    map["RedirectType"] = self.redirectType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceType"] as? String {
                    self.deviceType = value
                }
                if let value = dict["RedirectType"] as? String {
                    self.redirectType = value
                }
            }
        }
        public class DeviceRules : Tea.TeaModel {
            public var deviceName: String?

            public var devicePid: String?

            public var deviceType: String?

            public var deviceVid: String?

            public var optCommand: String?

            public var platforms: String?

            public var redirectType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceName != nil {
                    map["DeviceName"] = self.deviceName!
                }
                if self.devicePid != nil {
                    map["DevicePid"] = self.devicePid!
                }
                if self.deviceType != nil {
                    map["DeviceType"] = self.deviceType!
                }
                if self.deviceVid != nil {
                    map["DeviceVid"] = self.deviceVid!
                }
                if self.optCommand != nil {
                    map["OptCommand"] = self.optCommand!
                }
                if self.platforms != nil {
                    map["Platforms"] = self.platforms!
                }
                if self.redirectType != nil {
                    map["RedirectType"] = self.redirectType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceName"] as? String {
                    self.deviceName = value
                }
                if let value = dict["DevicePid"] as? String {
                    self.devicePid = value
                }
                if let value = dict["DeviceType"] as? String {
                    self.deviceType = value
                }
                if let value = dict["DeviceVid"] as? String {
                    self.deviceVid = value
                }
                if let value = dict["OptCommand"] as? String {
                    self.optCommand = value
                }
                if let value = dict["Platforms"] as? String {
                    self.platforms = value
                }
                if let value = dict["RedirectType"] as? String {
                    self.redirectType = value
                }
            }
        }
        public class DomainResolveRule : Tea.TeaModel {
            public var description_: String?

            public var domain: String?

            public var policy: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.policy != nil {
                    map["Policy"] = self.policy!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["Policy"] as? String {
                    self.policy = value
                }
            }
        }
        public class NetRedirectRule : Tea.TeaModel {
            public var domain: String?

            public var policy: String?

            public var ruleType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.policy != nil {
                    map["Policy"] = self.policy!
                }
                if self.ruleType != nil {
                    map["RuleType"] = self.ruleType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["Policy"] as? String {
                    self.policy = value
                }
                if let value = dict["RuleType"] as? String {
                    self.ruleType = value
                }
            }
        }
        public class UsbSupplyRedirectRule : Tea.TeaModel {
            public var description_: String?

            public var productId: String?

            public var usbRedirectType: Int64?

            public var usbRuleType: Int64?

            public var vendorId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.productId != nil {
                    map["ProductId"] = self.productId!
                }
                if self.usbRedirectType != nil {
                    map["UsbRedirectType"] = self.usbRedirectType!
                }
                if self.usbRuleType != nil {
                    map["UsbRuleType"] = self.usbRuleType!
                }
                if self.vendorId != nil {
                    map["VendorId"] = self.vendorId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ProductId"] as? String {
                    self.productId = value
                }
                if let value = dict["UsbRedirectType"] as? Int64 {
                    self.usbRedirectType = value
                }
                if let value = dict["UsbRuleType"] as? Int64 {
                    self.usbRuleType = value
                }
                if let value = dict["VendorId"] as? String {
                    self.vendorId = value
                }
            }
        }
        public var adminAccess: String?

        public var appContentProtection: String?

        public var authorizeAccessPolicyRules: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.AuthorizeAccessPolicyRules]?

        public var authorizeSecurityPolicyRules: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.AuthorizeSecurityPolicyRules]?

        public var cameraRedirect: String?

        public var clientControlMenu: String?

        public var clientTypes: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.ClientTypes]?

        public var clipboard: String?

        public var colorEnhancement: String?

        public var cpdDriveClipboard: String?

        public var cpuDownGradeDuration: Int32?

        public var cpuProcessors: [String]?

        public var cpuProtectedMode: String?

        public var cpuRateLimit: Int32?

        public var cpuSampleDuration: Int32?

        public var cpuSingleRateLimit: Int32?

        public var desktopCount: Int32?

        public var desktopGroupCount: Int32?

        public var deviceRedirects: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DeviceRedirects]?

        public var deviceRules: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DeviceRules]?

        public var disconnectKeepSession: String?

        public var disconnectKeepSessionTime: Int32?

        public var displayMode: String?

        public var domainRegisterValue: String?

        public var domainResolveRule: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DomainResolveRule]?

        public var domainResolveRuleType: String?

        public var endUserApplyAdminCoordinate: String?

        public var endUserGroupCoordinate: String?

        public var fileTransferAddress: String?

        public var fileTransferSpeed: String?

        public var fileTransferSpeedLocation: String?

        public var gpuAcceleration: String?

        public var html5Access: String?

        public var html5FileTransfer: String?

        public var internetCommunicationProtocol: String?

        public var internetPrinter: String?

        public var localDrive: String?

        public var maxReconnectTime: Int32?

        public var memoryDownGradeDuration: Int32?

        public var memoryProcessors: [String]?

        public var memoryProtectedMode: String?

        public var memoryRateLimit: Int32?

        public var memorySampleDuration: Int32?

        public var memorySingleRateLimit: Int32?

        public var mobileRestart: String?

        public var mobileShutdown: String?

        public var name: String?

        public var netRedirect: String?

        public var netRedirectRule: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.NetRedirectRule]?

        public var noOperationDisconnect: String?

        public var noOperationDisconnectTime: Int32?

        public var policyGroupId: String?

        public var policyGroupType: String?

        public var policyStatus: String?

        public var printerRedirection: String?

        public var qualityEnhancement: String?

        public var recordContent: String?

        public var recordContentExpires: Int64?

        public var recordEventDuration: Int32?

        public var recordEventFilePaths: [String]?

        public var recordEventRegisters: [String]?

        public var recording: String?

        public var recordingAudio: String?

        public var recordingDuration: Int32?

        public var recordingEndTime: String?

        public var recordingExpires: Int64?

        public var recordingFps: Int64?

        public var recordingStartTime: String?

        public var recordingUserNotify: String?

        public var recordingUserNotifyMessage: String?

        public var remoteCoordinate: String?

        public var resolutionHeight: Int32?

        public var resolutionModel: String?

        public var resolutionWidth: Int32?

        public var resourceGroupCount: Int32?

        public var safeMenu: String?

        public var scope: String?

        public var scopeValue: [String]?

        public var screenDisplayMode: String?

        public var smoothEnhancement: String?

        public var statusMonitor: String?

        public var streamingMode: String?

        public var targetFps: Int32?

        public var taskbar: String?

        public var usbRedirect: String?

        public var usbSupplyRedirectRule: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.UsbSupplyRedirectRule]?

        public var useTime: String?

        public var videoEncAvgKbps: Int32?

        public var videoEncMaxQP: Int32?

        public var videoEncMinQP: Int32?

        public var videoEncPeakKbps: Int32?

        public var videoEncPolicy: String?

        public var videoRedirect: String?

        public var visualQuality: String?

        public var watermark: String?

        public var watermarkAntiCam: String?

        public var watermarkColor: Int32?

        public var watermarkCustomText: String?

        public var watermarkDegree: Double?

        public var watermarkFontSize: Int32?

        public var watermarkFontStyle: String?

        public var watermarkPower: String?

        public var watermarkRowAmount: Int32?

        public var watermarkSecurity: String?

        public var watermarkTransparencyValue: Int32?

        public var watermarkType: String?

        public var wyAssistant: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adminAccess != nil {
                map["AdminAccess"] = self.adminAccess!
            }
            if self.appContentProtection != nil {
                map["AppContentProtection"] = self.appContentProtection!
            }
            if self.authorizeAccessPolicyRules != nil {
                var tmp : [Any] = []
                for k in self.authorizeAccessPolicyRules! {
                    tmp.append(k.toMap())
                }
                map["AuthorizeAccessPolicyRules"] = tmp
            }
            if self.authorizeSecurityPolicyRules != nil {
                var tmp : [Any] = []
                for k in self.authorizeSecurityPolicyRules! {
                    tmp.append(k.toMap())
                }
                map["AuthorizeSecurityPolicyRules"] = tmp
            }
            if self.cameraRedirect != nil {
                map["CameraRedirect"] = self.cameraRedirect!
            }
            if self.clientControlMenu != nil {
                map["ClientControlMenu"] = self.clientControlMenu!
            }
            if self.clientTypes != nil {
                var tmp : [Any] = []
                for k in self.clientTypes! {
                    tmp.append(k.toMap())
                }
                map["ClientTypes"] = tmp
            }
            if self.clipboard != nil {
                map["Clipboard"] = self.clipboard!
            }
            if self.colorEnhancement != nil {
                map["ColorEnhancement"] = self.colorEnhancement!
            }
            if self.cpdDriveClipboard != nil {
                map["CpdDriveClipboard"] = self.cpdDriveClipboard!
            }
            if self.cpuDownGradeDuration != nil {
                map["CpuDownGradeDuration"] = self.cpuDownGradeDuration!
            }
            if self.cpuProcessors != nil {
                map["CpuProcessors"] = self.cpuProcessors!
            }
            if self.cpuProtectedMode != nil {
                map["CpuProtectedMode"] = self.cpuProtectedMode!
            }
            if self.cpuRateLimit != nil {
                map["CpuRateLimit"] = self.cpuRateLimit!
            }
            if self.cpuSampleDuration != nil {
                map["CpuSampleDuration"] = self.cpuSampleDuration!
            }
            if self.cpuSingleRateLimit != nil {
                map["CpuSingleRateLimit"] = self.cpuSingleRateLimit!
            }
            if self.desktopCount != nil {
                map["DesktopCount"] = self.desktopCount!
            }
            if self.desktopGroupCount != nil {
                map["DesktopGroupCount"] = self.desktopGroupCount!
            }
            if self.deviceRedirects != nil {
                var tmp : [Any] = []
                for k in self.deviceRedirects! {
                    tmp.append(k.toMap())
                }
                map["DeviceRedirects"] = tmp
            }
            if self.deviceRules != nil {
                var tmp : [Any] = []
                for k in self.deviceRules! {
                    tmp.append(k.toMap())
                }
                map["DeviceRules"] = tmp
            }
            if self.disconnectKeepSession != nil {
                map["DisconnectKeepSession"] = self.disconnectKeepSession!
            }
            if self.disconnectKeepSessionTime != nil {
                map["DisconnectKeepSessionTime"] = self.disconnectKeepSessionTime!
            }
            if self.displayMode != nil {
                map["DisplayMode"] = self.displayMode!
            }
            if self.domainRegisterValue != nil {
                map["DomainRegisterValue"] = self.domainRegisterValue!
            }
            if self.domainResolveRule != nil {
                var tmp : [Any] = []
                for k in self.domainResolveRule! {
                    tmp.append(k.toMap())
                }
                map["DomainResolveRule"] = tmp
            }
            if self.domainResolveRuleType != nil {
                map["DomainResolveRuleType"] = self.domainResolveRuleType!
            }
            if self.endUserApplyAdminCoordinate != nil {
                map["EndUserApplyAdminCoordinate"] = self.endUserApplyAdminCoordinate!
            }
            if self.endUserGroupCoordinate != nil {
                map["EndUserGroupCoordinate"] = self.endUserGroupCoordinate!
            }
            if self.fileTransferAddress != nil {
                map["FileTransferAddress"] = self.fileTransferAddress!
            }
            if self.fileTransferSpeed != nil {
                map["FileTransferSpeed"] = self.fileTransferSpeed!
            }
            if self.fileTransferSpeedLocation != nil {
                map["FileTransferSpeedLocation"] = self.fileTransferSpeedLocation!
            }
            if self.gpuAcceleration != nil {
                map["GpuAcceleration"] = self.gpuAcceleration!
            }
            if self.html5Access != nil {
                map["Html5Access"] = self.html5Access!
            }
            if self.html5FileTransfer != nil {
                map["Html5FileTransfer"] = self.html5FileTransfer!
            }
            if self.internetCommunicationProtocol != nil {
                map["InternetCommunicationProtocol"] = self.internetCommunicationProtocol!
            }
            if self.internetPrinter != nil {
                map["InternetPrinter"] = self.internetPrinter!
            }
            if self.localDrive != nil {
                map["LocalDrive"] = self.localDrive!
            }
            if self.maxReconnectTime != nil {
                map["MaxReconnectTime"] = self.maxReconnectTime!
            }
            if self.memoryDownGradeDuration != nil {
                map["MemoryDownGradeDuration"] = self.memoryDownGradeDuration!
            }
            if self.memoryProcessors != nil {
                map["MemoryProcessors"] = self.memoryProcessors!
            }
            if self.memoryProtectedMode != nil {
                map["MemoryProtectedMode"] = self.memoryProtectedMode!
            }
            if self.memoryRateLimit != nil {
                map["MemoryRateLimit"] = self.memoryRateLimit!
            }
            if self.memorySampleDuration != nil {
                map["MemorySampleDuration"] = self.memorySampleDuration!
            }
            if self.memorySingleRateLimit != nil {
                map["MemorySingleRateLimit"] = self.memorySingleRateLimit!
            }
            if self.mobileRestart != nil {
                map["MobileRestart"] = self.mobileRestart!
            }
            if self.mobileShutdown != nil {
                map["MobileShutdown"] = self.mobileShutdown!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.netRedirect != nil {
                map["NetRedirect"] = self.netRedirect!
            }
            if self.netRedirectRule != nil {
                var tmp : [Any] = []
                for k in self.netRedirectRule! {
                    tmp.append(k.toMap())
                }
                map["NetRedirectRule"] = tmp
            }
            if self.noOperationDisconnect != nil {
                map["NoOperationDisconnect"] = self.noOperationDisconnect!
            }
            if self.noOperationDisconnectTime != nil {
                map["NoOperationDisconnectTime"] = self.noOperationDisconnectTime!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.policyGroupType != nil {
                map["PolicyGroupType"] = self.policyGroupType!
            }
            if self.policyStatus != nil {
                map["PolicyStatus"] = self.policyStatus!
            }
            if self.printerRedirection != nil {
                map["PrinterRedirection"] = self.printerRedirection!
            }
            if self.qualityEnhancement != nil {
                map["QualityEnhancement"] = self.qualityEnhancement!
            }
            if self.recordContent != nil {
                map["RecordContent"] = self.recordContent!
            }
            if self.recordContentExpires != nil {
                map["RecordContentExpires"] = self.recordContentExpires!
            }
            if self.recordEventDuration != nil {
                map["RecordEventDuration"] = self.recordEventDuration!
            }
            if self.recordEventFilePaths != nil {
                map["RecordEventFilePaths"] = self.recordEventFilePaths!
            }
            if self.recordEventRegisters != nil {
                map["RecordEventRegisters"] = self.recordEventRegisters!
            }
            if self.recording != nil {
                map["Recording"] = self.recording!
            }
            if self.recordingAudio != nil {
                map["RecordingAudio"] = self.recordingAudio!
            }
            if self.recordingDuration != nil {
                map["RecordingDuration"] = self.recordingDuration!
            }
            if self.recordingEndTime != nil {
                map["RecordingEndTime"] = self.recordingEndTime!
            }
            if self.recordingExpires != nil {
                map["RecordingExpires"] = self.recordingExpires!
            }
            if self.recordingFps != nil {
                map["RecordingFps"] = self.recordingFps!
            }
            if self.recordingStartTime != nil {
                map["RecordingStartTime"] = self.recordingStartTime!
            }
            if self.recordingUserNotify != nil {
                map["RecordingUserNotify"] = self.recordingUserNotify!
            }
            if self.recordingUserNotifyMessage != nil {
                map["RecordingUserNotifyMessage"] = self.recordingUserNotifyMessage!
            }
            if self.remoteCoordinate != nil {
                map["RemoteCoordinate"] = self.remoteCoordinate!
            }
            if self.resolutionHeight != nil {
                map["ResolutionHeight"] = self.resolutionHeight!
            }
            if self.resolutionModel != nil {
                map["ResolutionModel"] = self.resolutionModel!
            }
            if self.resolutionWidth != nil {
                map["ResolutionWidth"] = self.resolutionWidth!
            }
            if self.resourceGroupCount != nil {
                map["ResourceGroupCount"] = self.resourceGroupCount!
            }
            if self.safeMenu != nil {
                map["SafeMenu"] = self.safeMenu!
            }
            if self.scope != nil {
                map["Scope"] = self.scope!
            }
            if self.scopeValue != nil {
                map["ScopeValue"] = self.scopeValue!
            }
            if self.screenDisplayMode != nil {
                map["ScreenDisplayMode"] = self.screenDisplayMode!
            }
            if self.smoothEnhancement != nil {
                map["SmoothEnhancement"] = self.smoothEnhancement!
            }
            if self.statusMonitor != nil {
                map["StatusMonitor"] = self.statusMonitor!
            }
            if self.streamingMode != nil {
                map["StreamingMode"] = self.streamingMode!
            }
            if self.targetFps != nil {
                map["TargetFps"] = self.targetFps!
            }
            if self.taskbar != nil {
                map["Taskbar"] = self.taskbar!
            }
            if self.usbRedirect != nil {
                map["UsbRedirect"] = self.usbRedirect!
            }
            if self.usbSupplyRedirectRule != nil {
                var tmp : [Any] = []
                for k in self.usbSupplyRedirectRule! {
                    tmp.append(k.toMap())
                }
                map["UsbSupplyRedirectRule"] = tmp
            }
            if self.useTime != nil {
                map["UseTime"] = self.useTime!
            }
            if self.videoEncAvgKbps != nil {
                map["VideoEncAvgKbps"] = self.videoEncAvgKbps!
            }
            if self.videoEncMaxQP != nil {
                map["VideoEncMaxQP"] = self.videoEncMaxQP!
            }
            if self.videoEncMinQP != nil {
                map["VideoEncMinQP"] = self.videoEncMinQP!
            }
            if self.videoEncPeakKbps != nil {
                map["VideoEncPeakKbps"] = self.videoEncPeakKbps!
            }
            if self.videoEncPolicy != nil {
                map["VideoEncPolicy"] = self.videoEncPolicy!
            }
            if self.videoRedirect != nil {
                map["VideoRedirect"] = self.videoRedirect!
            }
            if self.visualQuality != nil {
                map["VisualQuality"] = self.visualQuality!
            }
            if self.watermark != nil {
                map["Watermark"] = self.watermark!
            }
            if self.watermarkAntiCam != nil {
                map["WatermarkAntiCam"] = self.watermarkAntiCam!
            }
            if self.watermarkColor != nil {
                map["WatermarkColor"] = self.watermarkColor!
            }
            if self.watermarkCustomText != nil {
                map["WatermarkCustomText"] = self.watermarkCustomText!
            }
            if self.watermarkDegree != nil {
                map["WatermarkDegree"] = self.watermarkDegree!
            }
            if self.watermarkFontSize != nil {
                map["WatermarkFontSize"] = self.watermarkFontSize!
            }
            if self.watermarkFontStyle != nil {
                map["WatermarkFontStyle"] = self.watermarkFontStyle!
            }
            if self.watermarkPower != nil {
                map["WatermarkPower"] = self.watermarkPower!
            }
            if self.watermarkRowAmount != nil {
                map["WatermarkRowAmount"] = self.watermarkRowAmount!
            }
            if self.watermarkSecurity != nil {
                map["WatermarkSecurity"] = self.watermarkSecurity!
            }
            if self.watermarkTransparencyValue != nil {
                map["WatermarkTransparencyValue"] = self.watermarkTransparencyValue!
            }
            if self.watermarkType != nil {
                map["WatermarkType"] = self.watermarkType!
            }
            if self.wyAssistant != nil {
                map["WyAssistant"] = self.wyAssistant!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdminAccess"] as? String {
                self.adminAccess = value
            }
            if let value = dict["AppContentProtection"] as? String {
                self.appContentProtection = value
            }
            if let value = dict["AuthorizeAccessPolicyRules"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.AuthorizeAccessPolicyRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.AuthorizeAccessPolicyRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizeAccessPolicyRules = tmp
            }
            if let value = dict["AuthorizeSecurityPolicyRules"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.AuthorizeSecurityPolicyRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.AuthorizeSecurityPolicyRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizeSecurityPolicyRules = tmp
            }
            if let value = dict["CameraRedirect"] as? String {
                self.cameraRedirect = value
            }
            if let value = dict["ClientControlMenu"] as? String {
                self.clientControlMenu = value
            }
            if let value = dict["ClientTypes"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.ClientTypes] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.ClientTypes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.clientTypes = tmp
            }
            if let value = dict["Clipboard"] as? String {
                self.clipboard = value
            }
            if let value = dict["ColorEnhancement"] as? String {
                self.colorEnhancement = value
            }
            if let value = dict["CpdDriveClipboard"] as? String {
                self.cpdDriveClipboard = value
            }
            if let value = dict["CpuDownGradeDuration"] as? Int32 {
                self.cpuDownGradeDuration = value
            }
            if let value = dict["CpuProcessors"] as? [String] {
                self.cpuProcessors = value
            }
            if let value = dict["CpuProtectedMode"] as? String {
                self.cpuProtectedMode = value
            }
            if let value = dict["CpuRateLimit"] as? Int32 {
                self.cpuRateLimit = value
            }
            if let value = dict["CpuSampleDuration"] as? Int32 {
                self.cpuSampleDuration = value
            }
            if let value = dict["CpuSingleRateLimit"] as? Int32 {
                self.cpuSingleRateLimit = value
            }
            if let value = dict["DesktopCount"] as? Int32 {
                self.desktopCount = value
            }
            if let value = dict["DesktopGroupCount"] as? Int32 {
                self.desktopGroupCount = value
            }
            if let value = dict["DeviceRedirects"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DeviceRedirects] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DeviceRedirects()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deviceRedirects = tmp
            }
            if let value = dict["DeviceRules"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DeviceRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DeviceRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deviceRules = tmp
            }
            if let value = dict["DisconnectKeepSession"] as? String {
                self.disconnectKeepSession = value
            }
            if let value = dict["DisconnectKeepSessionTime"] as? Int32 {
                self.disconnectKeepSessionTime = value
            }
            if let value = dict["DisplayMode"] as? String {
                self.displayMode = value
            }
            if let value = dict["DomainRegisterValue"] as? String {
                self.domainRegisterValue = value
            }
            if let value = dict["DomainResolveRule"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DomainResolveRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.DomainResolveRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.domainResolveRule = tmp
            }
            if let value = dict["DomainResolveRuleType"] as? String {
                self.domainResolveRuleType = value
            }
            if let value = dict["EndUserApplyAdminCoordinate"] as? String {
                self.endUserApplyAdminCoordinate = value
            }
            if let value = dict["EndUserGroupCoordinate"] as? String {
                self.endUserGroupCoordinate = value
            }
            if let value = dict["FileTransferAddress"] as? String {
                self.fileTransferAddress = value
            }
            if let value = dict["FileTransferSpeed"] as? String {
                self.fileTransferSpeed = value
            }
            if let value = dict["FileTransferSpeedLocation"] as? String {
                self.fileTransferSpeedLocation = value
            }
            if let value = dict["GpuAcceleration"] as? String {
                self.gpuAcceleration = value
            }
            if let value = dict["Html5Access"] as? String {
                self.html5Access = value
            }
            if let value = dict["Html5FileTransfer"] as? String {
                self.html5FileTransfer = value
            }
            if let value = dict["InternetCommunicationProtocol"] as? String {
                self.internetCommunicationProtocol = value
            }
            if let value = dict["InternetPrinter"] as? String {
                self.internetPrinter = value
            }
            if let value = dict["LocalDrive"] as? String {
                self.localDrive = value
            }
            if let value = dict["MaxReconnectTime"] as? Int32 {
                self.maxReconnectTime = value
            }
            if let value = dict["MemoryDownGradeDuration"] as? Int32 {
                self.memoryDownGradeDuration = value
            }
            if let value = dict["MemoryProcessors"] as? [String] {
                self.memoryProcessors = value
            }
            if let value = dict["MemoryProtectedMode"] as? String {
                self.memoryProtectedMode = value
            }
            if let value = dict["MemoryRateLimit"] as? Int32 {
                self.memoryRateLimit = value
            }
            if let value = dict["MemorySampleDuration"] as? Int32 {
                self.memorySampleDuration = value
            }
            if let value = dict["MemorySingleRateLimit"] as? Int32 {
                self.memorySingleRateLimit = value
            }
            if let value = dict["MobileRestart"] as? String {
                self.mobileRestart = value
            }
            if let value = dict["MobileShutdown"] as? String {
                self.mobileShutdown = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NetRedirect"] as? String {
                self.netRedirect = value
            }
            if let value = dict["NetRedirectRule"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.NetRedirectRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.NetRedirectRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.netRedirectRule = tmp
            }
            if let value = dict["NoOperationDisconnect"] as? String {
                self.noOperationDisconnect = value
            }
            if let value = dict["NoOperationDisconnectTime"] as? Int32 {
                self.noOperationDisconnectTime = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["PolicyGroupType"] as? String {
                self.policyGroupType = value
            }
            if let value = dict["PolicyStatus"] as? String {
                self.policyStatus = value
            }
            if let value = dict["PrinterRedirection"] as? String {
                self.printerRedirection = value
            }
            if let value = dict["QualityEnhancement"] as? String {
                self.qualityEnhancement = value
            }
            if let value = dict["RecordContent"] as? String {
                self.recordContent = value
            }
            if let value = dict["RecordContentExpires"] as? Int64 {
                self.recordContentExpires = value
            }
            if let value = dict["RecordEventDuration"] as? Int32 {
                self.recordEventDuration = value
            }
            if let value = dict["RecordEventFilePaths"] as? [String] {
                self.recordEventFilePaths = value
            }
            if let value = dict["RecordEventRegisters"] as? [String] {
                self.recordEventRegisters = value
            }
            if let value = dict["Recording"] as? String {
                self.recording = value
            }
            if let value = dict["RecordingAudio"] as? String {
                self.recordingAudio = value
            }
            if let value = dict["RecordingDuration"] as? Int32 {
                self.recordingDuration = value
            }
            if let value = dict["RecordingEndTime"] as? String {
                self.recordingEndTime = value
            }
            if let value = dict["RecordingExpires"] as? Int64 {
                self.recordingExpires = value
            }
            if let value = dict["RecordingFps"] as? Int64 {
                self.recordingFps = value
            }
            if let value = dict["RecordingStartTime"] as? String {
                self.recordingStartTime = value
            }
            if let value = dict["RecordingUserNotify"] as? String {
                self.recordingUserNotify = value
            }
            if let value = dict["RecordingUserNotifyMessage"] as? String {
                self.recordingUserNotifyMessage = value
            }
            if let value = dict["RemoteCoordinate"] as? String {
                self.remoteCoordinate = value
            }
            if let value = dict["ResolutionHeight"] as? Int32 {
                self.resolutionHeight = value
            }
            if let value = dict["ResolutionModel"] as? String {
                self.resolutionModel = value
            }
            if let value = dict["ResolutionWidth"] as? Int32 {
                self.resolutionWidth = value
            }
            if let value = dict["ResourceGroupCount"] as? Int32 {
                self.resourceGroupCount = value
            }
            if let value = dict["SafeMenu"] as? String {
                self.safeMenu = value
            }
            if let value = dict["Scope"] as? String {
                self.scope = value
            }
            if let value = dict["ScopeValue"] as? [String] {
                self.scopeValue = value
            }
            if let value = dict["ScreenDisplayMode"] as? String {
                self.screenDisplayMode = value
            }
            if let value = dict["SmoothEnhancement"] as? String {
                self.smoothEnhancement = value
            }
            if let value = dict["StatusMonitor"] as? String {
                self.statusMonitor = value
            }
            if let value = dict["StreamingMode"] as? String {
                self.streamingMode = value
            }
            if let value = dict["TargetFps"] as? Int32 {
                self.targetFps = value
            }
            if let value = dict["Taskbar"] as? String {
                self.taskbar = value
            }
            if let value = dict["UsbRedirect"] as? String {
                self.usbRedirect = value
            }
            if let value = dict["UsbSupplyRedirectRule"] as? [Any?] {
                var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups.UsbSupplyRedirectRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups.UsbSupplyRedirectRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.usbSupplyRedirectRule = tmp
            }
            if let value = dict["UseTime"] as? String {
                self.useTime = value
            }
            if let value = dict["VideoEncAvgKbps"] as? Int32 {
                self.videoEncAvgKbps = value
            }
            if let value = dict["VideoEncMaxQP"] as? Int32 {
                self.videoEncMaxQP = value
            }
            if let value = dict["VideoEncMinQP"] as? Int32 {
                self.videoEncMinQP = value
            }
            if let value = dict["VideoEncPeakKbps"] as? Int32 {
                self.videoEncPeakKbps = value
            }
            if let value = dict["VideoEncPolicy"] as? String {
                self.videoEncPolicy = value
            }
            if let value = dict["VideoRedirect"] as? String {
                self.videoRedirect = value
            }
            if let value = dict["VisualQuality"] as? String {
                self.visualQuality = value
            }
            if let value = dict["Watermark"] as? String {
                self.watermark = value
            }
            if let value = dict["WatermarkAntiCam"] as? String {
                self.watermarkAntiCam = value
            }
            if let value = dict["WatermarkColor"] as? Int32 {
                self.watermarkColor = value
            }
            if let value = dict["WatermarkCustomText"] as? String {
                self.watermarkCustomText = value
            }
            if let value = dict["WatermarkDegree"] as? Double {
                self.watermarkDegree = value
            }
            if let value = dict["WatermarkFontSize"] as? Int32 {
                self.watermarkFontSize = value
            }
            if let value = dict["WatermarkFontStyle"] as? String {
                self.watermarkFontStyle = value
            }
            if let value = dict["WatermarkPower"] as? String {
                self.watermarkPower = value
            }
            if let value = dict["WatermarkRowAmount"] as? Int32 {
                self.watermarkRowAmount = value
            }
            if let value = dict["WatermarkSecurity"] as? String {
                self.watermarkSecurity = value
            }
            if let value = dict["WatermarkTransparencyValue"] as? Int32 {
                self.watermarkTransparencyValue = value
            }
            if let value = dict["WatermarkType"] as? String {
                self.watermarkType = value
            }
            if let value = dict["WyAssistant"] as? String {
                self.wyAssistant = value
            }
        }
    }
    public var describePolicyGroups: [DescribeCenterPolicyListResponseBody.DescribePolicyGroups]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.describePolicyGroups != nil {
            var tmp : [Any] = []
            for k in self.describePolicyGroups! {
                tmp.append(k.toMap())
            }
            map["DescribePolicyGroups"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DescribePolicyGroups"] as? [Any?] {
            var tmp : [DescribeCenterPolicyListResponseBody.DescribePolicyGroups] = []
            for v in value {
                if v != nil {
                    var model = DescribeCenterPolicyListResponseBody.DescribePolicyGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.describePolicyGroups = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeCenterPolicyListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCenterPolicyListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCenterPolicyListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeClientEventsRequest : Tea.TeaModel {
    public var desktopId: String?

    public var desktopIp: String?

    public var desktopName: String?

    public var directoryId: String?

    public var endTime: String?

    public var endUserId: String?

    public var eventType: String?

    public var eventTypes: [String]?

    public var fillHardwareInfo: Bool?

    public var language: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var officeSiteName: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopIp != nil {
            map["DesktopIp"] = self.desktopIp!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.eventTypes != nil {
            map["EventTypes"] = self.eventTypes!
        }
        if self.fillHardwareInfo != nil {
            map["FillHardwareInfo"] = self.fillHardwareInfo!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DesktopIp"] as? String {
            self.desktopIp = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["EventTypes"] as? [String] {
            self.eventTypes = value
        }
        if let value = dict["FillHardwareInfo"] as? Bool {
            self.fillHardwareInfo = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeClientEventsResponseBody : Tea.TeaModel {
    public class Events : Tea.TeaModel {
        public class TerminalInfo : Tea.TeaModel {
            public var model: String?

            public var productName: String?

            public var serialNumber: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.model != nil {
                    map["Model"] = self.model!
                }
                if self.productName != nil {
                    map["ProductName"] = self.productName!
                }
                if self.serialNumber != nil {
                    map["SerialNumber"] = self.serialNumber!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Model"] as? String {
                    self.model = value
                }
                if let value = dict["ProductName"] as? String {
                    self.productName = value
                }
                if let value = dict["SerialNumber"] as? String {
                    self.serialNumber = value
                }
            }
        }
        public var aliUid: String?

        public var bytesReceived: String?

        public var bytesSend: String?

        public var clientIp: String?

        public var clientOS: String?

        public var clientVersion: String?

        public var description_: String?

        public var desktopGroupId: String?

        public var desktopGroupName: String?

        public var desktopId: String?

        public var desktopIp: String?

        public var desktopName: String?

        public var directoryId: String?

        public var directoryType: String?

        public var endUserId: String?

        public var eventId: String?

        public var eventTime: String?

        public var eventType: String?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSiteType: String?

        public var regionId: String?

        public var status: String?

        public var terminalInfo: DescribeClientEventsResponseBody.Events.TerminalInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.terminalInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.bytesReceived != nil {
                map["BytesReceived"] = self.bytesReceived!
            }
            if self.bytesSend != nil {
                map["BytesSend"] = self.bytesSend!
            }
            if self.clientIp != nil {
                map["ClientIp"] = self.clientIp!
            }
            if self.clientOS != nil {
                map["ClientOS"] = self.clientOS!
            }
            if self.clientVersion != nil {
                map["ClientVersion"] = self.clientVersion!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.desktopGroupName != nil {
                map["DesktopGroupName"] = self.desktopGroupName!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopIp != nil {
                map["DesktopIp"] = self.desktopIp!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.directoryType != nil {
                map["DirectoryType"] = self.directoryType!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.eventId != nil {
                map["EventId"] = self.eventId!
            }
            if self.eventTime != nil {
                map["EventTime"] = self.eventTime!
            }
            if self.eventType != nil {
                map["EventType"] = self.eventType!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSiteType != nil {
                map["OfficeSiteType"] = self.officeSiteType!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.terminalInfo != nil {
                map["TerminalInfo"] = self.terminalInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? String {
                self.aliUid = value
            }
            if let value = dict["BytesReceived"] as? String {
                self.bytesReceived = value
            }
            if let value = dict["BytesSend"] as? String {
                self.bytesSend = value
            }
            if let value = dict["ClientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["ClientOS"] as? String {
                self.clientOS = value
            }
            if let value = dict["ClientVersion"] as? String {
                self.clientVersion = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["DesktopGroupName"] as? String {
                self.desktopGroupName = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopIp"] as? String {
                self.desktopIp = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["DirectoryType"] as? String {
                self.directoryType = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["EventId"] as? String {
                self.eventId = value
            }
            if let value = dict["EventTime"] as? String {
                self.eventTime = value
            }
            if let value = dict["EventType"] as? String {
                self.eventType = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSiteType"] as? String {
                self.officeSiteType = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TerminalInfo"] as? [String: Any?] {
                var model = DescribeClientEventsResponseBody.Events.TerminalInfo()
                model.fromMap(value)
                self.terminalInfo = model
            }
        }
    }
    public var events: [DescribeClientEventsResponseBody.Events]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.events != nil {
            var tmp : [Any] = []
            for k in self.events! {
                tmp.append(k.toMap())
            }
            map["Events"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Events"] as? [Any?] {
            var tmp : [DescribeClientEventsResponseBody.Events] = []
            for v in value {
                if v != nil {
                    var model = DescribeClientEventsResponseBody.Events()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.events = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeClientEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeClientEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeClientEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCloudDriveGroupsRequest : Tea.TeaModel {
    public var cdsId: String?

    public var directoryId: String?

    public var directoryName: String?

    public var driveStatus: String?

    public var driveType: String?

    public var groupId: [String]?

    public var groupName: String?

    public var groupType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var parentGroupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.directoryName != nil {
            map["DirectoryName"] = self.directoryName!
        }
        if self.driveStatus != nil {
            map["DriveStatus"] = self.driveStatus!
        }
        if self.driveType != nil {
            map["DriveType"] = self.driveType!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.groupType != nil {
            map["GroupType"] = self.groupType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.parentGroupId != nil {
            map["ParentGroupId"] = self.parentGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["DirectoryName"] as? String {
            self.directoryName = value
        }
        if let value = dict["DriveStatus"] as? String {
            self.driveStatus = value
        }
        if let value = dict["DriveType"] as? String {
            self.driveType = value
        }
        if let value = dict["GroupId"] as? [String] {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["GroupType"] as? String {
            self.groupType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ParentGroupId"] as? String {
            self.parentGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeCloudDriveGroupsResponseBody : Tea.TeaModel {
    public class CloudDriveGroups : Tea.TeaModel {
        public class AdminUserInfos : Tea.TeaModel {
            public var email: String?

            public var endUserId: String?

            public var jobNumber: String?

            public var nickName: String?

            public var phone: String?

            public var realNickName: String?

            public var remark: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.endUserId != nil {
                    map["EndUserId"] = self.endUserId!
                }
                if self.jobNumber != nil {
                    map["JobNumber"] = self.jobNumber!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                if self.realNickName != nil {
                    map["RealNickName"] = self.realNickName!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["EndUserId"] as? String {
                    self.endUserId = value
                }
                if let value = dict["JobNumber"] as? String {
                    self.jobNumber = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["Phone"] as? String {
                    self.phone = value
                }
                if let value = dict["RealNickName"] as? String {
                    self.realNickName = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
            }
        }
        public var adminUserIds: String?

        public var adminUserInfos: [DescribeCloudDriveGroupsResponseBody.CloudDriveGroups.AdminUserInfos]?

        public var createTime: String?

        public var directoryId: String?

        public var driveId: String?

        public var groupId: String?

        public var groupName: String?

        public var orgId: String?

        public var recycleBinSize: String?

        public var status: String?

        public var totalSize: Int64?

        public var usedSize: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adminUserIds != nil {
                map["AdminUserIds"] = self.adminUserIds!
            }
            if self.adminUserInfos != nil {
                var tmp : [Any] = []
                for k in self.adminUserInfos! {
                    tmp.append(k.toMap())
                }
                map["AdminUserInfos"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.driveId != nil {
                map["DriveId"] = self.driveId!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.orgId != nil {
                map["OrgId"] = self.orgId!
            }
            if self.recycleBinSize != nil {
                map["RecycleBinSize"] = self.recycleBinSize!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalSize != nil {
                map["TotalSize"] = self.totalSize!
            }
            if self.usedSize != nil {
                map["UsedSize"] = self.usedSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdminUserIds"] as? String {
                self.adminUserIds = value
            }
            if let value = dict["AdminUserInfos"] as? [Any?] {
                var tmp : [DescribeCloudDriveGroupsResponseBody.CloudDriveGroups.AdminUserInfos] = []
                for v in value {
                    if v != nil {
                        var model = DescribeCloudDriveGroupsResponseBody.CloudDriveGroups.AdminUserInfos()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.adminUserInfos = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["DriveId"] as? String {
                self.driveId = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["OrgId"] as? String {
                self.orgId = value
            }
            if let value = dict["RecycleBinSize"] as? String {
                self.recycleBinSize = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TotalSize"] as? Int64 {
                self.totalSize = value
            }
            if let value = dict["UsedSize"] as? String {
                self.usedSize = value
            }
        }
    }
    public var cloudDriveGroups: [DescribeCloudDriveGroupsResponseBody.CloudDriveGroups]?

    public var count: Int64?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cloudDriveGroups != nil {
            var tmp : [Any] = []
            for k in self.cloudDriveGroups! {
                tmp.append(k.toMap())
            }
            map["CloudDriveGroups"] = tmp
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CloudDriveGroups"] as? [Any?] {
            var tmp : [DescribeCloudDriveGroupsResponseBody.CloudDriveGroups] = []
            for v in value {
                if v != nil {
                    var model = DescribeCloudDriveGroupsResponseBody.CloudDriveGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cloudDriveGroups = tmp
        }
        if let value = dict["Count"] as? Int64 {
            self.count = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeCloudDriveGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCloudDriveGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCloudDriveGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCloudDrivePermissionsRequest : Tea.TeaModel {
    public var cdsId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeCloudDrivePermissionsResponseBody : Tea.TeaModel {
    public class CloudDrivePermissionModels : Tea.TeaModel {
        public var endUsers: [String]?

        public var permission: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endUsers != nil {
                map["EndUsers"] = self.endUsers!
            }
            if self.permission != nil {
                map["Permission"] = self.permission!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndUsers"] as? [String] {
                self.endUsers = value
            }
            if let value = dict["Permission"] as? String {
                self.permission = value
            }
        }
    }
    public var cloudDrivePermissionModels: [DescribeCloudDrivePermissionsResponseBody.CloudDrivePermissionModels]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cloudDrivePermissionModels != nil {
            var tmp : [Any] = []
            for k in self.cloudDrivePermissionModels! {
                tmp.append(k.toMap())
            }
            map["CloudDrivePermissionModels"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CloudDrivePermissionModels"] as? [Any?] {
            var tmp : [DescribeCloudDrivePermissionsResponseBody.CloudDrivePermissionModels] = []
            for v in value {
                if v != nil {
                    var model = DescribeCloudDrivePermissionsResponseBody.CloudDrivePermissionModels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cloudDrivePermissionModels = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeCloudDrivePermissionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCloudDrivePermissionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCloudDrivePermissionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCloudDriveUsersRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeCloudDriveUsersResponseBody : Tea.TeaModel {
    public class CloudDriveUsers : Tea.TeaModel {
        public var driveId: String?

        public var endUserId: String?

        public var status: String?

        public var totalSize: Int64?

        public var usedSize: Int64?

        public var userId: String?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.driveId != nil {
                map["DriveId"] = self.driveId!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalSize != nil {
                map["TotalSize"] = self.totalSize!
            }
            if self.usedSize != nil {
                map["UsedSize"] = self.usedSize!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DriveId"] as? String {
                self.driveId = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TotalSize"] as? Int64 {
                self.totalSize = value
            }
            if let value = dict["UsedSize"] as? Int64 {
                self.usedSize = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public var cloudDriveUsers: [DescribeCloudDriveUsersResponseBody.CloudDriveUsers]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cloudDriveUsers != nil {
            var tmp : [Any] = []
            for k in self.cloudDriveUsers! {
                tmp.append(k.toMap())
            }
            map["CloudDriveUsers"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CloudDriveUsers"] as? [Any?] {
            var tmp : [DescribeCloudDriveUsersResponseBody.CloudDriveUsers] = []
            for v in value {
                if v != nil {
                    var model = DescribeCloudDriveUsersResponseBody.CloudDriveUsers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cloudDriveUsers = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeCloudDriveUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCloudDriveUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCloudDriveUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeConfigGroupRequest : Tea.TeaModel {
    public var groupId: String?

    public var groupIds: [String]?

    public var name: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var productType: String?

    public var regionId: String?

    public var statuses: [String]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupIds != nil {
            map["GroupIds"] = self.groupIds!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.statuses != nil {
            map["Statuses"] = self.statuses!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupIds"] as? [String] {
            self.groupIds = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Statuses"] as? [String] {
            self.statuses = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeConfigGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var bindCount: Int32?

        public var bindCountMap: [String: Int32]?

        public var description_: String?

        public var groupId: String?

        public var name: String?

        public var productType: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindCount != nil {
                map["BindCount"] = self.bindCount!
            }
            if self.bindCountMap != nil {
                map["BindCountMap"] = self.bindCountMap!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindCount"] as? Int32 {
                self.bindCount = value
            }
            if let value = dict["BindCountMap"] as? [String: Int32] {
                self.bindCountMap = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var data: [DescribeConfigGroupResponseBody.Data]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeConfigGroupResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeConfigGroupResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeConfigGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeConfigGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeConfigGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomizedListHeadersRequest : Tea.TeaModel {
    public var langType: String?

    public var listType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.langType != nil {
            map["LangType"] = self.langType!
        }
        if self.listType != nil {
            map["ListType"] = self.listType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LangType"] as? String {
            self.langType = value
        }
        if let value = dict["ListType"] as? String {
            self.listType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeCustomizedListHeadersResponseBody : Tea.TeaModel {
    public class Headers : Tea.TeaModel {
        public var displayType: String?

        public var headerKey: String?

        public var headerName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayType != nil {
                map["DisplayType"] = self.displayType!
            }
            if self.headerKey != nil {
                map["HeaderKey"] = self.headerKey!
            }
            if self.headerName != nil {
                map["HeaderName"] = self.headerName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayType"] as? String {
                self.displayType = value
            }
            if let value = dict["HeaderKey"] as? String {
                self.headerKey = value
            }
            if let value = dict["HeaderName"] as? String {
                self.headerName = value
            }
        }
    }
    public var headers: [DescribeCustomizedListHeadersResponseBody.Headers]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            var tmp : [Any] = []
            for k in self.headers! {
                tmp.append(k.toMap())
            }
            map["Headers"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Headers"] as? [Any?] {
            var tmp : [DescribeCustomizedListHeadersResponseBody.Headers] = []
            for v in value {
                if v != nil {
                    var model = DescribeCustomizedListHeadersResponseBody.Headers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.headers = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeCustomizedListHeadersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomizedListHeadersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomizedListHeadersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopGroupSessionsRequest : Tea.TeaModel {
    public var endTime: String?

    public var endUserId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var ownType: Int32?

    public var regionId: String?

    public var sessionStatus: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownType != nil {
            map["OwnType"] = self.ownType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sessionStatus != nil {
            map["SessionStatus"] = self.sessionStatus!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnType"] as? Int32 {
            self.ownType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SessionStatus"] as? String {
            self.sessionStatus = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeDesktopGroupSessionsResponseBody : Tea.TeaModel {
    public class Sessions : Tea.TeaModel {
        public var clientIp: String?

        public var clientOS: String?

        public var clientVersion: String?

        public var desktopGroupId: String?

        public var desktopGroupName: String?

        public var desktopId: String?

        public var endUserApplyCoordinateTime: Int64?

        public var endUserId: String?

        public var lastSessionEndTime: String?

        public var lastSessionStartTime: String?

        public var latestConnectionTime: Int64?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var osType: String?

        public var ownType: Int32?

        public var protocolType: String?

        public var sessionIdleTime: Int64?

        public var sessionStatus: String?

        public var totalConnectionDuration: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientIp != nil {
                map["ClientIp"] = self.clientIp!
            }
            if self.clientOS != nil {
                map["ClientOS"] = self.clientOS!
            }
            if self.clientVersion != nil {
                map["ClientVersion"] = self.clientVersion!
            }
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.desktopGroupName != nil {
                map["DesktopGroupName"] = self.desktopGroupName!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.endUserApplyCoordinateTime != nil {
                map["EndUserApplyCoordinateTime"] = self.endUserApplyCoordinateTime!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.lastSessionEndTime != nil {
                map["LastSessionEndTime"] = self.lastSessionEndTime!
            }
            if self.lastSessionStartTime != nil {
                map["LastSessionStartTime"] = self.lastSessionStartTime!
            }
            if self.latestConnectionTime != nil {
                map["LatestConnectionTime"] = self.latestConnectionTime!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.ownType != nil {
                map["OwnType"] = self.ownType!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.sessionIdleTime != nil {
                map["SessionIdleTime"] = self.sessionIdleTime!
            }
            if self.sessionStatus != nil {
                map["SessionStatus"] = self.sessionStatus!
            }
            if self.totalConnectionDuration != nil {
                map["TotalConnectionDuration"] = self.totalConnectionDuration!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["ClientOS"] as? String {
                self.clientOS = value
            }
            if let value = dict["ClientVersion"] as? String {
                self.clientVersion = value
            }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["DesktopGroupName"] as? String {
                self.desktopGroupName = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["EndUserApplyCoordinateTime"] as? Int64 {
                self.endUserApplyCoordinateTime = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["LastSessionEndTime"] as? String {
                self.lastSessionEndTime = value
            }
            if let value = dict["LastSessionStartTime"] as? String {
                self.lastSessionStartTime = value
            }
            if let value = dict["LatestConnectionTime"] as? Int64 {
                self.latestConnectionTime = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["OwnType"] as? Int32 {
                self.ownType = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["SessionIdleTime"] as? Int64 {
                self.sessionIdleTime = value
            }
            if let value = dict["SessionStatus"] as? String {
                self.sessionStatus = value
            }
            if let value = dict["TotalConnectionDuration"] as? Int64 {
                self.totalConnectionDuration = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var sessions: [DescribeDesktopGroupSessionsResponseBody.Sessions]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sessions != nil {
            var tmp : [Any] = []
            for k in self.sessions! {
                tmp.append(k.toMap())
            }
            map["Sessions"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Sessions"] as? [Any?] {
            var tmp : [DescribeDesktopGroupSessionsResponseBody.Sessions] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopGroupSessionsResponseBody.Sessions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sessions = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDesktopGroupSessionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopGroupSessionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopGroupSessionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopGroupsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var bundleId: [String]?

    public var desktopGroupId: String?

    public var desktopGroupIds: [String]?

    public var desktopGroupName: String?

    public var desktopType: String?

    public var endUserIds: [String]?

    public var excludedEndUserIds: [String]?

    public var imageId: [String]?

    public var maxResults: Int32?

    public var multiResource: Bool?

    public var nextToken: String?

    public var officeSiteId: String?

    public var ownType: Int64?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var protocolType: String?

    public var regionId: String?

    public var status: Int32?

    public var tag: [DescribeDesktopGroupsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupIds != nil {
            map["DesktopGroupIds"] = self.desktopGroupIds!
        }
        if self.desktopGroupName != nil {
            map["DesktopGroupName"] = self.desktopGroupName!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.endUserIds != nil {
            map["EndUserIds"] = self.endUserIds!
        }
        if self.excludedEndUserIds != nil {
            map["ExcludedEndUserIds"] = self.excludedEndUserIds!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.multiResource != nil {
            map["MultiResource"] = self.multiResource!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.ownType != nil {
            map["OwnType"] = self.ownType!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleId"] as? [String] {
            self.bundleId = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupIds"] as? [String] {
            self.desktopGroupIds = value
        }
        if let value = dict["DesktopGroupName"] as? String {
            self.desktopGroupName = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["EndUserIds"] as? [String] {
            self.endUserIds = value
        }
        if let value = dict["ExcludedEndUserIds"] as? [String] {
            self.excludedEndUserIds = value
        }
        if let value = dict["ImageId"] as? [String] {
            self.imageId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["MultiResource"] as? Bool {
            self.multiResource = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OwnType"] as? Int64 {
            self.ownType = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["ProtocolType"] as? String {
            self.protocolType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeDesktopGroupsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopGroupsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeDesktopGroupsResponseBody : Tea.TeaModel {
    public class DesktopGroups : Tea.TeaModel {
        public class CountPerStatus : Tea.TeaModel {
            public var count: Int32?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.count != nil {
                    map["Count"] = self.count!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Count"] as? Int32 {
                    self.count = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var bindAmount: Int64?

        public var buyDesktopsCount: Int32?

        public var comments: String?

        public var connectDuration: Int64?

        public var countPerStatus: [DescribeDesktopGroupsResponseBody.DesktopGroups.CountPerStatus]?

        public var cpu: Int32?

        public var createTime: String?

        public var creator: String?

        public var dataDiskCategory: String?

        public var dataDiskSize: String?

        public var desktopCount: Int32?

        public var desktopGroupId: String?

        public var desktopGroupName: String?

        public var desktopType: String?

        public var endUserCount: Int32?

        public var expiredTime: String?

        public var expiredTimes: [String]?

        public var gpuCount: Double?

        public var gpuDriverVersion: String?

        public var gpuSpec: String?

        public var idleDisconnectDuration: Int64?

        public var imageId: String?

        public var isLdap: Bool?

        public var keepDuration: Int64?

        public var loadPolicy: Int64?

        public var maxDesktopsCount: Int32?

        public var memory: Int64?

        public var minDesktopsCount: Int32?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSiteType: String?

        public var osType: String?

        public var ownBundleId: String?

        public var ownBundleName: String?

        public var ownType: Int64?

        public var payType: String?

        public var policyGroupId: String?

        public var policyGroupIdList: [String]?

        public var policyGroupName: String?

        public var policyGroupNameList: [String]?

        public var protocolType: String?

        public var ratioThreshold: Double?

        public var resetType: Int64?

        public var simpleUserGroupId: String?

        public var status: Int32?

        public var stopDuration: Int64?

        public var subnetId: String?

        public var systemDiskCategory: String?

        public var systemDiskSize: Int32?

        public var tags: [DescribeDesktopGroupsResponseBody.DesktopGroups.Tags]?

        public var userGroupName: String?

        public var userOuPath: String?

        public var version: Int32?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindAmount != nil {
                map["BindAmount"] = self.bindAmount!
            }
            if self.buyDesktopsCount != nil {
                map["BuyDesktopsCount"] = self.buyDesktopsCount!
            }
            if self.comments != nil {
                map["Comments"] = self.comments!
            }
            if self.connectDuration != nil {
                map["ConnectDuration"] = self.connectDuration!
            }
            if self.countPerStatus != nil {
                var tmp : [Any] = []
                for k in self.countPerStatus! {
                    tmp.append(k.toMap())
                }
                map["CountPerStatus"] = tmp
            }
            if self.cpu != nil {
                map["Cpu"] = self.cpu!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.dataDiskCategory != nil {
                map["DataDiskCategory"] = self.dataDiskCategory!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.desktopCount != nil {
                map["DesktopCount"] = self.desktopCount!
            }
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.desktopGroupName != nil {
                map["DesktopGroupName"] = self.desktopGroupName!
            }
            if self.desktopType != nil {
                map["DesktopType"] = self.desktopType!
            }
            if self.endUserCount != nil {
                map["EndUserCount"] = self.endUserCount!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.expiredTimes != nil {
                map["ExpiredTimes"] = self.expiredTimes!
            }
            if self.gpuCount != nil {
                map["GpuCount"] = self.gpuCount!
            }
            if self.gpuDriverVersion != nil {
                map["GpuDriverVersion"] = self.gpuDriverVersion!
            }
            if self.gpuSpec != nil {
                map["GpuSpec"] = self.gpuSpec!
            }
            if self.idleDisconnectDuration != nil {
                map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.isLdap != nil {
                map["IsLdap"] = self.isLdap!
            }
            if self.keepDuration != nil {
                map["KeepDuration"] = self.keepDuration!
            }
            if self.loadPolicy != nil {
                map["LoadPolicy"] = self.loadPolicy!
            }
            if self.maxDesktopsCount != nil {
                map["MaxDesktopsCount"] = self.maxDesktopsCount!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.minDesktopsCount != nil {
                map["MinDesktopsCount"] = self.minDesktopsCount!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSiteType != nil {
                map["OfficeSiteType"] = self.officeSiteType!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.ownBundleId != nil {
                map["OwnBundleId"] = self.ownBundleId!
            }
            if self.ownBundleName != nil {
                map["OwnBundleName"] = self.ownBundleName!
            }
            if self.ownType != nil {
                map["OwnType"] = self.ownType!
            }
            if self.payType != nil {
                map["PayType"] = self.payType!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.policyGroupIdList != nil {
                map["PolicyGroupIdList"] = self.policyGroupIdList!
            }
            if self.policyGroupName != nil {
                map["PolicyGroupName"] = self.policyGroupName!
            }
            if self.policyGroupNameList != nil {
                map["PolicyGroupNameList"] = self.policyGroupNameList!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.ratioThreshold != nil {
                map["RatioThreshold"] = self.ratioThreshold!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.simpleUserGroupId != nil {
                map["SimpleUserGroupId"] = self.simpleUserGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.stopDuration != nil {
                map["StopDuration"] = self.stopDuration!
            }
            if self.subnetId != nil {
                map["SubnetId"] = self.subnetId!
            }
            if self.systemDiskCategory != nil {
                map["SystemDiskCategory"] = self.systemDiskCategory!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.userGroupName != nil {
                map["UserGroupName"] = self.userGroupName!
            }
            if self.userOuPath != nil {
                map["UserOuPath"] = self.userOuPath!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindAmount"] as? Int64 {
                self.bindAmount = value
            }
            if let value = dict["BuyDesktopsCount"] as? Int32 {
                self.buyDesktopsCount = value
            }
            if let value = dict["Comments"] as? String {
                self.comments = value
            }
            if let value = dict["ConnectDuration"] as? Int64 {
                self.connectDuration = value
            }
            if let value = dict["CountPerStatus"] as? [Any?] {
                var tmp : [DescribeDesktopGroupsResponseBody.DesktopGroups.CountPerStatus] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopGroupsResponseBody.DesktopGroups.CountPerStatus()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.countPerStatus = tmp
            }
            if let value = dict["Cpu"] as? Int32 {
                self.cpu = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["DataDiskCategory"] as? String {
                self.dataDiskCategory = value
            }
            if let value = dict["DataDiskSize"] as? String {
                self.dataDiskSize = value
            }
            if let value = dict["DesktopCount"] as? Int32 {
                self.desktopCount = value
            }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["DesktopGroupName"] as? String {
                self.desktopGroupName = value
            }
            if let value = dict["DesktopType"] as? String {
                self.desktopType = value
            }
            if let value = dict["EndUserCount"] as? Int32 {
                self.endUserCount = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["ExpiredTimes"] as? [String] {
                self.expiredTimes = value
            }
            if let value = dict["GpuCount"] as? Double {
                self.gpuCount = value
            }
            if let value = dict["GpuDriverVersion"] as? String {
                self.gpuDriverVersion = value
            }
            if let value = dict["GpuSpec"] as? String {
                self.gpuSpec = value
            }
            if let value = dict["IdleDisconnectDuration"] as? Int64 {
                self.idleDisconnectDuration = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["IsLdap"] as? Bool {
                self.isLdap = value
            }
            if let value = dict["KeepDuration"] as? Int64 {
                self.keepDuration = value
            }
            if let value = dict["LoadPolicy"] as? Int64 {
                self.loadPolicy = value
            }
            if let value = dict["MaxDesktopsCount"] as? Int32 {
                self.maxDesktopsCount = value
            }
            if let value = dict["Memory"] as? Int64 {
                self.memory = value
            }
            if let value = dict["MinDesktopsCount"] as? Int32 {
                self.minDesktopsCount = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSiteType"] as? String {
                self.officeSiteType = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["OwnBundleId"] as? String {
                self.ownBundleId = value
            }
            if let value = dict["OwnBundleName"] as? String {
                self.ownBundleName = value
            }
            if let value = dict["OwnType"] as? Int64 {
                self.ownType = value
            }
            if let value = dict["PayType"] as? String {
                self.payType = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["PolicyGroupIdList"] as? [String] {
                self.policyGroupIdList = value
            }
            if let value = dict["PolicyGroupName"] as? String {
                self.policyGroupName = value
            }
            if let value = dict["PolicyGroupNameList"] as? [String] {
                self.policyGroupNameList = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["RatioThreshold"] as? Double {
                self.ratioThreshold = value
            }
            if let value = dict["ResetType"] as? Int64 {
                self.resetType = value
            }
            if let value = dict["SimpleUserGroupId"] as? String {
                self.simpleUserGroupId = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["StopDuration"] as? Int64 {
                self.stopDuration = value
            }
            if let value = dict["SubnetId"] as? String {
                self.subnetId = value
            }
            if let value = dict["SystemDiskCategory"] as? String {
                self.systemDiskCategory = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [DescribeDesktopGroupsResponseBody.DesktopGroups.Tags] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopGroupsResponseBody.DesktopGroups.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["UserGroupName"] as? String {
                self.userGroupName = value
            }
            if let value = dict["UserOuPath"] as? String {
                self.userOuPath = value
            }
            if let value = dict["Version"] as? Int32 {
                self.version = value
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public var desktopGroups: [DescribeDesktopGroupsResponseBody.DesktopGroups]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroups != nil {
            var tmp : [Any] = []
            for k in self.desktopGroups! {
                tmp.append(k.toMap())
            }
            map["DesktopGroups"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroups"] as? [Any?] {
            var tmp : [DescribeDesktopGroupsResponseBody.DesktopGroups] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopGroupsResponseBody.DesktopGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopGroups = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDesktopGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopInfoRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var needExtraInfo: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.needExtraInfo != nil {
            map["NeedExtraInfo"] = self.needExtraInfo!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["NeedExtraInfo"] as? Bool {
            self.needExtraInfo = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeDesktopInfoResponseBody : Tea.TeaModel {
    public class Desktops : Tea.TeaModel {
        public var connectionStatus: String?

        public var currentAppVersion: String?

        public var desktopGroupId: String?

        public var desktopId: String?

        public var desktopStatus: String?

        public var managementFlag: [String]?

        public var newAppSize: Int64?

        public var newAppVersion: String?

        public var releaseNote: String?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectionStatus != nil {
                map["ConnectionStatus"] = self.connectionStatus!
            }
            if self.currentAppVersion != nil {
                map["CurrentAppVersion"] = self.currentAppVersion!
            }
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopStatus != nil {
                map["DesktopStatus"] = self.desktopStatus!
            }
            if self.managementFlag != nil {
                map["ManagementFlag"] = self.managementFlag!
            }
            if self.newAppSize != nil {
                map["NewAppSize"] = self.newAppSize!
            }
            if self.newAppVersion != nil {
                map["NewAppVersion"] = self.newAppVersion!
            }
            if self.releaseNote != nil {
                map["ReleaseNote"] = self.releaseNote!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectionStatus"] as? String {
                self.connectionStatus = value
            }
            if let value = dict["CurrentAppVersion"] as? String {
                self.currentAppVersion = value
            }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopStatus"] as? String {
                self.desktopStatus = value
            }
            if let value = dict["ManagementFlag"] as? [String] {
                self.managementFlag = value
            }
            if let value = dict["NewAppSize"] as? Int64 {
                self.newAppSize = value
            }
            if let value = dict["NewAppVersion"] as? String {
                self.newAppVersion = value
            }
            if let value = dict["ReleaseNote"] as? String {
                self.releaseNote = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var desktops: [DescribeDesktopInfoResponseBody.Desktops]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktops != nil {
            var tmp : [Any] = []
            for k in self.desktops! {
                tmp.append(k.toMap())
            }
            map["Desktops"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Desktops"] as? [Any?] {
            var tmp : [DescribeDesktopInfoResponseBody.Desktops] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopInfoResponseBody.Desktops()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktops = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDesktopInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopOversoldGroupRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var oversoldGroupIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.oversoldGroupIds != nil {
            map["OversoldGroupIds"] = self.oversoldGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OversoldGroupIds"] as? [String] {
            self.oversoldGroupIds = value
        }
    }
}

public class DescribeDesktopOversoldGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var concurrenceCount: Int32?

        public var curConcurrenceCount: Int32?

        public var dataDiskSize: Int32?

        public var description_: String?

        public var desktopType: String?

        public var directoryId: String?

        public var expireTime: String?

        public var idleDisconnectDuration: String?

        public var imageId: String?

        public var keepDuration: String?

        public var name: String?

        public var oversoldGroupId: String?

        public var oversoldUserCount: Int32?

        public var oversoldWarn: Int32?

        public var policyGroupId: String?

        public var saleStatus: String?

        public var status: String?

        public var stopDuration: Int64?

        public var systemDiskSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.concurrenceCount != nil {
                map["ConcurrenceCount"] = self.concurrenceCount!
            }
            if self.curConcurrenceCount != nil {
                map["CurConcurrenceCount"] = self.curConcurrenceCount!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.desktopType != nil {
                map["DesktopType"] = self.desktopType!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.idleDisconnectDuration != nil {
                map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.keepDuration != nil {
                map["KeepDuration"] = self.keepDuration!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            if self.oversoldUserCount != nil {
                map["OversoldUserCount"] = self.oversoldUserCount!
            }
            if self.oversoldWarn != nil {
                map["OversoldWarn"] = self.oversoldWarn!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.saleStatus != nil {
                map["SaleStatus"] = self.saleStatus!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.stopDuration != nil {
                map["StopDuration"] = self.stopDuration!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConcurrenceCount"] as? Int32 {
                self.concurrenceCount = value
            }
            if let value = dict["CurConcurrenceCount"] as? Int32 {
                self.curConcurrenceCount = value
            }
            if let value = dict["DataDiskSize"] as? Int32 {
                self.dataDiskSize = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DesktopType"] as? String {
                self.desktopType = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["ExpireTime"] as? String {
                self.expireTime = value
            }
            if let value = dict["IdleDisconnectDuration"] as? String {
                self.idleDisconnectDuration = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["KeepDuration"] as? String {
                self.keepDuration = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
            if let value = dict["OversoldUserCount"] as? Int32 {
                self.oversoldUserCount = value
            }
            if let value = dict["OversoldWarn"] as? Int32 {
                self.oversoldWarn = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["SaleStatus"] as? String {
                self.saleStatus = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StopDuration"] as? Int64 {
                self.stopDuration = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
        }
    }
    public var count: Int32?

    public var data: [DescribeDesktopOversoldGroupResponseBody.Data]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeDesktopOversoldGroupResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopOversoldGroupResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDesktopOversoldGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopOversoldGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopOversoldGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopOversoldUserRequest : Tea.TeaModel {
    public var clientToken: String?

    public var endUserId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var oversoldGroupId: String?

    public var userDesktopIds: [String]?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clientToken != nil {
            map["ClientToken"] = self.clientToken!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.userDesktopIds != nil {
            map["UserDesktopIds"] = self.userDesktopIds!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClientToken"] as? String {
            self.clientToken = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["UserDesktopIds"] as? [String] {
            self.userDesktopIds = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class DescribeDesktopOversoldUserResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var endUserId: String?

        public var oversoldGroupId: String?

        public var userDesktopId: String?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            if self.userDesktopId != nil {
                map["UserDesktopId"] = self.userDesktopId!
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
            if let value = dict["UserDesktopId"] as? String {
                self.userDesktopId = value
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var count: Int32?

    public var data: [DescribeDesktopOversoldUserResponseBody.Data]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeDesktopOversoldUserResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopOversoldUserResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDesktopOversoldUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopOversoldUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopOversoldUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopOversoldUserGroupRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var oversoldGroupId: String?

    public var userGroupIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.userGroupIds != nil {
            map["UserGroupIds"] = self.userGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["UserGroupIds"] as? [String] {
            self.userGroupIds = value
        }
    }
}

public class DescribeDesktopOversoldUserGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var imageId: String?

        public var name: String?

        public var oversoldGroupId: String?

        public var policyGroupId: String?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var count: Int32?

    public var data: [DescribeDesktopOversoldUserGroupResponseBody.Data]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeDesktopOversoldUserGroupResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopOversoldUserGroupResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDesktopOversoldUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopOversoldUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopOversoldUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopSessionsRequest : Tea.TeaModel {
    public var checkOsSession: Bool?

    public var desktopId: [String]?

    public var desktopName: String?

    public var endTime: String?

    public var endUserId: String?

    public var endUserIdFilter: String?

    public var officeSiteId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regionId: String?

    public var resourceGroupId: String?

    public var sessionStatus: String?

    public var startTime: String?

    public var subPayType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkOsSession != nil {
            map["CheckOsSession"] = self.checkOsSession!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.endUserIdFilter != nil {
            map["EndUserIdFilter"] = self.endUserIdFilter!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.sessionStatus != nil {
            map["SessionStatus"] = self.sessionStatus!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.subPayType != nil {
            map["SubPayType"] = self.subPayType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckOsSession"] as? Bool {
            self.checkOsSession = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["EndUserIdFilter"] as? String {
            self.endUserIdFilter = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SessionStatus"] as? String {
            self.sessionStatus = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["SubPayType"] as? String {
            self.subPayType = value
        }
    }
}

public class DescribeDesktopSessionsResponseBody : Tea.TeaModel {
    public class Sessions : Tea.TeaModel {
        public class ResourceGroups : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var clientIp: String?

        public var clientOS: String?

        public var clientVersion: String?

        public var desktopId: String?

        public var desktopName: String?

        public var endUserApplyCoordinateTime: Int64?

        public var endUserId: String?

        public var latestConnectionTime: Int64?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var osSessionStatus: String?

        public var osType: String?

        public var protocolType: String?

        public var resourceGroups: [DescribeDesktopSessionsResponseBody.Sessions.ResourceGroups]?

        public var sessionEndTime: String?

        public var sessionIdleTime: Int64?

        public var sessionStartTime: String?

        public var sessionStatus: String?

        public var subPayType: String?

        public var totalConnectionTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientIp != nil {
                map["ClientIp"] = self.clientIp!
            }
            if self.clientOS != nil {
                map["ClientOS"] = self.clientOS!
            }
            if self.clientVersion != nil {
                map["ClientVersion"] = self.clientVersion!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.endUserApplyCoordinateTime != nil {
                map["EndUserApplyCoordinateTime"] = self.endUserApplyCoordinateTime!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.latestConnectionTime != nil {
                map["LatestConnectionTime"] = self.latestConnectionTime!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.osSessionStatus != nil {
                map["OsSessionStatus"] = self.osSessionStatus!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.resourceGroups != nil {
                var tmp : [Any] = []
                for k in self.resourceGroups! {
                    tmp.append(k.toMap())
                }
                map["ResourceGroups"] = tmp
            }
            if self.sessionEndTime != nil {
                map["SessionEndTime"] = self.sessionEndTime!
            }
            if self.sessionIdleTime != nil {
                map["SessionIdleTime"] = self.sessionIdleTime!
            }
            if self.sessionStartTime != nil {
                map["SessionStartTime"] = self.sessionStartTime!
            }
            if self.sessionStatus != nil {
                map["SessionStatus"] = self.sessionStatus!
            }
            if self.subPayType != nil {
                map["SubPayType"] = self.subPayType!
            }
            if self.totalConnectionTime != nil {
                map["TotalConnectionTime"] = self.totalConnectionTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["ClientOS"] as? String {
                self.clientOS = value
            }
            if let value = dict["ClientVersion"] as? String {
                self.clientVersion = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["EndUserApplyCoordinateTime"] as? Int64 {
                self.endUserApplyCoordinateTime = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["LatestConnectionTime"] as? Int64 {
                self.latestConnectionTime = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OsSessionStatus"] as? String {
                self.osSessionStatus = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["ResourceGroups"] as? [Any?] {
                var tmp : [DescribeDesktopSessionsResponseBody.Sessions.ResourceGroups] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopSessionsResponseBody.Sessions.ResourceGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceGroups = tmp
            }
            if let value = dict["SessionEndTime"] as? String {
                self.sessionEndTime = value
            }
            if let value = dict["SessionIdleTime"] as? Int64 {
                self.sessionIdleTime = value
            }
            if let value = dict["SessionStartTime"] as? String {
                self.sessionStartTime = value
            }
            if let value = dict["SessionStatus"] as? String {
                self.sessionStatus = value
            }
            if let value = dict["SubPayType"] as? String {
                self.subPayType = value
            }
            if let value = dict["TotalConnectionTime"] as? Int64 {
                self.totalConnectionTime = value
            }
        }
    }
    public var requestId: String?

    public var sessions: [DescribeDesktopSessionsResponseBody.Sessions]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sessions != nil {
            var tmp : [Any] = []
            for k in self.sessions! {
                tmp.append(k.toMap())
            }
            map["Sessions"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Sessions"] as? [Any?] {
            var tmp : [DescribeDesktopSessionsResponseBody.Sessions] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopSessionsResponseBody.Sessions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sessions = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDesktopSessionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopSessionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopSessionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopTypesRequest : Tea.TeaModel {
    public var appliedScope: String?

    public var cpuCount: Int32?

    public var desktopGroupIdForModify: String?

    public var desktopIdForModify: String?

    public var desktopTypeId: String?

    public var desktopTypeIdList: [String]?

    public var gpuCount: Double?

    public var gpuDriverType: String?

    public var gpuMemory: Int32?

    public var instanceTypeFamily: String?

    public var memorySize: Int32?

    public var orderBy: String?

    public var orderType: String?

    public var regionId: String?

    public var scope: String?

    public var scopeSet: [String]?

    public var sortType: String?

    public var supportMinSessionCount: Int32?

    public var zoneId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appliedScope != nil {
            map["AppliedScope"] = self.appliedScope!
        }
        if self.cpuCount != nil {
            map["CpuCount"] = self.cpuCount!
        }
        if self.desktopGroupIdForModify != nil {
            map["DesktopGroupIdForModify"] = self.desktopGroupIdForModify!
        }
        if self.desktopIdForModify != nil {
            map["DesktopIdForModify"] = self.desktopIdForModify!
        }
        if self.desktopTypeId != nil {
            map["DesktopTypeId"] = self.desktopTypeId!
        }
        if self.desktopTypeIdList != nil {
            map["DesktopTypeIdList"] = self.desktopTypeIdList!
        }
        if self.gpuCount != nil {
            map["GpuCount"] = self.gpuCount!
        }
        if self.gpuDriverType != nil {
            map["GpuDriverType"] = self.gpuDriverType!
        }
        if self.gpuMemory != nil {
            map["GpuMemory"] = self.gpuMemory!
        }
        if self.instanceTypeFamily != nil {
            map["InstanceTypeFamily"] = self.instanceTypeFamily!
        }
        if self.memorySize != nil {
            map["MemorySize"] = self.memorySize!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeSet != nil {
            map["ScopeSet"] = self.scopeSet!
        }
        if self.sortType != nil {
            map["SortType"] = self.sortType!
        }
        if self.supportMinSessionCount != nil {
            map["SupportMinSessionCount"] = self.supportMinSessionCount!
        }
        if self.zoneId != nil {
            map["ZoneId"] = self.zoneId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppliedScope"] as? String {
            self.appliedScope = value
        }
        if let value = dict["CpuCount"] as? Int32 {
            self.cpuCount = value
        }
        if let value = dict["DesktopGroupIdForModify"] as? String {
            self.desktopGroupIdForModify = value
        }
        if let value = dict["DesktopIdForModify"] as? String {
            self.desktopIdForModify = value
        }
        if let value = dict["DesktopTypeId"] as? String {
            self.desktopTypeId = value
        }
        if let value = dict["DesktopTypeIdList"] as? [String] {
            self.desktopTypeIdList = value
        }
        if let value = dict["GpuCount"] as? Double {
            self.gpuCount = value
        }
        if let value = dict["GpuDriverType"] as? String {
            self.gpuDriverType = value
        }
        if let value = dict["GpuMemory"] as? Int32 {
            self.gpuMemory = value
        }
        if let value = dict["InstanceTypeFamily"] as? String {
            self.instanceTypeFamily = value
        }
        if let value = dict["MemorySize"] as? Int32 {
            self.memorySize = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeSet"] as? [String] {
            self.scopeSet = value
        }
        if let value = dict["SortType"] as? String {
            self.sortType = value
        }
        if let value = dict["SupportMinSessionCount"] as? Int32 {
            self.supportMinSessionCount = value
        }
        if let value = dict["ZoneId"] as? String {
            self.zoneId = value
        }
    }
}

public class DescribeDesktopTypesResponseBody : Tea.TeaModel {
    public class DesktopTypes : Tea.TeaModel {
        public var cpuCount: String?

        public var dataDiskSize: String?

        public var desktopTypeId: String?

        public var desktopTypeStatus: String?

        public var gpuCount: Double?

        public var gpuMemory: Int32?

        public var gpuSpec: String?

        public var instanceTypeFamily: String?

        public var maxSessionCount: Int32?

        public var memorySize: String?

        public var scopes: [String]?

        public var stockState: String?

        public var systemDiskSize: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cpuCount != nil {
                map["CpuCount"] = self.cpuCount!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.desktopTypeId != nil {
                map["DesktopTypeId"] = self.desktopTypeId!
            }
            if self.desktopTypeStatus != nil {
                map["DesktopTypeStatus"] = self.desktopTypeStatus!
            }
            if self.gpuCount != nil {
                map["GpuCount"] = self.gpuCount!
            }
            if self.gpuMemory != nil {
                map["GpuMemory"] = self.gpuMemory!
            }
            if self.gpuSpec != nil {
                map["GpuSpec"] = self.gpuSpec!
            }
            if self.instanceTypeFamily != nil {
                map["InstanceTypeFamily"] = self.instanceTypeFamily!
            }
            if self.maxSessionCount != nil {
                map["MaxSessionCount"] = self.maxSessionCount!
            }
            if self.memorySize != nil {
                map["MemorySize"] = self.memorySize!
            }
            if self.scopes != nil {
                map["Scopes"] = self.scopes!
            }
            if self.stockState != nil {
                map["StockState"] = self.stockState!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CpuCount"] as? String {
                self.cpuCount = value
            }
            if let value = dict["DataDiskSize"] as? String {
                self.dataDiskSize = value
            }
            if let value = dict["DesktopTypeId"] as? String {
                self.desktopTypeId = value
            }
            if let value = dict["DesktopTypeStatus"] as? String {
                self.desktopTypeStatus = value
            }
            if let value = dict["GpuCount"] as? Double {
                self.gpuCount = value
            }
            if let value = dict["GpuMemory"] as? Int32 {
                self.gpuMemory = value
            }
            if let value = dict["GpuSpec"] as? String {
                self.gpuSpec = value
            }
            if let value = dict["InstanceTypeFamily"] as? String {
                self.instanceTypeFamily = value
            }
            if let value = dict["MaxSessionCount"] as? Int32 {
                self.maxSessionCount = value
            }
            if let value = dict["MemorySize"] as? String {
                self.memorySize = value
            }
            if let value = dict["Scopes"] as? [String] {
                self.scopes = value
            }
            if let value = dict["StockState"] as? String {
                self.stockState = value
            }
            if let value = dict["SystemDiskSize"] as? String {
                self.systemDiskSize = value
            }
        }
    }
    public var desktopTypes: [DescribeDesktopTypesResponseBody.DesktopTypes]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopTypes != nil {
            var tmp : [Any] = []
            for k in self.desktopTypes! {
                tmp.append(k.toMap())
            }
            map["DesktopTypes"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopTypes"] as? [Any?] {
            var tmp : [DescribeDesktopTypesResponseBody.DesktopTypes] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopTypesResponseBody.DesktopTypes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopTypes = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDesktopTypesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopTypesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopTypesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var chargeType: String?

    public var desktopGroupId: String?

    public var desktopId: [String]?

    public var desktopName: String?

    public var desktopStatus: String?

    public var desktopStatusList: [String]?

    public var desktopType: String?

    public var directoryId: String?

    public var endUserId: [String]?

    public var excludedEndUserId: [String]?

    public var expiredTime: String?

    public var fillResourceGroup: Bool?

    public var filterDesktopGroup: Bool?

    public var gpuInstanceGroupId: String?

    public var groupId: String?

    public var imageId: [String]?

    public var includeAutoSnapshotPolicy: Bool?

    public var managementFlag: String?

    public var maxResults: Int32?

    public var multiResource: Bool?

    public var nextToken: String?

    public var officeSiteId: String?

    public var officeSiteName: String?

    public var onlyDesktopGroup: Bool?

    public var osTypes: [String]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var policyGroupId: String?

    public var protocolType: String?

    public var qosRuleId: String?

    public var queryFotaUpdate: Bool?

    public var regionId: String?

    public var resourceGroupId: String?

    public var snapshotPolicyId: String?

    public var subPayType: String?

    public var tag: [DescribeDesktopsRequest.Tag]?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.desktopStatus != nil {
            map["DesktopStatus"] = self.desktopStatus!
        }
        if self.desktopStatusList != nil {
            map["DesktopStatusList"] = self.desktopStatusList!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.excludedEndUserId != nil {
            map["ExcludedEndUserId"] = self.excludedEndUserId!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.fillResourceGroup != nil {
            map["FillResourceGroup"] = self.fillResourceGroup!
        }
        if self.filterDesktopGroup != nil {
            map["FilterDesktopGroup"] = self.filterDesktopGroup!
        }
        if self.gpuInstanceGroupId != nil {
            map["GpuInstanceGroupId"] = self.gpuInstanceGroupId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.includeAutoSnapshotPolicy != nil {
            map["IncludeAutoSnapshotPolicy"] = self.includeAutoSnapshotPolicy!
        }
        if self.managementFlag != nil {
            map["ManagementFlag"] = self.managementFlag!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.multiResource != nil {
            map["MultiResource"] = self.multiResource!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.onlyDesktopGroup != nil {
            map["OnlyDesktopGroup"] = self.onlyDesktopGroup!
        }
        if self.osTypes != nil {
            map["OsTypes"] = self.osTypes!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.qosRuleId != nil {
            map["QosRuleId"] = self.qosRuleId!
        }
        if self.queryFotaUpdate != nil {
            map["QueryFotaUpdate"] = self.queryFotaUpdate!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.snapshotPolicyId != nil {
            map["SnapshotPolicyId"] = self.snapshotPolicyId!
        }
        if self.subPayType != nil {
            map["SubPayType"] = self.subPayType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["DesktopStatus"] as? String {
            self.desktopStatus = value
        }
        if let value = dict["DesktopStatusList"] as? [String] {
            self.desktopStatusList = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["ExcludedEndUserId"] as? [String] {
            self.excludedEndUserId = value
        }
        if let value = dict["ExpiredTime"] as? String {
            self.expiredTime = value
        }
        if let value = dict["FillResourceGroup"] as? Bool {
            self.fillResourceGroup = value
        }
        if let value = dict["FilterDesktopGroup"] as? Bool {
            self.filterDesktopGroup = value
        }
        if let value = dict["GpuInstanceGroupId"] as? String {
            self.gpuInstanceGroupId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ImageId"] as? [String] {
            self.imageId = value
        }
        if let value = dict["IncludeAutoSnapshotPolicy"] as? Bool {
            self.includeAutoSnapshotPolicy = value
        }
        if let value = dict["ManagementFlag"] as? String {
            self.managementFlag = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["MultiResource"] as? Bool {
            self.multiResource = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["OnlyDesktopGroup"] as? Bool {
            self.onlyDesktopGroup = value
        }
        if let value = dict["OsTypes"] as? [String] {
            self.osTypes = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["ProtocolType"] as? String {
            self.protocolType = value
        }
        if let value = dict["QosRuleId"] as? String {
            self.qosRuleId = value
        }
        if let value = dict["QueryFotaUpdate"] as? Bool {
            self.queryFotaUpdate = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SnapshotPolicyId"] as? String {
            self.snapshotPolicyId = value
        }
        if let value = dict["SubPayType"] as? String {
            self.subPayType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeDesktopsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["UserName"] as? String {
            self.userName = value
        }
    }
}

public class DescribeDesktopsResponseBody : Tea.TeaModel {
    public class Desktops : Tea.TeaModel {
        public class DesktopDurationList : Tea.TeaModel {
            public var orderInstanceId: String?

            public var packageCreationTime: String?

            public var packageExpiredTime: String?

            public var packageId: String?

            public var packageStatus: String?

            public var packageType: String?

            public var packageUsedUpStrategy: String?

            public var periodEndTime: String?

            public var periodStartTime: String?

            public var postPaidLimitFee: Double?

            public var totalDuration: Int64?

            public var usedDuration: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.orderInstanceId != nil {
                    map["OrderInstanceId"] = self.orderInstanceId!
                }
                if self.packageCreationTime != nil {
                    map["PackageCreationTime"] = self.packageCreationTime!
                }
                if self.packageExpiredTime != nil {
                    map["PackageExpiredTime"] = self.packageExpiredTime!
                }
                if self.packageId != nil {
                    map["PackageId"] = self.packageId!
                }
                if self.packageStatus != nil {
                    map["PackageStatus"] = self.packageStatus!
                }
                if self.packageType != nil {
                    map["PackageType"] = self.packageType!
                }
                if self.packageUsedUpStrategy != nil {
                    map["PackageUsedUpStrategy"] = self.packageUsedUpStrategy!
                }
                if self.periodEndTime != nil {
                    map["PeriodEndTime"] = self.periodEndTime!
                }
                if self.periodStartTime != nil {
                    map["PeriodStartTime"] = self.periodStartTime!
                }
                if self.postPaidLimitFee != nil {
                    map["PostPaidLimitFee"] = self.postPaidLimitFee!
                }
                if self.totalDuration != nil {
                    map["TotalDuration"] = self.totalDuration!
                }
                if self.usedDuration != nil {
                    map["UsedDuration"] = self.usedDuration!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["OrderInstanceId"] as? String {
                    self.orderInstanceId = value
                }
                if let value = dict["PackageCreationTime"] as? String {
                    self.packageCreationTime = value
                }
                if let value = dict["PackageExpiredTime"] as? String {
                    self.packageExpiredTime = value
                }
                if let value = dict["PackageId"] as? String {
                    self.packageId = value
                }
                if let value = dict["PackageStatus"] as? String {
                    self.packageStatus = value
                }
                if let value = dict["PackageType"] as? String {
                    self.packageType = value
                }
                if let value = dict["PackageUsedUpStrategy"] as? String {
                    self.packageUsedUpStrategy = value
                }
                if let value = dict["PeriodEndTime"] as? String {
                    self.periodEndTime = value
                }
                if let value = dict["PeriodStartTime"] as? String {
                    self.periodStartTime = value
                }
                if let value = dict["PostPaidLimitFee"] as? Double {
                    self.postPaidLimitFee = value
                }
                if let value = dict["TotalDuration"] as? Int64 {
                    self.totalDuration = value
                }
                if let value = dict["UsedDuration"] as? Int64 {
                    self.usedDuration = value
                }
            }
        }
        public class Disks : Tea.TeaModel {
            public var diskCategory: String?

            public var diskId: String?

            public var diskSize: Int32?

            public var diskType: String?

            public var performanceLevel: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.diskCategory != nil {
                    map["DiskCategory"] = self.diskCategory!
                }
                if self.diskId != nil {
                    map["DiskId"] = self.diskId!
                }
                if self.diskSize != nil {
                    map["DiskSize"] = self.diskSize!
                }
                if self.diskType != nil {
                    map["DiskType"] = self.diskType!
                }
                if self.performanceLevel != nil {
                    map["PerformanceLevel"] = self.performanceLevel!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DiskCategory"] as? String {
                    self.diskCategory = value
                }
                if let value = dict["DiskId"] as? String {
                    self.diskId = value
                }
                if let value = dict["DiskSize"] as? Int32 {
                    self.diskSize = value
                }
                if let value = dict["DiskType"] as? String {
                    self.diskType = value
                }
                if let value = dict["PerformanceLevel"] as? String {
                    self.performanceLevel = value
                }
            }
        }
        public class FotaUpdate : Tea.TeaModel {
            public var currentAppVersion: String?

            public var newAppVersion: String?

            public var releaseNote: String?

            public var releaseNoteEn: String?

            public var releaseNoteJp: String?

            public var size: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.currentAppVersion != nil {
                    map["CurrentAppVersion"] = self.currentAppVersion!
                }
                if self.newAppVersion != nil {
                    map["NewAppVersion"] = self.newAppVersion!
                }
                if self.releaseNote != nil {
                    map["ReleaseNote"] = self.releaseNote!
                }
                if self.releaseNoteEn != nil {
                    map["ReleaseNoteEn"] = self.releaseNoteEn!
                }
                if self.releaseNoteJp != nil {
                    map["ReleaseNoteJp"] = self.releaseNoteJp!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CurrentAppVersion"] as? String {
                    self.currentAppVersion = value
                }
                if let value = dict["NewAppVersion"] as? String {
                    self.newAppVersion = value
                }
                if let value = dict["ReleaseNote"] as? String {
                    self.releaseNote = value
                }
                if let value = dict["ReleaseNoteEn"] as? String {
                    self.releaseNoteEn = value
                }
                if let value = dict["ReleaseNoteJp"] as? String {
                    self.releaseNoteJp = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
            }
        }
        public class OsUpdate : Tea.TeaModel {
            public class Packages : Tea.TeaModel {
                public var description_: String?

                public var kb: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.kb != nil {
                        map["Kb"] = self.kb!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Kb"] as? String {
                        self.kb = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var checkId: String?

            public var packageCount: Int32?

            public var packages: [DescribeDesktopsResponseBody.Desktops.OsUpdate.Packages]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkId != nil {
                    map["CheckId"] = self.checkId!
                }
                if self.packageCount != nil {
                    map["PackageCount"] = self.packageCount!
                }
                if self.packages != nil {
                    var tmp : [Any] = []
                    for k in self.packages! {
                        tmp.append(k.toMap())
                    }
                    map["Packages"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckId"] as? String {
                    self.checkId = value
                }
                if let value = dict["PackageCount"] as? Int32 {
                    self.packageCount = value
                }
                if let value = dict["Packages"] as? [Any?] {
                    var tmp : [DescribeDesktopsResponseBody.Desktops.OsUpdate.Packages] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDesktopsResponseBody.Desktops.OsUpdate.Packages()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.packages = tmp
                }
            }
        }
        public class ResourceGroups : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Sessions : Tea.TeaModel {
            public var endUserId: String?

            public var establishmentTime: String?

            public var externalUserName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endUserId != nil {
                    map["EndUserId"] = self.endUserId!
                }
                if self.establishmentTime != nil {
                    map["EstablishmentTime"] = self.establishmentTime!
                }
                if self.externalUserName != nil {
                    map["ExternalUserName"] = self.externalUserName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndUserId"] as? String {
                    self.endUserId = value
                }
                if let value = dict["EstablishmentTime"] as? String {
                    self.establishmentTime = value
                }
                if let value = dict["ExternalUserName"] as? String {
                    self.externalUserName = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var bindAmount: Int32?

        public var bundleId: String?

        public var bundleName: String?

        public var chargeType: String?

        public var connectionStatus: String?

        public var cpu: Int32?

        public var creationTime: String?

        public var dataDiskCategory: String?

        public var dataDiskSize: String?

        public var desktopDurationList: [DescribeDesktopsResponseBody.Desktops.DesktopDurationList]?

        public var desktopGroupId: String?

        public var desktopId: String?

        public var desktopName: String?

        public var desktopStatus: String?

        public var desktopType: String?

        public var directoryId: String?

        public var directoryType: String?

        public var disks: [DescribeDesktopsResponseBody.Desktops.Disks]?

        public var domainType: String?

        public var downgradeQuota: Int64?

        public var downgradedTimes: Int64?

        public var endUserIds: [String]?

        public var expiredTime: String?

        public var fotaUpdate: DescribeDesktopsResponseBody.Desktops.FotaUpdate?

        public var gpuCategory: Int64?

        public var gpuCount: Double?

        public var gpuDriverVersion: String?

        public var gpuSpec: String?

        public var hibernationBeta: Bool?

        public var hibernationOptionsConfigured: Bool?

        public var hostName: String?

        public var imageId: String?

        public var isLdap: Bool?

        public var managementFlag: String?

        public var managementFlags: [String]?

        public var memory: Int64?

        public var networkInterfaceId: String?

        public var networkInterfaceIp: String?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSiteType: String?

        public var officeSiteVpcType: String?

        public var osType: String?

        public var osUpdate: DescribeDesktopsResponseBody.Desktops.OsUpdate?

        public var platform: String?

        public var policyGroupId: String?

        public var policyGroupIdList: [String]?

        public var policyGroupName: String?

        public var policyGroupNameList: [String]?

        public var progress: String?

        public var protocolType: String?

        public var resourceGroups: [DescribeDesktopsResponseBody.Desktops.ResourceGroups]?

        public var sessionType: String?

        public var sessions: [DescribeDesktopsResponseBody.Desktops.Sessions]?

        public var snapshotPolicyId: String?

        public var snapshotPolicyName: String?

        public var standardStartTime: String?

        public var startTime: String?

        public var supportHibernation: Bool?

        public var systemDiskCategory: String?

        public var systemDiskSize: Int32?

        public var tags: [DescribeDesktopsResponseBody.Desktops.Tags]?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public var zoneType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fotaUpdate?.validate()
            try self.osUpdate?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindAmount != nil {
                map["BindAmount"] = self.bindAmount!
            }
            if self.bundleId != nil {
                map["BundleId"] = self.bundleId!
            }
            if self.bundleName != nil {
                map["BundleName"] = self.bundleName!
            }
            if self.chargeType != nil {
                map["ChargeType"] = self.chargeType!
            }
            if self.connectionStatus != nil {
                map["ConnectionStatus"] = self.connectionStatus!
            }
            if self.cpu != nil {
                map["Cpu"] = self.cpu!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.dataDiskCategory != nil {
                map["DataDiskCategory"] = self.dataDiskCategory!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.desktopDurationList != nil {
                var tmp : [Any] = []
                for k in self.desktopDurationList! {
                    tmp.append(k.toMap())
                }
                map["DesktopDurationList"] = tmp
            }
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.desktopStatus != nil {
                map["DesktopStatus"] = self.desktopStatus!
            }
            if self.desktopType != nil {
                map["DesktopType"] = self.desktopType!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.directoryType != nil {
                map["DirectoryType"] = self.directoryType!
            }
            if self.disks != nil {
                var tmp : [Any] = []
                for k in self.disks! {
                    tmp.append(k.toMap())
                }
                map["Disks"] = tmp
            }
            if self.domainType != nil {
                map["DomainType"] = self.domainType!
            }
            if self.downgradeQuota != nil {
                map["DowngradeQuota"] = self.downgradeQuota!
            }
            if self.downgradedTimes != nil {
                map["DowngradedTimes"] = self.downgradedTimes!
            }
            if self.endUserIds != nil {
                map["EndUserIds"] = self.endUserIds!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.fotaUpdate != nil {
                map["FotaUpdate"] = self.fotaUpdate?.toMap()
            }
            if self.gpuCategory != nil {
                map["GpuCategory"] = self.gpuCategory!
            }
            if self.gpuCount != nil {
                map["GpuCount"] = self.gpuCount!
            }
            if self.gpuDriverVersion != nil {
                map["GpuDriverVersion"] = self.gpuDriverVersion!
            }
            if self.gpuSpec != nil {
                map["GpuSpec"] = self.gpuSpec!
            }
            if self.hibernationBeta != nil {
                map["HibernationBeta"] = self.hibernationBeta!
            }
            if self.hibernationOptionsConfigured != nil {
                map["HibernationOptionsConfigured"] = self.hibernationOptionsConfigured!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.isLdap != nil {
                map["IsLdap"] = self.isLdap!
            }
            if self.managementFlag != nil {
                map["ManagementFlag"] = self.managementFlag!
            }
            if self.managementFlags != nil {
                map["ManagementFlags"] = self.managementFlags!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.networkInterfaceId != nil {
                map["NetworkInterfaceId"] = self.networkInterfaceId!
            }
            if self.networkInterfaceIp != nil {
                map["NetworkInterfaceIp"] = self.networkInterfaceIp!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSiteType != nil {
                map["OfficeSiteType"] = self.officeSiteType!
            }
            if self.officeSiteVpcType != nil {
                map["OfficeSiteVpcType"] = self.officeSiteVpcType!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.osUpdate != nil {
                map["OsUpdate"] = self.osUpdate?.toMap()
            }
            if self.platform != nil {
                map["Platform"] = self.platform!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.policyGroupIdList != nil {
                map["PolicyGroupIdList"] = self.policyGroupIdList!
            }
            if self.policyGroupName != nil {
                map["PolicyGroupName"] = self.policyGroupName!
            }
            if self.policyGroupNameList != nil {
                map["PolicyGroupNameList"] = self.policyGroupNameList!
            }
            if self.progress != nil {
                map["Progress"] = self.progress!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.resourceGroups != nil {
                var tmp : [Any] = []
                for k in self.resourceGroups! {
                    tmp.append(k.toMap())
                }
                map["ResourceGroups"] = tmp
            }
            if self.sessionType != nil {
                map["SessionType"] = self.sessionType!
            }
            if self.sessions != nil {
                var tmp : [Any] = []
                for k in self.sessions! {
                    tmp.append(k.toMap())
                }
                map["Sessions"] = tmp
            }
            if self.snapshotPolicyId != nil {
                map["SnapshotPolicyId"] = self.snapshotPolicyId!
            }
            if self.snapshotPolicyName != nil {
                map["SnapshotPolicyName"] = self.snapshotPolicyName!
            }
            if self.standardStartTime != nil {
                map["StandardStartTime"] = self.standardStartTime!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.supportHibernation != nil {
                map["SupportHibernation"] = self.supportHibernation!
            }
            if self.systemDiskCategory != nil {
                map["SystemDiskCategory"] = self.systemDiskCategory!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            if self.zoneType != nil {
                map["ZoneType"] = self.zoneType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindAmount"] as? Int32 {
                self.bindAmount = value
            }
            if let value = dict["BundleId"] as? String {
                self.bundleId = value
            }
            if let value = dict["BundleName"] as? String {
                self.bundleName = value
            }
            if let value = dict["ChargeType"] as? String {
                self.chargeType = value
            }
            if let value = dict["ConnectionStatus"] as? String {
                self.connectionStatus = value
            }
            if let value = dict["Cpu"] as? Int32 {
                self.cpu = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["DataDiskCategory"] as? String {
                self.dataDiskCategory = value
            }
            if let value = dict["DataDiskSize"] as? String {
                self.dataDiskSize = value
            }
            if let value = dict["DesktopDurationList"] as? [Any?] {
                var tmp : [DescribeDesktopsResponseBody.Desktops.DesktopDurationList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopsResponseBody.Desktops.DesktopDurationList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.desktopDurationList = tmp
            }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["DesktopStatus"] as? String {
                self.desktopStatus = value
            }
            if let value = dict["DesktopType"] as? String {
                self.desktopType = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["DirectoryType"] as? String {
                self.directoryType = value
            }
            if let value = dict["Disks"] as? [Any?] {
                var tmp : [DescribeDesktopsResponseBody.Desktops.Disks] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopsResponseBody.Desktops.Disks()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.disks = tmp
            }
            if let value = dict["DomainType"] as? String {
                self.domainType = value
            }
            if let value = dict["DowngradeQuota"] as? Int64 {
                self.downgradeQuota = value
            }
            if let value = dict["DowngradedTimes"] as? Int64 {
                self.downgradedTimes = value
            }
            if let value = dict["EndUserIds"] as? [String] {
                self.endUserIds = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["FotaUpdate"] as? [String: Any?] {
                var model = DescribeDesktopsResponseBody.Desktops.FotaUpdate()
                model.fromMap(value)
                self.fotaUpdate = model
            }
            if let value = dict["GpuCategory"] as? Int64 {
                self.gpuCategory = value
            }
            if let value = dict["GpuCount"] as? Double {
                self.gpuCount = value
            }
            if let value = dict["GpuDriverVersion"] as? String {
                self.gpuDriverVersion = value
            }
            if let value = dict["GpuSpec"] as? String {
                self.gpuSpec = value
            }
            if let value = dict["HibernationBeta"] as? Bool {
                self.hibernationBeta = value
            }
            if let value = dict["HibernationOptionsConfigured"] as? Bool {
                self.hibernationOptionsConfigured = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["IsLdap"] as? Bool {
                self.isLdap = value
            }
            if let value = dict["ManagementFlag"] as? String {
                self.managementFlag = value
            }
            if let value = dict["ManagementFlags"] as? [String] {
                self.managementFlags = value
            }
            if let value = dict["Memory"] as? Int64 {
                self.memory = value
            }
            if let value = dict["NetworkInterfaceId"] as? String {
                self.networkInterfaceId = value
            }
            if let value = dict["NetworkInterfaceIp"] as? String {
                self.networkInterfaceIp = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSiteType"] as? String {
                self.officeSiteType = value
            }
            if let value = dict["OfficeSiteVpcType"] as? String {
                self.officeSiteVpcType = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["OsUpdate"] as? [String: Any?] {
                var model = DescribeDesktopsResponseBody.Desktops.OsUpdate()
                model.fromMap(value)
                self.osUpdate = model
            }
            if let value = dict["Platform"] as? String {
                self.platform = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["PolicyGroupIdList"] as? [String] {
                self.policyGroupIdList = value
            }
            if let value = dict["PolicyGroupName"] as? String {
                self.policyGroupName = value
            }
            if let value = dict["PolicyGroupNameList"] as? [String] {
                self.policyGroupNameList = value
            }
            if let value = dict["Progress"] as? String {
                self.progress = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["ResourceGroups"] as? [Any?] {
                var tmp : [DescribeDesktopsResponseBody.Desktops.ResourceGroups] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopsResponseBody.Desktops.ResourceGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceGroups = tmp
            }
            if let value = dict["SessionType"] as? String {
                self.sessionType = value
            }
            if let value = dict["Sessions"] as? [Any?] {
                var tmp : [DescribeDesktopsResponseBody.Desktops.Sessions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopsResponseBody.Desktops.Sessions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sessions = tmp
            }
            if let value = dict["SnapshotPolicyId"] as? String {
                self.snapshotPolicyId = value
            }
            if let value = dict["SnapshotPolicyName"] as? String {
                self.snapshotPolicyName = value
            }
            if let value = dict["StandardStartTime"] as? String {
                self.standardStartTime = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["SupportHibernation"] as? Bool {
                self.supportHibernation = value
            }
            if let value = dict["SystemDiskCategory"] as? String {
                self.systemDiskCategory = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [DescribeDesktopsResponseBody.Desktops.Tags] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDesktopsResponseBody.Desktops.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
            if let value = dict["ZoneType"] as? String {
                self.zoneType = value
            }
        }
    }
    public var desktops: [DescribeDesktopsResponseBody.Desktops]?

    public var nextToken: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktops != nil {
            var tmp : [Any] = []
            for k in self.desktops! {
                tmp.append(k.toMap())
            }
            map["Desktops"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Desktops"] as? [Any?] {
            var tmp : [DescribeDesktopsResponseBody.Desktops] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopsResponseBody.Desktops()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktops = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDesktopsInGroupRequest : Tea.TeaModel {
    public var customEndTimePeriod: Int64?

    public var customStartTimePeriod: Int64?

    public var desktopGroupId: String?

    public var ignoreDeleted: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var payType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customEndTimePeriod != nil {
            map["CustomEndTimePeriod"] = self.customEndTimePeriod!
        }
        if self.customStartTimePeriod != nil {
            map["CustomStartTimePeriod"] = self.customStartTimePeriod!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.ignoreDeleted != nil {
            map["IgnoreDeleted"] = self.ignoreDeleted!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.payType != nil {
            map["PayType"] = self.payType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomEndTimePeriod"] as? Int64 {
            self.customEndTimePeriod = value
        }
        if let value = dict["CustomStartTimePeriod"] as? Int64 {
            self.customStartTimePeriod = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["IgnoreDeleted"] as? Bool {
            self.ignoreDeleted = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PayType"] as? String {
            self.payType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeDesktopsInGroupResponseBody : Tea.TeaModel {
    public class PaidDesktops : Tea.TeaModel {
        public var connectionStatus: String?

        public var desktopId: String?

        public var desktopName: String?

        public var desktopStatus: String?

        public var diskType: String?

        public var endUserId: String?

        public var endUserIds: [String]?

        public var endUserName: String?

        public var endUserNames: [String]?

        public var expiredTime: String?

        public var fotaVersion: String?

        public var gpuDriverVersion: String?

        public var imageId: String?

        public var imageName: String?

        public var managementFlag: String?

        public var managementFlags: [String]?

        public var memberEniIp: String?

        public var osType: String?

        public var primaryEniIp: String?

        public var protocolType: String?

        public var resetTime: String?

        public var systemDiskSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectionStatus != nil {
                map["ConnectionStatus"] = self.connectionStatus!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.desktopStatus != nil {
                map["DesktopStatus"] = self.desktopStatus!
            }
            if self.diskType != nil {
                map["DiskType"] = self.diskType!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.endUserIds != nil {
                map["EndUserIds"] = self.endUserIds!
            }
            if self.endUserName != nil {
                map["EndUserName"] = self.endUserName!
            }
            if self.endUserNames != nil {
                map["EndUserNames"] = self.endUserNames!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.fotaVersion != nil {
                map["FotaVersion"] = self.fotaVersion!
            }
            if self.gpuDriverVersion != nil {
                map["GpuDriverVersion"] = self.gpuDriverVersion!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageName != nil {
                map["ImageName"] = self.imageName!
            }
            if self.managementFlag != nil {
                map["ManagementFlag"] = self.managementFlag!
            }
            if self.managementFlags != nil {
                map["ManagementFlags"] = self.managementFlags!
            }
            if self.memberEniIp != nil {
                map["MemberEniIp"] = self.memberEniIp!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.primaryEniIp != nil {
                map["PrimaryEniIp"] = self.primaryEniIp!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.resetTime != nil {
                map["ResetTime"] = self.resetTime!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectionStatus"] as? String {
                self.connectionStatus = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["DesktopStatus"] as? String {
                self.desktopStatus = value
            }
            if let value = dict["DiskType"] as? String {
                self.diskType = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["EndUserIds"] as? [String] {
                self.endUserIds = value
            }
            if let value = dict["EndUserName"] as? String {
                self.endUserName = value
            }
            if let value = dict["EndUserNames"] as? [String] {
                self.endUserNames = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["FotaVersion"] as? String {
                self.fotaVersion = value
            }
            if let value = dict["GpuDriverVersion"] as? String {
                self.gpuDriverVersion = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageName"] as? String {
                self.imageName = value
            }
            if let value = dict["ManagementFlag"] as? String {
                self.managementFlag = value
            }
            if let value = dict["ManagementFlags"] as? [String] {
                self.managementFlags = value
            }
            if let value = dict["MemberEniIp"] as? String {
                self.memberEniIp = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["PrimaryEniIp"] as? String {
                self.primaryEniIp = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["ResetTime"] as? String {
                self.resetTime = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
        }
    }
    public class PostPaidDesktops : Tea.TeaModel {
        public var connectionStatus: String?

        public var createDuration: String?

        public var createTime: String?

        public var desktopId: String?

        public var desktopName: String?

        public var desktopStatus: String?

        public var diskType: String?

        public var endUserId: String?

        public var endUserIds: [String]?

        public var endUserName: String?

        public var endUserNames: [String]?

        public var fotaVersion: String?

        public var gpuDriverVersion: String?

        public var imageId: String?

        public var imageName: String?

        public var managementFlag: String?

        public var managementFlags: [String]?

        public var memberEniIp: String?

        public var osType: String?

        public var primaryEniIp: String?

        public var protocolType: String?

        public var releaseTime: String?

        public var resetTime: String?

        public var systemDiskSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectionStatus != nil {
                map["ConnectionStatus"] = self.connectionStatus!
            }
            if self.createDuration != nil {
                map["CreateDuration"] = self.createDuration!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.desktopStatus != nil {
                map["DesktopStatus"] = self.desktopStatus!
            }
            if self.diskType != nil {
                map["DiskType"] = self.diskType!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.endUserIds != nil {
                map["EndUserIds"] = self.endUserIds!
            }
            if self.endUserName != nil {
                map["EndUserName"] = self.endUserName!
            }
            if self.endUserNames != nil {
                map["EndUserNames"] = self.endUserNames!
            }
            if self.fotaVersion != nil {
                map["FotaVersion"] = self.fotaVersion!
            }
            if self.gpuDriverVersion != nil {
                map["GpuDriverVersion"] = self.gpuDriverVersion!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageName != nil {
                map["ImageName"] = self.imageName!
            }
            if self.managementFlag != nil {
                map["ManagementFlag"] = self.managementFlag!
            }
            if self.managementFlags != nil {
                map["ManagementFlags"] = self.managementFlags!
            }
            if self.memberEniIp != nil {
                map["MemberEniIp"] = self.memberEniIp!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.primaryEniIp != nil {
                map["PrimaryEniIp"] = self.primaryEniIp!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.releaseTime != nil {
                map["ReleaseTime"] = self.releaseTime!
            }
            if self.resetTime != nil {
                map["ResetTime"] = self.resetTime!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectionStatus"] as? String {
                self.connectionStatus = value
            }
            if let value = dict["CreateDuration"] as? String {
                self.createDuration = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["DesktopStatus"] as? String {
                self.desktopStatus = value
            }
            if let value = dict["DiskType"] as? String {
                self.diskType = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["EndUserIds"] as? [String] {
                self.endUserIds = value
            }
            if let value = dict["EndUserName"] as? String {
                self.endUserName = value
            }
            if let value = dict["EndUserNames"] as? [String] {
                self.endUserNames = value
            }
            if let value = dict["FotaVersion"] as? String {
                self.fotaVersion = value
            }
            if let value = dict["GpuDriverVersion"] as? String {
                self.gpuDriverVersion = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageName"] as? String {
                self.imageName = value
            }
            if let value = dict["ManagementFlag"] as? String {
                self.managementFlag = value
            }
            if let value = dict["ManagementFlags"] as? [String] {
                self.managementFlags = value
            }
            if let value = dict["MemberEniIp"] as? String {
                self.memberEniIp = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["PrimaryEniIp"] as? String {
                self.primaryEniIp = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["ReleaseTime"] as? String {
                self.releaseTime = value
            }
            if let value = dict["ResetTime"] as? String {
                self.resetTime = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
        }
    }
    public var nextToken: String?

    public var onlinePrePaidDesktopsCount: Int32?

    public var paidDesktops: [DescribeDesktopsInGroupResponseBody.PaidDesktops]?

    public var paidDesktopsCount: Int32?

    public var postPaidDesktops: [DescribeDesktopsInGroupResponseBody.PostPaidDesktops]?

    public var postPaidDesktopsCount: Int32?

    public var postPaidDesktopsTotalAmount: Int32?

    public var requestId: String?

    public var runningPrePaidDesktopsCount: Int32?

    public var stopedPrePaidDesktopsCount: Int32?

    public var stoppedPrePaidDesktopsCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.onlinePrePaidDesktopsCount != nil {
            map["OnlinePrePaidDesktopsCount"] = self.onlinePrePaidDesktopsCount!
        }
        if self.paidDesktops != nil {
            var tmp : [Any] = []
            for k in self.paidDesktops! {
                tmp.append(k.toMap())
            }
            map["PaidDesktops"] = tmp
        }
        if self.paidDesktopsCount != nil {
            map["PaidDesktopsCount"] = self.paidDesktopsCount!
        }
        if self.postPaidDesktops != nil {
            var tmp : [Any] = []
            for k in self.postPaidDesktops! {
                tmp.append(k.toMap())
            }
            map["PostPaidDesktops"] = tmp
        }
        if self.postPaidDesktopsCount != nil {
            map["PostPaidDesktopsCount"] = self.postPaidDesktopsCount!
        }
        if self.postPaidDesktopsTotalAmount != nil {
            map["PostPaidDesktopsTotalAmount"] = self.postPaidDesktopsTotalAmount!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.runningPrePaidDesktopsCount != nil {
            map["RunningPrePaidDesktopsCount"] = self.runningPrePaidDesktopsCount!
        }
        if self.stopedPrePaidDesktopsCount != nil {
            map["StopedPrePaidDesktopsCount"] = self.stopedPrePaidDesktopsCount!
        }
        if self.stoppedPrePaidDesktopsCount != nil {
            map["StoppedPrePaidDesktopsCount"] = self.stoppedPrePaidDesktopsCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OnlinePrePaidDesktopsCount"] as? Int32 {
            self.onlinePrePaidDesktopsCount = value
        }
        if let value = dict["PaidDesktops"] as? [Any?] {
            var tmp : [DescribeDesktopsInGroupResponseBody.PaidDesktops] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopsInGroupResponseBody.PaidDesktops()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.paidDesktops = tmp
        }
        if let value = dict["PaidDesktopsCount"] as? Int32 {
            self.paidDesktopsCount = value
        }
        if let value = dict["PostPaidDesktops"] as? [Any?] {
            var tmp : [DescribeDesktopsInGroupResponseBody.PostPaidDesktops] = []
            for v in value {
                if v != nil {
                    var model = DescribeDesktopsInGroupResponseBody.PostPaidDesktops()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.postPaidDesktops = tmp
        }
        if let value = dict["PostPaidDesktopsCount"] as? Int32 {
            self.postPaidDesktopsCount = value
        }
        if let value = dict["PostPaidDesktopsTotalAmount"] as? Int32 {
            self.postPaidDesktopsTotalAmount = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RunningPrePaidDesktopsCount"] as? Int32 {
            self.runningPrePaidDesktopsCount = value
        }
        if let value = dict["StopedPrePaidDesktopsCount"] as? Int32 {
            self.stopedPrePaidDesktopsCount = value
        }
        if let value = dict["StoppedPrePaidDesktopsCount"] as? Int32 {
            self.stoppedPrePaidDesktopsCount = value
        }
    }
}

public class DescribeDesktopsInGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDesktopsInGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDesktopsInGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDevicesRequest : Tea.TeaModel {
    public var adDomain: String?

    public var clientType: String?

    public var deviceId: String?

    public var directoryId: String?

    public var endUserId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var region: String?

    public var userType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adDomain != nil {
            map["AdDomain"] = self.adDomain!
        }
        if self.clientType != nil {
            map["ClientType"] = self.clientType!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdDomain"] as? String {
            self.adDomain = value
        }
        if let value = dict["ClientType"] as? String {
            self.clientType = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
    }
}

public class DescribeDevicesResponseBody : Tea.TeaModel {
    public class Devices : Tea.TeaModel {
        public class EndUserList : Tea.TeaModel {
            public var adDomain: String?

            public var directoryId: String?

            public var endUserId: String?

            public var userType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adDomain != nil {
                    map["AdDomain"] = self.adDomain!
                }
                if self.directoryId != nil {
                    map["DirectoryId"] = self.directoryId!
                }
                if self.endUserId != nil {
                    map["EndUserId"] = self.endUserId!
                }
                if self.userType != nil {
                    map["UserType"] = self.userType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdDomain"] as? String {
                    self.adDomain = value
                }
                if let value = dict["DirectoryId"] as? String {
                    self.directoryId = value
                }
                if let value = dict["EndUserId"] as? String {
                    self.endUserId = value
                }
                if let value = dict["UserType"] as? String {
                    self.userType = value
                }
            }
        }
        public var deviceId: String?

        public var endUserList: [DescribeDevicesResponseBody.Devices.EndUserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.endUserList != nil {
                var tmp : [Any] = []
                for k in self.endUserList! {
                    tmp.append(k.toMap())
                }
                map["EndUserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["EndUserList"] as? [Any?] {
                var tmp : [DescribeDevicesResponseBody.Devices.EndUserList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDevicesResponseBody.Devices.EndUserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.endUserList = tmp
            }
        }
    }
    public var devices: [DescribeDevicesResponseBody.Devices]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.devices != nil {
            var tmp : [Any] = []
            for k in self.devices! {
                tmp.append(k.toMap())
            }
            map["Devices"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Devices"] as? [Any?] {
            var tmp : [DescribeDevicesResponseBody.Devices] = []
            for v in value {
                if v != nil {
                    var model = DescribeDevicesResponseBody.Devices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.devices = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDirectoriesRequest : Tea.TeaModel {
    public var directoryId: [String]?

    public var directoryStatus: String?

    public var directoryType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.directoryStatus != nil {
            map["DirectoryStatus"] = self.directoryStatus!
        }
        if self.directoryType != nil {
            map["DirectoryType"] = self.directoryType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectoryId"] as? [String] {
            self.directoryId = value
        }
        if let value = dict["DirectoryStatus"] as? String {
            self.directoryStatus = value
        }
        if let value = dict["DirectoryType"] as? String {
            self.directoryType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeDirectoriesResponseBody : Tea.TeaModel {
    public class Directories : Tea.TeaModel {
        public class ADConnectors : Tea.TeaModel {
            public var ADConnectorAddress: String?

            public var connectorStatus: String?

            public var networkInterfaceId: String?

            public var specification: String?

            public var trustKey: String?

            public var vSwitchId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ADConnectorAddress != nil {
                    map["ADConnectorAddress"] = self.ADConnectorAddress!
                }
                if self.connectorStatus != nil {
                    map["ConnectorStatus"] = self.connectorStatus!
                }
                if self.networkInterfaceId != nil {
                    map["NetworkInterfaceId"] = self.networkInterfaceId!
                }
                if self.specification != nil {
                    map["Specification"] = self.specification!
                }
                if self.trustKey != nil {
                    map["TrustKey"] = self.trustKey!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ADConnectorAddress"] as? String {
                    self.ADConnectorAddress = value
                }
                if let value = dict["ConnectorStatus"] as? String {
                    self.connectorStatus = value
                }
                if let value = dict["NetworkInterfaceId"] as? String {
                    self.networkInterfaceId = value
                }
                if let value = dict["Specification"] as? String {
                    self.specification = value
                }
                if let value = dict["TrustKey"] as? String {
                    self.trustKey = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
            }
        }
        public class Logs : Tea.TeaModel {
            public var level: String?

            public var message: String?

            public var step: String?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.step != nil {
                    map["Step"] = self.step!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Step"] as? String {
                    self.step = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var ADConnectors: [DescribeDirectoriesResponseBody.Directories.ADConnectors]?

        public var adHostname: String?

        public var backupDCHostname: String?

        public var backupDns: String?

        public var creationTime: String?

        public var customSecurityGroupId: String?

        public var desktopAccessType: String?

        public var desktopVpcEndpoint: String?

        public var directoryId: String?

        public var directoryType: String?

        public var dnsAddress: [String]?

        public var dnsUserName: String?

        public var domainName: String?

        public var domainPassword: String?

        public var domainUserName: String?

        public var enableAdminAccess: Bool?

        public var enableCrossDesktopAccess: Bool?

        public var enableInternetAccess: Bool?

        public var fileSystemIds: [String]?

        public var logs: [DescribeDirectoriesResponseBody.Directories.Logs]?

        public var mfaEnabled: Bool?

        public var name: String?

        public var needVerifyLoginRisk: Bool?

        public var ouName: String?

        public var ssoEnabled: Bool?

        public var status: String?

        public var subDnsAddress: [String]?

        public var subDomainName: String?

        public var trustPassword: String?

        public var vSwitchIds: [String]?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ADConnectors != nil {
                var tmp : [Any] = []
                for k in self.ADConnectors! {
                    tmp.append(k.toMap())
                }
                map["ADConnectors"] = tmp
            }
            if self.adHostname != nil {
                map["AdHostname"] = self.adHostname!
            }
            if self.backupDCHostname != nil {
                map["BackupDCHostname"] = self.backupDCHostname!
            }
            if self.backupDns != nil {
                map["BackupDns"] = self.backupDns!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.customSecurityGroupId != nil {
                map["CustomSecurityGroupId"] = self.customSecurityGroupId!
            }
            if self.desktopAccessType != nil {
                map["DesktopAccessType"] = self.desktopAccessType!
            }
            if self.desktopVpcEndpoint != nil {
                map["DesktopVpcEndpoint"] = self.desktopVpcEndpoint!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.directoryType != nil {
                map["DirectoryType"] = self.directoryType!
            }
            if self.dnsAddress != nil {
                map["DnsAddress"] = self.dnsAddress!
            }
            if self.dnsUserName != nil {
                map["DnsUserName"] = self.dnsUserName!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.domainPassword != nil {
                map["DomainPassword"] = self.domainPassword!
            }
            if self.domainUserName != nil {
                map["DomainUserName"] = self.domainUserName!
            }
            if self.enableAdminAccess != nil {
                map["EnableAdminAccess"] = self.enableAdminAccess!
            }
            if self.enableCrossDesktopAccess != nil {
                map["EnableCrossDesktopAccess"] = self.enableCrossDesktopAccess!
            }
            if self.enableInternetAccess != nil {
                map["EnableInternetAccess"] = self.enableInternetAccess!
            }
            if self.fileSystemIds != nil {
                map["FileSystemIds"] = self.fileSystemIds!
            }
            if self.logs != nil {
                var tmp : [Any] = []
                for k in self.logs! {
                    tmp.append(k.toMap())
                }
                map["Logs"] = tmp
            }
            if self.mfaEnabled != nil {
                map["MfaEnabled"] = self.mfaEnabled!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.needVerifyLoginRisk != nil {
                map["NeedVerifyLoginRisk"] = self.needVerifyLoginRisk!
            }
            if self.ouName != nil {
                map["OuName"] = self.ouName!
            }
            if self.ssoEnabled != nil {
                map["SsoEnabled"] = self.ssoEnabled!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subDnsAddress != nil {
                map["SubDnsAddress"] = self.subDnsAddress!
            }
            if self.subDomainName != nil {
                map["SubDomainName"] = self.subDomainName!
            }
            if self.trustPassword != nil {
                map["TrustPassword"] = self.trustPassword!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ADConnectors"] as? [Any?] {
                var tmp : [DescribeDirectoriesResponseBody.Directories.ADConnectors] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDirectoriesResponseBody.Directories.ADConnectors()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ADConnectors = tmp
            }
            if let value = dict["AdHostname"] as? String {
                self.adHostname = value
            }
            if let value = dict["BackupDCHostname"] as? String {
                self.backupDCHostname = value
            }
            if let value = dict["BackupDns"] as? String {
                self.backupDns = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["CustomSecurityGroupId"] as? String {
                self.customSecurityGroupId = value
            }
            if let value = dict["DesktopAccessType"] as? String {
                self.desktopAccessType = value
            }
            if let value = dict["DesktopVpcEndpoint"] as? String {
                self.desktopVpcEndpoint = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["DirectoryType"] as? String {
                self.directoryType = value
            }
            if let value = dict["DnsAddress"] as? [String] {
                self.dnsAddress = value
            }
            if let value = dict["DnsUserName"] as? String {
                self.dnsUserName = value
            }
            if let value = dict["DomainName"] as? String {
                self.domainName = value
            }
            if let value = dict["DomainPassword"] as? String {
                self.domainPassword = value
            }
            if let value = dict["DomainUserName"] as? String {
                self.domainUserName = value
            }
            if let value = dict["EnableAdminAccess"] as? Bool {
                self.enableAdminAccess = value
            }
            if let value = dict["EnableCrossDesktopAccess"] as? Bool {
                self.enableCrossDesktopAccess = value
            }
            if let value = dict["EnableInternetAccess"] as? Bool {
                self.enableInternetAccess = value
            }
            if let value = dict["FileSystemIds"] as? [String] {
                self.fileSystemIds = value
            }
            if let value = dict["Logs"] as? [Any?] {
                var tmp : [DescribeDirectoriesResponseBody.Directories.Logs] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDirectoriesResponseBody.Directories.Logs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logs = tmp
            }
            if let value = dict["MfaEnabled"] as? Bool {
                self.mfaEnabled = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NeedVerifyLoginRisk"] as? Bool {
                self.needVerifyLoginRisk = value
            }
            if let value = dict["OuName"] as? String {
                self.ouName = value
            }
            if let value = dict["SsoEnabled"] as? Bool {
                self.ssoEnabled = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SubDnsAddress"] as? [String] {
                self.subDnsAddress = value
            }
            if let value = dict["SubDomainName"] as? String {
                self.subDomainName = value
            }
            if let value = dict["TrustPassword"] as? String {
                self.trustPassword = value
            }
            if let value = dict["VSwitchIds"] as? [String] {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public var adHostname: String?

    public var directories: [DescribeDirectoriesResponseBody.Directories]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adHostname != nil {
            map["AdHostname"] = self.adHostname!
        }
        if self.directories != nil {
            var tmp : [Any] = []
            for k in self.directories! {
                tmp.append(k.toMap())
            }
            map["Directories"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdHostname"] as? String {
            self.adHostname = value
        }
        if let value = dict["Directories"] as? [Any?] {
            var tmp : [DescribeDirectoriesResponseBody.Directories] = []
            for v in value {
                if v != nil {
                    var model = DescribeDirectoriesResponseBody.Directories()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.directories = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDirectoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDirectoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDirectoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDrivesRequest : Tea.TeaModel {
    public var domainIds: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var resourceType: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainIds != nil {
            map["DomainIds"] = self.domainIds!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainIds"] as? [String] {
            self.domainIds = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class DescribeDrivesResponseBody : Tea.TeaModel {
    public class Drives : Tea.TeaModel {
        public class DesktopGroups : Tea.TeaModel {
            public var desktopGroupId: String?

            public var desktopGroupName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.desktopGroupId != nil {
                    map["DesktopGroupId"] = self.desktopGroupId!
                }
                if self.desktopGroupName != nil {
                    map["DesktopGroupName"] = self.desktopGroupName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DesktopGroupId"] as? String {
                    self.desktopGroupId = value
                }
                if let value = dict["DesktopGroupName"] as? String {
                    self.desktopGroupName = value
                }
            }
        }
        public var aliUid: Int64?

        public var description_: String?

        public var desktopGroupCount: Int32?

        public var desktopGroups: [DescribeDrivesResponseBody.Drives.DesktopGroups]?

        public var domainId: String?

        public var driveId: String?

        public var enableProfileManagement: Bool?

        public var externalDomainId: String?

        public var externalDriveId: String?

        public var externalUserId: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: String?

        public var name: String?

        public var profileRoaming: Bool?

        public var status: String?

        public var totalSize: Int64?

        public var type: String?

        public var usedSize: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.desktopGroupCount != nil {
                map["DesktopGroupCount"] = self.desktopGroupCount!
            }
            if self.desktopGroups != nil {
                var tmp : [Any] = []
                for k in self.desktopGroups! {
                    tmp.append(k.toMap())
                }
                map["DesktopGroups"] = tmp
            }
            if self.domainId != nil {
                map["DomainId"] = self.domainId!
            }
            if self.driveId != nil {
                map["DriveId"] = self.driveId!
            }
            if self.enableProfileManagement != nil {
                map["EnableProfileManagement"] = self.enableProfileManagement!
            }
            if self.externalDomainId != nil {
                map["ExternalDomainId"] = self.externalDomainId!
            }
            if self.externalDriveId != nil {
                map["ExternalDriveId"] = self.externalDriveId!
            }
            if self.externalUserId != nil {
                map["ExternalUserId"] = self.externalUserId!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.profileRoaming != nil {
                map["ProfileRoaming"] = self.profileRoaming!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalSize != nil {
                map["TotalSize"] = self.totalSize!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.usedSize != nil {
                map["UsedSize"] = self.usedSize!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? Int64 {
                self.aliUid = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DesktopGroupCount"] as? Int32 {
                self.desktopGroupCount = value
            }
            if let value = dict["DesktopGroups"] as? [Any?] {
                var tmp : [DescribeDrivesResponseBody.Drives.DesktopGroups] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDrivesResponseBody.Drives.DesktopGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.desktopGroups = tmp
            }
            if let value = dict["DomainId"] as? String {
                self.domainId = value
            }
            if let value = dict["DriveId"] as? String {
                self.driveId = value
            }
            if let value = dict["EnableProfileManagement"] as? Bool {
                self.enableProfileManagement = value
            }
            if let value = dict["ExternalDomainId"] as? String {
                self.externalDomainId = value
            }
            if let value = dict["ExternalDriveId"] as? String {
                self.externalDriveId = value
            }
            if let value = dict["ExternalUserId"] as? String {
                self.externalUserId = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProfileRoaming"] as? Bool {
                self.profileRoaming = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TotalSize"] as? Int64 {
                self.totalSize = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UsedSize"] as? Int64 {
                self.usedSize = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var code: String?

    public var count: Int32?

    public var drives: [DescribeDrivesResponseBody.Drives]?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.drives != nil {
            var tmp : [Any] = []
            for k in self.drives! {
                tmp.append(k.toMap())
            }
            map["Drives"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Drives"] as? [Any?] {
            var tmp : [DescribeDrivesResponseBody.Drives] = []
            for v in value {
                if v != nil {
                    var model = DescribeDrivesResponseBody.Drives()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.drives = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DescribeDrivesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDrivesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDrivesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEcdReportTasksRequest : Tea.TeaModel {
    public var pageNum: Int32?

    public var pageSize: Int32?

    public var status: [String]?

    public var subType: String?

    public var taskId: String?

    public var taskType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNum != nil {
            map["PageNum"] = self.pageNum!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.subType != nil {
            map["SubType"] = self.subType!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNum"] as? Int32 {
            self.pageNum = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Status"] as? [String] {
            self.status = value
        }
        if let value = dict["SubType"] as? String {
            self.subType = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
    }
}

public class DescribeEcdReportTasksResponseBody : Tea.TeaModel {
    public class ExportTaskList : Tea.TeaModel {
        public var downloadUrl: String?

        public var errorCode: String?

        public var errorMsg: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var progress: Double?

        public var reportFileName: String?

        public var status: String?

        public var subType: String?

        public var taskId: String?

        public var taskType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downloadUrl != nil {
                map["DownloadUrl"] = self.downloadUrl!
            }
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMsg != nil {
                map["ErrorMsg"] = self.errorMsg!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.progress != nil {
                map["Progress"] = self.progress!
            }
            if self.reportFileName != nil {
                map["ReportFileName"] = self.reportFileName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subType != nil {
                map["SubType"] = self.subType!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMsg"] as? String {
                self.errorMsg = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Progress"] as? Double {
                self.progress = value
            }
            if let value = dict["ReportFileName"] as? String {
                self.reportFileName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SubType"] as? String {
                self.subType = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
        }
    }
    public var exportTaskList: [DescribeEcdReportTasksResponseBody.ExportTaskList]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.exportTaskList != nil {
            var tmp : [Any] = []
            for k in self.exportTaskList! {
                tmp.append(k.toMap())
            }
            map["ExportTaskList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExportTaskList"] as? [Any?] {
            var tmp : [DescribeEcdReportTasksResponseBody.ExportTaskList] = []
            for v in value {
                if v != nil {
                    var model = DescribeEcdReportTasksResponseBody.ExportTaskList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.exportTaskList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeEcdReportTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEcdReportTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEcdReportTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFlowMetricRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var instanceType: String?

    public var metricType: String?

    public var period: Int32?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.metricType != nil {
            map["MetricType"] = self.metricType!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["MetricType"] as? String {
            self.metricType = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeFlowMetricResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFlowMetricResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFlowMetricResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFlowMetricResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFlowStatisticRequest : Tea.TeaModel {
    public var desktopId: String?

    public var officeSiteId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var period: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeFlowStatisticResponseBody : Tea.TeaModel {
    public class DesktopFlowStatistic : Tea.TeaModel {
        public var desktopId: String?

        public var desktopName: String?

        public var flowIn: String?

        public var flowRank: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.flowIn != nil {
                map["FlowIn"] = self.flowIn!
            }
            if self.flowRank != nil {
                map["FlowRank"] = self.flowRank!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["FlowIn"] as? String {
                self.flowIn = value
            }
            if let value = dict["FlowRank"] as? Int32 {
                self.flowRank = value
            }
        }
    }
    public var desktopCount: Int32?

    public var desktopFlowStatistic: [DescribeFlowStatisticResponseBody.DesktopFlowStatistic]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopCount != nil {
            map["DesktopCount"] = self.desktopCount!
        }
        if self.desktopFlowStatistic != nil {
            var tmp : [Any] = []
            for k in self.desktopFlowStatistic! {
                tmp.append(k.toMap())
            }
            map["DesktopFlowStatistic"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopCount"] as? Int32 {
            self.desktopCount = value
        }
        if let value = dict["DesktopFlowStatistic"] as? [Any?] {
            var tmp : [DescribeFlowStatisticResponseBody.DesktopFlowStatistic] = []
            for v in value {
                if v != nil {
                    var model = DescribeFlowStatisticResponseBody.DesktopFlowStatistic()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopFlowStatistic = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFlowStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFlowStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFlowStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeForwardTableEntriesRequest : Tea.TeaModel {
    public var forwardEntryId: String?

    public var forwardTableId: String?

    public var maxResults: Int32?

    public var natGatewayId: String?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forwardEntryId != nil {
            map["ForwardEntryId"] = self.forwardEntryId!
        }
        if self.forwardTableId != nil {
            map["ForwardTableId"] = self.forwardTableId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.natGatewayId != nil {
            map["NatGatewayId"] = self.natGatewayId!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForwardEntryId"] as? String {
            self.forwardEntryId = value
        }
        if let value = dict["ForwardTableId"] as? String {
            self.forwardTableId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NatGatewayId"] as? String {
            self.natGatewayId = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeForwardTableEntriesResponseBody : Tea.TeaModel {
    public class ForwardTableEntries : Tea.TeaModel {
        public var externalIp: String?

        public var externalPort: String?

        public var forwardEntryId: String?

        public var forwardEntryName: String?

        public var forwardTableId: String?

        public var internalIp: String?

        public var internalPort: String?

        public var ipProtocol: String?

        public var natGatewayId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.externalIp != nil {
                map["ExternalIp"] = self.externalIp!
            }
            if self.externalPort != nil {
                map["ExternalPort"] = self.externalPort!
            }
            if self.forwardEntryId != nil {
                map["ForwardEntryId"] = self.forwardEntryId!
            }
            if self.forwardEntryName != nil {
                map["ForwardEntryName"] = self.forwardEntryName!
            }
            if self.forwardTableId != nil {
                map["ForwardTableId"] = self.forwardTableId!
            }
            if self.internalIp != nil {
                map["InternalIp"] = self.internalIp!
            }
            if self.internalPort != nil {
                map["InternalPort"] = self.internalPort!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.natGatewayId != nil {
                map["NatGatewayId"] = self.natGatewayId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExternalIp"] as? String {
                self.externalIp = value
            }
            if let value = dict["ExternalPort"] as? String {
                self.externalPort = value
            }
            if let value = dict["ForwardEntryId"] as? String {
                self.forwardEntryId = value
            }
            if let value = dict["ForwardEntryName"] as? String {
                self.forwardEntryName = value
            }
            if let value = dict["ForwardTableId"] as? String {
                self.forwardTableId = value
            }
            if let value = dict["InternalIp"] as? String {
                self.internalIp = value
            }
            if let value = dict["InternalPort"] as? String {
                self.internalPort = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["NatGatewayId"] as? String {
                self.natGatewayId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var forwardTableEntries: [DescribeForwardTableEntriesResponseBody.ForwardTableEntries]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forwardTableEntries != nil {
            var tmp : [Any] = []
            for k in self.forwardTableEntries! {
                tmp.append(k.toMap())
            }
            map["ForwardTableEntries"] = tmp
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForwardTableEntries"] as? [Any?] {
            var tmp : [DescribeForwardTableEntriesResponseBody.ForwardTableEntries] = []
            for v in value {
                if v != nil {
                    var model = DescribeForwardTableEntriesResponseBody.ForwardTableEntries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.forwardTableEntries = tmp
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeForwardTableEntriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeForwardTableEntriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeForwardTableEntriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFotaPendingDesktopsRequest : Tea.TeaModel {
    public var desktopId: String?

    public var desktopName: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var taskUid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskUid != nil {
            map["TaskUid"] = self.taskUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskUid"] as? String {
            self.taskUid = value
        }
    }
}

public class DescribeFotaPendingDesktopsResponseBody : Tea.TeaModel {
    public class FotaPendingDesktops : Tea.TeaModel {
        public class Sessions : Tea.TeaModel {
            public var endUserId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endUserId != nil {
                    map["EndUserId"] = self.endUserId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndUserId"] as? String {
                    self.endUserId = value
                }
            }
        }
        public var currentAppVersion: String?

        public var desktopId: String?

        public var desktopName: String?

        public var fotaProject: String?

        public var officeSiteId: String?

        public var sessions: [DescribeFotaPendingDesktopsResponseBody.FotaPendingDesktops.Sessions]?

        public var status: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currentAppVersion != nil {
                map["CurrentAppVersion"] = self.currentAppVersion!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.fotaProject != nil {
                map["FotaProject"] = self.fotaProject!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.sessions != nil {
                var tmp : [Any] = []
                for k in self.sessions! {
                    tmp.append(k.toMap())
                }
                map["Sessions"] = tmp
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CurrentAppVersion"] as? String {
                self.currentAppVersion = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["FotaProject"] as? String {
                self.fotaProject = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["Sessions"] as? [Any?] {
                var tmp : [DescribeFotaPendingDesktopsResponseBody.FotaPendingDesktops.Sessions] = []
                for v in value {
                    if v != nil {
                        var model = DescribeFotaPendingDesktopsResponseBody.FotaPendingDesktops.Sessions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sessions = tmp
            }
            if let value = dict["Status"] as? Int64 {
                self.status = value
            }
        }
    }
    public var code: String?

    public var fotaPendingDesktops: [DescribeFotaPendingDesktopsResponseBody.FotaPendingDesktops]?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fotaPendingDesktops != nil {
            var tmp : [Any] = []
            for k in self.fotaPendingDesktops! {
                tmp.append(k.toMap())
            }
            map["FotaPendingDesktops"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FotaPendingDesktops"] as? [Any?] {
            var tmp : [DescribeFotaPendingDesktopsResponseBody.FotaPendingDesktops] = []
            for v in value {
                if v != nil {
                    var model = DescribeFotaPendingDesktopsResponseBody.FotaPendingDesktops()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fotaPendingDesktops = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFotaPendingDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFotaPendingDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFotaPendingDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeFotaTasksRequest : Tea.TeaModel {
    public var fotaStatus: String?

    public var lang: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var taskUid: [String]?

    public var userStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fotaStatus != nil {
            map["FotaStatus"] = self.fotaStatus!
        }
        if self.lang != nil {
            map["Lang"] = self.lang!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskUid != nil {
            map["TaskUid"] = self.taskUid!
        }
        if self.userStatus != nil {
            map["UserStatus"] = self.userStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FotaStatus"] as? String {
            self.fotaStatus = value
        }
        if let value = dict["Lang"] as? String {
            self.lang = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskUid"] as? [String] {
            self.taskUid = value
        }
        if let value = dict["UserStatus"] as? String {
            self.userStatus = value
        }
    }
}

public class DescribeFotaTasksResponseBody : Tea.TeaModel {
    public class FotaTasks : Tea.TeaModel {
        public var appVersion: String?

        public var fotaProject: String?

        public var pendingCustomImageCount: Int32?

        public var pendingDesktopCount: Int32?

        public var publishTime: String?

        public var releaseNote: String?

        public var size: Int32?

        public var status: String?

        public var taskUid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appVersion != nil {
                map["AppVersion"] = self.appVersion!
            }
            if self.fotaProject != nil {
                map["FotaProject"] = self.fotaProject!
            }
            if self.pendingCustomImageCount != nil {
                map["PendingCustomImageCount"] = self.pendingCustomImageCount!
            }
            if self.pendingDesktopCount != nil {
                map["PendingDesktopCount"] = self.pendingDesktopCount!
            }
            if self.publishTime != nil {
                map["PublishTime"] = self.publishTime!
            }
            if self.releaseNote != nil {
                map["ReleaseNote"] = self.releaseNote!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskUid != nil {
                map["TaskUid"] = self.taskUid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppVersion"] as? String {
                self.appVersion = value
            }
            if let value = dict["FotaProject"] as? String {
                self.fotaProject = value
            }
            if let value = dict["PendingCustomImageCount"] as? Int32 {
                self.pendingCustomImageCount = value
            }
            if let value = dict["PendingDesktopCount"] as? Int32 {
                self.pendingDesktopCount = value
            }
            if let value = dict["PublishTime"] as? String {
                self.publishTime = value
            }
            if let value = dict["ReleaseNote"] as? String {
                self.releaseNote = value
            }
            if let value = dict["Size"] as? Int32 {
                self.size = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskUid"] as? String {
                self.taskUid = value
            }
        }
    }
    public var code: String?

    public var fotaTasks: [DescribeFotaTasksResponseBody.FotaTasks]?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fotaTasks != nil {
            var tmp : [Any] = []
            for k in self.fotaTasks! {
                tmp.append(k.toMap())
            }
            map["FotaTasks"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FotaTasks"] as? [Any?] {
            var tmp : [DescribeFotaTasksResponseBody.FotaTasks] = []
            for v in value {
                if v != nil {
                    var model = DescribeFotaTasksResponseBody.FotaTasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fotaTasks = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeFotaTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeFotaTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeFotaTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGuestApplicationsRequest : Tea.TeaModel {
    public var desktopId: String?

    public var endUserId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeGuestApplicationsResponseBody : Tea.TeaModel {
    public class Applications : Tea.TeaModel {
        public class ProcessData : Tea.TeaModel {
            public var applicationName: String?

            public var applicationVersion: String?

            public var cpuPercent: Double?

            public var gpuPercent: Double?

            public var iospeed: Double?

            public var memPercent: Double?

            public var pid: Int32?

            public var processPath: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applicationName != nil {
                    map["ApplicationName"] = self.applicationName!
                }
                if self.applicationVersion != nil {
                    map["ApplicationVersion"] = self.applicationVersion!
                }
                if self.cpuPercent != nil {
                    map["CpuPercent"] = self.cpuPercent!
                }
                if self.gpuPercent != nil {
                    map["GpuPercent"] = self.gpuPercent!
                }
                if self.iospeed != nil {
                    map["Iospeed"] = self.iospeed!
                }
                if self.memPercent != nil {
                    map["MemPercent"] = self.memPercent!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.processPath != nil {
                    map["ProcessPath"] = self.processPath!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplicationName"] as? String {
                    self.applicationName = value
                }
                if let value = dict["ApplicationVersion"] as? String {
                    self.applicationVersion = value
                }
                if let value = dict["CpuPercent"] as? Double {
                    self.cpuPercent = value
                }
                if let value = dict["GpuPercent"] as? Double {
                    self.gpuPercent = value
                }
                if let value = dict["Iospeed"] as? Double {
                    self.iospeed = value
                }
                if let value = dict["MemPercent"] as? Double {
                    self.memPercent = value
                }
                if let value = dict["Pid"] as? Int32 {
                    self.pid = value
                }
                if let value = dict["ProcessPath"] as? String {
                    self.processPath = value
                }
            }
        }
        public var applicationName: String?

        public var applicationVersion: String?

        public var cpuPercent: Double?

        public var gpuPercent: Double?

        public var iconUrl: String?

        public var ioSpeed: Double?

        public var memPercent: Double?

        public var pid: Int32?

        public var processData: [DescribeGuestApplicationsResponseBody.Applications.ProcessData]?

        public var processPath: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applicationName != nil {
                map["ApplicationName"] = self.applicationName!
            }
            if self.applicationVersion != nil {
                map["ApplicationVersion"] = self.applicationVersion!
            }
            if self.cpuPercent != nil {
                map["CpuPercent"] = self.cpuPercent!
            }
            if self.gpuPercent != nil {
                map["GpuPercent"] = self.gpuPercent!
            }
            if self.iconUrl != nil {
                map["IconUrl"] = self.iconUrl!
            }
            if self.ioSpeed != nil {
                map["IoSpeed"] = self.ioSpeed!
            }
            if self.memPercent != nil {
                map["MemPercent"] = self.memPercent!
            }
            if self.pid != nil {
                map["Pid"] = self.pid!
            }
            if self.processData != nil {
                var tmp : [Any] = []
                for k in self.processData! {
                    tmp.append(k.toMap())
                }
                map["ProcessData"] = tmp
            }
            if self.processPath != nil {
                map["ProcessPath"] = self.processPath!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplicationName"] as? String {
                self.applicationName = value
            }
            if let value = dict["ApplicationVersion"] as? String {
                self.applicationVersion = value
            }
            if let value = dict["CpuPercent"] as? Double {
                self.cpuPercent = value
            }
            if let value = dict["GpuPercent"] as? Double {
                self.gpuPercent = value
            }
            if let value = dict["IconUrl"] as? String {
                self.iconUrl = value
            }
            if let value = dict["IoSpeed"] as? Double {
                self.ioSpeed = value
            }
            if let value = dict["MemPercent"] as? Double {
                self.memPercent = value
            }
            if let value = dict["Pid"] as? Int32 {
                self.pid = value
            }
            if let value = dict["ProcessData"] as? [Any?] {
                var tmp : [DescribeGuestApplicationsResponseBody.Applications.ProcessData] = []
                for v in value {
                    if v != nil {
                        var model = DescribeGuestApplicationsResponseBody.Applications.ProcessData()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.processData = tmp
            }
            if let value = dict["ProcessPath"] as? String {
                self.processPath = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var applications: [DescribeGuestApplicationsResponseBody.Applications]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applications != nil {
            var tmp : [Any] = []
            for k in self.applications! {
                tmp.append(k.toMap())
            }
            map["Applications"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Applications"] as? [Any?] {
            var tmp : [DescribeGuestApplicationsResponseBody.Applications] = []
            for v in value {
                if v != nil {
                    var model = DescribeGuestApplicationsResponseBody.Applications()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.applications = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeGuestApplicationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGuestApplicationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGuestApplicationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeImageModifiedRecordsRequest : Tea.TeaModel {
    public var desktopId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeImageModifiedRecordsResponseBody : Tea.TeaModel {
    public class ImageModifiedRecords : Tea.TeaModel {
        public var imageId: String?

        public var imageName: String?

        public var newImageId: String?

        public var newImageName: String?

        public var reason: String?

        public var status: Int32?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageName != nil {
                map["ImageName"] = self.imageName!
            }
            if self.newImageId != nil {
                map["NewImageId"] = self.newImageId!
            }
            if self.newImageName != nil {
                map["NewImageName"] = self.newImageName!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageName"] as? String {
                self.imageName = value
            }
            if let value = dict["NewImageId"] as? String {
                self.newImageId = value
            }
            if let value = dict["NewImageName"] as? String {
                self.newImageName = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var imageModifiedRecords: [DescribeImageModifiedRecordsResponseBody.ImageModifiedRecords]?

    public var nextToken: String?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageModifiedRecords != nil {
            var tmp : [Any] = []
            for k in self.imageModifiedRecords! {
                tmp.append(k.toMap())
            }
            map["ImageModifiedRecords"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageModifiedRecords"] as? [Any?] {
            var tmp : [DescribeImageModifiedRecordsResponseBody.ImageModifiedRecords] = []
            for v in value {
                if v != nil {
                    var model = DescribeImageModifiedRecordsResponseBody.ImageModifiedRecords()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.imageModifiedRecords = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeImageModifiedRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeImageModifiedRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeImageModifiedRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeImagePermissionRequest : Tea.TeaModel {
    public var imageId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeImagePermissionResponseBody : Tea.TeaModel {
    public var aliUids: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUids != nil {
            map["AliUids"] = self.aliUids!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUids"] as? [String] {
            self.aliUids = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeImagePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeImagePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeImagePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeImagesRequest : Tea.TeaModel {
    public var desktopInstanceType: String?

    public var fotaVersion: String?

    public var gpuCategory: Bool?

    public var gpuDriverVersion: String?

    public var imageId: [String]?

    public var imageName: String?

    public var imageStatus: String?

    public var imageType: String?

    public var languageType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var osType: String?

    public var protocolType: String?

    public var regionId: String?

    public var sessionType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopInstanceType != nil {
            map["DesktopInstanceType"] = self.desktopInstanceType!
        }
        if self.fotaVersion != nil {
            map["FotaVersion"] = self.fotaVersion!
        }
        if self.gpuCategory != nil {
            map["GpuCategory"] = self.gpuCategory!
        }
        if self.gpuDriverVersion != nil {
            map["GpuDriverVersion"] = self.gpuDriverVersion!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.imageName != nil {
            map["ImageName"] = self.imageName!
        }
        if self.imageStatus != nil {
            map["ImageStatus"] = self.imageStatus!
        }
        if self.imageType != nil {
            map["ImageType"] = self.imageType!
        }
        if self.languageType != nil {
            map["LanguageType"] = self.languageType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.osType != nil {
            map["OsType"] = self.osType!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sessionType != nil {
            map["SessionType"] = self.sessionType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopInstanceType"] as? String {
            self.desktopInstanceType = value
        }
        if let value = dict["FotaVersion"] as? String {
            self.fotaVersion = value
        }
        if let value = dict["GpuCategory"] as? Bool {
            self.gpuCategory = value
        }
        if let value = dict["GpuDriverVersion"] as? String {
            self.gpuDriverVersion = value
        }
        if let value = dict["ImageId"] as? [String] {
            self.imageId = value
        }
        if let value = dict["ImageName"] as? String {
            self.imageName = value
        }
        if let value = dict["ImageStatus"] as? String {
            self.imageStatus = value
        }
        if let value = dict["ImageType"] as? String {
            self.imageType = value
        }
        if let value = dict["LanguageType"] as? String {
            self.languageType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OsType"] as? String {
            self.osType = value
        }
        if let value = dict["ProtocolType"] as? String {
            self.protocolType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SessionType"] as? String {
            self.sessionType = value
        }
    }
}

public class DescribeImagesResponseBody : Tea.TeaModel {
    public class Images : Tea.TeaModel {
        public var appVersion: String?

        public var creationTime: String?

        public var dataDiskSize: Int32?

        public var description_: String?

        public var gpuCategory: Bool?

        public var gpuDriverVersion: String?

        public var imageId: String?

        public var imageType: String?

        public var name: String?

        public var osType: String?

        public var platform: String?

        public var progress: String?

        public var protocolType: String?

        public var sessionType: String?

        public var sharedCount: Int32?

        public var size: Int32?

        public var status: String?

        public var supportedLanguages: [String]?

        public var updateTime: String?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appVersion != nil {
                map["AppVersion"] = self.appVersion!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gpuCategory != nil {
                map["GpuCategory"] = self.gpuCategory!
            }
            if self.gpuDriverVersion != nil {
                map["GpuDriverVersion"] = self.gpuDriverVersion!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageType != nil {
                map["ImageType"] = self.imageType!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.platform != nil {
                map["Platform"] = self.platform!
            }
            if self.progress != nil {
                map["Progress"] = self.progress!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.sessionType != nil {
                map["SessionType"] = self.sessionType!
            }
            if self.sharedCount != nil {
                map["SharedCount"] = self.sharedCount!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.supportedLanguages != nil {
                map["SupportedLanguages"] = self.supportedLanguages!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppVersion"] as? String {
                self.appVersion = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["DataDiskSize"] as? Int32 {
                self.dataDiskSize = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GpuCategory"] as? Bool {
                self.gpuCategory = value
            }
            if let value = dict["GpuDriverVersion"] as? String {
                self.gpuDriverVersion = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageType"] as? String {
                self.imageType = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["Platform"] as? String {
                self.platform = value
            }
            if let value = dict["Progress"] as? String {
                self.progress = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["SessionType"] as? String {
                self.sessionType = value
            }
            if let value = dict["SharedCount"] as? Int32 {
                self.sharedCount = value
            }
            if let value = dict["Size"] as? Int32 {
                self.size = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SupportedLanguages"] as? [String] {
                self.supportedLanguages = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public var images: [DescribeImagesResponseBody.Images]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.images != nil {
            var tmp : [Any] = []
            for k in self.images! {
                tmp.append(k.toMap())
            }
            map["Images"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Images"] as? [Any?] {
            var tmp : [DescribeImagesResponseBody.Images] = []
            for v in value {
                if v != nil {
                    var model = DescribeImagesResponseBody.Images()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.images = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeImagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeImagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeImagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInvocationsRequest : Tea.TeaModel {
    public var commandType: String?

    public var contentEncoding: String?

    public var desktopId: String?

    public var desktopIds: [String]?

    public var endUserId: String?

    public var includeInvokeDesktops: Bool?

    public var includeOutput: Bool?

    public var invokeId: String?

    public var invokeStatus: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commandType != nil {
            map["CommandType"] = self.commandType!
        }
        if self.contentEncoding != nil {
            map["ContentEncoding"] = self.contentEncoding!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopIds != nil {
            map["DesktopIds"] = self.desktopIds!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.includeInvokeDesktops != nil {
            map["IncludeInvokeDesktops"] = self.includeInvokeDesktops!
        }
        if self.includeOutput != nil {
            map["IncludeOutput"] = self.includeOutput!
        }
        if self.invokeId != nil {
            map["InvokeId"] = self.invokeId!
        }
        if self.invokeStatus != nil {
            map["InvokeStatus"] = self.invokeStatus!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommandType"] as? String {
            self.commandType = value
        }
        if let value = dict["ContentEncoding"] as? String {
            self.contentEncoding = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DesktopIds"] as? [String] {
            self.desktopIds = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["IncludeInvokeDesktops"] as? Bool {
            self.includeInvokeDesktops = value
        }
        if let value = dict["IncludeOutput"] as? Bool {
            self.includeOutput = value
        }
        if let value = dict["InvokeId"] as? String {
            self.invokeId = value
        }
        if let value = dict["InvokeStatus"] as? String {
            self.invokeStatus = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeInvocationsResponseBody : Tea.TeaModel {
    public class Invocations : Tea.TeaModel {
        public class InvokeDesktops : Tea.TeaModel {
            public var creationTime: String?

            public var desktopId: String?

            public var desktopName: String?

            public var dropped: Int32?

            public var errorCode: String?

            public var errorInfo: String?

            public var exitCode: Int64?

            public var finishTime: String?

            public var invocationStatus: String?

            public var output: String?

            public var repeats: Int32?

            public var startTime: String?

            public var stopTime: String?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.desktopId != nil {
                    map["DesktopId"] = self.desktopId!
                }
                if self.desktopName != nil {
                    map["DesktopName"] = self.desktopName!
                }
                if self.dropped != nil {
                    map["Dropped"] = self.dropped!
                }
                if self.errorCode != nil {
                    map["ErrorCode"] = self.errorCode!
                }
                if self.errorInfo != nil {
                    map["ErrorInfo"] = self.errorInfo!
                }
                if self.exitCode != nil {
                    map["ExitCode"] = self.exitCode!
                }
                if self.finishTime != nil {
                    map["FinishTime"] = self.finishTime!
                }
                if self.invocationStatus != nil {
                    map["InvocationStatus"] = self.invocationStatus!
                }
                if self.output != nil {
                    map["Output"] = self.output!
                }
                if self.repeats != nil {
                    map["Repeats"] = self.repeats!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.stopTime != nil {
                    map["StopTime"] = self.stopTime!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["DesktopId"] as? String {
                    self.desktopId = value
                }
                if let value = dict["DesktopName"] as? String {
                    self.desktopName = value
                }
                if let value = dict["Dropped"] as? Int32 {
                    self.dropped = value
                }
                if let value = dict["ErrorCode"] as? String {
                    self.errorCode = value
                }
                if let value = dict["ErrorInfo"] as? String {
                    self.errorInfo = value
                }
                if let value = dict["ExitCode"] as? Int64 {
                    self.exitCode = value
                }
                if let value = dict["FinishTime"] as? String {
                    self.finishTime = value
                }
                if let value = dict["InvocationStatus"] as? String {
                    self.invocationStatus = value
                }
                if let value = dict["Output"] as? String {
                    self.output = value
                }
                if let value = dict["Repeats"] as? Int32 {
                    self.repeats = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["StopTime"] as? String {
                    self.stopTime = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var commandContent: String?

        public var commandType: String?

        public var creationTime: String?

        public var endUserId: String?

        public var invocationStatus: String?

        public var invokeDesktopCount: Int32?

        public var invokeDesktopSucceedCount: Int32?

        public var invokeDesktops: [DescribeInvocationsResponseBody.Invocations.InvokeDesktops]?

        public var invokeId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commandContent != nil {
                map["CommandContent"] = self.commandContent!
            }
            if self.commandType != nil {
                map["CommandType"] = self.commandType!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.invocationStatus != nil {
                map["InvocationStatus"] = self.invocationStatus!
            }
            if self.invokeDesktopCount != nil {
                map["InvokeDesktopCount"] = self.invokeDesktopCount!
            }
            if self.invokeDesktopSucceedCount != nil {
                map["InvokeDesktopSucceedCount"] = self.invokeDesktopSucceedCount!
            }
            if self.invokeDesktops != nil {
                var tmp : [Any] = []
                for k in self.invokeDesktops! {
                    tmp.append(k.toMap())
                }
                map["InvokeDesktops"] = tmp
            }
            if self.invokeId != nil {
                map["InvokeId"] = self.invokeId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommandContent"] as? String {
                self.commandContent = value
            }
            if let value = dict["CommandType"] as? String {
                self.commandType = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["InvocationStatus"] as? String {
                self.invocationStatus = value
            }
            if let value = dict["InvokeDesktopCount"] as? Int32 {
                self.invokeDesktopCount = value
            }
            if let value = dict["InvokeDesktopSucceedCount"] as? Int32 {
                self.invokeDesktopSucceedCount = value
            }
            if let value = dict["InvokeDesktops"] as? [Any?] {
                var tmp : [DescribeInvocationsResponseBody.Invocations.InvokeDesktops] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInvocationsResponseBody.Invocations.InvokeDesktops()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.invokeDesktops = tmp
            }
            if let value = dict["InvokeId"] as? String {
                self.invokeId = value
            }
        }
    }
    public var invocations: [DescribeInvocationsResponseBody.Invocations]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.invocations != nil {
            var tmp : [Any] = []
            for k in self.invocations! {
                tmp.append(k.toMap())
            }
            map["Invocations"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Invocations"] as? [Any?] {
            var tmp : [DescribeInvocationsResponseBody.Invocations] = []
            for v in value {
                if v != nil {
                    var model = DescribeInvocationsResponseBody.Invocations()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.invocations = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInvocationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInvocationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInvocationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeIpAddressesRequest : Tea.TeaModel {
    public var eipId: String?

    public var instanceId: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eipId != nil {
            map["EipId"] = self.eipId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EipId"] as? String {
            self.eipId = value
        }
        if let value = dict["InstanceId"] as? [String] {
            self.instanceId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeIpAddressesResponseBody : Tea.TeaModel {
    public class IpAddresses : Tea.TeaModel {
        public var createByWuying: Bool?

        public var eipAddress: String?

        public var eipId: String?

        public var eipStatus: String?

        public var instanceId: String?

        public var instanceType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createByWuying != nil {
                map["CreateByWuying"] = self.createByWuying!
            }
            if self.eipAddress != nil {
                map["EipAddress"] = self.eipAddress!
            }
            if self.eipId != nil {
                map["EipId"] = self.eipId!
            }
            if self.eipStatus != nil {
                map["EipStatus"] = self.eipStatus!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceType != nil {
                map["InstanceType"] = self.instanceType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateByWuying"] as? Bool {
                self.createByWuying = value
            }
            if let value = dict["EipAddress"] as? String {
                self.eipAddress = value
            }
            if let value = dict["EipId"] as? String {
                self.eipId = value
            }
            if let value = dict["EipStatus"] as? String {
                self.eipStatus = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InstanceType"] as? String {
                self.instanceType = value
            }
        }
    }
    public var ipAddresses: [DescribeIpAddressesResponseBody.IpAddresses]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipAddresses != nil {
            var tmp : [Any] = []
            for k in self.ipAddresses! {
                tmp.append(k.toMap())
            }
            map["IpAddresses"] = tmp
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpAddresses"] as? [Any?] {
            var tmp : [DescribeIpAddressesResponseBody.IpAddresses] = []
            for v in value {
                if v != nil {
                    var model = DescribeIpAddressesResponseBody.IpAddresses()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ipAddresses = tmp
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeIpAddressesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeIpAddressesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeIpAddressesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeKmsKeysRequest : Tea.TeaModel {
    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeKmsKeysResponseBody : Tea.TeaModel {
    public class Keys : Tea.TeaModel {
        public var alias: String?

        public var arn: String?

        public var keyId: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alias != nil {
                map["Alias"] = self.alias!
            }
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            if self.keyId != nil {
                map["KeyId"] = self.keyId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Alias"] as? String {
                self.alias = value
            }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
            if let value = dict["KeyId"] as? String {
                self.keyId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var authorizeStatus: String?

    public var keys: [DescribeKmsKeysResponseBody.Keys]?

    public var kmsServiceStatus: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizeStatus != nil {
            map["AuthorizeStatus"] = self.authorizeStatus!
        }
        if self.keys != nil {
            var tmp : [Any] = []
            for k in self.keys! {
                tmp.append(k.toMap())
            }
            map["Keys"] = tmp
        }
        if self.kmsServiceStatus != nil {
            map["KmsServiceStatus"] = self.kmsServiceStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizeStatus"] as? String {
            self.authorizeStatus = value
        }
        if let value = dict["Keys"] as? [Any?] {
            var tmp : [DescribeKmsKeysResponseBody.Keys] = []
            for v in value {
                if v != nil {
                    var model = DescribeKmsKeysResponseBody.Keys()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.keys = tmp
        }
        if let value = dict["KmsServiceStatus"] as? String {
            self.kmsServiceStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeKmsKeysResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeKmsKeysResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeKmsKeysResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeModificationPriceRequest : Tea.TeaModel {
    public class ResourceSpecs : Tea.TeaModel {
        public var desktopId: String?

        public var rootDiskSizeGib: Int32?

        public var userDiskSizeGib: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.rootDiskSizeGib != nil {
                map["RootDiskSizeGib"] = self.rootDiskSizeGib!
            }
            if self.userDiskSizeGib != nil {
                map["UserDiskSizeGib"] = self.userDiskSizeGib!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["RootDiskSizeGib"] as? Int32 {
                self.rootDiskSizeGib = value
            }
            if let value = dict["UserDiskSizeGib"] as? Int32 {
                self.userDiskSizeGib = value
            }
        }
    }
    public var bandwidth: Int32?

    public var instanceId: String?

    public var instanceType: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceSpecs: [DescribeModificationPriceRequest.ResourceSpecs]?

    public var resourceType: String?

    public var rootDiskSizeGib: Int32?

    public var userDiskSizeGib: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bandwidth != nil {
            map["Bandwidth"] = self.bandwidth!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceSpecs != nil {
            var tmp : [Any] = []
            for k in self.resourceSpecs! {
                tmp.append(k.toMap())
            }
            map["ResourceSpecs"] = tmp
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.rootDiskSizeGib != nil {
            map["RootDiskSizeGib"] = self.rootDiskSizeGib!
        }
        if self.userDiskSizeGib != nil {
            map["UserDiskSizeGib"] = self.userDiskSizeGib!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bandwidth"] as? Int32 {
            self.bandwidth = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceSpecs"] as? [Any?] {
            var tmp : [DescribeModificationPriceRequest.ResourceSpecs] = []
            for v in value {
                if v != nil {
                    var model = DescribeModificationPriceRequest.ResourceSpecs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceSpecs = tmp
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["RootDiskSizeGib"] as? Int32 {
            self.rootDiskSizeGib = value
        }
        if let value = dict["UserDiskSizeGib"] as? Int32 {
            self.userDiskSizeGib = value
        }
    }
}

public class DescribeModificationPriceResponseBody : Tea.TeaModel {
    public class PriceInfo : Tea.TeaModel {
        public class Price : Tea.TeaModel {
            public class Promotions : Tea.TeaModel {
                public var optionCode: String?

                public var promotionDesc: String?

                public var promotionId: String?

                public var promotionName: String?

                public var selected: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.optionCode != nil {
                        map["OptionCode"] = self.optionCode!
                    }
                    if self.promotionDesc != nil {
                        map["PromotionDesc"] = self.promotionDesc!
                    }
                    if self.promotionId != nil {
                        map["PromotionId"] = self.promotionId!
                    }
                    if self.promotionName != nil {
                        map["PromotionName"] = self.promotionName!
                    }
                    if self.selected != nil {
                        map["Selected"] = self.selected!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["OptionCode"] as? String {
                        self.optionCode = value
                    }
                    if let value = dict["PromotionDesc"] as? String {
                        self.promotionDesc = value
                    }
                    if let value = dict["PromotionId"] as? String {
                        self.promotionId = value
                    }
                    if let value = dict["PromotionName"] as? String {
                        self.promotionName = value
                    }
                    if let value = dict["Selected"] as? Bool {
                        self.selected = value
                    }
                }
            }
            public var currency: String?

            public var discountPrice: Double?

            public var orderLines: [String: String]?

            public var originalPrice: Double?

            public var promotions: [DescribeModificationPriceResponseBody.PriceInfo.Price.Promotions]?

            public var tradePrice: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.discountPrice != nil {
                    map["DiscountPrice"] = self.discountPrice!
                }
                if self.orderLines != nil {
                    map["OrderLines"] = self.orderLines!
                }
                if self.originalPrice != nil {
                    map["OriginalPrice"] = self.originalPrice!
                }
                if self.promotions != nil {
                    var tmp : [Any] = []
                    for k in self.promotions! {
                        tmp.append(k.toMap())
                    }
                    map["Promotions"] = tmp
                }
                if self.tradePrice != nil {
                    map["TradePrice"] = self.tradePrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DiscountPrice"] as? Double {
                    self.discountPrice = value
                }
                if let value = dict["OrderLines"] as? [String: String] {
                    self.orderLines = value
                }
                if let value = dict["OriginalPrice"] as? Double {
                    self.originalPrice = value
                }
                if let value = dict["Promotions"] as? [Any?] {
                    var tmp : [DescribeModificationPriceResponseBody.PriceInfo.Price.Promotions] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeModificationPriceResponseBody.PriceInfo.Price.Promotions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.promotions = tmp
                }
                if let value = dict["TradePrice"] as? Double {
                    self.tradePrice = value
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public var description_: String?

            public var ruleId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["RuleId"] as? Int64 {
                    self.ruleId = value
                }
            }
        }
        public var price: DescribeModificationPriceResponseBody.PriceInfo.Price?

        public var rules: [DescribeModificationPriceResponseBody.PriceInfo.Rules]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.price?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.price != nil {
                map["Price"] = self.price?.toMap()
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Price"] as? [String: Any?] {
                var model = DescribeModificationPriceResponseBody.PriceInfo.Price()
                model.fromMap(value)
                self.price = model
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [DescribeModificationPriceResponseBody.PriceInfo.Rules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeModificationPriceResponseBody.PriceInfo.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
        }
    }
    public var priceInfo: DescribeModificationPriceResponseBody.PriceInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.priceInfo != nil {
            map["PriceInfo"] = self.priceInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PriceInfo"] as? [String: Any?] {
            var model = DescribeModificationPriceResponseBody.PriceInfo()
            model.fromMap(value)
            self.priceInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeModificationPriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeModificationPriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeModificationPriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNASFileSystemsRequest : Tea.TeaModel {
    public var fileSystemId: [String]?

    public var matchCompatibleProfile: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.matchCompatibleProfile != nil {
            map["MatchCompatibleProfile"] = self.matchCompatibleProfile!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileSystemId"] as? [String] {
            self.fileSystemId = value
        }
        if let value = dict["MatchCompatibleProfile"] as? Bool {
            self.matchCompatibleProfile = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeNASFileSystemsResponseBody : Tea.TeaModel {
    public class FileSystems : Tea.TeaModel {
        public class AppInstanceGroups : Tea.TeaModel {
            public var appInstanceGroupId: String?

            public var appInstanceGroupName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appInstanceGroupId != nil {
                    map["AppInstanceGroupId"] = self.appInstanceGroupId!
                }
                if self.appInstanceGroupName != nil {
                    map["AppInstanceGroupName"] = self.appInstanceGroupName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppInstanceGroupId"] as? String {
                    self.appInstanceGroupId = value
                }
                if let value = dict["AppInstanceGroupName"] as? String {
                    self.appInstanceGroupName = value
                }
            }
        }
        public class DesktopGroups : Tea.TeaModel {
            public var desktopGroupId: String?

            public var desktopGroupName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.desktopGroupId != nil {
                    map["DesktopGroupId"] = self.desktopGroupId!
                }
                if self.desktopGroupName != nil {
                    map["DesktopGroupName"] = self.desktopGroupName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DesktopGroupId"] as? String {
                    self.desktopGroupId = value
                }
                if let value = dict["DesktopGroupName"] as? String {
                    self.desktopGroupName = value
                }
            }
        }
        public class OfficeSites : Tea.TeaModel {
            public var officeSiteId: String?

            public var officeSiteName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.officeSiteId != nil {
                    map["OfficeSiteId"] = self.officeSiteId!
                }
                if self.officeSiteName != nil {
                    map["OfficeSiteName"] = self.officeSiteName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["OfficeSiteId"] as? String {
                    self.officeSiteId = value
                }
                if let value = dict["OfficeSiteName"] as? String {
                    self.officeSiteName = value
                }
            }
        }
        public var allowOperateUserDrive: Bool?

        public var appInstanceGroups: [DescribeNASFileSystemsResponseBody.FileSystems.AppInstanceGroups]?

        public var capacity: Int64?

        public var createTime: String?

        public var description_: String?

        public var desktopGroups: [DescribeNASFileSystemsResponseBody.FileSystems.DesktopGroups]?

        public var encryptionEnabled: Bool?

        public var fileSystemId: String?

        public var fileSystemName: String?

        public var fileSystemStatus: String?

        public var fileSystemType: String?

        public var meteredSize: Int64?

        public var mountTargetDomain: String?

        public var mountTargetStatus: String?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSites: [DescribeNASFileSystemsResponseBody.FileSystems.OfficeSites]?

        public var profileCompatible: Bool?

        public var regionId: String?

        public var scene: String?

        public var storageType: String?

        public var supportAcl: Bool?

        public var zoneId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowOperateUserDrive != nil {
                map["AllowOperateUserDrive"] = self.allowOperateUserDrive!
            }
            if self.appInstanceGroups != nil {
                var tmp : [Any] = []
                for k in self.appInstanceGroups! {
                    tmp.append(k.toMap())
                }
                map["AppInstanceGroups"] = tmp
            }
            if self.capacity != nil {
                map["Capacity"] = self.capacity!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.desktopGroups != nil {
                var tmp : [Any] = []
                for k in self.desktopGroups! {
                    tmp.append(k.toMap())
                }
                map["DesktopGroups"] = tmp
            }
            if self.encryptionEnabled != nil {
                map["EncryptionEnabled"] = self.encryptionEnabled!
            }
            if self.fileSystemId != nil {
                map["FileSystemId"] = self.fileSystemId!
            }
            if self.fileSystemName != nil {
                map["FileSystemName"] = self.fileSystemName!
            }
            if self.fileSystemStatus != nil {
                map["FileSystemStatus"] = self.fileSystemStatus!
            }
            if self.fileSystemType != nil {
                map["FileSystemType"] = self.fileSystemType!
            }
            if self.meteredSize != nil {
                map["MeteredSize"] = self.meteredSize!
            }
            if self.mountTargetDomain != nil {
                map["MountTargetDomain"] = self.mountTargetDomain!
            }
            if self.mountTargetStatus != nil {
                map["MountTargetStatus"] = self.mountTargetStatus!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSites != nil {
                var tmp : [Any] = []
                for k in self.officeSites! {
                    tmp.append(k.toMap())
                }
                map["OfficeSites"] = tmp
            }
            if self.profileCompatible != nil {
                map["ProfileCompatible"] = self.profileCompatible!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.scene != nil {
                map["Scene"] = self.scene!
            }
            if self.storageType != nil {
                map["StorageType"] = self.storageType!
            }
            if self.supportAcl != nil {
                map["SupportAcl"] = self.supportAcl!
            }
            if self.zoneId != nil {
                map["ZoneId"] = self.zoneId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowOperateUserDrive"] as? Bool {
                self.allowOperateUserDrive = value
            }
            if let value = dict["AppInstanceGroups"] as? [Any?] {
                var tmp : [DescribeNASFileSystemsResponseBody.FileSystems.AppInstanceGroups] = []
                for v in value {
                    if v != nil {
                        var model = DescribeNASFileSystemsResponseBody.FileSystems.AppInstanceGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appInstanceGroups = tmp
            }
            if let value = dict["Capacity"] as? Int64 {
                self.capacity = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DesktopGroups"] as? [Any?] {
                var tmp : [DescribeNASFileSystemsResponseBody.FileSystems.DesktopGroups] = []
                for v in value {
                    if v != nil {
                        var model = DescribeNASFileSystemsResponseBody.FileSystems.DesktopGroups()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.desktopGroups = tmp
            }
            if let value = dict["EncryptionEnabled"] as? Bool {
                self.encryptionEnabled = value
            }
            if let value = dict["FileSystemId"] as? String {
                self.fileSystemId = value
            }
            if let value = dict["FileSystemName"] as? String {
                self.fileSystemName = value
            }
            if let value = dict["FileSystemStatus"] as? String {
                self.fileSystemStatus = value
            }
            if let value = dict["FileSystemType"] as? String {
                self.fileSystemType = value
            }
            if let value = dict["MeteredSize"] as? Int64 {
                self.meteredSize = value
            }
            if let value = dict["MountTargetDomain"] as? String {
                self.mountTargetDomain = value
            }
            if let value = dict["MountTargetStatus"] as? String {
                self.mountTargetStatus = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSites"] as? [Any?] {
                var tmp : [DescribeNASFileSystemsResponseBody.FileSystems.OfficeSites] = []
                for v in value {
                    if v != nil {
                        var model = DescribeNASFileSystemsResponseBody.FileSystems.OfficeSites()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.officeSites = tmp
            }
            if let value = dict["ProfileCompatible"] as? Bool {
                self.profileCompatible = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Scene"] as? String {
                self.scene = value
            }
            if let value = dict["StorageType"] as? String {
                self.storageType = value
            }
            if let value = dict["SupportAcl"] as? Bool {
                self.supportAcl = value
            }
            if let value = dict["ZoneId"] as? String {
                self.zoneId = value
            }
        }
    }
    public var fileSystems: [DescribeNASFileSystemsResponseBody.FileSystems]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileSystems != nil {
            var tmp : [Any] = []
            for k in self.fileSystems! {
                tmp.append(k.toMap())
            }
            map["FileSystems"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileSystems"] as? [Any?] {
            var tmp : [DescribeNASFileSystemsResponseBody.FileSystems] = []
            for v in value {
                if v != nil {
                    var model = DescribeNASFileSystemsResponseBody.FileSystems()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fileSystems = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeNASFileSystemsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNASFileSystemsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNASFileSystemsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNatGatewaysRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var name: String?

    public var natGatewayId: String?

    public var nextToken: String?

    public var regionId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.natGatewayId != nil {
            map["NatGatewayId"] = self.natGatewayId!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NatGatewayId"] as? String {
            self.natGatewayId = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class DescribeNatGatewaysResponseBody : Tea.TeaModel {
    public class NatGateways : Tea.TeaModel {
        public class IpLists : Tea.TeaModel {
            public var allocationId: String?

            public var ipAddress: String?

            public var privateIpAddress: String?

            public var snatEntryEnabled: String?

            public var usingStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allocationId != nil {
                    map["AllocationId"] = self.allocationId!
                }
                if self.ipAddress != nil {
                    map["IpAddress"] = self.ipAddress!
                }
                if self.privateIpAddress != nil {
                    map["PrivateIpAddress"] = self.privateIpAddress!
                }
                if self.snatEntryEnabled != nil {
                    map["SnatEntryEnabled"] = self.snatEntryEnabled!
                }
                if self.usingStatus != nil {
                    map["UsingStatus"] = self.usingStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AllocationId"] as? String {
                    self.allocationId = value
                }
                if let value = dict["IpAddress"] as? String {
                    self.ipAddress = value
                }
                if let value = dict["PrivateIpAddress"] as? String {
                    self.privateIpAddress = value
                }
                if let value = dict["SnatEntryEnabled"] as? String {
                    self.snatEntryEnabled = value
                }
                if let value = dict["UsingStatus"] as? String {
                    self.usingStatus = value
                }
            }
        }
        public var forwardTableIds: [String]?

        public var ipLists: [DescribeNatGatewaysResponseBody.NatGateways.IpLists]?

        public var name: String?

        public var natGatewayId: String?

        public var snatTableIds: [String]?

        public var status: String?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.forwardTableIds != nil {
                map["ForwardTableIds"] = self.forwardTableIds!
            }
            if self.ipLists != nil {
                var tmp : [Any] = []
                for k in self.ipLists! {
                    tmp.append(k.toMap())
                }
                map["IpLists"] = tmp
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.natGatewayId != nil {
                map["NatGatewayId"] = self.natGatewayId!
            }
            if self.snatTableIds != nil {
                map["SnatTableIds"] = self.snatTableIds!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ForwardTableIds"] as? [String] {
                self.forwardTableIds = value
            }
            if let value = dict["IpLists"] as? [Any?] {
                var tmp : [DescribeNatGatewaysResponseBody.NatGateways.IpLists] = []
                for v in value {
                    if v != nil {
                        var model = DescribeNatGatewaysResponseBody.NatGateways.IpLists()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ipLists = tmp
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NatGatewayId"] as? String {
                self.natGatewayId = value
            }
            if let value = dict["SnatTableIds"] as? [String] {
                self.snatTableIds = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public var maxResults: Int32?

    public var natGateways: [DescribeNatGatewaysResponseBody.NatGateways]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.natGateways != nil {
            var tmp : [Any] = []
            for k in self.natGateways! {
                tmp.append(k.toMap())
            }
            map["NatGateways"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NatGateways"] as? [Any?] {
            var tmp : [DescribeNatGatewaysResponseBody.NatGateways] = []
            for v in value {
                if v != nil {
                    var model = DescribeNatGatewaysResponseBody.NatGateways()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.natGateways = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeNatGatewaysResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNatGatewaysResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNatGatewaysResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeNetworkPackagesRequest : Tea.TeaModel {
    public var internetChargeType: String?

    public var maxResults: Int32?

    public var networkPackageId: [String]?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.internetChargeType != nil {
            map["InternetChargeType"] = self.internetChargeType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InternetChargeType"] as? String {
            self.internetChargeType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NetworkPackageId"] as? [String] {
            self.networkPackageId = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeNetworkPackagesResponseBody : Tea.TeaModel {
    public class NetworkPackages : Tea.TeaModel {
        public var bandwidth: Int32?

        public var businessStatus: String?

        public var createTime: String?

        public var eipAddresses: [String]?

        public var expiredTime: String?

        public var internetChargeType: String?

        public var networkPackageId: String?

        public var networkPackageStatus: String?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSiteVpcType: String?

        public var payType: String?

        public var reservationActiveTime: String?

        public var reservationBandwidth: Int32?

        public var reservationInternetChargeType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bandwidth != nil {
                map["Bandwidth"] = self.bandwidth!
            }
            if self.businessStatus != nil {
                map["BusinessStatus"] = self.businessStatus!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.eipAddresses != nil {
                map["EipAddresses"] = self.eipAddresses!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.internetChargeType != nil {
                map["InternetChargeType"] = self.internetChargeType!
            }
            if self.networkPackageId != nil {
                map["NetworkPackageId"] = self.networkPackageId!
            }
            if self.networkPackageStatus != nil {
                map["NetworkPackageStatus"] = self.networkPackageStatus!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSiteVpcType != nil {
                map["OfficeSiteVpcType"] = self.officeSiteVpcType!
            }
            if self.payType != nil {
                map["PayType"] = self.payType!
            }
            if self.reservationActiveTime != nil {
                map["ReservationActiveTime"] = self.reservationActiveTime!
            }
            if self.reservationBandwidth != nil {
                map["ReservationBandwidth"] = self.reservationBandwidth!
            }
            if self.reservationInternetChargeType != nil {
                map["ReservationInternetChargeType"] = self.reservationInternetChargeType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Bandwidth"] as? Int32 {
                self.bandwidth = value
            }
            if let value = dict["BusinessStatus"] as? String {
                self.businessStatus = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["EipAddresses"] as? [String] {
                self.eipAddresses = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["InternetChargeType"] as? String {
                self.internetChargeType = value
            }
            if let value = dict["NetworkPackageId"] as? String {
                self.networkPackageId = value
            }
            if let value = dict["NetworkPackageStatus"] as? String {
                self.networkPackageStatus = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSiteVpcType"] as? String {
                self.officeSiteVpcType = value
            }
            if let value = dict["PayType"] as? String {
                self.payType = value
            }
            if let value = dict["ReservationActiveTime"] as? String {
                self.reservationActiveTime = value
            }
            if let value = dict["ReservationBandwidth"] as? Int32 {
                self.reservationBandwidth = value
            }
            if let value = dict["ReservationInternetChargeType"] as? String {
                self.reservationInternetChargeType = value
            }
        }
    }
    public var networkPackages: [DescribeNetworkPackagesResponseBody.NetworkPackages]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkPackages != nil {
            var tmp : [Any] = []
            for k in self.networkPackages! {
                tmp.append(k.toMap())
            }
            map["NetworkPackages"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkPackages"] as? [Any?] {
            var tmp : [DescribeNetworkPackagesResponseBody.NetworkPackages] = []
            for v in value {
                if v != nil {
                    var model = DescribeNetworkPackagesResponseBody.NetworkPackages()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.networkPackages = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeNetworkPackagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeNetworkPackagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeNetworkPackagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeOfficeSitesRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: [String]?

    public var officeSiteType: String?

    public var regionId: String?

    public var securityProtection: String?

    public var status: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteType != nil {
            map["OfficeSiteType"] = self.officeSiteType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.securityProtection != nil {
            map["SecurityProtection"] = self.securityProtection!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? [String] {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteType"] as? String {
            self.officeSiteType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SecurityProtection"] as? String {
            self.securityProtection = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class DescribeOfficeSitesResponseBody : Tea.TeaModel {
    public class OfficeSites : Tea.TeaModel {
        public class ADConnectors : Tea.TeaModel {
            public var ADConnectorAddress: String?

            public var connectorStatus: String?

            public var networkInterfaceId: String?

            public var specification: String?

            public var trustKey: String?

            public var vSwitchId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ADConnectorAddress != nil {
                    map["ADConnectorAddress"] = self.ADConnectorAddress!
                }
                if self.connectorStatus != nil {
                    map["ConnectorStatus"] = self.connectorStatus!
                }
                if self.networkInterfaceId != nil {
                    map["NetworkInterfaceId"] = self.networkInterfaceId!
                }
                if self.specification != nil {
                    map["Specification"] = self.specification!
                }
                if self.trustKey != nil {
                    map["TrustKey"] = self.trustKey!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ADConnectorAddress"] as? String {
                    self.ADConnectorAddress = value
                }
                if let value = dict["ConnectorStatus"] as? String {
                    self.connectorStatus = value
                }
                if let value = dict["NetworkInterfaceId"] as? String {
                    self.networkInterfaceId = value
                }
                if let value = dict["Specification"] as? String {
                    self.specification = value
                }
                if let value = dict["TrustKey"] as? String {
                    self.trustKey = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
            }
        }
        public class Logs : Tea.TeaModel {
            public var level: String?

            public var message: String?

            public var step: String?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.step != nil {
                    map["Step"] = self.step!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Step"] as? String {
                    self.step = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public class ResourceAmounts : Tea.TeaModel {
            public var amount: Int64?

            public var resourceType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.amount != nil {
                    map["amount"] = self.amount!
                }
                if self.resourceType != nil {
                    map["resourceType"] = self.resourceType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["amount"] as? Int64 {
                    self.amount = value
                }
                if let value = dict["resourceType"] as? String {
                    self.resourceType = value
                }
            }
        }
        public var ADConnectors: [DescribeOfficeSitesResponseBody.OfficeSites.ADConnectors]?

        public var acceleratorId: String?

        public var adHostname: String?

        public var backupDCHostname: String?

        public var backupDns: String?

        public var bandwidth: Int32?

        public var cenAttachStatus: String?

        public var cenId: String?

        public var cidrBlock: String?

        public var cloudBoxOfficeSite: Bool?

        public var creationTime: String?

        public var customAccessPoint: String?

        public var customDnsAddress: [String]?

        public var customSecurityGroupId: String?

        public var desktopAccessType: String?

        public var desktopCount: Int64?

        public var desktopVpcEndpoint: String?

        public var dnsAddress: [String]?

        public var dnsUserName: String?

        public var domainName: String?

        public var domainPassword: String?

        public var domainUserName: String?

        public var enableAdminAccess: Bool?

        public var enableCrossDesktopAccess: Bool?

        public var enableInternetAccess: Bool?

        public var enableServiceRoute: Bool?

        public var fileSystemIds: [String]?

        public var isLdap: Bool?

        public var ldapUrl: String?

        public var logs: [DescribeOfficeSitesResponseBody.OfficeSites.Logs]?

        public var mfaEnabled: Bool?

        public var name: String?

        public var needVerifyLoginRisk: Bool?

        public var needVerifyZeroDevice: Bool?

        public var networkPackageId: String?

        public var nmVersion: String?

        public var officeSiteId: String?

        public var officeSiteType: String?

        public var ouName: String?

        public var protocolType: String?

        public var rdsLicenseAddress: String?

        public var rdsLicenseDomainName: String?

        public var rdsLicenseStatus: String?

        public var resourceAmounts: [DescribeOfficeSitesResponseBody.OfficeSites.ResourceAmounts]?

        public var securityProtection: String?

        public var ssoEnabled: Bool?

        public var ssoType: String?

        public var status: String?

        public var subDnsAddress: [String]?

        public var subDomainName: String?

        public var subnetMode: String?

        public var totalEdsCount: Int64?

        public var totalEdsCountForGroup: Int64?

        public var totalResourceAmount: Int64?

        public var trustPassword: String?

        public var vSwitchIds: [String]?

        public var vpcId: String?

        public var vpcType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ADConnectors != nil {
                var tmp : [Any] = []
                for k in self.ADConnectors! {
                    tmp.append(k.toMap())
                }
                map["ADConnectors"] = tmp
            }
            if self.acceleratorId != nil {
                map["AcceleratorId"] = self.acceleratorId!
            }
            if self.adHostname != nil {
                map["AdHostname"] = self.adHostname!
            }
            if self.backupDCHostname != nil {
                map["BackupDCHostname"] = self.backupDCHostname!
            }
            if self.backupDns != nil {
                map["BackupDns"] = self.backupDns!
            }
            if self.bandwidth != nil {
                map["Bandwidth"] = self.bandwidth!
            }
            if self.cenAttachStatus != nil {
                map["CenAttachStatus"] = self.cenAttachStatus!
            }
            if self.cenId != nil {
                map["CenId"] = self.cenId!
            }
            if self.cidrBlock != nil {
                map["CidrBlock"] = self.cidrBlock!
            }
            if self.cloudBoxOfficeSite != nil {
                map["CloudBoxOfficeSite"] = self.cloudBoxOfficeSite!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.customAccessPoint != nil {
                map["CustomAccessPoint"] = self.customAccessPoint!
            }
            if self.customDnsAddress != nil {
                map["CustomDnsAddress"] = self.customDnsAddress!
            }
            if self.customSecurityGroupId != nil {
                map["CustomSecurityGroupId"] = self.customSecurityGroupId!
            }
            if self.desktopAccessType != nil {
                map["DesktopAccessType"] = self.desktopAccessType!
            }
            if self.desktopCount != nil {
                map["DesktopCount"] = self.desktopCount!
            }
            if self.desktopVpcEndpoint != nil {
                map["DesktopVpcEndpoint"] = self.desktopVpcEndpoint!
            }
            if self.dnsAddress != nil {
                map["DnsAddress"] = self.dnsAddress!
            }
            if self.dnsUserName != nil {
                map["DnsUserName"] = self.dnsUserName!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.domainPassword != nil {
                map["DomainPassword"] = self.domainPassword!
            }
            if self.domainUserName != nil {
                map["DomainUserName"] = self.domainUserName!
            }
            if self.enableAdminAccess != nil {
                map["EnableAdminAccess"] = self.enableAdminAccess!
            }
            if self.enableCrossDesktopAccess != nil {
                map["EnableCrossDesktopAccess"] = self.enableCrossDesktopAccess!
            }
            if self.enableInternetAccess != nil {
                map["EnableInternetAccess"] = self.enableInternetAccess!
            }
            if self.enableServiceRoute != nil {
                map["EnableServiceRoute"] = self.enableServiceRoute!
            }
            if self.fileSystemIds != nil {
                map["FileSystemIds"] = self.fileSystemIds!
            }
            if self.isLdap != nil {
                map["IsLdap"] = self.isLdap!
            }
            if self.ldapUrl != nil {
                map["LdapUrl"] = self.ldapUrl!
            }
            if self.logs != nil {
                var tmp : [Any] = []
                for k in self.logs! {
                    tmp.append(k.toMap())
                }
                map["Logs"] = tmp
            }
            if self.mfaEnabled != nil {
                map["MfaEnabled"] = self.mfaEnabled!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.needVerifyLoginRisk != nil {
                map["NeedVerifyLoginRisk"] = self.needVerifyLoginRisk!
            }
            if self.needVerifyZeroDevice != nil {
                map["NeedVerifyZeroDevice"] = self.needVerifyZeroDevice!
            }
            if self.networkPackageId != nil {
                map["NetworkPackageId"] = self.networkPackageId!
            }
            if self.nmVersion != nil {
                map["NmVersion"] = self.nmVersion!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteType != nil {
                map["OfficeSiteType"] = self.officeSiteType!
            }
            if self.ouName != nil {
                map["OuName"] = self.ouName!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.rdsLicenseAddress != nil {
                map["RdsLicenseAddress"] = self.rdsLicenseAddress!
            }
            if self.rdsLicenseDomainName != nil {
                map["RdsLicenseDomainName"] = self.rdsLicenseDomainName!
            }
            if self.rdsLicenseStatus != nil {
                map["RdsLicenseStatus"] = self.rdsLicenseStatus!
            }
            if self.resourceAmounts != nil {
                var tmp : [Any] = []
                for k in self.resourceAmounts! {
                    tmp.append(k.toMap())
                }
                map["ResourceAmounts"] = tmp
            }
            if self.securityProtection != nil {
                map["SecurityProtection"] = self.securityProtection!
            }
            if self.ssoEnabled != nil {
                map["SsoEnabled"] = self.ssoEnabled!
            }
            if self.ssoType != nil {
                map["SsoType"] = self.ssoType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subDnsAddress != nil {
                map["SubDnsAddress"] = self.subDnsAddress!
            }
            if self.subDomainName != nil {
                map["SubDomainName"] = self.subDomainName!
            }
            if self.subnetMode != nil {
                map["SubnetMode"] = self.subnetMode!
            }
            if self.totalEdsCount != nil {
                map["TotalEdsCount"] = self.totalEdsCount!
            }
            if self.totalEdsCountForGroup != nil {
                map["TotalEdsCountForGroup"] = self.totalEdsCountForGroup!
            }
            if self.totalResourceAmount != nil {
                map["TotalResourceAmount"] = self.totalResourceAmount!
            }
            if self.trustPassword != nil {
                map["TrustPassword"] = self.trustPassword!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            if self.vpcType != nil {
                map["VpcType"] = self.vpcType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ADConnectors"] as? [Any?] {
                var tmp : [DescribeOfficeSitesResponseBody.OfficeSites.ADConnectors] = []
                for v in value {
                    if v != nil {
                        var model = DescribeOfficeSitesResponseBody.OfficeSites.ADConnectors()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ADConnectors = tmp
            }
            if let value = dict["AcceleratorId"] as? String {
                self.acceleratorId = value
            }
            if let value = dict["AdHostname"] as? String {
                self.adHostname = value
            }
            if let value = dict["BackupDCHostname"] as? String {
                self.backupDCHostname = value
            }
            if let value = dict["BackupDns"] as? String {
                self.backupDns = value
            }
            if let value = dict["Bandwidth"] as? Int32 {
                self.bandwidth = value
            }
            if let value = dict["CenAttachStatus"] as? String {
                self.cenAttachStatus = value
            }
            if let value = dict["CenId"] as? String {
                self.cenId = value
            }
            if let value = dict["CidrBlock"] as? String {
                self.cidrBlock = value
            }
            if let value = dict["CloudBoxOfficeSite"] as? Bool {
                self.cloudBoxOfficeSite = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["CustomAccessPoint"] as? String {
                self.customAccessPoint = value
            }
            if let value = dict["CustomDnsAddress"] as? [String] {
                self.customDnsAddress = value
            }
            if let value = dict["CustomSecurityGroupId"] as? String {
                self.customSecurityGroupId = value
            }
            if let value = dict["DesktopAccessType"] as? String {
                self.desktopAccessType = value
            }
            if let value = dict["DesktopCount"] as? Int64 {
                self.desktopCount = value
            }
            if let value = dict["DesktopVpcEndpoint"] as? String {
                self.desktopVpcEndpoint = value
            }
            if let value = dict["DnsAddress"] as? [String] {
                self.dnsAddress = value
            }
            if let value = dict["DnsUserName"] as? String {
                self.dnsUserName = value
            }
            if let value = dict["DomainName"] as? String {
                self.domainName = value
            }
            if let value = dict["DomainPassword"] as? String {
                self.domainPassword = value
            }
            if let value = dict["DomainUserName"] as? String {
                self.domainUserName = value
            }
            if let value = dict["EnableAdminAccess"] as? Bool {
                self.enableAdminAccess = value
            }
            if let value = dict["EnableCrossDesktopAccess"] as? Bool {
                self.enableCrossDesktopAccess = value
            }
            if let value = dict["EnableInternetAccess"] as? Bool {
                self.enableInternetAccess = value
            }
            if let value = dict["EnableServiceRoute"] as? Bool {
                self.enableServiceRoute = value
            }
            if let value = dict["FileSystemIds"] as? [String] {
                self.fileSystemIds = value
            }
            if let value = dict["IsLdap"] as? Bool {
                self.isLdap = value
            }
            if let value = dict["LdapUrl"] as? String {
                self.ldapUrl = value
            }
            if let value = dict["Logs"] as? [Any?] {
                var tmp : [DescribeOfficeSitesResponseBody.OfficeSites.Logs] = []
                for v in value {
                    if v != nil {
                        var model = DescribeOfficeSitesResponseBody.OfficeSites.Logs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logs = tmp
            }
            if let value = dict["MfaEnabled"] as? Bool {
                self.mfaEnabled = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NeedVerifyLoginRisk"] as? Bool {
                self.needVerifyLoginRisk = value
            }
            if let value = dict["NeedVerifyZeroDevice"] as? Bool {
                self.needVerifyZeroDevice = value
            }
            if let value = dict["NetworkPackageId"] as? String {
                self.networkPackageId = value
            }
            if let value = dict["NmVersion"] as? String {
                self.nmVersion = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteType"] as? String {
                self.officeSiteType = value
            }
            if let value = dict["OuName"] as? String {
                self.ouName = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["RdsLicenseAddress"] as? String {
                self.rdsLicenseAddress = value
            }
            if let value = dict["RdsLicenseDomainName"] as? String {
                self.rdsLicenseDomainName = value
            }
            if let value = dict["RdsLicenseStatus"] as? String {
                self.rdsLicenseStatus = value
            }
            if let value = dict["ResourceAmounts"] as? [Any?] {
                var tmp : [DescribeOfficeSitesResponseBody.OfficeSites.ResourceAmounts] = []
                for v in value {
                    if v != nil {
                        var model = DescribeOfficeSitesResponseBody.OfficeSites.ResourceAmounts()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceAmounts = tmp
            }
            if let value = dict["SecurityProtection"] as? String {
                self.securityProtection = value
            }
            if let value = dict["SsoEnabled"] as? Bool {
                self.ssoEnabled = value
            }
            if let value = dict["SsoType"] as? String {
                self.ssoType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SubDnsAddress"] as? [String] {
                self.subDnsAddress = value
            }
            if let value = dict["SubDomainName"] as? String {
                self.subDomainName = value
            }
            if let value = dict["SubnetMode"] as? String {
                self.subnetMode = value
            }
            if let value = dict["TotalEdsCount"] as? Int64 {
                self.totalEdsCount = value
            }
            if let value = dict["TotalEdsCountForGroup"] as? Int64 {
                self.totalEdsCountForGroup = value
            }
            if let value = dict["TotalResourceAmount"] as? Int64 {
                self.totalResourceAmount = value
            }
            if let value = dict["TrustPassword"] as? String {
                self.trustPassword = value
            }
            if let value = dict["VSwitchIds"] as? [String] {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
            if let value = dict["VpcType"] as? String {
                self.vpcType = value
            }
        }
    }
    public var nextToken: String?

    public var officeSites: [DescribeOfficeSitesResponseBody.OfficeSites]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSites != nil {
            var tmp : [Any] = []
            for k in self.officeSites! {
                tmp.append(k.toMap())
            }
            map["OfficeSites"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSites"] as? [Any?] {
            var tmp : [DescribeOfficeSitesResponseBody.OfficeSites] = []
            for v in value {
                if v != nil {
                    var model = DescribeOfficeSitesResponseBody.OfficeSites()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.officeSites = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeOfficeSitesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeOfficeSitesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeOfficeSitesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePolicyGroupsRequest : Tea.TeaModel {
    public var externalPolicyGroupIds: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var policyGroupId: [String]?

    public var regionId: String?

    public var scope: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.externalPolicyGroupIds != nil {
            map["ExternalPolicyGroupIds"] = self.externalPolicyGroupIds!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExternalPolicyGroupIds"] as? [String] {
            self.externalPolicyGroupIds = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyGroupId"] as? [String] {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
    }
}

public class DescribePolicyGroupsResponseBody : Tea.TeaModel {
    public class DescribePolicyGroups : Tea.TeaModel {
        public class AuthorizeAccessPolicyRules : Tea.TeaModel {
            public var cidrIp: String?

            public var description_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cidrIp != nil {
                    map["CidrIp"] = self.cidrIp!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CidrIp"] as? String {
                    self.cidrIp = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
            }
        }
        public class AuthorizeSecurityPolicyRules : Tea.TeaModel {
            public var cidrIp: String?

            public var description_: String?

            public var ipProtocol: String?

            public var policy: String?

            public var portRange: String?

            public var priority: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cidrIp != nil {
                    map["CidrIp"] = self.cidrIp!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ipProtocol != nil {
                    map["IpProtocol"] = self.ipProtocol!
                }
                if self.policy != nil {
                    map["Policy"] = self.policy!
                }
                if self.portRange != nil {
                    map["PortRange"] = self.portRange!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CidrIp"] as? String {
                    self.cidrIp = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["IpProtocol"] as? String {
                    self.ipProtocol = value
                }
                if let value = dict["Policy"] as? String {
                    self.policy = value
                }
                if let value = dict["PortRange"] as? String {
                    self.portRange = value
                }
                if let value = dict["Priority"] as? String {
                    self.priority = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class ClientTypes : Tea.TeaModel {
            public var clientType: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clientType != nil {
                    map["ClientType"] = self.clientType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClientType"] as? String {
                    self.clientType = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public class DeviceRedirects : Tea.TeaModel {
            public var deviceType: String?

            public var redirectType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceType != nil {
                    map["DeviceType"] = self.deviceType!
                }
                if self.redirectType != nil {
                    map["RedirectType"] = self.redirectType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceType"] as? String {
                    self.deviceType = value
                }
                if let value = dict["RedirectType"] as? String {
                    self.redirectType = value
                }
            }
        }
        public class DeviceRules : Tea.TeaModel {
            public var deviceName: String?

            public var devicePid: String?

            public var deviceType: String?

            public var deviceVid: String?

            public var optCommand: String?

            public var platforms: String?

            public var redirectType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deviceName != nil {
                    map["DeviceName"] = self.deviceName!
                }
                if self.devicePid != nil {
                    map["DevicePid"] = self.devicePid!
                }
                if self.deviceType != nil {
                    map["DeviceType"] = self.deviceType!
                }
                if self.deviceVid != nil {
                    map["DeviceVid"] = self.deviceVid!
                }
                if self.optCommand != nil {
                    map["OptCommand"] = self.optCommand!
                }
                if self.platforms != nil {
                    map["Platforms"] = self.platforms!
                }
                if self.redirectType != nil {
                    map["RedirectType"] = self.redirectType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeviceName"] as? String {
                    self.deviceName = value
                }
                if let value = dict["DevicePid"] as? String {
                    self.devicePid = value
                }
                if let value = dict["DeviceType"] as? String {
                    self.deviceType = value
                }
                if let value = dict["DeviceVid"] as? String {
                    self.deviceVid = value
                }
                if let value = dict["OptCommand"] as? String {
                    self.optCommand = value
                }
                if let value = dict["Platforms"] as? String {
                    self.platforms = value
                }
                if let value = dict["RedirectType"] as? String {
                    self.redirectType = value
                }
            }
        }
        public class DomainResolveRule : Tea.TeaModel {
            public var description_: String?

            public var domain: String?

            public var policy: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.policy != nil {
                    map["Policy"] = self.policy!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["Policy"] as? String {
                    self.policy = value
                }
            }
        }
        public class NetRedirectRule : Tea.TeaModel {
            public var domain: String?

            public var policy: String?

            public var ruleType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.policy != nil {
                    map["Policy"] = self.policy!
                }
                if self.ruleType != nil {
                    map["RuleType"] = self.ruleType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["Policy"] as? String {
                    self.policy = value
                }
                if let value = dict["RuleType"] as? String {
                    self.ruleType = value
                }
            }
        }
        public class UsbSupplyRedirectRule : Tea.TeaModel {
            public var description_: String?

            public var deviceClass: String?

            public var deviceSubclass: String?

            public var productId: String?

            public var usbRedirectType: Int64?

            public var usbRuleType: Int64?

            public var vendorId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.deviceClass != nil {
                    map["DeviceClass"] = self.deviceClass!
                }
                if self.deviceSubclass != nil {
                    map["DeviceSubclass"] = self.deviceSubclass!
                }
                if self.productId != nil {
                    map["ProductId"] = self.productId!
                }
                if self.usbRedirectType != nil {
                    map["UsbRedirectType"] = self.usbRedirectType!
                }
                if self.usbRuleType != nil {
                    map["UsbRuleType"] = self.usbRuleType!
                }
                if self.vendorId != nil {
                    map["VendorId"] = self.vendorId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DeviceClass"] as? String {
                    self.deviceClass = value
                }
                if let value = dict["DeviceSubclass"] as? String {
                    self.deviceSubclass = value
                }
                if let value = dict["ProductId"] as? String {
                    self.productId = value
                }
                if let value = dict["UsbRedirectType"] as? Int64 {
                    self.usbRedirectType = value
                }
                if let value = dict["UsbRuleType"] as? Int64 {
                    self.usbRuleType = value
                }
                if let value = dict["VendorId"] as? String {
                    self.vendorId = value
                }
            }
        }
        public var adminAccess: String?

        public var appContentProtection: String?

        public var authorizeAccessPolicyRules: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.AuthorizeAccessPolicyRules]?

        public var authorizeSecurityPolicyRules: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.AuthorizeSecurityPolicyRules]?

        public var cameraRedirect: String?

        public var clientControlMenu: String?

        public var clientTypes: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.ClientTypes]?

        public var clipboard: String?

        public var colorEnhancement: String?

        public var cpdDriveClipboard: String?

        public var cpuDownGradeDuration: Int32?

        public var cpuProcessors: [String]?

        public var cpuProtectedMode: String?

        public var cpuRateLimit: Int32?

        public var cpuSampleDuration: Int32?

        public var cpuSingleRateLimit: Int32?

        public var desktopCount: Int32?

        public var desktopGroupCount: Int32?

        public var deviceConnectHint: String?

        public var deviceRedirects: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.DeviceRedirects]?

        public var deviceRules: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.DeviceRules]?

        public var displayMode: String?

        public var domainList: String?

        public var domainResolveRule: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.DomainResolveRule]?

        public var domainResolveRuleType: String?

        public var edsCount: Int32?

        public var endUserApplyAdminCoordinate: String?

        public var endUserGroupCoordinate: String?

        public var fileMigrate: String?

        public var fileTransfer: String?

        public var fileTransferAddress: String?

        public var fileTransferSpeed: String?

        public var fileTransferSpeedLocation: String?

        public var gpuAcceleration: String?

        public var html5Access: String?

        public var html5FileTransfer: String?

        public var internetCommunicationProtocol: String?

        public var internetPrinter: String?

        public var localDrive: String?

        public var maxReconnectTime: Int32?

        public var memoryDownGradeDuration: Int32?

        public var memoryProcessors: [String]?

        public var memoryProtectedMode: String?

        public var memoryRateLimit: Int32?

        public var memorySampleDuration: Int32?

        public var memorySingleRateLimit: Int32?

        public var mobileRestart: String?

        public var mobileShutdown: String?

        public var name: String?

        public var netRedirect: String?

        public var netRedirectRule: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.NetRedirectRule]?

        public var policyGroupId: String?

        public var policyGroupType: String?

        public var policyStatus: String?

        public var preemptLogin: String?

        public var preemptLoginUsers: [String]?

        public var printerRedirection: String?

        public var qualityEnhancement: String?

        public var recordContent: String?

        public var recordContentExpires: Int64?

        public var recordEventDuration: Int32?

        public var recordEventFilePaths: [String]?

        public var recordEventRegisters: [String]?

        public var recording: String?

        public var recordingAudio: String?

        public var recordingDuration: Int32?

        public var recordingEndTime: String?

        public var recordingExpires: Int64?

        public var recordingFps: Int64?

        public var recordingStartTime: String?

        public var recordingUserNotify: String?

        public var recordingUserNotifyMessage: String?

        public var remoteCoordinate: String?

        public var resetDesktop: String?

        public var resolutionHeight: Int32?

        public var resolutionModel: String?

        public var resolutionWidth: Int32?

        public var resourceGroupCount: Int32?

        public var resourceRegionId: String?

        public var safeMenu: String?

        public var scope: String?

        public var scopeValue: [String]?

        public var screenDisplayMode: String?

        public var smoothEnhancement: String?

        public var statusMonitor: String?

        public var streamingMode: String?

        public var targetFps: Int32?

        public var usbRedirect: String?

        public var usbSupplyRedirectRule: [DescribePolicyGroupsResponseBody.DescribePolicyGroups.UsbSupplyRedirectRule]?

        public var useTime: String?

        public var videoEncAvgKbps: Int32?

        public var videoEncMaxQP: Int32?

        public var videoEncMinQP: Int32?

        public var videoEncPeakKbps: Int32?

        public var videoEncPolicy: String?

        public var videoRedirect: String?

        public var visualQuality: String?

        public var watermark: String?

        public var watermarkAntiCam: String?

        public var watermarkColor: Int32?

        public var watermarkCustomText: String?

        public var watermarkDegree: Double?

        public var watermarkFontSize: Int32?

        public var watermarkFontStyle: String?

        public var watermarkPower: String?

        public var watermarkRowAmount: Int32?

        public var watermarkSecurity: String?

        public var watermarkTransparency: String?

        public var watermarkTransparencyValue: Int32?

        public var watermarkType: String?

        public var wuyingKeeper: String?

        public var wyAssistant: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adminAccess != nil {
                map["AdminAccess"] = self.adminAccess!
            }
            if self.appContentProtection != nil {
                map["AppContentProtection"] = self.appContentProtection!
            }
            if self.authorizeAccessPolicyRules != nil {
                var tmp : [Any] = []
                for k in self.authorizeAccessPolicyRules! {
                    tmp.append(k.toMap())
                }
                map["AuthorizeAccessPolicyRules"] = tmp
            }
            if self.authorizeSecurityPolicyRules != nil {
                var tmp : [Any] = []
                for k in self.authorizeSecurityPolicyRules! {
                    tmp.append(k.toMap())
                }
                map["AuthorizeSecurityPolicyRules"] = tmp
            }
            if self.cameraRedirect != nil {
                map["CameraRedirect"] = self.cameraRedirect!
            }
            if self.clientControlMenu != nil {
                map["ClientControlMenu"] = self.clientControlMenu!
            }
            if self.clientTypes != nil {
                var tmp : [Any] = []
                for k in self.clientTypes! {
                    tmp.append(k.toMap())
                }
                map["ClientTypes"] = tmp
            }
            if self.clipboard != nil {
                map["Clipboard"] = self.clipboard!
            }
            if self.colorEnhancement != nil {
                map["ColorEnhancement"] = self.colorEnhancement!
            }
            if self.cpdDriveClipboard != nil {
                map["CpdDriveClipboard"] = self.cpdDriveClipboard!
            }
            if self.cpuDownGradeDuration != nil {
                map["CpuDownGradeDuration"] = self.cpuDownGradeDuration!
            }
            if self.cpuProcessors != nil {
                map["CpuProcessors"] = self.cpuProcessors!
            }
            if self.cpuProtectedMode != nil {
                map["CpuProtectedMode"] = self.cpuProtectedMode!
            }
            if self.cpuRateLimit != nil {
                map["CpuRateLimit"] = self.cpuRateLimit!
            }
            if self.cpuSampleDuration != nil {
                map["CpuSampleDuration"] = self.cpuSampleDuration!
            }
            if self.cpuSingleRateLimit != nil {
                map["CpuSingleRateLimit"] = self.cpuSingleRateLimit!
            }
            if self.desktopCount != nil {
                map["DesktopCount"] = self.desktopCount!
            }
            if self.desktopGroupCount != nil {
                map["DesktopGroupCount"] = self.desktopGroupCount!
            }
            if self.deviceConnectHint != nil {
                map["DeviceConnectHint"] = self.deviceConnectHint!
            }
            if self.deviceRedirects != nil {
                var tmp : [Any] = []
                for k in self.deviceRedirects! {
                    tmp.append(k.toMap())
                }
                map["DeviceRedirects"] = tmp
            }
            if self.deviceRules != nil {
                var tmp : [Any] = []
                for k in self.deviceRules! {
                    tmp.append(k.toMap())
                }
                map["DeviceRules"] = tmp
            }
            if self.displayMode != nil {
                map["DisplayMode"] = self.displayMode!
            }
            if self.domainList != nil {
                map["DomainList"] = self.domainList!
            }
            if self.domainResolveRule != nil {
                var tmp : [Any] = []
                for k in self.domainResolveRule! {
                    tmp.append(k.toMap())
                }
                map["DomainResolveRule"] = tmp
            }
            if self.domainResolveRuleType != nil {
                map["DomainResolveRuleType"] = self.domainResolveRuleType!
            }
            if self.edsCount != nil {
                map["EdsCount"] = self.edsCount!
            }
            if self.endUserApplyAdminCoordinate != nil {
                map["EndUserApplyAdminCoordinate"] = self.endUserApplyAdminCoordinate!
            }
            if self.endUserGroupCoordinate != nil {
                map["EndUserGroupCoordinate"] = self.endUserGroupCoordinate!
            }
            if self.fileMigrate != nil {
                map["FileMigrate"] = self.fileMigrate!
            }
            if self.fileTransfer != nil {
                map["FileTransfer"] = self.fileTransfer!
            }
            if self.fileTransferAddress != nil {
                map["FileTransferAddress"] = self.fileTransferAddress!
            }
            if self.fileTransferSpeed != nil {
                map["FileTransferSpeed"] = self.fileTransferSpeed!
            }
            if self.fileTransferSpeedLocation != nil {
                map["FileTransferSpeedLocation"] = self.fileTransferSpeedLocation!
            }
            if self.gpuAcceleration != nil {
                map["GpuAcceleration"] = self.gpuAcceleration!
            }
            if self.html5Access != nil {
                map["Html5Access"] = self.html5Access!
            }
            if self.html5FileTransfer != nil {
                map["Html5FileTransfer"] = self.html5FileTransfer!
            }
            if self.internetCommunicationProtocol != nil {
                map["InternetCommunicationProtocol"] = self.internetCommunicationProtocol!
            }
            if self.internetPrinter != nil {
                map["InternetPrinter"] = self.internetPrinter!
            }
            if self.localDrive != nil {
                map["LocalDrive"] = self.localDrive!
            }
            if self.maxReconnectTime != nil {
                map["MaxReconnectTime"] = self.maxReconnectTime!
            }
            if self.memoryDownGradeDuration != nil {
                map["MemoryDownGradeDuration"] = self.memoryDownGradeDuration!
            }
            if self.memoryProcessors != nil {
                map["MemoryProcessors"] = self.memoryProcessors!
            }
            if self.memoryProtectedMode != nil {
                map["MemoryProtectedMode"] = self.memoryProtectedMode!
            }
            if self.memoryRateLimit != nil {
                map["MemoryRateLimit"] = self.memoryRateLimit!
            }
            if self.memorySampleDuration != nil {
                map["MemorySampleDuration"] = self.memorySampleDuration!
            }
            if self.memorySingleRateLimit != nil {
                map["MemorySingleRateLimit"] = self.memorySingleRateLimit!
            }
            if self.mobileRestart != nil {
                map["MobileRestart"] = self.mobileRestart!
            }
            if self.mobileShutdown != nil {
                map["MobileShutdown"] = self.mobileShutdown!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.netRedirect != nil {
                map["NetRedirect"] = self.netRedirect!
            }
            if self.netRedirectRule != nil {
                var tmp : [Any] = []
                for k in self.netRedirectRule! {
                    tmp.append(k.toMap())
                }
                map["NetRedirectRule"] = tmp
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.policyGroupType != nil {
                map["PolicyGroupType"] = self.policyGroupType!
            }
            if self.policyStatus != nil {
                map["PolicyStatus"] = self.policyStatus!
            }
            if self.preemptLogin != nil {
                map["PreemptLogin"] = self.preemptLogin!
            }
            if self.preemptLoginUsers != nil {
                map["PreemptLoginUsers"] = self.preemptLoginUsers!
            }
            if self.printerRedirection != nil {
                map["PrinterRedirection"] = self.printerRedirection!
            }
            if self.qualityEnhancement != nil {
                map["QualityEnhancement"] = self.qualityEnhancement!
            }
            if self.recordContent != nil {
                map["RecordContent"] = self.recordContent!
            }
            if self.recordContentExpires != nil {
                map["RecordContentExpires"] = self.recordContentExpires!
            }
            if self.recordEventDuration != nil {
                map["RecordEventDuration"] = self.recordEventDuration!
            }
            if self.recordEventFilePaths != nil {
                map["RecordEventFilePaths"] = self.recordEventFilePaths!
            }
            if self.recordEventRegisters != nil {
                map["RecordEventRegisters"] = self.recordEventRegisters!
            }
            if self.recording != nil {
                map["Recording"] = self.recording!
            }
            if self.recordingAudio != nil {
                map["RecordingAudio"] = self.recordingAudio!
            }
            if self.recordingDuration != nil {
                map["RecordingDuration"] = self.recordingDuration!
            }
            if self.recordingEndTime != nil {
                map["RecordingEndTime"] = self.recordingEndTime!
            }
            if self.recordingExpires != nil {
                map["RecordingExpires"] = self.recordingExpires!
            }
            if self.recordingFps != nil {
                map["RecordingFps"] = self.recordingFps!
            }
            if self.recordingStartTime != nil {
                map["RecordingStartTime"] = self.recordingStartTime!
            }
            if self.recordingUserNotify != nil {
                map["RecordingUserNotify"] = self.recordingUserNotify!
            }
            if self.recordingUserNotifyMessage != nil {
                map["RecordingUserNotifyMessage"] = self.recordingUserNotifyMessage!
            }
            if self.remoteCoordinate != nil {
                map["RemoteCoordinate"] = self.remoteCoordinate!
            }
            if self.resetDesktop != nil {
                map["ResetDesktop"] = self.resetDesktop!
            }
            if self.resolutionHeight != nil {
                map["ResolutionHeight"] = self.resolutionHeight!
            }
            if self.resolutionModel != nil {
                map["ResolutionModel"] = self.resolutionModel!
            }
            if self.resolutionWidth != nil {
                map["ResolutionWidth"] = self.resolutionWidth!
            }
            if self.resourceGroupCount != nil {
                map["ResourceGroupCount"] = self.resourceGroupCount!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            if self.safeMenu != nil {
                map["SafeMenu"] = self.safeMenu!
            }
            if self.scope != nil {
                map["Scope"] = self.scope!
            }
            if self.scopeValue != nil {
                map["ScopeValue"] = self.scopeValue!
            }
            if self.screenDisplayMode != nil {
                map["ScreenDisplayMode"] = self.screenDisplayMode!
            }
            if self.smoothEnhancement != nil {
                map["SmoothEnhancement"] = self.smoothEnhancement!
            }
            if self.statusMonitor != nil {
                map["StatusMonitor"] = self.statusMonitor!
            }
            if self.streamingMode != nil {
                map["StreamingMode"] = self.streamingMode!
            }
            if self.targetFps != nil {
                map["TargetFps"] = self.targetFps!
            }
            if self.usbRedirect != nil {
                map["UsbRedirect"] = self.usbRedirect!
            }
            if self.usbSupplyRedirectRule != nil {
                var tmp : [Any] = []
                for k in self.usbSupplyRedirectRule! {
                    tmp.append(k.toMap())
                }
                map["UsbSupplyRedirectRule"] = tmp
            }
            if self.useTime != nil {
                map["UseTime"] = self.useTime!
            }
            if self.videoEncAvgKbps != nil {
                map["VideoEncAvgKbps"] = self.videoEncAvgKbps!
            }
            if self.videoEncMaxQP != nil {
                map["VideoEncMaxQP"] = self.videoEncMaxQP!
            }
            if self.videoEncMinQP != nil {
                map["VideoEncMinQP"] = self.videoEncMinQP!
            }
            if self.videoEncPeakKbps != nil {
                map["VideoEncPeakKbps"] = self.videoEncPeakKbps!
            }
            if self.videoEncPolicy != nil {
                map["VideoEncPolicy"] = self.videoEncPolicy!
            }
            if self.videoRedirect != nil {
                map["VideoRedirect"] = self.videoRedirect!
            }
            if self.visualQuality != nil {
                map["VisualQuality"] = self.visualQuality!
            }
            if self.watermark != nil {
                map["Watermark"] = self.watermark!
            }
            if self.watermarkAntiCam != nil {
                map["WatermarkAntiCam"] = self.watermarkAntiCam!
            }
            if self.watermarkColor != nil {
                map["WatermarkColor"] = self.watermarkColor!
            }
            if self.watermarkCustomText != nil {
                map["WatermarkCustomText"] = self.watermarkCustomText!
            }
            if self.watermarkDegree != nil {
                map["WatermarkDegree"] = self.watermarkDegree!
            }
            if self.watermarkFontSize != nil {
                map["WatermarkFontSize"] = self.watermarkFontSize!
            }
            if self.watermarkFontStyle != nil {
                map["WatermarkFontStyle"] = self.watermarkFontStyle!
            }
            if self.watermarkPower != nil {
                map["WatermarkPower"] = self.watermarkPower!
            }
            if self.watermarkRowAmount != nil {
                map["WatermarkRowAmount"] = self.watermarkRowAmount!
            }
            if self.watermarkSecurity != nil {
                map["WatermarkSecurity"] = self.watermarkSecurity!
            }
            if self.watermarkTransparency != nil {
                map["WatermarkTransparency"] = self.watermarkTransparency!
            }
            if self.watermarkTransparencyValue != nil {
                map["WatermarkTransparencyValue"] = self.watermarkTransparencyValue!
            }
            if self.watermarkType != nil {
                map["WatermarkType"] = self.watermarkType!
            }
            if self.wuyingKeeper != nil {
                map["WuyingKeeper"] = self.wuyingKeeper!
            }
            if self.wyAssistant != nil {
                map["WyAssistant"] = self.wyAssistant!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdminAccess"] as? String {
                self.adminAccess = value
            }
            if let value = dict["AppContentProtection"] as? String {
                self.appContentProtection = value
            }
            if let value = dict["AuthorizeAccessPolicyRules"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.AuthorizeAccessPolicyRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.AuthorizeAccessPolicyRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizeAccessPolicyRules = tmp
            }
            if let value = dict["AuthorizeSecurityPolicyRules"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.AuthorizeSecurityPolicyRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.AuthorizeSecurityPolicyRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizeSecurityPolicyRules = tmp
            }
            if let value = dict["CameraRedirect"] as? String {
                self.cameraRedirect = value
            }
            if let value = dict["ClientControlMenu"] as? String {
                self.clientControlMenu = value
            }
            if let value = dict["ClientTypes"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.ClientTypes] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.ClientTypes()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.clientTypes = tmp
            }
            if let value = dict["Clipboard"] as? String {
                self.clipboard = value
            }
            if let value = dict["ColorEnhancement"] as? String {
                self.colorEnhancement = value
            }
            if let value = dict["CpdDriveClipboard"] as? String {
                self.cpdDriveClipboard = value
            }
            if let value = dict["CpuDownGradeDuration"] as? Int32 {
                self.cpuDownGradeDuration = value
            }
            if let value = dict["CpuProcessors"] as? [String] {
                self.cpuProcessors = value
            }
            if let value = dict["CpuProtectedMode"] as? String {
                self.cpuProtectedMode = value
            }
            if let value = dict["CpuRateLimit"] as? Int32 {
                self.cpuRateLimit = value
            }
            if let value = dict["CpuSampleDuration"] as? Int32 {
                self.cpuSampleDuration = value
            }
            if let value = dict["CpuSingleRateLimit"] as? Int32 {
                self.cpuSingleRateLimit = value
            }
            if let value = dict["DesktopCount"] as? Int32 {
                self.desktopCount = value
            }
            if let value = dict["DesktopGroupCount"] as? Int32 {
                self.desktopGroupCount = value
            }
            if let value = dict["DeviceConnectHint"] as? String {
                self.deviceConnectHint = value
            }
            if let value = dict["DeviceRedirects"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.DeviceRedirects] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.DeviceRedirects()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deviceRedirects = tmp
            }
            if let value = dict["DeviceRules"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.DeviceRules] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.DeviceRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deviceRules = tmp
            }
            if let value = dict["DisplayMode"] as? String {
                self.displayMode = value
            }
            if let value = dict["DomainList"] as? String {
                self.domainList = value
            }
            if let value = dict["DomainResolveRule"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.DomainResolveRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.DomainResolveRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.domainResolveRule = tmp
            }
            if let value = dict["DomainResolveRuleType"] as? String {
                self.domainResolveRuleType = value
            }
            if let value = dict["EdsCount"] as? Int32 {
                self.edsCount = value
            }
            if let value = dict["EndUserApplyAdminCoordinate"] as? String {
                self.endUserApplyAdminCoordinate = value
            }
            if let value = dict["EndUserGroupCoordinate"] as? String {
                self.endUserGroupCoordinate = value
            }
            if let value = dict["FileMigrate"] as? String {
                self.fileMigrate = value
            }
            if let value = dict["FileTransfer"] as? String {
                self.fileTransfer = value
            }
            if let value = dict["FileTransferAddress"] as? String {
                self.fileTransferAddress = value
            }
            if let value = dict["FileTransferSpeed"] as? String {
                self.fileTransferSpeed = value
            }
            if let value = dict["FileTransferSpeedLocation"] as? String {
                self.fileTransferSpeedLocation = value
            }
            if let value = dict["GpuAcceleration"] as? String {
                self.gpuAcceleration = value
            }
            if let value = dict["Html5Access"] as? String {
                self.html5Access = value
            }
            if let value = dict["Html5FileTransfer"] as? String {
                self.html5FileTransfer = value
            }
            if let value = dict["InternetCommunicationProtocol"] as? String {
                self.internetCommunicationProtocol = value
            }
            if let value = dict["InternetPrinter"] as? String {
                self.internetPrinter = value
            }
            if let value = dict["LocalDrive"] as? String {
                self.localDrive = value
            }
            if let value = dict["MaxReconnectTime"] as? Int32 {
                self.maxReconnectTime = value
            }
            if let value = dict["MemoryDownGradeDuration"] as? Int32 {
                self.memoryDownGradeDuration = value
            }
            if let value = dict["MemoryProcessors"] as? [String] {
                self.memoryProcessors = value
            }
            if let value = dict["MemoryProtectedMode"] as? String {
                self.memoryProtectedMode = value
            }
            if let value = dict["MemoryRateLimit"] as? Int32 {
                self.memoryRateLimit = value
            }
            if let value = dict["MemorySampleDuration"] as? Int32 {
                self.memorySampleDuration = value
            }
            if let value = dict["MemorySingleRateLimit"] as? Int32 {
                self.memorySingleRateLimit = value
            }
            if let value = dict["MobileRestart"] as? String {
                self.mobileRestart = value
            }
            if let value = dict["MobileShutdown"] as? String {
                self.mobileShutdown = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NetRedirect"] as? String {
                self.netRedirect = value
            }
            if let value = dict["NetRedirectRule"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.NetRedirectRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.NetRedirectRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.netRedirectRule = tmp
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["PolicyGroupType"] as? String {
                self.policyGroupType = value
            }
            if let value = dict["PolicyStatus"] as? String {
                self.policyStatus = value
            }
            if let value = dict["PreemptLogin"] as? String {
                self.preemptLogin = value
            }
            if let value = dict["PreemptLoginUsers"] as? [String] {
                self.preemptLoginUsers = value
            }
            if let value = dict["PrinterRedirection"] as? String {
                self.printerRedirection = value
            }
            if let value = dict["QualityEnhancement"] as? String {
                self.qualityEnhancement = value
            }
            if let value = dict["RecordContent"] as? String {
                self.recordContent = value
            }
            if let value = dict["RecordContentExpires"] as? Int64 {
                self.recordContentExpires = value
            }
            if let value = dict["RecordEventDuration"] as? Int32 {
                self.recordEventDuration = value
            }
            if let value = dict["RecordEventFilePaths"] as? [String] {
                self.recordEventFilePaths = value
            }
            if let value = dict["RecordEventRegisters"] as? [String] {
                self.recordEventRegisters = value
            }
            if let value = dict["Recording"] as? String {
                self.recording = value
            }
            if let value = dict["RecordingAudio"] as? String {
                self.recordingAudio = value
            }
            if let value = dict["RecordingDuration"] as? Int32 {
                self.recordingDuration = value
            }
            if let value = dict["RecordingEndTime"] as? String {
                self.recordingEndTime = value
            }
            if let value = dict["RecordingExpires"] as? Int64 {
                self.recordingExpires = value
            }
            if let value = dict["RecordingFps"] as? Int64 {
                self.recordingFps = value
            }
            if let value = dict["RecordingStartTime"] as? String {
                self.recordingStartTime = value
            }
            if let value = dict["RecordingUserNotify"] as? String {
                self.recordingUserNotify = value
            }
            if let value = dict["RecordingUserNotifyMessage"] as? String {
                self.recordingUserNotifyMessage = value
            }
            if let value = dict["RemoteCoordinate"] as? String {
                self.remoteCoordinate = value
            }
            if let value = dict["ResetDesktop"] as? String {
                self.resetDesktop = value
            }
            if let value = dict["ResolutionHeight"] as? Int32 {
                self.resolutionHeight = value
            }
            if let value = dict["ResolutionModel"] as? String {
                self.resolutionModel = value
            }
            if let value = dict["ResolutionWidth"] as? Int32 {
                self.resolutionWidth = value
            }
            if let value = dict["ResourceGroupCount"] as? Int32 {
                self.resourceGroupCount = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
            if let value = dict["SafeMenu"] as? String {
                self.safeMenu = value
            }
            if let value = dict["Scope"] as? String {
                self.scope = value
            }
            if let value = dict["ScopeValue"] as? [String] {
                self.scopeValue = value
            }
            if let value = dict["ScreenDisplayMode"] as? String {
                self.screenDisplayMode = value
            }
            if let value = dict["SmoothEnhancement"] as? String {
                self.smoothEnhancement = value
            }
            if let value = dict["StatusMonitor"] as? String {
                self.statusMonitor = value
            }
            if let value = dict["StreamingMode"] as? String {
                self.streamingMode = value
            }
            if let value = dict["TargetFps"] as? Int32 {
                self.targetFps = value
            }
            if let value = dict["UsbRedirect"] as? String {
                self.usbRedirect = value
            }
            if let value = dict["UsbSupplyRedirectRule"] as? [Any?] {
                var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups.UsbSupplyRedirectRule] = []
                for v in value {
                    if v != nil {
                        var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups.UsbSupplyRedirectRule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.usbSupplyRedirectRule = tmp
            }
            if let value = dict["UseTime"] as? String {
                self.useTime = value
            }
            if let value = dict["VideoEncAvgKbps"] as? Int32 {
                self.videoEncAvgKbps = value
            }
            if let value = dict["VideoEncMaxQP"] as? Int32 {
                self.videoEncMaxQP = value
            }
            if let value = dict["VideoEncMinQP"] as? Int32 {
                self.videoEncMinQP = value
            }
            if let value = dict["VideoEncPeakKbps"] as? Int32 {
                self.videoEncPeakKbps = value
            }
            if let value = dict["VideoEncPolicy"] as? String {
                self.videoEncPolicy = value
            }
            if let value = dict["VideoRedirect"] as? String {
                self.videoRedirect = value
            }
            if let value = dict["VisualQuality"] as? String {
                self.visualQuality = value
            }
            if let value = dict["Watermark"] as? String {
                self.watermark = value
            }
            if let value = dict["WatermarkAntiCam"] as? String {
                self.watermarkAntiCam = value
            }
            if let value = dict["WatermarkColor"] as? Int32 {
                self.watermarkColor = value
            }
            if let value = dict["WatermarkCustomText"] as? String {
                self.watermarkCustomText = value
            }
            if let value = dict["WatermarkDegree"] as? Double {
                self.watermarkDegree = value
            }
            if let value = dict["WatermarkFontSize"] as? Int32 {
                self.watermarkFontSize = value
            }
            if let value = dict["WatermarkFontStyle"] as? String {
                self.watermarkFontStyle = value
            }
            if let value = dict["WatermarkPower"] as? String {
                self.watermarkPower = value
            }
            if let value = dict["WatermarkRowAmount"] as? Int32 {
                self.watermarkRowAmount = value
            }
            if let value = dict["WatermarkSecurity"] as? String {
                self.watermarkSecurity = value
            }
            if let value = dict["WatermarkTransparency"] as? String {
                self.watermarkTransparency = value
            }
            if let value = dict["WatermarkTransparencyValue"] as? Int32 {
                self.watermarkTransparencyValue = value
            }
            if let value = dict["WatermarkType"] as? String {
                self.watermarkType = value
            }
            if let value = dict["WuyingKeeper"] as? String {
                self.wuyingKeeper = value
            }
            if let value = dict["WyAssistant"] as? String {
                self.wyAssistant = value
            }
        }
    }
    public var count: Int32?

    public var describePolicyGroups: [DescribePolicyGroupsResponseBody.DescribePolicyGroups]?

    public var nextToken: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.describePolicyGroups != nil {
            var tmp : [Any] = []
            for k in self.describePolicyGroups! {
                tmp.append(k.toMap())
            }
            map["DescribePolicyGroups"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["DescribePolicyGroups"] as? [Any?] {
            var tmp : [DescribePolicyGroupsResponseBody.DescribePolicyGroups] = []
            for v in value {
                if v != nil {
                    var model = DescribePolicyGroupsResponseBody.DescribePolicyGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.describePolicyGroups = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePolicyGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePolicyGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePolicyGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePriceRequest : Tea.TeaModel {
    public var amount: Int32?

    public var bandwidth: Int32?

    public var duration: Int32?

    public var groupDesktopCount: Int32?

    public var instanceType: String?

    public var internetChargeType: String?

    public var osType: String?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceType: String?

    public var rootDiskCategory: String?

    public var rootDiskSizeGib: Int32?

    public var userDiskCategory: String?

    public var userDiskSizeGib: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.bandwidth != nil {
            map["Bandwidth"] = self.bandwidth!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.groupDesktopCount != nil {
            map["GroupDesktopCount"] = self.groupDesktopCount!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.internetChargeType != nil {
            map["InternetChargeType"] = self.internetChargeType!
        }
        if self.osType != nil {
            map["OsType"] = self.osType!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.rootDiskCategory != nil {
            map["RootDiskCategory"] = self.rootDiskCategory!
        }
        if self.rootDiskSizeGib != nil {
            map["RootDiskSizeGib"] = self.rootDiskSizeGib!
        }
        if self.userDiskCategory != nil {
            map["UserDiskCategory"] = self.userDiskCategory!
        }
        if self.userDiskSizeGib != nil {
            map["UserDiskSizeGib"] = self.userDiskSizeGib!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? Int32 {
            self.amount = value
        }
        if let value = dict["Bandwidth"] as? Int32 {
            self.bandwidth = value
        }
        if let value = dict["Duration"] as? Int32 {
            self.duration = value
        }
        if let value = dict["GroupDesktopCount"] as? Int32 {
            self.groupDesktopCount = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["InternetChargeType"] as? String {
            self.internetChargeType = value
        }
        if let value = dict["OsType"] as? String {
            self.osType = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["RootDiskCategory"] as? String {
            self.rootDiskCategory = value
        }
        if let value = dict["RootDiskSizeGib"] as? Int32 {
            self.rootDiskSizeGib = value
        }
        if let value = dict["UserDiskCategory"] as? String {
            self.userDiskCategory = value
        }
        if let value = dict["UserDiskSizeGib"] as? Int32 {
            self.userDiskSizeGib = value
        }
    }
}

public class DescribePriceResponseBody : Tea.TeaModel {
    public class PriceInfo : Tea.TeaModel {
        public class Price : Tea.TeaModel {
            public class Promotions : Tea.TeaModel {
                public var optionCode: String?

                public var promotionDesc: String?

                public var promotionId: String?

                public var promotionName: String?

                public var selected: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.optionCode != nil {
                        map["OptionCode"] = self.optionCode!
                    }
                    if self.promotionDesc != nil {
                        map["PromotionDesc"] = self.promotionDesc!
                    }
                    if self.promotionId != nil {
                        map["PromotionId"] = self.promotionId!
                    }
                    if self.promotionName != nil {
                        map["PromotionName"] = self.promotionName!
                    }
                    if self.selected != nil {
                        map["Selected"] = self.selected!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["OptionCode"] as? String {
                        self.optionCode = value
                    }
                    if let value = dict["PromotionDesc"] as? String {
                        self.promotionDesc = value
                    }
                    if let value = dict["PromotionId"] as? String {
                        self.promotionId = value
                    }
                    if let value = dict["PromotionName"] as? String {
                        self.promotionName = value
                    }
                    if let value = dict["Selected"] as? Bool {
                        self.selected = value
                    }
                }
            }
            public var currency: String?

            public var discountPrice: Double?

            public var orderLines: [String: String]?

            public var originalPrice: Double?

            public var promotions: [DescribePriceResponseBody.PriceInfo.Price.Promotions]?

            public var spPrice: Int64?

            public var tradePrice: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.discountPrice != nil {
                    map["DiscountPrice"] = self.discountPrice!
                }
                if self.orderLines != nil {
                    map["OrderLines"] = self.orderLines!
                }
                if self.originalPrice != nil {
                    map["OriginalPrice"] = self.originalPrice!
                }
                if self.promotions != nil {
                    var tmp : [Any] = []
                    for k in self.promotions! {
                        tmp.append(k.toMap())
                    }
                    map["Promotions"] = tmp
                }
                if self.spPrice != nil {
                    map["SpPrice"] = self.spPrice!
                }
                if self.tradePrice != nil {
                    map["TradePrice"] = self.tradePrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DiscountPrice"] as? Double {
                    self.discountPrice = value
                }
                if let value = dict["OrderLines"] as? [String: String] {
                    self.orderLines = value
                }
                if let value = dict["OriginalPrice"] as? Double {
                    self.originalPrice = value
                }
                if let value = dict["Promotions"] as? [Any?] {
                    var tmp : [DescribePriceResponseBody.PriceInfo.Price.Promotions] = []
                    for v in value {
                        if v != nil {
                            var model = DescribePriceResponseBody.PriceInfo.Price.Promotions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.promotions = tmp
                }
                if let value = dict["SpPrice"] as? Int64 {
                    self.spPrice = value
                }
                if let value = dict["TradePrice"] as? Double {
                    self.tradePrice = value
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public var description_: String?

            public var ruleId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["RuleId"] as? Int64 {
                    self.ruleId = value
                }
            }
        }
        public var freeCdsQuota: Bool?

        public var freeCdsSize: Int64?

        public var price: DescribePriceResponseBody.PriceInfo.Price?

        public var rules: [DescribePriceResponseBody.PriceInfo.Rules]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.price?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.freeCdsQuota != nil {
                map["FreeCdsQuota"] = self.freeCdsQuota!
            }
            if self.freeCdsSize != nil {
                map["FreeCdsSize"] = self.freeCdsSize!
            }
            if self.price != nil {
                map["Price"] = self.price?.toMap()
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FreeCdsQuota"] as? Bool {
                self.freeCdsQuota = value
            }
            if let value = dict["FreeCdsSize"] as? Int64 {
                self.freeCdsSize = value
            }
            if let value = dict["Price"] as? [String: Any?] {
                var model = DescribePriceResponseBody.PriceInfo.Price()
                model.fromMap(value)
                self.price = model
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [DescribePriceResponseBody.PriceInfo.Rules] = []
                for v in value {
                    if v != nil {
                        var model = DescribePriceResponseBody.PriceInfo.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
        }
    }
    public var priceInfo: DescribePriceResponseBody.PriceInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.priceInfo != nil {
            map["PriceInfo"] = self.priceInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PriceInfo"] as? [String: Any?] {
            var model = DescribePriceResponseBody.PriceInfo()
            model.fromMap(value)
            self.priceInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePriceForCreateDesktopOversoldGroupRequest : Tea.TeaModel {
    public var concurrenceCount: Int32?

    public var dataDiskSize: Int32?

    public var desktopType: String?

    public var oversoldUserCount: Int32?

    public var period: Int32?

    public var periodUnit: String?

    public var systemDiskSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.concurrenceCount != nil {
            map["ConcurrenceCount"] = self.concurrenceCount!
        }
        if self.dataDiskSize != nil {
            map["DataDiskSize"] = self.dataDiskSize!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.oversoldUserCount != nil {
            map["OversoldUserCount"] = self.oversoldUserCount!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.systemDiskSize != nil {
            map["SystemDiskSize"] = self.systemDiskSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConcurrenceCount"] as? Int32 {
            self.concurrenceCount = value
        }
        if let value = dict["DataDiskSize"] as? Int32 {
            self.dataDiskSize = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["OversoldUserCount"] as? Int32 {
            self.oversoldUserCount = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["SystemDiskSize"] as? Int32 {
            self.systemDiskSize = value
        }
    }
}

public class DescribePriceForCreateDesktopOversoldGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var price: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.price != nil {
                map["Price"] = self.price!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Price"] as? String {
                self.price = value
            }
        }
    }
    public var data: DescribePriceForCreateDesktopOversoldGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribePriceForCreateDesktopOversoldGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePriceForCreateDesktopOversoldGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePriceForCreateDesktopOversoldGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePriceForCreateDesktopOversoldGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePriceForModifyDesktopOversoldGroupSaleRequest : Tea.TeaModel {
    public var concurrenceCount: Int32?

    public var oversoldGroupId: String?

    public var oversoldUserCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.concurrenceCount != nil {
            map["ConcurrenceCount"] = self.concurrenceCount!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.oversoldUserCount != nil {
            map["OversoldUserCount"] = self.oversoldUserCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConcurrenceCount"] as? Int32 {
            self.concurrenceCount = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["OversoldUserCount"] as? Int32 {
            self.oversoldUserCount = value
        }
    }
}

public class DescribePriceForModifyDesktopOversoldGroupSaleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var price: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.price != nil {
                map["Price"] = self.price!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Price"] as? String {
                self.price = value
            }
        }
    }
    public var data: DescribePriceForModifyDesktopOversoldGroupSaleResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribePriceForModifyDesktopOversoldGroupSaleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePriceForModifyDesktopOversoldGroupSaleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePriceForModifyDesktopOversoldGroupSaleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePriceForModifyDesktopOversoldGroupSaleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePriceForRenewDesktopOversoldGroupRequest : Tea.TeaModel {
    public var oversoldGroupId: String?

    public var period: Int32?

    public var periodUnit: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
    }
}

public class DescribePriceForRenewDesktopOversoldGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var price: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.price != nil {
                map["Price"] = self.price!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Price"] as? String {
                self.price = value
            }
        }
    }
    public var data: DescribePriceForRenewDesktopOversoldGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribePriceForRenewDesktopOversoldGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePriceForRenewDesktopOversoldGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePriceForRenewDesktopOversoldGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePriceForRenewDesktopOversoldGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRecordingsRequest : Tea.TeaModel {
    public var desktopId: String?

    public var endTime: String?

    public var maxResults: Int32?

    public var needSignedUrl: Bool?

    public var nextToken: String?

    public var policyGroupId: String?

    public var regionId: String?

    public var signedUrlExpireMinutes: Int32?

    public var standardEndTime: String?

    public var standardStartTime: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.needSignedUrl != nil {
            map["NeedSignedUrl"] = self.needSignedUrl!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.signedUrlExpireMinutes != nil {
            map["SignedUrlExpireMinutes"] = self.signedUrlExpireMinutes!
        }
        if self.standardEndTime != nil {
            map["StandardEndTime"] = self.standardEndTime!
        }
        if self.standardStartTime != nil {
            map["StandardStartTime"] = self.standardStartTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NeedSignedUrl"] as? Bool {
            self.needSignedUrl = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SignedUrlExpireMinutes"] as? Int32 {
            self.signedUrlExpireMinutes = value
        }
        if let value = dict["StandardEndTime"] as? String {
            self.standardEndTime = value
        }
        if let value = dict["StandardStartTime"] as? String {
            self.standardStartTime = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeRecordingsResponseBody : Tea.TeaModel {
    public class Recordings : Tea.TeaModel {
        public var desktopId: String?

        public var desktopName: String?

        public var endTime: String?

        public var endUserIds: [String]?

        public var filePath: String?

        public var policyGroupId: String?

        public var recordingSize: Int32?

        public var recordingType: String?

        public var signedUrl: String?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.endUserIds != nil {
                map["EndUserIds"] = self.endUserIds!
            }
            if self.filePath != nil {
                map["FilePath"] = self.filePath!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.recordingSize != nil {
                map["RecordingSize"] = self.recordingSize!
            }
            if self.recordingType != nil {
                map["RecordingType"] = self.recordingType!
            }
            if self.signedUrl != nil {
                map["SignedUrl"] = self.signedUrl!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["EndUserIds"] as? [String] {
                self.endUserIds = value
            }
            if let value = dict["FilePath"] as? String {
                self.filePath = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["RecordingSize"] as? Int32 {
                self.recordingSize = value
            }
            if let value = dict["RecordingType"] as? String {
                self.recordingType = value
            }
            if let value = dict["SignedUrl"] as? String {
                self.signedUrl = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var nextToken: String?

    public var recordings: [DescribeRecordingsResponseBody.Recordings]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.recordings != nil {
            var tmp : [Any] = []
            for k in self.recordings! {
                tmp.append(k.toMap())
            }
            map["Recordings"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Recordings"] as? [Any?] {
            var tmp : [DescribeRecordingsResponseBody.Recordings] = []
            for v in value {
                if v != nil {
                    var model = DescribeRecordingsResponseBody.Recordings()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.recordings = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRecordingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRecordingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRecordingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRefundPriceRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var refundType: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.refundType != nil {
            map["RefundType"] = self.refundType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["RefundType"] as? String {
            self.refundType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class DescribeRefundPriceResponseBody : Tea.TeaModel {
    public class PriceInfo : Tea.TeaModel {
        public var currency: String?

        public var refundFee: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.currency != nil {
                map["Currency"] = self.currency!
            }
            if self.refundFee != nil {
                map["RefundFee"] = self.refundFee!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Currency"] as? String {
                self.currency = value
            }
            if let value = dict["RefundFee"] as? Double {
                self.refundFee = value
            }
        }
    }
    public var priceInfo: DescribeRefundPriceResponseBody.PriceInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.priceInfo != nil {
            map["PriceInfo"] = self.priceInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PriceInfo"] as? [String: Any?] {
            var model = DescribeRefundPriceResponseBody.PriceInfo()
            model.fromMap(value)
            self.priceInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRefundPriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRefundPriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRefundPriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRegionsRequest : Tea.TeaModel {
    public var acceptLanguage: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.acceptLanguage != nil {
            map["AcceptLanguage"] = self.acceptLanguage!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AcceptLanguage"] as? String {
            self.acceptLanguage = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeRegionsResponseBody : Tea.TeaModel {
    public class Regions : Tea.TeaModel {
        public var localName: String?

        public var regionEndpoint: String?

        public var regionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.localName != nil {
                map["LocalName"] = self.localName!
            }
            if self.regionEndpoint != nil {
                map["RegionEndpoint"] = self.regionEndpoint!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LocalName"] as? String {
                self.localName = value
            }
            if let value = dict["RegionEndpoint"] as? String {
                self.regionEndpoint = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
        }
    }
    public var regions: [DescribeRegionsResponseBody.Regions]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regions != nil {
            var tmp : [Any] = []
            for k in self.regions! {
                tmp.append(k.toMap())
            }
            map["Regions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regions"] as? [Any?] {
            var tmp : [DescribeRegionsResponseBody.Regions] = []
            for v in value {
                if v != nil {
                    var model = DescribeRegionsResponseBody.Regions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.regions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRenewalPriceRequest : Tea.TeaModel {
    public var instanceId: String?

    public var instanceIds: [String]?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceIds != nil {
            map["InstanceIds"] = self.instanceIds!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceIds"] as? [String] {
            self.instanceIds = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class DescribeRenewalPriceResponseBody : Tea.TeaModel {
    public class PriceInfo : Tea.TeaModel {
        public class Price : Tea.TeaModel {
            public class Promotions : Tea.TeaModel {
                public var optionCode: String?

                public var promotionDesc: String?

                public var promotionId: String?

                public var promotionName: String?

                public var selected: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.optionCode != nil {
                        map["OptionCode"] = self.optionCode!
                    }
                    if self.promotionDesc != nil {
                        map["PromotionDesc"] = self.promotionDesc!
                    }
                    if self.promotionId != nil {
                        map["PromotionId"] = self.promotionId!
                    }
                    if self.promotionName != nil {
                        map["PromotionName"] = self.promotionName!
                    }
                    if self.selected != nil {
                        map["Selected"] = self.selected!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["OptionCode"] as? String {
                        self.optionCode = value
                    }
                    if let value = dict["PromotionDesc"] as? String {
                        self.promotionDesc = value
                    }
                    if let value = dict["PromotionId"] as? String {
                        self.promotionId = value
                    }
                    if let value = dict["PromotionName"] as? String {
                        self.promotionName = value
                    }
                    if let value = dict["Selected"] as? Bool {
                        self.selected = value
                    }
                }
            }
            public var currency: String?

            public var discountPrice: Double?

            public var orderLines: [String: String]?

            public var originalPrice: Double?

            public var promotions: [DescribeRenewalPriceResponseBody.PriceInfo.Price.Promotions]?

            public var tradePrice: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.currency != nil {
                    map["Currency"] = self.currency!
                }
                if self.discountPrice != nil {
                    map["DiscountPrice"] = self.discountPrice!
                }
                if self.orderLines != nil {
                    map["OrderLines"] = self.orderLines!
                }
                if self.originalPrice != nil {
                    map["OriginalPrice"] = self.originalPrice!
                }
                if self.promotions != nil {
                    var tmp : [Any] = []
                    for k in self.promotions! {
                        tmp.append(k.toMap())
                    }
                    map["Promotions"] = tmp
                }
                if self.tradePrice != nil {
                    map["TradePrice"] = self.tradePrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Currency"] as? String {
                    self.currency = value
                }
                if let value = dict["DiscountPrice"] as? Double {
                    self.discountPrice = value
                }
                if let value = dict["OrderLines"] as? [String: String] {
                    self.orderLines = value
                }
                if let value = dict["OriginalPrice"] as? Double {
                    self.originalPrice = value
                }
                if let value = dict["Promotions"] as? [Any?] {
                    var tmp : [DescribeRenewalPriceResponseBody.PriceInfo.Price.Promotions] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeRenewalPriceResponseBody.PriceInfo.Price.Promotions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.promotions = tmp
                }
                if let value = dict["TradePrice"] as? Double {
                    self.tradePrice = value
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public var description_: String?

            public var ruleId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["RuleId"] as? Int64 {
                    self.ruleId = value
                }
            }
        }
        public var price: DescribeRenewalPriceResponseBody.PriceInfo.Price?

        public var rules: [DescribeRenewalPriceResponseBody.PriceInfo.Rules]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.price?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.price != nil {
                map["Price"] = self.price?.toMap()
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Price"] as? [String: Any?] {
                var model = DescribeRenewalPriceResponseBody.PriceInfo.Price()
                model.fromMap(value)
                self.price = model
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [DescribeRenewalPriceResponseBody.PriceInfo.Rules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRenewalPriceResponseBody.PriceInfo.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
        }
    }
    public var priceInfo: DescribeRenewalPriceResponseBody.PriceInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.priceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.priceInfo != nil {
            map["PriceInfo"] = self.priceInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PriceInfo"] as? [String: Any?] {
            var model = DescribeRenewalPriceResponseBody.PriceInfo()
            model.fromMap(value)
            self.priceInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRenewalPriceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRenewalPriceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRenewalPriceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeResourceByCenterPolicyIdRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var policyGroupId: String?

    public var productType: String?

    public var resourceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["ResourceId"] as? String {
            self.resourceId = value
        }
    }
}

public class DescribeResourceByCenterPolicyIdResponseBody : Tea.TeaModel {
    public class ResourceModelList : Tea.TeaModel {
        public class AppModelList : Tea.TeaModel {
            public var appId: String?

            public var appName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
            }
        }
        public var appModelList: [DescribeResourceByCenterPolicyIdResponseBody.ResourceModelList.AppModelList]?

        public var cpu: Int32?

        public var desktopType: String?

        public var gpuCount: Double?

        public var gpuSpec: String?

        public var memory: Int64?

        public var osType: String?

        public var payType: String?

        public var productType: String?

        public var protocolType: String?

        public var resourceGroupId: String?

        public var resourceGroupName: String?

        public var resourceGroupRelCount: Int32?

        public var resourceId: String?

        public var resourceName: String?

        public var resourceRegionId: String?

        public var resourceType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appModelList != nil {
                var tmp : [Any] = []
                for k in self.appModelList! {
                    tmp.append(k.toMap())
                }
                map["AppModelList"] = tmp
            }
            if self.cpu != nil {
                map["Cpu"] = self.cpu!
            }
            if self.desktopType != nil {
                map["DesktopType"] = self.desktopType!
            }
            if self.gpuCount != nil {
                map["GpuCount"] = self.gpuCount!
            }
            if self.gpuSpec != nil {
                map["GpuSpec"] = self.gpuSpec!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.payType != nil {
                map["PayType"] = self.payType!
            }
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.resourceGroupName != nil {
                map["ResourceGroupName"] = self.resourceGroupName!
            }
            if self.resourceGroupRelCount != nil {
                map["ResourceGroupRelCount"] = self.resourceGroupRelCount!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceName != nil {
                map["ResourceName"] = self.resourceName!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppModelList"] as? [Any?] {
                var tmp : [DescribeResourceByCenterPolicyIdResponseBody.ResourceModelList.AppModelList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeResourceByCenterPolicyIdResponseBody.ResourceModelList.AppModelList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appModelList = tmp
            }
            if let value = dict["Cpu"] as? Int32 {
                self.cpu = value
            }
            if let value = dict["DesktopType"] as? String {
                self.desktopType = value
            }
            if let value = dict["GpuCount"] as? Double {
                self.gpuCount = value
            }
            if let value = dict["GpuSpec"] as? String {
                self.gpuSpec = value
            }
            if let value = dict["Memory"] as? Int64 {
                self.memory = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["PayType"] as? String {
                self.payType = value
            }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ResourceGroupName"] as? String {
                self.resourceGroupName = value
            }
            if let value = dict["ResourceGroupRelCount"] as? Int32 {
                self.resourceGroupRelCount = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceName"] as? String {
                self.resourceName = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var count: String?

    public var nextToken: String?

    public var requestId: String?

    public var resourceModelList: [DescribeResourceByCenterPolicyIdResponseBody.ResourceModelList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceModelList != nil {
            var tmp : [Any] = []
            for k in self.resourceModelList! {
                tmp.append(k.toMap())
            }
            map["ResourceModelList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? String {
            self.count = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceModelList"] as? [Any?] {
            var tmp : [DescribeResourceByCenterPolicyIdResponseBody.ResourceModelList] = []
            for v in value {
                if v != nil {
                    var model = DescribeResourceByCenterPolicyIdResponseBody.ResourceModelList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceModelList = tmp
        }
    }
}

public class DescribeResourceByCenterPolicyIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeResourceByCenterPolicyIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeResourceByCenterPolicyIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRouteEntryListRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var routeTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
    }
}

public class DescribeRouteEntryListResponseBody : Tea.TeaModel {
    public class RouteEntries : Tea.TeaModel {
        public class NextHops : Tea.TeaModel {
            public var nextHopId: String?

            public var nextHopType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nextHopId != nil {
                    map["NextHopId"] = self.nextHopId!
                }
                if self.nextHopType != nil {
                    map["NextHopType"] = self.nextHopType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NextHopId"] as? String {
                    self.nextHopId = value
                }
                if let value = dict["NextHopType"] as? String {
                    self.nextHopType = value
                }
            }
        }
        public var description_: String?

        public var destinationCidrBlock: String?

        public var ipVersion: String?

        public var nextHops: [DescribeRouteEntryListResponseBody.RouteEntries.NextHops]?

        public var routeEntryId: String?

        public var routeEntryName: String?

        public var routeTableId: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.destinationCidrBlock != nil {
                map["DestinationCidrBlock"] = self.destinationCidrBlock!
            }
            if self.ipVersion != nil {
                map["IpVersion"] = self.ipVersion!
            }
            if self.nextHops != nil {
                var tmp : [Any] = []
                for k in self.nextHops! {
                    tmp.append(k.toMap())
                }
                map["NextHops"] = tmp
            }
            if self.routeEntryId != nil {
                map["RouteEntryId"] = self.routeEntryId!
            }
            if self.routeEntryName != nil {
                map["RouteEntryName"] = self.routeEntryName!
            }
            if self.routeTableId != nil {
                map["RouteTableId"] = self.routeTableId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DestinationCidrBlock"] as? String {
                self.destinationCidrBlock = value
            }
            if let value = dict["IpVersion"] as? String {
                self.ipVersion = value
            }
            if let value = dict["NextHops"] as? [Any?] {
                var tmp : [DescribeRouteEntryListResponseBody.RouteEntries.NextHops] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRouteEntryListResponseBody.RouteEntries.NextHops()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nextHops = tmp
            }
            if let value = dict["RouteEntryId"] as? String {
                self.routeEntryId = value
            }
            if let value = dict["RouteEntryName"] as? String {
                self.routeEntryName = value
            }
            if let value = dict["RouteTableId"] as? String {
                self.routeTableId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public var routeEntries: [DescribeRouteEntryListResponseBody.RouteEntries]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routeEntries != nil {
            var tmp : [Any] = []
            for k in self.routeEntries! {
                tmp.append(k.toMap())
            }
            map["RouteEntries"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RouteEntries"] as? [Any?] {
            var tmp : [DescribeRouteEntryListResponseBody.RouteEntries] = []
            for v in value {
                if v != nil {
                    var model = DescribeRouteEntryListResponseBody.RouteEntries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.routeEntries = tmp
        }
    }
}

public class DescribeRouteEntryListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRouteEntryListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRouteEntryListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRouteTableListRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var routeTableId: String?

    public var routeTableName: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.routeTableId != nil {
            map["RouteTableId"] = self.routeTableId!
        }
        if self.routeTableName != nil {
            map["RouteTableName"] = self.routeTableName!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RouteTableId"] as? String {
            self.routeTableId = value
        }
        if let value = dict["RouteTableName"] as? String {
            self.routeTableName = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class DescribeRouteTableListResponseBody : Tea.TeaModel {
    public class RouteTableList : Tea.TeaModel {
        public var associateType: String?

        public var routeTableId: String?

        public var routeTableType: String?

        public var routerType: String?

        public var status: String?

        public var vSwitchIds: [String]?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.associateType != nil {
                map["AssociateType"] = self.associateType!
            }
            if self.routeTableId != nil {
                map["RouteTableId"] = self.routeTableId!
            }
            if self.routeTableType != nil {
                map["RouteTableType"] = self.routeTableType!
            }
            if self.routerType != nil {
                map["RouterType"] = self.routerType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssociateType"] as? String {
                self.associateType = value
            }
            if let value = dict["RouteTableId"] as? String {
                self.routeTableId = value
            }
            if let value = dict["RouteTableType"] as? String {
                self.routeTableType = value
            }
            if let value = dict["RouterType"] as? String {
                self.routerType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["VSwitchIds"] as? [String] {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public var routeTableList: [DescribeRouteTableListResponseBody.RouteTableList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routeTableList != nil {
            var tmp : [Any] = []
            for k in self.routeTableList! {
                tmp.append(k.toMap())
            }
            map["RouteTableList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RouteTableList"] as? [Any?] {
            var tmp : [DescribeRouteTableListResponseBody.RouteTableList] = []
            for v in value {
                if v != nil {
                    var model = DescribeRouteTableListResponseBody.RouteTableList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.routeTableList = tmp
        }
    }
}

public class DescribeRouteTableListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRouteTableListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRouteTableListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSessionStatisticRequest : Tea.TeaModel {
    public var endTime: String?

    public var officeSiteId: String?

    public var period: Int32?

    public var regionId: String?

    public var searchRegionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.searchRegionId != nil {
            map["SearchRegionId"] = self.searchRegionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SearchRegionId"] as? String {
            self.searchRegionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSessionStatisticResponseBody : Tea.TeaModel {
    public class Statistic : Tea.TeaModel {
        public var count: Int64?

        public var timePoint: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.timePoint != nil {
                map["TimePoint"] = self.timePoint!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["TimePoint"] as? Int64 {
                self.timePoint = value
            }
        }
    }
    public var requestId: String?

    public var statistic: [DescribeSessionStatisticResponseBody.Statistic]?

    public var totalCount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.statistic != nil {
            var tmp : [Any] = []
            for k in self.statistic! {
                tmp.append(k.toMap())
            }
            map["Statistic"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Statistic"] as? [Any?] {
            var tmp : [DescribeSessionStatisticResponseBody.Statistic] = []
            for v in value {
                if v != nil {
                    var model = DescribeSessionStatisticResponseBody.Statistic()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.statistic = tmp
        }
        if let value = dict["TotalCount"] as? String {
            self.totalCount = value
        }
    }
}

public class DescribeSessionStatisticResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSessionStatisticResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSessionStatisticResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSnapshotsRequest : Tea.TeaModel {
    public var creator: String?

    public var desktopId: String?

    public var desktopName: String?

    public var endTime: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var osType: String?

    public var regionId: String?

    public var snapshotId: String?

    public var snapshotName: String?

    public var snapshotType: String?

    public var sourceDiskType: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.creator != nil {
            map["Creator"] = self.creator!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.osType != nil {
            map["OsType"] = self.osType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snapshotId != nil {
            map["SnapshotId"] = self.snapshotId!
        }
        if self.snapshotName != nil {
            map["SnapshotName"] = self.snapshotName!
        }
        if self.snapshotType != nil {
            map["SnapshotType"] = self.snapshotType!
        }
        if self.sourceDiskType != nil {
            map["SourceDiskType"] = self.sourceDiskType!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Creator"] as? String {
            self.creator = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OsType"] as? String {
            self.osType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnapshotId"] as? String {
            self.snapshotId = value
        }
        if let value = dict["SnapshotName"] as? String {
            self.snapshotName = value
        }
        if let value = dict["SnapshotType"] as? String {
            self.snapshotType = value
        }
        if let value = dict["SourceDiskType"] as? String {
            self.sourceDiskType = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSnapshotsResponseBody : Tea.TeaModel {
    public class Snapshots : Tea.TeaModel {
        public var creationTime: String?

        public var creator: String?

        public var deletionTime: String?

        public var description_: String?

        public var desktopId: String?

        public var desktopName: String?

        public var desktopStatus: String?

        public var diskStatus: String?

        public var osType: String?

        public var progress: String?

        public var protocolType: String?

        public var remainTime: Int32?

        public var restorePointId: String?

        public var restorePointName: String?

        public var snapshotId: String?

        public var snapshotName: String?

        public var snapshotType: String?

        public var sourceDiskSize: String?

        public var sourceDiskType: String?

        public var status: String?

        public var volumeEncryptionEnabled: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.deletionTime != nil {
                map["DeletionTime"] = self.deletionTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.desktopStatus != nil {
                map["DesktopStatus"] = self.desktopStatus!
            }
            if self.diskStatus != nil {
                map["DiskStatus"] = self.diskStatus!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.progress != nil {
                map["Progress"] = self.progress!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.remainTime != nil {
                map["RemainTime"] = self.remainTime!
            }
            if self.restorePointId != nil {
                map["RestorePointId"] = self.restorePointId!
            }
            if self.restorePointName != nil {
                map["RestorePointName"] = self.restorePointName!
            }
            if self.snapshotId != nil {
                map["SnapshotId"] = self.snapshotId!
            }
            if self.snapshotName != nil {
                map["SnapshotName"] = self.snapshotName!
            }
            if self.snapshotType != nil {
                map["SnapshotType"] = self.snapshotType!
            }
            if self.sourceDiskSize != nil {
                map["SourceDiskSize"] = self.sourceDiskSize!
            }
            if self.sourceDiskType != nil {
                map["SourceDiskType"] = self.sourceDiskType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.volumeEncryptionEnabled != nil {
                map["VolumeEncryptionEnabled"] = self.volumeEncryptionEnabled!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["DeletionTime"] as? String {
                self.deletionTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["DesktopStatus"] as? String {
                self.desktopStatus = value
            }
            if let value = dict["DiskStatus"] as? String {
                self.diskStatus = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["Progress"] as? String {
                self.progress = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["RemainTime"] as? Int32 {
                self.remainTime = value
            }
            if let value = dict["RestorePointId"] as? String {
                self.restorePointId = value
            }
            if let value = dict["RestorePointName"] as? String {
                self.restorePointName = value
            }
            if let value = dict["SnapshotId"] as? String {
                self.snapshotId = value
            }
            if let value = dict["SnapshotName"] as? String {
                self.snapshotName = value
            }
            if let value = dict["SnapshotType"] as? String {
                self.snapshotType = value
            }
            if let value = dict["SourceDiskSize"] as? String {
                self.sourceDiskSize = value
            }
            if let value = dict["SourceDiskType"] as? String {
                self.sourceDiskType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["VolumeEncryptionEnabled"] as? Bool {
                self.volumeEncryptionEnabled = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var snapshots: [DescribeSnapshotsResponseBody.Snapshots]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snapshots != nil {
            var tmp : [Any] = []
            for k in self.snapshots! {
                tmp.append(k.toMap())
            }
            map["Snapshots"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Snapshots"] as? [Any?] {
            var tmp : [DescribeSnapshotsResponseBody.Snapshots] = []
            for v in value {
                if v != nil {
                    var model = DescribeSnapshotsResponseBody.Snapshots()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.snapshots = tmp
        }
    }
}

public class DescribeSnapshotsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSnapshotsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSnapshotsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSnatTableEntriesRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var natGatewayId: String?

    public var nextToken: String?

    public var regionId: String?

    public var snatEntryId: String?

    public var snatTableId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.natGatewayId != nil {
            map["NatGatewayId"] = self.natGatewayId!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snatEntryId != nil {
            map["SnatEntryId"] = self.snatEntryId!
        }
        if self.snatTableId != nil {
            map["SnatTableId"] = self.snatTableId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NatGatewayId"] as? String {
            self.natGatewayId = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnatEntryId"] as? String {
            self.snatEntryId = value
        }
        if let value = dict["SnatTableId"] as? String {
            self.snatTableId = value
        }
    }
}

public class DescribeSnatTableEntriesResponseBody : Tea.TeaModel {
    public class SnatTableEntries : Tea.TeaModel {
        public var eipAffinity: String?

        public var natGatewayId: String?

        public var snatEntryId: String?

        public var snatEntryName: String?

        public var snatIp: String?

        public var snatTableId: String?

        public var sourceCIDR: String?

        public var sourceVSwitchId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eipAffinity != nil {
                map["EipAffinity"] = self.eipAffinity!
            }
            if self.natGatewayId != nil {
                map["NatGatewayId"] = self.natGatewayId!
            }
            if self.snatEntryId != nil {
                map["SnatEntryId"] = self.snatEntryId!
            }
            if self.snatEntryName != nil {
                map["SnatEntryName"] = self.snatEntryName!
            }
            if self.snatIp != nil {
                map["SnatIp"] = self.snatIp!
            }
            if self.snatTableId != nil {
                map["SnatTableId"] = self.snatTableId!
            }
            if self.sourceCIDR != nil {
                map["SourceCIDR"] = self.sourceCIDR!
            }
            if self.sourceVSwitchId != nil {
                map["SourceVSwitchId"] = self.sourceVSwitchId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EipAffinity"] as? String {
                self.eipAffinity = value
            }
            if let value = dict["NatGatewayId"] as? String {
                self.natGatewayId = value
            }
            if let value = dict["SnatEntryId"] as? String {
                self.snatEntryId = value
            }
            if let value = dict["SnatEntryName"] as? String {
                self.snatEntryName = value
            }
            if let value = dict["SnatIp"] as? String {
                self.snatIp = value
            }
            if let value = dict["SnatTableId"] as? String {
                self.snatTableId = value
            }
            if let value = dict["SourceCIDR"] as? String {
                self.sourceCIDR = value
            }
            if let value = dict["SourceVSwitchId"] as? String {
                self.sourceVSwitchId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public var snatTableEntries: [DescribeSnatTableEntriesResponseBody.SnatTableEntries]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snatTableEntries != nil {
            var tmp : [Any] = []
            for k in self.snatTableEntries! {
                tmp.append(k.toMap())
            }
            map["SnatTableEntries"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SnatTableEntries"] as? [Any?] {
            var tmp : [DescribeSnatTableEntriesResponseBody.SnatTableEntries] = []
            for v in value {
                if v != nil {
                    var model = DescribeSnatTableEntriesResponseBody.SnatTableEntries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.snatTableEntries = tmp
        }
    }
}

public class DescribeSnatTableEntriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSnatTableEntriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSnatTableEntriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSubnetsRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var name: String?

    public var nextToken: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var subnetId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.subnetId != nil {
            map["SubnetId"] = self.subnetId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SubnetId"] as? String {
            self.subnetId = value
        }
    }
}

public class DescribeSubnetsResponseBody : Tea.TeaModel {
    public class Subnets : Tea.TeaModel {
        public var cidrBlock: String?

        public var name: String?

        public var officeSiteId: String?

        public var status: String?

        public var subnetId: String?

        public var totalEdsCount: Int32?

        public var totalEdsCountForGroup: Int32?

        public var zoneId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrBlock != nil {
                map["CidrBlock"] = self.cidrBlock!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subnetId != nil {
                map["SubnetId"] = self.subnetId!
            }
            if self.totalEdsCount != nil {
                map["TotalEdsCount"] = self.totalEdsCount!
            }
            if self.totalEdsCountForGroup != nil {
                map["TotalEdsCountForGroup"] = self.totalEdsCountForGroup!
            }
            if self.zoneId != nil {
                map["ZoneId"] = self.zoneId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrBlock"] as? String {
                self.cidrBlock = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SubnetId"] as? String {
                self.subnetId = value
            }
            if let value = dict["TotalEdsCount"] as? Int32 {
                self.totalEdsCount = value
            }
            if let value = dict["TotalEdsCountForGroup"] as? Int32 {
                self.totalEdsCountForGroup = value
            }
            if let value = dict["ZoneId"] as? String {
                self.zoneId = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var subnets: [DescribeSubnetsResponseBody.Subnets]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subnets != nil {
            var tmp : [Any] = []
            for k in self.subnets! {
                tmp.append(k.toMap())
            }
            map["Subnets"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Subnets"] as? [Any?] {
            var tmp : [DescribeSubnetsResponseBody.Subnets] = []
            for v in value {
                if v != nil {
                    var model = DescribeSubnetsResponseBody.Subnets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.subnets = tmp
        }
    }
}

public class DescribeSubnetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSubnetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSubnetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTemplatesRequest : Tea.TeaModel {
    public var bizRegionId: String?

    public var bizType: String?

    public var imageId: String?

    public var keyword: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var productType: String?

    public var templateIds: [String]?

    public var templateName: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizRegionId != nil {
            map["BizRegionId"] = self.bizRegionId!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.templateIds != nil {
            map["TemplateIds"] = self.templateIds!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizRegionId"] as? String {
            self.bizRegionId = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["TemplateIds"] as? [String] {
            self.templateIds = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class DescribeTemplatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataDiskList : Tea.TeaModel {
            public var performanceLevel: String?

            public var size: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.performanceLevel != nil {
                    map["PerformanceLevel"] = self.performanceLevel!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PerformanceLevel"] as? String {
                    self.performanceLevel = value
                }
                if let value = dict["Size"] as? String {
                    self.size = value
                }
            }
        }
        public class RegionConfigList : Tea.TeaModel {
            public var cpuCount: Int32?

            public var gpuSpec: String?

            public var memorySize: Int64?

            public var officeSiteId: String?

            public var regionId: String?

            public var resourceInstanceType: String?

            public var snapshotPolicyId: String?

            public var subnetId: String?

            public var volumeEncryptionEnable: Bool?

            public var volumeEncryptionKey: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cpuCount != nil {
                    map["CpuCount"] = self.cpuCount!
                }
                if self.gpuSpec != nil {
                    map["GpuSpec"] = self.gpuSpec!
                }
                if self.memorySize != nil {
                    map["MemorySize"] = self.memorySize!
                }
                if self.officeSiteId != nil {
                    map["OfficeSiteId"] = self.officeSiteId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.resourceInstanceType != nil {
                    map["ResourceInstanceType"] = self.resourceInstanceType!
                }
                if self.snapshotPolicyId != nil {
                    map["SnapshotPolicyId"] = self.snapshotPolicyId!
                }
                if self.subnetId != nil {
                    map["SubnetId"] = self.subnetId!
                }
                if self.volumeEncryptionEnable != nil {
                    map["VolumeEncryptionEnable"] = self.volumeEncryptionEnable!
                }
                if self.volumeEncryptionKey != nil {
                    map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CpuCount"] as? Int32 {
                    self.cpuCount = value
                }
                if let value = dict["GpuSpec"] as? String {
                    self.gpuSpec = value
                }
                if let value = dict["MemorySize"] as? Int64 {
                    self.memorySize = value
                }
                if let value = dict["OfficeSiteId"] as? String {
                    self.officeSiteId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["ResourceInstanceType"] as? String {
                    self.resourceInstanceType = value
                }
                if let value = dict["SnapshotPolicyId"] as? String {
                    self.snapshotPolicyId = value
                }
                if let value = dict["SubnetId"] as? String {
                    self.subnetId = value
                }
                if let value = dict["VolumeEncryptionEnable"] as? Bool {
                    self.volumeEncryptionEnable = value
                }
                if let value = dict["VolumeEncryptionKey"] as? String {
                    self.volumeEncryptionKey = value
                }
            }
        }
        public class ResourceTagList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SiteConfigList : Tea.TeaModel {
            public var appRuleId: String?

            public var siteId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appRuleId != nil {
                    map["AppRuleId"] = self.appRuleId!
                }
                if self.siteId != nil {
                    map["SiteId"] = self.siteId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppRuleId"] as? String {
                    self.appRuleId = value
                }
                if let value = dict["SiteId"] as? String {
                    self.siteId = value
                }
            }
        }
        public var autoPay: Bool?

        public var autoRenew: Bool?

        public var chargeType: String?

        public var dataDiskList: [DescribeTemplatesResponseBody.Data.DataDiskList]?

        public var defaultLanguage: String?

        public var description_: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var imageId: String?

        public var imageType: String?

        public var period: Int32?

        public var periodUnit: String?

        public var policyGroupId: String?

        public var postPaidAfterUsedUp: Bool?

        public var productType: String?

        public var regionConfigList: [DescribeTemplatesResponseBody.Data.RegionConfigList]?

        public var requestId: String?

        public var resourceGroupId: String?

        public var resourceTagList: [DescribeTemplatesResponseBody.Data.ResourceTagList]?

        public var siteConfigList: [DescribeTemplatesResponseBody.Data.SiteConfigList]?

        public var systemDiskPerformanceLevel: String?

        public var systemDiskSize: Int32?

        public var templateId: String?

        public var templateName: String?

        public var templateType: String?

        public var timerGroupId: String?

        public var userDuration: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.autoPay != nil {
                map["AutoPay"] = self.autoPay!
            }
            if self.autoRenew != nil {
                map["AutoRenew"] = self.autoRenew!
            }
            if self.chargeType != nil {
                map["ChargeType"] = self.chargeType!
            }
            if self.dataDiskList != nil {
                var tmp : [Any] = []
                for k in self.dataDiskList! {
                    tmp.append(k.toMap())
                }
                map["DataDiskList"] = tmp
            }
            if self.defaultLanguage != nil {
                map["DefaultLanguage"] = self.defaultLanguage!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageType != nil {
                map["ImageType"] = self.imageType!
            }
            if self.period != nil {
                map["Period"] = self.period!
            }
            if self.periodUnit != nil {
                map["PeriodUnit"] = self.periodUnit!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.postPaidAfterUsedUp != nil {
                map["PostPaidAfterUsedUp"] = self.postPaidAfterUsedUp!
            }
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.regionConfigList != nil {
                var tmp : [Any] = []
                for k in self.regionConfigList! {
                    tmp.append(k.toMap())
                }
                map["RegionConfigList"] = tmp
            }
            if self.requestId != nil {
                map["RequestId"] = self.requestId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.resourceTagList != nil {
                var tmp : [Any] = []
                for k in self.resourceTagList! {
                    tmp.append(k.toMap())
                }
                map["ResourceTagList"] = tmp
            }
            if self.siteConfigList != nil {
                var tmp : [Any] = []
                for k in self.siteConfigList! {
                    tmp.append(k.toMap())
                }
                map["SiteConfigList"] = tmp
            }
            if self.systemDiskPerformanceLevel != nil {
                map["SystemDiskPerformanceLevel"] = self.systemDiskPerformanceLevel!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            if self.timerGroupId != nil {
                map["TimerGroupId"] = self.timerGroupId!
            }
            if self.userDuration != nil {
                map["UserDuration"] = self.userDuration!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AutoPay"] as? Bool {
                self.autoPay = value
            }
            if let value = dict["AutoRenew"] as? Bool {
                self.autoRenew = value
            }
            if let value = dict["ChargeType"] as? String {
                self.chargeType = value
            }
            if let value = dict["DataDiskList"] as? [Any?] {
                var tmp : [DescribeTemplatesResponseBody.Data.DataDiskList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTemplatesResponseBody.Data.DataDiskList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataDiskList = tmp
            }
            if let value = dict["DefaultLanguage"] as? String {
                self.defaultLanguage = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageType"] as? String {
                self.imageType = value
            }
            if let value = dict["Period"] as? Int32 {
                self.period = value
            }
            if let value = dict["PeriodUnit"] as? String {
                self.periodUnit = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["PostPaidAfterUsedUp"] as? Bool {
                self.postPaidAfterUsedUp = value
            }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["RegionConfigList"] as? [Any?] {
                var tmp : [DescribeTemplatesResponseBody.Data.RegionConfigList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTemplatesResponseBody.Data.RegionConfigList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.regionConfigList = tmp
            }
            if let value = dict["RequestId"] as? String {
                self.requestId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ResourceTagList"] as? [Any?] {
                var tmp : [DescribeTemplatesResponseBody.Data.ResourceTagList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTemplatesResponseBody.Data.ResourceTagList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceTagList = tmp
            }
            if let value = dict["SiteConfigList"] as? [Any?] {
                var tmp : [DescribeTemplatesResponseBody.Data.SiteConfigList] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTemplatesResponseBody.Data.SiteConfigList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.siteConfigList = tmp
            }
            if let value = dict["SystemDiskPerformanceLevel"] as? String {
                self.systemDiskPerformanceLevel = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
            if let value = dict["TimerGroupId"] as? String {
                self.timerGroupId = value
            }
            if let value = dict["UserDuration"] as? String {
                self.userDuration = value
            }
        }
    }
    public var code: String?

    public var data: [DescribeTemplatesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeTemplatesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeTemplatesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTimerGroupRequest : Tea.TeaModel {
    public var groupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeTimerGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ConfigTimers : Tea.TeaModel {
            public class SegmentTimers : Tea.TeaModel {
                public var endCronExpression: String?

                public var enforce: Bool?

                public var interval: Int32?

                public var notificationTime: Int32?

                public var operationType: String?

                public var processWhitelist: [String]?

                public var resetType: String?

                public var startCronExpression: String?

                public var timerOrder: Int32?

                public var timezone: String?

                public var triggerType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endCronExpression != nil {
                        map["EndCronExpression"] = self.endCronExpression!
                    }
                    if self.enforce != nil {
                        map["Enforce"] = self.enforce!
                    }
                    if self.interval != nil {
                        map["Interval"] = self.interval!
                    }
                    if self.notificationTime != nil {
                        map["NotificationTime"] = self.notificationTime!
                    }
                    if self.operationType != nil {
                        map["OperationType"] = self.operationType!
                    }
                    if self.processWhitelist != nil {
                        map["ProcessWhitelist"] = self.processWhitelist!
                    }
                    if self.resetType != nil {
                        map["ResetType"] = self.resetType!
                    }
                    if self.startCronExpression != nil {
                        map["StartCronExpression"] = self.startCronExpression!
                    }
                    if self.timerOrder != nil {
                        map["TimerOrder"] = self.timerOrder!
                    }
                    if self.timezone != nil {
                        map["Timezone"] = self.timezone!
                    }
                    if self.triggerType != nil {
                        map["TriggerType"] = self.triggerType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndCronExpression"] as? String {
                        self.endCronExpression = value
                    }
                    if let value = dict["Enforce"] as? Bool {
                        self.enforce = value
                    }
                    if let value = dict["Interval"] as? Int32 {
                        self.interval = value
                    }
                    if let value = dict["NotificationTime"] as? Int32 {
                        self.notificationTime = value
                    }
                    if let value = dict["OperationType"] as? String {
                        self.operationType = value
                    }
                    if let value = dict["ProcessWhitelist"] as? [String] {
                        self.processWhitelist = value
                    }
                    if let value = dict["ResetType"] as? String {
                        self.resetType = value
                    }
                    if let value = dict["StartCronExpression"] as? String {
                        self.startCronExpression = value
                    }
                    if let value = dict["TimerOrder"] as? Int32 {
                        self.timerOrder = value
                    }
                    if let value = dict["Timezone"] as? String {
                        self.timezone = value
                    }
                    if let value = dict["TriggerType"] as? String {
                        self.triggerType = value
                    }
                }
            }
            public var allowClientSetting: Bool?

            public var cronExpression: String?

            public var enforce: Bool?

            public var interval: Int32?

            public var notificationTime: Int32?

            public var operationType: String?

            public var processWhitelist: [String]?

            public var resetType: String?

            public var segmentTimers: [DescribeTimerGroupResponseBody.Data.ConfigTimers.SegmentTimers]?

            public var timerType: String?

            public var triggerType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allowClientSetting != nil {
                    map["AllowClientSetting"] = self.allowClientSetting!
                }
                if self.cronExpression != nil {
                    map["CronExpression"] = self.cronExpression!
                }
                if self.enforce != nil {
                    map["Enforce"] = self.enforce!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.notificationTime != nil {
                    map["NotificationTime"] = self.notificationTime!
                }
                if self.operationType != nil {
                    map["OperationType"] = self.operationType!
                }
                if self.processWhitelist != nil {
                    map["ProcessWhitelist"] = self.processWhitelist!
                }
                if self.resetType != nil {
                    map["ResetType"] = self.resetType!
                }
                if self.segmentTimers != nil {
                    var tmp : [Any] = []
                    for k in self.segmentTimers! {
                        tmp.append(k.toMap())
                    }
                    map["SegmentTimers"] = tmp
                }
                if self.timerType != nil {
                    map["TimerType"] = self.timerType!
                }
                if self.triggerType != nil {
                    map["TriggerType"] = self.triggerType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AllowClientSetting"] as? Bool {
                    self.allowClientSetting = value
                }
                if let value = dict["CronExpression"] as? String {
                    self.cronExpression = value
                }
                if let value = dict["Enforce"] as? Bool {
                    self.enforce = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["NotificationTime"] as? Int32 {
                    self.notificationTime = value
                }
                if let value = dict["OperationType"] as? String {
                    self.operationType = value
                }
                if let value = dict["ProcessWhitelist"] as? [String] {
                    self.processWhitelist = value
                }
                if let value = dict["ResetType"] as? String {
                    self.resetType = value
                }
                if let value = dict["SegmentTimers"] as? [Any?] {
                    var tmp : [DescribeTimerGroupResponseBody.Data.ConfigTimers.SegmentTimers] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeTimerGroupResponseBody.Data.ConfigTimers.SegmentTimers()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.segmentTimers = tmp
                }
                if let value = dict["TimerType"] as? String {
                    self.timerType = value
                }
                if let value = dict["TriggerType"] as? String {
                    self.triggerType = value
                }
            }
        }
        public var bindCount: Int32?

        public var bindCountMap: [String: Int32]?

        public var configTimers: [DescribeTimerGroupResponseBody.Data.ConfigTimers]?

        public var description_: String?

        public var groupId: String?

        public var name: String?

        public var productType: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindCount != nil {
                map["BindCount"] = self.bindCount!
            }
            if self.bindCountMap != nil {
                map["BindCountMap"] = self.bindCountMap!
            }
            if self.configTimers != nil {
                var tmp : [Any] = []
                for k in self.configTimers! {
                    tmp.append(k.toMap())
                }
                map["ConfigTimers"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindCount"] as? Int32 {
                self.bindCount = value
            }
            if let value = dict["BindCountMap"] as? [String: Int32] {
                self.bindCountMap = value
            }
            if let value = dict["ConfigTimers"] as? [Any?] {
                var tmp : [DescribeTimerGroupResponseBody.Data.ConfigTimers] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTimerGroupResponseBody.Data.ConfigTimers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.configTimers = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var data: DescribeTimerGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeTimerGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeTimerGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTimerGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTimerGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserConnectTimeRequest : Tea.TeaModel {
    public var endTime: String?

    public var endUserId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var oversoldGroupId: String?

    public var startTime: String?

    public var userDesktopId: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.userDesktopId != nil {
            map["UserDesktopId"] = self.userDesktopId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["UserDesktopId"] as? String {
            self.userDesktopId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class DescribeUserConnectTimeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var endConnectTime: String?

        public var endUserId: String?

        public var oversoldGroupId: String?

        public var startConnectTime: String?

        public var userDesktopId: String?

        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endConnectTime != nil {
                map["EndConnectTime"] = self.endConnectTime!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            if self.startConnectTime != nil {
                map["StartConnectTime"] = self.startConnectTime!
            }
            if self.userDesktopId != nil {
                map["UserDesktopId"] = self.userDesktopId!
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndConnectTime"] as? String {
                self.endConnectTime = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
            if let value = dict["StartConnectTime"] as? String {
                self.startConnectTime = value
            }
            if let value = dict["UserDesktopId"] as? String {
                self.userDesktopId = value
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var count: Int32?

    public var data: [DescribeUserConnectTimeResponseBody.Data]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int32 {
            self.count = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeUserConnectTimeResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserConnectTimeResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserConnectTimeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserConnectTimeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserConnectTimeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserConnectionRecordsRequest : Tea.TeaModel {
    public var connectDurationFrom: Int64?

    public var connectDurationTo: Int64?

    public var connectEndTimeFrom: Int64?

    public var connectEndTimeTo: Int64?

    public var connectStartTimeFrom: Int64?

    public var connectStartTimeTo: Int64?

    public var desktopGroupId: String?

    public var desktopId: String?

    public var endUserId: String?

    public var endUserType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectDurationFrom != nil {
            map["ConnectDurationFrom"] = self.connectDurationFrom!
        }
        if self.connectDurationTo != nil {
            map["ConnectDurationTo"] = self.connectDurationTo!
        }
        if self.connectEndTimeFrom != nil {
            map["ConnectEndTimeFrom"] = self.connectEndTimeFrom!
        }
        if self.connectEndTimeTo != nil {
            map["ConnectEndTimeTo"] = self.connectEndTimeTo!
        }
        if self.connectStartTimeFrom != nil {
            map["ConnectStartTimeFrom"] = self.connectStartTimeFrom!
        }
        if self.connectStartTimeTo != nil {
            map["ConnectStartTimeTo"] = self.connectStartTimeTo!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.endUserType != nil {
            map["EndUserType"] = self.endUserType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectDurationFrom"] as? Int64 {
            self.connectDurationFrom = value
        }
        if let value = dict["ConnectDurationTo"] as? Int64 {
            self.connectDurationTo = value
        }
        if let value = dict["ConnectEndTimeFrom"] as? Int64 {
            self.connectEndTimeFrom = value
        }
        if let value = dict["ConnectEndTimeTo"] as? Int64 {
            self.connectEndTimeTo = value
        }
        if let value = dict["ConnectStartTimeFrom"] as? Int64 {
            self.connectStartTimeFrom = value
        }
        if let value = dict["ConnectStartTimeTo"] as? Int64 {
            self.connectStartTimeTo = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["EndUserType"] as? String {
            self.endUserType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeUserConnectionRecordsResponseBody : Tea.TeaModel {
    public class ConnectionRecords : Tea.TeaModel {
        public var connectDuration: String?

        public var connectEndTime: String?

        public var connectStartTime: String?

        public var connectionRecordId: String?

        public var desktopId: String?

        public var desktopName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectDuration != nil {
                map["ConnectDuration"] = self.connectDuration!
            }
            if self.connectEndTime != nil {
                map["ConnectEndTime"] = self.connectEndTime!
            }
            if self.connectStartTime != nil {
                map["ConnectStartTime"] = self.connectStartTime!
            }
            if self.connectionRecordId != nil {
                map["ConnectionRecordId"] = self.connectionRecordId!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectDuration"] as? String {
                self.connectDuration = value
            }
            if let value = dict["ConnectEndTime"] as? String {
                self.connectEndTime = value
            }
            if let value = dict["ConnectStartTime"] as? String {
                self.connectStartTime = value
            }
            if let value = dict["ConnectionRecordId"] as? String {
                self.connectionRecordId = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
        }
    }
    public var connectionRecords: [DescribeUserConnectionRecordsResponseBody.ConnectionRecords]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectionRecords != nil {
            var tmp : [Any] = []
            for k in self.connectionRecords! {
                tmp.append(k.toMap())
            }
            map["ConnectionRecords"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectionRecords"] as? [Any?] {
            var tmp : [DescribeUserConnectionRecordsResponseBody.ConnectionRecords] = []
            for v in value {
                if v != nil {
                    var model = DescribeUserConnectionRecordsResponseBody.ConnectionRecords()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.connectionRecords = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUserConnectionRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserConnectionRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserConnectionRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUserProfilePathRulesRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var regionId: String?

    public var ruleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.ruleType != nil {
            map["RuleType"] = self.ruleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RuleType"] as? String {
            self.ruleType = value
        }
    }
}

public class DescribeUserProfilePathRulesResponseBody : Tea.TeaModel {
    public class UserProfilePathRule : Tea.TeaModel {
        public class Rules : Tea.TeaModel {
            public class BlackPath : Tea.TeaModel {
                public var path: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.path != nil {
                        map["Path"] = self.path!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Path"] as? String {
                        self.path = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class WhitePaths : Tea.TeaModel {
                public var path: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.path != nil {
                        map["Path"] = self.path!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Path"] as? String {
                        self.path = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var blackPath: DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules.BlackPath?

            public var whitePaths: [DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules.WhitePaths]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.blackPath?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.blackPath != nil {
                    map["BlackPath"] = self.blackPath?.toMap()
                }
                if self.whitePaths != nil {
                    var tmp : [Any] = []
                    for k in self.whitePaths! {
                        tmp.append(k.toMap())
                    }
                    map["WhitePaths"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BlackPath"] as? [String: Any?] {
                    var model = DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules.BlackPath()
                    model.fromMap(value)
                    self.blackPath = model
                }
                if let value = dict["WhitePaths"] as? [Any?] {
                    var tmp : [DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules.WhitePaths] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules.WhitePaths()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.whitePaths = tmp
                }
            }
        }
        public var desktopGroupId: String?

        public var rules: [DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules]?

        public var userProfileRuleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.userProfileRuleType != nil {
                map["UserProfileRuleType"] = self.userProfileRuleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules] = []
                for v in value {
                    if v != nil {
                        var model = DescribeUserProfilePathRulesResponseBody.UserProfilePathRule.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["UserProfileRuleType"] as? String {
                self.userProfileRuleType = value
            }
        }
    }
    public var requestId: String?

    public var userProfilePathRule: DescribeUserProfilePathRulesResponseBody.UserProfilePathRule?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userProfilePathRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userProfilePathRule != nil {
            map["UserProfilePathRule"] = self.userProfilePathRule?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserProfilePathRule"] as? [String: Any?] {
            var model = DescribeUserProfilePathRulesResponseBody.UserProfilePathRule()
            model.fromMap(value)
            self.userProfilePathRule = model
        }
    }
}

public class DescribeUserProfilePathRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUserProfilePathRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUserProfilePathRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUsersInGroupRequest : Tea.TeaModel {
    public var connectState: Int32?

    public var desktopGroupId: String?

    public var endUserId: String?

    public var endUserIds: [String]?

    public var filter: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orgId: String?

    public var queryUserDetail: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectState != nil {
            map["ConnectState"] = self.connectState!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.endUserIds != nil {
            map["EndUserIds"] = self.endUserIds!
        }
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.orgId != nil {
            map["OrgId"] = self.orgId!
        }
        if self.queryUserDetail != nil {
            map["QueryUserDetail"] = self.queryUserDetail!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectState"] as? Int32 {
            self.connectState = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["EndUserIds"] as? [String] {
            self.endUserIds = value
        }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OrgId"] as? String {
            self.orgId = value
        }
        if let value = dict["QueryUserDetail"] as? Bool {
            self.queryUserDetail = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeUsersInGroupResponseBody : Tea.TeaModel {
    public class EndUsers : Tea.TeaModel {
        public class ExternalInfo : Tea.TeaModel {
            public var externalName: String?

            public var jobNumber: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.externalName != nil {
                    map["ExternalName"] = self.externalName!
                }
                if self.jobNumber != nil {
                    map["JobNumber"] = self.jobNumber!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ExternalName"] as? String {
                    self.externalName = value
                }
                if let value = dict["JobNumber"] as? String {
                    self.jobNumber = value
                }
            }
        }
        public class UserSetPropertiesModels : Tea.TeaModel {
            public class PropertyValues : Tea.TeaModel {
                public var propertyValue: String?

                public var propertyValueId: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.propertyValue != nil {
                        map["PropertyValue"] = self.propertyValue!
                    }
                    if self.propertyValueId != nil {
                        map["PropertyValueId"] = self.propertyValueId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PropertyValue"] as? String {
                        self.propertyValue = value
                    }
                    if let value = dict["PropertyValueId"] as? Int64 {
                        self.propertyValueId = value
                    }
                }
            }
            public var propertyId: Int64?

            public var propertyKey: String?

            public var propertyType: Int32?

            public var propertyValues: [DescribeUsersInGroupResponseBody.EndUsers.UserSetPropertiesModels.PropertyValues]?

            public var userId: Int64?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.propertyId != nil {
                    map["PropertyId"] = self.propertyId!
                }
                if self.propertyKey != nil {
                    map["PropertyKey"] = self.propertyKey!
                }
                if self.propertyType != nil {
                    map["PropertyType"] = self.propertyType!
                }
                if self.propertyValues != nil {
                    var tmp : [Any] = []
                    for k in self.propertyValues! {
                        tmp.append(k.toMap())
                    }
                    map["PropertyValues"] = tmp
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PropertyId"] as? Int64 {
                    self.propertyId = value
                }
                if let value = dict["PropertyKey"] as? String {
                    self.propertyKey = value
                }
                if let value = dict["PropertyType"] as? Int32 {
                    self.propertyType = value
                }
                if let value = dict["PropertyValues"] as? [Any?] {
                    var tmp : [DescribeUsersInGroupResponseBody.EndUsers.UserSetPropertiesModels.PropertyValues] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeUsersInGroupResponseBody.EndUsers.UserSetPropertiesModels.PropertyValues()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.propertyValues = tmp
                }
                if let value = dict["UserId"] as? Int64 {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
            }
        }
        public var connectionStatus: String?

        public var desktopId: String?

        public var desktopName: String?

        public var displayName: String?

        public var displayNameNew: String?

        public var endUserEmail: String?

        public var endUserId: String?

        public var endUserName: String?

        public var endUserPhone: String?

        public var endUserRemark: String?

        public var endUserType: String?

        public var externalInfo: DescribeUsersInGroupResponseBody.EndUsers.ExternalInfo?

        public var userDesktopId: String?

        public var userPrincipalName: String?

        public var userSetPropertiesModels: [DescribeUsersInGroupResponseBody.EndUsers.UserSetPropertiesModels]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.externalInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectionStatus != nil {
                map["ConnectionStatus"] = self.connectionStatus!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.desktopName != nil {
                map["DesktopName"] = self.desktopName!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayNameNew != nil {
                map["DisplayNameNew"] = self.displayNameNew!
            }
            if self.endUserEmail != nil {
                map["EndUserEmail"] = self.endUserEmail!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.endUserName != nil {
                map["EndUserName"] = self.endUserName!
            }
            if self.endUserPhone != nil {
                map["EndUserPhone"] = self.endUserPhone!
            }
            if self.endUserRemark != nil {
                map["EndUserRemark"] = self.endUserRemark!
            }
            if self.endUserType != nil {
                map["EndUserType"] = self.endUserType!
            }
            if self.externalInfo != nil {
                map["ExternalInfo"] = self.externalInfo?.toMap()
            }
            if self.userDesktopId != nil {
                map["UserDesktopId"] = self.userDesktopId!
            }
            if self.userPrincipalName != nil {
                map["UserPrincipalName"] = self.userPrincipalName!
            }
            if self.userSetPropertiesModels != nil {
                var tmp : [Any] = []
                for k in self.userSetPropertiesModels! {
                    tmp.append(k.toMap())
                }
                map["UserSetPropertiesModels"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectionStatus"] as? String {
                self.connectionStatus = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["DesktopName"] as? String {
                self.desktopName = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayNameNew"] as? String {
                self.displayNameNew = value
            }
            if let value = dict["EndUserEmail"] as? String {
                self.endUserEmail = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["EndUserName"] as? String {
                self.endUserName = value
            }
            if let value = dict["EndUserPhone"] as? String {
                self.endUserPhone = value
            }
            if let value = dict["EndUserRemark"] as? String {
                self.endUserRemark = value
            }
            if let value = dict["EndUserType"] as? String {
                self.endUserType = value
            }
            if let value = dict["ExternalInfo"] as? [String: Any?] {
                var model = DescribeUsersInGroupResponseBody.EndUsers.ExternalInfo()
                model.fromMap(value)
                self.externalInfo = model
            }
            if let value = dict["UserDesktopId"] as? String {
                self.userDesktopId = value
            }
            if let value = dict["UserPrincipalName"] as? String {
                self.userPrincipalName = value
            }
            if let value = dict["UserSetPropertiesModels"] as? [Any?] {
                var tmp : [DescribeUsersInGroupResponseBody.EndUsers.UserSetPropertiesModels] = []
                for v in value {
                    if v != nil {
                        var model = DescribeUsersInGroupResponseBody.EndUsers.UserSetPropertiesModels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userSetPropertiesModels = tmp
            }
        }
    }
    public var endUsers: [DescribeUsersInGroupResponseBody.EndUsers]?

    public var nextToken: String?

    public var onlineUsersCount: Int32?

    public var requestId: String?

    public var userGroupName: String?

    public var userOuPath: String?

    public var usersCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endUsers != nil {
            var tmp : [Any] = []
            for k in self.endUsers! {
                tmp.append(k.toMap())
            }
            map["EndUsers"] = tmp
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.onlineUsersCount != nil {
            map["OnlineUsersCount"] = self.onlineUsersCount!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userGroupName != nil {
            map["UserGroupName"] = self.userGroupName!
        }
        if self.userOuPath != nil {
            map["UserOuPath"] = self.userOuPath!
        }
        if self.usersCount != nil {
            map["UsersCount"] = self.usersCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndUsers"] as? [Any?] {
            var tmp : [DescribeUsersInGroupResponseBody.EndUsers] = []
            for v in value {
                if v != nil {
                    var model = DescribeUsersInGroupResponseBody.EndUsers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.endUsers = tmp
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OnlineUsersCount"] as? Int32 {
            self.onlineUsersCount = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserGroupName"] as? String {
            self.userGroupName = value
        }
        if let value = dict["UserOuPath"] as? String {
            self.userOuPath = value
        }
        if let value = dict["UsersCount"] as? Int32 {
            self.usersCount = value
        }
    }
}

public class DescribeUsersInGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUsersInGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUsersInGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUsersPasswordRequest : Tea.TeaModel {
    public var desktopId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeUsersPasswordResponseBody : Tea.TeaModel {
    public class DesktopUsers : Tea.TeaModel {
        public var displayName: String?

        public var endUserId: String?

        public var password: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.password != nil {
                map["Password"] = self.password!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["Password"] as? String {
                self.password = value
            }
        }
    }
    public var desktopUsers: [DescribeUsersPasswordResponseBody.DesktopUsers]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopUsers != nil {
            var tmp : [Any] = []
            for k in self.desktopUsers! {
                tmp.append(k.toMap())
            }
            map["DesktopUsers"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopUsers"] as? [Any?] {
            var tmp : [DescribeUsersPasswordResponseBody.DesktopUsers] = []
            for v in value {
                if v != nil {
                    var model = DescribeUsersPasswordResponseBody.DesktopUsers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopUsers = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUsersPasswordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUsersPasswordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUsersPasswordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVirtualMFADevicesRequest : Tea.TeaModel {
    public var endUserId: [String]?

    public var filter: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DescribeVirtualMFADevicesResponseBody : Tea.TeaModel {
    public class VirtualMFADevices : Tea.TeaModel {
        public class AdUser : Tea.TeaModel {
            public var displayName: String?

            public var displayNameNew: String?

            public var endUser: String?

            public var userPrincipalName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.displayNameNew != nil {
                    map["DisplayNameNew"] = self.displayNameNew!
                }
                if self.endUser != nil {
                    map["EndUser"] = self.endUser!
                }
                if self.userPrincipalName != nil {
                    map["UserPrincipalName"] = self.userPrincipalName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["DisplayNameNew"] as? String {
                    self.displayNameNew = value
                }
                if let value = dict["EndUser"] as? String {
                    self.endUser = value
                }
                if let value = dict["UserPrincipalName"] as? String {
                    self.userPrincipalName = value
                }
            }
        }
        public var adUser: DescribeVirtualMFADevicesResponseBody.VirtualMFADevices.AdUser?

        public var consecutiveFails: Int32?

        public var directoryId: String?

        public var endUserId: String?

        public var gmtEnabled: String?

        public var gmtUnlock: String?

        public var officeSiteId: String?

        public var serialNumber: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.adUser?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adUser != nil {
                map["AdUser"] = self.adUser?.toMap()
            }
            if self.consecutiveFails != nil {
                map["ConsecutiveFails"] = self.consecutiveFails!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            if self.gmtEnabled != nil {
                map["GmtEnabled"] = self.gmtEnabled!
            }
            if self.gmtUnlock != nil {
                map["GmtUnlock"] = self.gmtUnlock!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.status != nil {
                map["status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdUser"] as? [String: Any?] {
                var model = DescribeVirtualMFADevicesResponseBody.VirtualMFADevices.AdUser()
                model.fromMap(value)
                self.adUser = model
            }
            if let value = dict["ConsecutiveFails"] as? Int32 {
                self.consecutiveFails = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
            if let value = dict["GmtEnabled"] as? String {
                self.gmtEnabled = value
            }
            if let value = dict["GmtUnlock"] as? String {
                self.gmtUnlock = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["status"] as? String {
                self.status = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var virtualMFADevices: [DescribeVirtualMFADevicesResponseBody.VirtualMFADevices]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.virtualMFADevices != nil {
            var tmp : [Any] = []
            for k in self.virtualMFADevices! {
                tmp.append(k.toMap())
            }
            map["VirtualMFADevices"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VirtualMFADevices"] as? [Any?] {
            var tmp : [DescribeVirtualMFADevicesResponseBody.VirtualMFADevices] = []
            for v in value {
                if v != nil {
                    var model = DescribeVirtualMFADevicesResponseBody.VirtualMFADevices()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.virtualMFADevices = tmp
        }
    }
}

public class DescribeVirtualMFADevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVirtualMFADevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVirtualMFADevicesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeZonesRequest : Tea.TeaModel {
    public var regionId: String?

    public var zoneType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.zoneType != nil {
            map["ZoneType"] = self.zoneType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ZoneType"] as? String {
            self.zoneType = value
        }
    }
}

public class DescribeZonesResponseBody : Tea.TeaModel {
    public class Zones : Tea.TeaModel {
        public var zoneId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.zoneId != nil {
                map["ZoneId"] = self.zoneId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ZoneId"] as? String {
                self.zoneId = value
            }
        }
    }
    public var requestId: String?

    public var zones: [DescribeZonesResponseBody.Zones]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.zones != nil {
            var tmp : [Any] = []
            for k in self.zones! {
                tmp.append(k.toMap())
            }
            map["Zones"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Zones"] as? [Any?] {
            var tmp : [DescribeZonesResponseBody.Zones] = []
            for v in value {
                if v != nil {
                    var model = DescribeZonesResponseBody.Zones()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.zones = tmp
        }
    }
}

public class DescribeZonesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeZonesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeZonesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachCenRequest : Tea.TeaModel {
    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DetachCenResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachCenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachCenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachCenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachEndUserRequest : Tea.TeaModel {
    public var adDomain: String?

    public var clientType: String?

    public var deviceId: String?

    public var directoryId: String?

    public var endUserId: String?

    public var region: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adDomain != nil {
            map["AdDomain"] = self.adDomain!
        }
        if self.clientType != nil {
            map["ClientType"] = self.clientType!
        }
        if self.deviceId != nil {
            map["DeviceId"] = self.deviceId!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdDomain"] as? String {
            self.adDomain = value
        }
        if let value = dict["ClientType"] as? String {
            self.clientType = value
        }
        if let value = dict["DeviceId"] as? String {
            self.deviceId = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
    }
}

public class DetachEndUserResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachEndUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachEndUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachEndUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableDesktopsInGroupRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var desktopIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopIds != nil {
            map["DesktopIds"] = self.desktopIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopIds"] as? [String] {
            self.desktopIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DisableDesktopsInGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisableDesktopsInGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableDesktopsInGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableDesktopsInGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisconnectDesktopSessionsRequest : Tea.TeaModel {
    public class Sessions : Tea.TeaModel {
        public var desktopId: String?

        public var endUserId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
        }
    }
    public var preCheck: Bool?

    public var regionId: String?

    public var sessions: [DisconnectDesktopSessionsRequest.Sessions]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.preCheck != nil {
            map["PreCheck"] = self.preCheck!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sessions != nil {
            var tmp : [Any] = []
            for k in self.sessions! {
                tmp.append(k.toMap())
            }
            map["Sessions"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PreCheck"] as? Bool {
            self.preCheck = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Sessions"] as? [Any?] {
            var tmp : [DisconnectDesktopSessionsRequest.Sessions] = []
            for v in value {
                if v != nil {
                    var model = DisconnectDesktopSessionsRequest.Sessions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sessions = tmp
        }
    }
}

public class DisconnectDesktopSessionsResponseBody : Tea.TeaModel {
    public class InvalidSessions : Tea.TeaModel {
        public var desktopId: String?

        public var endUserId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.endUserId != nil {
                map["EndUserId"] = self.endUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["EndUserId"] as? String {
                self.endUserId = value
            }
        }
    }
    public var invalidSessions: [DisconnectDesktopSessionsResponseBody.InvalidSessions]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.invalidSessions != nil {
            var tmp : [Any] = []
            for k in self.invalidSessions! {
                tmp.append(k.toMap())
            }
            map["InvalidSessions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InvalidSessions"] as? [Any?] {
            var tmp : [DisconnectDesktopSessionsResponseBody.InvalidSessions] = []
            for v in value {
                if v != nil {
                    var model = DisconnectDesktopSessionsResponseBody.InvalidSessions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.invalidSessions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisconnectDesktopSessionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisconnectDesktopSessionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisconnectDesktopSessionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DissociateIpAddressRequest : Tea.TeaModel {
    public var eipId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eipId != nil {
            map["EipId"] = self.eipId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EipId"] as? String {
            self.eipId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DissociateIpAddressResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DissociateIpAddressResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DissociateIpAddressResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DissociateIpAddressResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DissociateNetworkPackageRequest : Tea.TeaModel {
    public var networkPackageId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NetworkPackageId"] as? String {
            self.networkPackageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DissociateNetworkPackageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DissociateNetworkPackageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DissociateNetworkPackageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DissociateNetworkPackageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DownloadCdsFileRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DownloadCdsFileResponseBody : Tea.TeaModel {
    public class DownloadFileModel : Tea.TeaModel {
        public var downloadType: String?

        public var downloadUrl: String?

        public var expirationSecond: String?

        public var expirationTime: String?

        public var fileId: String?

        public var size: Int64?

        public var streamUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downloadType != nil {
                map["DownloadType"] = self.downloadType!
            }
            if self.downloadUrl != nil {
                map["DownloadUrl"] = self.downloadUrl!
            }
            if self.expirationSecond != nil {
                map["ExpirationSecond"] = self.expirationSecond!
            }
            if self.expirationTime != nil {
                map["ExpirationTime"] = self.expirationTime!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.streamUrl != nil {
                map["StreamUrl"] = self.streamUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownloadType"] as? String {
                self.downloadType = value
            }
            if let value = dict["DownloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["ExpirationSecond"] as? String {
                self.expirationSecond = value
            }
            if let value = dict["ExpirationTime"] as? String {
                self.expirationTime = value
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StreamUrl"] as? String {
                self.streamUrl = value
            }
        }
    }
    public var downloadFileModel: DownloadCdsFileResponseBody.DownloadFileModel?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.downloadFileModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downloadFileModel != nil {
            map["DownloadFileModel"] = self.downloadFileModel?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownloadFileModel"] as? [String: Any?] {
            var model = DownloadCdsFileResponseBody.DownloadFileModel()
            model.fromMap(value)
            self.downloadFileModel = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DownloadCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DownloadCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DownloadCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportClientEventsRequest : Tea.TeaModel {
    public var desktopId: String?

    public var desktopName: String?

    public var endTime: String?

    public var endUserId: String?

    public var eventType: String?

    public var eventTypes: [String]?

    public var langType: String?

    public var maxResults: Int32?

    public var officeSiteId: String?

    public var officeSiteName: String?

    public var regionId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.eventTypes != nil {
            map["EventTypes"] = self.eventTypes!
        }
        if self.langType != nil {
            map["LangType"] = self.langType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["EventTypes"] as? [String] {
            self.eventTypes = value
        }
        if let value = dict["LangType"] as? String {
            self.langType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class ExportClientEventsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class ExportClientEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportClientEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportClientEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportDesktopGroupInfoRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var chargeType: String?

    public var desktopGroupId: [String]?

    public var desktopGroupName: String?

    public var endUserId: [String]?

    public var expiredTime: String?

    public var langType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var policyGroupId: String?

    public var regionId: String?

    public var tag: [ExportDesktopGroupInfoRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupName != nil {
            map["DesktopGroupName"] = self.desktopGroupName!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.langType != nil {
            map["LangType"] = self.langType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DesktopGroupId"] as? [String] {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupName"] as? String {
            self.desktopGroupName = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["ExpiredTime"] as? String {
            self.expiredTime = value
        }
        if let value = dict["LangType"] as? String {
            self.langType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ExportDesktopGroupInfoRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ExportDesktopGroupInfoRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ExportDesktopGroupInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class ExportDesktopGroupInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportDesktopGroupInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportDesktopGroupInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportDesktopListInfoRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var chargeType: String?

    public var desktopId: [String]?

    public var desktopName: String?

    public var desktopStatus: String?

    public var endUserId: [String]?

    public var expiredTime: String?

    public var groupId: String?

    public var langType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var policyGroupId: String?

    public var regionId: String?

    public var tag: [ExportDesktopListInfoRequest.Tag]?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopName != nil {
            map["DesktopName"] = self.desktopName!
        }
        if self.desktopStatus != nil {
            map["DesktopStatus"] = self.desktopStatus!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.langType != nil {
            map["LangType"] = self.langType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["DesktopName"] as? String {
            self.desktopName = value
        }
        if let value = dict["DesktopStatus"] as? String {
            self.desktopStatus = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["ExpiredTime"] as? String {
            self.expiredTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["LangType"] as? String {
            self.langType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ExportDesktopListInfoRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ExportDesktopListInfoRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["UserName"] as? String {
            self.userName = value
        }
    }
}

public class ExportDesktopListInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class ExportDesktopListInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportDesktopListInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportDesktopListInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAsyncTaskRequest : Tea.TeaModel {
    public var asyncTaskId: String?

    public var cdsId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.asyncTaskId != nil {
            map["AsyncTaskId"] = self.asyncTaskId!
        }
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AsyncTaskId"] as? String {
            self.asyncTaskId = value
        }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
    }
}

public class GetAsyncTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var asyncTaskId: String?

        public var consumedProcess: String?

        public var errCode: Int64?

        public var message: String?

        public var status: String?

        public var totalProcess: Int64?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncTaskId != nil {
                map["AsyncTaskId"] = self.asyncTaskId!
            }
            if self.consumedProcess != nil {
                map["ConsumedProcess"] = self.consumedProcess!
            }
            if self.errCode != nil {
                map["ErrCode"] = self.errCode!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalProcess != nil {
                map["TotalProcess"] = self.totalProcess!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsyncTaskId"] as? String {
                self.asyncTaskId = value
            }
            if let value = dict["ConsumedProcess"] as? String {
                self.consumedProcess = value
            }
            if let value = dict["ErrCode"] as? Int64 {
                self.errCode = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TotalProcess"] as? Int64 {
                self.totalProcess = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: GetAsyncTaskResponseBody.Data?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetAsyncTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class GetAsyncTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAsyncTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAsyncTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetConnectionTicketRequest : Tea.TeaModel {
    public var commandContent: String?

    public var desktopId: String?

    public var endUserId: String?

    public var ownerId: Int64?

    public var password: String?

    public var regionId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var taskId: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commandContent != nil {
            map["CommandContent"] = self.commandContent!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommandContent"] as? String {
            self.commandContent = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class GetConnectionTicketResponseBody : Tea.TeaModel {
    public var desktopId: String?

    public var requestId: String?

    public var taskCode: String?

    public var taskId: String?

    public var taskMessage: String?

    public var taskStatus: String?

    public var ticket: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskCode != nil {
            map["TaskCode"] = self.taskCode!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskMessage != nil {
            map["TaskMessage"] = self.taskMessage!
        }
        if self.taskStatus != nil {
            map["TaskStatus"] = self.taskStatus!
        }
        if self.ticket != nil {
            map["Ticket"] = self.ticket!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskCode"] as? String {
            self.taskCode = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskMessage"] as? String {
            self.taskMessage = value
        }
        if let value = dict["TaskStatus"] as? String {
            self.taskStatus = value
        }
        if let value = dict["Ticket"] as? String {
            self.ticket = value
        }
    }
}

public class GetConnectionTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetConnectionTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetConnectionTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCoordinateTicketRequest : Tea.TeaModel {
    public var coId: String?

    public var endUserId: String?

    public var regionId: String?

    public var taskId: String?

    public var userType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coId != nil {
            map["CoId"] = self.coId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoId"] as? String {
            self.coId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
    }
}

public class GetCoordinateTicketResponseBody : Tea.TeaModel {
    public var coId: String?

    public var requestId: String?

    public var taskId: String?

    public var taskStatus: String?

    public var ticket: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coId != nil {
            map["CoId"] = self.coId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskStatus != nil {
            map["TaskStatus"] = self.taskStatus!
        }
        if self.ticket != nil {
            map["Ticket"] = self.ticket!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoId"] as? String {
            self.coId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TaskStatus"] as? String {
            self.taskStatus = value
        }
        if let value = dict["Ticket"] as? String {
            self.ticket = value
        }
    }
}

public class GetCoordinateTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCoordinateTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCoordinateTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDesktopGroupDetailRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetDesktopGroupDetailResponseBody : Tea.TeaModel {
    public class Desktops : Tea.TeaModel {
        public class ScaleTimerInfos : Tea.TeaModel {
            public var buyResAmount: Int32?

            public var cron: String?

            public var keepDuration: Int64?

            public var loadPolicy: Int32?

            public var maxResAmount: Int32?

            public var minResAmount: Int32?

            public var ratioThreshold: Double?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.buyResAmount != nil {
                    map["BuyResAmount"] = self.buyResAmount!
                }
                if self.cron != nil {
                    map["Cron"] = self.cron!
                }
                if self.keepDuration != nil {
                    map["KeepDuration"] = self.keepDuration!
                }
                if self.loadPolicy != nil {
                    map["LoadPolicy"] = self.loadPolicy!
                }
                if self.maxResAmount != nil {
                    map["MaxResAmount"] = self.maxResAmount!
                }
                if self.minResAmount != nil {
                    map["MinResAmount"] = self.minResAmount!
                }
                if self.ratioThreshold != nil {
                    map["RatioThreshold"] = self.ratioThreshold!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BuyResAmount"] as? Int32 {
                    self.buyResAmount = value
                }
                if let value = dict["Cron"] as? String {
                    self.cron = value
                }
                if let value = dict["KeepDuration"] as? Int64 {
                    self.keepDuration = value
                }
                if let value = dict["LoadPolicy"] as? Int32 {
                    self.loadPolicy = value
                }
                if let value = dict["MaxResAmount"] as? Int32 {
                    self.maxResAmount = value
                }
                if let value = dict["MinResAmount"] as? Int32 {
                    self.minResAmount = value
                }
                if let value = dict["RatioThreshold"] as? Double {
                    self.ratioThreshold = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class TimerInfos : Tea.TeaModel {
            public var cronExpression: String?

            public var forced: Bool?

            public var status: Int32?

            public var timerType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cronExpression != nil {
                    map["CronExpression"] = self.cronExpression!
                }
                if self.forced != nil {
                    map["Forced"] = self.forced!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.timerType != nil {
                    map["TimerType"] = self.timerType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CronExpression"] as? String {
                    self.cronExpression = value
                }
                if let value = dict["Forced"] as? Bool {
                    self.forced = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TimerType"] as? Int32 {
                    self.timerType = value
                }
            }
        }
        public var allowAutoSetup: Int32?

        public var allowBufferCount: Int32?

        public var bindAmount: Int32?

        public var buyDesktopsCount: Int32?

        public var comments: String?

        public var connectDuration: Int64?

        public var cpu: Int32?

        public var creationTime: String?

        public var creator: String?

        public var dataDiskCategory: String?

        public var dataDiskSize: String?

        public var desktopGroupId: String?

        public var desktopGroupName: String?

        public var directoryId: String?

        public var directoryType: String?

        public var expiredTime: String?

        public var expiredTimes: [String]?

        public var gpuCount: Double?

        public var gpuSpec: String?

        public var idleDisconnectDuration: Int64?

        public var imageId: String?

        public var keepDuration: Int64?

        public var loadPolicy: Int32?

        public var maxDesktopsCount: Int32?

        public var memory: Int64?

        public var minDesktopsCount: Int32?

        public var nasFileSystemID: String?

        public var nasFileSystemName: String?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSiteType: String?

        public var osType: String?

        public var ownBundleId: String?

        public var ownBundleName: String?

        public var ownType: Int32?

        public var payType: String?

        public var policyGroupId: String?

        public var policyGroupIds: [String]?

        public var policyGroupName: String?

        public var policyGroupNames: [String]?

        public var profileFollowSwitch: Bool?

        public var protocolType: String?

        public var ratioThreshold: Double?

        public var resType: Int32?

        public var resetType: Int32?

        public var scaleTimerInfos: [GetDesktopGroupDetailResponseBody.Desktops.ScaleTimerInfos]?

        public var status: Int32?

        public var stopDuration: Int64?

        public var systemDiskCategory: String?

        public var systemDiskSize: Int32?

        public var timerInfos: [GetDesktopGroupDetailResponseBody.Desktops.TimerInfos]?

        public var timingStrategyInfo: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowAutoSetup != nil {
                map["AllowAutoSetup"] = self.allowAutoSetup!
            }
            if self.allowBufferCount != nil {
                map["AllowBufferCount"] = self.allowBufferCount!
            }
            if self.bindAmount != nil {
                map["BindAmount"] = self.bindAmount!
            }
            if self.buyDesktopsCount != nil {
                map["BuyDesktopsCount"] = self.buyDesktopsCount!
            }
            if self.comments != nil {
                map["Comments"] = self.comments!
            }
            if self.connectDuration != nil {
                map["ConnectDuration"] = self.connectDuration!
            }
            if self.cpu != nil {
                map["Cpu"] = self.cpu!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.dataDiskCategory != nil {
                map["DataDiskCategory"] = self.dataDiskCategory!
            }
            if self.dataDiskSize != nil {
                map["DataDiskSize"] = self.dataDiskSize!
            }
            if self.desktopGroupId != nil {
                map["DesktopGroupId"] = self.desktopGroupId!
            }
            if self.desktopGroupName != nil {
                map["DesktopGroupName"] = self.desktopGroupName!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.directoryType != nil {
                map["DirectoryType"] = self.directoryType!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.expiredTimes != nil {
                map["ExpiredTimes"] = self.expiredTimes!
            }
            if self.gpuCount != nil {
                map["GpuCount"] = self.gpuCount!
            }
            if self.gpuSpec != nil {
                map["GpuSpec"] = self.gpuSpec!
            }
            if self.idleDisconnectDuration != nil {
                map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.keepDuration != nil {
                map["KeepDuration"] = self.keepDuration!
            }
            if self.loadPolicy != nil {
                map["LoadPolicy"] = self.loadPolicy!
            }
            if self.maxDesktopsCount != nil {
                map["MaxDesktopsCount"] = self.maxDesktopsCount!
            }
            if self.memory != nil {
                map["Memory"] = self.memory!
            }
            if self.minDesktopsCount != nil {
                map["MinDesktopsCount"] = self.minDesktopsCount!
            }
            if self.nasFileSystemID != nil {
                map["NasFileSystemID"] = self.nasFileSystemID!
            }
            if self.nasFileSystemName != nil {
                map["NasFileSystemName"] = self.nasFileSystemName!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSiteType != nil {
                map["OfficeSiteType"] = self.officeSiteType!
            }
            if self.osType != nil {
                map["OsType"] = self.osType!
            }
            if self.ownBundleId != nil {
                map["OwnBundleId"] = self.ownBundleId!
            }
            if self.ownBundleName != nil {
                map["OwnBundleName"] = self.ownBundleName!
            }
            if self.ownType != nil {
                map["OwnType"] = self.ownType!
            }
            if self.payType != nil {
                map["PayType"] = self.payType!
            }
            if self.policyGroupId != nil {
                map["PolicyGroupId"] = self.policyGroupId!
            }
            if self.policyGroupIds != nil {
                map["PolicyGroupIds"] = self.policyGroupIds!
            }
            if self.policyGroupName != nil {
                map["PolicyGroupName"] = self.policyGroupName!
            }
            if self.policyGroupNames != nil {
                map["PolicyGroupNames"] = self.policyGroupNames!
            }
            if self.profileFollowSwitch != nil {
                map["ProfileFollowSwitch"] = self.profileFollowSwitch!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.ratioThreshold != nil {
                map["RatioThreshold"] = self.ratioThreshold!
            }
            if self.resType != nil {
                map["ResType"] = self.resType!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.scaleTimerInfos != nil {
                var tmp : [Any] = []
                for k in self.scaleTimerInfos! {
                    tmp.append(k.toMap())
                }
                map["ScaleTimerInfos"] = tmp
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.stopDuration != nil {
                map["StopDuration"] = self.stopDuration!
            }
            if self.systemDiskCategory != nil {
                map["SystemDiskCategory"] = self.systemDiskCategory!
            }
            if self.systemDiskSize != nil {
                map["SystemDiskSize"] = self.systemDiskSize!
            }
            if self.timerInfos != nil {
                var tmp : [Any] = []
                for k in self.timerInfos! {
                    tmp.append(k.toMap())
                }
                map["TimerInfos"] = tmp
            }
            if self.timingStrategyInfo != nil {
                map["TimingStrategyInfo"] = self.timingStrategyInfo!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowAutoSetup"] as? Int32 {
                self.allowAutoSetup = value
            }
            if let value = dict["AllowBufferCount"] as? Int32 {
                self.allowBufferCount = value
            }
            if let value = dict["BindAmount"] as? Int32 {
                self.bindAmount = value
            }
            if let value = dict["BuyDesktopsCount"] as? Int32 {
                self.buyDesktopsCount = value
            }
            if let value = dict["Comments"] as? String {
                self.comments = value
            }
            if let value = dict["ConnectDuration"] as? Int64 {
                self.connectDuration = value
            }
            if let value = dict["Cpu"] as? Int32 {
                self.cpu = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["DataDiskCategory"] as? String {
                self.dataDiskCategory = value
            }
            if let value = dict["DataDiskSize"] as? String {
                self.dataDiskSize = value
            }
            if let value = dict["DesktopGroupId"] as? String {
                self.desktopGroupId = value
            }
            if let value = dict["DesktopGroupName"] as? String {
                self.desktopGroupName = value
            }
            if let value = dict["DirectoryId"] as? String {
                self.directoryId = value
            }
            if let value = dict["DirectoryType"] as? String {
                self.directoryType = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["ExpiredTimes"] as? [String] {
                self.expiredTimes = value
            }
            if let value = dict["GpuCount"] as? Double {
                self.gpuCount = value
            }
            if let value = dict["GpuSpec"] as? String {
                self.gpuSpec = value
            }
            if let value = dict["IdleDisconnectDuration"] as? Int64 {
                self.idleDisconnectDuration = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["KeepDuration"] as? Int64 {
                self.keepDuration = value
            }
            if let value = dict["LoadPolicy"] as? Int32 {
                self.loadPolicy = value
            }
            if let value = dict["MaxDesktopsCount"] as? Int32 {
                self.maxDesktopsCount = value
            }
            if let value = dict["Memory"] as? Int64 {
                self.memory = value
            }
            if let value = dict["MinDesktopsCount"] as? Int32 {
                self.minDesktopsCount = value
            }
            if let value = dict["NasFileSystemID"] as? String {
                self.nasFileSystemID = value
            }
            if let value = dict["NasFileSystemName"] as? String {
                self.nasFileSystemName = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSiteType"] as? String {
                self.officeSiteType = value
            }
            if let value = dict["OsType"] as? String {
                self.osType = value
            }
            if let value = dict["OwnBundleId"] as? String {
                self.ownBundleId = value
            }
            if let value = dict["OwnBundleName"] as? String {
                self.ownBundleName = value
            }
            if let value = dict["OwnType"] as? Int32 {
                self.ownType = value
            }
            if let value = dict["PayType"] as? String {
                self.payType = value
            }
            if let value = dict["PolicyGroupId"] as? String {
                self.policyGroupId = value
            }
            if let value = dict["PolicyGroupIds"] as? [String] {
                self.policyGroupIds = value
            }
            if let value = dict["PolicyGroupName"] as? String {
                self.policyGroupName = value
            }
            if let value = dict["PolicyGroupNames"] as? [String] {
                self.policyGroupNames = value
            }
            if let value = dict["ProfileFollowSwitch"] as? Bool {
                self.profileFollowSwitch = value
            }
            if let value = dict["ProtocolType"] as? String {
                self.protocolType = value
            }
            if let value = dict["RatioThreshold"] as? Double {
                self.ratioThreshold = value
            }
            if let value = dict["ResType"] as? Int32 {
                self.resType = value
            }
            if let value = dict["ResetType"] as? Int32 {
                self.resetType = value
            }
            if let value = dict["ScaleTimerInfos"] as? [Any?] {
                var tmp : [GetDesktopGroupDetailResponseBody.Desktops.ScaleTimerInfos] = []
                for v in value {
                    if v != nil {
                        var model = GetDesktopGroupDetailResponseBody.Desktops.ScaleTimerInfos()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.scaleTimerInfos = tmp
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["StopDuration"] as? Int64 {
                self.stopDuration = value
            }
            if let value = dict["SystemDiskCategory"] as? String {
                self.systemDiskCategory = value
            }
            if let value = dict["SystemDiskSize"] as? Int32 {
                self.systemDiskSize = value
            }
            if let value = dict["TimerInfos"] as? [Any?] {
                var tmp : [GetDesktopGroupDetailResponseBody.Desktops.TimerInfos] = []
                for v in value {
                    if v != nil {
                        var model = GetDesktopGroupDetailResponseBody.Desktops.TimerInfos()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.timerInfos = tmp
            }
            if let value = dict["TimingStrategyInfo"] as? String {
                self.timingStrategyInfo = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var desktops: GetDesktopGroupDetailResponseBody.Desktops?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.desktops?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktops != nil {
            map["Desktops"] = self.desktops?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Desktops"] as? [String: Any?] {
            var model = GetDesktopGroupDetailResponseBody.Desktops()
            model.fromMap(value)
            self.desktops = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDesktopGroupDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDesktopGroupDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDesktopGroupDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOfficeSiteSsoStatusRequest : Tea.TeaModel {
    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetOfficeSiteSsoStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var ssoStatus: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.ssoStatus != nil {
            map["SsoStatus"] = self.ssoStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SsoStatus"] as? Bool {
            self.ssoStatus = value
        }
    }
}

public class GetOfficeSiteSsoStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOfficeSiteSsoStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOfficeSiteSsoStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSpMetadataRequest : Tea.TeaModel {
    public var directoryId: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class GetSpMetadataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var spMetadata: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.spMetadata != nil {
            map["SpMetadata"] = self.spMetadata!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SpMetadata"] as? String {
            self.spMetadata = value
        }
    }
}

public class GetSpMetadataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSpMetadataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSpMetadataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class HibernateDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class HibernateDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class HibernateDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: HibernateDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = HibernateDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCdsFilesRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileIds: [String]?

    public var groupId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orderType: String?

    public var parentFileId: String?

    public var regionId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.parentFileId != nil {
            map["ParentFileId"] = self.parentFileId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileIds"] as? [String] {
            self.fileIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["ParentFileId"] as? String {
            self.parentFileId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListCdsFilesShrinkRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileIdsShrink: String?

    public var groupId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orderType: String?

    public var parentFileId: String?

    public var regionId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileIdsShrink != nil {
            map["FileIds"] = self.fileIdsShrink!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.parentFileId != nil {
            map["ParentFileId"] = self.parentFileId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileIds"] as? String {
            self.fileIdsShrink = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["ParentFileId"] as? String {
            self.parentFileId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListCdsFilesResponseBody : Tea.TeaModel {
    public class FileModels : Tea.TeaModel {
        public var category: String?

        public var contentType: String?

        public var createTime: String?

        public var creator: String?

        public var description_: String?

        public var downloadUrl: String?

        public var fileExtension: String?

        public var fileId: String?

        public var filePath: String?

        public var fileType: String?

        public var md5: String?

        public var modifiedTime: String?

        public var modifier: String?

        public var name: String?

        public var openTime: String?

        public var openTimeStamp: Int64?

        public var parentId: String?

        public var regionId: String?

        public var sha1: String?

        public var size: Int64?

        public var thumbnail: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.downloadUrl != nil {
                map["DownloadUrl"] = self.downloadUrl!
            }
            if self.fileExtension != nil {
                map["FileExtension"] = self.fileExtension!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.filePath != nil {
                map["FilePath"] = self.filePath!
            }
            if self.fileType != nil {
                map["FileType"] = self.fileType!
            }
            if self.md5 != nil {
                map["Md5"] = self.md5!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifier != nil {
                map["Modifier"] = self.modifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.openTime != nil {
                map["OpenTime"] = self.openTime!
            }
            if self.openTimeStamp != nil {
                map["OpenTimeStamp"] = self.openTimeStamp!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.sha1 != nil {
                map["Sha1"] = self.sha1!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.thumbnail != nil {
                map["Thumbnail"] = self.thumbnail!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DownloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["FileExtension"] as? String {
                self.fileExtension = value
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["FilePath"] as? String {
                self.filePath = value
            }
            if let value = dict["FileType"] as? String {
                self.fileType = value
            }
            if let value = dict["Md5"] as? String {
                self.md5 = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["Modifier"] as? String {
                self.modifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OpenTime"] as? String {
                self.openTime = value
            }
            if let value = dict["OpenTimeStamp"] as? Int64 {
                self.openTimeStamp = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Sha1"] as? String {
                self.sha1 = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Thumbnail"] as? String {
                self.thumbnail = value
            }
        }
    }
    public var code: String?

    public var count: String?

    public var fileModels: [ListCdsFilesResponseBody.FileModels]?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.fileModels != nil {
            var tmp : [Any] = []
            for k in self.fileModels! {
                tmp.append(k.toMap())
            }
            map["FileModels"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Count"] as? String {
            self.count = value
        }
        if let value = dict["FileModels"] as? [Any?] {
            var tmp : [ListCdsFilesResponseBody.FileModels] = []
            for v in value {
                if v != nil {
                    var model = ListCdsFilesResponseBody.FileModels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fileModels = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListCdsFilesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCdsFilesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCdsFilesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDirectoryUsersRequest : Tea.TeaModel {
    public var assignedInfo: String?

    public var directoryId: String?

    public var filter: String?

    public var includeAssignedUser: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var OUPath: String?

    public var regionId: String?

    public var sortType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assignedInfo != nil {
            map["AssignedInfo"] = self.assignedInfo!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.includeAssignedUser != nil {
            map["IncludeAssignedUser"] = self.includeAssignedUser!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.OUPath != nil {
            map["OUPath"] = self.OUPath!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sortType != nil {
            map["SortType"] = self.sortType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AssignedInfo"] as? String {
            self.assignedInfo = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["IncludeAssignedUser"] as? Bool {
            self.includeAssignedUser = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OUPath"] as? String {
            self.OUPath = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SortType"] as? String {
            self.sortType = value
        }
    }
}

public class ListDirectoryUsersResponseBody : Tea.TeaModel {
    public class Users : Tea.TeaModel {
        public var assignedDesktopNumber: Int32?

        public var displayName: String?

        public var displayNameNew: String?

        public var email: String?

        public var endUser: String?

        public var phone: String?

        public var userPrincipalName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assignedDesktopNumber != nil {
                map["AssignedDesktopNumber"] = self.assignedDesktopNumber!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayNameNew != nil {
                map["DisplayNameNew"] = self.displayNameNew!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.endUser != nil {
                map["EndUser"] = self.endUser!
            }
            if self.phone != nil {
                map["Phone"] = self.phone!
            }
            if self.userPrincipalName != nil {
                map["UserPrincipalName"] = self.userPrincipalName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssignedDesktopNumber"] as? Int32 {
                self.assignedDesktopNumber = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayNameNew"] as? String {
                self.displayNameNew = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["EndUser"] as? String {
                self.endUser = value
            }
            if let value = dict["Phone"] as? String {
                self.phone = value
            }
            if let value = dict["UserPrincipalName"] as? String {
                self.userPrincipalName = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var users: [ListDirectoryUsersResponseBody.Users]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.users != nil {
            var tmp : [Any] = []
            for k in self.users! {
                tmp.append(k.toMap())
            }
            map["Users"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Users"] as? [Any?] {
            var tmp : [ListDirectoryUsersResponseBody.Users] = []
            for v in value {
                if v != nil {
                    var model = ListDirectoryUsersResponseBody.Users()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.users = tmp
        }
    }
}

public class ListDirectoryUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDirectoryUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDirectoryUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListFilePermissionRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListFilePermissionResponseBody : Tea.TeaModel {
    public var filePermissions: [FilePermissionMember]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filePermissions != nil {
            var tmp : [Any] = []
            for k in self.filePermissions! {
                tmp.append(k.toMap())
            }
            map["FilePermissions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FilePermissions"] as? [Any?] {
            var tmp : [FilePermissionMember] = []
            for v in value {
                if v != nil {
                    var model = FilePermissionMember()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.filePermissions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListFilePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListFilePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListFilePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOfficeSiteOverviewRequest : Tea.TeaModel {
    public var forceRefresh: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: [String]?

    public var queryRange: Int32?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forceRefresh != nil {
            map["ForceRefresh"] = self.forceRefresh!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.queryRange != nil {
            map["QueryRange"] = self.queryRange!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForceRefresh"] as? Bool {
            self.forceRefresh = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? [String] {
            self.officeSiteId = value
        }
        if let value = dict["QueryRange"] as? Int32 {
            self.queryRange = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListOfficeSiteOverviewResponseBody : Tea.TeaModel {
    public class OfficeSiteOverviewResults : Tea.TeaModel {
        public var hasExpiredEdsCount: Int32?

        public var hasExpiredEdsCountForGroup: Int32?

        public var officeSiteId: String?

        public var officeSiteName: String?

        public var officeSiteStatus: String?

        public var regionId: String?

        public var runningEdsCount: Int32?

        public var runningEdsCountForGroup: Int32?

        public var totalEdsCount: Int32?

        public var totalEdsCountForGroup: Int32?

        public var vpcType: String?

        public var willExpiredEdsCount: Int32?

        public var willExpiredEdsCountForGroup: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hasExpiredEdsCount != nil {
                map["HasExpiredEdsCount"] = self.hasExpiredEdsCount!
            }
            if self.hasExpiredEdsCountForGroup != nil {
                map["HasExpiredEdsCountForGroup"] = self.hasExpiredEdsCountForGroup!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.officeSiteName != nil {
                map["OfficeSiteName"] = self.officeSiteName!
            }
            if self.officeSiteStatus != nil {
                map["OfficeSiteStatus"] = self.officeSiteStatus!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.runningEdsCount != nil {
                map["RunningEdsCount"] = self.runningEdsCount!
            }
            if self.runningEdsCountForGroup != nil {
                map["RunningEdsCountForGroup"] = self.runningEdsCountForGroup!
            }
            if self.totalEdsCount != nil {
                map["TotalEdsCount"] = self.totalEdsCount!
            }
            if self.totalEdsCountForGroup != nil {
                map["TotalEdsCountForGroup"] = self.totalEdsCountForGroup!
            }
            if self.vpcType != nil {
                map["VpcType"] = self.vpcType!
            }
            if self.willExpiredEdsCount != nil {
                map["WillExpiredEdsCount"] = self.willExpiredEdsCount!
            }
            if self.willExpiredEdsCountForGroup != nil {
                map["WillExpiredEdsCountForGroup"] = self.willExpiredEdsCountForGroup!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HasExpiredEdsCount"] as? Int32 {
                self.hasExpiredEdsCount = value
            }
            if let value = dict["HasExpiredEdsCountForGroup"] as? Int32 {
                self.hasExpiredEdsCountForGroup = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["OfficeSiteName"] as? String {
                self.officeSiteName = value
            }
            if let value = dict["OfficeSiteStatus"] as? String {
                self.officeSiteStatus = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["RunningEdsCount"] as? Int32 {
                self.runningEdsCount = value
            }
            if let value = dict["RunningEdsCountForGroup"] as? Int32 {
                self.runningEdsCountForGroup = value
            }
            if let value = dict["TotalEdsCount"] as? Int32 {
                self.totalEdsCount = value
            }
            if let value = dict["TotalEdsCountForGroup"] as? Int32 {
                self.totalEdsCountForGroup = value
            }
            if let value = dict["VpcType"] as? String {
                self.vpcType = value
            }
            if let value = dict["WillExpiredEdsCount"] as? Int32 {
                self.willExpiredEdsCount = value
            }
            if let value = dict["WillExpiredEdsCountForGroup"] as? Int32 {
                self.willExpiredEdsCountForGroup = value
            }
        }
    }
    public var nextToken: String?

    public var officeSiteOverviewResults: [ListOfficeSiteOverviewResponseBody.OfficeSiteOverviewResults]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteOverviewResults != nil {
            var tmp : [Any] = []
            for k in self.officeSiteOverviewResults! {
                tmp.append(k.toMap())
            }
            map["OfficeSiteOverviewResults"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteOverviewResults"] as? [Any?] {
            var tmp : [ListOfficeSiteOverviewResponseBody.OfficeSiteOverviewResults] = []
            for v in value {
                if v != nil {
                    var model = ListOfficeSiteOverviewResponseBody.OfficeSiteOverviewResults()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.officeSiteOverviewResults = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListOfficeSiteOverviewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOfficeSiteOverviewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOfficeSiteOverviewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOfficeSiteUsersRequest : Tea.TeaModel {
    public var assignedInfo: String?

    public var filter: String?

    public var includeAssignedUser: Bool?

    public var maxResults: Int32?

    public var nextToken: String?

    public var OUPath: String?

    public var officeSiteId: String?

    public var regionId: String?

    public var sortType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assignedInfo != nil {
            map["AssignedInfo"] = self.assignedInfo!
        }
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.includeAssignedUser != nil {
            map["IncludeAssignedUser"] = self.includeAssignedUser!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.OUPath != nil {
            map["OUPath"] = self.OUPath!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sortType != nil {
            map["SortType"] = self.sortType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AssignedInfo"] as? String {
            self.assignedInfo = value
        }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["IncludeAssignedUser"] as? Bool {
            self.includeAssignedUser = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OUPath"] as? String {
            self.OUPath = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SortType"] as? String {
            self.sortType = value
        }
    }
}

public class ListOfficeSiteUsersResponseBody : Tea.TeaModel {
    public class Users : Tea.TeaModel {
        public var assignedDesktopNumber: Int32?

        public var displayName: String?

        public var displayNameNew: String?

        public var email: String?

        public var endUser: String?

        public var phone: String?

        public var userPrincipalName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.assignedDesktopNumber != nil {
                map["AssignedDesktopNumber"] = self.assignedDesktopNumber!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayNameNew != nil {
                map["DisplayNameNew"] = self.displayNameNew!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.endUser != nil {
                map["EndUser"] = self.endUser!
            }
            if self.phone != nil {
                map["Phone"] = self.phone!
            }
            if self.userPrincipalName != nil {
                map["UserPrincipalName"] = self.userPrincipalName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AssignedDesktopNumber"] as? Int32 {
                self.assignedDesktopNumber = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayNameNew"] as? String {
                self.displayNameNew = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["EndUser"] as? String {
                self.endUser = value
            }
            if let value = dict["Phone"] as? String {
                self.phone = value
            }
            if let value = dict["UserPrincipalName"] as? String {
                self.userPrincipalName = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var users: [ListOfficeSiteUsersResponseBody.Users]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.users != nil {
            var tmp : [Any] = []
            for k in self.users! {
                tmp.append(k.toMap())
            }
            map["Users"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Users"] as? [Any?] {
            var tmp : [ListOfficeSiteUsersResponseBody.Users] = []
            for v in value {
                if v != nil {
                    var model = ListOfficeSiteUsersResponseBody.Users()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.users = tmp
        }
    }
}

public class ListOfficeSiteUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOfficeSiteUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOfficeSiteUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [ListTagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListTagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ListTagResourcesResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public var resourceId: String?

        public var resourceType: String?

        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var tagResources: [ListTagResourcesResponseBody.TagResources]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            var tmp : [Any] = []
            for k in self.tagResources! {
                tmp.append(k.toMap())
            }
            map["TagResources"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [Any?] {
            var tmp : [ListTagResourcesResponseBody.TagResources] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesResponseBody.TagResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagResources = tmp
        }
    }
}

public class ListTagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTransferFilesRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class ListTransferFilesResponseBody : Tea.TeaModel {
    public class Files : Tea.TeaModel {
        public var iconUrl: String?

        public var id: String?

        public var name: String?

        public var ossFileName: String?

        public var ossFilePath: String?

        public var size: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.iconUrl != nil {
                map["IconUrl"] = self.iconUrl!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ossFileName != nil {
                map["OssFileName"] = self.ossFileName!
            }
            if self.ossFilePath != nil {
                map["OssFilePath"] = self.ossFilePath!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IconUrl"] as? String {
                self.iconUrl = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OssFileName"] as? String {
                self.ossFileName = value
            }
            if let value = dict["OssFilePath"] as? String {
                self.ossFilePath = value
            }
            if let value = dict["Size"] as? String {
                self.size = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var files: [ListTransferFilesResponseBody.Files]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.files != nil {
            var tmp : [Any] = []
            for k in self.files! {
                tmp.append(k.toMap())
            }
            map["Files"] = tmp
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Files"] as? [Any?] {
            var tmp : [ListTransferFilesResponseBody.Files] = []
            for v in value {
                if v != nil {
                    var model = ListTransferFilesResponseBody.Files()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.files = tmp
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListTransferFilesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTransferFilesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTransferFilesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserAdOrganizationUnitsRequest : Tea.TeaModel {
    public var filter: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? String {
            self.filter = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ListUserAdOrganizationUnitsResponseBody : Tea.TeaModel {
    public class OUNames : Tea.TeaModel {
        public var displayOUName: String?

        public var OUName: String?

        public var officeSiteId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayOUName != nil {
                map["DisplayOUName"] = self.displayOUName!
            }
            if self.OUName != nil {
                map["OUName"] = self.OUName!
            }
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayOUName"] as? String {
                self.displayOUName = value
            }
            if let value = dict["OUName"] as? String {
                self.OUName = value
            }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
        }
    }
    public var nextToken: String?

    public var OUNames: [ListUserAdOrganizationUnitsResponseBody.OUNames]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.OUNames != nil {
            var tmp : [Any] = []
            for k in self.OUNames! {
                tmp.append(k.toMap())
            }
            map["OUNames"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OUNames"] as? [Any?] {
            var tmp : [ListUserAdOrganizationUnitsResponseBody.OUNames] = []
            for v in value {
                if v != nil {
                    var model = ListUserAdOrganizationUnitsResponseBody.OUNames()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.OUNames = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListUserAdOrganizationUnitsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserAdOrganizationUnitsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserAdOrganizationUnitsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class LockVirtualMFADeviceRequest : Tea.TeaModel {
    public var regionId: String?

    public var serialNumber: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
    }
}

public class LockVirtualMFADeviceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class LockVirtualMFADeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: LockVirtualMFADeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = LockVirtualMFADeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MigrateDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var regionId: String?

    public var targetOfficeSiteId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.targetOfficeSiteId != nil {
            map["TargetOfficeSiteId"] = self.targetOfficeSiteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TargetOfficeSiteId"] as? String {
            self.targetOfficeSiteId = value
        }
    }
}

public class MigrateDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class MigrateDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MigrateDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MigrateDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MigrateImageProtocolRequest : Tea.TeaModel {
    public var imageId: [String]?

    public var regionId: String?

    public var targetProtocolType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.targetProtocolType != nil {
            map["TargetProtocolType"] = self.targetProtocolType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? [String] {
            self.imageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TargetProtocolType"] as? String {
            self.targetProtocolType = value
        }
    }
}

public class MigrateImageProtocolResponseBody : Tea.TeaModel {
    public var failedIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedIds != nil {
            map["FailedIds"] = self.failedIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailedIds"] as? [String] {
            self.failedIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class MigrateImageProtocolResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MigrateImageProtocolResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MigrateImageProtocolResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyADConnectorDirectoryRequest : Tea.TeaModel {
    public var adHostname: String?

    public var directoryId: String?

    public var directoryName: String?

    public var dnsAddress: [String]?

    public var domainName: String?

    public var domainPassword: String?

    public var domainUserName: String?

    public var mfaEnabled: Bool?

    public var OUName: String?

    public var regionId: String?

    public var subDomainDnsAddress: [String]?

    public var subDomainName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adHostname != nil {
            map["AdHostname"] = self.adHostname!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.directoryName != nil {
            map["DirectoryName"] = self.directoryName!
        }
        if self.dnsAddress != nil {
            map["DnsAddress"] = self.dnsAddress!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainPassword != nil {
            map["DomainPassword"] = self.domainPassword!
        }
        if self.domainUserName != nil {
            map["DomainUserName"] = self.domainUserName!
        }
        if self.mfaEnabled != nil {
            map["MfaEnabled"] = self.mfaEnabled!
        }
        if self.OUName != nil {
            map["OUName"] = self.OUName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.subDomainDnsAddress != nil {
            map["SubDomainDnsAddress"] = self.subDomainDnsAddress!
        }
        if self.subDomainName != nil {
            map["SubDomainName"] = self.subDomainName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdHostname"] as? String {
            self.adHostname = value
        }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["DirectoryName"] as? String {
            self.directoryName = value
        }
        if let value = dict["DnsAddress"] as? [String] {
            self.dnsAddress = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainPassword"] as? String {
            self.domainPassword = value
        }
        if let value = dict["DomainUserName"] as? String {
            self.domainUserName = value
        }
        if let value = dict["MfaEnabled"] as? Bool {
            self.mfaEnabled = value
        }
        if let value = dict["OUName"] as? String {
            self.OUName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SubDomainDnsAddress"] as? [String] {
            self.subDomainDnsAddress = value
        }
        if let value = dict["SubDomainName"] as? String {
            self.subDomainName = value
        }
    }
}

public class ModifyADConnectorDirectoryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyADConnectorDirectoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyADConnectorDirectoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyADConnectorDirectoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyADConnectorOfficeSiteRequest : Tea.TeaModel {
    public var adHostname: String?

    public var backupDCHostname: String?

    public var backupDns: String?

    public var dnsAddress: [String]?

    public var domainName: String?

    public var domainPassword: String?

    public var domainUserName: String?

    public var mfaEnabled: Bool?

    public var OUName: String?

    public var officeSiteId: String?

    public var officeSiteName: String?

    public var regionId: String?

    public var subDomainDnsAddress: [String]?

    public var subDomainName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adHostname != nil {
            map["AdHostname"] = self.adHostname!
        }
        if self.backupDCHostname != nil {
            map["BackupDCHostname"] = self.backupDCHostname!
        }
        if self.backupDns != nil {
            map["BackupDns"] = self.backupDns!
        }
        if self.dnsAddress != nil {
            map["DnsAddress"] = self.dnsAddress!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainPassword != nil {
            map["DomainPassword"] = self.domainPassword!
        }
        if self.domainUserName != nil {
            map["DomainUserName"] = self.domainUserName!
        }
        if self.mfaEnabled != nil {
            map["MfaEnabled"] = self.mfaEnabled!
        }
        if self.OUName != nil {
            map["OUName"] = self.OUName!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.subDomainDnsAddress != nil {
            map["SubDomainDnsAddress"] = self.subDomainDnsAddress!
        }
        if self.subDomainName != nil {
            map["SubDomainName"] = self.subDomainName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdHostname"] as? String {
            self.adHostname = value
        }
        if let value = dict["BackupDCHostname"] as? String {
            self.backupDCHostname = value
        }
        if let value = dict["BackupDns"] as? String {
            self.backupDns = value
        }
        if let value = dict["DnsAddress"] as? [String] {
            self.dnsAddress = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainPassword"] as? String {
            self.domainPassword = value
        }
        if let value = dict["DomainUserName"] as? String {
            self.domainUserName = value
        }
        if let value = dict["MfaEnabled"] as? Bool {
            self.mfaEnabled = value
        }
        if let value = dict["OUName"] as? String {
            self.OUName = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SubDomainDnsAddress"] as? [String] {
            self.subDomainDnsAddress = value
        }
        if let value = dict["SubDomainName"] as? String {
            self.subDomainName = value
        }
    }
}

public class ModifyADConnectorOfficeSiteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyADConnectorOfficeSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyADConnectorOfficeSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyADConnectorOfficeSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyAclEntriesRequest : Tea.TeaModel {
    public var policy: String?

    public var regionId: String?

    public var sourceId: [String]?

    public var sourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.sourceId != nil {
            map["SourceId"] = self.sourceId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Policy"] as? String {
            self.policy = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SourceId"] as? [String] {
            self.sourceId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
    }
}

public class ModifyAclEntriesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyAclEntriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAclEntriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyAclEntriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyAutoSnapshotPolicyRequest : Tea.TeaModel {
    public var cronExpression: String?

    public var policyId: String?

    public var policyName: String?

    public var regionId: String?

    public var retentionDays: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cronExpression != nil {
            map["CronExpression"] = self.cronExpression!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.policyName != nil {
            map["PolicyName"] = self.policyName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.retentionDays != nil {
            map["RetentionDays"] = self.retentionDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CronExpression"] as? String {
            self.cronExpression = value
        }
        if let value = dict["PolicyId"] as? String {
            self.policyId = value
        }
        if let value = dict["PolicyName"] as? String {
            self.policyName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RetentionDays"] as? Int32 {
            self.retentionDays = value
        }
    }
}

public class ModifyAutoSnapshotPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyAutoSnapshotPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAutoSnapshotPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyAutoSnapshotPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyBundleRequest : Tea.TeaModel {
    public var bundleId: String?

    public var bundleName: String?

    public var description_: String?

    public var imageId: String?

    public var language: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bundleId != nil {
            map["BundleId"] = self.bundleId!
        }
        if self.bundleName != nil {
            map["BundleName"] = self.bundleName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BundleId"] as? String {
            self.bundleId = value
        }
        if let value = dict["BundleName"] as? String {
            self.bundleName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyBundleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyBundleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyBundleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyBundleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCdsFileRequest : Tea.TeaModel {
    public var cdsId: String?

    public var conflictPolicy: String?

    public var endUserId: String?

    public var fileId: String?

    public var fileName: String?

    public var groupId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.conflictPolicy != nil {
            map["ConflictPolicy"] = self.conflictPolicy!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["ConflictPolicy"] as? String {
            self.conflictPolicy = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyCdsFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCdsFileShareLinkRequest : Tea.TeaModel {
    public var cdsId: String?

    public var description_: String?

    public var disableDownload: Bool?

    public var disablePreview: Bool?

    public var disableSave: Bool?

    public var downloadCount: Int64?

    public var downloadLimit: Int64?

    public var expiration: String?

    public var previewCount: Int64?

    public var previewLimit: Int64?

    public var reportCount: Int64?

    public var saveCount: Int64?

    public var saveLimit: Int64?

    public var shareId: String?

    public var shareName: String?

    public var sharePwd: String?

    public var status: String?

    public var videoPreviewCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableDownload != nil {
            map["DisableDownload"] = self.disableDownload!
        }
        if self.disablePreview != nil {
            map["DisablePreview"] = self.disablePreview!
        }
        if self.disableSave != nil {
            map["DisableSave"] = self.disableSave!
        }
        if self.downloadCount != nil {
            map["DownloadCount"] = self.downloadCount!
        }
        if self.downloadLimit != nil {
            map["DownloadLimit"] = self.downloadLimit!
        }
        if self.expiration != nil {
            map["Expiration"] = self.expiration!
        }
        if self.previewCount != nil {
            map["PreviewCount"] = self.previewCount!
        }
        if self.previewLimit != nil {
            map["PreviewLimit"] = self.previewLimit!
        }
        if self.reportCount != nil {
            map["ReportCount"] = self.reportCount!
        }
        if self.saveCount != nil {
            map["SaveCount"] = self.saveCount!
        }
        if self.saveLimit != nil {
            map["SaveLimit"] = self.saveLimit!
        }
        if self.shareId != nil {
            map["ShareId"] = self.shareId!
        }
        if self.shareName != nil {
            map["ShareName"] = self.shareName!
        }
        if self.sharePwd != nil {
            map["SharePwd"] = self.sharePwd!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.videoPreviewCount != nil {
            map["VideoPreviewCount"] = self.videoPreviewCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableDownload"] as? Bool {
            self.disableDownload = value
        }
        if let value = dict["DisablePreview"] as? Bool {
            self.disablePreview = value
        }
        if let value = dict["DisableSave"] as? Bool {
            self.disableSave = value
        }
        if let value = dict["DownloadCount"] as? Int64 {
            self.downloadCount = value
        }
        if let value = dict["DownloadLimit"] as? Int64 {
            self.downloadLimit = value
        }
        if let value = dict["Expiration"] as? String {
            self.expiration = value
        }
        if let value = dict["PreviewCount"] as? Int64 {
            self.previewCount = value
        }
        if let value = dict["PreviewLimit"] as? Int64 {
            self.previewLimit = value
        }
        if let value = dict["ReportCount"] as? Int64 {
            self.reportCount = value
        }
        if let value = dict["SaveCount"] as? Int64 {
            self.saveCount = value
        }
        if let value = dict["SaveLimit"] as? Int64 {
            self.saveLimit = value
        }
        if let value = dict["ShareId"] as? String {
            self.shareId = value
        }
        if let value = dict["ShareName"] as? String {
            self.shareName = value
        }
        if let value = dict["SharePwd"] as? String {
            self.sharePwd = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["VideoPreviewCount"] as? Int64 {
            self.videoPreviewCount = value
        }
    }
}

public class ModifyCdsFileShareLinkResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: CdsFileShareLinkModel?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CdsFileShareLinkModel()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyCdsFileShareLinkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCdsFileShareLinkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCdsFileShareLinkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCenterPolicyRequest : Tea.TeaModel {
    public class AuthorizeAccessPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
        }
    }
    public class AuthorizeSecurityPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public var ipProtocol: String?

        public var policy: String?

        public var portRange: String?

        public var priority: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.portRange != nil {
                map["PortRange"] = self.portRange!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["PortRange"] as? String {
                self.portRange = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class ClientType : Tea.TeaModel {
        public var clientType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientType"] as? String {
                self.clientType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public class DeviceRedirects : Tea.TeaModel {
        public var deviceType: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DeviceRules : Tea.TeaModel {
        public var deviceName: String?

        public var devicePid: String?

        public var deviceType: String?

        public var deviceVid: String?

        public var optCommand: String?

        public var platforms: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceName != nil {
                map["DeviceName"] = self.deviceName!
            }
            if self.devicePid != nil {
                map["DevicePid"] = self.devicePid!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVid != nil {
                map["DeviceVid"] = self.deviceVid!
            }
            if self.optCommand != nil {
                map["OptCommand"] = self.optCommand!
            }
            if self.platforms != nil {
                map["Platforms"] = self.platforms!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceName"] as? String {
                self.deviceName = value
            }
            if let value = dict["DevicePid"] as? String {
                self.devicePid = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVid"] as? String {
                self.deviceVid = value
            }
            if let value = dict["OptCommand"] as? String {
                self.optCommand = value
            }
            if let value = dict["Platforms"] as? String {
                self.platforms = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DomainResolveRule : Tea.TeaModel {
        public var description_: String?

        public var domain: String?

        public var policy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
        }
    }
    public class NetRedirectRule : Tea.TeaModel {
        public var domain: String?

        public var policy: String?

        public var ruleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.ruleType != nil {
                map["RuleType"] = self.ruleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["RuleType"] as? String {
                self.ruleType = value
            }
        }
    }
    public class RevokeAccessPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
        }
    }
    public class RevokeSecurityPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public var ipProtocol: String?

        public var policy: String?

        public var portRange: String?

        public var priority: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.portRange != nil {
                map["PortRange"] = self.portRange!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["PortRange"] as? String {
                self.portRange = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class UsbSupplyRedirectRule : Tea.TeaModel {
        public var description_: String?

        public var productId: String?

        public var usbRedirectType: String?

        public var usbRuleType: String?

        public var vendorId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.productId != nil {
                map["ProductId"] = self.productId!
            }
            if self.usbRedirectType != nil {
                map["UsbRedirectType"] = self.usbRedirectType!
            }
            if self.usbRuleType != nil {
                map["UsbRuleType"] = self.usbRuleType!
            }
            if self.vendorId != nil {
                map["VendorId"] = self.vendorId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ProductId"] as? String {
                self.productId = value
            }
            if let value = dict["UsbRedirectType"] as? String {
                self.usbRedirectType = value
            }
            if let value = dict["UsbRuleType"] as? String {
                self.usbRuleType = value
            }
            if let value = dict["VendorId"] as? String {
                self.vendorId = value
            }
        }
    }
    public var adminAccess: String?

    public var appContentProtection: String?

    public var authorizeAccessPolicyRule: [ModifyCenterPolicyRequest.AuthorizeAccessPolicyRule]?

    public var authorizeSecurityPolicyRule: [ModifyCenterPolicyRequest.AuthorizeSecurityPolicyRule]?

    public var businessType: Int32?

    public var cameraRedirect: String?

    public var clientControlMenu: String?

    public var clientType: [ModifyCenterPolicyRequest.ClientType]?

    public var clipboard: String?

    public var colorEnhancement: String?

    public var cpdDriveClipboard: String?

    public var cpuDownGradeDuration: Int32?

    public var cpuProcessors: [String]?

    public var cpuProtectedMode: String?

    public var cpuRateLimit: Int32?

    public var cpuSampleDuration: Int32?

    public var cpuSingleRateLimit: Int32?

    public var deviceConnectHint: String?

    public var deviceRedirects: [ModifyCenterPolicyRequest.DeviceRedirects]?

    public var deviceRules: [ModifyCenterPolicyRequest.DeviceRules]?

    public var disconnectKeepSession: String?

    public var disconnectKeepSessionTime: Int32?

    public var displayMode: String?

    public var domainResolveRule: [ModifyCenterPolicyRequest.DomainResolveRule]?

    public var domainResolveRuleType: String?

    public var enableSessionRateLimiting: String?

    public var endUserApplyAdminCoordinate: String?

    public var endUserGroupCoordinate: String?

    public var fileMigrate: String?

    public var fileTransferAddress: String?

    public var fileTransferSpeed: String?

    public var fileTransferSpeedLocation: String?

    public var gpuAcceleration: String?

    public var html5FileTransfer: String?

    public var internetCommunicationProtocol: String?

    public var internetPrinter: String?

    public var localDrive: String?

    public var maxReconnectTime: Int32?

    public var memoryDownGradeDuration: Int32?

    public var memoryProcessors: [String]?

    public var memoryProtectedMode: String?

    public var memoryRateLimit: Int32?

    public var memorySampleDuration: Int32?

    public var memorySingleRateLimit: Int32?

    public var mobileRestart: String?

    public var mobileShutdown: String?

    public var name: String?

    public var netRedirect: String?

    public var netRedirectRule: [ModifyCenterPolicyRequest.NetRedirectRule]?

    public var noOperationDisconnect: String?

    public var noOperationDisconnectTime: Int32?

    public var policyGroupId: String?

    public var printerRedirect: String?

    public var qualityEnhancement: String?

    public var recordEventDuration: Int32?

    public var recordEventFilePaths: [String]?

    public var recordEventRegisters: [String]?

    public var recordEvents: [String]?

    public var recording: String?

    public var recordingAudio: String?

    public var recordingDuration: Int32?

    public var recordingEndTime: String?

    public var recordingExpires: Int32?

    public var recordingFps: String?

    public var recordingStartTime: String?

    public var recordingUserNotify: String?

    public var recordingUserNotifyMessage: String?

    public var regionId: String?

    public var remoteCoordinate: String?

    public var resetDesktop: String?

    public var resolutionHeight: Int32?

    public var resolutionModel: String?

    public var resolutionWidth: Int32?

    public var resourceType: String?

    public var revokeAccessPolicyRule: [ModifyCenterPolicyRequest.RevokeAccessPolicyRule]?

    public var revokeSecurityPolicyRule: [ModifyCenterPolicyRequest.RevokeSecurityPolicyRule]?

    public var safeMenu: String?

    public var scope: String?

    public var scopeValue: [String]?

    public var screenDisplayMode: String?

    public var sessionMaxRateKbps: Int32?

    public var smoothEnhancement: String?

    public var statusMonitor: String?

    public var streamingMode: String?

    public var targetFps: Int32?

    public var taskbar: String?

    public var usbRedirect: String?

    public var usbSupplyRedirectRule: [ModifyCenterPolicyRequest.UsbSupplyRedirectRule]?

    public var useTime: String?

    public var videoEncAvgKbps: Int32?

    public var videoEncMaxQP: Int32?

    public var videoEncMinQP: Int32?

    public var videoEncPeakKbps: Int32?

    public var videoEncPolicy: String?

    public var videoRedirect: String?

    public var visualQuality: String?

    public var watermark: String?

    public var watermarkAntiCam: String?

    public var watermarkColor: Int32?

    public var watermarkColumnAmount: Int32?

    public var watermarkCustomText: String?

    public var watermarkDegree: Double?

    public var watermarkFontSize: Int32?

    public var watermarkFontStyle: String?

    public var watermarkPower: String?

    public var watermarkRowAmount: Int32?

    public var watermarkSecurity: String?

    public var watermarkTransparencyValue: Int32?

    public var watermarkType: String?

    public var wuyingKeeper: String?

    public var wyAssistant: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminAccess != nil {
            map["AdminAccess"] = self.adminAccess!
        }
        if self.appContentProtection != nil {
            map["AppContentProtection"] = self.appContentProtection!
        }
        if self.authorizeAccessPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeAccessPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeAccessPolicyRule"] = tmp
        }
        if self.authorizeSecurityPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeSecurityPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeSecurityPolicyRule"] = tmp
        }
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.cameraRedirect != nil {
            map["CameraRedirect"] = self.cameraRedirect!
        }
        if self.clientControlMenu != nil {
            map["ClientControlMenu"] = self.clientControlMenu!
        }
        if self.clientType != nil {
            var tmp : [Any] = []
            for k in self.clientType! {
                tmp.append(k.toMap())
            }
            map["ClientType"] = tmp
        }
        if self.clipboard != nil {
            map["Clipboard"] = self.clipboard!
        }
        if self.colorEnhancement != nil {
            map["ColorEnhancement"] = self.colorEnhancement!
        }
        if self.cpdDriveClipboard != nil {
            map["CpdDriveClipboard"] = self.cpdDriveClipboard!
        }
        if self.cpuDownGradeDuration != nil {
            map["CpuDownGradeDuration"] = self.cpuDownGradeDuration!
        }
        if self.cpuProcessors != nil {
            map["CpuProcessors"] = self.cpuProcessors!
        }
        if self.cpuProtectedMode != nil {
            map["CpuProtectedMode"] = self.cpuProtectedMode!
        }
        if self.cpuRateLimit != nil {
            map["CpuRateLimit"] = self.cpuRateLimit!
        }
        if self.cpuSampleDuration != nil {
            map["CpuSampleDuration"] = self.cpuSampleDuration!
        }
        if self.cpuSingleRateLimit != nil {
            map["CpuSingleRateLimit"] = self.cpuSingleRateLimit!
        }
        if self.deviceConnectHint != nil {
            map["DeviceConnectHint"] = self.deviceConnectHint!
        }
        if self.deviceRedirects != nil {
            var tmp : [Any] = []
            for k in self.deviceRedirects! {
                tmp.append(k.toMap())
            }
            map["DeviceRedirects"] = tmp
        }
        if self.deviceRules != nil {
            var tmp : [Any] = []
            for k in self.deviceRules! {
                tmp.append(k.toMap())
            }
            map["DeviceRules"] = tmp
        }
        if self.disconnectKeepSession != nil {
            map["DisconnectKeepSession"] = self.disconnectKeepSession!
        }
        if self.disconnectKeepSessionTime != nil {
            map["DisconnectKeepSessionTime"] = self.disconnectKeepSessionTime!
        }
        if self.displayMode != nil {
            map["DisplayMode"] = self.displayMode!
        }
        if self.domainResolveRule != nil {
            var tmp : [Any] = []
            for k in self.domainResolveRule! {
                tmp.append(k.toMap())
            }
            map["DomainResolveRule"] = tmp
        }
        if self.domainResolveRuleType != nil {
            map["DomainResolveRuleType"] = self.domainResolveRuleType!
        }
        if self.enableSessionRateLimiting != nil {
            map["EnableSessionRateLimiting"] = self.enableSessionRateLimiting!
        }
        if self.endUserApplyAdminCoordinate != nil {
            map["EndUserApplyAdminCoordinate"] = self.endUserApplyAdminCoordinate!
        }
        if self.endUserGroupCoordinate != nil {
            map["EndUserGroupCoordinate"] = self.endUserGroupCoordinate!
        }
        if self.fileMigrate != nil {
            map["FileMigrate"] = self.fileMigrate!
        }
        if self.fileTransferAddress != nil {
            map["FileTransferAddress"] = self.fileTransferAddress!
        }
        if self.fileTransferSpeed != nil {
            map["FileTransferSpeed"] = self.fileTransferSpeed!
        }
        if self.fileTransferSpeedLocation != nil {
            map["FileTransferSpeedLocation"] = self.fileTransferSpeedLocation!
        }
        if self.gpuAcceleration != nil {
            map["GpuAcceleration"] = self.gpuAcceleration!
        }
        if self.html5FileTransfer != nil {
            map["Html5FileTransfer"] = self.html5FileTransfer!
        }
        if self.internetCommunicationProtocol != nil {
            map["InternetCommunicationProtocol"] = self.internetCommunicationProtocol!
        }
        if self.internetPrinter != nil {
            map["InternetPrinter"] = self.internetPrinter!
        }
        if self.localDrive != nil {
            map["LocalDrive"] = self.localDrive!
        }
        if self.maxReconnectTime != nil {
            map["MaxReconnectTime"] = self.maxReconnectTime!
        }
        if self.memoryDownGradeDuration != nil {
            map["MemoryDownGradeDuration"] = self.memoryDownGradeDuration!
        }
        if self.memoryProcessors != nil {
            map["MemoryProcessors"] = self.memoryProcessors!
        }
        if self.memoryProtectedMode != nil {
            map["MemoryProtectedMode"] = self.memoryProtectedMode!
        }
        if self.memoryRateLimit != nil {
            map["MemoryRateLimit"] = self.memoryRateLimit!
        }
        if self.memorySampleDuration != nil {
            map["MemorySampleDuration"] = self.memorySampleDuration!
        }
        if self.memorySingleRateLimit != nil {
            map["MemorySingleRateLimit"] = self.memorySingleRateLimit!
        }
        if self.mobileRestart != nil {
            map["MobileRestart"] = self.mobileRestart!
        }
        if self.mobileShutdown != nil {
            map["MobileShutdown"] = self.mobileShutdown!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.netRedirect != nil {
            map["NetRedirect"] = self.netRedirect!
        }
        if self.netRedirectRule != nil {
            var tmp : [Any] = []
            for k in self.netRedirectRule! {
                tmp.append(k.toMap())
            }
            map["NetRedirectRule"] = tmp
        }
        if self.noOperationDisconnect != nil {
            map["NoOperationDisconnect"] = self.noOperationDisconnect!
        }
        if self.noOperationDisconnectTime != nil {
            map["NoOperationDisconnectTime"] = self.noOperationDisconnectTime!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.printerRedirect != nil {
            map["PrinterRedirect"] = self.printerRedirect!
        }
        if self.qualityEnhancement != nil {
            map["QualityEnhancement"] = self.qualityEnhancement!
        }
        if self.recordEventDuration != nil {
            map["RecordEventDuration"] = self.recordEventDuration!
        }
        if self.recordEventFilePaths != nil {
            map["RecordEventFilePaths"] = self.recordEventFilePaths!
        }
        if self.recordEventRegisters != nil {
            map["RecordEventRegisters"] = self.recordEventRegisters!
        }
        if self.recordEvents != nil {
            map["RecordEvents"] = self.recordEvents!
        }
        if self.recording != nil {
            map["Recording"] = self.recording!
        }
        if self.recordingAudio != nil {
            map["RecordingAudio"] = self.recordingAudio!
        }
        if self.recordingDuration != nil {
            map["RecordingDuration"] = self.recordingDuration!
        }
        if self.recordingEndTime != nil {
            map["RecordingEndTime"] = self.recordingEndTime!
        }
        if self.recordingExpires != nil {
            map["RecordingExpires"] = self.recordingExpires!
        }
        if self.recordingFps != nil {
            map["RecordingFps"] = self.recordingFps!
        }
        if self.recordingStartTime != nil {
            map["RecordingStartTime"] = self.recordingStartTime!
        }
        if self.recordingUserNotify != nil {
            map["RecordingUserNotify"] = self.recordingUserNotify!
        }
        if self.recordingUserNotifyMessage != nil {
            map["RecordingUserNotifyMessage"] = self.recordingUserNotifyMessage!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remoteCoordinate != nil {
            map["RemoteCoordinate"] = self.remoteCoordinate!
        }
        if self.resetDesktop != nil {
            map["ResetDesktop"] = self.resetDesktop!
        }
        if self.resolutionHeight != nil {
            map["ResolutionHeight"] = self.resolutionHeight!
        }
        if self.resolutionModel != nil {
            map["ResolutionModel"] = self.resolutionModel!
        }
        if self.resolutionWidth != nil {
            map["ResolutionWidth"] = self.resolutionWidth!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.revokeAccessPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.revokeAccessPolicyRule! {
                tmp.append(k.toMap())
            }
            map["RevokeAccessPolicyRule"] = tmp
        }
        if self.revokeSecurityPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.revokeSecurityPolicyRule! {
                tmp.append(k.toMap())
            }
            map["RevokeSecurityPolicyRule"] = tmp
        }
        if self.safeMenu != nil {
            map["SafeMenu"] = self.safeMenu!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeValue != nil {
            map["ScopeValue"] = self.scopeValue!
        }
        if self.screenDisplayMode != nil {
            map["ScreenDisplayMode"] = self.screenDisplayMode!
        }
        if self.sessionMaxRateKbps != nil {
            map["SessionMaxRateKbps"] = self.sessionMaxRateKbps!
        }
        if self.smoothEnhancement != nil {
            map["SmoothEnhancement"] = self.smoothEnhancement!
        }
        if self.statusMonitor != nil {
            map["StatusMonitor"] = self.statusMonitor!
        }
        if self.streamingMode != nil {
            map["StreamingMode"] = self.streamingMode!
        }
        if self.targetFps != nil {
            map["TargetFps"] = self.targetFps!
        }
        if self.taskbar != nil {
            map["Taskbar"] = self.taskbar!
        }
        if self.usbRedirect != nil {
            map["UsbRedirect"] = self.usbRedirect!
        }
        if self.usbSupplyRedirectRule != nil {
            var tmp : [Any] = []
            for k in self.usbSupplyRedirectRule! {
                tmp.append(k.toMap())
            }
            map["UsbSupplyRedirectRule"] = tmp
        }
        if self.useTime != nil {
            map["UseTime"] = self.useTime!
        }
        if self.videoEncAvgKbps != nil {
            map["VideoEncAvgKbps"] = self.videoEncAvgKbps!
        }
        if self.videoEncMaxQP != nil {
            map["VideoEncMaxQP"] = self.videoEncMaxQP!
        }
        if self.videoEncMinQP != nil {
            map["VideoEncMinQP"] = self.videoEncMinQP!
        }
        if self.videoEncPeakKbps != nil {
            map["VideoEncPeakKbps"] = self.videoEncPeakKbps!
        }
        if self.videoEncPolicy != nil {
            map["VideoEncPolicy"] = self.videoEncPolicy!
        }
        if self.videoRedirect != nil {
            map["VideoRedirect"] = self.videoRedirect!
        }
        if self.visualQuality != nil {
            map["VisualQuality"] = self.visualQuality!
        }
        if self.watermark != nil {
            map["Watermark"] = self.watermark!
        }
        if self.watermarkAntiCam != nil {
            map["WatermarkAntiCam"] = self.watermarkAntiCam!
        }
        if self.watermarkColor != nil {
            map["WatermarkColor"] = self.watermarkColor!
        }
        if self.watermarkColumnAmount != nil {
            map["WatermarkColumnAmount"] = self.watermarkColumnAmount!
        }
        if self.watermarkCustomText != nil {
            map["WatermarkCustomText"] = self.watermarkCustomText!
        }
        if self.watermarkDegree != nil {
            map["WatermarkDegree"] = self.watermarkDegree!
        }
        if self.watermarkFontSize != nil {
            map["WatermarkFontSize"] = self.watermarkFontSize!
        }
        if self.watermarkFontStyle != nil {
            map["WatermarkFontStyle"] = self.watermarkFontStyle!
        }
        if self.watermarkPower != nil {
            map["WatermarkPower"] = self.watermarkPower!
        }
        if self.watermarkRowAmount != nil {
            map["WatermarkRowAmount"] = self.watermarkRowAmount!
        }
        if self.watermarkSecurity != nil {
            map["WatermarkSecurity"] = self.watermarkSecurity!
        }
        if self.watermarkTransparencyValue != nil {
            map["WatermarkTransparencyValue"] = self.watermarkTransparencyValue!
        }
        if self.watermarkType != nil {
            map["WatermarkType"] = self.watermarkType!
        }
        if self.wuyingKeeper != nil {
            map["WuyingKeeper"] = self.wuyingKeeper!
        }
        if self.wyAssistant != nil {
            map["WyAssistant"] = self.wyAssistant!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdminAccess"] as? String {
            self.adminAccess = value
        }
        if let value = dict["AppContentProtection"] as? String {
            self.appContentProtection = value
        }
        if let value = dict["AuthorizeAccessPolicyRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.AuthorizeAccessPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.AuthorizeAccessPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeAccessPolicyRule = tmp
        }
        if let value = dict["AuthorizeSecurityPolicyRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.AuthorizeSecurityPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.AuthorizeSecurityPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeSecurityPolicyRule = tmp
        }
        if let value = dict["BusinessType"] as? Int32 {
            self.businessType = value
        }
        if let value = dict["CameraRedirect"] as? String {
            self.cameraRedirect = value
        }
        if let value = dict["ClientControlMenu"] as? String {
            self.clientControlMenu = value
        }
        if let value = dict["ClientType"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.ClientType] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.ClientType()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.clientType = tmp
        }
        if let value = dict["Clipboard"] as? String {
            self.clipboard = value
        }
        if let value = dict["ColorEnhancement"] as? String {
            self.colorEnhancement = value
        }
        if let value = dict["CpdDriveClipboard"] as? String {
            self.cpdDriveClipboard = value
        }
        if let value = dict["CpuDownGradeDuration"] as? Int32 {
            self.cpuDownGradeDuration = value
        }
        if let value = dict["CpuProcessors"] as? [String] {
            self.cpuProcessors = value
        }
        if let value = dict["CpuProtectedMode"] as? String {
            self.cpuProtectedMode = value
        }
        if let value = dict["CpuRateLimit"] as? Int32 {
            self.cpuRateLimit = value
        }
        if let value = dict["CpuSampleDuration"] as? Int32 {
            self.cpuSampleDuration = value
        }
        if let value = dict["CpuSingleRateLimit"] as? Int32 {
            self.cpuSingleRateLimit = value
        }
        if let value = dict["DeviceConnectHint"] as? String {
            self.deviceConnectHint = value
        }
        if let value = dict["DeviceRedirects"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.DeviceRedirects] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.DeviceRedirects()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRedirects = tmp
        }
        if let value = dict["DeviceRules"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.DeviceRules] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.DeviceRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRules = tmp
        }
        if let value = dict["DisconnectKeepSession"] as? String {
            self.disconnectKeepSession = value
        }
        if let value = dict["DisconnectKeepSessionTime"] as? Int32 {
            self.disconnectKeepSessionTime = value
        }
        if let value = dict["DisplayMode"] as? String {
            self.displayMode = value
        }
        if let value = dict["DomainResolveRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.DomainResolveRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.DomainResolveRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.domainResolveRule = tmp
        }
        if let value = dict["DomainResolveRuleType"] as? String {
            self.domainResolveRuleType = value
        }
        if let value = dict["EnableSessionRateLimiting"] as? String {
            self.enableSessionRateLimiting = value
        }
        if let value = dict["EndUserApplyAdminCoordinate"] as? String {
            self.endUserApplyAdminCoordinate = value
        }
        if let value = dict["EndUserGroupCoordinate"] as? String {
            self.endUserGroupCoordinate = value
        }
        if let value = dict["FileMigrate"] as? String {
            self.fileMigrate = value
        }
        if let value = dict["FileTransferAddress"] as? String {
            self.fileTransferAddress = value
        }
        if let value = dict["FileTransferSpeed"] as? String {
            self.fileTransferSpeed = value
        }
        if let value = dict["FileTransferSpeedLocation"] as? String {
            self.fileTransferSpeedLocation = value
        }
        if let value = dict["GpuAcceleration"] as? String {
            self.gpuAcceleration = value
        }
        if let value = dict["Html5FileTransfer"] as? String {
            self.html5FileTransfer = value
        }
        if let value = dict["InternetCommunicationProtocol"] as? String {
            self.internetCommunicationProtocol = value
        }
        if let value = dict["InternetPrinter"] as? String {
            self.internetPrinter = value
        }
        if let value = dict["LocalDrive"] as? String {
            self.localDrive = value
        }
        if let value = dict["MaxReconnectTime"] as? Int32 {
            self.maxReconnectTime = value
        }
        if let value = dict["MemoryDownGradeDuration"] as? Int32 {
            self.memoryDownGradeDuration = value
        }
        if let value = dict["MemoryProcessors"] as? [String] {
            self.memoryProcessors = value
        }
        if let value = dict["MemoryProtectedMode"] as? String {
            self.memoryProtectedMode = value
        }
        if let value = dict["MemoryRateLimit"] as? Int32 {
            self.memoryRateLimit = value
        }
        if let value = dict["MemorySampleDuration"] as? Int32 {
            self.memorySampleDuration = value
        }
        if let value = dict["MemorySingleRateLimit"] as? Int32 {
            self.memorySingleRateLimit = value
        }
        if let value = dict["MobileRestart"] as? String {
            self.mobileRestart = value
        }
        if let value = dict["MobileShutdown"] as? String {
            self.mobileShutdown = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NetRedirect"] as? String {
            self.netRedirect = value
        }
        if let value = dict["NetRedirectRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.NetRedirectRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.NetRedirectRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.netRedirectRule = tmp
        }
        if let value = dict["NoOperationDisconnect"] as? String {
            self.noOperationDisconnect = value
        }
        if let value = dict["NoOperationDisconnectTime"] as? Int32 {
            self.noOperationDisconnectTime = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PrinterRedirect"] as? String {
            self.printerRedirect = value
        }
        if let value = dict["QualityEnhancement"] as? String {
            self.qualityEnhancement = value
        }
        if let value = dict["RecordEventDuration"] as? Int32 {
            self.recordEventDuration = value
        }
        if let value = dict["RecordEventFilePaths"] as? [String] {
            self.recordEventFilePaths = value
        }
        if let value = dict["RecordEventRegisters"] as? [String] {
            self.recordEventRegisters = value
        }
        if let value = dict["RecordEvents"] as? [String] {
            self.recordEvents = value
        }
        if let value = dict["Recording"] as? String {
            self.recording = value
        }
        if let value = dict["RecordingAudio"] as? String {
            self.recordingAudio = value
        }
        if let value = dict["RecordingDuration"] as? Int32 {
            self.recordingDuration = value
        }
        if let value = dict["RecordingEndTime"] as? String {
            self.recordingEndTime = value
        }
        if let value = dict["RecordingExpires"] as? Int32 {
            self.recordingExpires = value
        }
        if let value = dict["RecordingFps"] as? String {
            self.recordingFps = value
        }
        if let value = dict["RecordingStartTime"] as? String {
            self.recordingStartTime = value
        }
        if let value = dict["RecordingUserNotify"] as? String {
            self.recordingUserNotify = value
        }
        if let value = dict["RecordingUserNotifyMessage"] as? String {
            self.recordingUserNotifyMessage = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RemoteCoordinate"] as? String {
            self.remoteCoordinate = value
        }
        if let value = dict["ResetDesktop"] as? String {
            self.resetDesktop = value
        }
        if let value = dict["ResolutionHeight"] as? Int32 {
            self.resolutionHeight = value
        }
        if let value = dict["ResolutionModel"] as? String {
            self.resolutionModel = value
        }
        if let value = dict["ResolutionWidth"] as? Int32 {
            self.resolutionWidth = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["RevokeAccessPolicyRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.RevokeAccessPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.RevokeAccessPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.revokeAccessPolicyRule = tmp
        }
        if let value = dict["RevokeSecurityPolicyRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.RevokeSecurityPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.RevokeSecurityPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.revokeSecurityPolicyRule = tmp
        }
        if let value = dict["SafeMenu"] as? String {
            self.safeMenu = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeValue"] as? [String] {
            self.scopeValue = value
        }
        if let value = dict["ScreenDisplayMode"] as? String {
            self.screenDisplayMode = value
        }
        if let value = dict["SessionMaxRateKbps"] as? Int32 {
            self.sessionMaxRateKbps = value
        }
        if let value = dict["SmoothEnhancement"] as? String {
            self.smoothEnhancement = value
        }
        if let value = dict["StatusMonitor"] as? String {
            self.statusMonitor = value
        }
        if let value = dict["StreamingMode"] as? String {
            self.streamingMode = value
        }
        if let value = dict["TargetFps"] as? Int32 {
            self.targetFps = value
        }
        if let value = dict["Taskbar"] as? String {
            self.taskbar = value
        }
        if let value = dict["UsbRedirect"] as? String {
            self.usbRedirect = value
        }
        if let value = dict["UsbSupplyRedirectRule"] as? [Any?] {
            var tmp : [ModifyCenterPolicyRequest.UsbSupplyRedirectRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyCenterPolicyRequest.UsbSupplyRedirectRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.usbSupplyRedirectRule = tmp
        }
        if let value = dict["UseTime"] as? String {
            self.useTime = value
        }
        if let value = dict["VideoEncAvgKbps"] as? Int32 {
            self.videoEncAvgKbps = value
        }
        if let value = dict["VideoEncMaxQP"] as? Int32 {
            self.videoEncMaxQP = value
        }
        if let value = dict["VideoEncMinQP"] as? Int32 {
            self.videoEncMinQP = value
        }
        if let value = dict["VideoEncPeakKbps"] as? Int32 {
            self.videoEncPeakKbps = value
        }
        if let value = dict["VideoEncPolicy"] as? String {
            self.videoEncPolicy = value
        }
        if let value = dict["VideoRedirect"] as? String {
            self.videoRedirect = value
        }
        if let value = dict["VisualQuality"] as? String {
            self.visualQuality = value
        }
        if let value = dict["Watermark"] as? String {
            self.watermark = value
        }
        if let value = dict["WatermarkAntiCam"] as? String {
            self.watermarkAntiCam = value
        }
        if let value = dict["WatermarkColor"] as? Int32 {
            self.watermarkColor = value
        }
        if let value = dict["WatermarkColumnAmount"] as? Int32 {
            self.watermarkColumnAmount = value
        }
        if let value = dict["WatermarkCustomText"] as? String {
            self.watermarkCustomText = value
        }
        if let value = dict["WatermarkDegree"] as? Double {
            self.watermarkDegree = value
        }
        if let value = dict["WatermarkFontSize"] as? Int32 {
            self.watermarkFontSize = value
        }
        if let value = dict["WatermarkFontStyle"] as? String {
            self.watermarkFontStyle = value
        }
        if let value = dict["WatermarkPower"] as? String {
            self.watermarkPower = value
        }
        if let value = dict["WatermarkRowAmount"] as? Int32 {
            self.watermarkRowAmount = value
        }
        if let value = dict["WatermarkSecurity"] as? String {
            self.watermarkSecurity = value
        }
        if let value = dict["WatermarkTransparencyValue"] as? Int32 {
            self.watermarkTransparencyValue = value
        }
        if let value = dict["WatermarkType"] as? String {
            self.watermarkType = value
        }
        if let value = dict["WuyingKeeper"] as? String {
            self.wuyingKeeper = value
        }
        if let value = dict["WyAssistant"] as? String {
            self.wyAssistant = value
        }
    }
}

public class ModifyCenterPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCenterPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCenterPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCenterPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCloudDriveGroupsRequest : Tea.TeaModel {
    public var cdsId: String?

    public var groupId: [String]?

    public var regionId: String?

    public var status: String?

    public var totalSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.totalSize != nil {
            map["TotalSize"] = self.totalSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["GroupId"] as? [String] {
            self.groupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TotalSize"] as? Int64 {
            self.totalSize = value
        }
    }
}

public class ModifyCloudDriveGroupsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyCloudDriveGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCloudDriveGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCloudDriveGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCloudDrivePermissionRequest : Tea.TeaModel {
    public var cdsId: String?

    public var downloadEndUserIds: [String]?

    public var downloadUploadEndUserIds: [String]?

    public var noDownloadNoUploadEndUserIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.downloadEndUserIds != nil {
            map["DownloadEndUserIds"] = self.downloadEndUserIds!
        }
        if self.downloadUploadEndUserIds != nil {
            map["DownloadUploadEndUserIds"] = self.downloadUploadEndUserIds!
        }
        if self.noDownloadNoUploadEndUserIds != nil {
            map["NoDownloadNoUploadEndUserIds"] = self.noDownloadNoUploadEndUserIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["DownloadEndUserIds"] as? [String] {
            self.downloadEndUserIds = value
        }
        if let value = dict["DownloadUploadEndUserIds"] as? [String] {
            self.downloadUploadEndUserIds = value
        }
        if let value = dict["NoDownloadNoUploadEndUserIds"] as? [String] {
            self.noDownloadNoUploadEndUserIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyCloudDrivePermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCloudDrivePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCloudDrivePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCloudDrivePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCloudDriveUsersRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: [String]?

    public var regionId: String?

    public var status: String?

    public var userMaxSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userMaxSize != nil {
            map["UserMaxSize"] = self.userMaxSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserMaxSize"] as? Int64 {
            self.userMaxSize = value
        }
    }
}

public class ModifyCloudDriveUsersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCloudDriveUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCloudDriveUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCloudDriveUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyConfigGroupRequest : Tea.TeaModel {
    public var description_: String?

    public var groupId: String?

    public var name: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyConfigGroupResponseBody : Tea.TeaModel {
    public var groupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyConfigGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyConfigGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyConfigGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyCustomizedListHeadersRequest : Tea.TeaModel {
    public class Headers : Tea.TeaModel {
        public var displayType: String?

        public var headerKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayType != nil {
                map["DisplayType"] = self.displayType!
            }
            if self.headerKey != nil {
                map["HeaderKey"] = self.headerKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayType"] as? String {
                self.displayType = value
            }
            if let value = dict["HeaderKey"] as? String {
                self.headerKey = value
            }
        }
    }
    public var headers: [ModifyCustomizedListHeadersRequest.Headers]?

    public var listType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            var tmp : [Any] = []
            for k in self.headers! {
                tmp.append(k.toMap())
            }
            map["Headers"] = tmp
        }
        if self.listType != nil {
            map["ListType"] = self.listType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Headers"] as? [Any?] {
            var tmp : [ModifyCustomizedListHeadersRequest.Headers] = []
            for v in value {
                if v != nil {
                    var model = ModifyCustomizedListHeadersRequest.Headers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.headers = tmp
        }
        if let value = dict["ListType"] as? String {
            self.listType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyCustomizedListHeadersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyCustomizedListHeadersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyCustomizedListHeadersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyCustomizedListHeadersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopChargeTypeRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var chargeType: String?

    public var desktopId: [String]?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var useDuration: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.useDuration != nil {
            map["UseDuration"] = self.useDuration!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["UseDuration"] as? Int32 {
            self.useDuration = value
        }
    }
}

public class ModifyDesktopChargeTypeResponseBody : Tea.TeaModel {
    public var desktopId: [String]?

    public var orderId: String?

    public var requestId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class ModifyDesktopChargeTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopChargeTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopChargeTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopGroupRequest : Tea.TeaModel {
    public var allowAutoSetup: Int32?

    public var allowBufferCount: Int32?

    public var bindAmount: Int64?

    public var buyDesktopsCount: Int32?

    public var classify: String?

    public var comments: String?

    public var connectDuration: Int64?

    public var deleteDuration: Int64?

    public var desktopGroupId: String?

    public var desktopGroupName: String?

    public var disableSessionConfig: Bool?

    public var fileSystemId: String?

    public var idleDisconnectDuration: Int64?

    public var imageId: String?

    public var keepDuration: Int64?

    public var loadPolicy: Int64?

    public var maxDesktopsCount: Int32?

    public var minDesktopsCount: Int32?

    public var ownBundleId: String?

    public var policyGroupId: String?

    public var policyGroupIds: [String]?

    public var profileFollowSwitch: Bool?

    public var ratioThreshold: Double?

    public var regionId: String?

    public var resetType: Int64?

    public var scaleStrategyId: String?

    public var stopDuration: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowAutoSetup != nil {
            map["AllowAutoSetup"] = self.allowAutoSetup!
        }
        if self.allowBufferCount != nil {
            map["AllowBufferCount"] = self.allowBufferCount!
        }
        if self.bindAmount != nil {
            map["BindAmount"] = self.bindAmount!
        }
        if self.buyDesktopsCount != nil {
            map["BuyDesktopsCount"] = self.buyDesktopsCount!
        }
        if self.classify != nil {
            map["Classify"] = self.classify!
        }
        if self.comments != nil {
            map["Comments"] = self.comments!
        }
        if self.connectDuration != nil {
            map["ConnectDuration"] = self.connectDuration!
        }
        if self.deleteDuration != nil {
            map["DeleteDuration"] = self.deleteDuration!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupName != nil {
            map["DesktopGroupName"] = self.desktopGroupName!
        }
        if self.disableSessionConfig != nil {
            map["DisableSessionConfig"] = self.disableSessionConfig!
        }
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.idleDisconnectDuration != nil {
            map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.keepDuration != nil {
            map["KeepDuration"] = self.keepDuration!
        }
        if self.loadPolicy != nil {
            map["LoadPolicy"] = self.loadPolicy!
        }
        if self.maxDesktopsCount != nil {
            map["MaxDesktopsCount"] = self.maxDesktopsCount!
        }
        if self.minDesktopsCount != nil {
            map["MinDesktopsCount"] = self.minDesktopsCount!
        }
        if self.ownBundleId != nil {
            map["OwnBundleId"] = self.ownBundleId!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.policyGroupIds != nil {
            map["PolicyGroupIds"] = self.policyGroupIds!
        }
        if self.profileFollowSwitch != nil {
            map["ProfileFollowSwitch"] = self.profileFollowSwitch!
        }
        if self.ratioThreshold != nil {
            map["RatioThreshold"] = self.ratioThreshold!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resetType != nil {
            map["ResetType"] = self.resetType!
        }
        if self.scaleStrategyId != nil {
            map["ScaleStrategyId"] = self.scaleStrategyId!
        }
        if self.stopDuration != nil {
            map["StopDuration"] = self.stopDuration!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowAutoSetup"] as? Int32 {
            self.allowAutoSetup = value
        }
        if let value = dict["AllowBufferCount"] as? Int32 {
            self.allowBufferCount = value
        }
        if let value = dict["BindAmount"] as? Int64 {
            self.bindAmount = value
        }
        if let value = dict["BuyDesktopsCount"] as? Int32 {
            self.buyDesktopsCount = value
        }
        if let value = dict["Classify"] as? String {
            self.classify = value
        }
        if let value = dict["Comments"] as? String {
            self.comments = value
        }
        if let value = dict["ConnectDuration"] as? Int64 {
            self.connectDuration = value
        }
        if let value = dict["DeleteDuration"] as? Int64 {
            self.deleteDuration = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupName"] as? String {
            self.desktopGroupName = value
        }
        if let value = dict["DisableSessionConfig"] as? Bool {
            self.disableSessionConfig = value
        }
        if let value = dict["FileSystemId"] as? String {
            self.fileSystemId = value
        }
        if let value = dict["IdleDisconnectDuration"] as? Int64 {
            self.idleDisconnectDuration = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["KeepDuration"] as? Int64 {
            self.keepDuration = value
        }
        if let value = dict["LoadPolicy"] as? Int64 {
            self.loadPolicy = value
        }
        if let value = dict["MaxDesktopsCount"] as? Int32 {
            self.maxDesktopsCount = value
        }
        if let value = dict["MinDesktopsCount"] as? Int32 {
            self.minDesktopsCount = value
        }
        if let value = dict["OwnBundleId"] as? String {
            self.ownBundleId = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PolicyGroupIds"] as? [String] {
            self.policyGroupIds = value
        }
        if let value = dict["ProfileFollowSwitch"] as? Bool {
            self.profileFollowSwitch = value
        }
        if let value = dict["RatioThreshold"] as? Double {
            self.ratioThreshold = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResetType"] as? Int64 {
            self.resetType = value
        }
        if let value = dict["ScaleStrategyId"] as? String {
            self.scaleStrategyId = value
        }
        if let value = dict["StopDuration"] as? Int64 {
            self.stopDuration = value
        }
    }
}

public class ModifyDesktopGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopHostNameRequest : Tea.TeaModel {
    public var desktopId: String?

    public var newHostName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.newHostName != nil {
            map["NewHostName"] = self.newHostName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["NewHostName"] as? String {
            self.newHostName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyDesktopHostNameResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopHostNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopHostNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopHostNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopNameRequest : Tea.TeaModel {
    public var desktopId: String?

    public var newDesktopName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.newDesktopName != nil {
            map["NewDesktopName"] = self.newDesktopName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["NewDesktopName"] as? String {
            self.newDesktopName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyDesktopNameResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopOversoldGroupRequest : Tea.TeaModel {
    public var concurrenceCount: Int32?

    public var description_: String?

    public var idleDisconnectDuration: Int64?

    public var imageId: String?

    public var keepDuration: Int32?

    public var name: String?

    public var oversoldGroupId: String?

    public var oversoldUserCount: Int32?

    public var oversoldWarn: Int32?

    public var policyGroupId: String?

    public var stopDuration: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.concurrenceCount != nil {
            map["ConcurrenceCount"] = self.concurrenceCount!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.idleDisconnectDuration != nil {
            map["IdleDisconnectDuration"] = self.idleDisconnectDuration!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.keepDuration != nil {
            map["KeepDuration"] = self.keepDuration!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.oversoldUserCount != nil {
            map["OversoldUserCount"] = self.oversoldUserCount!
        }
        if self.oversoldWarn != nil {
            map["OversoldWarn"] = self.oversoldWarn!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.stopDuration != nil {
            map["StopDuration"] = self.stopDuration!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConcurrenceCount"] as? Int32 {
            self.concurrenceCount = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["IdleDisconnectDuration"] as? Int64 {
            self.idleDisconnectDuration = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["KeepDuration"] as? Int32 {
            self.keepDuration = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["OversoldUserCount"] as? Int32 {
            self.oversoldUserCount = value
        }
        if let value = dict["OversoldWarn"] as? Int32 {
            self.oversoldWarn = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["StopDuration"] as? Int32 {
            self.stopDuration = value
        }
    }
}

public class ModifyDesktopOversoldGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var oversoldGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
        }
    }
    public var data: ModifyDesktopOversoldGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ModifyDesktopOversoldGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopOversoldGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopOversoldGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopOversoldGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopOversoldGroupSaleRequest : Tea.TeaModel {
    public var concurrenceCount: Int32?

    public var oversoldGroupId: String?

    public var oversoldUserCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.concurrenceCount != nil {
            map["ConcurrenceCount"] = self.concurrenceCount!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.oversoldUserCount != nil {
            map["OversoldUserCount"] = self.oversoldUserCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConcurrenceCount"] as? Int32 {
            self.concurrenceCount = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["OversoldUserCount"] as? Int32 {
            self.oversoldUserCount = value
        }
    }
}

public class ModifyDesktopOversoldGroupSaleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var orderId: Int64?

        public var oversoldGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
        }
    }
    public var data: ModifyDesktopOversoldGroupSaleResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ModifyDesktopOversoldGroupSaleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopOversoldGroupSaleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopOversoldGroupSaleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopOversoldGroupSaleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopOversoldUserGroupRequest : Tea.TeaModel {
    public var imageId: String?

    public var name: String?

    public var oversoldGroupId: String?

    public var policyGroupId: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class ModifyDesktopOversoldUserGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var userGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
        }
    }
    public var data: ModifyDesktopOversoldUserGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ModifyDesktopOversoldUserGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopOversoldUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopOversoldUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopOversoldUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopSpecRequest : Tea.TeaModel {
    public class ResourceSpecs : Tea.TeaModel {
        public var desktopId: String?

        public var rootDiskSizeGib: Int32?

        public var userDiskSizeGib: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.rootDiskSizeGib != nil {
                map["RootDiskSizeGib"] = self.rootDiskSizeGib!
            }
            if self.userDiskSizeGib != nil {
                map["UserDiskSizeGib"] = self.userDiskSizeGib!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["RootDiskSizeGib"] as? Int32 {
                self.rootDiskSizeGib = value
            }
            if let value = dict["UserDiskSizeGib"] as? Int32 {
                self.userDiskSizeGib = value
            }
        }
    }
    public var autoPay: Bool?

    public var desktopId: String?

    public var desktopType: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceSpecs: [ModifyDesktopSpecRequest.ResourceSpecs]?

    public var resourceType: String?

    public var rootDiskSizeGib: Int32?

    public var userDiskPerformanceLevel: String?

    public var userDiskSizeGib: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopType != nil {
            map["DesktopType"] = self.desktopType!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceSpecs != nil {
            var tmp : [Any] = []
            for k in self.resourceSpecs! {
                tmp.append(k.toMap())
            }
            map["ResourceSpecs"] = tmp
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.rootDiskSizeGib != nil {
            map["RootDiskSizeGib"] = self.rootDiskSizeGib!
        }
        if self.userDiskPerformanceLevel != nil {
            map["UserDiskPerformanceLevel"] = self.userDiskPerformanceLevel!
        }
        if self.userDiskSizeGib != nil {
            map["UserDiskSizeGib"] = self.userDiskSizeGib!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["DesktopType"] as? String {
            self.desktopType = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceSpecs"] as? [Any?] {
            var tmp : [ModifyDesktopSpecRequest.ResourceSpecs] = []
            for v in value {
                if v != nil {
                    var model = ModifyDesktopSpecRequest.ResourceSpecs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceSpecs = tmp
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["RootDiskSizeGib"] as? Int32 {
            self.rootDiskSizeGib = value
        }
        if let value = dict["UserDiskPerformanceLevel"] as? String {
            self.userDiskPerformanceLevel = value
        }
        if let value = dict["UserDiskSizeGib"] as? Int32 {
            self.userDiskSizeGib = value
        }
    }
}

public class ModifyDesktopSpecResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var orderIds: [Int64]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.orderIds != nil {
            map["OrderIds"] = self.orderIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OrderIds"] as? [Int64] {
            self.orderIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopSpecResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopSpecResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopSpecResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopTimerRequest : Tea.TeaModel {
    public class DesktopTimers : Tea.TeaModel {
        public var allowClientSetting: Bool?

        public var cronExpression: String?

        public var enforce: Bool?

        public var interval: Int32?

        public var operationType: String?

        public var resetType: String?

        public var timerType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowClientSetting != nil {
                map["AllowClientSetting"] = self.allowClientSetting!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.enforce != nil {
                map["Enforce"] = self.enforce!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.operationType != nil {
                map["OperationType"] = self.operationType!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.timerType != nil {
                map["TimerType"] = self.timerType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowClientSetting"] as? Bool {
                self.allowClientSetting = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["Enforce"] as? Bool {
                self.enforce = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["OperationType"] as? String {
                self.operationType = value
            }
            if let value = dict["ResetType"] as? String {
                self.resetType = value
            }
            if let value = dict["TimerType"] as? String {
                self.timerType = value
            }
        }
    }
    public var desktopId: [String]?

    public var desktopTimers: [ModifyDesktopTimerRequest.DesktopTimers]?

    public var regionId: String?

    public var useDesktopTimers: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.desktopTimers != nil {
            var tmp : [Any] = []
            for k in self.desktopTimers! {
                tmp.append(k.toMap())
            }
            map["DesktopTimers"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.useDesktopTimers != nil {
            map["UseDesktopTimers"] = self.useDesktopTimers!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["DesktopTimers"] as? [Any?] {
            var tmp : [ModifyDesktopTimerRequest.DesktopTimers] = []
            for v in value {
                if v != nil {
                    var model = ModifyDesktopTimerRequest.DesktopTimers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.desktopTimers = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UseDesktopTimers"] as? Bool {
            self.useDesktopTimers = value
        }
    }
}

public class ModifyDesktopTimerResponseBody : Tea.TeaModel {
    public var desktopIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopIds != nil {
            map["DesktopIds"] = self.desktopIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopIds"] as? [String] {
            self.desktopIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopTimerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopTimerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopTimerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDesktopsPolicyGroupRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var policyGroupId: String?

    public var policyGroupIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.policyGroupIds != nil {
            map["PolicyGroupIds"] = self.policyGroupIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PolicyGroupIds"] as? [String] {
            self.policyGroupIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyDesktopsPolicyGroupResponseBody : Tea.TeaModel {
    public class ModifyResults : Tea.TeaModel {
        public var code: String?

        public var desktopId: String?

        public var message: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
        }
    }
    public var modifyResults: [ModifyDesktopsPolicyGroupResponseBody.ModifyResults]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modifyResults != nil {
            var tmp : [Any] = []
            for k in self.modifyResults! {
                tmp.append(k.toMap())
            }
            map["ModifyResults"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModifyResults"] as? [Any?] {
            var tmp : [ModifyDesktopsPolicyGroupResponseBody.ModifyResults] = []
            for v in value {
                if v != nil {
                    var model = ModifyDesktopsPolicyGroupResponseBody.ModifyResults()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.modifyResults = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDesktopsPolicyGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDesktopsPolicyGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDesktopsPolicyGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDiskSpecRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var desktopId: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var rootDiskPerformanceLevel: String?

    public var userDiskPerformanceLevel: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.rootDiskPerformanceLevel != nil {
            map["RootDiskPerformanceLevel"] = self.rootDiskPerformanceLevel!
        }
        if self.userDiskPerformanceLevel != nil {
            map["UserDiskPerformanceLevel"] = self.userDiskPerformanceLevel!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["RootDiskPerformanceLevel"] as? String {
            self.rootDiskPerformanceLevel = value
        }
        if let value = dict["UserDiskPerformanceLevel"] as? String {
            self.userDiskPerformanceLevel = value
        }
    }
}

public class ModifyDiskSpecResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDiskSpecResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDiskSpecResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDiskSpecResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyEntitlementRequest : Tea.TeaModel {
    public var desktopId: String?

    public var endUserId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? String {
            self.desktopId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyEntitlementResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyEntitlementResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyEntitlementResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyEntitlementResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyImageAttributeRequest : Tea.TeaModel {
    public var description_: String?

    public var imageId: String?

    public var name: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyImageAttributeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyImageAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyImageAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyImageAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyImagePermissionRequest : Tea.TeaModel {
    public var addAccount: [Int64]?

    public var imageId: String?

    public var regionId: String?

    public var removeAccount: [Int64]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addAccount != nil {
            map["AddAccount"] = self.addAccount!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.removeAccount != nil {
            map["RemoveAccount"] = self.removeAccount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddAccount"] as? [Int64] {
            self.addAccount = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RemoveAccount"] as? [Int64] {
            self.removeAccount = value
        }
    }
}

public class ModifyImagePermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyImagePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyImagePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyImagePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyNASDefaultMountTargetRequest : Tea.TeaModel {
    public var fileSystemId: String?

    public var mountTargetDomain: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.mountTargetDomain != nil {
            map["MountTargetDomain"] = self.mountTargetDomain!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileSystemId"] as? String {
            self.fileSystemId = value
        }
        if let value = dict["MountTargetDomain"] as? String {
            self.mountTargetDomain = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyNASDefaultMountTargetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyNASDefaultMountTargetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyNASDefaultMountTargetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyNASDefaultMountTargetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyNetworkPackageBandwidthRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var bandwidth: Int32?

    public var networkPackageId: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.bandwidth != nil {
            map["Bandwidth"] = self.bandwidth!
        }
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["Bandwidth"] as? Int32 {
            self.bandwidth = value
        }
        if let value = dict["NetworkPackageId"] as? String {
            self.networkPackageId = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class ModifyNetworkPackageBandwidthResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyNetworkPackageBandwidthResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyNetworkPackageBandwidthResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyNetworkPackageBandwidthResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyNetworkPackageEnabledRequest : Tea.TeaModel {
    public var enabled: Bool?

    public var networkPackageId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["NetworkPackageId"] as? String {
            self.networkPackageId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyNetworkPackageEnabledResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyNetworkPackageEnabledResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyNetworkPackageEnabledResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyNetworkPackageEnabledResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyOfficeSiteAttributeRequest : Tea.TeaModel {
    public var desktopAccessType: String?

    public var enableAdminAccess: Bool?

    public var needVerifyLoginRisk: Bool?

    public var needVerifyZeroDevice: Bool?

    public var officeSiteId: String?

    public var officeSiteName: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopAccessType != nil {
            map["DesktopAccessType"] = self.desktopAccessType!
        }
        if self.enableAdminAccess != nil {
            map["EnableAdminAccess"] = self.enableAdminAccess!
        }
        if self.needVerifyLoginRisk != nil {
            map["NeedVerifyLoginRisk"] = self.needVerifyLoginRisk!
        }
        if self.needVerifyZeroDevice != nil {
            map["NeedVerifyZeroDevice"] = self.needVerifyZeroDevice!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.officeSiteName != nil {
            map["OfficeSiteName"] = self.officeSiteName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopAccessType"] as? String {
            self.desktopAccessType = value
        }
        if let value = dict["EnableAdminAccess"] as? Bool {
            self.enableAdminAccess = value
        }
        if let value = dict["NeedVerifyLoginRisk"] as? Bool {
            self.needVerifyLoginRisk = value
        }
        if let value = dict["NeedVerifyZeroDevice"] as? Bool {
            self.needVerifyZeroDevice = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["OfficeSiteName"] as? String {
            self.officeSiteName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyOfficeSiteAttributeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyOfficeSiteAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyOfficeSiteAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyOfficeSiteAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyOfficeSiteCrossDesktopAccessRequest : Tea.TeaModel {
    public var enableCrossDesktopAccess: Bool?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableCrossDesktopAccess != nil {
            map["EnableCrossDesktopAccess"] = self.enableCrossDesktopAccess!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableCrossDesktopAccess"] as? Bool {
            self.enableCrossDesktopAccess = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyOfficeSiteCrossDesktopAccessResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyOfficeSiteCrossDesktopAccessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyOfficeSiteCrossDesktopAccessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyOfficeSiteCrossDesktopAccessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyOfficeSiteDnsInfoRequest : Tea.TeaModel {
    public var dnsAddress: [String]?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dnsAddress != nil {
            map["DnsAddress"] = self.dnsAddress!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DnsAddress"] as? [String] {
            self.dnsAddress = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyOfficeSiteDnsInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyOfficeSiteDnsInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyOfficeSiteDnsInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyOfficeSiteDnsInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyOfficeSiteMfaEnabledRequest : Tea.TeaModel {
    public var mfaEnabled: Bool?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mfaEnabled != nil {
            map["MfaEnabled"] = self.mfaEnabled!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MfaEnabled"] as? Bool {
            self.mfaEnabled = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyOfficeSiteMfaEnabledResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyOfficeSiteMfaEnabledResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyOfficeSiteMfaEnabledResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyOfficeSiteMfaEnabledResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyPolicyGroupRequest : Tea.TeaModel {
    public class AuthorizeAccessPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
        }
    }
    public class AuthorizeSecurityPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public var ipProtocol: String?

        public var policy: String?

        public var portRange: String?

        public var priority: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.portRange != nil {
                map["PortRange"] = self.portRange!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["PortRange"] as? String {
                self.portRange = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class ClientType : Tea.TeaModel {
        public var clientType: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientType != nil {
                map["ClientType"] = self.clientType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientType"] as? String {
                self.clientType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public class DeviceRedirects : Tea.TeaModel {
        public var deviceType: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DeviceRules : Tea.TeaModel {
        public var deviceName: String?

        public var devicePid: String?

        public var deviceType: String?

        public var deviceVid: String?

        public var optCommand: String?

        public var platforms: String?

        public var redirectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deviceName != nil {
                map["DeviceName"] = self.deviceName!
            }
            if self.devicePid != nil {
                map["DevicePid"] = self.devicePid!
            }
            if self.deviceType != nil {
                map["DeviceType"] = self.deviceType!
            }
            if self.deviceVid != nil {
                map["DeviceVid"] = self.deviceVid!
            }
            if self.optCommand != nil {
                map["OptCommand"] = self.optCommand!
            }
            if self.platforms != nil {
                map["Platforms"] = self.platforms!
            }
            if self.redirectType != nil {
                map["RedirectType"] = self.redirectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeviceName"] as? String {
                self.deviceName = value
            }
            if let value = dict["DevicePid"] as? String {
                self.devicePid = value
            }
            if let value = dict["DeviceType"] as? String {
                self.deviceType = value
            }
            if let value = dict["DeviceVid"] as? String {
                self.deviceVid = value
            }
            if let value = dict["OptCommand"] as? String {
                self.optCommand = value
            }
            if let value = dict["Platforms"] as? String {
                self.platforms = value
            }
            if let value = dict["RedirectType"] as? String {
                self.redirectType = value
            }
        }
    }
    public class DomainResolveRule : Tea.TeaModel {
        public var description_: String?

        public var domain: String?

        public var policy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
        }
    }
    public class RevokeAccessPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
        }
    }
    public class RevokeSecurityPolicyRule : Tea.TeaModel {
        public var cidrIp: String?

        public var description_: String?

        public var ipProtocol: String?

        public var policy: String?

        public var portRange: String?

        public var priority: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ipProtocol != nil {
                map["IpProtocol"] = self.ipProtocol!
            }
            if self.policy != nil {
                map["Policy"] = self.policy!
            }
            if self.portRange != nil {
                map["PortRange"] = self.portRange!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["IpProtocol"] as? String {
                self.ipProtocol = value
            }
            if let value = dict["Policy"] as? String {
                self.policy = value
            }
            if let value = dict["PortRange"] as? String {
                self.portRange = value
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class UsbSupplyRedirectRule : Tea.TeaModel {
        public var description_: String?

        public var deviceClass: String?

        public var deviceSubclass: String?

        public var productId: String?

        public var usbRedirectType: Int64?

        public var usbRuleType: Int64?

        public var vendorId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.deviceClass != nil {
                map["DeviceClass"] = self.deviceClass!
            }
            if self.deviceSubclass != nil {
                map["DeviceSubclass"] = self.deviceSubclass!
            }
            if self.productId != nil {
                map["ProductId"] = self.productId!
            }
            if self.usbRedirectType != nil {
                map["UsbRedirectType"] = self.usbRedirectType!
            }
            if self.usbRuleType != nil {
                map["UsbRuleType"] = self.usbRuleType!
            }
            if self.vendorId != nil {
                map["VendorId"] = self.vendorId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DeviceClass"] as? String {
                self.deviceClass = value
            }
            if let value = dict["DeviceSubclass"] as? String {
                self.deviceSubclass = value
            }
            if let value = dict["ProductId"] as? String {
                self.productId = value
            }
            if let value = dict["UsbRedirectType"] as? Int64 {
                self.usbRedirectType = value
            }
            if let value = dict["UsbRuleType"] as? Int64 {
                self.usbRuleType = value
            }
            if let value = dict["VendorId"] as? String {
                self.vendorId = value
            }
        }
    }
    public var adminAccess: String?

    public var appContentProtection: String?

    public var authorizeAccessPolicyRule: [ModifyPolicyGroupRequest.AuthorizeAccessPolicyRule]?

    public var authorizeSecurityPolicyRule: [ModifyPolicyGroupRequest.AuthorizeSecurityPolicyRule]?

    public var cameraRedirect: String?

    public var clientType: [ModifyPolicyGroupRequest.ClientType]?

    public var clipboard: String?

    public var deviceRedirects: [ModifyPolicyGroupRequest.DeviceRedirects]?

    public var deviceRules: [ModifyPolicyGroupRequest.DeviceRules]?

    public var domainList: String?

    public var domainResolveRule: [ModifyPolicyGroupRequest.DomainResolveRule]?

    public var domainResolveRuleType: String?

    public var endUserApplyAdminCoordinate: String?

    public var endUserGroupCoordinate: String?

    public var gpuAcceleration: String?

    public var html5Access: String?

    public var html5FileTransfer: String?

    public var internetCommunicationProtocol: String?

    public var localDrive: String?

    public var maxReconnectTime: Int32?

    public var name: String?

    public var netRedirect: String?

    public var policyGroupId: String?

    public var preemptLogin: String?

    public var preemptLoginUser: [String]?

    public var printerRedirection: String?

    public var recordContent: String?

    public var recordContentExpires: Int64?

    public var recording: String?

    public var recordingAudio: String?

    public var recordingDuration: Int32?

    public var recordingEndTime: String?

    public var recordingExpires: Int64?

    public var recordingFps: Int64?

    public var recordingStartTime: String?

    public var recordingUserNotify: String?

    public var recordingUserNotifyMessage: String?

    public var regionId: String?

    public var remoteCoordinate: String?

    public var revokeAccessPolicyRule: [ModifyPolicyGroupRequest.RevokeAccessPolicyRule]?

    public var revokeSecurityPolicyRule: [ModifyPolicyGroupRequest.RevokeSecurityPolicyRule]?

    public var scope: String?

    public var scopeValue: [String]?

    public var usbRedirect: String?

    public var usbSupplyRedirectRule: [ModifyPolicyGroupRequest.UsbSupplyRedirectRule]?

    public var videoRedirect: String?

    public var visualQuality: String?

    public var watermark: String?

    public var watermarkAntiCam: String?

    public var watermarkColor: Int32?

    public var watermarkDegree: Double?

    public var watermarkFontSize: Int32?

    public var watermarkFontStyle: String?

    public var watermarkPower: String?

    public var watermarkRowAmount: Int32?

    public var watermarkSecurity: String?

    public var watermarkTransparency: String?

    public var watermarkTransparencyValue: Int32?

    public var watermarkType: String?

    public var wyAssistant: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminAccess != nil {
            map["AdminAccess"] = self.adminAccess!
        }
        if self.appContentProtection != nil {
            map["AppContentProtection"] = self.appContentProtection!
        }
        if self.authorizeAccessPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeAccessPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeAccessPolicyRule"] = tmp
        }
        if self.authorizeSecurityPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.authorizeSecurityPolicyRule! {
                tmp.append(k.toMap())
            }
            map["AuthorizeSecurityPolicyRule"] = tmp
        }
        if self.cameraRedirect != nil {
            map["CameraRedirect"] = self.cameraRedirect!
        }
        if self.clientType != nil {
            var tmp : [Any] = []
            for k in self.clientType! {
                tmp.append(k.toMap())
            }
            map["ClientType"] = tmp
        }
        if self.clipboard != nil {
            map["Clipboard"] = self.clipboard!
        }
        if self.deviceRedirects != nil {
            var tmp : [Any] = []
            for k in self.deviceRedirects! {
                tmp.append(k.toMap())
            }
            map["DeviceRedirects"] = tmp
        }
        if self.deviceRules != nil {
            var tmp : [Any] = []
            for k in self.deviceRules! {
                tmp.append(k.toMap())
            }
            map["DeviceRules"] = tmp
        }
        if self.domainList != nil {
            map["DomainList"] = self.domainList!
        }
        if self.domainResolveRule != nil {
            var tmp : [Any] = []
            for k in self.domainResolveRule! {
                tmp.append(k.toMap())
            }
            map["DomainResolveRule"] = tmp
        }
        if self.domainResolveRuleType != nil {
            map["DomainResolveRuleType"] = self.domainResolveRuleType!
        }
        if self.endUserApplyAdminCoordinate != nil {
            map["EndUserApplyAdminCoordinate"] = self.endUserApplyAdminCoordinate!
        }
        if self.endUserGroupCoordinate != nil {
            map["EndUserGroupCoordinate"] = self.endUserGroupCoordinate!
        }
        if self.gpuAcceleration != nil {
            map["GpuAcceleration"] = self.gpuAcceleration!
        }
        if self.html5Access != nil {
            map["Html5Access"] = self.html5Access!
        }
        if self.html5FileTransfer != nil {
            map["Html5FileTransfer"] = self.html5FileTransfer!
        }
        if self.internetCommunicationProtocol != nil {
            map["InternetCommunicationProtocol"] = self.internetCommunicationProtocol!
        }
        if self.localDrive != nil {
            map["LocalDrive"] = self.localDrive!
        }
        if self.maxReconnectTime != nil {
            map["MaxReconnectTime"] = self.maxReconnectTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.netRedirect != nil {
            map["NetRedirect"] = self.netRedirect!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.preemptLogin != nil {
            map["PreemptLogin"] = self.preemptLogin!
        }
        if self.preemptLoginUser != nil {
            map["PreemptLoginUser"] = self.preemptLoginUser!
        }
        if self.printerRedirection != nil {
            map["PrinterRedirection"] = self.printerRedirection!
        }
        if self.recordContent != nil {
            map["RecordContent"] = self.recordContent!
        }
        if self.recordContentExpires != nil {
            map["RecordContentExpires"] = self.recordContentExpires!
        }
        if self.recording != nil {
            map["Recording"] = self.recording!
        }
        if self.recordingAudio != nil {
            map["RecordingAudio"] = self.recordingAudio!
        }
        if self.recordingDuration != nil {
            map["RecordingDuration"] = self.recordingDuration!
        }
        if self.recordingEndTime != nil {
            map["RecordingEndTime"] = self.recordingEndTime!
        }
        if self.recordingExpires != nil {
            map["RecordingExpires"] = self.recordingExpires!
        }
        if self.recordingFps != nil {
            map["RecordingFps"] = self.recordingFps!
        }
        if self.recordingStartTime != nil {
            map["RecordingStartTime"] = self.recordingStartTime!
        }
        if self.recordingUserNotify != nil {
            map["RecordingUserNotify"] = self.recordingUserNotify!
        }
        if self.recordingUserNotifyMessage != nil {
            map["RecordingUserNotifyMessage"] = self.recordingUserNotifyMessage!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.remoteCoordinate != nil {
            map["RemoteCoordinate"] = self.remoteCoordinate!
        }
        if self.revokeAccessPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.revokeAccessPolicyRule! {
                tmp.append(k.toMap())
            }
            map["RevokeAccessPolicyRule"] = tmp
        }
        if self.revokeSecurityPolicyRule != nil {
            var tmp : [Any] = []
            for k in self.revokeSecurityPolicyRule! {
                tmp.append(k.toMap())
            }
            map["RevokeSecurityPolicyRule"] = tmp
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeValue != nil {
            map["ScopeValue"] = self.scopeValue!
        }
        if self.usbRedirect != nil {
            map["UsbRedirect"] = self.usbRedirect!
        }
        if self.usbSupplyRedirectRule != nil {
            var tmp : [Any] = []
            for k in self.usbSupplyRedirectRule! {
                tmp.append(k.toMap())
            }
            map["UsbSupplyRedirectRule"] = tmp
        }
        if self.videoRedirect != nil {
            map["VideoRedirect"] = self.videoRedirect!
        }
        if self.visualQuality != nil {
            map["VisualQuality"] = self.visualQuality!
        }
        if self.watermark != nil {
            map["Watermark"] = self.watermark!
        }
        if self.watermarkAntiCam != nil {
            map["WatermarkAntiCam"] = self.watermarkAntiCam!
        }
        if self.watermarkColor != nil {
            map["WatermarkColor"] = self.watermarkColor!
        }
        if self.watermarkDegree != nil {
            map["WatermarkDegree"] = self.watermarkDegree!
        }
        if self.watermarkFontSize != nil {
            map["WatermarkFontSize"] = self.watermarkFontSize!
        }
        if self.watermarkFontStyle != nil {
            map["WatermarkFontStyle"] = self.watermarkFontStyle!
        }
        if self.watermarkPower != nil {
            map["WatermarkPower"] = self.watermarkPower!
        }
        if self.watermarkRowAmount != nil {
            map["WatermarkRowAmount"] = self.watermarkRowAmount!
        }
        if self.watermarkSecurity != nil {
            map["WatermarkSecurity"] = self.watermarkSecurity!
        }
        if self.watermarkTransparency != nil {
            map["WatermarkTransparency"] = self.watermarkTransparency!
        }
        if self.watermarkTransparencyValue != nil {
            map["WatermarkTransparencyValue"] = self.watermarkTransparencyValue!
        }
        if self.watermarkType != nil {
            map["WatermarkType"] = self.watermarkType!
        }
        if self.wyAssistant != nil {
            map["WyAssistant"] = self.wyAssistant!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdminAccess"] as? String {
            self.adminAccess = value
        }
        if let value = dict["AppContentProtection"] as? String {
            self.appContentProtection = value
        }
        if let value = dict["AuthorizeAccessPolicyRule"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.AuthorizeAccessPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.AuthorizeAccessPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeAccessPolicyRule = tmp
        }
        if let value = dict["AuthorizeSecurityPolicyRule"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.AuthorizeSecurityPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.AuthorizeSecurityPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.authorizeSecurityPolicyRule = tmp
        }
        if let value = dict["CameraRedirect"] as? String {
            self.cameraRedirect = value
        }
        if let value = dict["ClientType"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.ClientType] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.ClientType()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.clientType = tmp
        }
        if let value = dict["Clipboard"] as? String {
            self.clipboard = value
        }
        if let value = dict["DeviceRedirects"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.DeviceRedirects] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.DeviceRedirects()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRedirects = tmp
        }
        if let value = dict["DeviceRules"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.DeviceRules] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.DeviceRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deviceRules = tmp
        }
        if let value = dict["DomainList"] as? String {
            self.domainList = value
        }
        if let value = dict["DomainResolveRule"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.DomainResolveRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.DomainResolveRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.domainResolveRule = tmp
        }
        if let value = dict["DomainResolveRuleType"] as? String {
            self.domainResolveRuleType = value
        }
        if let value = dict["EndUserApplyAdminCoordinate"] as? String {
            self.endUserApplyAdminCoordinate = value
        }
        if let value = dict["EndUserGroupCoordinate"] as? String {
            self.endUserGroupCoordinate = value
        }
        if let value = dict["GpuAcceleration"] as? String {
            self.gpuAcceleration = value
        }
        if let value = dict["Html5Access"] as? String {
            self.html5Access = value
        }
        if let value = dict["Html5FileTransfer"] as? String {
            self.html5FileTransfer = value
        }
        if let value = dict["InternetCommunicationProtocol"] as? String {
            self.internetCommunicationProtocol = value
        }
        if let value = dict["LocalDrive"] as? String {
            self.localDrive = value
        }
        if let value = dict["MaxReconnectTime"] as? Int32 {
            self.maxReconnectTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NetRedirect"] as? String {
            self.netRedirect = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PreemptLogin"] as? String {
            self.preemptLogin = value
        }
        if let value = dict["PreemptLoginUser"] as? [String] {
            self.preemptLoginUser = value
        }
        if let value = dict["PrinterRedirection"] as? String {
            self.printerRedirection = value
        }
        if let value = dict["RecordContent"] as? String {
            self.recordContent = value
        }
        if let value = dict["RecordContentExpires"] as? Int64 {
            self.recordContentExpires = value
        }
        if let value = dict["Recording"] as? String {
            self.recording = value
        }
        if let value = dict["RecordingAudio"] as? String {
            self.recordingAudio = value
        }
        if let value = dict["RecordingDuration"] as? Int32 {
            self.recordingDuration = value
        }
        if let value = dict["RecordingEndTime"] as? String {
            self.recordingEndTime = value
        }
        if let value = dict["RecordingExpires"] as? Int64 {
            self.recordingExpires = value
        }
        if let value = dict["RecordingFps"] as? Int64 {
            self.recordingFps = value
        }
        if let value = dict["RecordingStartTime"] as? String {
            self.recordingStartTime = value
        }
        if let value = dict["RecordingUserNotify"] as? String {
            self.recordingUserNotify = value
        }
        if let value = dict["RecordingUserNotifyMessage"] as? String {
            self.recordingUserNotifyMessage = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RemoteCoordinate"] as? String {
            self.remoteCoordinate = value
        }
        if let value = dict["RevokeAccessPolicyRule"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.RevokeAccessPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.RevokeAccessPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.revokeAccessPolicyRule = tmp
        }
        if let value = dict["RevokeSecurityPolicyRule"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.RevokeSecurityPolicyRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.RevokeSecurityPolicyRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.revokeSecurityPolicyRule = tmp
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeValue"] as? [String] {
            self.scopeValue = value
        }
        if let value = dict["UsbRedirect"] as? String {
            self.usbRedirect = value
        }
        if let value = dict["UsbSupplyRedirectRule"] as? [Any?] {
            var tmp : [ModifyPolicyGroupRequest.UsbSupplyRedirectRule] = []
            for v in value {
                if v != nil {
                    var model = ModifyPolicyGroupRequest.UsbSupplyRedirectRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.usbSupplyRedirectRule = tmp
        }
        if let value = dict["VideoRedirect"] as? String {
            self.videoRedirect = value
        }
        if let value = dict["VisualQuality"] as? String {
            self.visualQuality = value
        }
        if let value = dict["Watermark"] as? String {
            self.watermark = value
        }
        if let value = dict["WatermarkAntiCam"] as? String {
            self.watermarkAntiCam = value
        }
        if let value = dict["WatermarkColor"] as? Int32 {
            self.watermarkColor = value
        }
        if let value = dict["WatermarkDegree"] as? Double {
            self.watermarkDegree = value
        }
        if let value = dict["WatermarkFontSize"] as? Int32 {
            self.watermarkFontSize = value
        }
        if let value = dict["WatermarkFontStyle"] as? String {
            self.watermarkFontStyle = value
        }
        if let value = dict["WatermarkPower"] as? String {
            self.watermarkPower = value
        }
        if let value = dict["WatermarkRowAmount"] as? Int32 {
            self.watermarkRowAmount = value
        }
        if let value = dict["WatermarkSecurity"] as? String {
            self.watermarkSecurity = value
        }
        if let value = dict["WatermarkTransparency"] as? String {
            self.watermarkTransparency = value
        }
        if let value = dict["WatermarkTransparencyValue"] as? Int32 {
            self.watermarkTransparencyValue = value
        }
        if let value = dict["WatermarkType"] as? String {
            self.watermarkType = value
        }
        if let value = dict["WyAssistant"] as? String {
            self.wyAssistant = value
        }
    }
}

public class ModifyPolicyGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyPolicyGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPolicyGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyPolicyGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyResourceCenterPolicyRequest : Tea.TeaModel {
    public var policyGroupIds: [String]?

    public var policyGroupType: String?

    public var productType: String?

    public var resourceIds: [String]?

    public var resourceRegionId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyGroupIds != nil {
            map["PolicyGroupIds"] = self.policyGroupIds!
        }
        if self.policyGroupType != nil {
            map["PolicyGroupType"] = self.policyGroupType!
        }
        if self.productType != nil {
            map["ProductType"] = self.productType!
        }
        if self.resourceIds != nil {
            map["ResourceIds"] = self.resourceIds!
        }
        if self.resourceRegionId != nil {
            map["ResourceRegionId"] = self.resourceRegionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyGroupIds"] as? [String] {
            self.policyGroupIds = value
        }
        if let value = dict["PolicyGroupType"] as? String {
            self.policyGroupType = value
        }
        if let value = dict["ProductType"] as? String {
            self.productType = value
        }
        if let value = dict["ResourceIds"] as? [String] {
            self.resourceIds = value
        }
        if let value = dict["ResourceRegionId"] as? String {
            self.resourceRegionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class ModifyResourceCenterPolicyResponseBody : Tea.TeaModel {
    public class ModifyResults : Tea.TeaModel {
        public var checkResult: Bool?

        public var resourceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.checkResult != nil {
                map["CheckResult"] = self.checkResult!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CheckResult"] as? Bool {
                self.checkResult = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
        }
    }
    public var modifyResults: [ModifyResourceCenterPolicyResponseBody.ModifyResults]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modifyResults != nil {
            var tmp : [Any] = []
            for k in self.modifyResults! {
                tmp.append(k.toMap())
            }
            map["ModifyResults"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModifyResults"] as? [Any?] {
            var tmp : [ModifyResourceCenterPolicyResponseBody.ModifyResults] = []
            for v in value {
                if v != nil {
                    var model = ModifyResourceCenterPolicyResponseBody.ModifyResults()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.modifyResults = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyResourceCenterPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyResourceCenterPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyResourceCenterPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyTemplateRequest : Tea.TeaModel {
    public class DataDiskList : Tea.TeaModel {
        public var performanceLevel: String?

        public var size: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.performanceLevel != nil {
                map["PerformanceLevel"] = self.performanceLevel!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PerformanceLevel"] as? String {
                self.performanceLevel = value
            }
            if let value = dict["Size"] as? Int32 {
                self.size = value
            }
        }
    }
    public class RegionConfigList : Tea.TeaModel {
        public var officeSiteId: String?

        public var regionId: String?

        public var resourceInstanceType: String?

        public var snapshotPolicyId: String?

        public var subnetId: String?

        public var volumeEncryptionEnable: Bool?

        public var volumeEncryptionKey: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.officeSiteId != nil {
                map["OfficeSiteId"] = self.officeSiteId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceInstanceType != nil {
                map["ResourceInstanceType"] = self.resourceInstanceType!
            }
            if self.snapshotPolicyId != nil {
                map["SnapshotPolicyId"] = self.snapshotPolicyId!
            }
            if self.subnetId != nil {
                map["SubnetId"] = self.subnetId!
            }
            if self.volumeEncryptionEnable != nil {
                map["VolumeEncryptionEnable"] = self.volumeEncryptionEnable!
            }
            if self.volumeEncryptionKey != nil {
                map["VolumeEncryptionKey"] = self.volumeEncryptionKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OfficeSiteId"] as? String {
                self.officeSiteId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceInstanceType"] as? String {
                self.resourceInstanceType = value
            }
            if let value = dict["SnapshotPolicyId"] as? String {
                self.snapshotPolicyId = value
            }
            if let value = dict["SubnetId"] as? String {
                self.subnetId = value
            }
            if let value = dict["VolumeEncryptionEnable"] as? Bool {
                self.volumeEncryptionEnable = value
            }
            if let value = dict["VolumeEncryptionKey"] as? String {
                self.volumeEncryptionKey = value
            }
        }
    }
    public class ResourceTagList : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class SiteConfigList : Tea.TeaModel {
        public var appRuleId: String?

        public var siteId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appRuleId != nil {
                map["AppRuleId"] = self.appRuleId!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppRuleId"] as? String {
                self.appRuleId = value
            }
            if let value = dict["SiteId"] as? String {
                self.siteId = value
            }
        }
    }
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var chargeType: String?

    public var dataDiskList: [ModifyTemplateRequest.DataDiskList]?

    public var defaultLanguage: String?

    public var description_: String?

    public var imageId: String?

    public var period: Int32?

    public var periodUnit: String?

    public var policyGroupId: String?

    public var postPaidAfterUsedUp: Bool?

    public var regionConfigList: [ModifyTemplateRequest.RegionConfigList]?

    public var resourceGroupId: String?

    public var resourceTagList: [ModifyTemplateRequest.ResourceTagList]?

    public var siteConfigList: [ModifyTemplateRequest.SiteConfigList]?

    public var systemDiskPerformanceLevel: String?

    public var systemDiskSize: Int32?

    public var templateId: String?

    public var templateName: String?

    public var timerGroupId: String?

    public var userDuration: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.dataDiskList != nil {
            var tmp : [Any] = []
            for k in self.dataDiskList! {
                tmp.append(k.toMap())
            }
            map["DataDiskList"] = tmp
        }
        if self.defaultLanguage != nil {
            map["DefaultLanguage"] = self.defaultLanguage!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.policyGroupId != nil {
            map["PolicyGroupId"] = self.policyGroupId!
        }
        if self.postPaidAfterUsedUp != nil {
            map["PostPaidAfterUsedUp"] = self.postPaidAfterUsedUp!
        }
        if self.regionConfigList != nil {
            var tmp : [Any] = []
            for k in self.regionConfigList! {
                tmp.append(k.toMap())
            }
            map["RegionConfigList"] = tmp
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.resourceTagList != nil {
            var tmp : [Any] = []
            for k in self.resourceTagList! {
                tmp.append(k.toMap())
            }
            map["ResourceTagList"] = tmp
        }
        if self.siteConfigList != nil {
            var tmp : [Any] = []
            for k in self.siteConfigList! {
                tmp.append(k.toMap())
            }
            map["SiteConfigList"] = tmp
        }
        if self.systemDiskPerformanceLevel != nil {
            map["SystemDiskPerformanceLevel"] = self.systemDiskPerformanceLevel!
        }
        if self.systemDiskSize != nil {
            map["SystemDiskSize"] = self.systemDiskSize!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.timerGroupId != nil {
            map["TimerGroupId"] = self.timerGroupId!
        }
        if self.userDuration != nil {
            map["UserDuration"] = self.userDuration!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["DataDiskList"] as? [Any?] {
            var tmp : [ModifyTemplateRequest.DataDiskList] = []
            for v in value {
                if v != nil {
                    var model = ModifyTemplateRequest.DataDiskList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataDiskList = tmp
        }
        if let value = dict["DefaultLanguage"] as? String {
            self.defaultLanguage = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PolicyGroupId"] as? String {
            self.policyGroupId = value
        }
        if let value = dict["PostPaidAfterUsedUp"] as? Bool {
            self.postPaidAfterUsedUp = value
        }
        if let value = dict["RegionConfigList"] as? [Any?] {
            var tmp : [ModifyTemplateRequest.RegionConfigList] = []
            for v in value {
                if v != nil {
                    var model = ModifyTemplateRequest.RegionConfigList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.regionConfigList = tmp
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["ResourceTagList"] as? [Any?] {
            var tmp : [ModifyTemplateRequest.ResourceTagList] = []
            for v in value {
                if v != nil {
                    var model = ModifyTemplateRequest.ResourceTagList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceTagList = tmp
        }
        if let value = dict["SiteConfigList"] as? [Any?] {
            var tmp : [ModifyTemplateRequest.SiteConfigList] = []
            for v in value {
                if v != nil {
                    var model = ModifyTemplateRequest.SiteConfigList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.siteConfigList = tmp
        }
        if let value = dict["SystemDiskPerformanceLevel"] as? String {
            self.systemDiskPerformanceLevel = value
        }
        if let value = dict["SystemDiskSize"] as? Int32 {
            self.systemDiskSize = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TimerGroupId"] as? String {
            self.timerGroupId = value
        }
        if let value = dict["UserDuration"] as? Int32 {
            self.userDuration = value
        }
    }
}

public class ModifyTemplateResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyTemplateBaseInfoRequest : Tea.TeaModel {
    public var description_: String?

    public var templateId: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class ModifyTemplateBaseInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ModifyTemplateBaseInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyTemplateBaseInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyTemplateBaseInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyTimerGroupRequest : Tea.TeaModel {
    public class ConfigTimers : Tea.TeaModel {
        public class SegmentTimers : Tea.TeaModel {
            public var endCronExpression: String?

            public var enforce: Bool?

            public var interval: Int32?

            public var notificationTime: Int32?

            public var operationType: String?

            public var processWhitelist: [String]?

            public var resetType: String?

            public var startCronExpression: String?

            public var timerOrder: Int32?

            public var timezone: String?

            public var triggerType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endCronExpression != nil {
                    map["EndCronExpression"] = self.endCronExpression!
                }
                if self.enforce != nil {
                    map["Enforce"] = self.enforce!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.notificationTime != nil {
                    map["NotificationTime"] = self.notificationTime!
                }
                if self.operationType != nil {
                    map["OperationType"] = self.operationType!
                }
                if self.processWhitelist != nil {
                    map["ProcessWhitelist"] = self.processWhitelist!
                }
                if self.resetType != nil {
                    map["ResetType"] = self.resetType!
                }
                if self.startCronExpression != nil {
                    map["StartCronExpression"] = self.startCronExpression!
                }
                if self.timerOrder != nil {
                    map["TimerOrder"] = self.timerOrder!
                }
                if self.timezone != nil {
                    map["Timezone"] = self.timezone!
                }
                if self.triggerType != nil {
                    map["TriggerType"] = self.triggerType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndCronExpression"] as? String {
                    self.endCronExpression = value
                }
                if let value = dict["Enforce"] as? Bool {
                    self.enforce = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["NotificationTime"] as? Int32 {
                    self.notificationTime = value
                }
                if let value = dict["OperationType"] as? String {
                    self.operationType = value
                }
                if let value = dict["ProcessWhitelist"] as? [String] {
                    self.processWhitelist = value
                }
                if let value = dict["ResetType"] as? String {
                    self.resetType = value
                }
                if let value = dict["StartCronExpression"] as? String {
                    self.startCronExpression = value
                }
                if let value = dict["TimerOrder"] as? Int32 {
                    self.timerOrder = value
                }
                if let value = dict["Timezone"] as? String {
                    self.timezone = value
                }
                if let value = dict["TriggerType"] as? String {
                    self.triggerType = value
                }
            }
        }
        public var allowClientSetting: Bool?

        public var cronExpression: String?

        public var enforce: Bool?

        public var interval: Int32?

        public var notificationTime: Int32?

        public var operationType: String?

        public var processWhitelist: [String]?

        public var resetType: String?

        public var segmentTimers: [ModifyTimerGroupRequest.ConfigTimers.SegmentTimers]?

        public var timerType: String?

        public var triggerType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowClientSetting != nil {
                map["AllowClientSetting"] = self.allowClientSetting!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.enforce != nil {
                map["Enforce"] = self.enforce!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.notificationTime != nil {
                map["NotificationTime"] = self.notificationTime!
            }
            if self.operationType != nil {
                map["OperationType"] = self.operationType!
            }
            if self.processWhitelist != nil {
                map["ProcessWhitelist"] = self.processWhitelist!
            }
            if self.resetType != nil {
                map["ResetType"] = self.resetType!
            }
            if self.segmentTimers != nil {
                var tmp : [Any] = []
                for k in self.segmentTimers! {
                    tmp.append(k.toMap())
                }
                map["SegmentTimers"] = tmp
            }
            if self.timerType != nil {
                map["TimerType"] = self.timerType!
            }
            if self.triggerType != nil {
                map["TriggerType"] = self.triggerType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AllowClientSetting"] as? Bool {
                self.allowClientSetting = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["Enforce"] as? Bool {
                self.enforce = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["NotificationTime"] as? Int32 {
                self.notificationTime = value
            }
            if let value = dict["OperationType"] as? String {
                self.operationType = value
            }
            if let value = dict["ProcessWhitelist"] as? [String] {
                self.processWhitelist = value
            }
            if let value = dict["ResetType"] as? String {
                self.resetType = value
            }
            if let value = dict["SegmentTimers"] as? [Any?] {
                var tmp : [ModifyTimerGroupRequest.ConfigTimers.SegmentTimers] = []
                for v in value {
                    if v != nil {
                        var model = ModifyTimerGroupRequest.ConfigTimers.SegmentTimers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.segmentTimers = tmp
            }
            if let value = dict["TimerType"] as? String {
                self.timerType = value
            }
            if let value = dict["TriggerType"] as? String {
                self.triggerType = value
            }
        }
    }
    public var configTimers: [ModifyTimerGroupRequest.ConfigTimers]?

    public var description_: String?

    public var groupId: String?

    public var name: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configTimers != nil {
            var tmp : [Any] = []
            for k in self.configTimers! {
                tmp.append(k.toMap())
            }
            map["ConfigTimers"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigTimers"] as? [Any?] {
            var tmp : [ModifyTimerGroupRequest.ConfigTimers] = []
            for v in value {
                if v != nil {
                    var model = ModifyTimerGroupRequest.ConfigTimers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configTimers = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyTimerGroupResponseBody : Tea.TeaModel {
    public var groupId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyTimerGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyTimerGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyTimerGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyUserEntitlementRequest : Tea.TeaModel {
    public var authorizeDesktopId: [String]?

    public var endUserId: [String]?

    public var regionId: String?

    public var revokeDesktopId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizeDesktopId != nil {
            map["AuthorizeDesktopId"] = self.authorizeDesktopId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.revokeDesktopId != nil {
            map["RevokeDesktopId"] = self.revokeDesktopId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizeDesktopId"] as? [String] {
            self.authorizeDesktopId = value
        }
        if let value = dict["EndUserId"] as? [String] {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RevokeDesktopId"] as? [String] {
            self.revokeDesktopId = value
        }
    }
}

public class ModifyUserEntitlementResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyUserEntitlementResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserEntitlementResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyUserEntitlementResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyUserToDesktopGroupRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var newEndUserIds: [String]?

    public var oldEndUserIds: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.newEndUserIds != nil {
            map["NewEndUserIds"] = self.newEndUserIds!
        }
        if self.oldEndUserIds != nil {
            map["OldEndUserIds"] = self.oldEndUserIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["NewEndUserIds"] as? [String] {
            self.newEndUserIds = value
        }
        if let value = dict["OldEndUserIds"] as? [String] {
            self.oldEndUserIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ModifyUserToDesktopGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyUserToDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserToDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyUserToDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MoveCdsFileRequest : Tea.TeaModel {
    public var cdsId: String?

    public var conflictPolicy: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var parentFolderId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.conflictPolicy != nil {
            map["ConflictPolicy"] = self.conflictPolicy!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.parentFolderId != nil {
            map["ParentFolderId"] = self.parentFolderId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["ConflictPolicy"] as? String {
            self.conflictPolicy = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ParentFolderId"] as? String {
            self.parentFolderId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class MoveCdsFileResponseBody : Tea.TeaModel {
    public class MoveCdsFileModel : Tea.TeaModel {
        public var asyncTaskId: String?

        public var exist: Bool?

        public var fileId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncTaskId != nil {
                map["AsyncTaskId"] = self.asyncTaskId!
            }
            if self.exist != nil {
                map["Exist"] = self.exist!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsyncTaskId"] as? String {
                self.asyncTaskId = value
            }
            if let value = dict["Exist"] as? Bool {
                self.exist = value
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var moveCdsFileModel: MoveCdsFileResponseBody.MoveCdsFileModel?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.moveCdsFileModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.moveCdsFileModel != nil {
            map["MoveCdsFileModel"] = self.moveCdsFileModel?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["MoveCdsFileModel"] as? [String: Any?] {
            var model = MoveCdsFileResponseBody.MoveCdsFileModel()
            model.fromMap(value)
            self.moveCdsFileModel = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class MoveCdsFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MoveCdsFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MoveCdsFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RebootDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var osUpdate: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.osUpdate != nil {
            map["OsUpdate"] = self.osUpdate!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["OsUpdate"] as? Bool {
            self.osUpdate = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class RebootDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RebootDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RebootDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RebootDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RebuildDesktopsRequest : Tea.TeaModel {
    public var afterStatus: String?

    public var desktopId: [String]?

    public var imageId: String?

    public var language: String?

    public var operateType: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.afterStatus != nil {
            map["AfterStatus"] = self.afterStatus!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.operateType != nil {
            map["OperateType"] = self.operateType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AfterStatus"] as? String {
            self.afterStatus = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["OperateType"] as? String {
            self.operateType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class RebuildDesktopsResponseBody : Tea.TeaModel {
    public class RebuildResults : Tea.TeaModel {
        public var code: String?

        public var desktopId: String?

        public var message: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.desktopId != nil {
                map["DesktopId"] = self.desktopId!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["DesktopId"] as? String {
                self.desktopId = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
        }
    }
    public var rebuildResults: [RebuildDesktopsResponseBody.RebuildResults]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rebuildResults != nil {
            var tmp : [Any] = []
            for k in self.rebuildResults! {
                tmp.append(k.toMap())
            }
            map["RebuildResults"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RebuildResults"] as? [Any?] {
            var tmp : [RebuildDesktopsResponseBody.RebuildResults] = []
            for v in value {
                if v != nil {
                    var model = RebuildDesktopsResponseBody.RebuildResults()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rebuildResults = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RebuildDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RebuildDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RebuildDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReleaseIpAddressRequest : Tea.TeaModel {
    public var eipId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eipId != nil {
            map["EipId"] = self.eipId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EipId"] as? String {
            self.eipId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ReleaseIpAddressResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReleaseIpAddressResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReleaseIpAddressResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReleaseIpAddressResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveFilePermissionRequest : Tea.TeaModel {
    public class MemberList : Tea.TeaModel {
        public class CdsIdentity : Tea.TeaModel {
            public var id: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var cdsIdentity: RemoveFilePermissionRequest.MemberList.CdsIdentity?

        public var roleId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cdsIdentity?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cdsIdentity != nil {
                map["CdsIdentity"] = self.cdsIdentity?.toMap()
            }
            if self.roleId != nil {
                map["RoleId"] = self.roleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CdsIdentity"] as? [String: Any?] {
                var model = RemoveFilePermissionRequest.MemberList.CdsIdentity()
                model.fromMap(value)
                self.cdsIdentity = model
            }
            if let value = dict["RoleId"] as? String {
                self.roleId = value
            }
        }
    }
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var memberList: [RemoveFilePermissionRequest.MemberList]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.memberList != nil {
            var tmp : [Any] = []
            for k in self.memberList! {
                tmp.append(k.toMap())
            }
            map["MemberList"] = tmp
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MemberList"] as? [Any?] {
            var tmp : [RemoveFilePermissionRequest.MemberList] = []
            for v in value {
                if v != nil {
                    var model = RemoveFilePermissionRequest.MemberList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.memberList = tmp
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class RemoveFilePermissionShrinkRequest : Tea.TeaModel {
    public var cdsId: String?

    public var endUserId: String?

    public var fileId: String?

    public var groupId: String?

    public var memberListShrink: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cdsId != nil {
            map["CdsId"] = self.cdsId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.memberListShrink != nil {
            map["MemberList"] = self.memberListShrink!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CdsId"] as? String {
            self.cdsId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["MemberList"] as? String {
            self.memberListShrink = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class RemoveFilePermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveFilePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveFilePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveFilePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveUserFromDesktopGroupRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var desktopGroupIds: [String]?

    public var endUserIds: [String]?

    public var regionId: String?

    public var simpleUserGroupId: String?

    public var userGroupName: String?

    public var userOuPath: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupIds != nil {
            map["DesktopGroupIds"] = self.desktopGroupIds!
        }
        if self.endUserIds != nil {
            map["EndUserIds"] = self.endUserIds!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.simpleUserGroupId != nil {
            map["SimpleUserGroupId"] = self.simpleUserGroupId!
        }
        if self.userGroupName != nil {
            map["UserGroupName"] = self.userGroupName!
        }
        if self.userOuPath != nil {
            map["UserOuPath"] = self.userOuPath!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupIds"] as? [String] {
            self.desktopGroupIds = value
        }
        if let value = dict["EndUserIds"] as? [String] {
            self.endUserIds = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SimpleUserGroupId"] as? String {
            self.simpleUserGroupId = value
        }
        if let value = dict["UserGroupName"] as? String {
            self.userGroupName = value
        }
        if let value = dict["UserOuPath"] as? String {
            self.userOuPath = value
        }
    }
}

public class RemoveUserFromDesktopGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveUserFromDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUserFromDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveUserFromDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveUserFromDesktopOversoldUserGroupRequest : Tea.TeaModel {
    public var endUserId: String?

    public var oversoldGroupId: String?

    public var userDesktopId: String?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.userDesktopId != nil {
            map["UserDesktopId"] = self.userDesktopId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["UserDesktopId"] as? String {
            self.userDesktopId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class RemoveUserFromDesktopOversoldUserGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveUserFromDesktopOversoldUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUserFromDesktopOversoldUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveUserFromDesktopOversoldUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewDesktopGroupRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var desktopGroupId: String?

    public var period: Int32?

    public var periodUnit: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class RenewDesktopGroupResponseBody : Tea.TeaModel {
    public var orderId: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? [String] {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RenewDesktopGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewDesktopGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewDesktopGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewDesktopOversoldGroupRequest : Tea.TeaModel {
    public var oversoldGroupId: String?

    public var period: Int32?

    public var periodUnit: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.oversoldGroupId != nil {
            map["OversoldGroupId"] = self.oversoldGroupId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OversoldGroupId"] as? String {
            self.oversoldGroupId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
    }
}

public class RenewDesktopOversoldGroupResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var orderId: Int64?

        public var oversoldGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            if self.oversoldGroupId != nil {
                map["OversoldGroupId"] = self.oversoldGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
            if let value = dict["OversoldGroupId"] as? String {
                self.oversoldGroupId = value
            }
        }
    }
    public var data: RenewDesktopOversoldGroupResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = RenewDesktopOversoldGroupResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RenewDesktopOversoldGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewDesktopOversoldGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewDesktopOversoldGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewDesktopsRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var desktopId: [String]?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class RenewDesktopsResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RenewDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RenewNetworkPackagesRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var networkPackageId: [String]?

    public var period: Int32?

    public var periodUnit: String?

    public var promotionId: String?

    public var regionId: String?

    public var resellerOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.networkPackageId != nil {
            map["NetworkPackageId"] = self.networkPackageId!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.periodUnit != nil {
            map["PeriodUnit"] = self.periodUnit!
        }
        if self.promotionId != nil {
            map["PromotionId"] = self.promotionId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resellerOwnerUid != nil {
            map["ResellerOwnerUid"] = self.resellerOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["NetworkPackageId"] as? [String] {
            self.networkPackageId = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PeriodUnit"] as? String {
            self.periodUnit = value
        }
        if let value = dict["PromotionId"] as? String {
            self.promotionId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResellerOwnerUid"] as? Int64 {
            self.resellerOwnerUid = value
        }
    }
}

public class RenewNetworkPackagesResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RenewNetworkPackagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RenewNetworkPackagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RenewNetworkPackagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetDesktopsRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var desktopGroupIds: [String]?

    public var desktopId: [String]?

    public var imageId: String?

    public var lastRetryTime: Int64?

    public var payType: String?

    public var regionId: String?

    public var resetScope: String?

    public var resetType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopGroupIds != nil {
            map["DesktopGroupIds"] = self.desktopGroupIds!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.lastRetryTime != nil {
            map["LastRetryTime"] = self.lastRetryTime!
        }
        if self.payType != nil {
            map["PayType"] = self.payType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resetScope != nil {
            map["ResetScope"] = self.resetScope!
        }
        if self.resetType != nil {
            map["ResetType"] = self.resetType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopGroupIds"] as? [String] {
            self.desktopGroupIds = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["LastRetryTime"] as? Int64 {
            self.lastRetryTime = value
        }
        if let value = dict["PayType"] as? String {
            self.payType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResetScope"] as? String {
            self.resetScope = value
        }
        if let value = dict["ResetType"] as? String {
            self.resetType = value
        }
    }
}

public class ResetDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetNASDefaultMountTargetRequest : Tea.TeaModel {
    public var fileSystemId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileSystemId != nil {
            map["FileSystemId"] = self.fileSystemId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileSystemId"] as? String {
            self.fileSystemId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class ResetNASDefaultMountTargetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetNASDefaultMountTargetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetNASDefaultMountTargetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetNASDefaultMountTargetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetSnapshotRequest : Tea.TeaModel {
    public var regionId: String?

    public var snapshotId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.snapshotId != nil {
            map["SnapshotId"] = self.snapshotId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SnapshotId"] as? String {
            self.snapshotId = value
        }
    }
}

public class ResetSnapshotResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetSnapshotResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetSnapshotResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetSnapshotResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevokeCoordinatePrivilegeRequest : Tea.TeaModel {
    public var coId: String?

    public var endUserId: String?

    public var regionId: String?

    public var userType: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coId != nil {
            map["CoId"] = self.coId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userType != nil {
            map["UserType"] = self.userType!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoId"] as? String {
            self.coId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserType"] as? String {
            self.userType = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class RevokeCoordinatePrivilegeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RevokeCoordinatePrivilegeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevokeCoordinatePrivilegeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevokeCoordinatePrivilegeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunCommandRequest : Tea.TeaModel {
    public var commandContent: String?

    public var commandRole: String?

    public var contentEncoding: String?

    public var desktopId: [String]?

    public var endUserId: String?

    public var regionId: String?

    public var timeout: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commandContent != nil {
            map["CommandContent"] = self.commandContent!
        }
        if self.commandRole != nil {
            map["CommandRole"] = self.commandRole!
        }
        if self.contentEncoding != nil {
            map["ContentEncoding"] = self.contentEncoding!
        }
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.endUserId != nil {
            map["EndUserId"] = self.endUserId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.timeout != nil {
            map["Timeout"] = self.timeout!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommandContent"] as? String {
            self.commandContent = value
        }
        if let value = dict["CommandRole"] as? String {
            self.commandRole = value
        }
        if let value = dict["ContentEncoding"] as? String {
            self.contentEncoding = value
        }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["EndUserId"] as? String {
            self.endUserId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Timeout"] as? Int64 {
            self.timeout = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class RunCommandResponseBody : Tea.TeaModel {
    public var invokeId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.invokeId != nil {
            map["InvokeId"] = self.invokeId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InvokeId"] as? String {
            self.invokeId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunCommandResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunCommandResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunCommandResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendVerifyCodeRequest : Tea.TeaModel {
    public var extraInfo: String?

    public var regionId: String?

    public var verifyCodeAction: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extraInfo != nil {
            map["ExtraInfo"] = self.extraInfo!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.verifyCodeAction != nil {
            map["VerifyCodeAction"] = self.verifyCodeAction!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExtraInfo"] as? String {
            self.extraInfo = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VerifyCodeAction"] as? String {
            self.verifyCodeAction = value
        }
    }
}

public class SendVerifyCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SendVerifyCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendVerifyCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendVerifyCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDesktopGroupScaleTimerRequest : Tea.TeaModel {
    public class ScaleTimerInfos : Tea.TeaModel {
        public var buyResAmount: Int32?

        public var cron: String?

        public var keepDuration: Int64?

        public var loadPolicy: Int32?

        public var maxResAmount: Int32?

        public var minResAmount: Int32?

        public var ratioThreshold: Double?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.buyResAmount != nil {
                map["BuyResAmount"] = self.buyResAmount!
            }
            if self.cron != nil {
                map["Cron"] = self.cron!
            }
            if self.keepDuration != nil {
                map["KeepDuration"] = self.keepDuration!
            }
            if self.loadPolicy != nil {
                map["LoadPolicy"] = self.loadPolicy!
            }
            if self.maxResAmount != nil {
                map["MaxResAmount"] = self.maxResAmount!
            }
            if self.minResAmount != nil {
                map["MinResAmount"] = self.minResAmount!
            }
            if self.ratioThreshold != nil {
                map["RatioThreshold"] = self.ratioThreshold!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BuyResAmount"] as? Int32 {
                self.buyResAmount = value
            }
            if let value = dict["Cron"] as? String {
                self.cron = value
            }
            if let value = dict["KeepDuration"] as? Int64 {
                self.keepDuration = value
            }
            if let value = dict["LoadPolicy"] as? Int32 {
                self.loadPolicy = value
            }
            if let value = dict["MaxResAmount"] as? Int32 {
                self.maxResAmount = value
            }
            if let value = dict["MinResAmount"] as? Int32 {
                self.minResAmount = value
            }
            if let value = dict["RatioThreshold"] as? Double {
                self.ratioThreshold = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var desktopGroupId: String?

    public var regionId: String?

    public var scaleTimerInfos: [SetDesktopGroupScaleTimerRequest.ScaleTimerInfos]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.scaleTimerInfos != nil {
            var tmp : [Any] = []
            for k in self.scaleTimerInfos! {
                tmp.append(k.toMap())
            }
            map["ScaleTimerInfos"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ScaleTimerInfos"] as? [Any?] {
            var tmp : [SetDesktopGroupScaleTimerRequest.ScaleTimerInfos] = []
            for v in value {
                if v != nil {
                    var model = SetDesktopGroupScaleTimerRequest.ScaleTimerInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.scaleTimerInfos = tmp
        }
    }
}

public class SetDesktopGroupScaleTimerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDesktopGroupScaleTimerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDesktopGroupScaleTimerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDesktopGroupScaleTimerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDesktopGroupTimerRequest : Tea.TeaModel {
    public var cronExpression: String?

    public var desktopGroupId: String?

    public var force: Bool?

    public var regionId: String?

    public var resetType: Int32?

    public var timerType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cronExpression != nil {
            map["CronExpression"] = self.cronExpression!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resetType != nil {
            map["ResetType"] = self.resetType!
        }
        if self.timerType != nil {
            map["TimerType"] = self.timerType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CronExpression"] as? String {
            self.cronExpression = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResetType"] as? Int32 {
            self.resetType = value
        }
        if let value = dict["TimerType"] as? Int32 {
            self.timerType = value
        }
    }
}

public class SetDesktopGroupTimerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDesktopGroupTimerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDesktopGroupTimerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDesktopGroupTimerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDesktopGroupTimerStatusRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var regionId: String?

    public var status: Int32?

    public var timerType: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.timerType != nil {
            map["TimerType"] = self.timerType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["TimerType"] as? Int32 {
            self.timerType = value
        }
    }
}

public class SetDesktopGroupTimerStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDesktopGroupTimerStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDesktopGroupTimerStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDesktopGroupTimerStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDesktopMaintenanceRequest : Tea.TeaModel {
    public var desktopIds: [String]?

    public var mode: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopIds != nil {
            map["DesktopIds"] = self.desktopIds!
        }
        if self.mode != nil {
            map["Mode"] = self.mode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopIds"] as? [String] {
            self.desktopIds = value
        }
        if let value = dict["Mode"] as? String {
            self.mode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SetDesktopMaintenanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDesktopMaintenanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDesktopMaintenanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDesktopMaintenanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDirectorySsoStatusRequest : Tea.TeaModel {
    public var directoryId: String?

    public var enableSso: Bool?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.enableSso != nil {
            map["EnableSso"] = self.enableSso!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["EnableSso"] as? Bool {
            self.enableSso = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SetDirectorySsoStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDirectorySsoStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDirectorySsoStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDirectorySsoStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetIdpMetadataRequest : Tea.TeaModel {
    public var directoryId: String?

    public var idpMetadata: String?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.idpMetadata != nil {
            map["IdpMetadata"] = self.idpMetadata!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DirectoryId"] as? String {
            self.directoryId = value
        }
        if let value = dict["IdpMetadata"] as? String {
            self.idpMetadata = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SetIdpMetadataResponseBody : Tea.TeaModel {
    public var idpEntityId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.idpEntityId != nil {
            map["IdpEntityId"] = self.idpEntityId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IdpEntityId"] as? String {
            self.idpEntityId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetIdpMetadataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetIdpMetadataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetIdpMetadataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetOfficeSiteSsoStatusRequest : Tea.TeaModel {
    public var enableSso: Bool?

    public var officeSiteId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableSso != nil {
            map["EnableSso"] = self.enableSso!
        }
        if self.officeSiteId != nil {
            map["OfficeSiteId"] = self.officeSiteId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableSso"] as? Bool {
            self.enableSso = value
        }
        if let value = dict["OfficeSiteId"] as? String {
            self.officeSiteId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class SetOfficeSiteSsoStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetOfficeSiteSsoStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetOfficeSiteSsoStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetOfficeSiteSsoStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetUserProfilePathRulesRequest : Tea.TeaModel {
    public class UserProfilePathRule : Tea.TeaModel {
        public class BlackPath : Tea.TeaModel {
            public var path: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class WhitePaths : Tea.TeaModel {
            public var path: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var blackPath: SetUserProfilePathRulesRequest.UserProfilePathRule.BlackPath?

        public var whitePaths: [SetUserProfilePathRulesRequest.UserProfilePathRule.WhitePaths]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.blackPath?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.blackPath != nil {
                map["BlackPath"] = self.blackPath?.toMap()
            }
            if self.whitePaths != nil {
                var tmp : [Any] = []
                for k in self.whitePaths! {
                    tmp.append(k.toMap())
                }
                map["WhitePaths"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BlackPath"] as? [String: Any?] {
                var model = SetUserProfilePathRulesRequest.UserProfilePathRule.BlackPath()
                model.fromMap(value)
                self.blackPath = model
            }
            if let value = dict["WhitePaths"] as? [Any?] {
                var tmp : [SetUserProfilePathRulesRequest.UserProfilePathRule.WhitePaths] = []
                for v in value {
                    if v != nil {
                        var model = SetUserProfilePathRulesRequest.UserProfilePathRule.WhitePaths()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.whitePaths = tmp
            }
        }
    }
    public var desktopGroupId: String?

    public var regionId: String?

    public var userProfilePathRule: [SetUserProfilePathRulesRequest.UserProfilePathRule]?

    public var userProfileRuleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userProfilePathRule != nil {
            var tmp : [Any] = []
            for k in self.userProfilePathRule! {
                tmp.append(k.toMap())
            }
            map["UserProfilePathRule"] = tmp
        }
        if self.userProfileRuleType != nil {
            map["UserProfileRuleType"] = self.userProfileRuleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserProfilePathRule"] as? [Any?] {
            var tmp : [SetUserProfilePathRulesRequest.UserProfilePathRule] = []
            for v in value {
                if v != nil {
                    var model = SetUserProfilePathRulesRequest.UserProfilePathRule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userProfilePathRule = tmp
        }
        if let value = dict["UserProfileRuleType"] as? String {
            self.userProfileRuleType = value
        }
    }
}

public class SetUserProfilePathRulesShrinkRequest : Tea.TeaModel {
    public var desktopGroupId: String?

    public var regionId: String?

    public var userProfilePathRuleShrink: String?

    public var userProfileRuleType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.userProfilePathRuleShrink != nil {
            map["UserProfilePathRule"] = self.userProfilePathRuleShrink!
        }
        if self.userProfileRuleType != nil {
            map["UserProfileRuleType"] = self.userProfileRuleType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["UserProfilePathRule"] as? String {
            self.userProfilePathRuleShrink = value
        }
        if let value = dict["UserProfileRuleType"] as? String {
            self.userProfileRuleType = value
        }
    }
}

public class SetUserProfilePathRulesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetUserProfilePathRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetUserProfilePathRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetUserProfilePathRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class StartDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var osUpdate: Bool?

    public var regionId: String?

    public var stoppedMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.osUpdate != nil {
            map["OsUpdate"] = self.osUpdate!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.stoppedMode != nil {
            map["StoppedMode"] = self.stoppedMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["OsUpdate"] as? Bool {
            self.osUpdate = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["StoppedMode"] as? String {
            self.stoppedMode = value
        }
    }
}

public class StopDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StopDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopInvocationRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var invokeId: String?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.invokeId != nil {
            map["InvokeId"] = self.invokeId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["InvokeId"] as? String {
            self.invokeId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class StopInvocationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class StopInvocationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopInvocationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopInvocationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [TagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class TagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TransferTaskApprovalCallbackRequest : Tea.TeaModel {
    public var ossBucketName: String?

    public var ossBucketRegionId: String?

    public var result: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ossBucketName != nil {
            map["OssBucketName"] = self.ossBucketName!
        }
        if self.ossBucketRegionId != nil {
            map["OssBucketRegionId"] = self.ossBucketRegionId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OssBucketName"] as? String {
            self.ossBucketName = value
        }
        if let value = dict["OssBucketRegionId"] as? String {
            self.ossBucketRegionId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class TransferTaskApprovalCallbackResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TransferTaskApprovalCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TransferTaskApprovalCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TransferTaskApprovalCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnbindConfigGroupRequest : Tea.TeaModel {
    public class ResourceInfos : Tea.TeaModel {
        public var productType: String?

        public var resourceId: String?

        public var resourceRegionId: String?

        public var resourceType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceRegionId != nil {
                map["ResourceRegionId"] = self.resourceRegionId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceRegionId"] as? String {
                self.resourceRegionId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
        }
    }
    public var regionId: String?

    public var resourceInfos: [UnbindConfigGroupRequest.ResourceInfos]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceInfos != nil {
            var tmp : [Any] = []
            for k in self.resourceInfos! {
                tmp.append(k.toMap())
            }
            map["ResourceInfos"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceInfos"] as? [Any?] {
            var tmp : [UnbindConfigGroupRequest.ResourceInfos] = []
            for v in value {
                if v != nil {
                    var model = UnbindConfigGroupRequest.ResourceInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourceInfos = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UnbindConfigGroupResponseBody : Tea.TeaModel {
    public var groupIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupIds != nil {
            map["GroupIds"] = self.groupIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupIds"] as? [String] {
            self.groupIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UnbindConfigGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnbindConfigGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnbindConfigGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnbindUserDesktopRequest : Tea.TeaModel {
    public var desktopAgentIds: [String]?

    public var desktopGroupId: String?

    public var desktopIds: [String]?

    public var force: Bool?

    public var reason: String?

    public var userDesktopIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopAgentIds != nil {
            map["DesktopAgentIds"] = self.desktopAgentIds!
        }
        if self.desktopGroupId != nil {
            map["DesktopGroupId"] = self.desktopGroupId!
        }
        if self.desktopIds != nil {
            map["DesktopIds"] = self.desktopIds!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.reason != nil {
            map["Reason"] = self.reason!
        }
        if self.userDesktopIds != nil {
            map["UserDesktopIds"] = self.userDesktopIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopAgentIds"] as? [String] {
            self.desktopAgentIds = value
        }
        if let value = dict["DesktopGroupId"] as? String {
            self.desktopGroupId = value
        }
        if let value = dict["DesktopIds"] as? [String] {
            self.desktopIds = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["Reason"] as? String {
            self.reason = value
        }
        if let value = dict["UserDesktopIds"] as? [String] {
            self.userDesktopIds = value
        }
    }
}

public class UnbindUserDesktopResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UnbindUserDesktopResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnbindUserDesktopResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnbindUserDesktopResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnlockVirtualMFADeviceRequest : Tea.TeaModel {
    public var regionId: String?

    public var serialNumber: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
    }
}

public class UnlockVirtualMFADeviceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UnlockVirtualMFADeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnlockVirtualMFADeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnlockVirtualMFADeviceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public var all: Bool?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tagKey: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateFotaTaskRequest : Tea.TeaModel {
    public var regionId: String?

    public var taskUid: String?

    public var userStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.taskUid != nil {
            map["TaskUid"] = self.taskUid!
        }
        if self.userStatus != nil {
            map["UserStatus"] = self.userStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TaskUid"] as? String {
            self.taskUid = value
        }
        if let value = dict["UserStatus"] as? String {
            self.userStatus = value
        }
    }
}

public class UpdateFotaTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateFotaTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateFotaTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateFotaTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadImageRequest : Tea.TeaModel {
    public var dataDiskSize: Int32?

    public var description_: String?

    public var enableSecurityCheck: Bool?

    public var gpuCategory: Bool?

    public var gpuDriverType: String?

    public var imageName: String?

    public var licenseType: String?

    public var osType: String?

    public var ossObjectPath: String?

    public var protocolType: String?

    public var regionId: String?

    public var systemDiskSize: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataDiskSize != nil {
            map["DataDiskSize"] = self.dataDiskSize!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enableSecurityCheck != nil {
            map["EnableSecurityCheck"] = self.enableSecurityCheck!
        }
        if self.gpuCategory != nil {
            map["GpuCategory"] = self.gpuCategory!
        }
        if self.gpuDriverType != nil {
            map["GpuDriverType"] = self.gpuDriverType!
        }
        if self.imageName != nil {
            map["ImageName"] = self.imageName!
        }
        if self.licenseType != nil {
            map["LicenseType"] = self.licenseType!
        }
        if self.osType != nil {
            map["OsType"] = self.osType!
        }
        if self.ossObjectPath != nil {
            map["OssObjectPath"] = self.ossObjectPath!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.systemDiskSize != nil {
            map["SystemDiskSize"] = self.systemDiskSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataDiskSize"] as? Int32 {
            self.dataDiskSize = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EnableSecurityCheck"] as? Bool {
            self.enableSecurityCheck = value
        }
        if let value = dict["GpuCategory"] as? Bool {
            self.gpuCategory = value
        }
        if let value = dict["GpuDriverType"] as? String {
            self.gpuDriverType = value
        }
        if let value = dict["ImageName"] as? String {
            self.imageName = value
        }
        if let value = dict["LicenseType"] as? String {
            self.licenseType = value
        }
        if let value = dict["OsType"] as? String {
            self.osType = value
        }
        if let value = dict["OssObjectPath"] as? String {
            self.ossObjectPath = value
        }
        if let value = dict["ProtocolType"] as? String {
            self.protocolType = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SystemDiskSize"] as? String {
            self.systemDiskSize = value
        }
    }
}

public class UploadImageResponseBody : Tea.TeaModel {
    public var imageId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UploadImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class VerifyCenRequest : Tea.TeaModel {
    public var cenId: String?

    public var cenOwnerId: Int64?

    public var cidrBlock: String?

    public var regionId: String?

    public var verifyCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cenId != nil {
            map["CenId"] = self.cenId!
        }
        if self.cenOwnerId != nil {
            map["CenOwnerId"] = self.cenOwnerId!
        }
        if self.cidrBlock != nil {
            map["CidrBlock"] = self.cidrBlock!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.verifyCode != nil {
            map["VerifyCode"] = self.verifyCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CenId"] as? String {
            self.cenId = value
        }
        if let value = dict["CenOwnerId"] as? Int64 {
            self.cenOwnerId = value
        }
        if let value = dict["CidrBlock"] as? String {
            self.cidrBlock = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["VerifyCode"] as? String {
            self.verifyCode = value
        }
    }
}

public class VerifyCenResponseBody : Tea.TeaModel {
    public class RouteEntries : Tea.TeaModel {
        public var destinationCidrBlock: String?

        public var nextHopInstanceId: String?

        public var regionId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.destinationCidrBlock != nil {
                map["DestinationCidrBlock"] = self.destinationCidrBlock!
            }
            if self.nextHopInstanceId != nil {
                map["NextHopInstanceId"] = self.nextHopInstanceId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DestinationCidrBlock"] as? String {
                self.destinationCidrBlock = value
            }
            if let value = dict["NextHopInstanceId"] as? String {
                self.nextHopInstanceId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var cidrBlocks: [String]?

    public var requestId: String?

    public var routeEntries: [VerifyCenResponseBody.RouteEntries]?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cidrBlocks != nil {
            map["CidrBlocks"] = self.cidrBlocks!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routeEntries != nil {
            var tmp : [Any] = []
            for k in self.routeEntries! {
                tmp.append(k.toMap())
            }
            map["RouteEntries"] = tmp
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CidrBlocks"] as? [String] {
            self.cidrBlocks = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RouteEntries"] as? [Any?] {
            var tmp : [VerifyCenResponseBody.RouteEntries] = []
            for v in value {
                if v != nil {
                    var model = VerifyCenResponseBody.RouteEntries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.routeEntries = tmp
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class VerifyCenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VerifyCenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = VerifyCenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class WakeupDesktopsRequest : Tea.TeaModel {
    public var desktopId: [String]?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.desktopId != nil {
            map["DesktopId"] = self.desktopId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DesktopId"] as? [String] {
            self.desktopId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class WakeupDesktopsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class WakeupDesktopsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: WakeupDesktopsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = WakeupDesktopsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
